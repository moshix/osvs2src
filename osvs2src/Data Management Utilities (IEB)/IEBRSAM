         TITLE 'IEBRSAM - IEBCOPY READ ROUTINE FOR UNLOADED DATA SETS'  00010000
         LCLA  &T,&SPN                                            0001  00020000
.@001    ANOP                                                     0001  00030000
IEBRSAM  CSECT ,                                                  0001  00040000
         STM   @E,@C,12(@D)                                       0001  00050000
         BALR  @B,0                                               0001  00060000
@PSTART  DS    0H                                                 0001  00070000
         USING @PSTART+00000,@B                                   0001  00080000
         ST    @D,@SAV001+4                                       0001  00090000
         LA    @F,@SAV001                                         0001  00100000
         ST    @F,8(0,@D)                                         0001  00110000
         LR    @D,@F                                              0001  00120000
******************************APARS FIXED****************************** 00130000
*                                                                     * 00140000
*A263500-263800,270500,433500                @YA14033-@XA15454-@ZA13782 00150000
*                                                                     * 00160000
*********************************************************************** 00170000
         USING IEBMCA,MCABASE          ESTABLISH ADDRESSABILITY         00180000
         LA    DCBA,LOADDCB                                             00190000
         USING IHADCB,DCBA                                              00200000
         B     AROUND                                          @ZA13782 00210000
         DC    C'IEBRSAM-OZ13782'                              @ZA13782 00220000
         DS    0F                                              @ZA13782 00230000
AROUND   EQU   *                                               @ZA13782 00240000
         DS    0H                                                       00250000
*         WSFLAG(5)='1'B;               /* INDICATE READING           * 00260000
         OI    WSFLAG,B'00001000'                                 0036  00270000
*         FLG2(3)='0'B;                 /* ASURE FLAG INDIC NO MORE TO  00280000
*                                          READ IS OFF                * 00290000
         NI    FLG2,B'11011111'                                   0037  00300000
*         RDNXT=READNEXT-8;             /* PTR TO WHERE TO START READ * 00310000
         L     @F,READNEXT                                        0038  00320000
         SH    @F,@D1                                             0038  00330000
         ST    @F,RDNXT                                           0038  00340000
*         RDNXT=RDNXT&'00FFFFFF'X;  /* CLEAR HIGH ORDER BYTE @ZA13782 * 00350000
         NC    RDNXT(4),@X3                                       0039  00360000
*                                                                       00370000
*                                                                       00380000
* /******************************************************************** 00390000
* /* NOW A BLOCK OF DATA CAN BE READ INTO THE BUFFER                  * 00400000
* /******************************************************************** 00410000
*                                                                       00420000
* RSAM0006: CALL READBLK;                                               00430000
RSAM0006 BAL   @E,READBLK                                         0040  00440000
*                                                                       00450000
* /******************************************************************** 00460000
* /* EACH RECORD READ IS TESTED FOR END OF DATA AT THIS POINT         * 00470000
* /******************************************************************** 00480000
* RSAM0012:;                                                            00490000
*         /*----------------------------------------------------------* 00500000
*         /* NOW THAT A RECORD HAS BEEN READ INTO THE BUFFER,A TEST IS* 00510000
*         /* MADE TO SEE IF THERE ARE MORE DIRECTORY BLOCKS TO BE READ* 00520000
*         /* IF DATA LENGTH OF THE DIRECTORY BLOCK IS ZERO THERE      * 00530000
*         /* IS NO MORE TO BE READ OTHERWISE AN OTHER BLOCK EXISTS    * 00540000
*         /*----------------------------------------------------------* 00550000
*                                                                       00560000
*         IF DATA ^= '0000'X            /*  IS KEY + DATA LENGHT ZERO * 00570000
*            THEN                       /* NO                         * 00580000
RSAM0012 L     @1,REDAD                                           0042  00590000
         CLC   10(2,@1),@X4                                       0042  00600000
         BC    08,@9FF                                            0042  00610000
*              DO;                      /* PREPARE FOR TESTING NEXT     00620000
*                                          BLOCK AND POSSIBLY READING   00630000
*                                          MORE BLOCKS                * 00640000
*                                                                       00650000
*           /*--------------------------------------------------------* 00660000
*           /* NOW THERE IS A POINTER TO THE NEXT DIR BLOCK,A TEST IS * 00670000
*           /* MADE TO SEE IF THAT BLOCK HAS ALREADY BEEN READ        * 00680000
*           /*--------------------------------------------------------* 00690000
*                                                                       00700000
*           IF REDAD+276 < BLKEX        /* READ ANOTHER DIR BLOCK     * 00710000
*              THEN                     /* YES                        * 00720000
         LA    @F,276                                             0044  00730000
         A     @F,REDAD                                           0044  00740000
         C     @F,BLKEX                                           0044  00750000
         BC    10,@9FE                                            0044  00760000
*                DO;                                                    00770000
*                  REDAD=REDAD + 276;   /* POINT TO NEXT DIR BLOCK    * 00780000
         LA    @F,276                                             0046  00790000
         A     @F,REDAD                                           0046  00800000
         ST    @F,REDAD                                           0046  00810000
*                  GO TO RSAM0012;      /* SEE IF IT IS THE LAST      * 00820000
         BC    15,RSAM0012                                        0047  00830000
*                END;                                                   00840000
*              ELSE;                    /* NO  READ IT                * 00850000
@9FE     EQU   *                                                  0049  00860000
*                  RDEND = RDNXT +      /* POINT TO END OF NEXT POSS  * 00870000
*                         DCBBLKSI;     /* BLOCK IN THE BUFFER        * 00880000
@9FD     LH    @F,DCBBLKSI                                        0050  00890000
         A     @F,RDNXT                                           0050  00900000
         ST    @F,RDEND                                           0050  00910000
*                                                                       00920000
*           /*--------------------------------------------------------* 00930000
*           /* NOW AN OTHER DIR BLOCK HAS TO BE READ,A TEST IS MADE TO* 00940000
*           /* SEE WHETHER IT WILL FIT IN THE BUFFER                  * 00950000
*           /*--------------------------------------------------------* 00960000
*                                                                       00970000
*           IF RDEND <= END2ND2         /* WILL NEXT READ FIT IN BUF  * 00980000
*              THEN                     /* YES                        * 00990000
         L     @F,END2ND2                                         0051  01000000
         C     @F,RDEND                                           0051  01010000
*                  GO TO RSAM0006;      /* READ ANOTHER BLOCK         * 01020000
         BC    10,RSAM0006                                        0052  01030000
         BC    15,@9FC                                            0055  01040000
*              ELSE;                    /* NO  HAVE THIS BUF PROCESSED* 01050000
*              END;                                                     01060000
*            ELSE                       /* YES KEY AND DATA LEN ZERO  * 01070000
*                FLG2(3)='1'B;          /* INDIC NO MORE TO READ      * 01080000
@9FF     OI    FLG2,B'00100000'                                   0055  01090000
*         F='80'X+ '40'X;               /* INDIC LAST REC IN ANY BUF  * 01100000
@9FC     LA    @F,X'40'                                           0056  01110000
         LA    @0,X'80'                                           0056  01120000
         AR    @F,@0                                              0056  01130000
         L     @1,REDAD                                           0056  01140000
         STC   @F,0(0,@1)                                         0056  01150000
*         RETURN;                       /* GO BACK TO CALLER          * 01160000
         BC    15,@EL01                                           0057  01170000
* /******************************************************************** 01180000
* /* AT THIS ENTRY OF THE READ ROUTINE MEMBER DATA IS READ INTO THE   * 01190000
* /* BUFFER UNTIL THE BUFFER IS FILLED OR UNTIL THE END OF THE MEMBER.* 01200000
* /* ALSO THE NOTE LIST IF ANY IS PLACED INTO THE NOTE LIST AREA.     * 01210000
* /******************************************************************** 01220000
*                                                                       01230000
* IEBRSAM1: ENTRY;                                                      01240000
IEBRSAM1 STM   @E,@C,12(@D)                                       0058  01250000
         BALR  @B,0                                               0058  01260000
         LA    @F,IEBRSAM1-IEBRSAM                                0058  01270000
         SR    @B,@F                                              0058  01280000
         ST    @D,@SAV001+4                                       0058  01290000
         LA    @F,@SAV001                                         0058  01300000
         ST    @F,8(0,@D)                                         0058  01310000
         LR    @D,@F                                              0058  01320000
*                                                                       01330000
*           WSFLAG(5)='1'B;             /* INDICATE READING           * 01340000
@9FB     OI    WSFLAG,B'00001000'                                 0059  01350000
*           SECAV='0'B;                 /* INDIC 2ND BUF NOT AVAIL    * 01360000
         NI    SECAV,B'01111111'                                  0060  01370000
*           FLG2(3)='0'B;               /* ASSURE FLAG INDIC NO MORE    01380000
*                                          TO READ IS OFF             * 01390000
         NI    FLG2,B'11011111'                                   0061  01400000
*                                                                       01410000
*           /********************************************************** 01420000
*           /* TO BE ABLE TO GET THE KEY LENGTH AND THE DCBFDAD FIELD * 01430000
*           /* OF THE INPUT DCB REGISTER 6 MUST CONTAIN THE INPUT     * 01440000
*           /* DCB ADDRESS.                                           * 01450000
*           /********************************************************** 01460000
*                                                                       01470000
*           GENERATE;                                                   01480000
         LA    DCBA,INDCB              ADDRESS OF INPUT DCB             01490000
         DS    0H                                                       01500000
*           FDAD=DCBFDAD;               /* SAVE VALUE OF DCBFDAD FOR    01510000
*                                          THIS MEMBER                * 01520000
         MVC   FDAD(8),DCBFDAD                                    0063  01530000
*           BLKRD=IBLKSIZE +            /* MAXIMUM SIZE OF INPUT BLOCK* 01540000
*                  DCBKEYLE +           /* IS INPUT BLOCKSIZE + KEY   * 01550000
*                   12 +                /* LENGTH + COUNT LENGTH +    * 01560000
*                    8;                 /* RECORD DESCRIPTOR LENGTH   * 01570000
         LA    @F,8                                               0064  01580000
         AH    @F,@D2                                             0064  01590000
         SR    @0,@0                                              0064  01600000
         IC    @0,DCBKEYLE                                        0064  01610000
         AR    @F,@0                                              0064  01620000
         AH    @F,IBLKSIZE                                        0064  01630000
         ST    @F,BLKRD                                           0064  01640000
*                                                                       01650000
*           /********************************************************** 01660000
*           /* NOW THERE IS A NEED TO FIND OUT IF THE OUTPUT DATA     * 01670000
*           /* SET IS TRACK OVERFLOW AS THEN ONLY THE FIRST BUFFER MAY* 01680000
*           /* BE USED.                                               * 01690000
*           /********************************************************** 01700000
*                                                                       01710000
*           GENERATE;                                                   01720000
         LA    DCBA,OUTDCB             DCB OF OUTPUT PDS                01730000
         DS    0H                                                       01740000
*           RECFMO=DCBRECFM;            /* SAVE RECORD FORMAT         * 01750000
         MVC   RECFMO(1),DCBRECFM                                 0066  01760000
*                                                                       01770000
*           /********************************************************** 01780000
*           /* NOW IT IS NECESSARY TO KNOW THE BLOCKSIZE OF THE DATA  * 01790000
*           /* SET TO BE LOADED.                                      * 01800000
*           /********************************************************** 01810000
*                                                                       01820000
*           GENERATE;                                                   01830000
         LA    DCBA,LOADDCB            ADDRESS OF LOAD DCB              01840000
         DS    0H                                                       01850000
*                                                                       01860000
*           /*--------------------------------------------------------* 01870000
*           /* NOW THE BIGGER OF THE MAXIMUM INPUT BLOCK AND THE      * 01880000
*           /* UNLOADED DATA SET'S BLOCKSIZE IS NEEDED TO BE ABLE TO  * 01890000
*           /* DETERMINE WHETHER THE NEXT BLOCK TO BE READ WILL FIT   * 01900000
*           /* INTO THE BUFFER.                                       * 01910000
*           /*--------------------------------------------------------* 01920000
*                                                                       01930000
*           IF BLKRD < DCBBLKSI         /* PDS RECORD LESS THAN         01940000
*                                          UNLOADED DS BLOCKSIZE      * 01950000
*              THEN                     /* YES                        * 01960000
         LH    @F,DCBBLKSI                                        0068  01970000
         C     @F,BLKRD                                           0068  01980000
         BC    12,@9FA                                            0068  01990000
*                  BLKRD=DCBBLKSI;      /* USE UNLOADED DS BLOCKSIZE  * 02000000
         ST    @F,BLKRD                                           0069  02010000
         BC    15,@9F9                                            0070  02020000
*              ELSE;                    /* NO - USE PDS BLOCK LENGTH  * 02030000
@9FA     EQU   *                                                  0070  02040000
*                                                                       02050000
*           /********************************************************** 02060000
*           /* NOW BUFFER DELIMITATIONS HAVE TO BE MADE TO READ IN    * 02070000
*           /* MEMBER DATA.                                           * 02080000
*           /********************************************************** 02090000
*                                                                       02100000
*           /*--------------------------------------------------------* 02110000
*           /* A TEST IS MADE TO SEE IF BOTH BUFFERS ARE AVAILLABLE   * 02120000
*           /* FOR MEMBER DATA OR WHETHER ONE HAS TO BE RESERVED FOR  * 02130000
*           /* FUTURE PROCESSING(REBLOCKING-TRACK OVERFLOW )          * 02140000
*           /*--------------------------------------------------------* 02150000
*                                                                       02160000
*           IF FLG1(3)='0'B & RECFMO(3)='0'B         /* ALL BUF AVAIL * 02170000
*              THEN                     /* YES                        * 02180000
@9F9     TM    FLG1,B'00100000'                                   0071  02190000
         BC    05,@9F8                                            0071  02200000
         TM    RECFMO,B'00100000'                                 0071  02210000
         BC    05,@9F7                                            0071  02220000
*                                                                       02230000
*             /*------------------------------------------------------* 02240000
*             /* BOTH BUFFERS ARE AVAILLABLE,A TEST IS NOW MADE TO SEE* 02250000
*             /* IF THEY ARE CONTIGUOUS IN WHICH CASE THEY CAN BE     * 02260000
*             /* CONSIDERED AS ONE IF NOT THEY HAVE TO BE FILLED      * 02270000
*             /* SEPERATELY                                           * 02280000
*             /*------------------------------------------------------* 02290000
*                                                                       02300000
*             IF FLG1(1)='1'B           /* ARE BUFFERS CONTIGUOUS     * 02310000
*                THEN                   /* NO                         * 02320000
         TM    FLG1,B'10000000'                                   0072  02330000
         BC    12,@9F6                                            0072  02340000
*                                                                       02350000
*               /*----------------------------------------------------* 02360000
*               /* NOW A TEST HAS TO BE MADE TO SEE IF PROCESSING     * 02370000
*               /* ALREADY OCCURS IN THE 2ND BUFFER.                  * 02380000
*               /*----------------------------------------------------* 02390000
*                                                                       02400000
*               IF FLG1(2)='0'B         /* PROCESS IN 2ND BUFFER      * 02410000
*                  THEN                 /* NO                         * 02420000
         TM    FLG1,B'01000000'                                   0073  02430000
         BC    05,@9F5                                            0073  02440000
*                    DO;                /* FILL 1ST BUFFER            * 02450000
*                      BUFEND=ENDFST1;  /* END FOR FILLING DATA       * 02460000
         MVC   BUFEND(4),ENDFST1                                  0075  02470000
*                      SECAV='1'B;      /* INDIC SEC BUFFER AVAILLABLE* 02480000
         OI    SECAV,B'10000000'                                  0076  02490000
         BC    15,@9F4                                            0078  02500000
*                    END;                                               02510000
*                  ELSE                 /* YES- PROCESS IN 2ND        * 02520000
*                      BUFEND=END2ND2;  /* END FOR FILLING DATA       * 02530000
@9F5     MVC   BUFEND(4),END2ND2                                  0078  02540000
*                ELSE                   /* YES- BUFFERS ARE CONTIG    * 02550000
*                    BUFEND=END2ND2;    /* END OF BUFFER AREA IS END    02560000
*                                          OF SECOND BUFFER           * 02570000
         BC    15,@9F3                                            0079  02580000
@9F6     MVC   BUFEND(4),END2ND2                                  0079  02590000
*              ELSE                     /* NO - FILL 1 BUF ONLY       * 02600000
*                  BUFEND=ENDFST1;      /* SET END OF 1ST BUFFER      * 02610000
         BC    15,@9F2                                            0080  02620000
@9F7     EQU   *                                                  0080  02630000
@9F8     MVC   BUFEND(4),ENDFST1                                  0080  02640000
*                                                                       02650000
* /******************************************************************** 02660000
* /* NOW BEFORE READING A BLOCK OF DATA THE READ ADDRESS IS SET TO    * 02670000
* /* EICHT BYTES BEFORE THE BUFFER AREA                               * 02680000
* /******************************************************************** 02690000
*                                                                       02700000
* RSAM1003:  RDNXT=READNEXT-8;          /* PTR TO WHERE TO START READ * 02710000
@9F2     EQU   *                                                  0081  02720000
RSAM1003 L     @F,READNEXT                                        0081  02730000
         SH    @F,@D1                                             0081  02740000
         ST    @F,RDNXT                                           0081  02750000
*         RDNXT=RDNXT&'00FFFFFF'X;  /* CLEAR HIGH ORDER BYTE @ZA13782 * 02760000
         NC    RDNXT(4),@X3                                       0082  02770000
*                                                                       02780000
* /******************************************************************** 02790000
* /* NOW THAT THE BUFFER DELIMITATIONS ARE SET UP, A BLOCK OF DATA    * 02800000
* /* CAN BE READ INTO THE BUFFER                                      * 02810000
* /******************************************************************** 02820000
*                                                                       02830000
* RSAM1006:  CALL READBLK;              /*  GO READ A BLOCK OF DATA   * 02840000
RSAM1006 BAL   @E,READBLK                                         0083  02850000
*                                                                       02860000
*           /*--------------------------------------------------------* 02870000
*           /* A BLOCK OF DATA IS IN THE BUFFER, A TEST HAS TO BE MADE* 02880000
*           /* TO SEE IF THIS MEMBER HAS A NOTE LIST.                 * 02890000
*           /*--------------------------------------------------------* 02900000
*                                                                       02910000
*           IF F(1:3)='111'B            /* IS IT A NOTE LIST          * 02920000
*              THEN                     /* YES                        * 02930000
         L     @1,REDAD                                           0084  02940000
         TM    0(@1),B'11100000'                                  0084  02950000
         BC    12,@9F1                                            0084  02960000
*                DO;                    /* MOVE IT TO NOTE LIST AREA  * 02970000
*                  CNT=1;               /* FIRST BYTE TO MOVE         * 02980000
         LA    @F,1                                               0086  02990000
         STH   @F,CNT                                             0086  03000000
*                  BYTRD=BLKEX - REDAD; /* LENGTH OF NOTE LIST        * 03010000
         L     @F,BLKEX                                           0087  03020000
         S     @F,REDAD                                           0087  03030000
         STH   @F,BYTRD                                           0087  03040000
*                                                                       03050000
* /******************************************************************** 03060000
* /* AS ONLY 256 BYTES CAN BE MOVED IN ONE INSTRUCTION AND AS THE     * 03070000
* /* NOTE LIST CAN BE LONGER A LOOP IS MADE TO MOVE A MAXIMUM OF      * 03080000
* /* 256 BYTES AT A TIME WHENEVER THIS IS NECESSARY                   * 03090000
* /******************************************************************** 03100000
*                                                                       03110000
* RSAM1007:;                             /* LOOP TO MOVE NOTE LIST    * 03120000
*             /*------------------------------------------------------* 03130000
*             /* TEST WETHER THE NUMBER OF BYTES TO MOVE IS BIGGER    * 03140000
*             /* THAN 256                                             * 03150000
*             /*------------------------------------------------------* 03160000
*             IF BYTRD > 256            /* TOO MUCH FOR ONE MOVE      * 03170000
*               THEN                    /* YES                        * 03180000
RSAM1007 LA    @F,256                                             0089  03190000
         CH    @F,BYTRD                                           0089  03200000
         BC    10,@9F0                                            0089  03210000
*                  DO;                  /* MOVE 256 AT A TIME         * 03220000
*                    NOTE(CNT:CNT+256-1)=       /* NOTE LIST WORK AREA* 03230000
*                       INAREA(CNT:CNT+256-1);       /* BUFFER AREA   * 03240000
         LH    @1,CNT                                             0091  03250000
         L     @5,REDAD                                           0091  03260000
         LA    @E,0(@1,@5)                                        0091  03270000
         BCTR  @E,0                                               0091  03280000
         LH    @7,@D3                                             0091  03290000
         AH    @7,@D4                                             0091  03300000
         AH    @7,CNT                                             0091  03310000
         SR    @7,@1                                              0091  03320000
         L     @C,ADNL                                            0091  03330000
         LA    @A,0(@1,@C)                                        0091  03340000
         BCTR  @A,0                                               0091  03350000
         EX    @7,@MVC                                            0091  03360000
*                    CNT=CNT + 256;     /* UPDATE MOVE ADDRESS        * 03370000
         LA    @F,256                                             0092  03380000
         AH    @F,CNT                                             0092  03390000
         STH   @F,CNT                                             0092  03400000
*                    BYTRD=BYTRD - 256;     /* BYTES LEFT TO MOVE     * 03410000
         LH    @F,BYTRD                                           0093  03420000
         SH    @F,@D4                                             0093  03430000
         STH   @F,BYTRD                                           0093  03440000
*                    GO TO RSAM1007;    /* SEE IF MORE TO MOVE        * 03450000
         BC    15,RSAM1007                                        0094  03460000
*                  END;                                                 03470000
*               ELSE;                   /* NO LESS THAN 256 TO MOVE   * 03480000
@9F0     EQU   *                                                  0096  03490000
*                  NOTE(CNT:CNT+BYTRD-1)=  /* NOTE LIST WORK AREA     * 03500000
*                  INAREA(CNT:CNT+BYTRD-1);  /* NOTE LIST IN BUFFER   * 03510000
@9EF     LH    @1,CNT                                             0097  03520000
         L     @5,REDAD                                           0097  03530000
         LA    @E,0(@1,@5)                                        0097  03540000
         BCTR  @E,0                                               0097  03550000
         LH    @7,@D3                                             0097  03560000
         AH    @7,BYTRD                                           0097  03570000
         AH    @7,CNT                                             0097  03580000
         SR    @7,@1                                              0097  03590000
         L     @C,ADNL                                            0097  03600000
         LA    @A,0(@1,@C)                                        0097  03610000
         BCTR  @A,0                                               0097  03620000
         EX    @7,@MVC                                            0097  03630000
*                  GO TO RSAM1003;      /* GO TO READ THE MEMBER DATA * 03640000
         BC    15,RSAM1003                                        0098  03650000
*                END;                                                   03660000
*              ELSE;                    /* NO - IT IS MEMBER DATA     * 03670000
@9F1     EQU   *                                                  0100  03680000
*                                                                       03690000
*           /*--------------------------------------------------------* 03700000
*           /* NOW THAT A BLOCK OF DATA HAS BEEN READ INTO THE BUFFER * 03710000
*           /* A TEST IS MADE TO SEE IF IT IS THE MEMBER THAT IS      * 03720000
*           /* NEEDED BY COMPARING THE COUNT FIELDS.                  * 03730000
*           /*--------------------------------------------------------* 03740000
*                                                                       03750000
*           IF MBBCCHHR <= FDAD         /* IS THIS THE WANTED DATA    * 03760000
*              THEN                     /* NO                         * 03770000
@9EE     L     @1,REDAD                                           0101  03780000
         CLC   1(8,@1),FDAD                                       0101  03790000
*                  GO TO RSAM1003;      /* GO READ NEXT DATA BLOCK    * 03800000
         BC    12,RSAM1003                                        0102  03810000
*              ELSE                     /* YES - WANTED MEMBER DATA   * 03820000
*                  GO TO RSAM1012;      /* GO ANALYSE MEMBER DATA     * 03830000
         BC    15,RSAM1012                                        0103  03840000
*                                                                       03850000
* /******************************************************************** 03860000
* /* A NEW BLOCK OF DATA HAS TO BE READ AT THIS POINT                 * 03870000
* /******************************************************************** 03880000
*                                                                       03890000
* RSAM1008:;                                                            03900000
*           CALL READBLK;               /* READ A BLOCK OF DATA       * 03910000
RSAM1008 BAL   @E,READBLK                                         0105  03920000
*                                                                       03930000
*                                                                       03940000
* /******************************************************************** 03950000
* /* MEMBER DATA IS NOW IN THE BUFFER,A TEST IS MADE TO SEE IF THE    * 03960000
* /* END OF THE MEMBER HAS BEEN REACHED                               * 03970000
* /******************************************************************** 03980000
* RSAM1012:   IF DATA='0000'X           /* IS DATA LENTHT ZERO        * 03990000
*                THEN                   /* YES                        * 04000000
RSAM1012 L     @1,REDAD                                           0106  04010000
         CLC   10(2,@1),@X4                                       0106  04020000
         BC    07,@9ED                                            0106  04030000
*                  DO;                                                  04040000
*                    FLG2(3)='1'B;      /* INDIC NO MORE TO READ      * 04050000
         OI    FLG2,B'00100000'                                   0108  04060000
         BC    15,@9EC                                            0110  04070000
*                  END;                                                 04080000
*                ELSE                   /* NO NOT END OF DATA         * 04090000
*                  DO;                  /* GET LENGTH OF THIS RECORD  * 04100000
*                    AWRK=KEY + DATA +  /* LENGHT OF THIS RECORD IS   * 04110000
*                            12;        /* KEY + DATA + FIXED LENGHT  * 04120000
@9ED     LA    @F,12                                              0111  04130000
         L     @1,REDAD                                           0111  04140000
         MVC   @TEMP2+2(2),10(@1)                                 0111  04150000
         A     @F,@TEMP2                                          0111  04160000
         SR    @0,@0                                              0111  04170000
         IC    @0,9(0,@1)                                         0111  04180000
         AR    @F,@0                                              0111  04190000
         STH   @F,AWRK                                            0111  04200000
*                                                                       04210000
*               /*----------------------------------------------------* 04220000
*               /* NOW A TEST TO SEE IF MORE DATA RECORDS HAVE BEEN   * 04230000
*               /* READ HAS TO BE MADE.                               * 04240000
*               /*----------------------------------------------------* 04250000
*                                                                       04260000
*               IF REDAD+AWRK < BLKEX   /* HAS MORE DATA BEEN READ    * 04270000
*                  THEN                 /* YES                        * 04280000
         A     @F,REDAD                                           0112  04290000
         C     @F,BLKEX                                           0112  04300000
         BC    10,@9EB                                            0112  04310000
*                    DO;                                                04320000
*                      REDAD=REDAD+AWRK; /* POINT TO NEXT DATA RECORD * 04330000
         LH    @F,AWRK                                            0114  04340000
         A     @F,REDAD                                           0114  04350000
         ST    @F,REDAD                                           0114  04360000
*                      GO TO RSAM1012;  /* SEE IF THIS ONE IS EOD     * 04370000
         BC    15,RSAM1012                                        0115  04380000
*                    END;                                               04390000
*                  ELSE                 /* NO                         * 04400000
*                    DO;                /* NEED TO READ MORE DATA     * 04410000
*                      RDEND=RDNXT +    /* END OF NEXT POSSIBLE BLOCK * 04420000
*                          BLKRD;       /* MAXIMUM SIZE OF BLOCK      * 04430000
@9EB     L     @F,BLKRD                                           0118  04440000
         A     @F,RDNXT                                           0118  04450000
         ST    @F,RDEND                                           0118  04460000
*                                                                       04470000
*                 /*--------------------------------------------------* 04480000
*                 /* NOW A TEST HAS TO BE MADE TO SEE IF THE NEXT     * 04490000
*                 /* BLOCK WHEN READ WILL FIT INTO THE BUFFER.        * 04500000
*                 /*--------------------------------------------------* 04510000
*                                                                       04520000
*                 IF RDEND <= BUFEND    /* NEXT BLOCK FIT INTO BUFFER * 04530000
*                    THEN               /* YES                        * 04540000
         L     @F,BUFEND                                          0119  04550000
         C     @F,RDEND                                           0119  04560000
*                        GO TO RSAM1008;/* GO AND READ IT             * 04570000
         BC    10,RSAM1008                                        0120  04580000
*                    ELSE               /* NO                         * 04590000
*                      DO;              /* IT DOES NOT FIT            * 04600000
*                                                                       04610000
*                   /*------------------------------------------------* 04620000
*                   /* NOW THAT THERE IS NO MORE SPACE IN THIS BUFFER * 04630000
*                   /* A TEST IS MADE TO SEE IF THE SECOND BUF IS     * 04640000
*                   /* STILL AVAILLABLE AND IF IT MAY BE USED         * 04650000
*                   /*------------------------------------------------* 04660000
*                                                                       04670000
*                   IF SECAV='1'B       /* 2ND BUFFER STILL AVAILLABLE* 04680000
*                      THEN             /* YES                        * 04690000
         TM    SECAV,B'10000000'                                  0122  04700000
         BC    12,@9E9                                            0122  04710000
*                        DO;            /* SET APPROPRIATE ADDRESSES  * 04720000
*                          RDNXT=BEGFST2-8;   /* BEGIN OF 2ND BUFFER  * 04730000
         L     @F,BEGFST2                                         0124  04740000
         SH    @F,@D1                                             0124  04750000
         ST    @F,RDNXT                                           0124  04760000
*                          BUFEND = END2ND2; /* END OF 2ND BUFFER     * 04770000
         MVC   BUFEND(4),END2ND2                                  0125  04780000
*                          F= '40'X;    /* INDIC LAST RECORD IN BUFFER* 04790000
         L     @1,REDAD                                           0126  04800000
         MVI   0(@1),X'40'                                        0126  04810000
*                          FLG1(2)='1'B;   /* INDIC PROCESS IN 2ND BUF* 04820000
         OI    FLG1,B'01000000'                                   0127  04830000
*                          SECAV='0'B;  /* 2ND BUF NO MORE AVAILLABLE * 04840000
         NI    SECAV,B'01111111'                                  0128  04850000
*                          GO TO RSAM1008; /* GO FILL SECOND BUFFER   * 04860000
         BC    15,RSAM1008                                        0129  04870000
*                        END;                                           04880000
*                      ELSE;            /* NO - 2ND BUFFER FULL       * 04890000
@9E9     EQU   *                                                  0131  04900000
*                      END;                                             04910000
@9E8     EQU   *                                                  0132  04920000
*                    END;                                               04930000
*                  END;                                                 04940000
@9EA     EQU   *                                                  0134  04950000
*                     F='40'X + '80'X;     /* INDIC LAST RECORD IN ANY  04960000
*                                             BUFFER                  * 04970000
@9EC     LA    @F,X'80'                                           0135  04980000
         LA    @0,X'40'                                           0135  04990000
         AR    @F,@0                                              0135  05000000
         L     @1,REDAD                                           0135  05010000
         STC   @F,0(0,@1)                                         0135  05020000
*                     RETURN;           /* GO BACK TO CALLER          * 05030000
* /******************************************************************** 05040000
* /* THIS NESTED PROCEDURE READS A BLOCK OF DATA, GIVES A POINTER     * 05050000
* /* TO THE END OF DATA READ, AND TELLS HOW MANY BYTES HAVE BEEN      * 05060000
* /* READ                                                             * 05070000
* /******************************************************************** 05080000
*                                                                       05090000
*                                                                       05100000
* READBLK:  PROCEDURE;                                                  05110000
@EL01    L     @D,4(0,@D)                                         0137  05120000
         LM    @E,@C,12(@D)                                       0137  05130000
         BCR   15,@E                                              0137  05140000
READBLK  STM   @E,@C,12(@D)                                       0137  05150000
         ST    @D,@SAV002+4                                       0137  05160000
         LA    @F,@SAV002                                         0137  05170000
         ST    @F,8(0,@D)                                         0137  05180000
         LR    @D,@F                                              0137  05190000
*                                                                       05200000
*           RESTRICT(4);                /* RESTRICT THIS REGISTER FOR   05210000
*                                          ADDRESSABILITY TO IEBMCA   * 05220000
*           RESTRICT(6);                /* HOLDS DCB ADDRESS          * 05230000
*           REDAD=RDNXT+8;              /* POINT TO 1ST RECORD IN       05240000
*                                          BLOCK READ                 * 05250000
         LA    @F,8                                               0140  05260000
         A     @F,RDNXT                                           0140  05270000
         ST    @F,REDAD                                           0140  05280000
*                                                                       05290000
* /******************************************************************** 05300000
* /* AT THIS POINT THE RECORD DESCRIPTOR WORD AREA IS SAVED AND A     * 05310000
* /* BLOCK OF DATA IS READ. IF THE BLOCK READ WAS A SEGMENT OF A PDS  * 05320000
* /* RECORD CONTROL COMES BACK HERE TO READ THE OTHER SEGMENTS.       * 05330000
* /******************************************************************** 05340000
* READ0006:;                                                            05350000
*           RECDESAV=VFIELD;            /* SAVE RECORD CONTROL FIELD  * 05360000
READ0006 L     @1,RDNXT                                           0142  05370000
         MVC   RECDESAV(8),0(@1)                                  0142  05380000
*                                                                       05390000
*           /********************************************************** 05400000
*           /* THE FOLLOWING GENERATE READS 1 BLOCK OF DATA AT A PLACE* 05410000
*           /* IN THE BUFFER POINTED TO BY RDNXT                      * 05420000
*           /********************************************************** 05430000
*                                                                       05440000
*           GENERATE;                                                   05450000
         L     RDA,RDNXT               GET ADDR WHERE TO READ IN        05460000
         READ  DECB,SF,LOADDCB,(RDA),MF=E READ 1 BLOCK                  05470000
         CHECK DECB                    CHECK FOR SUCCESSFULL READ       05480000
         DS    0H                                                       05490000
*                                                                       05500000
*           BLKEX=RDNXT + BLLA;         /* END OF BLOCK JUST READ     * 05510000
         L     @1,RDNXT                                           0144  05520000
         MVC   @TEMP2+2(2),0(@1)                                  0144  05530000
         L     @F,@TEMP2                                          0144  05540000
         A     @F,RDNXT                                           0144  05550000
         ST    @F,BLKEX                                           0144  05560000
*                                                                       05570000
*           /*--------------------------------------------------------* 05580000
*           /* A TEST IS NOW MADE TO SEE IF THE BLOCK JUST READ HOLDS * 05590000
*           /* A WHOLE PDS RECORD OR ONLY A SEGMENT OF A PDS RECORD   * 05600000
*           /* IN WHICH CASE THE OTHER SEGMENTS HAVE TO BE READ       * 05610000
*           /*--------------------------------------------------------* 05620000
*           IF SLLB ^= '0000'X          /* NORMAL BLOCK               * 05630000
*              THEN                     /* NO - SEGMENTED             * 05640000
         CLC   6(2,@1),@X4                                        0145  05650000
         BC    08,@9E7                                            0145  05660000
*                                                                       05670000
*             /*------------------------------------------------------* 05680000
*             /* NOW SEGMENTS OF PDS RECORDS ARE BEING READ, A TEST IS* 05690000
*             /* MADE TO SEE IF THE LAST SEGMENT HAS BEEN READ.       * 05700000
*             /*------------------------------------------------------* 05710000
*             IF SLLB ^= '8000'X        /* LAST SEGMENT OF DATA BLOCK * 05720000
*                THEN                   /* NO                         * 05730000
         CLC   6(2,@1),@X8                                        0146  05740000
         BC    08,@9E6                                            0146  05750000
*                  DO;                  /* READ OTHER SEGMENTS        * 05760000
*                    VFIELD=RECDESAV;   /* RESET CONTROL FIELD AREA   * 05770000
         MVC   0(8,@1),RECDESAV                                   0148  05780000
*                    RDNXT=BLKEX - 8;   /* UPDATE READ ADDRESS        * 05790000
         L     @F,BLKEX                                           0149  05800000
         SH    @F,@D1                                             0149  05810000
         ST    @F,RDNXT                                           0149  05820000
*                    GO TO READ0006;    /* READ NEXT SEGMENT          * 05830000
         BC    15,READ0006                                        0150  05840000
*                  END;                                                 05850000
*                ELSE;                  /* YES WHOLE BLOCK READ       * 05860000
@9E6     EQU   *                                                  0152  05870000
*                    VFIELD=RECDESAV;   /* RESET CONTROL FIELD AREA   * 05880000
@9E5     EQU   *                                                  0153  05890000
@9E7     L     @1,RDNXT                                           0153  05900000
         MVC   0(8,@1),RECDESAV                                   0153  05910000
*                    RDNXT=BLKEX - 8;   /* SET ADDR FOR NEXT READ     * 05920000
         L     @F,BLKEX                                           0154  05930000
         SH    @F,@D1                                             0154  05940000
         ST    @F,RDNXT                                           0154  05950000
*           END READBLK;                                                05960000
         BC    15,@EL01                                           0155  05970000
*         END IEBRSAM;                                                  05980000
@DATA1   EQU   *                                                        05990000
@0       EQU   00                  EQUATES FOR REGISTERS 0-15           06000000
@1       EQU   01                                                       06010000
@2       EQU   02                                                       06020000
@3       EQU   03                                                       06030000
@4       EQU   04                                                       06040000
@5       EQU   05                                                       06050000
@6       EQU   06                                                       06060000
@7       EQU   07                                                       06070000
@8       EQU   08                                                       06080000
@9       EQU   09                                                       06090000
@A       EQU   10                                                       06100000
@B       EQU   11                                                       06110000
@C       EQU   12                                                       06120000
@D       EQU   13                                                       06130000
@E       EQU   14                                                       06140000
@F       EQU   15                                                       06150000
@D1      DC    H'8'                                                     06160000
@D2      DC    H'12'                                                    06170000
@D3      DC    H'-1'                                                    06180000
@D4      DC    H'256'                                                   06190000
@MVC     MVC   0(1,@A),0(@E)                                            06200000
         DS    0F                                                       06210000
@X3      DC    X'00FFFFFF'                                              06220000
@X4      DC    X'0000'                                                  06230000
@X8      DC    X'8000'                                                  06240000
         DS    0D                                                       06250000
@DATA    EQU   *                                                        06260000
@SAV001  EQU   @DATA+00000000      72 BYTE(S) ON WORD                   06270000
REDAD    EQU   @DATA+00000072      FULLWORD POINTER                     06280000
BUFEND   EQU   @DATA+00000076      FULLWORD POINTER                     06290000
BLKRD    EQU   @DATA+00000080      FULLWORD INTEGER                     06300000
SECAV    EQU   @DATA+00000084      1 BIT(S) ON BYTE                     06310000
FDAD     EQU   @DATA+00000085      8 BYTE(S)                            06320000
AWRK     EQU   @DATA+00000094      HALFWORD INTEGER                     06330000
BLKEX    EQU   @DATA+00000096      FULLWORD POINTER                     06340000
RDEND    EQU   @DATA+00000100      FULLWORD POINTER                     06350000
RDNXT    EQU   @DATA+00000104      FULLWORD POINTER                     06360000
INAREA   EQU   00000000            12 BYTE(S)                           06370000
F        EQU   INAREA+00000000     8 BIT(S)                             06380000
MBBCCHHR EQU   INAREA+00000001     8 BYTE(S)                            06390000
KDD      EQU   INAREA+00000009     3 BYTE(S)                            06400000
KEY      EQU   INAREA+00000009     8 BIT(S)                             06410000
DATA     EQU   INAREA+00000010     16 BIT(S)                            06420000
BYTRD    EQU   @DATA+00000108      HALFWORD INTEGER                     06430000
CNT      EQU   @DATA+00000110      HALFWORD INTEGER                     06440000
VFIELD   EQU   00000000            8 BYTE(S)                            06450000
BLLA     EQU   VFIELD+00000000     2 BYTE(S)                            06460000
BLLB     EQU   VFIELD+00000002     2 BYTE(S)                            06470000
SLLA     EQU   VFIELD+00000004     2 BYTE(S)                            06480000
SLLB     EQU   VFIELD+00000006     2 BYTE(S)                            06490000
RECDESAV EQU   @DATA+00000112      8 BYTE(S)                            06500000
NOTE     EQU   00000000            4 BYTE(S)                            06510000
RECFMO   EQU   @DATA+00000120      8 BIT(S) ON BYTE                     06520000
         ENTRY IEBRSAM1                                                 06530000
@SAV002  EQU   @DATA+00000124      72 BYTE(S) ON WORD                   06540000
         DS    00000196C                                                06550000
@TEMPS   DS    0F                                                       06560000
@TEMP2   DC    F'0'                                                     06570000
DCBA     EQU   6                       ADDRESSABILITY TO INP DCB        06580000
MCABASE  EQU   4                       USED AS BASE REG FOR IEBMCA      06590000
RDA      EQU   6                       ADDR TO READ FROM                06600000
         READ  DECB,SF,MF=L                                             06610000
         DS    0F                                                       06620000
PATCHLN  EQU   (*-IEBRSAM)/20          5 PERCENT OF MODULE LENGHT       06630000
PATCH    DC    XL(PATCHLN)'00'         5 PERCENT PATCH AREA             06640000
IEBMCA   DSECT                         COMMON AREA DSECT                06650000
         IEBMCA                        MACRO FOR COMMON AREA DATA       06660000
         DCBD  DSORG=PS                                                 06670000
@DATEND  EQU   *                                                        06680000
@9F3     EQU   @9F2                                                     06690000
@EL02    EQU   @EL01                                                    06700000
@9F4     EQU   @9F3                                                     06710000
         END   IEBRSAM                                                  06720000
