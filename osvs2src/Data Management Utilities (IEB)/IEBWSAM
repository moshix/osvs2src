         TITLE 'IEBWSAM IEBCOPY WRITE ROUTINE FOR UNLOADED DATA SETS'   00010000
         LCLA  &T,&SPN                                            0001  00020000
.@001    ANOP                                                     0001  00030000
IEBWSAM  CSECT ,                                                  0001  00040000
         STM   @E,@C,12(@D)                                       0001  00050000
         BALR  @B,0                                               0001  00060000
@PSTART  DS    0H                                                 0001  00070000
         USING @PSTART+00000,@B                                   0001  00080000
         ST    @D,@SAV001+4                                       0001  00090000
         LA    @F,@SAV001                                         0001  00100000
         ST    @F,8(0,@D)                                         0001  00110000
         LR    @D,@F                                              0001  00120000
         USING IEBMCA,@4               ADDRESSABILITY TO IEBMCA         00130000
         USING IHADCB,@7               ADDRESSABILITY TO DCB FIELDS     00140000
         DS    0H                                                       00150000
*         WSFLAG(5)='0'B;               /* INDICATE WRITING           * 00160000
         NI    WSFLAG,B'11110111'                                 0037  00170000
*         REDAD=WRTNEXT;                /* ADDRESS OF AREA FROM WHERE   00180000
*                                          TO START WRITING           * 00190000
         MVC   REDAD(4),WRTNEXT                                   0038  00200000
*         NBTTR=0;                      /* SET TTR COUNTER TO ZERO    * 00210000
         SR    @F,@F                                              0039  00220000
         STH   @F,NBTTR                                           0039  00230000
*         WRCNT=8;                      /* INIT COUNTER OF NUMBER OF    00240000
*                                          BYTES TO WRITE TO EICHT    * 00250000
         LA    @F,8                                               0040  00260000
         STH   @F,WRCNT                                           0040  00270000
*                                                                       00280000
*         /*----------------------------------------------------------* 00290000
*         /* NOW A TEST IS MADE TO SEE IF WE ARE PROCESSING MEMBER    * 00300000
*         /* DATA OR DIRECTORY BLOCKS                                 * 00310000
*         /*----------------------------------------------------------* 00320000
*                                                                       00330000
*         IF TAG(2)='0'B                /* WRITING DIRECTORY          * 00340000
*            THEN                       /* YES                        * 00350000
         TM    TAG,B'01000000'                                    0041  00360000
*                GO TO WSAM0003;        /* WRITE OUT DIRECTORY        * 00370000
         BC    08,WSAM0003                                        0042  00380000
*            ELSE;                      /* NO-MEMBER DATA TO PROCESS  * 00390000
*                                                                       00400000
*         /*----------------------------------------------------------* 00410000
*         /* AS A NOTE LIST PRECEDES MEMBER DATA IN THE UNLOADED DATA * 00420000
*         /* SET A TEST IS MADE TO SEE IF THIS MEMBER HAS ONE.        * 00430000
*         /*----------------------------------------------------------* 00440000
*                                                                       00450000
*         IF WSFLAG(1)='1'B             /* USER TTR PRESENT           * 00460000
*            THEN                       /* YES                        * 00470000
         TM    WSFLAG,B'10000000'                                 0044  00480000
         BC    12,@9FF                                            0044  00490000
*              DO;                      /* SEE IF NOTE LIST PRESENT   * 00500000
*                WSFLAG(1)='0'B;        /* TURN OFF SWITCH INDIC USER   00510000
*                                          TTR'S PRESENT              * 00520000
         NI    WSFLAG,B'01111111'                                 0046  00530000
*                                                                       00540000
*           /*--------------------------------------------------------* 00550000
*           /* A TEST IS NOW MADE TO SEE IF THERE ARE AT LEAST 2 USER * 00560000
*           /* TTR'S                                                  * 00570000
*           /*--------------------------------------------------------* 00580000
*                                                                       00590000
*           IF CFLD(2)='1'B             /* 2 USER TTR'S PRESENT       * 00600000
*              THEN                     /* YES                        * 00610000
         L     @1,IDEAD                                           0047  00620000
         TM    11(@1),B'01000000'                                 0047  00630000
         BC    12,@9FE                                            0047  00640000
*                  TTRNB(7)='1'B;       /* SET TWO IN TTRN COUNTER    * 00650000
         OI    NBTTR+1,B'00000010'                                0048  00660000
*              ELSE;                    /* NO LESS THAN 2 USER TTR'S  * 00670000
@9FE     EQU   *                                                  0049  00680000
*                                                                       00690000
*           /*--------------------------------------------------------* 00700000
*           /* A TEST IS NOW MADE TO SEE IF THE NEXT BIT IN THE C     * 00710000
*           /* FIELD IS ALSO ON INDICATING ONE MORE USER TTR          * 00720000
*           /*--------------------------------------------------------* 00730000
*                                                                       00740000
*           IF CFLD(3)='1'B             /* ONE MORE USER TTR          * 00750000
*              THEN                     /* YES                        * 00760000
@9FD     TM    11(@1),B'00100000'                                 0050  00770000
         BC    12,@9FC                                            0050  00780000
*                  TTRNB(8)='1'B;       /* ADD ONE TO USER TTR COUNTER* 00790000
         OI    NBTTR+1,B'00000001'                                0051  00800000
*              ELSE;                    /* NO NOMORE USER TTRN'S      * 00810000
@9FC     EQU   *                                                  0052  00820000
*                                                                       00830000
*                /*---------------------------------------------------* 00840000
*                /* NOW A ITERATIVE DO LOOP IS MADE TO SEE IF ANY OF  * 00850000
*                /* THE TTRN'S POINTS TO A NOTE LIST                  * 00860000
*                /*---------------------------------------------------* 00870000
*                                                                       00880000
*                DO J=1 TO NBTTR BY 1;                                  00890000
@9FB     LA    @F,1                                               0053  00900000
         BC    15,@DO9F9                                          0053  00910000
*                                                                       00920000
*           /*--------------------------------------------------------* 00930000
*           /* A TEST IS NOW MADE TO SEE IF ANY OF THE USER TTR'S     * 00940000
*           /* POINT TO A NOTE LIST                                   * 00950000
*           /*--------------------------------------------------------* 00960000
*                                                                       00970000
*           IF TTRNS(J,4) ^= '00'X      /* N OF TTRN NOT ZERO         * 00980000
*              THEN                     /* YES                        * 00990000
@DO9FA   LH    @1,J                                               0054  01000000
         BCTR  @1,0                                               0054  01010000
         SLA   @1,2                                               0054  01020000
         L     @5,IDEAD                                           0054  01030000
         LA    @A,15(@1,@5)                                       0054  01040000
         CLI   0(@A),X'00'                                        0054  01050000
*                  GO TO WSAM0036;      /* GO WRITE NOTE LIST         * 01060000
         BC    07,WSAM0036                                        0055  01070000
*              ELSE;                    /* NO                         * 01080000
*                END;                   /* ALL USER TTRNS ARE TESTED  * 01090000
*              END;                                                     01100000
         LH    @F,J                                               0057  01110000
         AH    @F,@D1                                             0057  01120000
@DO9F9   STH   @F,J                                               0057  01130000
         CH    @F,NBTTR                                           0057  01140000
         BC    12,@DO9FA                                          0057  01150000
         BC    15,@9F6                                            0059  01160000
*            ELSE;                      /* NO                         * 01170000
@9FF     EQU   *                                                  0059  01180000
*                                                                       01190000
* /******************************************************************** 01200000
* /* AT THIS POINT ACTUAL DATA IN THE BUFFER IS PREPARED FOR WRITING. * 01210000
* /* THE ADDRESS TO WRITE IS SET AT THE BEGINNING OF A BUFFER AND THE * 01220000
* /* AREA USED FOR THE RECORD DESCRIPTOR WORDS IS SAVED SO THAT IT MAY* 01230000
* /* BE RESTITUTED TO ITS INITIAL VALUE WHEN ITS USE IS ENDED.        * 01240000
* /******************************************************************** 01250000
*                                                                       01260000
* WSAM0003:;                                                            01270000
@9F6     EQU   *                                                  0060  01280000
*                                                                       01290000
*             /******************************************************** 01300000
*             /* THIS GENERATE IS TO OBTAIN THE ADDR OF THE OUTPUT DCB* 01310000
*             /* SO AS TO OBTAIN THE BLOCKSIZE                        * 01320000
*             /******************************************************** 01330000
*             GENERATE;                                                 01340000
WSAM0003 EQU   *                                                  0061  01350000
         LA    @7,ULOADDCB             DCB ADDR OF UNLOADED DATA SET    01360000
         DS    0H                                                       01370000
*                                                                       01380000
*             READNEXT=REDAD - 8;       /* ADDR OF CURRENT BLOCK TO BE  01390000
*                                          WRITTEN.                   * 01400000
         L     @F,REDAD                                           0062  01410000
         SH    @F,@D2                                             0062  01420000
         ST    @F,READNEXT                                        0062  01430000
*             RECDESAV=VFIELD;          /* SAVE AREA FOR RECORD         01440000
*                                          CONTROL FIELDS AS IT HOLDS   01450000
*                                          NEEDED IEBCOPY INFORMATION * 01460000
         LR    @1,@F                                              0063  01470000
         MVC   RECDESAV(8),0(@1)                                  0063  01480000
*             FIRSTM='1'B;              /* INDICATE THAT RECORD         01490000
*                                          CONTROL FIELDS HAVE BEEN     01500000
*                                          SAVED                      * 01510000
         OI    FIRSTM,B'10000000'                                 0064  01520000
*             N=0;                      /* INIT NB OF PDS RECORDS TO    01530000
*                                          ZERO.                      * 01540000
         SR    @F,@F                                              0065  01550000
         STH   @F,N                                               0065  01560000
*                                                                       01570000
* /******************************************************************** 01580000
* /* NOW EACH PDS RECORD IS SCANNED FOR LAST RECORD AND AS MANY OF    * 01590000
* /* THEM AS POSSIBLE ARE BLOCKED UP IN ONE BLOCK OF THE SEQUENTIAL   * 01600000
* /* DATA SET                                                         * 01610000
* /******************************************************************** 01620000
*                                                                       01630000
* WSAM0006:;                                                            01640000
*             RECB=KEY + DATA + 12;     /* GET LENGHT OF THIS RECORD  * 01650000
WSAM0006 LA    @F,12                                              0067  01660000
         L     @1,REDAD                                           0067  01670000
         MVC   @TEMP2+2(2),10(@1)                                 0067  01680000
         A     @F,@TEMP2                                          0067  01690000
         SR    @0,@0                                              0067  01700000
         IC    @0,9(0,@1)                                         0067  01710000
         AR    @F,@0                                              0067  01720000
         ST    @F,RECB                                            0067  01730000
*             N=N + 1;                  /* UPDATE BY ONE NUMBER OF PDS  01740000
*                                          RECORDS                    * 01750000
         LA    @F,1                                               0068  01760000
         AH    @F,N                                               0068  01770000
         STH   @F,N                                               0068  01780000
*                                                                       01790000
*             /*------------------------------------------------------* 01800000
*             /* NOW A TEST HAS TO BE MADE TO SEE IF THERE ARE MORE   * 01810000
*             /* RECORDS IN THE BUFER AFTER THIS ONE.                 * 01820000
*             /*------------------------------------------------------* 01830000
*                                                                       01840000
*             IF F(2)='1'B              /* LAST RECORD IN BUFFER      * 01850000
*                THEN                   /* YES                        * 01860000
         TM    0(@1),B'01000000'                                  0069  01870000
         BC    12,@9F5                                            0069  01880000
*                  DO;                  /* SEE IF MORE DATA TO PROCESS* 01890000
*                                                                       01900000
*               /*----------------------------------------------------* 01910000
*               /* NOW A TEST IS MADE TO SEE IF IT WAS LAST RECORD IN * 01920000
*               /* THIS BUFFER OR LAST RECORD TO PROCESS.             * 01930000
*               /*----------------------------------------------------* 01940000
*                                                                       01950000
*               IF F(1)='1'B            /* LAST RECORD IN ANY BUFFER  * 01960000
*                  THEN                 /* YES                        * 01970000
         TM    0(@1),B'10000000'                                  0071  01980000
         BC    12,@9F4                                            0071  01990000
*                      RETAD=ADDR(WSAM0030);/* SET RETURN ADDR OF       02000000
*                                              PROCESSING LAST RECORD * 02010000
         LA    @F,WSAM0030                                        0072  02020000
         ST    @F,@TEMP4                                          0072  02030000
         MVC   RETAD(3),@TEMP4+1                                  0072  02040000
         BC    15,@9F3                                            0073  02050000
*                  ELSE                 /* NO LAST REC IN THIS BUFFER * 02060000
*                      RETAD=ADDR(WSAM0024);/* SET RETURN ADDR OF       02070000
*                                              PROCESSING LAST RECORD   02080000
*                                              IN THIS BUFFER         * 02090000
@9F4     LA    @F,WSAM0024                                        0073  02100000
         ST    @F,@TEMP4                                          0073  02110000
         MVC   RETAD(3),@TEMP4+1                                  0073  02120000
*                    F='00'X;           /* RESET F BYTE OF COUNT FIELD  02130000
*                                          TO ZERO BEFORE WRITING     * 02140000
@9F3     MVI   0(@1),X'00'                                        0074  02150000
         BC    15,@9F2                                            0076  02160000
*                  END;                                                 02170000
*                ELSE                   /* NO - NO MORE DATA IN BUFFER* 02180000
*                    RETAD=ADDR(WSAM0018);/* RETURN ADDR TO PROCESS     02190000
*                                            NEXT RECORD IN BUFFER    * 02200000
@9F5     LA    @F,WSAM0018                                        0076  02210000
         ST    @F,@TEMP4                                          0076  02220000
         MVC   RETAD(3),@TEMP4+1                                  0076  02230000
*                                                                       02240000
* /******************************************************************** 02250000
* /* AT THIS POINT A PDS RECORD IS ANALYSED TO SEE IF IT HAS TO BE    * 02260000
* /* WRITTEN IN SPANNED VARIABLE FORMAT OR JUST VARIABLE FORMAT OR    * 02270000
* /* WHETHER MORE DATA WILL FIT INTO THE BLOCK TO BE WRITTEN          * 02280000
* /******************************************************************** 02290000
*                                                                       02300000
* WSAM0009:;                                                            02310000
@9F2     EQU   *                                                  0077  02320000
*                                                                       02330000
*             /*------------------------------------------------------* 02340000
*             /* A TEST IS NOW MADE TO SEE IF THE DATA SO FAR ANALYSED* 02350000
*             /* WILL FIT IN ONE BLOCK OF THE SEQUENTIAL DATA SET AND * 02360000
*             /* IF SO A TRY IS MADE TO ADD YET ANOTHER PDS RECORD    * 02370000
*             /* OTHERWISE THE DATA HAS TO BE WRITTHEN                * 02380000
*             /*------------------------------------------------------* 02390000
*                                                                       02400000
*             IF WRCNT+RECB <=  DCBBLKSI/* DATA FIT IN THIS BLOCK     * 02410000
*                THEN                   /* YES                        * 02420000
WSAM0009 L     @F,RECB                                            0078  02430000
         AH    @F,WRCNT                                           0078  02440000
         CH    @F,DCBBLKSI                                        0078  02450000
         BC    02,@9F1                                            0078  02460000
*                  DO;                  /* SEE IF MORE WILL FIT       * 02470000
*                    WRCNT=WRCNT + RECB;/* UPDATE WRITE COUNTER       * 02480000
         L     @F,RECB                                            0080  02490000
         AH    @F,WRCNT                                           0080  02500000
         STH   @F,WRCNT                                           0080  02510000
*                    GO TO NEXTPROC;    /* GO PROCESS MORE DATA       * 02520000
         MVC   @TEMP3+1(3),RETAD                                  0081  02530000
         L     @1,@TEMP3           RETAD                          0081  02540000
         BCR   15,@1                                              0081  02550000
*                  END;                                                 02560000
*                ELSE;                  /* NO-HAVE TO WRITE THIS BLOCK* 02570000
@9F1     EQU   *                                                  0083  02580000
*                                                                       02590000
*             /*------------------------------------------------------* 02600000
*             /* A TEST IS NOW MADE TO SEE IF THIS BLOCK CAN BE       * 02610000
*             /* WRITTEN AS A WHOLE OR WHETHER THE BLOCK HAS TO BE    * 02620000
*             /* SPANNED                                              * 02630000
*             /*------------------------------------------------------* 02640000
*                                                                       02650000
*             IF N ^= 1                 /* ONLY ONE PDS RECORD BIGGER   02660000
*                                          THAN SEQUENTIAL BLOCK      * 02670000
*                THEN                   /* NO MORE THAN ONE REC IN BLK* 02680000
@9F0     LA    @F,1                                               0084  02690000
         CH    @F,N                                               0084  02700000
         BC    08,@9EF                                            0084  02710000
*                  DO;                  /* PROCESS NORMALLY           * 02720000
*                    BLLA=WRCNT;        /* FILL BLOCK DESCRIPTOR WORD * 02730000
         L     @1,READNEXT                                        0086  02740000
         MVC   0(2,@1),WRCNT                                      0086  02750000
*                    SLLA=WRCNT - 4;    /* FILL RECORD DESCRIPTOR WORD* 02760000
         LH    @F,WRCNT                                           0087  02770000
         SH    @F,@D3                                             0087  02780000
         ST    @F,@TEMP4                                          0087  02790000
         MVC   4(2,@1),@TEMP4+2                                   0087  02800000
*                    BLLB='0000'X;      /* SET RESERVED BYTES IN      * 02810000
         MVC   2(2,@1),@X4                                        0088  02820000
*                    SLLB='0000'X;      /* DESCRIPTOR WORDS TO ZERO   * 02830000
         MVC   6(2,@1),@X4                                        0089  02840000
*                    CALL WRITER;       /* WRITE THIS BLOCK OF DATA   * 02850000
         BAL   @E,WRITER                                          0090  02860000
*                    READNEXT=REDAD-8;   /* SET NEXT WRITE ADDRESS    * 02870000
         L     @F,REDAD                                           0091  02880000
         SH    @F,@D2                                             0091  02890000
         ST    @F,READNEXT                                        0091  02900000
*                    N=1;               /* RESET NB OF PDS RECORDS TO   02910000
*                                          PROCESS TO ONE             * 02920000
         LA    @F,1                                               0092  02930000
         STH   @F,N                                               0092  02940000
*                    GO TO WSAM0009;    /* ANALYSE NEXT PDS RECORD    * 02950000
         BC    15,WSAM0009                                        0093  02960000
*                  END;                                                 02970000
*                ELSE;                  /* YES- NEED VARIABLE SPANNED * 02980000
@9EF     EQU   *                                                  0095  02990000
*                                                                       03000000
*             /*------------------------------------------------------* 03010000
*             /* NOW IT IS POSSIBLE DUE TO AN OVERWRITE THAT THE DCB  * 03020000
*             /* BLOCKSIZE DOES NOT REPRESENT THE ACTUAL DATA LENGTH  * 03030000
*             /* AND THAT DUE TO THAT THE UNLOADED DATA SETS BLOCKSIZE* 03040000
*             /* HAS BEEN CHOSEN TOO SMALL THIS GIVES AN ERROR        * 03050000
*             /* CONDITION AS THE DATA SET CAN NOT BE LOADED.         * 03060000
*             /*------------------------------------------------------* 03070000
*                                                                       03080000
*             IF DATA > IBLKSIZE        /* DATA LENGHT TOO BIG        * 03090000
*                THEN                   /* YES                        * 03100000
@9EE     L     @1,REDAD                                           0096  03110000
         CLC   10(2,@1),IBLKSIZE                                  0096  03120000
         BC    12,@9ED                                            0096  03130000
*                  DO;                  /* INDIC ERROR CONDITION      * 03140000
*                    IOEF2(7)='1'B;     /* SET ERROR SWITCH           * 03150000
         OI    IOEF2,B'00000010'                                  0098  03160000
*                                                                       03170000
*                    /************************************************* 03180000
*                    /* A BRANCH IS NOW MADE TO IEBIOE TO HANDLE THE  * 03190000
*                    /* ERROR CONDITION                               * 03200000
*                    /************************************************* 03210000
*                                                                       03220000
*                    GENERATE;                                          03230000
         L     @F,VIEBIOE2             ENTRY POINT IN ERROR ROUTINE     03240000
         BR    @F                      GO TO ERROR ROUTINE              03250000
         DS    0H                                                       03260000
*                                                                       03270000
*                  END;                                                 03280000
*                ELSE;                  /* NO - DATA LENGTH IS OK     * 03290000
@9ED     EQU   *                                                  0101  03300000
*                    SLLB='4000'X;      /* INDIC 1ST SEGMENT OF BLOCK * 03310000
@9EC     L     @1,READNEXT                                        0102  03320000
         MVC   6(2,@1),@X5                                        0102  03330000
*                                                                       03340000
* /******************************************************************** 03350000
* /* AT THIS POINT THE DESCRIPTOR WORDS FOR THE VARIABLE SPANNED      * 03360000
* /* RECORDS ARE FILLED IN                                            * 03370000
* /******************************************************************** 03380000
*                                                                       03390000
* WSAM0012:;                                                            03400000
*                    BLLA=DCBBLKSI;     /* BLOCK DESCRIPTOR WORD      * 03410000
WSAM0012 L     @1,READNEXT                                        0104  03420000
         MVC   0(2,@1),DCBBLKSI                                   0104  03430000
*                    SLLA=DCBBLKSI - 4;   /* RECORD DESCRIPTOR WORD   * 03440000
         LH    @F,DCBBLKSI                                        0105  03450000
         SH    @F,@D3                                             0105  03460000
         ST    @F,@TEMP4                                          0105  03470000
         MVC   4(2,@1),@TEMP4+2                                   0105  03480000
*                    BLLB='0000'X;      /* RESERVED BYTES TO ZERO     * 03490000
         MVC   2(2,@1),@X4                                        0106  03500000
*                    RECB=RECB -        /* NUMBER OF BYTES LEFT TO    * 03510000
*                           DCBBLKSI +  /* WRITE FOR NEXT SEGMENT     * 03520000
*                             8;        /* RECORD DESCRIPTOR LENGTH   * 03530000
         LA    @F,8                                               0107  03540000
         SH    @F,DCBBLKSI                                        0107  03550000
         A     @F,RECB                                            0107  03560000
         ST    @F,RECB                                            0107  03570000
*                    CALL WRITER;       /* WRITE PREPARED BLOCK       * 03580000
         BAL   @E,WRITER                                          0108  03590000
*                    READNEXT=READNEXT +/* ADDRESS POINTING TO NEXT   * 03600000
*                              DCBBLKSI -/* SEGMENT FOR NEXT WRITE    * 03610000
*                               8;      /*  ADDRESS                   * 03620000
         LH    @F,@D4                                             0109  03630000
         AH    @F,DCBBLKSI                                        0109  03640000
         A     @F,READNEXT                                        0109  03650000
         ST    @F,READNEXT                                        0109  03660000
*                                                                       03670000
*             /*------------------------------------------------------* 03680000
*             /* NOW A TEST IS MADE TO SEE IF THERE ARE STILL MORE    * 03690000
*             /* SEGMENTS BEFORE THE LAST ONE                         * 03700000
*             /*------------------------------------------------------* 03710000
*                                                                       03720000
*             IF RECB + 8 > DCBBLKSI    /* A MIDDLE SEGMENT           * 03730000
*                THEN                   /* YES                        * 03740000
         LA    @F,8                                               0110  03750000
         A     @F,RECB                                            0110  03760000
         CH    @F,DCBBLKSI                                        0110  03770000
         BC    12,@9EB                                            0110  03780000
*                  DO;                  /* PREPARE IT FOR WRITING     * 03790000
*                    SLLB='C000'X;      /* INDIC MIDDLE SEGMENT       * 03800000
         L     @1,READNEXT                                        0112  03810000
         MVC   6(2,@1),@X6                                        0112  03820000
*                    GO TO WSAM0012;    /* GO WRITE BLOCK             * 03830000
         BC    15,WSAM0012                                        0113  03840000
*                  END;                                                 03850000
*                ELSE;                  /* NO - LAST SEGMENT          * 03860000
@9EB     EQU   *                                                  0115  03870000
*                    BLLA=RECB + 8;     /* FILL BLOCK DESCRIPTOR WORD * 03880000
@9EA     LA    @F,8                                               0116  03890000
         A     @F,RECB                                            0116  03900000
         L     @1,READNEXT                                        0116  03910000
         ST    @F,@TEMP4                                          0116  03920000
         MVC   0(2,@1),@TEMP4+2                                   0116  03930000
*                    SLLA=RECB + 4;     /* FILL RECORD DESCRIPTOR WORD* 03940000
         LA    @F,4                                               0117  03950000
         A     @F,RECB                                            0117  03960000
         ST    @F,@TEMP4                                          0117  03970000
         MVC   4(2,@1),@TEMP4+2                                   0117  03980000
*                    BLLB='0000'X;      /* SET RESERVED BYTES TO ZERO * 03990000
         MVC   2(2,@1),@X4                                        0118  04000000
*                    SLLB='8000'X;      /* INDIC LAST SEGMENT         * 04010000
         MVC   6(2,@1),@X7                                        0119  04020000
*                    CALL WRITER;       /* WRITE LAST SEGMENT         * 04030000
         BAL   @E,WRITER                                          0120  04040000
*                    N=0;               /* SET COUNTER OF NUMBER OF     04050000
*                                          PDS RECORDS TO ZERO        * 04060000
         SR    @F,@F                                              0121  04070000
         STH   @F,N                                               0121  04080000
*                    REDAD=READNEXT +   /* SET ADDRESS TO LAST PDS    * 04090000
*                                8;     /* RECORD PROCESSED.          * 04100000
         LA    @F,8                                               0122  04110000
         A     @F,READNEXT                                        0122  04120000
         ST    @F,REDAD                                           0122  04130000
*                    READNEXT=READNEXT +/* POINT TO NEXT RECORD TO    * 04140000
*                              RECB;    /* WRITE.                     * 04150000
         L     @F,RECB                                            0123  04160000
         A     @F,READNEXT                                        0123  04170000
         ST    @F,READNEXT                                        0123  04180000
*                    GO TO NEXTPROC;    /* GO TO ADDRESS SET          * 04190000
         MVC   @TEMP3+1(3),RETAD                                  0124  04200000
         L     @1,@TEMP3           RETAD                          0124  04210000
         BCR   15,@1                                              0124  04220000
* /******************************************************************** 04230000
* /* AT THIS POINT THERE ARE MORE RECORDS IN THE BUFFER TO BE WRITTEN * 04240000
* /* OUT SO THE POINTER IS UPDATED AND THE NEXT RECORD IS PROCESSED   * 04250000
* /******************************************************************** 04260000
*                                                                       04270000
* WSAM0018:;                                                            04280000
*             REDAD=REDAD + RECB;       /* POINT TO NEXT PDS RECORD   * 04290000
WSAM0018 L     @F,RECB                                            0126  04300000
         A     @F,REDAD                                           0126  04310000
         ST    @F,REDAD                                           0126  04320000
*             GO TO WSAM0006;           /* GO PROCESS IT              * 04330000
         BC    15,WSAM0006                                        0127  04340000
*                                                                       04350000
* /******************************************************************** 04360000
* /* AT THIS POINT THE END OF THE FIRST BUFFER WAS REACHED PREPARATION* 04370000
* /* IS MADE FOR PROCESSING IN THE SECOND BUFFER                      * 04380000
* /******************************************************************** 04390000
*                                                                       04400000
* WSAM0024:;                                                            04410000
*                                                                       04420000
*             /*------------------------------------------------------* 04430000
*             /* A TEST HAS TO BE MADE TO SEE IF THE LAST RECORD OF   * 04440000
*             /* THE PREVIOUS BUFFER STILL HAS TO BE WRITTEN          * 04450000
*             /*------------------------------------------------------* 04460000
*                                                                       04470000
*             IF N ^= 0                 /* LAST RECORD STILL TO WRITE * 04480000
*                THEN                   /* YES                        * 04490000
WSAM0024 SR    @F,@F                                              0129  04500000
         CH    @F,N                                               0129  04510000
         BC    08,@9E9                                            0129  04520000
*                  DO;                  /* PREPARE IT AND WRITE IT    * 04530000
*                    BLLA=WRCNT;        /* FILL BLOCK DESCRIPTOR WORD * 04540000
         L     @1,READNEXT                                        0131  04550000
         MVC   0(2,@1),WRCNT                                      0131  04560000
*                    SLLA=WRCNT - 4;    /* FILL RECORD DESCRIPTOR WORD* 04570000
         LH    @F,WRCNT                                           0132  04580000
         SH    @F,@D3                                             0132  04590000
         ST    @F,@TEMP4                                          0132  04600000
         MVC   4(2,@1),@TEMP4+2                                   0132  04610000
*                    BLLB='0000'X;      /* SET RESERVED BYTES IN      * 04620000
         MVC   2(2,@1),@X4                                        0133  04630000
*                    SLLB='0000'X;      /* DESCRIPTOR WORDS TO ZERO   * 04640000
         MVC   6(2,@1),@X4                                        0134  04650000
*                    CALL WRITER;       /* WRITE LAST BLOCK OF 1ST BUF* 04660000
         BAL   @E,WRITER                                          0135  04670000
*                  END;                                                 04680000
*                ELSE;                  /* NO 1ST BUF HAS BEEN WRITTEN* 04690000
@9E9     EQU   *                                                  0137  04700000
*                    REDAD=BEGFST2;     /* POINT TO BEGIN OF 2ND BUF  * 04710000
@9E8     MVC   REDAD(4),BEGFST2                                   0138  04720000
*                    GO TO WSAM0003;    /* PROCESS 2ND BUFFER         * 04730000
         BC    15,WSAM0003                                        0139  04740000
*                                                                       04750000
* /******************************************************************** 04760000
* /* AT THIS POINT THERE IS NO MORE DATA IN THE BUFFERS TO PROCESS    * 04770000
* /* A LAST RECORD MAY HAVE TO BE WRITTEN AND THEN CONTROL IS GIVEN   * 04780000
* /* BACK TO THE CALLER                                               * 04790000
* /******************************************************************** 04800000
*                                                                       04810000
* WSAM0030:;                                                            04820000
*                                                                       04830000
*             /*------------------------------------------------------* 04840000
*             /* A TEST HAS TO BE MADE TO SEE IF THE LAST RECORD IN   * 04850000
*             /* THE LAST BUFFER HAS BEEN WRITTEN                     * 04860000
*             /*------------------------------------------------------* 04870000
*                                                                       04880000
*             IF N ^= 0                 /* LAST RECORD STIL TO WRITE  * 04890000
*                THEN                   /* YES                        * 04900000
WSAM0030 SR    @F,@F                                              0141  04910000
         CH    @F,N                                               0141  04920000
         BC    08,@9E7                                            0141  04930000
*                  DO;                  /* PREPARE AND WRITE IT       * 04940000
*                    BLLA=WRCNT;        /* FILL BLOCK DESCRIPTOR WORD * 04950000
         L     @1,READNEXT                                        0143  04960000
         MVC   0(2,@1),WRCNT                                      0143  04970000
*                    SLLA=WRCNT - 4;    /* FILL RECORD DESCRIPTOR WORD* 04980000
         LH    @F,WRCNT                                           0144  04990000
         SH    @F,@D3                                             0144  05000000
         ST    @F,@TEMP4                                          0144  05010000
         MVC   4(2,@1),@TEMP4+2                                   0144  05020000
*                    BLLB='0000'X;      /* SET RESERVED BYTES IN      * 05030000
         MVC   2(2,@1),@X4                                        0145  05040000
*                    SLLB='0000'X;      /* DESCRIPTOR WORDS TO ZERO   * 05050000
         MVC   6(2,@1),@X4                                        0146  05060000
*                    CALL WRITER;       /* WRITE LAST BLOCK           * 05070000
         BAL   @E,WRITER                                          0147  05080000
*                  END;                                                 05090000
*                ELSE;                  /* NO NO MORE TO WRITE        * 05100000
@9E7     EQU   *                                                  0149  05110000
*                    READNEXT=WRTNEXT;  /* RESET WRITE ADDRESS        * 05120000
@9E6     MVC   READNEXT(4),WRTNEXT                                0150  05130000
*                    RETURN;            /* GO BACK TO CALLER OF RTN   * 05140000
         BC    15,@EL01                                           0151  05150000
* /******************************************************************** 05160000
* /* AT THIS POINT THE MEMBER HAS A NOTE LIST AND PREPARATION IS MADE * 05170000
* /* FOR THE WRITING OF THIS NOTE LIST TO THE UNLOADED DATA SET       * 05180000
* /******************************************************************** 05190000
*                                                                       05200000
* WSAM0036:;                                                            05210000
*                                                                       05220000
*         /************************************************************ 05230000
*         /* THIS GENERATE IS TO OBTAIN THE ADDR OF THE INPUT PDS DCB * 05240000
*         /* ADDR SO AS TO OBTAIN THE RECORD FORMAT                   * 05250000
*         /************************************************************ 05260000
*         GENERATE;                                                     05270000
WSAM0036 EQU   *                                                  0153  05280000
         LA    @7,INDCB                ADDR OF INPUT PDS DCB            05290000
         DS    0H                                                       05300000
*                                                                       05310000
*         TTRNB(1:8)=                   /* PUT IN COUNTER  NUMBER OF  * 05320000
*                TTRNS(J,4);            /* NOTE LIST TTR'S            * 05330000
         LH    @1,J                                               0154  05340000
         BCTR  @1,0                                               0154  05350000
         SLA   @1,2                                               0154  05360000
         L     @5,IDEAD                                           0154  05370000
         LA    @E,15(@1,@5)                                       0154  05380000
         MVC   NBTTR+1(1),0(@E)                                   0154  05390000
*         READNEXT=ADNL-8;              /* ADDRESS WHERE TO START       05400000
*                                          WRITING                    * 05410000
         L     @F,ADNL                                            0155  05420000
         SH    @F,@D2                                             0155  05430000
         ST    @F,READNEXT                                        0155  05440000
*         NF='111'B;                    /* SET NOTE LIST INDICATOR    * 05450000
         L     @6,ADNL                                            0156  05460000
         MVI   0(@6),B'11100000'                                  0156  05470000
*         WRCNT= WRCNT +                /* NB OF BYTES TO WRITE       * 05480000
*                 NBTTR*4 +             /* NOTE LIST LENGTH           * 05490000
*                    NKEY +             /* KEY LENGTH                 * 05500000
*                       12;             /* LENGTH OF COUNT FIELD      * 05510000
         LA    @E,4                                               0157  05520000
         MH    @E,NBTTR                                           0157  05530000
         AH    @E,WRCNT                                           0157  05540000
         AH    @E,@D5                                             0157  05550000
         SR    @0,@0                                              0157  05560000
         IC    @0,9(0,@6)                                         0157  05570000
         AR    @E,@0                                              0157  05580000
         STH   @E,WRCNT                                           0157  05590000
*                                                                       05600000
*         /************************************************************ 05610000
*         /* THIS TEST IS TO FIND OUT IF THE INPUT PDS HAD VARIABLE   * 05620000
*         /* RECORD FORMAT IN WHICH CASE 8 HAS TO BE ADDED TO THE     * 05630000
*         /* LENGTH OF THE NOTE LIST TO BE WRITTEN                    * 05640000
*         /************************************************************ 05650000
*         IF DCBRECFM(1) = '0'B         /* RECORD FORMAT VARIABLE     * 05660000
*            THEN                       /* YES                        * 05670000
         TM    DCBRECFM,B'10000000'                               0158  05680000
         BC    05,@9E5                                            0158  05690000
*                 WRCNT =WRCNT  + 8;    /* ADD 8 TO NOTE LIST LENGTH  * 05700000
         LA    @F,8                                               0159  05710000
         AH    @F,WRCNT                                           0159  05720000
         STH   @F,WRCNT                                           0159  05730000
*            ELSE;                      /* NO LENGTH OK               * 05740000
@9E5     EQU   *                                                  0160  05750000
*                                                                       05760000
*         RECDESAV=VFIELD;              /* SAVE CONTROL AREA INFORM   * 05770000
@9E4     L     @C,READNEXT                                        0161  05780000
         MVC   RECDESAV(8),0(@C)                                  0161  05790000
*         FIRSTM='1'B;                  /* INDIC SAVED RECORD CONTROL   05800000
*                                          FIELD.                     * 05810000
         OI    FIRSTM,B'10000000'                                 0162  05820000
*         BLLA=WRCNT;                   /* FILL BLOCK DESCRIPTOR WORD * 05830000
         MVC   0(2,@C),WRCNT                                      0163  05840000
*         SLLA=WRCNT - 4;               /* FILL RECORD DESCRIPTOR WORD* 05850000
         LH    @F,WRCNT                                           0164  05860000
         SH    @F,@D3                                             0164  05870000
         ST    @F,@TEMP4                                          0164  05880000
         MVC   4(2,@C),@TEMP4+2                                   0164  05890000
*         BLLB='0000'X;                 /* SET RESERVED BYTES IN      * 05900000
         MVC   2(2,@C),@X4                                        0165  05910000
*         SLLB='0000'X;                 /* DESCRIPTOR WORDS TO ZERO   * 05920000
         MVC   6(2,@C),@X4                                        0166  05930000
*         CALL WRITER;                  /* GO WRITE THIS BLOCK        * 05940000
         BAL   @E,WRITER                                          0167  05950000
*         GO TO WSAM0003;               /* GO PROCESS MEMBER          * 05960000
         BC    15,WSAM0003                                        0168  05970000
* /******************************************************************** 05980000
* /* AT THIS ENTRY POINT THE HEADER LABEL NEEDED FOR AN UNLOADED      * 05990000
* /* DATA SET IS WRITTEN TO THE OUTPUT DATA SET                       * 06000000
* /******************************************************************** 06010000
*                                                                       06020000
* IEBWSAM1: ENTRY;                                                      06030000
IEBWSAM1 STM   @E,@C,12(@D)                                       0169  06040000
         BALR  @B,0                                               0169  06050000
         LA    @F,IEBWSAM1-IEBWSAM                                0169  06060000
         SR    @B,@F                                              0169  06070000
         ST    @D,@SAV001+4                                       0169  06080000
         LA    @F,@SAV001                                         0169  06090000
         ST    @F,8(0,@D)                                         0169  06100000
         LR    @D,@F                                              0169  06110000
*           WSFLAG(5)='0'B;             /* INDIC WRITING              * 06120000
@9E3     NI    WSFLAG,B'11110111'                                 0170  06130000
*           FIRSTM='0'B;                /* INDIC NO NEED TO SAVE RECORD 06140000
*                                          CONTROL FIELD.             * 06150000
         NI    FIRSTM,B'01111111'                                 0171  06160000
*           ACOP(1)=ACOPYR1;            /* ADDR OF 1ST HEADER LABEL   * 06170000
         MVC   ACOP(4),ACOPYR1                                    0172  06180000
*           ACOP(2)=ACOPYR2;            /* ADDR OF 2ND HEADER LABEL   * 06190000
         MVC   ACOP+4(4),ACOPYR2                                  0173  06200000
*                                                                       06210000
*           /********************************************************** 06220000
*           /* AS TWO RECORDS HAVE TO BE WRITTEN A ITERITIVE DO LOOP  * 06230000
*           /* IS SET UP.                                             * 06240000
*           /********************************************************** 06250000
*                                                                       06260000
*           DO J=1 TO 2;                                                06270000
         LA    @F,1                                               0174  06280000
         STH   @F,J                                               0174  06290000
*             READNEXT=ACOP(J);         /* GET LABEL ADDRESS          * 06300000
@DO9E2   LH    @1,J                                               0175  06310000
         SLA   @1,2                                               0175  06320000
         L     @F,ACOP-4(@1)                                      0175  06330000
         ST    @F,READNEXT                                        0175  06340000
*             CALL WRITER;              /* WRITE HEADER LABEL         * 06350000
         BAL   @E,WRITER                                          0176  06360000
*           END;                        /* HEADER RECORDS WRITTEN     * 06370000
*                                                                       06380000
*           READNEXT=WRTNEXT;           /* RESET READ POINTER         * 06390000
         LH    @F,J                                               0177  06400000
         AH    @F,@D1                                             0177  06410000
@DO9E1   STH   @F,J                                               0177  06420000
         CH    @F,@D6                                             0177  06430000
         BC    12,@DO9E2                                          0177  06440000
         MVC   READNEXT(4),WRTNEXT                                0178  06450000
*           RETURN;                     /* BACK TO CALLER             * 06460000
* /******************************************************************** 06470000
* /* THIS INTERNAL PROCEDURE WRITES OUT THE RECORDS FROM THE BUFFER   * 06480000
* /******************************************************************** 06490000
*                                                                       06500000
* WRITER:   PROCEDURE;                                                  06510000
@EL01    L     @D,4(0,@D)                                         0180  06520000
         LM    @E,@C,12(@D)                                       0180  06530000
         BCR   15,@E                                              0180  06540000
WRITER   STM   @E,@C,12(@D)                                       0180  06550000
         ST    @D,@SAV002+4                                       0180  06560000
         LA    @F,@SAV002                                         0180  06570000
         ST    @F,8(0,@D)                                         0180  06580000
         LR    @D,@F                                              0180  06590000
*           RESTRICT(4);                /* FOR ADDRESSABILITY TO        06600000
*                                          IEBMCA                     * 06610000
*           RESTRICT(7);                /* TO CONTAIN THE ADDRESS OF    06620000
*                                          THE AREA TO WRITE FROM     * 06630000
*                                                                       06640000
*           /********************************************************** 06650000
*           /* IN THE FOLLOWING GENERATE, A BLOCK OF DATA IS WRITTEN  * 06660000
*           /* TO THE UNLOADED OUTPUT DATA SET                        * 06670000
*           /********************************************************** 06680000
*                                                                       06690000
*           GENERATE;                                                   06700000
         L     @7,READNEXT             ADDR TO WRITE FROM               06710000
         WRITE DECB1,SF,ULOADDCB,(@7),MF=E                              06720000
         CHECK DECB1                                                    06730000
         DS    0H                                                       06740000
*                                                                       06750000
*           WRCNT=8;                    /* INIT WRITE COUNT TO 8      * 06760000
         LA    @F,8                                               0184  06770000
         STH   @F,WRCNT                                           0184  06780000
*                                                                       06790000
*             /*------------------------------------------------------* 06800000
*             /* A TEST IS NOW MADE TO SEE IF THE RECORD CONTROL      * 06810000
*             /* FIELD HAD BEEN SAVED IN WHICH CASE IT HAS TO BE      * 06820000
*             /* RESTORED.                                            * 06830000
*             /*------------------------------------------------------* 06840000
*                                                                       06850000
*             IF FIRSTM='1'B            /* SAVED REC CONTROL FIELD    * 06860000
*                THEN                   /* YES                        * 06870000
         TM    FIRSTM,B'10000000'                                 0185  06880000
         BC    12,@9DE                                            0185  06890000
*                  DO;                  /* RESET IT.                  * 06900000
*                    VFIELD=RECDESAV;   /* RESTORE INITIAL FIELD      * 06910000
         L     @1,READNEXT                                        0187  06920000
         MVC   0(8,@1),RECDESAV                                   0187  06930000
*                    FIRSTM='0'B;       /* INDIC FIELD RESTORED       * 06940000
         NI    FIRSTM,B'01111111'                                 0188  06950000
*                  END;                                                 06960000
*                ELSE;                  /* NO-NO NEED TO RESTORE      * 06970000
*           END WRITER;                                                 06980000
         BC    15,@EL01                                           0191  06990000
*          END IEBWSAM;                                                 07000000
@DATA1   EQU   *                                                        07010000
@0       EQU   00                  EQUATES FOR REGISTERS 0-15           07020000
@1       EQU   01                                                       07030000
@2       EQU   02                                                       07040000
@3       EQU   03                                                       07050000
@4       EQU   04                                                       07060000
@5       EQU   05                                                       07070000
@6       EQU   06                                                       07080000
@7       EQU   07                                                       07090000
@8       EQU   08                                                       07100000
@9       EQU   09                                                       07110000
@A       EQU   10                                                       07120000
@B       EQU   11                                                       07130000
@C       EQU   12                                                       07140000
@D       EQU   13                                                       07150000
@E       EQU   14                                                       07160000
@F       EQU   15                                                       07170000
@D1      DC    H'1'                                                     07180000
@D2      DC    H'8'                                                     07190000
@D3      DC    H'4'                                                     07200000
@D4      DC    H'-8'                                                    07210000
@D5      DC    H'12'                                                    07220000
@D6      DC    H'2'                                                     07230000
         DS    0F                                                       07240000
@X4      DC    X'0000'                                                  07250000
@X5      DC    X'4000'                                                  07260000
@X6      DC    X'C000'                                                  07270000
@X7      DC    X'8000'                                                  07280000
         DS    0D                                                       07290000
@DATA    EQU   *                                                        07300000
@SAV001  EQU   @DATA+00000000      72 BYTE(S) ON WORD                   07310000
RETAD    EQU   @DATA+00000073      3  BYTE  POINTER ON WORD+1           07320000
REDAD    EQU   @DATA+00000076      FULLWORD POINTER                     07330000
N        EQU   @DATA+00000080      HALFWORD INTEGER                     07340000
J        EQU   @DATA+00000082      HALFWORD INTEGER                     07350000
ACOP     EQU   @DATA+00000084      2*FULLWORD POINTER                   07360000
RECB     EQU   @DATA+00000092      FULLWORD INTEGER                     07370000
OUTA     EQU   00000000            12 BYTE(S)                           07380000
F        EQU   OUTA+00000000       8 BIT(S)                             07390000
MBBCCHHR EQU   OUTA+00000001       8 BYTE(S)                            07400000
KEY      EQU   OUTA+00000009       1 BYTE(S)                            07410000
DATA     EQU   OUTA+00000010       2 BYTE(S)                            07420000
FIRSTM   EQU   @DATA+00000096      1 BIT(S) ON BYTE                     07430000
USTTRN   EQU   00000011            13 BYTE(S)                           07440000
CFLD     EQU   USTTRN+00000000     8 BIT(S)                             07450000
TTRNS    EQU   USTTRN+00000001     3*4 BYTE(S)                          07460000
NBTTR    EQU   @DATA+00000098      HALFWORD INTEGER                     07470000
TTRNO    EQU   NBTTR+00000000      8 BIT(S)                             07480000
TTRNB    EQU   NBTTR+00000001      8 BIT(S)                             07490000
NOTA     EQU   00000000            12 BYTE(S)                           07500000
NF       EQU   NOTA+00000000       8 BIT(S)                             07510000
NCNT     EQU   NOTA+00000001       8 BYTE(S)                            07520000
NKEY     EQU   NOTA+00000009       1 BYTE(S)                            07530000
NDATA    EQU   NOTA+00000010       2 BYTE(S)                            07540000
WRCNT    EQU   @DATA+00000100      HALFWORD INTEGER                     07550000
VFIELD   EQU   00000000            8 BYTE(S)                            07560000
BLLA     EQU   VFIELD+00000000     2 BYTE(S)                            07570000
BLLB     EQU   VFIELD+00000002     2 BYTE(S)                            07580000
SLLA     EQU   VFIELD+00000004     2 BYTE(S)                            07590000
SLLB     EQU   VFIELD+00000006     2 BYTE(S)                            07600000
RECDESAV EQU   @DATA+00000102      8 BYTE(S)                            07610000
         ENTRY IEBWSAM1                                                 07620000
@SAV002  EQU   @DATA+00000112      72 BYTE(S) ON WORD                   07630000
         DS    00000184C                                                07640000
@TEMPS   DS    0F                                                       07650000
@TEMP2   DC    F'0'                                                     07660000
@TEMP3   DC    F'0'                                                     07670000
@TEMP4   DC    F'0'                                                     07680000
PATCHLN  EQU   (*-IEBWSAM)/20          5 PERCENT OF MODULE LENGTH       07690000
PATCH    DC    XL(PATCHLN)'00'         5 PERCENT PATCH AREA             07700000
         WRITE DECB1,SF,MF=L                                            07710000
         DCBD  DSORG=PS                                                 07720000
IEBMCA   DSECT                                                          07730000
         IEBMCA                                                         07740000
@DATEND  EQU   *                                                        07750000
@EL02    EQU   @EL01                                                    07760000
@9DD     EQU   @EL01                                                    07770000
@9DE     EQU   @EL01                                                    07780000
         END   IEBWSAM                                                  07790000
