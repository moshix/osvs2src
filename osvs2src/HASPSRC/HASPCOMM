COMM     TITLE 'HASP COMMAND PROCESSOR - PROLOG'               @OZ18212 K0000500
*********************************************************************** K0001000
*                                                                     * K0001500
* MODULE NAME = HASJES20 (HASPCOMM CSECT)                             * K0002000
*                                                                     * K0002500
* DESCRIPTIVE NAME = JES2 COMMAND PROCESSOR                           * K0003000
*                                                                     * K0003500
* COPYRIGHT = NONE                                                    * K0004100
*                                                                     * K0004700
* STATUS = OS/VS2 MVS   --  SEE &VERSION (BELOW) FOR JES2 LEVEL       * K0005000
*                                                                     * K0005500
* FUNCTION = ACCEPTS OPERATOR COMMAND FROM VARYING SOURCES AND        * K0006000
*            REPLIES TO THE SUBMITTER THE APPROPRIATE DATA BASED      * K0006500
*            UPON THE COMMAND AND ITS OPERANDS. NO I/O IS DONE        * K0007000
*            FROM THIS MODULE. THE COMMAND ARE TAKEN FROM THE         * K0007500
*            CONSOLE MESSAGE BUFFERS AND A REPLY IS BUILT IN THE      * K0008000
*            COMMAND PROCESSOR PCE WORK AREA FROM THE APPROPRIATE     * K0008500
*            JES2 CONTROL BLOCKS. THIS RESPONSE IS THEN SENT TO THE   * K0009000
*            SUBMITTER BY JES2 $WTO SERVICES.                         * K0009500
*                                                                     * K0010000
* NOTES = SEE BELOW                                                   * K0010500
*                                                                     * K0011000
*   DEPENDENCIES = IF MULTIPLE COMMAND ARE USED, THEY MUST BE         * K0011500
*                  SEPERATED BY SEMICOLONS AND THE JES2 COMMAND       * K0012000
*                  INDENTIFIER IS OMITTED FROM SECOND AND SUBSEQUENT  * K0012500
*                  COMMANDS IN THAT INPUT LINE                        * K0013000
*                                                                     * K0013500
*   RESTRICTIONS = NONE                                               * K0014000
*                                                                     * K0014500
*   REGISTER CONVENTIONS = R0  =       = PARAMETER REGISTER           * K0015000
*                          R1  =       = PARAMETER REGISTER           * K0015500
*                          R2  = WA    = WORK REGISTER                * K0016000
*                          R3  = WB    = WORK REGISTER                * K0016500
*                          R4  = WC    = WORK REGISTER                * K0017000
*                          R5  = WD    = CURRENT OPERAND POINTER      * K0017500
*                          R6  = WE    = CONSTANT OF FOUR (4)         * K0018000
*                          R7  = WF    = LAST OR NULL OPERAND POINTER * K0018500
*                          R8  = BASE3 = SUB PROCESSOR ADDRESSABILITY * K0019000
*                          R9  =       = RESERVED (IE. NOT USED)      * K0019500
*                          R10 =       = WORK REGISTER                * K0020000
*                          R11 = BASE1 = HCT ADDRESSABILITY           * K0020500
*                          R12 = BASE2 = MAIN PROCESSOR ADDRESSABILITY* K0021000
*                          R13 = SAVE  = PCE ADDRESSABILITY           * K0021500
*                          R14 = LINK  = LINKAGE REGISTER             * K0022000
*                          R15 =       = RETURN REGISTER              * K0022500
*                                                                     * K0023000
*   PATCH LABEL = NONE                                                * K0023500
*                                                                     * K0024000
* MODULE TYPE = PROCESSOR, TABLE (CSECT TYPE)                         * K0024500
*                                                                     * K0025000
*   PROCESSOR = OS/VS ASSEMBLER                                       * K0025500
*                                                                     * K0026000
*    MODULE SIZE = SEE $DLENGTH MACRO EXPANSION(S) AT END OF ASSEMBLY * K0026500
*                                                                     * K0027500
*   ATTRIBUTES = READ ONLY, AFTER PROCESSOR INITIALIZATION, AND       * K0028000
*                HASP REENTRANT                                       * K0028500
*                                                                     * K0029000
* ENTRY POINT = HASPCOMM                                              * K0029500
*                                                                     * K0030000
*   PURPOSE = SEE FUNCTION                                            * K0030500
*                                                                     * K0031000
*   LINKAGE = VIA $WAIT AND $POST OBEYING JES2 CONVENTIONS            * K0031500
*                                                                     * K0032000
* ENTY POINT = $JCANR                                                 * K0032500
*                                                                     * K0033000
*   PURPOSE = TO CANCEL JOBS, STCS, OR TSUS IN JES2                   * K0033500
*             1). REJECT ATTEMPTS TO CANCEL OR STOP STC OR            * K0034000
*                 TSU TASKS PRIOR TO EXECUTION                        * K0034500
*                                                                     * K0035000
*             2). PURGE BQES AND JOES FOR STOP JOB AND CANCEL         * K0035500
*                 WITH PURGE                                          * K0036000
*                                                                     * K0036500
*             3). ISSUE OS/VS CANCEL COMMAND IF REQUIRED FOR A JOB    * K0037000
*                                                                     * K0037500
*             4). DELETE ACTIVITY ON JES2 READERS FOR CANCEL REQUESTS * K0038000
*                 AND ON JES2 PRINTERS AND PUNCHES FOR CANCEL         * K0038500
*                 WITH PURGE REQUESTS                                 * K0039000
*                                                                     * K0039500
*   LINKAGE = VIA $JCAN MACRO                                         * K0040000
*                                                                     * K0040500
* INPUT = CONSOLE MESSAGE BUFFER CONTAINING THE COMMAND               * K0041000
*                                                                     * K0041500
* OUTPUT = EITHER A DIAGNOSTIC OR A RESPONSE TO THE INPUT COMMAND     * K0042000
*                                                                     * K0042500
* EXIT-NORMAL = $WTO PROCESSOR                                        * K0043000
*                                                                     * K0043500
* EXIT-ERROR = NONE                                                   * K0044000
*                                                                     * K0044500
* EXTERNAL REFERENCES = SEE BELOW                                     * K0045000
*                                                                     * K0045500
*   ROUTINES = SEE MACROS FOR SERVICES USED                           * K0046000
*                                                                     * K0046500
*   DATA AREAS = SEE $HASPCB MACRO EXPANSION                          * K0047000
*   CONTROL BLOCKS = SEE $HASPCB MACRO EXPANSION                      * K0047500
*                                                                     * K0048000
* TABLES = 256 BYTE TABLE IS USED TO VALIDATE ALPHANUMERIC            * K0048500
*          COMMAND OPERANDS                                           * K0049000
*                                                                     * K0049500
* MACROS = HASPCOMM = $COMGRUP, $COMTAB, $CRET, $CWTO, $CFCVB, $CFCVE,* K0050000
*                     $CFDCTD, $CFDCTL, $CFINVC, $CFINVO, $CFJDCT,    * K0050500
*                     $CFJDCTC, $CFJMSG, $CFJSCAN, $CFSEL, $CFVQE     * K0051000
*                                                                     * K0051500
* MACROS = JES2     = $HASPCB, $ENTRY, $WTO, $WAIT, $STIMER, $GETCMB, * K0052000
*                     $MSG, $TTIMER, $FRECMB, $POST, $QCKPT, $JCAN,   * K0052500
*                     $QMOD, $QLOC, $FREUNIT, $ALLOC,                 * K0053000
*                     $GETLOK, $FRELOK, $#CKPT, $#ADD, $QPUT          * K0053500
*                                                                     * K0054000
* MACROS = SYSTEM   = TIME, MODESET, PURGE                            * K0054500
*                                                                     * K0054600
*                                                                     * K0054700
*                                                                     * K0054800
*                                                                     * K0054900
* CHANGE ACTIVITY                                                     * K0055000
*                                                                     * K0055100
*     RELEASE 4.0 = OZ02440,OZ03321,OZ03339,OZ04315,OZ04343,OZ04344,  * K0055300
*                   OZ04983,OZ06751,OZ07444,OZ07458,OZ08189,OZ09044,  * K0055400
*                   OZ09045,OZ09105                                   * K0055500
*                                                                     * K0055600
*     RELEASE 4.1 = OZ09093,OZ10322,OZ10325,OZ10353,OZ10354,OZ10363,  * K0055700
*                   OZ11742,OZ11744,OZ11747,OZ11748,OZ11763,OZ11769,  * K0055800
*                   OZ11775,OZ11787,OZ12293,OZ12299,OZ12316,OZ13256,  * K0055900
*                   OZ14905,OZ15817,OZ15839,OZ16681,OZ16683,OZ18201   * K0056000
*                                                              @G38ESBB K0056200
*     EJE1103     = @G38ESBB 3800 PRINTER ENHANCEMENTS         @G38ESBB K0056400
*                                                                     * K0057000
*********************************************************************** K0057500
         TITLE 'HASP CONTROL BLOCK GENERATION MACRO'                    K0058000
*                                                                       K0058500
*****    $HASPCB   *****           GENERATE HASP CONTROL BLOCKS         K0059000
*                                                                       K0059500
         SPACE 1                                                        K0060000
         MACRO                                                          K0060500
         $HASPCB &DOC=NO,&LIST=NO                                       K0061000
         GBLC  &PRINT,&GEN,&DATA                                        K0061500
         PUSH  PRINT                                                    K0062000
         PRINT &PRINT                                                   K0062500
         $CVT  LIST=&LIST          GENERATE OS CVT DSECT                K0063000
         $SSOB (SO),LIST=&LIST     GENERATE OS SSOB DSECT               K0063500
         $TCB  LIST=&LIST          GENERATE OS TCB DSECT                K0064000
         $DCB  LIST=&LIST          GENERATE OS DCB DSECT                K0064500
         $DEB  LIST=&LIST          GENERATE OS DEB DSECT                K0065000
         $UCB  LIST=&LIST          GENERATE OS UCB DSECT                K0065500
         $CSCB LIST=&LIST          GENERATE OS CSCB DSECT               K0066000
         $UCM  LIST=&LIST          GENERATE OS UCM DSECT                K0066500
         $TAB  DOC=&DOC            GENERATE HASP TAB DSECT          R41 K0066600
         $SVT  DOC=&DOC            GENERATE HASP SSVT DSECT             K0067000
         $SJB  DOC=&DOC            GENERATE HASP SJB DSECT              K0067500
         $HCT  DOC=&DOC            GENERATE HASP HCT DSECT              K0068000
         $QSE  DOC=&DOC            GENERATE QSE DSECT                   K0068500
         $PCE  DOC=&DOC            GENERATE HASP PCE DSECT              K0069000
         $BUFFER DOC=&DOC          GENERATE HASP BUFFER DSECT           K0069500
         $CMB  DOC=&DOC            GENERATE HASP CMB DSECT              K0070000
         $ICE  DOC=&DOC            GENERATE HASP ICE DSECT           R4 K0071000
         $JQE  DOC=&DOC            GENERATE HASP JQE DSECT              K0072000
         $JOE  DOC=&DOC            GENERATE HASP JOE DSECT              K0072500
         $JOT  DOC=&DOC            GENERATE HASP JOT DSECT              K0073000
         $JQB  DOC=&DOC            GENERATE HASP JQB DSECT     @OZ27300 K0073300
         $JCT  DOC=&DOC            GENERATE HASP JCT DSECT              K0073500
         $PDDB DOC=&DOC            GENERATE HASP PDDB DSECT             K0074000
         $IOT  DOC=&DOC            GENERATE HASP IOT DSECT          R41 K0074100
         $CAT  DOC=&DOC            GENERATE HASP CAT DSECT              K0074500
         $SCAT DOC=&DOC            GENERATE HASP SCAT DSECT             K0075000
         $RAT  DOC=&DOC            GENERATE HASP RAT DSECT              K0075500
         $DCT  DOC=&DOC            GENERATE HASP DCT DSECT              K0076000
         $TQE  DOC=&DOC            GENERATE HASP TQE DSECT              K0076500
         $CCE  DOC=&DOC            GENERATE HASP CCE DSECT          R41 K0076600
         $PIT  DOC=&DOC            GENERATE HASP PIT DSECT              K0077000
         $PSO  DOC=&DOC            GENERATE HASP PSO DSECT              K0077500
         $CSA  DOC=&DOC            GENERATE HASP CSA DSECT              K0078000
         $ACT  DOC=&DOC            GENERATE HASP $ACT DSECT             K0078500
         $PQH  DOC=&DOC            GENERATE HASP PQH DSECT     @G38ESBB K0078600
         $PQE  DOC=&DOC            GENERATE HASP PQE DSECT     @G38ESBB K0078700
         $MLMWORK DOC=&DOC         GENERATE HASP MLMWORK DSECT       R4 K0080500
         $CKPWORK DOC=&DOC         GENERATE HASP CKPWORK DSECT @OZ27300 K0080600
         $RDRWORK DOC=&DOC         GENERATE HASP RDRWORK DSECT          K0081000
         $PPPWORK DOC=&DOC         GENERATE HASP PPPWORK DSECT          K0081500
         $COMWORK DOC=&DOC         GENERATE HASP COMWORK DSECT          K0082000
         $COM  DOC=&DOC,LIST=&LIST GENERATE HASP COM DSECT              K0082500
         SPACE 1                                                        K0083000
         POP   PRINT                                                    K0083500
         PRINT &GEN,&DATA          SET ASSEMBLY PRINT OPTIONS           K0084000
         MEND                                                           K0084500
         TITLE 'HASP COMMAND PROCESSOR -- MACRO DEFINITIONS'            K0085000
         MACRO -- $COMGRUP -- DEFINE GROUP OF COMMAND SUB-PROCESSORS    K0085500
&NAME    $COMGRUP &A0,&A1,&A2,&A3,&A4,&A5,&A6,&A7,&A8,&A9,&AA,&AB,&AC, CK0086000
               &AD,&AE,&AF,&B0,&B1,&B2,&B3,&B4,&B5,&B6,&B7,&B8,&B9,    CK0086500
               &DELAY=NO                                                K0087000
         LCLC  &I                                                       K0087500
         GBLC  &COMGRUP                                              R4 K0088000
&NAME    DS    0H                                                       K0088500
         USING *,BASE3             ADDRESSABILITY                       K0089000
&COMGRUP SETC  '&NAME'                                               R4 K0089500
         AIF   ('&DELAY' EQ 'NO').A                                     K0090000
         AGO   .C                                                       K0090500
.A       BR    R1                  GO TO SUB-PROCESSOR SELECTED         K0091000
         AGO   .XIT                                                     K0091500
.C       ANOP                                                           K0092000
&I       SETC  '&SYSNDX'                                                K0092500
COF&I    DS    0H                  'BR R1' TO ENTER SUB-PROCESSOR       K0093000
.XIT     MEND                                                           K0093500
         EJECT                                                          K0094000
         MACRO -- $COMTAB -- DEFINE COMMAND TABLE ENTRY                 K0094500
&NAME    $COMTAB &VERB,&GROUP,&REDIR=0,&REJECT=0                        K0095000
         LCLC  &C,&D                                                    K0095500
&NAME    DS    0F                  DEFINE SUB-PROCESSOR                 K0096500
         DC    AL1(&REDIR*16+&REJECT)  FLAG BYTES                       K0097000
         DC    AL3(&GROUP)         SUB-PROCESSOR ADDRESS                K0097500
         DC    AL2(C&VERB-&GROUP)  OFFSET TO VERB WITHIN GROUP          K0098000
         AIF   (K'&VERB LT 2).A                                         K0100500
         AIF   (K'&VERB EQ 3).B                                         K0101000
         DC    CL2'&VERB'                                               K0102000
         MEXIT                                                          K0102500
.A       DC    CL1'&VERB',X'FF'                                         K0103000
         MEXIT                                                          K0107000
.B       ANOP                                                           K0107500
&C       SETC  '&VERB'(1,1)                                             K0108000
&D       SETC  '&VERB'(2,2)                                             K0108500
         DC    CL1'&C',X'&D'                                            K0109500
         MEND                                                           K0112000
         EJECT                                                          K0112500
         MACRO -- $CRET -- RETURN TO MAIN COMMAND PROCESSOR             K0113000
&NAME    $CRET &MSG=,&L=,&INFO=                                         K0113500
         GBLC  &DOC                                                     K0114000
         LCLA  &CNT                                                     K0114500
         AIF   ('&INFO' EQ '' AND '&DOC' EQ 'NO' OR '&INFO' EQ 'NO').Z  K0115000
         EJECT                                                          K0115500
*********************************************************************** K0116000
*                                                                     * K0116500
*        $CRET -- RETURN TO MAIN COMMAND PROCESSOR                    * K0117000
*                                                                     * K0117500
*        ROUTINE MAY ISSUE $WTO AND $WAIT AS DIRECTED BY CALLER       * K0118000
*                                                                     * K0118500
* REGISTERS USED                                                      * K0119000
*        R0    = LENGTH OF MESSAGE IF RESPONSE REQUESTED, NOT MSG=OK  * K0119500
*        R1    = MESSAGE ADDRESS -- COMMAND                           * K0120000
*        R15   = RETURN CODE -- NO MESSAGE, OK, OR GENERAL MESSAGE    * K0120500
*                                                                     * K0121000
*********************************************************************** K0121500
.Z       ANOP                                                           K0122000
&NAME    NULL                                                           K0122500
         AIF   ('&MSG' EQ '' AND '&L' EQ '').H                          K0123000
         AIF   ('&L' EQ '').F                                           K0123500
         AIF   ('&L'(1,1) EQ '(').A                                     K0124000
         LA    R0,&L                                                    K0124500
         AGO   .C                                                       K0125000
.A       AIF   ('&L' EQ '(R0)').B                                       K0125500
         LR    R0,&L(1)                                                 K0126000
.B       AIF   ('&MSG' EQ '').E                                         K0126500
         MNOTE 4,'REGISTER FORM OF LENGTH INVALID'                      K0127000
         MEXIT                                                          K0127500
.C       AIF   ('&MSG' EQ '').E                                         K0128000
         AIF   ('&MSG'(1,1) EQ '(').D                                   K0128500
         MVC   COMMAND(&L),&MSG                                         K0129000
         AGO   .E                                                       K0129500
.LITERAL ANOP                                                           K0130000
&CNT     SETA  K'&MSG-2                                                 K0130500
         MVC   COMMAND(&CNT),=C&MSG                                     K0131000
         LA    R0,&CNT             SET LENGTH OF MSG IN R0              K0131500
         AGO   .E                                                       K0132000
.D       MVC   COMMAND(&L),0&MSG                                        K0132500
.E       LA    R15,CORTMSG         RETURN AND ISSUE MESSAGE             K0133000
         AGO   .I                                                       K0133500
.F       AIF   ('&MSG' EQ 'OK').G                                       K0134000
         AIF   ('&MSG'(1,1) EQ '''').LITERAL                            K0134500
         MNOTE 4,'LENGTH REQUIRED'                                      K0135000
         MEXIT                                                          K0135500
.G       LA    R15,CORTOK          RETURN AND ISSUE OK MESSAGE          K0136000
         AGO   .I                                                       K0136500
.H       LA    R15,CORTNORM        NORMAL RETURN                        K0137000
.I       B     CORET               RETURN                               K0137500
         MEND                                                           K0138000
         EJECT                                                          K0138500
         MACRO -- $CWTO -- WRITE TO OPERATOR -- RESPONSE                K0139000
&NAME    $CWTO &MSG=,&L=,&INFO=,&RET=,&TRUNC=NO                         K0139500
         GBLC  &DOC                                                     K0140000
         LCLA  &CNT                                                     K0140500
         LCLC  &LOC                                                     K0141000
&LOC     SETC  'CWTO'                                                   K0141500
         AIF   ('&TRUNC' EQ 'NO').AA                                    K0142000
&LOC     SETC  'CWTOT'                                                  K0142500
.AA      ANOP                                                           K0143000
         AIF   ('&INFO' EQ '' AND '&DOC' EQ 'NO' OR '&INFO' EQ 'NO').Z  K0143500
         EJECT                                                          K0144000
*********************************************************************** K0144500
*                                                                     * K0145000
*        CWTO/CWTOT -- WRITE TO OPERATOR                              * K0145500
*                                                                     * K0146000
*        ROUTINE ISSUES A $WAIT                                       * K0146500
*                                                                     * K0147000
* REGISTERS USED                                                      * K0147500
*        R0    = LENGTH OF MESSAGE                                    * K0148000
*        R1    = MESSAGE ADDRESS -- COMMAND                           * K0148500
*        WA    = LINK REGISTER                                        * K0149000
*        LINK  = LINKAGE FOR $WTO                                     * K0149500
*        R15   = WAIT REENTRY                                         * K0150000
*                                                                     * K0150500
*********************************************************************** K0151000
.Z       ANOP                                                           K0151500
&NAME    NULL                                                           K0152000
         AIF   ('&MSG' EQ '' AND '&L' EQ '').H                          K0152500
         AIF   ('&L' EQ '').G                                           K0153000
         AIF   ('&L'(1,1) EQ '(').A                                     K0153500
         LA    R0,&L                                                    K0154000
         AIF   ('&MSG' EQ '').D                                         K0154500
         AIF   ('&MSG'(1,1) EQ '(').C                                   K0155000
         MVC   COMMAND(&L),&MSG                                         K0155500
         AGO   .D                                                       K0156000
.A       AIF   ('&L' EQ '(R0)').B                                       K0156500
         LR    R0,&L(1)                                                 K0157000
.B       AIF   ('&MSG' EQ '').D                                         K0157500
         MNOTE 4,'REGISTER FORM OF LENGTH INVALID'                      K0158000
         MEXIT                                                          K0158500
.C       MVC   COMMAND(&L),0(&MSG)                                      K0159000
.D       AIF   ('&RET' EQ '').E                                         K0159500
         $DECODE &RET,RA=WA                                             K0160000
         B     &LOC                REPLY TO OPERATOR                    K0160500
         MEXIT                                                          K0161000
.E       BAL   WA,&LOC             REPLY TO OPERATOR                    K0161500
         MEXIT                                                          K0162000
.F       MNOTE 4,'LENGTH REQUIRED'                                      K0162500
         MEXIT                                                          K0163000
.LITERAL ANOP                                                           K0163500
&CNT     SETA  K'&MSG-2                                                 K0164000
         MVC   COMMAND(&CNT),=C&MSG                                     K0164500
         LA    R0,&CNT             SET LENGTH OF MSG IN R0              K0165000
         AGO   .D                                                       K0165500
.G       AIF   ('&MSG'(1,1) EQ '''').LITERAL                            K0166000
         AGO   .F                                                       K0166500
.H       AIF   ('&TRUNC' EQ 'NO').F                                     K0167000
         SLR   R0,R0               SET NULL LENGTH                      K0167500
         AGO   .D                                                       K0168000
         MEND                                                           K0168500
 TITLE 'HASP COMMAND PROCESSOR FUNCTION MACRO DEFINITIONS'              K0169000
         MACRO -- $CFCVB -- CONVERT TO BINARY                           K0169500
&NAME    $CFCVB &TYPE=CALL,&POINTER=(R1),&NUM=2,&INFO=NO,&NOK=          K0170000
         GBLC  &DOC                                                     K0170500
         LCLC  &R                                                       K0171000
         LCLA  &CNT                                                     K0171500
&R       SETC  '&SYSNDX'                                                K0172000
         AIF   ('&INFO' EQ '' AND '&DOC' EQ 'NO' OR '&INFO' EQ 'NO').Z  K0172500
         AIF   ('&TYPE' EQ 'RES').NOJECT                                K0173000
         EJECT                                                          K0173500
.NOJECT  SPACE 2                                                        K0174000
*********************************************************************** K0174500
*                                                                     * K0175000
*        COFCVB -- CONVERT TO BINARY                                  * K0175500
*                                                                     * K0176000
*        ROUTINE CONVERTS A PAIR OF NUMBERS OF THE FORM               * K0176500
*                                                                     * K0177000
*        TEXTN1-N2 WHERE                                              * K0177500
*        TEXT  = OPTIONAL TEXT IDENTIFIERS  JOB, PRT, RM ETC.         * K0178000
*        N1    = FIRST OF A SERIES OF NUMBERS LT 10000 IN VALUE       * K0178500
*        N2    = OPTIONAL LAST OF A SERIES OF NUMBERS LT 10000.       * K0179000
*        IN A SERIES OF VALUES, N1-N2-N3-N4, THE LAST TWO VALUES      * K0179500
*        ARE CONCIDERED TO BE START-STOP VALUES.                      * K0180000
*        THE MEANING OF THE START-STOP VALUES FOR EXAMPLE 1-5 ARE     * K0180500
*        THE USER DESIRES AN OPERATION PERFORMED ON JOB OR FACILITY   * K0181000
*        TYPE INDICATED, NUMBERS 1, 2, 3, 4, AND 5.                   * K0181500
*                                                                     * K0182000
*        NO $WAITS ARE ISSUED.                                        * K0182500
*                                                                     * K0183000
* REGISTERS USED                                                      * K0183500
*        R0    = ACCUMULATOR - STOP VALUE                             * K0184000
*        R1    = ADDRESS OF OPERAND POINTER -- START VALUE            * K0184500
*        LINK  = LINK REGISTER                                        * K0185000
*        R15   = WORK REGISTER                                        * K0185500
*                                                                     * K0186000
* EXITS                                                               * K0186500
*        LINK+0 OPERAND DOES NOT CONTAIN NUMERIC OR NUMERIC TOO LARGE * K0187000
*        LINK+4 NORMAL EXIT                                           * K0187500
*                                                                     * K0188000
* NOTES                                                               * K0188500
*        R1 VALUE IS EQUAL TO R0 IF USER REQUESTS NUM=2 AND ONLY      * K0189000
*        ONE VALUE IS PRESENT. IF NUM=1 IS USED R1 VALUE IS           * K0189500
*        UNPREDICTABLE. ( NUM=1 MAY BE IGNORED ).                     * K0190000
*                                                                     * K0190500
*********************************************************************** K0191000
.Z       ANOP                                                           K0191500
&NAME    NULL                                                           K0192000
         AIF   ('&TYPE' NE 'CALL').INL                                  K0192500
         $DECODE &POINTER                                               K0193000
.CAL     BAL   LINK,COFCVB         CONVERT NUMBERS TO BINARY            K0193500
         AIF   ('&NOK' NE '').NOKOK                                     K0194000
         MNOTE 4,'NOK KEYWORD MUST BE SUPPLIED'                         K0194500
         AGO   .XIT                                                     K0195000
.NOKOK   ANOP                                                           K0195500
         AIF   ('&NOK'(1,1) EQ '(').REG                                 K0196000
         B     &NOK                BRANCH IF OPERAND INVALID            K0196500
         AGO   .XIT                                                     K0197000
.REG     ANOP                                                           K0197500
&CNT     SETA  K'&NOK-2                                                 K0198000
&R       SETC  '&NOK'(2,&CNT)                                           K0198500
         B     0(,&R)              BRANCH IF INVALID OPERAND            K0199000
         MEXIT                                                          K0199500
.INL     L     R15,0(0,R1)         PICK UP FIRST PARAMETER              K0200000
COF&R.K  CLI   0(R15),C'0'         CHARACTER NUMERIC...             R41 K0200500
         BNL   COF&R.L             IF NUMERIC, CONVERT               R4 K0201000
         LA    R15,1(0,R15)        NEXT CHARACTER                       K0201500
         CLM   R15,7,5(R1)         DID WE GO TOO FAR                 R4 K0202000
         BL    COF&R.K             LOOP IF NO                       R41 K0202500
         BR    LINK                RETURN INVALID OPERAND               K0203000
         EJECT                                                      R41 K0203300
*********************************************************************** K0203400
* CONVERT PAIR OF START STOP VALUES                                   * K0203500
*********************************************************************** K0203600
COF&R.L  SLR   R0,R0               ZERO ACCUMULATOR, STOP VALUE         K0204000
         ST    R0,COMFWORK         CLEAR WORK AREA FOR CONVERT          K0204500
         AIF   ('&NUM' NE '2').BA                                       K0205000
         LNR   R1,R15              SET NEGATIVE FLAGS                   K0205500
.BA      ANOP                                                           K0206000
COF&R.C  MVN   COMFWORK+1(1),0(R15) MOVE NUMERIC TO WORK AREA           K0206500
         MH    R0,=H'10'           MULTIPLY BY TEN FOR TEN'S DIGIT      K0207000
         AH    R0,COMFWORK         ADD LOW DIGIT                        K0207500
         CH    R0,=H'9999'         LOOK FOR MAXIMUM JOB NUMBR           K0208000
         BCR   H,LINK              RETURN INVALID OPERAND               K0208500
COF&R.N  LA    R15,1(0,R15)        NEXT CHARACTER                       K0209000
         CLI   0(R15),C'0'         TEST FOR NUMERIC ( FA-FF INCLUDED )  K0209500
         BNL   COF&R.C             IF NUMERIC, CONVERT THE CHARACTER R4 K0210000
         AIF   ('&NUM' NE '2').G                                        K0210500
         CLI   0(R15),C'-'         LOOK FOR SEPARATOR                   K0211000
         BE    COF&R.O             BR IF YES TO CONVERT NEXT VALUE  R41 K0211500
         CLR   R1,R0               TEST FOR BOTH VALUES                 K0212000
         BNH   4(0,LINK)           RETURN WITH CONVERTED VALUES         K0212500
         LR    R1,R0               SET TO SAME                          K0213000
         B     4(0,LINK)           RETURN WITH CONVERTED VALUES         K0213500
COF&R.O  CLI   1(R15),C'0'         NEXT CHARACTER NUMERIC...        R41 K0214000
         BLR   LINK                RETURN INVALID OPERAND IF NO     R41 K0214100
         LR    R1,R0               SET START OF STRING              R41 K0214200
         SLR   R0,R0               PREPARE FOR NEXT                     K0214500
         B     COF&R.N             CONVERT NEXT VALUE OF SET         R4 K0215000
         AGO   .I                                                       K0215500
.G       ANOP                                                           K0216000
         B     4(0,LINK)           RETURN                               K0216500
.I       ANOP                                                           K0217000
.XIT     MEND                                                           K0217500
         EJECT                                                          K0218000
         MACRO -- $CFCVE -- CONVERT TO EBCDIC                           K0218500
&NAME    $CFCVE &VALUE=(R0),&TYPE=CALL,&INFO=NO                         K0219000
         GBLC  &DOC                                                     K0219500
         LCLC  &R                                                       K0220000
&R       SETC  '&SYSNDX'                                                K0220500
         AIF   ('&INFO' EQ '' AND '&DOC' EQ 'NO' OR '&INFO' EQ 'NO').Z  K0221000
         AIF   ('&TYPE' EQ 'RES').NOJECT                                K0221500
         EJECT                                                          K0222000
.NOJECT  SPACE 2                                                        K0222500
*********************************************************************** K0223000
*                                                                     * K0223500
*        COFCVE -- CONVERT TO EBCDIC                                  * K0224000
*                                                                     * K0224500
*        ROUTINE CONVERTS A HALF WORD BINARY NUMBER LOCATED           * K0225000
*        AT ADDRESS 'VALUE'.  ANSWER WILL BE IN FIRST FIVE            * K0225500
*        CHARACTERS OF COMDWORK.                                      * K0226000
*        NO $WAITS ARE ISSUED.                                        * K0226500
*                                                                     * K0227000
* REGISTERS USED                                                      * K0227500
*        R0    = VALUE TO BE CONVERTED                                * K0228000
*        LINK  = RETURN LINKAGE                                       * K0228500
*                                                                     * K0229000
* NOTES                                                               * K0229500
*        COMEWORK - COMDWORK AREAS ARE USED FOR SCRATCH               * K0230000
*                                                                     * K0230500
*********************************************************************** K0231000
.Z       ANOP                                                           K0231500
&NAME    $DECODE &VALUE,OPA=LH,RA=R0                                    K0232000
         AIF   ('&TYPE' NE 'CALL').INL                                  K0232500
.CAL     BAL   LINK,COFCVE         CONVERT TO EBCDIC                    K0233000
         MEXIT                                                          K0233500
.INL     ANOP                                                           K0234000
*********************************************************************** K0234400
* CONVERT TO EBCDIC AND LEAVE ANSWER IN COMDWORK ( 5 DIGITS )         * K0234500
*********************************************************************** K0234600
         CVD   R0,COMDWORK         CONVERT TO DECIMAL                   K0235000
         MVC   COMDWORK-1(6),=X'402020202120' MOVE MASK FOR RESULT      K0235500
         ED    COMDWORK-1(6),COMDWORK+5 CONVERT TO EBCDIC               K0236000
         BR    LINK                RETURN                               K0236500
.XIT     MEND                                                           K0237000
         EJECT                                                          K0237500
         MACRO -- $CFDCTD -- DISPLAY DEVICE CONTROL TABLE               K0238000
&NAME   $CFDCTD &DCT=(R1),&TYPE=CALL,&EXT=NO,&ENTRY=COFDCTD,&INFO=NO    K0238500
         GBLC  &DOC                                                     K0239000
         GBLC  &COMGRUP                                              R4 K0239500
         LCLC  &R                                                       K0240000
&R       SETC  '&SYSNDX'                                                K0240500
         AIF   ('&INFO' EQ '' AND '&DOC' EQ 'NO' OR '&INFO' EQ 'NO').Z  K0241000
         AIF   ('&TYPE' EQ 'RES').NOJECT                                K0241500
         EJECT                                                          K0242000
.NOJECT  SPACE 2                                                        K0242500
*********************************************************************** K0243000
*                                                                     * K0243500
*        COFDCTD -- DEVICE CONTROL TABLE DISPLAY                      * K0244000
*                                                                     * K0244500
*        ROUTINE CREATES A STATUS MESSAGE IN AREA 'COMMAND' AND       * K0245000
*        INITIATES OPERATOR RESPONSE.                                 * K0245500
*        $WAIT MAY BE ISSUED.                                         * K0246000
*                                                                     * K0246500
* REGISTERS USED                                                      * K0247000
*        R0    = LENGTH OF MESSAGE                                    * K0247500
*        R1    = ADDRESS OF DCT, WORK REGISTER, PARAMETER TO $WTO     * K0248000
*                HIGH-ORDER BYTE OF R1 INDICATES TYPE OF DISPLAY      * K0248500
*                X'FF' -RAT ADDR   DISPLAY RAT INFO                   * K0248600
*                X'0F'  DCT ADDR   DISPLAY EXTENDED DCT INFO          * K0248700
*                X'00'  DCT ADDR   DISPLAY SHORT DCT INFO             * K0248800
*        WA    = LINK REGISTER                                        * K0249000
*        LINK  = LINKAGE TO $WTO                                      * K0249500
*        R15   = WAIT RETURN                                          * K0250000
*                                                                     * K0250500
* WORK AREAS USED                                                     * K0251000
*        COMEWORK USED TO SAVE PTR TO DCT (R1)                        * K0251500
*        COMFWORK USED TO SAVE RETURN ADDRESS (WA)                    * K0252000
*        COMDWORK USED TO SAVE REGS (R1 AND WA) OVER $CWTO            * K0252500
*        COMJNAME USED AS OVERFLOW MESSAGE AREA                       * K0253000
*                                                                     * K0253500
*********************************************************************** K0254000
.Z       ANOP                                                           K0254500
&NAME    $DECODE &DCT                                                   K0255000
         AIF   ('&TYPE' NE 'CALL').INL                                  K0255500
         AIF   ('&EXT' EQ 'SET').CAL                                 R4 K0256000
         AIF   ('&EXT' NE 'NO').EXT                                     K0256500
         LA    R1,0(,R1)           INDICATE NO EXTENDED DISPLAY         K0257000
         AGO   .CAL                                                     K0257500
.EXT     ICM   R1,8,=X'0F'         INDICATE EXTENDED DCT DISPLAY    R41 K0258000
.CAL     ANOP                                                        R4 K0258500
         L     BASE3,=A(COFDCTD)   GET ADDRESS OF DCT DISPLAY RTN    R4 K0259000
         BALR  WA,BASE3            CALL DISPLAY  ROUTINE             R4 K0259500
         DC    Y(*-&COMGRUP)       ADDRESSABILITY ADJUSTMENT         R4 K0260000
         MEXIT                                                          K0260500
.INL     ANOP                                                        R4 K0261000
         USING *,BASE3             ESTABLISH ROUTINE ADDRESSABILITY  R4 K0261500
         ST    R1,COMEWORK         SAVE ADDR OF DCT                  R4 K0262000
         ST    WA,COMFWORK         SAVE CONTENTS OF WA -- USE ASE WK R4 K0262500
         MVI   COMMAND,C' '        CLEAR RESPONSE AREA                  K0263000
         MVC   COMMAND+1(L'COMMAND+L'COMJNAME-1),COMMAND             R4 K0263500
         LTR   R1,R1               TEST PASSED ADDRESS              R41 K0263600
         BP    COFP&R              POSITIVE MEANS A DCT ADDRESS     R41 K0263700
         LPR   R1,R1               ELSE = -RAT, SO MAKE POSITIVE    R41 K0263800
         LA    WA,COMMAND+23       BUMP PAST BASIC MESSAGE          R41 K0263900
         MVC   COMMAND+10(12),=C'*** INACTIVE' INDICATE INACTIVE    R41 K0264000
         L     R1,RATLDCT-RATDSECT(,R1) GET LINE DCT ADDRESS        R41 K0264100
         LTR   R1,R1               IS REMOTE CONNECTED              R41 K0264200
         BZ    COF&R.D             NO, LEAVE INACTIVE               R41 K0264300
         TM    DCTSTAT-DCTDSECT(R1),DCTINUSE IS RMT ACTIVE          R41 K0264400
         BZ    COF&R.D             NO, LEAVE INACTIVE               R41 K0264500
         MVC   COMMAND+14(8),=C'ACTIVE  ' ELSE SHOW ACTIVE          R41 K0264600
         B     COF&R.W             GO CONTINUE PROCESSING           R41 K0264700
         SPACE 1                                                    R41 K0264800
COFP&R   MVC   COMMAND(8),DCTDEVN-DCTDSECT(R1) SET DEVICE NAME      R41 K0264900
         MVC   COMMAND+10(12),=C'*** DRAINING' SET DEVICE DRAINING      K0265000
         TM    DCTSTAT-DCTDSECT(R1),DCTDRAIN TEST FOR DRAIN BIT         K0265100
         BZ    COF&R.A             BRANCH IF NOT DRAINED OR DRAINING    K0265500
         TM    DCTSTAT-DCTDSECT(R1),DCTINUSE TEST FOR DRAINING          K0266000
         BO    COF&R.B             LOCATE UCB 'DRAINING'                K0266500
         MVC   COMMAND+19(3),=CL3'ED'  SET 'DRAINED'                    K0267000
         B     COF&R.B             LOCATE UCB 'DRAINED '                K0267500
COF&R.A  MVC   COMMAND+14(8),=CL8'ACTIVE'  SET UNIT ACTIVE              K0268000
         TM    DCTSTAT-DCTDSECT(R1),DCTINUSE TEST FOR ACTIVE            K0268500
         BZ    COF&R.5             IF NOT ACTIVE CHK FURTHER            K0269000
         TM    DCTFLAGS-DCTDSECT(R1),DCTSTOP TEST FOR HALTED            K0269500
         BZ    COF&R.B             NOOGO FIND UCB POSSIBLY              K0270000
         MVC   COMMAND+14(8),=CL8'HALTED'  DEVICE IS HALTED             K0270500
         B     COF&R.B             GO LOOK FOR UCB                      K0271000
COF&R.5  TM    DCTDEVTP-DCTDSECT(R1),DCTPRPU TEST FOR PRT/PUN           K0272000
         BZ    COF&R.6             NO--CAN'T BE PAUSING                 K0272500
         TM    DCTSTAT-DCTDSECT(R1),DCTPAUSE  TEST FOR PAUSED           K0273000
         BZ    COF&R.6             NO--JUST INACTIVE                    K0275000
         MVC   COMMAND+14(8),=CL8'PAUSED'  SET PRT/PUN PAUSING          K0275500
         B     COF&R.B             GO LOOK FOR UCB                      K0276000
COF&R.6  MVC   COMMAND+14(8),=CL8'INACTIVE' SET DEVICE AS INACTIVE      K0276500
         EJECT                                                      R41 K0276800
*********************************************************************** K0276900
* DCT STATUS SET IN MESSAGE - LOCATE AND SET DEVICE ADDRESS           * K0277000
*********************************************************************** K0277100
COF&R.B  LA    WA,COMMAND+23       BUMP PAST BASIC MESSAGE           R4 K0277500
         CLI   DCTDEVTP-DCTDSECT(R1),DCTINR TEST FOR INTERNAL RDR    R4 K0278000
         BE    COF&R.D             YES  SKIP UCB LOCATE                 K0278500
         CLI   DCTDEVTP-DCTDSECT(R1),DCTLOG TEST OF LOGON            R4 K0279500
         BE    COFI&R              YES, BR - USE SNA IN UNIT FIELD   R4 K0280000
         TM    DCTDEVTP-DCTDSECT(R1),DCTRJE  TEST FOR RJE               K0281500
         BZ    COF&R.C             NO--SKIP NEXT TEST                   K0283500
         CLI   DCTDEVTP-DCTDSECT(R1),DCTLNE SEPERATE LINES              K0284000
         BE    COF&R.S             FROM REMOTE DEVICES               R4 K0284500
         TM    MDCTSTAT-DCTDSECT(R1),DCTSINON IS REMOTE SIGNED ON    R4 K0285000
         BZ    COF&R.D             IF NOT, MESSAGE IS COMPLETE          K0285500
         L     R1,DCTDCB-DCTDSECT(0,R1) PICK UP LINE DCT                K0286000
         B     COF&R.W             GO FIND THE LINE UNIT ADDRESS     R4 K0286500
COF&R.S  L     R15,MDCTRAT-DCTDSECT(,R1) GET RAT ENTRY ADDRESS       R4 K0287000
         LTR   R15,R15             TEST FOR ACTIVE USER              R4 K0287500
         BZ    COF&R.W             NO, BR- GO INSERT THE DEVICE ADDR R4 K0288000
         MVI   0(WA),C'('          INSERT OPEN PAREN                 R4 K0288500
COF&R.3  MVC   1(L'RATNAME,WA),RATNAME-RATDSECT(R15) MOVE IN RMT ID  R4 K0292500
         LA    WA,L'RATNAME(,WA)   POINT TO LAST BYTE OF REMOTE ID   R4 K0293000
COF&R.0  CLI   0(WA),C' '          IS THIS A BLANK CHARACTER         R4 K0293500
         BNE   *+8                 SKIP NEXT INSTR. IF NON-BLANK     R4 K0294000
         BCT   WA,COF&R.0          BACK UP ONE BYTE AND LOOP TO TEST R4 K0294500
         MVI   1(WA),C')'          MOVE CLOSING PAREN AFTER CHAR     R4 K0295000
         LA    WA,3(,WA)           STEP PAST CHAR, PAREN, AND BLANK  R4 K0295500
COF&R.W  DS    0H                                                    R4 K0296000
         TM    MDCTTYPE-DCTDSECT(R1),DCTPSNA TEST FOR SNA LINES      R4 K0297000
         BNO   COF&R.C             NO, GO FIND UCB ADDRESS           R4 K0297500
COFI&R   MVC   COMMAND+10(3),=CL3'SNA' INSERT SNA IN UNIT ADDR FIELD R4 K0298000
         B     COF&R.D             SKIP UCB LOCATE                   R4 K0298500
COF&R.C  L     R1,DCTDCB-DCTDSECT(0,R1) PICK UP DCB                     K0299500
         L     R1,DCBDEBAD-DCBDSECT(0,R1) PICK UP DEB                   K0300000
         OC    DEBTCBAD+1-DEBDSECT(3,R1),DEBTCBAD+1-DEBDSECT(R1)        K0300500
         BZ    COF&R.D             IF DEB NOT INITIALIZED, MESSAGE SET  K0301000
         ICM   R1,7,DEBSUCBB-DEBDSECT(R1)  GET UCB, IS IT SET...     R4 K0301500
         BZ    COF&R.D             IF NOT, MESSAGE COMPLETE             K0302000
         MVC   COMMAND+10(3),UCBNAME-UCBDSECT(R1) INSERT UNIT ADDRESS   K0302500
         EJECT                                                      R41 K0302800
*********************************************************************** K0302900
*        TEST FOR EXTENDED DISPLAY OF DCT                             * K0303000
*********************************************************************** K0303100
         SPACE 1                                                        K0303500
COF&R.D  DS    0H                  CHECK FOR EXTENDED DISPLAY           K0304000
         TM    COMEWORK,X'FF'      WAS INPUT ADDR A -RAT            R41 K0304100
         BO    COFT&R              YES GO DISPLAY RAT INFO          R41 K0304200
         L     R1,COMEWORK         RESTORE DCT POINTER                  K0304500
         CLI   DCTDEVTP-DCTDSECT(R1),DCTRCON TEST FOR REMOTE CONS.  R41 K0304600
         BE    COF&R.X             WRITE MESSAGE AND EXIT           R41 K0304700
         TM    COMEWORK,X'FF'      TEST FOR EXTENDED DISPLAY            K0305000
         BZ    COF&R.X             NO-- WRITE MESSAGE AND EXIT       R4 K0305500
*********************************************************************** K0306000
*        EXTENDED DISPLAY OF DCT IS DESIRED                           * K0306500
*********************************************************************** K0307000
         CLI   DCTDEVTP-DCTDSECT(R1),DCTLNE  CHECK FOR RJE LNE          K0307500
         BE    COF&R.F             YES--GO DISPLAY A LINE               K0308000
         CLI   DCTDEVTP-DCTDSECT(R1),DCTLOG TEST FOR LOGON DCT       R4 K0309000
         BE    COF&R.Z             YES, BR - DISPLAY LOGON DCT       R4 K0309500
*********************************************************************** K0310500
*        FORMAT JOB NUMBER AND NAME IF DEVICE IS ACTIVE               * K0311000
*********************************************************************** K0311100
         TM    DCTDEVTP-DCTDSECT(R1),DCTPRPU  TEST DEVICE....  @OZ46673 K0311110
         BZ    COFN&R              BRANCH IF REMOTE            @OZ46673 K0311120
         TM    DCTPPSW2-DCTDSECT(R1),DCTNIPRT 3800 PRINTER     @G38ESBB K0311200
         BZ    COFN&R              BR IF NOT                   @G38ESBB K0311300
         L     R15,DCTPCE-DCTDSECT(,R1) GET PCE ADDRESS        @G38ESBB K0311400
         L     R15,PQHADR-PCEDSECT(,R15) GET 3800 PQH ADDRESS  @G38ESBB K0311500
         L     R15,PQHXJQE-PQHDSECT(,R15) GET JQE AT XFER STAT @G38ESBB K0311600
         LTR   R15,R15             TEST FOR JOB AT XFER STAT   @G38ESBB K0311700
         BNZ   COFO&R              BR IF YES                   @G38ESBB K0311800
COFN&R   TM    DCTSTAT-DCTDSECT(R1),DCTINUSE TEST FOR ACTIVITY @G38ESBB K0311900
         BZ    COF&R.G             NO--FORGET JOB PORTION               K0312000
         SPACE 1                                                        K0312500
         L     R15,DCTPCE-DCTDSECT(,R1)  GET POINTER TO PCE             K0313000
         L     R15,PCEJQE-PCEDSECT(,R15) GET THE JQE ADDRESS   @OZ32566 K0314000
*              THIS LINE DELETED BY APAR NUMBER                @OZ32566 K0314500
*              THIS LINE DELETED BY APAR NUMBER                @OZ32566 K0315000
*              THIS LINE DELETED BY APAR NUMBER                @OZ32566 K0315500
*              THIS LINE DELETED BY APAR NUMBER                @OZ32566 K0316000
         LA    R15,0(,R15)         PURIFY                            R4 K0318000
         LTR   R15,R15             TEST FOR A JOB                       K0318500
         BZ    COF&R.G             NONE -- FORGET IT                    K0319000
COFO&R   MVC   0(4,WA),=C'(JOB'    SET JOB PREFIX              @G38ESBB K0319500
         LH    R0,QUEJOBNO(,R15)   LOAD BINARY JOB NUMBER               K0320000
         CH    R0,=H'10000'        CHECK FOR JOB                        K0320500
         BL    COF&R.7             YES -- CONVERT NBR TO EBCDIC         K0321000
         MVC   1(3,WA),=C'TSU'     ASSUME TIME SHARING USER             K0321500
         SH    R0,=H'20000'        CHECK ASSUMPTION                     K0322000
         BNM   COF&R.7             YES -- GO CONVERT NBR TO EBCDIC      K0322500
         AH    R0,=H'10000'        NO -- MUST BE SYSTEM TASK            K0323000
         MVC   1(3,WA),=C'STC'     ADJUST NBR AND MSG FOR SAME          K0323500
COF&R.7  DS    0H                  CONVERT NUMBER TO EBCDIC             K0324000
         CVD   R0,COMDWORK         CONVERT TO DECIMAL                   K0324500
         MVC   4(6,WA),=X'402020202120'  SET EDIT PATTERN               K0325000
         ED    4(6,WA),COMDWORK+5  EDIT CONVERTED JOB NUMBER            K0325500
         MVI   10(WA),C' '         SET BLANK AFTER NUMBER               K0326000
         MVC   11(L'JQEJNAME,WA),QUEJNAME(R15) SET J NAME IN MSG        K0326500
         LA    R15,L'JQEJNAME      SET MAX LENGTH OF JOB NAME           K0327000
COF&R.H  CLI   11(WA),C' '         CHECK FOR END OF JOB NAME            K0327500
         BE    *+12                YES -- TRUNCATE STRING               K0328000
         LA    WA,1(,WA)           NO--POINT TO NEXT CHARACTER          K0328500
         BCT   R15,COF&R.H         AND LOOP THROUGH NAME                K0329000
         MVI   11(WA),C')'         END JOB PORTION                      K0329500
         LA    WA,13(,WA)          POINT TO NEXT BYTE OF MSG            K0330000
         EJECT                                                      R41 K0330400
*********************************************************************** K0330500
*        TEST FOR PRT/PUN--YES--DISPLAY FORMS AND PAUSE               * K0331000
*********************************************************************** K0331500
COF&R.G  NULL                                                           K0332000
         TM    DCTDEVTP-DCTDSECT(R1),DCTPRPU TEST FOR PRT/PUN           K0335500
         BZ    COF&R.I             NO--GO TO READERS                    K0336000
         MVC   0(2,WA),=C'F='      SET FORMS PREFIX                     K0336500
         MVC   2(L'DCTFORMS,WA),DCTFORMS-DCTDSECT(R1) SET FORMS SP      K0337000
         MVI   2+L'DCTFORMS(WA),C','   SET IN SEPERATOR                 K0337500
         TM    DCTPPSW-DCTDSECT(R1),DCTPPSWF CHECK FOR STD FORMS        K0338000
         BZ    COF&R.J             NO -- HASP CONTROLLED                K0338500
         MVC   2+L'DCTFORMS+1(4,WA),=C'OPER' SET OPERATOR CNTRL         K0339000
         B     *+14                BR ARND NEXT                         K0339500
COF&R.J  DS    0H                                                       K0340000
         MVC   2+L'DCTFORMS+1(5,WA),=C'AUTOM' SET HASP CNTRLED          K0340500
         LA    WA,1(,WA)           UP ONE FOR THE 'M'                   K0341000
         MVC   2+L'DCTFORMS+1+5(3,WA),=C'P=N' SET PAUSE AS NO           K0341500
         TM    DCTPPFL-DCTDSECT(R1),DCTPAUSE  CHECK FOR NO PAUSE        K0342000
         BZ    *+8                 NO PAUSE LEAVE AS IS                 K0342500
         MVI   2+L'DCTFORMS+1+5+2(WA),C'Y' PAUSING -- SET 'Y'           K0343000
         LA    WA,2+L'DCTFORMS+1+5+4(,WA)  POINT TO NEXT BYTE           K0343500
*********************************************************************** K0344000
*        ROUTING OF PRINT/PUNCH DEVICE                                * K0344500
*********************************************************************** K0345000
         LA    R15,DCTNO-DCTDSECT(,R1) POINT TO ROUTE CODE           R4 K0345500
         LA    R0,1(,WA)           POINT TO TEXT AREA                R4 K0346000
         BAL   R14,COFRTC          CONVERT TO EBCDIC                 R4 K0346500
         MVC   0(2,WA),=C'R='      SET KEYWORD                       R4 K0347000
         LA    WA,11(,WA)          POINT TO NEXT SLOT                R4 K0347500
         TM    DCTDEVTP-DCTDSECT(R1),DCTPUN  TEST FOR PUNCHES           K0348000
         BO    COF&R.K             IF SO SKIP FCB UCS SPC MSG           K0348500
         EJECT                                                      R41 K0348900
*********************************************************************** K0349000
*        PRINTERS ONLY -- FCB, UCS, AND SPACING ATTRIBUTES            * K0349500
*********************************************************************** K0350000
         MVC   0(2,WA),=C'C='      SET FCB PREFIX                       K0350500
         MVC   2(L'DCTFCB,WA),DCTFCB-DCTDSECT(R1) SET FCB               K0351000
         LA    R15,2+L'DCTFCB      LENGTH OF FCB ID                  R4 K0351500
         CLI   2(WA),C'*'          TEST FOR NULL SETTING             R4 K0352000
         BNE   *+12                BR IF NO                          R4 K0352500
         LA    R15,2+1             ELSE, PRINT A                     R4 K0353000
         MVI   2+1(WA),C' '         SINGLE '*'                       R4 K0353500
         LA    WA,0(WA,R15)        POINT TO NEXT FREE BYTE           R4 K0354000
         TM    DCTPPSW-DCTDSECT(R1),DCTPPSWB TEST FOR STD FCB           K0354500
         BO    *+14                NO--DON'T FLAG AS STD FCB            K0355000
         MVC   0(4,WA),=C',STD'    SET AS STANDARD                   R4 K0355500
         LA    WA,4(,WA)           POINT TO NEXT BYTE                   K0356000
         LA    WA,1(,WA)           POINT TO NEXT MESSAGE AREA        R4 K0356500
         MVC   0(2,WA),=C'T='      SET TRAIN PREFIX                     K0357000
         MVC   2(L'DCTUCS,WA),DCTUCS-DCTDSECT(R1) SET TRAIN             K0357500
         TM    DCTPPSW-DCTDSECT(R1),DCTPPSWU TEST FOR STD UCS           K0358000
         BO    *+14                NO--DON'T ADD TO MSG                 K0358500
         MVC   2+L'DCTUCS(4,WA),=C',STD'  SET STD UCS ON PRT            K0359000
         LA    WA,4(,WA)           POINT TO NEXT BYTE                   K0359500
         LA    WA,2+L'DCTUCS+1(,WA)      POINT TO NEXT BYTE             K0360000
         SPACE 1                                                        K0360500
*********************************************************************** K0360900
*        SET SPACING ATTRIBUTES IF PRESENT                            * K0361000
*********************************************************************** K0361100
         TM    DCTFLAGS-DCTDSECT(R1),DCTSPACE  CHECK FOR SPCING         K0361500
         BZ    COF&R.K             NONE -- SKIP MESSAGE                 K0362000
         MVC   0(2,WA),=C'K='      SET SPACING PREFIX                   K0362500
         LA    R15,X'F0'           SET ZERO SPACING (F0)                K0363000
         TM    DCTFLAGS-DCTDSECT(R1),2  CHECK FOR DOUBLE SPACING        K0363500
         BZ    *+8                 NO--DON'T INDICATE AS SUCH           K0364000
         LA    R15,2(,R15)         YES--MAKE 'F2' TWO                   K0364500
         TM    DCTFLAGS-DCTDSECT(R1),1  TEST FOR SINGLE SPACING         K0365000
         BZ    *+8                 NO--DON'T INDICATE AS SUCH           K0365500
         LA    R15,1(,R15)         YES--ADD ONE(EITHER F1 OR F3)        K0366000
         STC   R15,2(,WA)          STORE SPACING CHARACTER              K0366500
         LA    WA,4(,WA)           POINT TO NEXT MSG BYTE               K0367000
         SPACE 2                                                        K0367500
*********************************************************************** K0368000
*        REJOIN PUNCH AND PRINTERS--SERPERATORS AND CLASSES           * K0368500
*********************************************************************** K0369000
COF&R.K  NULL                                                           K0369500
         MVC   0(3,WA),=C'S=Y'     ASSUME SEPERATOES USED               K0370000
         TM    DCTPPSW-DCTDSECT(R1),DCTPPSWS  TEST FOR SAME             K0370500
         BZ    *+8                 SEPERATORS BRANCH                    K0371000
         MVI   2(WA),C'N'          NO SEPERATORS--INDICATE SO           K0371500
         LA    WA,4(,WA)           FIND NEXT MSG AREA                   K0372000
         EJECT                                                 @OZ40627 K0372020
*********************************************************************** K0372040
*        DISPLAY RECORD LIMITS                                        * K0372060
*********************************************************************** K0372080
         L     R0,DCTLIMLO-DCTDSECT(R1) GET LOWER LIMIT        @OZ40627 K0372100
         MVC   0(4,WA),=C'LIM='    SET LIMITS PREFIX           @OZ40627 K0372120
         LA    WA,4(,WA)           POINT PAST PREFIX           @OZ40627 K0372140
         BAL   LINK,COF3&R         EDIT LOWER LIMIT            @OZ40627 K0372160
         L     R1,COMEWORK         RESTORE DCT POINTER         @OZ40627 K0372170
         MVI   0(WA),C'-'          SET SEPARATOR               @OZ40627 K0372180
         L     R0,DCTLIMHI-DCTDSECT(R1) GET UPPER LIMIT        @OZ40627 K0372200
         CL    R0,=F'-1'           ANY UPPER LIMIT ...         @OZ40627 K0372220
         BNE   COF2&R              BR IF YES                   @OZ40627 K0372240
         MVI   1(WA),C'*'            ELSE SHOW NO UPPER LIMIT  @OZ40627 K0372260
         LA    WA,3(,WA)           POINT PAST ENTIRE TEXT      @OZ40627 K0372280
         B     COF5&R              BR TO CONTINUE              @OZ40627 K0372300
         SPACE 1                                               @OZ40627 K0372320
COF2&R   LA    WA,1(,WA)           POINT PAST '-'              @OZ40627 K0372340
         BAL   LINK,COF3&R         EDIT UPPER LIMIT            @OZ40627 K0372360
         L     R1,COMEWORK         RESTORE DCT POINTER         @OZ40627 K0372370
         LA    WA,1(,WA)           POINT PAST ENTIRE TEXT      @OZ40627 K0372380
         B     COF5&R              BR TO CONTINUE              @OZ40627 K0372400
         SPACE 2                                               @OZ40627 K0372420
COF3&R   CVD   R0,$DOUBLE          CONVERT VALUE TO DECIMAL    @OZ40627 K0372440
         MVC   $REGSAVE(L'COF&R.E),COF&R.E     SET EDIT PATTERN@OZ40627 K0372460
         LA    R1,$REGSAVE+L'COF&R.E-1     IN CASE NO SIGNIFICANCE      K0372480
         EDMK  $REGSAVE(L'COF&R.E),$DOUBLE+2       EDIT VALUE  @OZ40627 K0372500
         LA    R15,$REGSAVE+L'COF&R.E-1  COMPUTE  LENGTH OF    @OZ40627 K0372520
         SLR   R15,R1                    SIGNIFICANT VALUE     @OZ40627 K0372540
         EX    R15,COF4&R          MOVE VALUE TO MESSAGE       @OZ40627 K0372560
         LA    WA,1(R15,WA)        POINT PAST VALUE            @OZ40627 K0372580
         BR    LINK                RETURN TO CALLER            @OZ40627 K0372600
COF4&R   MVC   0(*-*,WA),0(R1)     *** EXECUTE ONLY ***        @OZ40627 K0372620
         EJECT                                                 @OZ40627 K0372640
*********************************************************************** K0373000
*        SET OUTPUT CLASSES FOR PRINTER AND PUNCH                     * K0373500
*********************************************************************** K0374000
COF5&R   MVC   0(2,WA),=C'Q='      SET CLASS STRING INDENTIFIER@OZ40627 K0374500
         SLR   R15,R15             SET MAX SYSOUT                    R4 K0375000
         IC    R15,$NUMCLAS         CLASSES IN STRING                R4 K0375500
         BCTR  R15,0               LESS ONE FOR MACHINE                 K0376000
         EX    R15,COF&R.1         MOVE STRING TO MSG AREA              K0376500
         LA    R14,1               SET INCREMENT                        K0377000
COF&R.L  CLI   2(WA),C' '          CHECK FOR END OF CLASSES             K0377500
         BE    COF&R.M             YES  EXIT SCAN RTN                   K0378000
         ALR   WA,R14              UP BY ONE TILL END OF STRING         K0378500
         B     COF&R.L             AND LOOP TILL END OF STRING          K0379000
COF&R.M  DS    0H                  END OF STRING                        K0379500
         LA    WA,3(,WA)           POINT TO NEXT MSG BYTE               K0380000
*********************************************************************** K0380100
*        DISPLAY COMPACTION NUMBER                                    * K0380200
*********************************************************************** K0380300
COFH&R   TM    MDCTFEAT-DCTDSECT(R1),DCTPCPCT TEST FOR COMPACTION   R41 K0380400
         BZ    COFJ&R              NO,SKIP PROCESSING               R41 K0380500
         MVC   0(2,WA),=C'Z='      MOVE COMPACTION INDICATOR        R41 K0380600
         SLR   R0,R0               CLEAR REGISTER                   R41 K0380700
         IC    R0,DCTDCPTN-DCTDSECT(,R1) INSERT COMPACTION NUMBER   R41 K0380800
         CVD   R0,COMDWORK         CONVERT TO DECIMAL               R41 K0380900
         MVC   2(4,WA),=X'40202120' SET EDIT PATTERN                R41 K0381000
         ED    2(4,WA),COMDWORK+6  EDIT FOR PRINT                   R41 K0381100
         CLI   4(WA),C' '          TEST IF NUMBER BETWEEN 0-9       R41 K0381200
         BNE   COFK&R              SKIP IF COMPACTION 0-9           R41 K0381300
         MVC   2(1,WA),5(WA)       MOVE 1 BYTE COMPACTION NUMBER    R41 K0381400
         LA    WA,3(,WA)           UPDATE POINTER TO MESSAGE AREA   R41 K0381500
         B     COFJ&R              BYPASS 2 BYTE COMPACTION NUMBER  R41 K0381600
COFK&R   MVC   2(2,WA),4(WA)       MOVE TWO BYTES TO MESSAGE        R41 K0381700
         LA    WA,4(,WA)           UPDATE POINTER TO MESSAGE AREA   R41 K0381800
         MVI   0(WA),X'40'         CLEAN FOR 1 LINE DISPLAY         R41 K0381900
COFJ&R   TM    DCTPPSW2-DCTDSECT(R1),DCTNIPRT TEST FOR 3800 PRINTER R41 K0382000
         BZ    COF&R.X             BR IF NOT                         R4 K0382100
         SPACE 1                                                     R4 K0382200
*********************************************************************** K0382300
*        3800 PRINTERS ONLY--BURST,MARK,CHARS,FLASH AND MODIFY        * K0382500
*********************************************************************** K0383000
         MVC   0(7,WA),=C'B=N M=N' ASSUME NO BURST AND NO EDGE-MARK  R4 K0383500
         TM    DCTPPSW2-DCTDSECT(R1),DCTNIBRS TEST FOR BURST MODE    R4 K0384000
         BZ    *+8                 BR IF NO                          R4 K0384500
         MVI   2(WA),C'Y'          ELSE INDICATE BURST MODE          R4 K0385000
         TM    DCTPPSW2-DCTDSECT(R1),DCTNIMRK  TEST EDGE-MARK MODE   R4 K0385500
         BZ    *+8                 BR IF NO                          R4 K0386000
         MVI   6(WA),C'Y'          ELSE INDICATE EDGE-MARK MODE      R4 K0386500
         LA    WA,7+1(,WA)         POINT TO NEXT MSG AREA            R4 K0387000
         SPACE 1                                                     R4 K0387500
         CLC   DCTCHAR1-DCTDSECT(4,R1),=C'****'  TEST FOR CHAR SET   R4 K0388000
         BE    COFU&R              BR IF END OF CHARS LIST           R4 K0388500
         MVC   0(3,WA),=C'X1='     MOVE IN CHAR SET PREFIX           R4 K0389000
         MVC   3(L'DCTCHAR1,WA),DCTCHAR1-DCTDSECT(R1) SET CHAR1 ID   R4 K0389500
         LA    WA,3+L'DCTCHAR1+1(,WA)  POINT TO NEXT MSG AREA        R4 K0390000
         CLC   DCTCHAR2-DCTDSECT(4,R1),=C'****'  TEST FOR CHAR SET   R4 K0390500
         BE    COFU&R              BR IF END OF CHARS LIST           R4 K0391000
         MVC   0(3,WA),=C'X2='     MOVE IN CHAR SET PREFIX           R4 K0391500
         MVC   3(L'DCTCHAR2,WA),DCTCHAR2-DCTDSECT(R1) SET CHAR2 ID   R4 K0392000
         LA    WA,3+L'DCTCHAR2+1(,WA)  POINT TO NEXT MSG AREA        R4 K0392500
         CLC   DCTCHAR3-DCTDSECT(4,R1),=C'****'  TEST FOR CHAR SET   R4 K0393000
         BE    COFU&R              BR IF END OF CHARS LIST           R4 K0393500
         MVC   0(3,WA),=C'X3='     MOVE IN CHAR SET PREFIX           R4 K0394000
         MVC   3(L'DCTCHAR3,WA),DCTCHAR3-DCTDSECT(R1) SET CHAR3 ID   R4 K0394500
         LA    WA,3+L'DCTCHAR3+1(,WA)  POINT TO NEXT MSG AREA        R4 K0395000
         CLC   DCTCHAR4-DCTDSECT(4,R1),=C'****'  TEST FOR CHAR SET   R4 K0395500
         BE    COFU&R              BR IF END OF CHARS LIST           R4 K0396000
         MVC   0(3,WA),=C'X4='     MOVE IN CHAR SET PREFIX           R4 K0396500
         MVC   3(L'DCTCHAR4,WA),DCTCHAR4-DCTDSECT(R1) SET CHAR4 ID   R4 K0397000
         LA    WA,3+L'DCTCHAR4+1(,WA)  POINT TO NEXT MSG AREA        R4 K0397500
         EJECT                                                      R41 K0397900
COFU&R   NULL                                                        R4 K0398000
         CLC   DCTFLASH-DCTDSECT(4,R1),=C'****'  TEST FOR FLASH ID   R4 K0398500
         BE    *+20                BR IF NOT SET                     R4 K0399000
         MVC   0(2,WA),=C'O='      SET FLASH PREFIX                  R4 K0399500
         MVC   2(L'DCTFLASH,WA),DCTFLASH-DCTDSECT(R1)  SET FLASH ID  R4 K0400000
         LA    WA,2+L'DCTFLASH+1(,WA)  POINT TO NEXT MSG AREA        R4 K0400500
         SPACE 1                                                     R4 K0401000
         CLC   DCTMODF-DCTDSECT(4,R1),=C'****'  TEST FOR MODIFY ID   R4 K0401500
         BE    *+20                BR IF NOT SET                     R4 K0402000
         MVC   0(2,WA),=C'Y='      SET MODIFY PREFIX                 R4 K0402500
         MVC   2(L'DCTMODF,WA),DCTMODF-DCTDSECT(R1)  SET MODIFY ID   R4 K0403000
         LA    WA,2+L'DCTMODF+1(,WA) POINT TO NEXT MSG AREA          R4 K0403500
         B     COF&R.X             AND EXIT DISPLAY                     K0404000
COF&R.1  MVC   2(*-*,WA),DCTCLASS-DCTDSECT(R1) ** EXECUTE ONLY **       K0404500
         SPACE 2                                                        K0405000
*********************************************************************** K0405500
*        DISPLAY READERS--DEFAULT JOB AND MSG CLASSES                 * K0406000
*********************************************************************** K0406500
COF&R.I  NULL                                                           K0407000
         MVC   0(6,WA),=C'C=  Q='  SET JOB MSG PREFIXES                 K0407500
         CLC   DCTDEVN-DCTDSECT(,R1),=CL8'STCINRDR' TEST STC   @OZ25941 K0407600
         BE    COFV&R              BRANCH IF STCINRDR          @OZ25941 K0407700
         CLC   DCTDEVN-DCTDSECT(,R1),=CL8'TSOINRDR' TEST TSO   @OZ25941 K0407800
         BNE   COFW&R              BRANCH IF NOT TSOINRDR      @OZ25941 K0407900
COFV&R   DS    0H                                              @OZ25941 K0407910
         MVI   2(WA),C'*'        SET DEFAULT JOB CLASS         @OZ25941 K0407920
         B     COFX&R              BRANCH FOR MSG CLASS        @OZ25941 K0407930
COFW&R   DS    0H                                              @OZ25941 K0407940
         MVC   2(1,WA),DCTJCLAS-DCTDSECT(R1) SET DEFAULT JOB CLASS      K0408000
COFX&R   DS    0H                                              @OZ25941 K0408400
         MVC   6(1,WA),DCTMCLAS-DCTDSECT(R1) SET DEFAULT MSG CLASS      K0408500
         LA    WA,8(,WA)           POINT TO NEXT MSG BYTE               K0409000
         SPACE 1                                                        K0409500
         TM    DCTDEVTP-DCTDSECT(R1),DCTRJE SEPERATE REMOTE READER      K0410000
         BO    COF&R.N             BR IF REMOTE READER                  K0410500
*********************************************************************** K0411000
*        DISPLAY AUTHORITY FOR LOCAL AND INTERNAL READERS             * K0411500
*********************************************************************** K0412000
         MVC   0(2,WA),=C'A='      SET AUTHORITY PREFIX                 K0412500
         SLR   R15,R15             CLEAR WORK FOR INSERT CHAR           K0413000
         IC    R15,DCTRAUTH-DCTDSECT(,R1)  GET AUTHORITY                K0413500
         LA    R0,DCTREJJB+DCTREJDV+DCTREJSY  SET NO AUTHORITY          K0414000
         NR    R15,R0              TO TURN OFF MISC BITS                K0414500
*********************************************************************** K0414900
*        TABLE HAS TWO BYTE ENTRIES                                   * K0415000
*********************************************************************** K0415100
         ALR   R15,R15             DOUBLE R15 VALUE                     K0415500
         LA    R14,COF&R.O         GET ADDRESS OF DISPLACEMENT          K0416000
*                                  AND LENGTH TABLE                     K0416500
         SLR   R1,R1               CLEAR R1                             K0417000
         IC    R1,0(R15,R14)       GET DISPLACEMENT IN TBL              K0417500
         LA    R1,COF&R.P(R1)      POINT TO MSG                         K0418000
         IC    R15,1(R15,R14)      GET MACHINE LENGTH                   K0418500
         EX    R15,COF&R.Q         MOVE MSG TO AREA                     K0419000
         LA    WA,4(R15,WA)        PT TO NXT AVAILABLE MSG BYTE         K0419500
         L     R1,COMEWORK         RESTORE R1 CONTENTS                  K0420000
COF&R.N  DS    0H                                                    R4 K0420500
         EJECT                                                      R41 K0420900
*********************************************************************** K0421000
*        DEFAULT ROUTINGS FOR A READER                                * K0421500
*********************************************************************** K0422000
         LA    R15,DCTPRINT-DCTDSECT(,R1) POINT TO PRINTER DEFAULT   R4 K0422500
         LA    R0,1(,WA)           POINT TO TEXT AREA                R4 K0423000
         BAL   R14,COFRTC          CONVERT TO EBCDIC                 R4 K0423500
         MVC   0(2,WA),=C'P='      SET KEYWORD                       R4 K0424000
         LA    WA,11(,WA)          POINT TO NEXT SLOT                R4 K0424500
         LA    R15,DCTPUNCH-DCTDSECT(,R1) POINT TO PUNCH DEFAULT     R4 K0425000
         LA    R0,1(,WA)           TEXT AREA                         R4 K0425500
         BAL   R14,COFRTC          CONVERT TO EBCDIC                 R4 K0426000
         MVC   0(2,WA),=C'U='      SET KEYWORD                       R4 K0426500
         LA    WA,11(,WA)          POINT TO NEXT SLOT                R4 K0427000
*********************************************************************** K0432500
*        DISPLAY SYSTEM AFFINITIES OF A READER                        * K0433000
*********************************************************************** K0433500
         MVC   0(2,WA),=C'S='      SET AFFINITY PREFIX                  K0434000
         TM    DCTSIAFF-DCTDSECT(R1),QUEINDAF TEST FOR 'IND' MODE       K0434500
         BZ    *+14                NO--SKIP INSERTION IN MSG            K0435000
         MVC   2(4,WA),=C'IND,'    SET 'IND' MODE IN MSG                K0435500
         LA    WA,4(,WA)           PT TO NEXT MSG BYTE                  K0436000
         TM    DCTSIAFF-DCTDSECT(R1),QUESYSAF TEST FOR AFF OF 'ANY'     K0436500
         BNO   COF&R.8             NO--SEARCH QSE TABLE                 K0437000
         MVC   2(3,WA),=C'ANY'     YES--SET 'ANY' IN MESSAGE            K0437500
         LA    WA,6(,WA)           POINT TO NEXT AVAILABLE BYTE         K0438000
         B     COF&R.9             AND EXIT TO NEXT PORTION             K0438500
COF&R.8  DS    0H                  SEARCH QSE TABLE FOR AFFINITIES      K0439000
         L     R15,$QSE1           POINT TO 1ST QSE                  R4 K0439500
*                                    THIS CARD DELETED BY APAR @OZ27300 K0440000
         USING QSEDSECT,R15        QSE ADDRESSABILITY                   K0440500
*                                    THIS CARD DELETED BY APAR @OZ27300 K0441000
COFB&R   IC    R14,QSESIAFF        PICK UP AFFINITY BITS       @OZ27300 K0441500
         EX    R14,COFA&R          TEST FOR AFFINITY TO THIS SYSTEM     K0442000
         BO    COFC&R              YES--FILL-IN MESSAGE                 K0442500
COFD&R   TM    QSEFLAGS,QSELAST    NO--TEST FOR LAST ELEMENT            K0443000
         LA    R15,QSELEN(,R15)    BUMP TO NEXT QSE            @OZ27300 K0443300
         BZ    COFB&R              IF NOT LAST LOOP THRU QSE TABLES     K0443500
         MVI   1(WA),C' '          SET BLANK WHERE ',' WAS              K0444000
         LA    WA,2(,WA)           POINT TO NEXT AVAILABLE MSG BYTE     K0444500
         B     COF&R.9             AND EXIT TO NEXT PORTION             K0445000
COFC&R   DS    0H                  AFFINITY MATCH-MOVE IN SID NAME      K0445500
         MVC   2(L'QSESID,WA),QSESID SET SID NAME IN MESSAGE            K0446000
         MVI   L'QSESID+2(WA),C',' SET SEPERATING COMMA                 K0446500
         LA    WA,L'QSESID+1(,WA)  POINT TO NEXT AVAILABLE BYTE         K0447000
         B     COFD&R              AND SCAN NEXT TABLE ELEMENT          K0447500
         DROP  R15                 DROP QSE ADDRESSABILITY              K0448000
COFA&R   TM    DCTSIAFF-DCTDSECT(R1),*-* **** EXECUTE ONLY ****         K0448500
         EJECT                                                      R41 K0449000
*********************************************************************** K0449500
*        DISPLAY A READER HOLDING INCOMING JOBS                       * K0450000
*********************************************************************** K0450500
COF&R.9  DS    0H                  DISPLAY READER'S HOLDING STATUS      K0451000
         MVC   0(3,WA),=C'H=N'     SET DEFAULT STATUS                   K0451500
         TM    DCTFLAGS-DCTDSECT(R1),DCTHOLDJ  TEST FOR SAME            K0452000
         BZ    *+8                 EXIT IF NOT 'HOLDING'                K0452500
         MVI   2(WA),C'Y'          SET STATUS TO 'HOLDING'              K0453000
         LA    WA,4(,WA)           POINT TO END OF MESSAGE              K0453500
         B     COF&R.X             EXIT DISPLAY ROUTINE                 K0454000
         SPACE 2                                                     R4 K0454500
*********************************************************************** K0455000
*        DISPLAY RJE LINE DISCONNECTION STATE                         * K0455500
*********************************************************************** K0456000
COF&R.F  DS    0H                                                    R4 K0456500
         TM    MDCTSTAT-DCTDSECT(R1),DCTSOFF TEST SIGNOFF PENDING    R4 K0457000
         BNO   COF&R.R             NO, BR--GO FORMAT PASSWORD        R4 K0457500
         MVC   0(4,WA),=C'D=Q '    SHOW SIGNOFF PENDING        @OZ36938 K0458000
COFF&R   TM    DCTFLAGS-DCTDSECT(R1),DCTRSTRT TEST FOR DCT RESTARTED R4 K0458500
         BNO   COFG&R              NO, BR--GO SHOW DISCONNECT STATUS R4 K0459000
         MVC   0(3,WA),=C'D=I'     INDICATE RESTART ACCEPTED         R4 K0459500
COFG&R   DS    0H                                                    R4 K0460000
         LA    WA,4(,WA)           MOVE PAST DISCONNECT INDICATOR    R4 K0460500
         B     COF&R.R             GO FORMAT PASSWORD                R4 K0461000
         SPACE 2                                                     R4 K0462000
*********************************************************************** K0462500
*        DISPLAY LOGON DCT APPLICATION ID                             * K0463000
*********************************************************************** K0463500
COF&R.Z  DS    0H                                                    R4 K0464000
         MVC   0(2,WA),=C'A='      MOVE IN APPLICATION ID PREFIX     R4 K0464500
         MVC   2(8,WA),MDCTAPPL-DCTDSECT(R1) AND APPLICATION ID      R4 K0465000
         LA    WA,11(,WA)          MOVE PAST APPLICATION ID FIELD    R4 K0465500
         SPACE 2                                                     R4 K0466500
*********************************************************************** K0467000
*        DISPLAY DCT LOGGING AND PASSWORD STATUS                      * K0467500
*********************************************************************** K0468000
COF&R.R  DS    0H                                                    R4 K0468500
         MVC   0(3,WA),=C'E=N'     ASSUME NO LOGGING                 R4 K0469000
         TM    DCTFLAGS-DCTDSECT(R1),DCTLOGAL TEST ASSUMPTION        R4 K0469500
         BZ    COFE&R              CORRECT, BR - SKIP RESET          R4 K0470000
         MVI   2(WA),C'Y'          MAKE MESSAGE SHOW LOGGING         R4 K0470500
COFE&R   DS    0H                                                    R4 K0471000
         LA    WA,4(,WA)           MOVE PAST LOGGING INDICATOR       R4 K0471500
         CLI   MDCTPSWD-DCTDSECT(R1),C' ' TEST FOR PASSWORD SET      R4 K0472000
         BE    COF&R.X             NO, BR - MESSAGE IS COMPLETE      R4 K0472500
         MVC   0(5,WA),=C'P=SET'   INDICATE PASSWORD PRESENT         R4 K0473000
         LA    WA,6(,WA)           LOCATE END OF MESSAGE             R4 K0473500
         EJECT                                                      R41 K0474000
*********************************************************************** K0474500
*        EXIT EXTENDED DISPLAY ROUTINE                                * K0475000
*********************************************************************** K0475500
COF&R.X  DS    0H                  COMPUTE RESPONSE SIZE                K0476000
         LR    R1,WA               COPY END OF RESPONSE ADDRESS         K0476500
         LA    R15,COMMAND+69      SET MAX RESPONSE SIZE                K0477000
COF&R.4  CLR   R1,R15              CHECK SIZE OF THIS RESPONSE          K0477500
         BNH   COF&R.U             IF NOT TOO LARGE - SEND IT           K0478000
COF&R.T  BCTR  R1,0                TOO LARGE-SCAN TO BREAK-UP           K0478500
         CLI   0(R1),C'='          LOOK FOR AN OPERAND                  K0479000
         BNE   COF&R.T             NOT FOUND, BR - KEEP LOOKING      R4 K0479500
         BCTR  R1,0                LOOK AT CHARACTER BEFORE = SIGN   R4 K0480000
COFL&R   BCTR  R1,0                BACK UP ONE MORE            @OZ40627 K0480500
         CLI   0(R1),C' '          IS IT A BLANK ...           @OZ40627 K0481000
         BNE   COFL&R              BRANCH IF NO                @OZ40627 K0481500
*                                  THIS CARD DELETED BY XXX    @OZ40627 K0482000
         B     COF&R.4             AND CHECK RESULTANT SIZE             K0482500
COF&R.U  DS    0H                  RESPONSE OF PROPER SIZE - SEND       K0483000
         LA    R0,1(,R1)           TRUE END OF RESPONSE                 K0483500
         LA    R14,COMMAND         BEGINNING OF RESPONSE                K0484000
         SLR   R0,R14              LENGTH OF RESPONSE                   K0484500
         CLR   R1,WA               IS THIS A ONE-LINE RESPONSE          K0485000
         BE    COF&R.V             YES--SKIP MULTIPLE LINES             K0485500
         STM   R1,WA,COMDWORK      SAVE REGS OVER $WTO                  K0486000
         $CWTO L=(R0)              SEND RESPONSE                        K0486500
         LM    R1,WA,COMDWORK      RELOAD REGS                          K0487000
         SLR   WA,R1               COMPUTE SIZE OF RESPONSE LEFT        K0487500
         BCTR  WA,0                LESS ONE FOR TRUE SIZE               K0488000
         LA    R0,COMMAND+23-COMMAND(,WA) SAVE TOTAL SIZE               K0488500
         BCTR  WA,0                MACHINE SIZE                         K0489000
         EX    WA,COF&R.Y          MOVE NEW RESPONSE DOWN               K0489500
         MVI   COMMAND,C' '        BLANK AREA BEFORE SECOND LINE        K0490000
         MVC   COMMAND+1(22),COMMAND DITTO                              K0490500
         LA    WA,COMMAND+23+1(WA) POINT TO END OF NEW RESPONSE         K0491000
         LR    R1,WA               COPY TO R1 FOR LOOP                  K0491500
         LA    R15,COMMAND+69      SET MAX RESPONSE SIZE                K0492000
         CLR   R1,R15              CHECK REMAINING RESPONSE             K0492500
         BH    COF&R.T             IF GREATER LOOP                      K0493000
COF&R.V  DS    0H                                                    R4 K0493500
COF&R.2  $CWTO L=(R0)              WRITE FINAL MESSAGE               R4 K0494000
         L     R1,COMEWORK         RELOAD DCT                        R4 K0494500
         L     WA,COMFWORK          RETURN REGISTER                  R4 K0495000
         LR    BASE3,WA            RELOAD CALLERS BASE               R4 K0495500
         SH    BASE3,0(,WA)        ADJUST CALLERS ADDRESSABILITY     R4 K0496000
         B     2(,WA)              RETURN TO CALLER                  R4 K0496500
COF&R.Y  MVC   COMMAND+23(*-*),1(R1) **** EXECUTE ONLY ****             K0497500
         EJECT                                                      R41 K0498000
*********************************************************************** K0498100
*        DISPLAY RAT DATA                                             * K0498200
*********************************************************************** K0498300
COFT&R   DS    0H                                                   R41 K0498400
         L     R1,COMEWORK         PICK UP PASSED RAT ADDRESS       R41 K0498500
         LPR   R1,R1               MAKE POSITIVE                    R41 K0498600
         MVC   COMMAND(8),RATNAME-RATDSECT(R1) PUT IN PROPER NAME   R41 K0498700
         MVC   0(3,WA),=C'D=0'     SET UP FOR D=0                   R41 K0498800
         SLR   R0,R0               CLEAR REG                        R41 K0498900
         IC    R0,RATDINTV-RATDSECT(R1) GET RAT INTERVAL            R41 K0499000
         SLA   R0,5                EXPAND IT                        R41 K0499100
         LTR   R0,R0               IS IT ZERO                       R41 K0499200
         BZ    COFM&R              YES, LEAVE IT AS IS              R41 K0499300
         CVD   R0,COMDWORK         NO,  CONVERT TO DISPLAY          R41 K0499400
         UNPK  2(5,WA),COMDWORK+5(3) PUT INTERVAL IN DISPLAY        R41 K0499500
         OI    6(WA),X'F0'         MAKE UNITS DIGIT READABLE        R41 K0499600
         MVC   2(4,WA),3(WA)       LEFT JUSTIFY D=NNNN              R41 K0499700
         MVI   6(WA),X'40'         CLEAR RIGHT MOST POSITION        R41 K0499800
         CLI   2(WA),X'F0'         IS LEFTMOST SIGNIFICANT          R41 K0499900
         BH    COFM&R              YES, LEAVE AS IS                 R41 K0500000
         MVC   2(3,WA),3(WA)       LEFT JUSTIFY TO D=NNN            R41 K0500100
         MVI   5(WA),X'40'         CLEAR RIGHT MOST POSITION        R41 K0500200
         CLI   2(WA),X'F0'         IS LEFTMOST SIGNIFICANT          R41 K0500300
         BH    COFM&R              YES, LEAVE AS IS                 R41 K0500400
         MVC   2(2,WA),3(WA)       LEFT JUSTIFY TO D=NN             R41 K0500500
         MVI   4(WA),X'40'         CLEAR RIGHT MOST POSITION        R41 K0500600
COFM&R   LA    WA,7(,WA)           ADJUST POSITION COUNT            R41 K0500700
         TM    RATTYPE-RATDSECT(R1),DCTPLU1 IS THIS SNA             R41 K0500800
         BNO   COF&R.X             NO, SKIP A=                      R41 K0500900
         MVC   0(7,WA),=C'A=N S=N' ASSUME A=N AND S=N               R41 K0501000
         TM    RATFLAGS-RATDSECT(R1),RATALM IS IT A=N               R41 K0501100
         BZ    *+8                 YES, LEAVE IT AS IS              R41 K0501200
         MVI   2(WA),C'Y'          NO, MAKE IT A=Y                  R41 K0501300
         TM    RATFLAGS-RATDSECT(R1),RATSRMT  IS IT S=N             R41 K0501400
         BZ    *+8                 YES, LEAVE AS IS                 R41 K0501500
         MVI   6(WA),C'Y'          MAKE IT S=Y                      R41 K0501600
         LA    WA,7(WA)            ADJUST POSITION COUNTER          R41 K0501700
         B     COF&R.X             WRITE MESSAGE & EXIT             R41 K0501800
         SPACE 2                                                    R41 K0501900
         DROP  BASE3               RELEASE ROUTINE ADDRESSABILITY   R41 K0502000
         EJECT                                                      R41 K0502100
*********************************************************************** K0502200
*        AUTHORITY MSG TABLE                                          * K0502300
*********************************************************************** K0502400
COF&R.P  DC    C'SYS+DEV+JOB+SYSDISPLAY' ALL POSSIBLE MSGS              K0502500
         SPACE 2                                                        K0502600
*********************************************************************** K0502700
*        DISPLACEMENT AND LENGTH TABLE                                * K0502800
*        EACH ENTRY HAS DISPLACEMENT INTO ABOVE TABLE AND LENGTH      * K0502900
*        FOR EACH AUTHORITY LEVEL                                     * K0503000
*********************************************************************** K0503100
COF&R.O  DC    AL1(00,10)          AUTH=SYS+JOB+DEV LENGTH=11           K0503200
         DC    AL1(04,06)          AUTH=DEV+JOB     LENGTH=7            K0503300
         DC    AL1(08,06)          AUTH=JOB+SYS     LENGTH=7            K0503400
         DC    AL1(08,02)          AUTH=JOB         LENGTH=3            K0503500
         DC    AL1(00,06)          AUTH=SYS+DEV     LENGTH=7            K0503600
         DC    AL1(04,02)          AUTH=DEV         LENGTH=3            K0504000
         DC    AL1(00,02)          AUTH=SYS         LENGTH=3            K0504500
         DC    AL1(15,06)          AUTH=DISPLAY     LENGTH=7            K0505000
         SPACE 2                                                        K0505500
         DS    0H                  ASSURE HALFWORD ALIGNMENT            K0506000
COF&R.Q  MVC   2(*-*,WA),0(R1)     **** EXECUTE ONLY ****               K0506500
*        INSTRUCTION IS USED TO MOVE AUTHORITY MSGS TO MSG AREA         K0507000
COF&R.E  DC    XL12'402020202020202020202120' EDIT PATTERN     @OZ40627 K0507200
.XIT     MEND                                                           K0507500
         EJECT                                                          K0508000
         MACRO -- $CFDCTL -- DEVICE CONTROL TABLE LOCATE                K0508500
&NAME    $CFDCTL &POINTER=(R1),&TYPE=CALL,&INFO=NO                      K0509000
         GBLC  &DOC                                                     K0509500
         LCLC  &R                                                       K0510000
&R       SETC  '&SYSNDX'                                                K0510500
         AIF   ('&INFO' EQ '' AND '&DOC' EQ 'NO' OR '&INFO' EQ 'NO').Z  K0511000
         AIF   ('&TYPE' EQ 'RES').NOJECT                                K0511500
         EJECT                                                          K0512000
.NOJECT  SPACE 2                                                        K0512500
*********************************************************************** K0513000
*                                                                     * K0513500
*        COFDCTL -- DEVICE CONTROL TABLE LOCATE                       * K0514000
*                                                                     * K0514500
*        ROUTINE EXAMINES DEVICE NAMED BY THE CURRENT OPERAND         * K0515000
*        'POINTER', CONVERTS OPERAND TO EIGHT CHARACTER FORMAT,       * K0515500
*        AND LOCATES THE DCT.                                         * K0516000
*        NO $WAITS ARE ISSUED.                                        * K0516500
*                                                                     * K0517000
* REGISTERS USED                                                      * K0517500
*        R0    = WORK REGISTER                                        * K0518000
*        R1    = OPERAND POINTER - ADDRESS OF DCT,-RAT, OR ZERO       * K0518500
*        R15   = WORK REGISTER                                        * K0519000
*        LINK  = RETURN LINKAGE                                       * K0519500
*                                                                     * K0520000
* NOTES                                                               * K0520500
*        COMEWORK AND COMDWORK ARE USED FOR SCRATCH.  NOTE THAT       * K0521000
*              THIS ROUTINE IS DEPENDENT ON COMDWORK ALWAYS           * K0521100
*              FOLLOWING COMEWORK IN THE WORK AREA.                   * K0521200
*                                                                     * K0521500
*********************************************************************** K0522000
.Z       ANOP                                                           K0522500
         AIF   ('&TYPE' NE 'CALL').INL                                  K0523000
&NAME    $DECODE &POINTER                                               K0523500
.CAL     BAL   LINK,COFDCTL        LOCATE DCT                           K0524000
         MEXIT                                                          K0524500
.INL     ANOP                                                           K0525000
&NAME    NULL                                                           K0526000
*********************************************************************** K0526400
* SEPARATE DEVICE NAME                                                * K0526500
*********************************************************************** K0526600
         MVC   COMEWORK(8),=CL8' ' CLEAR WORK AREA TO BLANKS            K0527000
         L     R15,4(,R1)          LOCATE NEXT OPERAND                  K0527500
         LA    R15,0(,R15)         CLEAR HI-ORDER BYTE               R4 K0528000
         L     R1,0(0,R1)          LOCATE THIS ONE                      K0528500
         SR    R15,R1              LENGTH OF OPERAND + 1                K0529000
         BCT   R15,*+8             ACTUAL LENGTH                        K0529500
         B     COF&R.Z             COMPARE AGAINST BLANK IF NULL     R4 K0530000
         BCTR  R15,0               MACHINE LENGTH                       K0530500
         LA    R0,7                SET MAXIMUM LENGTH                   K0531000
         CLR   R15,R0              TEST FOR WITHIN MAXIMUM              K0531500
         BNH   *+6                 ACCEPT CURRENT LENGTH IF YES         K0532000
         LR    R15,R0              SET TO MOVE EIGHT CHARACTERS         K0532500
         EX    R15,COF&R.N         MOVE COMPLETE OPERAND                K0533000
         TM    COMFLAG,CMBFLAGW    TEST FOR RMT ENTERED COMMAND     R41 K0533100
         BNO   COF&R.D             BR IF NOT - SKIP RMT DEV ABREV.  R41 K0533200
         CLC   COMJSYS,$OWNSYS     CMD ENTERED THIS SYSTEM...       R41 K0533600
         BNE   COF&R.D             BR IF NOT -- CANNOT BE RMT DEV   R41 K0533800
         LA    R0,2                TEST FOR                         R41 K0533900
         CLR   R0,R15                 3-BYTE OPERAND                R41 K0534000
         BH    COF&R.D             MORE THAN 3, CANNOT BE RMT DEV   R41 K0534100
         CLI   COMEWORK+2,C'0'     TEST 3RD CHARACTER FOR NUMERIC   R41 K0534200
         BL    COF&R.D             NON-NUMERIC, CANNOT BE RMT DEV   R41 K0534300
         CLC   =CL2'RD',COMEWORK   TEST FOR REMOTE READER           R41 K0534400
         BE    COF&R.G             BR IF YES - GO CONVERT ABREV.    R41 K0534500
         CLC   =CL2'PR',COMEWORK   TEST FOR REMOTE PRINTER          R41 K0534600
         BE    COF&R.G             BR IF YES - GO CONVERT ABREV.    R41 K0534700
         CLC   =CL2'PU',COMEWORK   TEST FOR REMOTE PUNCHES          R41 K0534800
         BNE   COF&R.D             BR IF NO - CANNOT BE A RMT DEV   R41 K0534900
COF&R.G  ICM   R0,7,COMEWORK       SAVE 3-CHARACTER OPERAND         R41 K0535000
         LA    R15,COMEWORK+1      PICK UP WORK AREA ADDRESS + 1    R41 K0535100
         SR    R1,R1               GET RMT NUMBER                   R41 K0535200
         IC    R1,COMJRMT            FROM WHICH COMMAND ENTERED     R41 K0535300
         BCTR  R1,0                    MINUS 1                      R41 K0535400
         MH    R1,=AL2(RATTLE)     COMPUTE RAT                      R41 K0535500
         AL    R1,$RATABLE           OFFSET                         R41 K0535600
         MVI   COMEWORK,C'R'               SET UP REMOTE            R41 K0535700
         MVC   COMEWORK+1(4),RATNAME-RATDSECT+3(R1)   NAME PREFIX   R41 K0535800
         MVI   COMEWORK+4,C' '     FORCE REMAINDER                  R41 K0535900
         MVC   COMEWORK+5(3),COMEWORK+4  TO BLANKS                  R41 K0536000
         LA    R15,1(,R15)         BUMP TO NEXT CHARACTER           R41 K0536100
         CLI   0(R15),C' '         TEST FOR BLANK                   R41 K0536200
         BNE   *-8                 NON-BLANK, LOOP                  R41 K0536300
         MVI   0(R15),C'.'         INSERT SEPARATOR                 R41 K0536400
         LA    R15,1(,R15)         BUMP TO NEXT CHARACTER           R41 K0536500
         STCM  R0,7,0(R15)         USE 3-CHAR OPERAND AS SUFFIX     R41 K0536600
COF&R.D  DS    0H                                                   R41 K0536700
         CLC   COMEWORK(3),=C'RMT' IS THIS RMTN FORMAT              R41 K0536800
         BNE   COF&R.C             NO, SKIP MOVE                    R41 K0536900
         MVC   COMEWORK+1(5),COMEWORK+3 COMPRESS TO RN FORMAT       R41 K0537000
         LA    R15,COMEWORK+1      SET BXLE INDEX                   R41 K0537100
         LA    R1,COMEWORK+4       SET MAX  3 DIGITS                R41 K0537200
         LA    R0,1                SET TO SCAN 1 AT A TIME          R41 K0537300
         SPACE 1                                                    R41 K0537400
COF&R.H  CLI   0(R15),C','         CHECK FOR TERMINATING CHAR       R41 K0537500
         BE    COF&R.P             YES, CONVERT RMT NUMBER          R41 K0537600
         CLI   0(R15),C' '         CHECK FOR RMTN ONLY              R41 K0537700
         BE    COF&R.P             YES , CONVERT RMT NUMBER         R41 K0537800
         CLI   0(R15),C'0'         CHECK FOR VALID RANGE            R41 K0537900
         BL    COF&R.U             NO, ERROR                        R41 K0538000
         BXLE  R15,R0,COF&R.H      LOOP                             R41 K0538100
         B     COF&R.U             ERROR IF 4 CHARS                 R41 K0538200
         SPACE 1                                                    R41 K0538300
COF&R.C  CLI   COMEWORK,C'R'       IS REMOTE SPECIFIED              R41 K0538500
         BNE   COF&R.V             NO, SKIP RAT LOOKUP              R41 K0538600
         CLI   COMEWORK+1,C'0'     IS THIS RN FORMAT                R41 K0538700
         BL    COF&R.V             NO--SKIP RAT LOOK-UP                 K0539100
         LA    R15,COMEWORK+1      SET INDEX FOR BXLE                   K0539500
         LA    R1,COMEWORK+4       SET COMPORAND FOR 3 DIGITS           K0540000
         LA    R0,1                SET INCREMENT FOR SCAN               K0540500
         SPACE 1                                                        K0541000
COF&R.O  CLI   0(R15),C'.'         CHECK FOR TERMINATING CHAR           K0541500
         BE    COF&R.P             YES--CONVERT RMT NBR TO BINARY       K0542000
         CLI   0(R15),C'0'         CHECK FOR VALID RANGE                K0542500
         BL    COF&R.U             IF LESS--ERROR IN OPERAND            K0543000
         BXLE  R15,R0,COF&R.O      LOOP THROUGH OPERAND TILL '.'        K0543500
         B     COF&R.U             OR FOUR CHAR--ERROR IF NOT FND       K0544000
         EJECT                                                      R41 K0544500
COF&R.P  NULL                      VALID FORMAT(IE. RNNN.)              K0545000
         LR    R1,R15              SAVE POSITION OF '.'                 K0545500
         MVC   COMDWORK+4(3),1(R1) SAVE DEVICE NAME PORTION             K0546000
         LA    R15,COMEWORK+1      FIND START OF NUMERIC AGAIN          K0546500
         SR    R1,R15              COMPUTE SIZE OF FIELD                K0547000
         BNP   COF&R.U             BRANCH IF NOT POSITIVE--ERROR        K0547500
         BCTR  R1,0                REDUCE BY ONE FOR MACHINE            K0548000
         LR    R0,WA               SAVE REG 2 OVER 'TRT'                K0548500
         L     R15,=A(CVALIDTB)    POINT TO TEST TABLE               R4 K0549000
         EX    R1,COF&R.R          TEST FOR VALID NUMERICS              K0549500
         LR    WA,R0               RESTORE R2                           K0550000
         BNZ   COF&R.U             BRANCH IN ERROR IF NOT NUMERIC       K0550500
         LM    R15,R0,COMDWORK     SAVE COMDWORK                        K0551000
         EX    R1,COF&R.S          PACK NUMERIC PORTION OF NAME         K0551500
         CVB   R1,COMDWORK         CONVERT REMOTE NBR TO BINARY         K0552000
         STM   R15,R0,COMDWORK     RESTORE COMDWORK                     K0552500
         LTR   R1,R1               TEST FOR A GOOD VALUE                K0553000
         BNP   COF&R.U             ERROR IF NOT POSITIVE                K0553500
COF&R.A  LH    R0,$NUMRJE          GET MAX NUMBER OF REMOTES         R4 K0560000
         CLR   R1,R0               IS CONVERTED HIGHER                  K0560500
         BH    COF&R.U             YES -- ERROR                         K0561000
         BCTR  R1,0                LESS ONE FOR RAT DISPLACEMENT        K0561500
         MH    R1,=Y(RATTLE)       GET OFFSET IN RAT TABLE              K0562000
         L     R0,$RATABLE         POINT TO 1ST RAT ELEMENT          R4 K0562500
         LTR   R0,R0               TEST FOR ANY RJE LINES               K0563000
         BZ    COF&R.U             NONE -- ERROR                        K0563500
         ALR   R1,R0               COMPUTE LOCATION OF REMOTE           K0564000
         CLC   COMDWORK+4(3),=C'CON' IS THIS CONSOLE                    K0564500
         BNE   COFL&R              SKIP TEST FOR $T COMMAND         R41 K0564600
         CLI   COMVERB,C'T'        TEST IF $T CON COMMAND           R41 K0564700
         BE    COF&R.X             EXIT WITH R1 POINTING TO -RAT        K0564800
         B     COF&R.U             ERROR, ONLY $TRN.CON VALID       R41 K0565000
COFL&R   CLI   COMDWORK+4,C' '     TEST IF ONLY RN SPECIFIED        R41 K0565100
         BE    COF&R.X             YES, EXIT - R1 POINTING TO RAT   R41 K0565200
         L     R1,RATRDCT-RATDSECT(,R1) FIND FIRST REMOTE DCT           K0565500
         SPACE 1                                                        K0566000
COF&R.W  CLC   DCTDEVN-DCTDSECT(L'DCTDEVN,R1),COMEWORK LOOK FOR         K0566500
         BER   LINK                DCT--IF FOUND RETURN WITH DCT        K0567000
COF&R.B  L     R1,MDCTDCT-DCTDSECT(,R1) POINT TO NEXT DCT            R4 K0567500
         LTR   R1,R1               TEST FOR END OF REMOTES DEV          K0568000
         BNZ   COF&R.W             LOOP THROUGH RMT DEVICES             K0568500
COF&R.U  SLR   R1,R1               IF RMT NOT FOUND INDICATE IT         K0569000
         BR    LINK                AND RETURN                           K0569500
COF&R.X  LCR   R1,R1               COMPLEMENT RAT ADDRESS               K0570000
         BR    LINK                RETURN                               K0570500
         SPACE 2                                                        K0571000
COF&R.R  TRT   COMEWORK+1(*-*),0(R15) *** EXECUTE ONLY ***           R4 K0571500
COF&R.S  PACK  COMDWORK(L'COMDWORK),COMEWORK+1(*-*) * EXECUTE *         K0572000
         SPACE 2                                                        K0572500
COF&R.V  NULL                      COME HERE WHEN NOT A RMT             K0573000
         CLC   COMEWORK(3),=C'RDI' CHECK FOR INTERNAL RDR               K0573500
         BNE   COF&R.Z             NO--SKIP 1ST INTRDR LOCATE           K0574000
         L     R1,$SSVT            YES--POINT TO THE SSVT               K0574500
         L     R1,$SVIRDRS-$SVDSECT(,R1) POINT TO 1ST INTRDR            K0575000
COF&R.Y  CLC   DCTDEVN-DCTDSECT(6,R1),=C'INTRDR' CHECK FOR 1ST ONE      K0575500
         BER   LINK                YES--RETORN WITH 1ST INTRDR          K0576000
         ICM   R1,7,DCTCHAIN+1-DCTDSECT(R1) ELSE GET NEXT               K0576500
         BNZ   COF&R.Y             AND LOOP FOR 1ST INTRDR              K0577000
         SLR   R1,R1               ELSE FLAG AS NOT FOUND               K0577500
         BR    LINK                AND RETURN TO CALLER                 K0578000
COF&R.Z  DS    0H                  COME HERE WHEN NOT INTRDR            K0578500
         LA    R1,COFDCTPL         POINT R1 TO LAST TABLE ENTRY     R41 K0578600
         CLI   COMEWORK+3,C'0'     IS 4TH CHARACTER NUMERIC...      R41 K0578700
         BL    COF&R.E             BYPASS TABLE LOOKUP IF NOT       R41 K0578800
         ICM   R0,15,COMEWORK+3    SAVE NUMERICS (BLANK-PADDED)     R41 K0578900
         SPACE 1                                                        K0579000
*********************************************************************** K0579400
*        CONVERT SHORT NAME OF DEVICE TO LONG NAME AS IN DCT          * K0579500
*********************************************************************** K0579600
         LA    R1,COF&R.T          POINT TO CONVERT TABLE            R4 K0580000
COF&R.L  IC    R15,3(0,R1)         PICK UP MACHINE LENGTH OF ANSWER     K0580500
         CLC   COMEWORK(3),0(R1)   LOOK FOR MATCH                       K0581000
         BE    COF&R.F             IF MATCH, REPLACE WITH LONG FORM  R4 K0581500
         LA    R1,14(,R1)          POINT TO NEXT TABLE ELEMENT       R4 K0582000
         CLI   0(R1),X'FF'         CHECK FOR END OF TABLE               K0582500
         BNE   COF&R.L             IF NOT, LOOP                         K0583000
         B     COF&R.E             IF END, EXIT                         K0583500
         SPACE 2                                                        K0584000
*********************************************************************** K0584500
*                                                                     * K0585000
*        DEVICE ABBREVIATION TABLE                                    * K0585500
*                                                                     * K0586000
* NOTE--IF $NUMPRTS IS GREATER THAN 9, THE 2ND ENTRY IN THIS TABLE    * K0586500
*       IS MODIFIED AT INITIALIZATION TIME TO THE FOLLOWING FORMAT..  * K0587000
*                                                                     * K0587500
*        DC    C'PRT',X'05',C'PRINTR  ',Y($LNEDCT-HCTDSECT)           * K0588000
*                                                                     * K0588500
*********************************************************************** K0589000
COF&R.T  DS    0H                                                       K0589500
         DC    C'LNE',X'03',C'LINE    ',Y($LNEDCT-HCTDSECT)          R4 K0590000
COFPRINT DC    C'PRT',X'06',C'PRINTER ',Y($PRTDCT-HCTDSECT)          R4 K0590500
         DC    C'PUN',X'04',C'PUNCH   ',Y($PUNDCT-HCTDSECT)          R4 K0591000
         DC    C'RDR',X'05',C'READER  ',Y($RDRDCT-HCTDSECT)          R4 K0591500
         DC    C'LGN',X'04',C'LOGON   ',Y($LOGNDCT-HCTDSECT)         R4 K0592500
COFDCTPL DC    X'FF',C'   ',C'FILLER  ',Y($DCTPOOL-HCTDSECT)        R41 K0593500
         EJECT                                                          K0594000
*********************************************************************** K0594400
* ARGUMENT FOUND, MOVE NUMERIC PORTION INTO PLACE                     * K0594500
*********************************************************************** K0594600
COF&R.F  EX    R15,COF&R.M         MOVE LONG FORM OF TEXT               K0595000
         LA    R15,COMEWORK+1(R15) POINT TO END OF TEXT + 1         R41 K0595500
         MVI   COMEWORK+8,C' '     MOVE IN FIELD DELIMITER          R41 K0596000
         STCM  R0,15,0(R15)        MOVE NUMERICS IN AFTER TEXT      R41 K0596500
         CLI   COMEWORK+8,C' '     DID WE TRUNCATE ANY DATA...      R41 K0597000
         BE    COF&R.E             NO--GO TO LOCATE DCT              R4 K0597500
         SLR   R1,R1               YES--ERROR--ZERO OUT DCT REG      R4 K0598000
         BR    LINK                AND RETURN TO CALLER              R4 K0598500
         SPACE 1                                                     R4 K0599000
*********************************************************************** K0600900
* LOCATE DEVICE CONTROL TABLE                                         * K0601000
*********************************************************************** K0601100
COF&R.E  LH    R1,12(,R1)          POINT TO STARTING POINT           R4 K0601500
         L     R1,HCTDSECT(R1)      IN DCT CHAIN                     R4 K0602000
         LTR   R1,R1               TEST CHAIN ADDRESS                R4 K0602500
         BNZ   COF&R.K             BR IF VALID                       R4 K0603000
         ICM   R1,15,$DCTPOOL      POINT TO 1ST DCT                  R4 K0603500
         BZR   LINK                RETURN IF NONE                    R4 K0604000
COF&R.K  CLC   DCTDEVN-DCTDSECT(L'DCTDEVN,R1),COMEWORK LOOK FOR MATCH   K0604500
         BE    COF&R.Q             CHECK FOR SYSTEM INTRDRS             K0605000
         ICM   R1,7,DCTCHAIN+1-DCTDSECT(R1) POINT TO NEXT DCT           K0605500
         BNZ   COF&R.K             LOOP TO NEXT IF NOT AT END           K0606000
         BR    LINK                RETURN WITHOUT DCT                   K0606500
COF&R.Q  DS    0H                  LOOK FOR SYSTEM INTRDRS              K0607000
         CLI   DCTDEVTP-DCTDSECT(R1),DCTINR  IS THIS AN INTRDR          K0607500
         BNER  LINK                NO--RETURN WITH DCT FOUND            K0608000
         SLR   R1,R1               YES--MUST BE SYSTEM INTRDR           K0608500
         BR    LINK                RETURN WITH NO DCT                   K0609000
         SPACE 5                                                    R41 K0609400
COF&R.N  MVC   COMEWORK(*-*),0(R1) **** EXECUTE ONLY ****               K0609500
COF&R.M  MVC   COMEWORK(*-*),4(R1) **** EXECUTE ONLY ****               K0610000
.XIT     MEND                                                           K0610500
         EJECT                                                          K0611000
         MACRO -- $CFINVC -- INVALID COMMAND                            K0611500
&NAME    $CFINVC &D,&DD,&TYPE=CALL,&INFO=NO                             K0612000
         GBLC  &DOC                                                     K0612500
         LCLC  &R                                                       K0613000
&R       SETC  '&SYSNDX'                                                K0613500
         AIF   ('&INFO' EQ '' AND '&DOC' EQ 'NO' OR '&INFO' EQ 'NO').Z  K0614000
         AIF   ('&TYPE' EQ 'RES').NOJECT                                K0614500
         EJECT                                                          K0615000
.NOJECT  SPACE 2                                                        K0615500
*********************************************************************** K0616000
*                                                                     * K0616500
*        COFINVC -- REPLY INVALID COMMAND                             * K0617000
*                                                                     * K0617500
*        ROUTINE RETURNS TO MAIN COMMAND PROCESSOR BEFORE $WAIT       * K0618000
*                                                                     * K0618500
*********************************************************************** K0619000
.Z       ANOP                                                           K0619500
         AIF   ('&TYPE' NE 'CALL').INL                                  K0620000
.CAL     ANOP                                                           K0620500
&NAME    B     COFINVC             REPLY INVALID COMMAND                K0621000
         MEXIT                                                          K0621500
.INL     ANOP                                                           K0622000
         SPACE 10                                                   R41 K0622300
*********************************************************************** K0622400
* RETURN WITH INVALID COMMAND AS RESPONSE                             * K0622500
*********************************************************************** K0622600
&NAME    MVC   COMMAND+9(16),=C' INVALID COMMAND' MOVE DIAG.            K0623000
         $CRET L=25,INFO=NO                                             K0623500
.XIT     MEND                                                           K0624000
         EJECT                                                          K0624500
         MACRO -- $CFINVO -- INVALID OPERAND                            K0625000
&NAME    $CFINVO &TYPE=CALL,&OPERAND=(R1),&INFO=NO                      K0625500
         GBLC  &DOC                                                     K0626000
         LCLC  &C,&R                                                    K0626500
&C       SETC  '0&OPERAND'         MVC X,0(OPERAND)                     K0627000
         AIF   ('&OPERAND'(1,1) EQ '(').A                               K0627500
&C       SETC  '&OPERAND'          MVC X,OPERAND                        K0628000
.A       ANOP                                                           K0628500
&R       SETC  '&SYSNDX'                                                K0629000
         AIF   ('&INFO' EQ '' AND '&DOC' EQ 'NO' OR '&INFO' EQ 'NO').Z  K0629500
         AIF   ('&TYPE' EQ 'RES').NOJECT                                K0630000
         EJECT                                                          K0630500
.NOJECT  SPACE 2                                                        K0631000
*********************************************************************** K0631500
*                                                                     * K0632000
*        COFINVO -- REPLY INVALID OPERAND                             * K0632500
*                                                                     * K0633000
*        ROUTINE RETURNS TO MAIN COMMAND PROCESSOR BEFORE $WAIT       * K0633500
*                                                                     * K0634000
*********************************************************************** K0634500
.Z       ANOP                                                           K0635000
         AIF   ('&TYPE' NE 'CALL').INL                                  K0635500
&NAME    $DECODE &OPERAND                                               K0636000
         B     COFINVO             REPLY INVALID OPERAND                K0636500
         MEXIT                                                          K0637000
.INL     ANOP                                                           K0637500
         SPACE 10                                                   R41 K0637800
*********************************************************************** K0637900
* RETURN WITH INVALID OPERAND AS RESPONSE                             * K0638000
*********************************************************************** K0638100
&NAME    MVC   COMJNAME,=CL8' '    INSURE FIELD AFTER BLANK          R4 K0638500
         MVC   COMMAND(9),&C                                         R4 K0639000
         MVC   COMMAND+9(16),=C' INVALID OPERAND' SET DIAGNOSTIC        K0639500
         $CRET L=25,INFO=NO                                             K0640000
.XIT     MEND                                                           K0640500
         EJECT                                                          K0641000
         MACRO -- $CFJDCT -- FIND JOB'S DCT                             K0641500
&NAME    $CFJDCT &JOBQE=(R1),&TYPE=CALL,&INFO=NO,&CONT=                 K0642000
         GBLC  &DOC                                                     K0642500
         LCLC  &R                                                       K0643000
&R       SETC  '&SYSNDX'                                                K0643500
         AIF   ('&INFO' EQ '' AND '&DOC' EQ 'NO' OR '&INFO' EQ 'NO').Z  K0644000
         AIF   ('&TYPE' EQ 'RES').NOJECT                                K0644500
         EJECT                                                          K0645000
.NOJECT  SPACE 2                                                        K0645500
*********************************************************************** K0646000
*                                                                     * K0646500
*        COFJDCT -- FIND DEVICE(S) ACTIVE WITH A SPECIFIED JOB        * K0647000
*                                                                     * K0647500
*        ROUTINE COLLECTS DEVICE IDENTIFIERS FROM THE JQE (IF THE     * K0648000
*        JOB IS ON A READER) OR FROM THE JOES (IF THE JOB IS ACTIVE   * K0650500
*        IN HARD COPY).                                               * K0651000
*                                                                     * K0652000
*        FORMAT OF THE DEVICE IDENTIFIER (2 BYTES) IS                 * K0652500
*        BYTE 1 -- HIGH ORDER BIT SIGNIFIES A REMOTE DEVICE           * K0653000
*              BITS 1-3 INDICATE THE DEVICE TYPE                      * K0653500
*              000 = INTERNAL READER                                  * K0654000
*              001 = READER                                           * K0654500
*              010 = PRINTER                                          * K0655000
*              011 = PUNCH                                            * K0655500
*              BITS 4-7 INDICATE THE REMOTE DEVICE NUMBER (1-7) IF    * K0656000
*              THE DEVICE IS A REMOTE OTHERWISE THEY ARE ZERO         * K0656500
*                                                                     * K0657000
*        BYTE 2 -- IF A REMOTE -- THE REMOTE NUMBER (1-255)           * K0657500
*              IF A LOCAL DEVICE THE LOCAL NUMBER (1-99)              * K0658000
*                                                                     * K0658500
*        THE DEVICE IDENTIFIERS ARE MOVED INTO A TABLE ON THE FIRST   * K0659000
*        ENTRY, SUBSEQUENT ENTRIES RETRIEVE OTHER DEVICE IDENTIFIERS  * K0659500
*                                    THIS LINE DELETED BY APAR @OZ20010 K0660000
*                                                                     * K0660500
* REGISTERS USED -                                                    * K0661000
*        R1    = JOB QUEUE ELEMENT ADDRESS, ON EXIT DEVICE ID         * K0661500
*              ADDRESS                                                * K0662000
*        LINK  = LINKAGE                                              * K0662500
*        R15   = WORK                                                 * K0663000
*        WA    = WORK (SAVED BEFORE IT IS USED IN COMWREGS)           * K0663500
*        WB    = WORK (SAVED BEFORE IT IS USED IN COMWREGS)           * K0664000
*        WC    = WORK (SAVED BEFORE IT IS USED IN COMWREGS)           * K0664500
*        WD    = WORK (SAVED BEFORE IT IS USED IN COMWREGS)           * K0665000
*                                                                     * K0665500
* WORK AREAS USED                                                     * K0666000
*        COMWREGS TO SAVE REGISTERS                                   * K0666500
*        COMEWORK TO SAVE R1 -- JQE ADDRESS                           * K0667000
*                                                                     * K0667500
* EXITS                                                               * K0668000
*        LINK+0 DCT NOT FOUND                                         * K0668500
*        LINK+4 DCT FOUND                                             * K0669000
*                                                                     * K0669500
*********************************************************************** K0670000
.Z       ANOP                                                           K0670500
&NAME    $DECODE &JOBQE                                                 K0671000
         AIF   ('&TYPE' NE 'CALL').INL                                  K0671500
.CAL     BAL   LINK,COFJDCT        FIND DCT PERFORMING JOB I/O          K0672000
         MEXIT                                                          K0672500
.INL     ST    R1,COMEWORK         SAVE JQE ADDRESS                     K0673000
         MVI   COFDEVID,0          CLEAR DEVICE ID                      K0673500
         MVC   COFDEVID+1(COFDEVLL-1),COFDEVID  SAVE AREA      @OZ46473 K0674000
         LA    R15,COFDVEND        POINT TO LAST TABLE ENTRY            K0674500
         ST    R15,COFDEVSV        SAVE IT FOR LATER                    K0675000
         CLI   JQETYPE,$INPUT      IS JOB ON RDR                     R4 K0675500
         BNE   COF&R.A             NO--SCAN JOES                     R4 K0676500
         MVC   COFDEVID(L'JQEFLAGS),JQEFLAGS  SET BUSY FLAG             K0682000
         NI    COFDEVID,QUEBUSY    TURN 'OFF' NON-BUSY BITS             K0682500
         MVC   COFDEVID+L'JQEFLAGS(L'JQEDEVID),JQEDEVID  SET DEVICE     K0683000
         B     COF&R.F             EXIT                                 K0683500
         SPACE 1                                                        K0684000
COF&R.A  DS    0H                  SCAN JOES                            K0684500
*                                    THIS LINE DELETED BY APAR @OZ20010 K0684600
*                                    THIS LINE DELETED BY APAR @OZ20010 K0684700
*                                    THIS LINE DELETED BY APAR @OZ20010 K0684800
*                                    THIS LINE DELETED BY APAR @OZ20010 K0684900
         STM   WA,WD,COMWREGS      SAVE REGISTERS                       K0685000
         LA    WD,COFDEVID         POINTO FIRST ADDRESS OF DEVID TBL    K0685500
         L     WA,CDFJOT           POINT TO THE JOT                     K0686000
         LA    R1,JQEJOE              PREPARE TO SCAN          @OZ27300 K0686500
         SH    R1,=Y(JOEJOE-JOEDSECT)  WORK JOES FOR THIS JOB  @OZ27300 K0687000
         SPACE 1                                               @OZ27300 K0687500
         USING JOEDSECT,R1         PROVIDE JOE ADDRESSABILITY  @OZ27300 K0688000
                                   PRINT OFF - SECTION DELETED @OZ27300 K0688500
*                                  THIS LINE DELETED BY APAR   @OZ27300 K0689000
*                                  THIS LINE DELETED BY APAR   @OZ27300 K0689500
*                                  THIS LINE DELETED BY APAR   @OZ27300 K0690000
*                                  THIS LINE DELETED BY APAR   @OZ27300 K0690500
                                   PRINT ON -- SECTION DELETED @OZ27300 K0691000
         SPACE 1                                               @OZ27300 K0691500
COF&R.D  DS    0H                  JOE GET LOOP                         K0692000
*                                  THIS LINE DELETED BY APAR   @OZ27300 K0692100
*                                  THIS LINE DELETED BY APAR   @OZ27300 K0692200
         LH    R1,JOEJOE           GET OFFSET OF NEXT JOE      @OZ27300 K0692500
         N     R1,=A(X'0000FFFF')  INSURE OFFSET IS POSITIVE            K0693000
         BZ    COF&R.E             EXIT IF END OF CHAIN        @OZ27300 K0693500
         SLL   R1,2                EXPAND TO BYTE OFFSET             R4 K0694000
         ALR   R1,WA               COMPUTE JOE ADDRESS                  K0694500
                                   PRINT OFF - SECTION DELETED @OZ27300 K0695000
         N     R15,=X'0000FFFF'    CLEAR LEFT HALFWORD         @OZ37385 K0695200
*                                  THIS LINE DELETED BY APAR   @OZ27300 K0695500
*                                  THIS LINE DELETED BY APAR   @OZ27300 K0696000
*                                  THIS LINE DELETED BY APAR   @OZ27300 K0696500
*                                  THIS LINE DELETED BY APAR   @OZ27300 K0697000
                                   PRINT ON -- SECTION DELETED @OZ27300 K0697100
         TM    JOEFLAG,$JOEBUSY    TEST FOR JOE TO BE BUSY              K0697500
         BZ    COF&R.D             NO--GET NEXT JOE                     K0698000
         MVC   0(L'JOEFLAG,WD),JOEFLAG SAVE BUSY FLAGS                  K0698500
         NI    0(WD),$JOEBUSY      TURN 'OFF' NON-BUSY BITS             K0699000
         MVC   L'JOEFLAG(L'JOEDEVID,WD),JOEDEVID SET DEVICE ID          K0699500
         LA    WD,L'JOEFLAG+L'JOEDEVID(,WD) POINT TO NEXT FREE AREA     K0700000
         C     WD,COFDEVSV         CHECK FOR END OF TABLE               K0700500
         BNL   COF&R.E             IF END EXIT JOE SCAN LOOP            K0701000
         B     COF&R.D             ELSE SCAN ALL JOES                   K0701500
COF&R.E  DS    0H                  END OF JOE SCAN                      K0702000
         LM    WA,WD,COMWREGS      RESTORE REGISTERS                    K0702500
COF&R.F  LA    R15,COFDEVID-(L'JQEFLAGS+L'JQEDEVID)                     K0703000
         ST    R15,COFDEVSV        SAVE IT FOR LATER                    K0703500
&CONT    DS    0H                  CONTINUE DEVICE SCAN                 K0704000
         L     R1,COFDEVSV         PICK-UP LAST DEVICE ADDRESS          K0704500
         LA    R1,L'JQEFLAGS+L'JQEDEVID(,R1)  POINT TO NEXT DEVICE      K0705000
         ST    R1,COFDEVSV         SAVE IT FOR NEXT TIME                K0705500
         CLC   0(L'JQEFLAGS+L'JQEDEVID,R1),=XL3'00' CHK FOR END         K0706000
         BER   R14                 YES RETURN--EMPTY                    K0706500
         B     4(,R14)             NO--RETURN WITH DEV ADDR IN R1       K0707000
         DROP  R1                  KILL JOE ADDRESSABILITY     @OZ27300 K0707500
         USING JQEDSECT,R1         REESTABLISH JQE ADDRESSABILITY       K0708000
COFDEVLL EQU   (L'COMREGSV)*40     LENGTH OF SAVE AEA                   K0708500
COFDEVL  EQU   COFDEVLL-L'JOEFLAG-L'JOEDEVID-4 LENGTH OF TABLE          K0709000
COFDEVID EQU   COMREGSV,COFDEVL    TABLE FOR ACTIVE DEVICES FOR AJOB    K0709500
COFDVEND EQU   COFDEVID+COFDEVL    LAST TABLE ENTRY                     K0710000
COFDEVSV EQU   COFDEVID+COFDEVL+L'JOEFLAG+L'JOEDEVID,4                  K0710500
.XIT     MEND                                                           K0711000
         EJECT                                                          K0711500
         MACRO -- $CFJDCTC -- CONTINUE FIND JOB'S DCT                   K0712000
&NAME    $CFJDCTC &INFO=NO                                              K0712500
         GBLC  &DOC                                                     K0713000
         LCLC  &R                                                       K0713500
&R       SETC  '&SYSNDX'                                                K0714000
         AIF   ('&INFO' EQ '' AND '&DOC' EQ 'NO' OR '&INFO' EQ 'NO').Z  K0714500
         EJECT                                                          K0715000
*********************************************************************** K0715500
*                                                                     * K0716000
*        COFJDCTC -- CONTINUE FIND JOB'S DEVICE CONTROL TABLE         * K0716500
*                                                                     * K0717000
*        ROUTINE CONTINUES THE SEARCH OF DCTS STARTED BY COFJDCT      * K0717500
*        BY USING THE BODY OF THAT ROUTINE. THE ENTRY POINT IN        * K0718000
*        COFJDCT IS SET BY THE CONT= PARAMETER ON THE CALL OR         * K0718500
*        SUBROUTINE VERSION OF THE ROUTINE.                           * K0719000
*        NO $WAITS ARE ISSUED.                                        * K0719500
*                                                                     * K0720000
* REGISTERS USED                                                      * K0720500
*        R1    = DCT ADDRESS                                          * K0721000
*        LINK  = LINKAGE                                              * K0721500
*        R15   = WORK REGISTER                                        * K0722000
*                                                                     * K0722500
* EXITS                                                               * K0723000
*        LINK+0 DCT NOT FOUND                                         * K0723500
*        LINK+4 DCT FOUND                                             * K0724000
*                                                                     * K0724500
* NOTES                                                               * K0725000
*        JOB QUEUE POINTER IN COMEWORK AS SET BY COFJDCT              * K0725500
*                                                                     * K0726000
*********************************************************************** K0726500
.Z       ANOP                                                           K0727000
&NAME    BAL   LINK,COFJDCTC       CONTINUE DCT SCAN                    K0727500
.XIT     MEND                                                           K0728000
         EJECT                                                          K0728500
         MACRO -- $CFJMSG -- COLLECT JOB INFORMATION FOR MESSAGE        K0729000
&NAME    $CFJMSG &JOBQE=(R1),&TYPE=CALL,&INFO=,&OPT=COFU,&AFF=          K0729500
         GBLC  &DOC                                                     K0730000
         AIF   ('&INFO' EQ '' AND '&DOC' EQ 'NO' OR '&INFO' EQ 'NO').Z  K0730500
         AIF   ('&TYPE' EQ 'RES').NOJECT                                K0731000
         EJECT                                                          K0731500
.NOJECT  SPACE 2                                                        K0732000
*********************************************************************** K0732500
*                                                                     * K0733000
*        COFJMSG -- JOB INFORMATION MESSAGE OUTPUT                    * K0733500
*                                                                     * K0734000
*        ROUTINE COLLECTS JOB INFORMATION INTO AREA 'COMMAND' AND     * K0734500
*        INITIATES OUTPUT RESPONSE.                                   * K0735000
*        $WAIT MAY BE ISSUED.                                         * K0735500
*                                                                     * K0736000
* REGISTERS USED                                                      * K0736500
*        R0    = WORK - MESSAGE LENGTH                                * K0737000
*        R1    = JOB QUEUE ELEMENT ADDRESS - WORK - AREA 'COMMAND'    * K0737500
*        WA    = LINKAGE                                              * K0738000
*        R10   = ENTRY BASE                                           * K0738500
*        LINK  = LINKAGE                                              * K0739000
*        R15   = WORK                                                 * K0739500
*                                                                     * K0740000
* EXITS                                                               * K0740500
*        WA+0  JOB DISPLAYED                                          * K0741000
*        WA+4  JOB NOT DISPLAYED ( CONDITIONAL REQUEST ONLY )         * K0741500
*                                                                     * K0742000
* NOTES                                                               * K0742500
*        COMDWORK USED FOR SCRATCH                                    * K0743000
*        COMEWORK USED BY COFJDCT TO HOLD JQE POINTER                 * K0743500
*        COMFWORK USED FOR SCRATCH                                    * K0744000
*        COMWREGS IS USED TO SAVE WORK REGISTERS                      * K0744500
*        OPT   = COFU - DISPLAY UNCONDITIONAL                         * K0745000
*              = COFQ - DISPLAY QUEUED JOBS                           * K0745500
*              = COFA - DISPLAY ACTIVE JOBS                           * K0746000
*              = (OTHER MEANINGFUL CONSISTANT COMBINATIONS)           * K0746500
*                                                                     * K0747000
*********************************************************************** K0747500
.Z       ANOP                                                           K0748000
&NAME    $DECODE &JOBQE                                                 K0748500
         AIF   ('&TYPE' NE 'CALL').INL                                  K0749000
         AIF   ('&OPT' EQ 'SET').A                                      K0749500
         MVI   COFOPT,&OPT         SET OPTION                           K0750000
.A       ANOP                                                           K0750500
         AIF   ('&AFF' EQ 'SET').B                                      K0751000
         MVI   COFAFF,X'7F'        SET FOR ALL SYSTEMS ACTIVE           K0751500
.B       ANOP                                                           K0752000
         L     R10,=A(COFJMSG)     POINT TO SERVICE ROUTINE          R4 K0752500
         BALR  WA,R10              CALL JOB INFORMATION MSG ROUTINE  R4 K0753000
         MEXIT                                                          K0753500
.INL     ANOP                                                           K0754000
         EJECT                                                          K0754500
*********************************************************************** K0754900
* DEFINITIONS FOR JOB INFORMATION MESSAGE                             * K0755000
*********************************************************************** K0755100
         SPACE 2                                                        K0755500
COFN     EQU   X'01'               DISPLAY NORMAL JOBS                  K0756000
COFS     EQU   X'02'               DISPLAY SYSTEM JOBS                  K0756500
COFT     EQU   X'04'               DISPLAY LOGON JOBS                   K0757000
COFJ     EQU   COFN+COFS+COFT      DISPLAY ALL JOBS                     K0757500
COFX     EQU   X'08'               DISPLAY JOBS IN EXECUTION            K0758000
COFD     EQU   X'10'               DISPLAY JOBS ON DEVICES              K0758500
COFA     EQU   COFJ+COFX+COFD      DISPLAY ACTIVE JOBS                  K0759000
COFI     EQU   X'20'               DISPLAY PRE-XEQ QUEUED JOBS          K0759500
COFO     EQU   X'40'               DISPLAY POST-XEQ QUEUED JOBS         K0760000
COFP     EQU   X'80'               DISPLAY QUEUED FOR PRT/PUN           K0760500
COFQ     EQU   COFJ+COFI+COFO+COFP DISPLAY QUEUED JOBS                  K0761000
COFU     EQU   COFJ+COFI+COFO+COFX+COFP+COFD DISPLAY UNCONDITIONAL      K0761500
         SPACE 2                                                        K0762000
COFJOB   EQU   COMMAND,3           TEXT 'JOB', 'STC', OR 'TSU'          K0762500
COFJNO   EQU   COFJOB+3,5          JOB NUMBER WITH LEADING BLANK        K0763000
COFJNAME EQU   COFJNO+6,8          JOB NAME                             K0763500
COFQUE   EQU   COFJNAME+9,8        TEXT 'AWAITING'                      K0764000
COFQX    EQU   COFQUE+9,9          TEXT 'EXECUTION'                     K0764500
COFQXC   EQU   COFQX+10,1          CLASS                                K0765000
COFQXU   EQU   COFQX,11            TEXT 'EXECUTION *'                   K0765500
COFPRT   EQU   COFQUE,3            TEST 'PRT'                        R4 K0768000
COFPRTR  EQU   COFPRT+3,10         PRINT ROUTING                     R4 K0769000
COFPUN   EQU   COFPRT+13,3         TEXT 'PUN'                        R4 K0769500
COFPUNR  EQU   COFPUN+3,10         PUNCH ROUTING                     R4 K0770000
COFQOUT  EQU   COFQX,6             TEST 'OUTPUT'                        K0773000
COFPURGE EQU   COFQX,5             TEXT 'PURGE'                         K0773500
COFPRIO  EQU   COFPUNR+10,4        TEXT 'PRIO'                       R4 K0774000
COFPRI   EQU   COFPRIO+5,2         PRIORITY                             K0774500
COFFLAGS EQU   COFPRI+3,9          'HOLD', 'PURGE', 'DUPLICATE'         K0775000
COFSID   EQU   COFFLAGS+10,4       FIRST SID NAME                    R4 K0775500
COFSIDX  EQU   COFSID+5,24         REST OF SID'S                        K0776000
COFINDP  EQU   COFSIDX+25,3        DESIGNATOR FOR INDEPENDENT MODE      K0776500
COFSEC   EQU   COFINDP+3,2         SECURITY FIELD FOR $WTO'S            K0777000
COFOPT   EQU   COFSEC+2,1          OPTIOM SPECIFIED                     K0777500
COFAFF   EQU   COFOPT+1,1          ACTIVE SID WHEN SPECIFIED            K0778000
COFLNGTH EQU   COFAFF+1,1          LENGTH OF MESSAGES                   K0779000
COFAX    EQU   COFQUE,9            TEXT 'EXECUTING'                     K0781000
COFAXC   EQU   COFAX+10,1          CLASS WHEN EXECUTING                 K0781500
COFON    EQU   COFAX,2             TEXT 'ON'                            K0782000
COFDEV   EQU   COFAX+3,8           TEXT DEVICE NAME                     K0782500
COFAXT   EQU   COFDEV+9,COFSEC-COFPRIO ACTIVE JOB MSG TRAILER           K0783000
COFQOT   EQU   COFQOUT+7,COFSEC-COFPRIO QUEUED FOR OUTPUT TRAILER       K0783500
COFQPT   EQU   COFPURGE+6,COFSEC-COFPRIO QUEUED FOR PURGE TRAILER       K0784000
COFAXL   EQU   COFPRIO-(COFDEV+9) LENGTH TO SUBTRACT FOR ACTIVE MSG     K0784500
COFQOL   EQU   COFPRIO-(COFQOUT+7) LNG TO SUBTRACT FOR Q'S FOR OUT      K0785000
COFQPL   EQU   COFPRIO-(COFPURGE+6) LNG TO SUBTRACT FOR Q'S FOR PG      K0785500
         EJECT                                                          K0786000
         USING *,R10               ESTABLISH ROUTINE ADDRESSABILITY  R4 K0786500
         LH    R0,JQEJOBNO         GET JOB NUMBER              @OZ29819 K0786510
         LA    R15,COFT            ASSUME TSU                  @OZ29819 K0786550
         CH    R0,=H'20000'        TSU JOB...                  @OZ29819 K0786560
         BH    *+8                 BR IF YES                   @OZ29819 K0786570
         LA    R15,COFS            ASSUME STC                  @OZ29819 K0786580
         CH    R0,=H'10000'        STC JOB...                  @OZ29819 K0786590
         BH    *+8                 BR IF YES OR TSU JOB        @OZ29819 K0786600
         LA    R15,COFN            MUST BE BATCH JOB           @OZ29819 K0786610
         EX    R15,COFJBTST        DO WE WANT THIS JOB...      @OZ29819 K0786620
         BZ    4(,WA)              EXIT NO DISPLAY IF NO       @OZ29819 K0786630
*********************************************************************** K0786900
* DETERMINE STATUS OF JOB                                             * K0787000
*********************************************************************** K0787100
         TM    JQETYPE,$XEQ        EXECUTION OR CONVERT QUEUE           K0787500
         BZ    COFJMT              BRANCH IF NOT                     R4 K0788000
         CLI   JQETYPE,$XEQ        TEST FOR CONVERTER                   K0788500
         BNE   COFJMX              NO--TRY FOR EXECUTION                K0789000
*********************************************************************** K0789400
* JOB IN CONVERSION QUEUE                                             * K0789500
*********************************************************************** K0789600
         TM    COFOPT,COFI         CALLER WANT PRE-EXECUTION            K0790000
         BZ    4(0,WA)             EXIT NO DISPLAY                      K0790500
         BAL   R15,COFJMB          CREATE BASIC MESSAGE                 K0791000
         BAL   R0,COFJMAFQ         ADD SYS NAMES--RETURN ON R15         K0791500
         MVC   COFQUE,=C'AWAITING' SET                                  K0792000
         MVC   COFQXU,=C'EXECUTION *' TEXT                              K0792500
         B     COFQMADS            DISPLAY AND EXIT                     K0793000
COFJBTST TM    COFOPT,*-*          ***  EXECUTE ONLY  ***      @OZ29819 K0793100
*********************************************************************** K0793400
* JOB IN EXECUTION QUEUE - COULD HAVE SOME SPINS IN OUTPUT            * K0793500
*********************************************************************** K0793600
COFJMX   TM    JQEFLAGS,QUEBUSY    TEST FOR ACTIVE                      K0794000
         BZ    COFJMQX             BR IF NOT                            K0794500
         TM    COFOPT,COFX         CALLER WANT EXECUTION                K0795000
         BZ    COFJMD              TRY DEVICE                           K0795500
         IC    R0,JQEFLAGS         PICK-UP BUSY FLAG                    K0796000
         N     R0,=A(QUEBUSY)      TURN 'OFF' ALL BUT BUSY FLGS         K0796500
         LA    R15,1               ASSUME 1ST SYSTEM DESIRED            K0797000
         B     *+8                 ENTER BUSY FLAG CONVERT LOOP         K0797500
         SLL   R15,1               ASSUME NXT SYS IF ONE DESIRD         K0798000
         BCT   R0,*-4              LOOP TILL SYSTEM FOUND               K0798500
         EX    R15,COFAFFTS        TEST JOB BUSY ON DESIRED SYS         K0799000
         BZ    COFJMD              NO--TRY BUSY ON A DEVICE             K0799500
         BAL   R15,COFJMB          CREATE BASIC MESSAGE                 K0800000
         IC    R15,JQEFLAGS        PICK-UP ACTIVE BIT                   K0800500
         BAL   R0,COFJMAFA         GET SYS NAME-RETURN ON R15           K0801000
         MVC   COFAXT,COFPRIO      MOVE MSG FOR ACTIVE IN XEQ           K0801500
         MVC   COFAX,=C'EXECUTING' SET                                  K0802000
         MVC   COFAXC,JQETYPE      NORMAL TEXT                          K0802500
         OI    COFAXC,X'80'        MAKE XEQ CLASS PRINTABLE             K0803000
         CLI   COFJOB,C'J'         TEST FOR NORMAL                      K0803500
         BE    COFJMDAX            DISPLAY IF YES                       K0804000
         MVI   COFAXC,CATTSUID     SET TSU DISPLAY CLASS                K0804500
         CLI   COFJOB,C'T'         IS THIS TSU                          K0805000
         BE    COFJMDAX            DISPLAY IF YES                       K0805500
         MVI   COFAXC,CATSTCID     SET STC DISPLAY CLASS                K0806000
COFJMDAX DS    0H                                                       K0806500
         MVC   COFSEC,JQEJOBNO     COPY JOB NUMBER                      K0807000
         SLR   R15,R15             ZERO INSERT REGISTER                 K0808000
         IC    R15,COFLNGTH        PICK-UP CURRENT LENGTH               K0808500
         LA    R0,COFAXL           PICK-UP LENGTH TO SHORTEN MSG BY     K0809000
         SLR   R15,R0              COMPUTE RESIDUAL LENGTH              K0809500
         STC   R15,COFLNGTH        SAVE NEW LENGTH FOR $WTO             K0810000
         BAL   R14,COFJWTO         ISSUE WTO                            K0813500
         EJECT                                                      R41 K0813900
COFJMDXC DS    0H                                                       K0814000
         TM    COFOPT,COFD         DOES USER WANT 'ON DEVICE'           K0814500
         BZR   WA                  EXIT                                 K0815000
         CLC   JQEJOE,$ZEROS       ARE THERE ANY SPINS...      @OZ27300 K0815500
         BZR   WA                  EXIT                                 K0816000
         CLC   JQEJOBNO,COFSEC     SAME JOB NUMBER                      K0816500
         BNER  WA                  EXIT                                 K0817000
         $CFJDCT ,                 SCAN FOR DEVICE ACTIVITY             K0817500
         B     0(,WA)              RETURN IF NONE                       K0818000
         B     COFDEVCR            ENTER DEVICE CREATE RTN              K0818500
*********************************************************************** K0819000
* JOB AWAITING EXECUTION                                              * K0819500
*********************************************************************** K0819600
COFJMQX  TM    COFOPT,COFI         CALLER WANT PRE-EXECUTION            K0820000
         BZ    COFJMD              TRY DEVICE                           K0820500
         BAL   R15,COFJMB          CREATE BASIC MESSAGE                 K0821000
         BAL   R0,COFJMAFQ         ADD SYS NAME(S)-RET ON R15           K0821500
         MVC   COFQUE,=C'AWAITING' SET                                  K0822000
         MVC   COFQX,=C'EXECUTION *' TEXT                               K0822500
         MVC   COFQXC,JQETYPE      SET NORMAL CLASS                     K0823000
         OI    COFQXC,X'80'        MAKE DISPLAYABLE                     K0823500
         CLI   COFJOB,C'J'         TEST FOR NORMAL                      K0824000
         BE    COFJMDQX            DISPLAY IF YES                       K0824500
         MVI   COFQXC,CATTSUID     SET TSU DISPLAY CLASS                K0825000
         CLI   COFJOB,C'T'         IS THIS TSU                          K0825500
         BE    COFJMDQX            DISPLAY IF YES                       K0826000
         MVI   COFQXC,CATSTCID     SET STC DISPLAY CLASS                K0826500
COFJMDQX DS    0H                  ISSUE QUEUED FOR XEQ MESSAGE         K0827000
         MVC   COFSEC,JQEJOBNO     COPY JOB NUMBER                      K0827500
         BAL   R14,COFJWTO         ISSUE MESSAGE                        K0828000
         B     COFJMDXC            CONTINUE DEVICE SCAN                 K0828500
COFJMT   DS    0H                                                    R4 K0829000
         EJECT                                                      R41 K0837800
*********************************************************************** K0837900
* SEARCH FOR DEVICE ACTIVITY                                          * K0838000
*********************************************************************** K0838100
COFJMD   ST    R1,COMEWORK         SAVE JQE ADDRESS            @OZ29819 K0838500
         TM    COFOPT,COFD         CALLER WANT 'ON DEVICE'...  @OZ29819 K0839000
         BZ    COFJMQO             BR IF NO                    @OZ29819 K0839500
        $CFJDCT ,                  LOCATE ACTIVE DCT FOR JOB   @OZ29819 K0840000
         B     COFJMQO             BR IF NO ACTIVE DEVICE  +0  @OZ29819 K0840500
COFDEVCT LA    R14,COFJMDCC        POINT TO EXIT ROUTINE   +4  @OZ29819 K0841000
         B     COFJOIN             AND ENTER EXAMINATION RTN            K0841500
COFDEVCR DS    0H                  DETERMINE JOB ON ACTIVE SYS          K0842000
         LA    R14,COFJMDC         POINT TO EXIT ROUTINE                K0842500
COFJOIN  DS    0H                  JOB ACTIVE EXAM RTN                  K0843000
         IC    R0,0(,R1)           PICK UP ACTIVE FLAG                  K0843500
         N     R0,=A(QUEBUSY)      TURN 'OFF' ALL BUT BUSY FLAG         K0844000
         LA    R15,1               ASSUME 1ST SYSTEM IS DESIRED         K0844500
         B     *+8                 ENTER CONVERT LOOP                   K0845000
         SLL   R15,1               ASSUME NEXT SYSTEM DESIRED           K0845500
         BCT   R0,*-4              LOOP TILL SYSTEM FOUND               K0846000
         EX    R15,COFAFFTS        ACTIVE JOB ON DESIRED SYSTEM...   R4 K0846500
         BZR   R14                 NO--ENTEER DESIRED ROUTINE           K0847000
         ST    R1,COMFWORK         SAVE ADDDRESS FOR LATER              K0847500
         L     R1,COMEWORK         RESTORE JQE POINTER                  K0848000
         BAL   R15,COFJMB          CREATE BASIC MESSAGE                 K0848500
         ST    R1,COMEWORK         SAVE JQE POINTER AGAIN               K0849000
         L     R1,COMFWORK         RESTORE R1 CONTENTS                  K0849500
         IC    R15,0(,R1)          PICK-UP ACTIVE SYS BIT               K0850000
         BAL   R0,COFJMAFA         ADD SYS NAME--RET ON R15             K0850500
         MVC   COFON,=C'ON'        SET JOBNAME 'ON' DEVICE NAME         K0851000
         TM    1(R1),DCTRMTID      RJE                               R4 K0852000
         BNZ   COFRMDEV            DO REMOTE CONVERSION IF YES       R4 K0854000
         CLI   1(R1),X'0F'         TEST FOR PSO JOE            @OZ30706 K0854200
         BE    COFPSO              YES-INSERT PSO ID           @OZ30706 K0854400
         SLR   R15,R15             ZERO INSERT REGISTER                 K0854500
         IC    R15,1(,R1)          PICKUP DEVICE FLAGS                  K0855000
         SRL   R15,4               SHIFT TO LOW 4 BITS OF REG           K0855500
         MH    R15,=Y(COFDEVTL)    MULTIPLY BY ELEMENT LENGTH           K0856000
         AL    R15,=A(COFDEVTB)    POINT TO CORRECT ENTRY               K0856500
         MVC   COFDEV,1(R15)       FILL IN DEVICE NAME                  K0857000
         CLI   0(R15),0            TEST FOR INTERNAL READER             K0857500
         BE    COFDEVND            YES-SKIP NEXT PORTION OF NAME BLD    K0858000
         SLR   R0,R0               ZERO INSERT REGISTER                 K0858500
         IC    R0,2(,R1)           PICK-UP DEVICE NUMBER                K0859000
         CVD   R0,COMDWORK         CONVERT TO PACKED NUMBER             K0859500
         IC    R0,0(,R15)          PICK-UP LENGTH OF DEVICE NAME        K0860000
         LA    R14,COFDEV          PT TO BEGINNING OF NAME              K0860500
         ALR   R14,R0              COMPUTE POSITION FOR DEVICE NBR      K0861000
         MVC   1(3,R14),=X'202020' PUT MASK INTO AREA                   K0861500
         EDMK  0(4,R14),COMDWORK+6 SET EBCDIC NBR INTO DEVICE NAME      K0862000
         MVC   0(4,R14),0(R1)      PUT 1ST TWO DIGITS IN NO. FIELD      K0862500
         B     COFDEVND            AND EXIT DEVICE NAME RTN             K0863000
COFPSO   DS    0H                                              @OZ30706 K0863100
         MVC   COFDEV,=C'PRSYSOUT' FILL IN DEVICE NAME         @OZ30706 K0863200
         B     COFDEVND            AND EXIT DEVICE NAME RTN    @OZ30706 K0863300
         EJECT                                                      R41 K0863400
COFRMDEV DS    0H                  DEVICE IS A REMOTE                   K0863500
         SLR   R0,R0               ZERO INSERT REGISTER                 K0864000
         IC    R0,2(,R1)           PICK-UP REMOTE NUMBER                K0864500
         CVD   R0,COMDWORK         CONVERT TO PACKED DECIMAL            K0865000
         MVI   COFDEV,C'R'         SET REMOTE IDENTIFIER                K0868000
         MVC   COFDEV+2(4),=X'2020204B' SET MASK AND '.'             R4 K0868500
         LR    R14,R1              SAVE POINTER TO DEVICE NAME          K0869000
         EDMK  COFDEV+1(4),COMDWORK+6 SET EBCDIC REMOTE NO. IN MSG      K0869500
         MVC   COFDEV+1(4),0(R1)   MOVE REMOTE NBR AND CONCATENATOR     K0870000
         LA    R1,COFDEV+1         1ST BYTE BEFORE CONCATENATORS        K0870500
         LA    R1,1(,R1)           PT TO NEXT BYTE                      K0871000
         CLI   0(R1),C'.'          CHECK FOR CONCATENATOR               K0871500
         BNE   *-8                 NO--LOOP TILL FOUND                  K0872000
         SLR   R15,R15             ZERO INSERT REGISTER                 K0872500
         IC    R15,1(,R14)         PICK-UP DEVICE TYPE AND NUMBER       K0873000
         SRL   R15,4               ISOLATE DEVICE TYPE                  K0873500
         ALR   R15,R15             TIMES ELEMENT LENGTH                 K0874000
         LA    R15,COFRMDVT-DCTRMTID/8(R15)                          R4 K0875000
         MVC   1(2,R1),0(R15)      SET DEVICE TYPE IN NAME              K0877000
         MVC   3(1,R1),1(R14)      SET DEVICE NUMBER                    K0877500
         OI    3(R1),C'0'          MAKE EBCDIC PRINTABLE                K0878000
COFDEVND DS    0H                  EXIT DEVICE NAME CREATE NAME RTN     K0878500
         MVC   COFAXT,COFPRIO      MOVE MESSAGE DOWN                    K0879000
         LA    R1,COFAXL           PICK-UP LENGTH TO SUBTRACT           K0879500
         SLR   R15,R15             ZERO INSERT REGISTER                 K0880500
         IC    R15,COFLNGTH        PICK-UP CURRENT LENGTH               K0881000
         SLR   R15,R1              COMPUTE NEW LENGTH                   K0881500
         STC   R15,COFLNGTH        SAVE NEW LENGTH                      K0882000
         L     R1,COMEWORK         RESTORE JQE POINTER                  K0885000
         MVC   COFSEC,JQEJOBNO     SET SECURITY NUMBER                  K0885500
         BAL   R14,COFJWTO         ISSUE MESSAGE                        K0886000
         CLC   COFSEC,JQEJOBNO     CHECK FOR INTEGRITY                  K0886500
         BNER  WA                  RETUEN IF NOT SECURE                 K0887000
COFJMDC  $CFJDCTC ,                CONTINUE DCT SCAN                    K0887500
         B     0(,WA)              RETURN IF NO MORE                    K0888000
         B     COFDEVCR            AND ENTER DEVICE NAME RTN            K0888500
COFJMDCC $CFJDCTC ,                CONTINUE DCT SCAN                    K0889000
         B     COFJMQO             IF NONE, LOOK FOR QUE FOR OUTPUT     K0889500
         B     COFDEVCT            AND CONTINUE                         K0890000
         SPACE 2                                                    R41 K0890400
COFAFFTS TM    COFAFF,*-*          **** EXECUTE ONLY ****               K0890500
         EJECT                                                          K0891000
*********************************************************************** K0891400
*        JOB QUEUED FOR OUTPUT                                        * K0891500
*********************************************************************** K0891600
         SPACE 1                                                        K0892000
COFJMQO  L     R1,COMEWORK         RESTORE JQE POINTER                  K0892500
         TM    COFOPT,COFO         TEST FOR OUTPUT QUEUED               K0893000
         BZ    COFJMQPP            NO--TEST FOR PRINT PUNCH             K0893500
         TM    JQETYPE,$OUTPUT     TEST FOR IN OUTPUT PHASE             K0894000
         BZ    COFJMQPP            NO--PRT/PUN                          K0894500
         TM    JQEFLAGS,QUEBUSY    TEST FOR BUSY                        K0895000
         BNZ   COFJMQPA            DISPLAY AWAITING PRT/PUN IF YES   R4 K0895500
         BAL   R15,COFJMB          BULID BASIC MESSAGE                  K0896000
         BAL   R0,COFJMAFQ         GET SYS NAMES--RET ON R15            K0896500
         MVC   COFQUE,=C'AWAITING' SET AWAITING IN TEXT                 K0897000
         MVC   COFQOUT,=C'OUTPUT'  SET QUEUED FOR 'OUTPUT'              K0897500
         MVC   COFQOT,COFPRIO      MOVE MESSAGE FOR Q'D FOR OUTPUT      K0898000
         SLR   R15,R15             ZERO INSERT REGISTER                 K0899000
         IC    R15,COFLNGTH        PICK-UP CURRENT LENGTH               K0899500
         LA    R0,COFQOL           PICK-UP LENGTH TO SHORTEN MSG BY     K0900000
         SLR   R15,R0              COMPUTE RESIDUAL LENGTH              K0900500
         STC   R15,COFLNGTH        SAVE NEW MSG LENGTH                  K0901000
         B     COFQMADS            AND SEND MESSAGE                     K0904500
         SPACE 2                                                        K0905000
*********************************************************************** K0905400
*        TEST FOR JOB ON PRINT/PUNCH QUEUE                            * K0905500
*********************************************************************** K0905600
COFJMQPP TM    JQETYPE,$HARDCPY    TEST FOR QUEUED FOR HARD COPY    R41 K0906000
         BZ    COFJMQPG            NO--TRY QUEUED FOR PURGE             K0906500
COFJMQPA TM    COFOPT,COFP         TEST FOR PRINT / PUNCH QUEUING    R4 K0907000
         BZ    COFJMQPG            TRY PURGE IF NOT                  R4 K0907500
         BAL   R15,COFJMB          CREATE BASIC MESSAGE                 K0908000
         MVC   COFPRT,=C'PRT'      SET QUEUE                         R4 K0908500
         MVC   COFPUN,=C'PUN'      IDENTIFIERS                       R4 K0909000
         LA    R0,COFPRTR          POINT TO RECEIVE AREA             R4 K0909500
         LA    R15,JQEPRTRT        POINT TO PRINT ROUTE FIELD        R4 K0910000
         BAL   R14,COFRTC          CONVERT TO PRINTABLE              R4 K0910500
         LA    R0,COFPUNR          POINT TO RECEIVE AREA             R4 K0911000
         LA    R15,JQEPUNRT        POINT TO PUNCH ROUTE FIELD        R4 K0911500
         BAL   R14,COFRTC          CONVERT TO PRINTABLE              R4 K0912000
         SLR   R15,R15             ZERO INSERT REGISTER                 K0913000
         IC    R15,COFLNGTH        PICK-UP LENGTH OF MSG                K0913500
         LA    R14,COFJOB(R15)     POINT TO THE NEXT AVAILABLE BYTE     K0914000
         MVC   0(3,R14),=C'ANY'    SET AFFINITY TO 'ANY'                K0914500
         LA    R15,3(,R15)         COMPUTE NEW MESSAGE LENGTH           K0915000
         STC   R15,COFLNGTH        AND SVAE NEW LENGTH                  K0915500
         B     COFQMADS            AND SEND COMPLETED MESSAGE           K0919500
         EJECT                                                      R41 K0919800
*********************************************************************** K0919900
*        TEST FOR JOB ON PURGE QUEUE                                  * K0920000
*********************************************************************** K0920100
COFJMQPG CLI   JQETYPE,$PURGE      ON PURGE QUEUE                   R41 K0920500
         BNE   4(,WA)              RETURN NO DISPLAY                 R4 K0921000
         TM    COFOPT,COFQ         TEST FOR JOB QUEUED TO 'ANYTHING'    K0921500
         BNO   4(,WA)              NO -- EXIT NO DISPLAY   +4           K0922000
         BAL   R15,COFJMB          CREATE MESSAGE PROTOTYPE             K0922500
         BAL   R0,COFJMAFQ         GET SYS NAMES -- RET ON R15          K0923000
         MVC   COFQUE,=C'AWAITING' SET 'AWAITING' FOR PURGE             K0923500
         MVC   COFPURGE,=C'PURGE'  SET FOR 'PURGE' PROCESSOR            K0924000
         MVC   COFQPT,COFPRIO      ADJUST MESSAGE FOR PURGE             K0924500
         SLR   R15,R15             ZERO INSERT REGISTER                 K0925500
         IC    R15,COFLNGTH        PICK-UP CURRENT  ENGTH               K0926000
         LA    R0,COFQPL           PICK-UP LENGTH TO SHORTEN MSG BY     K0926500
         SLR   R15,R0              COMPUTE RESIDUAL LENGTH              K0927000
         STC   R15,COFLNGTH        AND SAVE IT FOR $WTO                 K0927500
COFQMADS DS    0H                  EXIT WITH FINAL MESSAGE              K0931000
         BAL   R14,COFJWTO         SEND MESSAGE                         K0931500
         BR    WA                  AND RETURN  +0                       K0932000
*********************************************************************** K0932400
* SUBROUTINE TO BUILD BASIC JOB INFORMATION MESSAGE                   * K0932500
*********************************************************************** K0932600
COFJMB   LH    R0,JQEJOBNO         PICK UP JOB NUMBER                   K0933000
         CH    R0,=H'10000'        TEST FOR 'JOB'                       K0936000
         BNL   COFJMNJ             IF NOT TRY 'STC' OR 'TSU'            K0936500
*              THIS LINE DELETED BY APAR NUMBER                @OZ29819 K0937000
*              THIS LINE DELETED BY APAR NUMBER                @OZ29819 K0937500
         MVC   COFJOB,=C'JOB'      SET 'JOB'                            K0938000
         B     COFJMBA             CONTINUE                             K0938500
COFJMNJ  SH    R0,=H'20000'        SEPARATE                             K0939000
         BL    COFJMNT             'STC' FROM 'TSU'                     K0939500
*              THIS LINE DELETED BY APAR NUMBER                @OZ29819 K0940000
*              THIS LINE DELETED BY APAR NUMBER                @OZ29819 K0940500
         MVC   COFJOB,=C'TSU'      SET 'TSU'                            K0941000
         B     COFJMBA             CONTINUE                             K0941500
*              THIS LINE DELETED BY APAR NUMBER                @OZ29819 K0942000
COFJMNT  DS    0H                                              @OZ29819 K0942500
         MVC   COFJOB,=C'STC'      SET 'STC'                            K0943000
         AH    R0,=H'10000'        GET BASE                             K0943500
         EJECT                                                      R41 K0943900
COFJMBA  $CFCVE ,                  CONVERT TO EBCDIC                    K0944000
         MVC   COFJNO,COMDWORK     SET INTO MESSAGE                     K0944500
         MVI   COFJNAME-1,C' '     BLANK OUT REST OF MESSAGE AREA       K0945000
         MVC   COFJNAME(COFSEC-COFJNAME),COFJNAME-1                     K0945500
         MVC   COFJNAME,JQEJNAME   MOVE JOB NAME                        K0946000
         MVC   COFPRIO,=C'PRIO'    SET 'PRIO'                           K0946500
         SLR   R0,R0               ZERO PRIORITY                        K0947000
         IC    R0,JQEPRIO          PICK UP PRIORITY * 16                K0947500
         SRA   R0,4                DIVIDE BY 16                         K0948000
         $CFCVE ,                  CONVERT TO EBCDIC                    K0948500
         MVC   COFPRI,COMDWORK+5-L'COFPRI MOVE PRIORITY                 K0949000
         LR    R0,R15              SAVE LINK REGISTER                   K0949500
         LA    R15,COFFLAGS        SET ADDRESS OF NEXT MESSAGE AREA     K0950000
         TM    JQEFLAGS,QUEHOLDA+QUEHOLD1+QUEHOLD2+QUEPURGE+QUEOPCAN    K0950500
*                                  TEST FOR ANY JOB FLAGS               K0951000
         BZ    COFJMBB             NONE--FILL IN THE AFFINITIES         K0951500
         MVC   COFFLAGS(4),=C'HOLD'  ASSUME JOB IS HELD                 K0952000
         LA    R15,5(,R15)         PT TO NEXT AVAILABLE MSG AREA        K0952500
         TM    JQEFLAGS,QUEHOLDA+QUEHOLD1  TEST FOR 'HELD'              K0953000
         BNZ   COFJMBB             IF HELD--GO TO AFFINITIES FILL-IN    K0953500
         MVC   COFFLAGS(5),=C'PURGE'  ASSUME PURGE                      K0954000
         LA    R15,1(,R15)         PT TO NEXT AVAILABLE MSG AREA        K0954500
         TM    JQEFLAGS,QUEPURGE   TEST FOR SAME                        K0955000
         BO    COFJMBB             YES--FILL-IN AFFINITIES              K0955500
         MVC   COFFLAGS(6),=C'CANCEL'  ASSUME 'CANCELLED'               K0956000
         LA    R15,1(,R15)         PT TO NEXT AVAILABLE MSG AREA        K0956500
         TM    JQEFLAGS,QUEOPCAN   TEST FOR CANCELLED                   K0957000
         BO    COFJMBB             YES--FILL-IN AFFINITIES              K0957500
         MVC   COFFLAGS,=C'DUPLICATE'  MUST BE DUPLICATE JOB NAME       K0958000
         LA    R15,3(,R15)         PT TO NEXT AVAILABLE MSG BYTE        K0958500
COFJMBB  DS    0H                  COMPLETE MESSAGE BODY AND SVAE LN    K0959000
         LA    R14,COFJOB          GET ADDRESS OF MSG BEGINNING         K0959500
         SLR   R15,R14             COMPUTE MESSAGE LENGTH               K0960000
         STC   R15,COFLNGTH        SAVE LENGTH                          K0961000
         LR    R15,R0              RESTORE LINK REGISTER                K0963000
         BR    R15                 AND RETURN                           K0963500
         EJECT                                                      R41 K0964000
*********************************************************************** K0964400
*        ADD ACTIVE SYSTEM NAME                                       * K0964500
*********************************************************************** K0964600
         SPACE 1                                                        K0965000
COFJMAFA DS    0H                  PICK-UP AFFINITY IN R15 FOR NAME     K0965500
         N     R15,=A(QUEBUSY)     TURN OFF NON-BUSY BITS               K0966000
         BCTR  R15,0               LESS ONE FOR DISPLACEMENT            K0966500
         MH    R15,=AL2(QSELEN)    TIMES ELEMENT SIZE          @OZ27300 K0967000
         AL    R15,$QSE1           PLUS TABLE START ADDR             R4 K0967500
         USING QSEDSECT,R15        QSE ADDRESSABILITY                   K0968000
         SLR   R14,R14             ZERO INSERT REGISTER                 K0969000
         IC    R14,COFLNGTH        PICK-UP CURRENT MSG LENGTH           K0969500
         LA    R14,COFJOB(R14)     PT TO CURRENT MSG END                K0971500
         MVC   0(L'QSESID,R14),QSESID PUT SYSTEM NAME IN MESSAGE        K0972000
         LA    R15,COFJOB          PT TO MSG BEGINNING                  K0972500
         LA    R14,L'QSESID(,R14)  PT TO MSG ENDING                     K0973000
         SLR   R14,R15             COMPUTE NEW LENGTH                   K0973500
         STC   R14,COFLNGTH        SAVE NEW LENFTH FOR $WTO             K0974500
         LR    R15,R0              GET GOOD RETURN REGISTER             K0976500
         BR    R15                 AND RETURN TO CALLER                 K0977000
         DROP  R15                 DROP QSE ADDRESSABILITY              K0977500
         EJECT                                                      R41 K0978000
*********************************************************************** K0978400
*        ADD QUEUED SYSTEM NAMES TO MESSAGE                           * K0978500
*********************************************************************** K0978600
         SPACE 1                                                        K0979000
COFJMAFQ DS    0H                  ADD QUEUED NAMES                     K0979500
         SLR   R15,R15             ZERO INSERT REGISTER                 K0980500
         IC    R15,COFLNGTH        PICK-UP CURRENT LENGTH               K0981000
         LA    R15,COFJOB(R15)     PT TO CURRENT MSG END                K0983000
         TM    JQEFLAG2,QUESYSAF   TEST FOR QUEUED TO 'ANY'             K0983500
         BNO   COFJMAF1            NO--PLACE ALL NAMES IN MSG           K0984000
         MVC   0(3,R15),=C'ANY'    SET AFFINITY SYS NAMES TO 'ANY'      K0984500
         LA    R15,3(,R15)         PT TO NEW END OF MSG                 K0985000
         B     COFJMAF2            AND EXIT                             K0985500
COFJMAF1 DS    0H                  ADD SPECIFIC SYS NAMES               K0986000
         L     R14,$QSE1           POINT TO 1ST QSE                  R4 K0986500
*                                    THIS CARD DELETED BY APAR @OZ27300 K0987000
         USING QSEDSECT,R14        QSE ADDRESSABILITY                   K0987500
         ST    WA,COMWREGS         SAVE WA FOR WORK                     K0988000
*                                    THIS CARD DELETED BY APAR @OZ27300 K0988500
COFJMAF3 IC    WA,QSESIAFF         PICK UP SYSTEM AFFINITY BIT @OZ27300 K0989000
         EX    WA,COFJMAFF         TEST FOR JOB QUEUED TO THIS SYS      K0989500
         BZ    COFJMAF4            NO--SEARCH ALL ELEMENTS              K0990000
         MVC   0(L'QSESID,R15),QSESID YES--PUT NAME IN MSG              K0990500
         LA    R15,L'QSESID+1(,R15) COMPUTE NEXT NAME LOCATION          K0991000
COFJMAF4 DS    0H                  CYCLE THROUGH ALL ELEMENTS           K0991500
         TM    QSEFLAGS,QSELAST    TEST FOR LAST ELEMENT                K0992000
         LA    R14,QSELEN(,R14)    BUMP TO NEXT QSE            @OZ27300 K0992100
         BZ    COFJMAF3            NOT LAST LOOP                        K0992500
         L     WA,COMWREGS         ELSE RESTORE WA CONTENTS             K0993000
         BCTR  R15,0               REDUCE MSG FOR XTR BLANK             K0993500
COFJMAF2 DS    0H                  TEST FOR 'IND' MODE OF OPERATION     K0994000
         TM    JQEFLAG2,QUEINDAF   TEST FOR 'IND' MODE                  K0994500
         BZ    COFJMAF5            NO--SEND MESSAGE AS IS               K0995000
         MVC   1(3,R15),=C'IND'    SET 'IND ' MODE IN MESSAGE           K0995500
         LA    R15,4(,R15)         PT TO END OF MESSAGE                 K0996000
COFJMAF5 DS    0H                  COMPUTE MESSAGE LENGTH               K0996500
         LA    R14,COFJOB          PT TO MSG BEGINNING                  K0997000
         SLR   R15,R14             COMPUTE NEW LENGTH                   K0997500
         STC   R15,COFLNGTH        SAVE IT                              K0998500
         LR    R15,R0              GET GOOD RETURN REGISTER             K1000500
         BR    R15                 AND RETURN                           K1001000
         SPACE 1                                                        K1001500
COFJMAFF TM    JQEFLAG2,*-*        **** EXECUTE ONLY ****               K1002000
         DROP  R14                 DROP QSE ADDRESSABILITY              K1002500
         EJECT                                                      R41 K1002800
*********************************************************************** K1002900
*        SEND MESSAGE FOR JOB ACTIVITY                                * K1003000
*********************************************************************** K1003100
         SPACE 1                                                        K1003500
COFJWTO  DS    0H                  CREATE MESSAGE OUTPUT                K1004000
         ST    R14,COMFWORK        SAVE R14                             K1004500
         STM   R1,WA,COMWREGS      SAVE REGISTERS                       K1005000
         SLR   WA,WA               CLEAR INSERT REGISTER                K1005500
         IC    WA,COFLNGTH         GET MESSAGE LENGTH                   K1006500
COFAGAIN CH    WA,=H'70'           CHECK FOR EXCESSION OF MAX LENGTH    K1008500
         BNH   COFJFINI            NO--OUTPUT ONE MESSAGE               K1009000
         LA    R0,COFJOB+69        PT TO LAST POSSIBLE CHAR IN LINE     K1009500
         LA    R1,COFJOB-1(WA)     SET ADDRESS OF TOTAL MSG             K1010000
COFCKLN  CLR   R1,R0               TEST REULTANT LENGTH                 K1010500
         BNH   COFLNOK             OK TO SEND IF LESS                   K1011000
COFLESS  BCTR  WA,0                TOO BIG--REDUCE LENGTH               K1011500
         LA    R1,COFJOB-1(WA)     SET NEW END ADDRESS                  K1012000
         CLI   0(R1),C' '          CHECK FOR BLANK IN MESSAGE           K1012500
         BE    COFCKLN             IF YES--TEST LENGTH AGAIN            K1013000
         B     COFLESS             ELSE KEEP REDUCING LENGTH            K1013500
COFLNOK  DS    0H                  LENGTH NOW OK FOR 1 LINE MESSAGES    K1014000
         LR    R0,WA               SAVE NEW LENGTH                      K1014500
         IC    WA,COFLNGTH         PICK-UP ORIGINAL LENGTH              K1015500
         SLR   WA,R0               COMPUTE NEW LENGTH                   K1017500
         STM   R1,WA,COMDWORK      SAVE REGISTERS                       K1018000
         NI    COMMID+1,X'FE'      SET JOB IS SET                       K1018500
         $CWTO L=(R0)              SEND MESSGAE                         K1019000
         LM    R1,WA,COMDWORK      RESTORE REGISTERS                    K1019500
         MVI   COFJOB,C' '         SET BLANK INTO FIRST OF MESSAGE      K1020000
         MVC   COFJOB+1(COFQUE-COFJOB),COFJOB  BLANK REST               K1020500
         BCTR  WA,0                REDUCE NEW LENGTH FOR MOVE           K1021000
         EX    WA,COFMVMSG         MOVE MESSAGE DOWN                    K1021500
         LA    WA,1+COFQUE-COFJOB(,WA)  SET NEW MESSAGE LENGTH          K1022000
         STC   WA,COFLNGTH         SAVE NEW LENGTH                      K1023000
         B     COFAGAIN            GO OUTPUT REST OF MESSAGE            K1025000
         SPACE 5                                                    R41 K1025400
COFMVMSG MVC   COFJOB+(COFQUE-COFJOB)(*-*),1(R1) ** EXECUTE ONLY **     K1025500
         EJECT                                                      R41 K1026000
*********************************************************************** K1026200
*        OUTPUT LAST LINE OF MESSAGE                                  * K1026300
*********************************************************************** K1026400
COFJFINI DS    0H                  OUTPUT LAST LINE OF MESSAGE          K1026500
         LR    R0,WA               PUT LENGTH INTO R0                   K1027000
         LM    R1,WA,COMWREGS      RESTORE REGISTERS                    K1027500
         STM   R1,WA,COMDWORK      SAVE REGISTERS                       K1028000
         NI    COMMID+1,X'FE'      SET JOB ID IS SET                    K1028500
         $CWTO L=(R0)              OUTPUT MESSAGE                       K1029000
         LM    R1,WA,COMDWORK      RESTORE REGISTERS                    K1029500
         L     R14,COMFWORK        RESTORE R14                          K1030000
         BR    R14                 AND RETURN                           K1030500
         SPACE 4                                                        K1031000
COFDEVTB EQU   *                   LOCAL DEVICE LOOK-UP TABLE           K1031500
         DC    AL1(0),CL8'INTRDR'                                       K1032000
         DC    AL1(6),CL8'READER'                                       K1032500
COFPRDEV DC    AL1(7),CL8'PRINTER'                                   R4 K1033000
         DC    AL1(5),CL8'PUNCH'                                     R4 K1033500
COFDEVTL EQU   (*-COFDEVTB)/4      LENGTH OF EACH ELEMENT               K1034000
         SPACE 4                                                        K1034500
COFRMDVT EQU   *                   REMOTE DEVICE LOOK-UP TABLE          K1035000
         DC    CL2'**'             SPACER                            R4 K1038500
         DC    CL2'RD'                                                  K1039000
         DC    CL2'PR'                                                  K1039500
         DC    CL2'PU'                                                  K1040000
         SPACE 2                                                        K1040500
         DROP  R10                 RELEASE ROUTINE ADDRESSABILITY    R4 K1041000
.XIT     MEND                                                           K1041500
         EJECT                                                          K1042000
         MACRO -- $CFJSCAN -- SCAN JOB QUEUE                            K1042500
&NAME    $CFJSCAN &PROCESS=,&EMPTY=,&IGNORE=,&NEXT=,&QUEUE=,   @OZ29819CK1043000
               &STORE=YES                                      @OZ29819 K1043100
         LCLC  &R                                                    R4 K1043500
&R       SETC  '&SYSNDX'                                             R4 K1044000
        $CHEK  &PROCESS,&NEXT                                        R4 K1044500
*********************************************************************** K1045000
*        SCAN JOB QUEUE FOR SELECTED JOBS                             * K1045500
*********************************************************************** K1046000
         AIF   ('&NAME' EQ '').NONAME                                R4 K1046500
&NAME    DS    0H                                                    R4 K1047000
.NONAME  AIF   ('&EMPTY' EQ '' OR '&IGNORE' EQ '').NOCHEKA           R4 K1047500
         MVI   PCEBASE2,0          SET NO JOB(S) FOUND INDICATOR     R4 K1048000
.NOCHEKA AIF   ('&QUEUE' EQ '').NOQUEUE                        @OZ29819 K1048100
         $DECOD1 &QUEUE,,LA,R15    GET QUEUE TYPE IN R15       @OZ29819 K1048200
         L     R1,=V($QINDEX)      GET ADDR OF JOB QUEUE INDEX @OZ29819 K1048300
         IC    R15,0(R1,R15)       GET OFFSET OF QUEUE HEAD    @OZ29819 K1048400
         AGO   .NOSTOR1                                        @OZ29819 K1048500
.NOQUEUE LA    R15,$JQTYPES*2      NO. OF JOB QUEUES (TIMES 2) @OZ29819 K1048600
         AIF   ('&STORE' NE 'YES').NOSTOR1                           R4 K1049000
CJS&R.A  STH   R15,COMJQHDS        SAVE JOB QUEUE HEADER INDEX       R4 K1049500
         LA    R1,$JQHEADS-2-QUECHAIN(R15)  POINT TO NEXT JOB QUEUE  R4 K1050000
         AGO   .NEXT1                                                R4 K1050500
.NOSTOR1 ANOP                                                        R4 K1051000
CJS&R.A  LA    R1,$JQHEADS-2-QUECHAIN(R15)  POINT TO NEXT JOB QUEUE  R4 K1051500
.NEXT1   AIF   ('&EMPTY' EQ '' OR '&IGNORE' EQ '').NOCHEKB           R4 K1052000
         B     CJS&R.B             BR TO BEGIN QUEUE SCAN            R4 K1052500
&NEXT    MVI   PCEBASE2,128        SET JOB FOUND INDICATOR           R4 K1053000
CJS&R.B  L     BASE2,PCEBASE2      SET JOB FOUND FLAG IN REGISTER    R4 K1053500
&IGNORE  LH    R1,JQECHAIN         GET OFFSET OF NEXT JQE            R4 K1054000
         AGO   .NEXT2                                                R4 K1054500
.NOCHEKB ANOP                                                        R4 K1055000
&NEXT    LH    R1,JQECHAIN         GET OFFSET OF NEXT JQE            R4 K1055500
.NEXT2   N     R1,=A(X'0000FFFF')  INSURE OFFSET POSITIVE            R4 K1056000
         BZ    CJS&R.C             BR IF END OF QUEUE                R4 K1056500
         SLL   R1,2                GET TRUE                          R4 K1057000
         AL    R1,$JOBQPTR          JQE ADDRESS                      R4 K1057500
         B     &PROCESS              AND ENTER PROCESS ROUTINE       R4 K1058000
         AIF   ('&QUEUE' EQ '').NEXT3                          @OZ29819 K1058100
CJS&R.C  DS    0H                                              @OZ29819 K1058200
         AGO   .END                                            @OZ29819 K1058300
.NEXT3   AIF   ('&STORE' NE 'YES').NOSTOR2                     @OZ29819 K1058500
CJS&R.C  LH    R15,COMJQHDS        GET CURRENT JOB QUEUE HDR INDEX   R4 K1059000
         BCTR  R15,0               REDUCE OFFSET BY 1                R4 K1059500
         AGO   .LOOP                                                 R4 K1060000
.NOSTOR2 ANOP                                                        R4 K1060500
CJS&R.C  BCTR  R15,0               REDUCE OFFSET BY 1                R4 K1061000
.LOOP    BCT   R15,CJS&R.A         BR IF ANOTHER JOB QUEUE           R4 K1061500
.END     AIF   ('&EMPTY' EQ '' OR '&IGNORE' EQ '').XIT         @OZ29819 K1062000
         LTR   BASE2,BASE2         TEST FOR ANY JOB(S) FOUND         R4 K1062500
         BP    &EMPTY              BR IF NO                          R4 K1063000
.XIT     MEND                                                        R4 K1063500
         EJECT                                                       R4 K1064000
         MACRO -- $CFSEL -- SELECT A ROUTINE BASED ON CHARACTER         K1064500
&NAME    $CFSEL &A0,&A1,&A2,&A3,&A4,&A5,&A6,&A7,&A8,&A9,&AA,&AB,&AC,   CK1065000
               &AD,&AE,&AF,                                            CK1065500
               &OPERAND=(R1),&TYPE=CALL,&INFO=NO                        K1066000
         GBLC  &DOC                                                     K1066500
         LCLA  &A                                                       K1067000
         LCLC  &C,&R                                                    K1067500
&A       SETA  3                   SET MAX ARG TO PREVENT BAL           K1068000
&C       SETC  '&OPERAND'          MVC X,OPERAND                        K1068500
         AIF   ('&OPERAND'(1,1) NE '(').A                               K1069000
&C       SETC  '0&OPERAND'         MVC X,0(OPERAND)                     K1069500
.A       ANOP                                                           K1070000
&R       SETC  '&SYSNDX'                                                K1070500
         AIF   ('&INFO' EQ '' AND '&DOC' EQ 'NO' OR '&INFO' EQ 'NO').Z  K1071000
         AIF   ('&TYPE' EQ 'RES').NOJECT                                K1071500
         EJECT                                                          K1072000
.NOJECT  SPACE 2                                                        K1072500
*********************************************************************** K1073000
*                                                                     * K1073500
*        COFSEL -- SELECT A ROUTINE BASED ON KEY INPUT CHARACTER      * K1074000
*                                                                     * K1074500
*        ROUTINE MATCHES THE DESIGNATED INPUT CHARACTER AGAINST       * K1075000
*        THE LIST OF ARGUMENTS PROVIDED AND TRANSFERS CONTROL TO      * K1075500
*        THE ROUTINE DESIGNATED BY THE CORRESPONDING ADDRESS.         * K1076000
*        NO $WAITS ARE ISSUED.                                        * K1076500
*                                                                     * K1077000
* REGISTERS USED                                                      * K1077500
*        R1    = ADDRESS OF INPUT CHARACTER                           * K1078000
*        LINK  = RETURN ( USED IF NO MATCH FOUND )                    * K1078500
*        R15   = WORK REGISTER                                        * K1079000
*                                                                     * K1079500
* NOTES                                                               * K1080000
*        SEVERAL METHODS OF SELECTION ARE USED BASED UPON THE         * K1080500
*        LENGTH OF THE ARGUMENT LIST.                                 * K1081000
*        THE SELECTED ROUTINE MUST BE LOCATEABLE VIA AN S TYPE        * K1081500
*        CONSTANT.                                                    * K1082000
*                                                                     * K1082500
*********************************************************************** K1083000
.Z       ANOP                                                           K1083500
&NAME    NULL                                                           K1084000
         AIF   ('&TYPE' NE 'CALL').INL                                  K1084500
.B       AIF   (N'&SYSLIST LE &A).SHORT                                 K1085000
         CNOP  0,4                 INSURE ALINGMENT                     K1085500
         BAL   R15,COF&R.T         PICK UP TABLE FOR SELECTION          K1086000
&A       SETA  0                                                        K1086500
.C       AIF   (&A GE N'&SYSLIST).D                                     K1087000
&A       SETA  &A+1                                                     K1087500
         DC    CL1'&SYSLIST(&A,1)',AL3(&SYSLIST(&A,2))                  K1088000
         AGO   .C                                                       K1088500
.D       DC    X'FF'               END OF SELECT TABLE                  K1089000
COF&R.T  BAL   LINK,COFSEL         SELECT ROUTINE                       K1089500
         MEXIT                                                          K1090000
.INL     ANOP                                                           K1090500
COF&R.T  CLC   0(1,R15),&C         SEARCH TABLE LOOKING FOR             K1091000
         BNE   *+10                EQUAL OPERANDS                       K1091500
         L     LINK,0(,R15)        WHEN FOUND INSERT ADDRESS            K1092000
         BR    LINK                INTO LINK AND EXIT TO SUB-RTN        K1092500
         LA    R15,4(,R15)         ELSE STEP THROUGH TABLE              K1093000
         BL    COF&R.T             LOOP WHILE STILL IN TABLE            K1093500
         BR    LINK                ELSE RETURN IN ERROR                 K1094000
         MEXIT                                                          K1094500
.SHORT   ANOP                                                           K1095000
&A       SETA  0                                                        K1095500
.H       AIF   (&A GE N'&SYSLIST).XIT                                   K1096000
&A       SETA  &A+1                                                     K1096500
         CLI   &C,C'&SYSLIST(&A,1)'  TEST CHARACTER                  R4 K1097000
         BE    &SYSLIST(&A,2)      BR IF MATCH                       R4 K1097500
         AGO   .H                                                       K1098000
.XIT     MEND                                                           K1098500
         EJECT                                                          K1099000
         MACRO -- $CFVQE -- VERIFY CONSOLE CONTROL OVER JOB             K1099500
&NAME    $CFVQE &JOBQE=(R1),&OK=(,B),&NOK=(,B),&TYPE=CALL,&INFO=NO      K1100000
         GBLC  &DOC                                                     K1100500
         LCLC  &OP1,&OP2                                                K1101000
         AIF   ('&INFO' EQ '' AND '&DOC' EQ 'NO' OR '&INFO' EQ 'NO').Z  K1101500
         AIF   ('&TYPE' EQ 'RES').NOJECT                                K1102000
         EJECT                                                          K1102500
.NOJECT  SPACE 2                                                        K1103000
*********************************************************************** K1103500
*                                                                     * K1104000
*        COFVQE -- VERIFY CONSOLE CONTROL OVER JOB                    * K1104500
*                                                                     * K1105000
*        ROUTINE TESTS FOR RESTRICTED CONSOLE AND, IF RESTRICTED      * K1105500
*        AND NEITHER PRINT OR PUNCH ROUTING IS TO THE RESTRICTED      * K1106000
*        UNIT RECORD GROUP, THE JOB IS 'NOT OK'.                      * K1106500
*        OTHERWISE THE JOB IS 'OK'.                                   * K1107000
*        NO $WAITS ARE ISSUED.                                        * K1107500
*                                                                     * K1108000
* REGISTERS USED                                                      * K1108500
*        R0    = WORK                                                 * K1109000
*        R1    = JOB QUEUE ELEMENT ADDRESS                            * K1109500
*        LINK  = RETURN                                               * K1110000
*        R15   = WORK                                                 * K1110500
*                                                                     * K1111000
* EXITS                                                               * K1111500
*        CC    = (E)  - JOB QUEUE ELEMENT OK                          * K1112000
*        CC    = (NE) - JOB QUEUE ELEMENT NOK                         * K1112500
*                                                                     * K1113000
*********************************************************************** K1113500
.Z       ANOP                                                           K1114000
         AIF   ('&TYPE' NE 'CALL').INLINE                               K1114500
         AIF   ('&OK(1)' NE '' OR 'NOK(1)' NE '').A                     K1115000
         MNOTE 12,'''NOT OK'' KEYWORD REQUIRED'                         K1115500
         MEXIT                                                          K1116000
.A       ANOP                                                           K1116500
&NAME    DS    0H                                                       K1117000
         $DECODE &JOBQE                                                 K1117500
         BAL   LINK,COFVQE         VERIFY JOB'S OWNERSHIP               K1118000
         AGO   .B                                                       K1118500
.INLINE  ANOP                                                           K1119000
&NAME    DS    0H                                                       K1119500
         TM    COMAUTH,CMBFLAGR    ENTRY CONSOLE ONLY RMT AUTHORIZED R4 K1120000
         BZR   LINK                NO--RETURN 'OK'--EQUAL               K1120500
         LH    R0,COMJROUT         PICK UP JOB ROUTE                 R4 K1121500
         ICM   R0,2,=H'0'          PURIFY REMOTE ID                  R4 K1125500
         BCTR  R0,0                LESS ONE FOR TRUE INDEX              K1126000
         MH    R0,=Y(RATTLE)       TIMES RAT SIZE FOR DISPLACEMENT      K1126500
         LR    R15,R0              FIND DESIRED                      R4 K1127000
         AL    R15,$RATABLE         RAT ELEMENT                      R4 K1127500
         LH    R0,RATROUTE-RATDSECT(,R15) GET RAT ROUTE CODE            K1128000
COFVQEK  CLI   JQETYPE,$INPUT      IS JOB ON READER...              R41 K1128500
         BE    *+10                BR IF YES (IGNORE PRT ROUTE)     R41 K1128600
         CH    R0,JQEPRTRT         CHECK IT WITH JOB'S PRT RT       R41 K1128700
         BER   LINK                EQUAL  'OK'                          K1129000
         CH    R0,JQEPUNRT         CHECK IT WITH JOB'S PUN RTE          K1129500
         BR    LINK                RETURN-- EQ='OK'  NE='NOK'           K1130000
         MEXIT                                                          K1134500
.B       ANOP                                                           K1135000
         AIF   ('&OK(1)' EQ '').C                                       K1135500
         AIF   ('&OK(2)' NE '').D                                       K1136000
         BE    &OK(1)              OWNERSHIP VERIFIED -- 'OK'           K1136500
         AGO   .C                                                       K1137000
.D       ANOP                                                           K1137500
&OP1     SETC  '&OK(2)'                                                 K1138000
&OP1     SETC  '&OP1'(1,1).'E'.'&OP1'(2,1)                              K1138500
         &OP1  &OK(1)              OWNERSHIP VERIFIED--'OK'             K1139000
.C       AIF   ('&NOK(1)' EQ '').XIT                                    K1139500
         AIF   ('&NOK(2)' EQ '').E                                      K1140000
&OP2     SETC  '&NOK(2)'                                                K1140500
&OP2     SETC  '&OP2'(1,1).'NE'.'&OP2'(2,1)                             K1141000
         &OP2  &NOK(1)             OWNERSHIP NOT VERIFIED--'NOK'        K1141500
         AGO   .XIT                                                     K1142000
.E       BNE   &NOK(1)             OWNERSHIP NOT VERIFIED--'NOK'        K1142500
         AIF   ('&OK(1)' EQ '').XIT                                  R4 K1143000
         B     &OK(1)              NO REMOTES--ALL CONSOLES VALID       K1143500
.XIT     MEND                                                           K1144000
         TITLE 'HASP COMMAND PROCESSOR'                                 K1144500
         SPACE 5                                                        K1145000
HASPCOMM START 0                   HASP COMMAND PROCESSOR               K1145500
         SPACE 5                                                        K1146000
*                                                                       K1146500
*                             EXTERNAL REFERENCES                       K1147000
*                                                                       K1147500
         SPACE 5                                                        K1148000
         ENTRY $JCANR              ADDRESS OF JOB CANCEL ROUTINE        K1148500
         ENTRY $COMMEND            ADDRESS OF END OF MAIN CSECT         K1149000
         SPACE 5                                                        K1149500
         COPY  $HASPGEN            COPY HASPGEN PARAMETERS              K1150000
         TITLE 'HASP CONTROL BLOCKS'                                    K1150500
         SPACE 5                                                        K1151000
HASPCOMM $ENTRY CSECT=YES,BASE=BASE2  PROVIDE PROCESSOR ENTRY POINT     K1151500
         SPACE 5                                                        K1152000
*                                                                       K1152500
*                             DOCUMENTATION OPTIONS FOR THIS ASSEMBLY   K1153000
*                                                                       K1153500
         SPACE 3                                                        K1154000
        $SYSPARM (OFF,GEN,NODATA,NO,NO)                                 K1154500
         SPACE 5                                                        K1155000
*                                                                       K1155500
*                             GENERATE HASP CONTROL BLOCKS              K1156000
*                                                                       K1156500
         SPACE 3                                                        K1157000
        $HASPCB DOC=&DOC,LIST=&LIST  GENERATE HASP CONTROL BLOCKS       K1157500
 TITLE 'HASP COMMAND PROCESSOR MAIN ENTRY POINT'                        K1158000
*********************************************************************** K1158400
*                                                                     * K1158500
*        H A S P C O M M   M A I N   E N T R Y   P O I N T            * K1159000
*                                                                     * K1159500
*********************************************************************** K1159600
         SPACE 2                                                        K1160000
         USING PCEDSECT,SAVE                                            K1160500
         USING HCTDSECT,BASE1                                           K1161000
         USING JQEDSECT,R1                                              K1161500
         SPACE 1                                               @OZ27300 K1161600
         TM    $COMMPCE,X'20'      ENTERED FOR CMD ABORT...    @OZ27300 K1161700
         BZ    CBEGIN              BR IF NO                    @OZ27300 K1161800
         NI    $COMMPCE,FF-X'20'   RESET CMD ABORT BIT         @OZ27300 K1161900
        $CRET  MSG='COMMAND PURGED--SHARED QUEUES UNAVAILABLE' @OZ27300 K1162000
         SPACE 1                                               @OZ27300 K1162100
CBEGIN   L     WA,$ACTABLE         GET ADDRESS OF ACT          @OZ27300 K1162200
         STCM  SAVE,7,ACTTQE+IPOST+1-ACTDSECT(WA) SET $POST PCE ADDRESS K1162500
         L     BASE3,=A(HASPCSY1)  PICK UP BASE FOR S INIT LOGIC        K1163000
         OI    COMMID+1,X'0F'      INDICATE JOB ID NOT SET           R4 K1163500
         CLI   $NUMPRTS,10         TEST PRINTER COUNT                R4 K1164000
         BL    CSIRETI-HASPCSY1(,BASE3)  BR IF LT 10                 R4 K1164500
         L     WB,=A(COFPRINT)     GET TABLE ENTRY ADDRESS           R4 K1165000
         MVI   3(WB),5             ADJUST TABLE ENTRY LENGTH VALUE   R4 K1165500
         MVC   9(2,WB),10(WB)      CHANGE 'PRINTER' TO 'PRINTR'     R41 K1166000
         L     WB,=A(COFPRDEV)     GET TABLE ENTRY ADDRESS           R4 K1166500
         MVI   0(WB),6             ADJUST TABLE LENGTH VALUE         R4 K1167000
         MVC   6(2,WB),7(WB)       CHANGE 'PRINTER' TO 'PRINTR'      R4 K1167500
         B     CSIRETI-HASPCSY1(,BASE3) ENTER S INIT SCAN               K1168000
         SPACE 2                                                    R41 K1168400
COBTABLE B     CONUL               NEXT COMMAND                         K1168500
CORETOK  B     COROK               REPLY OK ENTRY                       K1169000
CORETMSG LA    WA,CONEXT           SET RETURN TO GET NEXT CMB           K1169500
         SPACE 5                                                    R41 K1169700
*********************************************************************** K1169800
*                                                                     * K1169900
*        WRITE-TO-OPERATOR SUBROUTINE                                 * K1170000
*                                                                     * K1170100
*********************************************************************** K1170200
CWTO     LA    R1,2                SET COUNT ADJUSTMENT              R4 K1170300
         AR    R0,R1               UP COUNT                             K1170500
         $WTO  COMMID,(R0),MF=(EX,COMFLAG) SEND MESSAGE              R4 K1171000
         OI    COMMID+1,X'0F'      INDICATE JOB ID NOT SET           R4 K1171500
         BR    WA                  RETURN                               K1172000
         EJECT                                                      R41 K1172200
*********************************************************************** K1172300
*                                                                     * K1172400
*        WRITE-TO-OPERATOR (TRUNCATE MLWTO) SUBROUTINE                * K1172500
*                                                                     * K1172600
*********************************************************************** K1172700
CWTOT    TM    COMFLAG,CMBFLAGU    TEST FOR UCMID (OWN OR OTHER)     R4 K1172800
         BZ    CWTOTW              DO NORMAL $WTO                       K1173000
         CLI   COMUCMA,0           MLWTO                             R4 K1173500
         BZ    CWTOTW              DO NORMAL $WTO                       K1174000
         OI    COMLINET,X'10'      SET END LINE INDICATOR            R4 K1174500
         LTR   R0,R0               NULL LINE                            K1175000
         BNE   CWTOTM              SKIP NSI                             K1175500
         BCTR  R0,0                SET - 1                              K1176000
CWTOTM   LA    R1,2                SET COUNT ADJUSTMENT              R4 K1176500
         AR    R0,R1               UP COUNT                             K1177000
         $WTO  COMMID,(R0),MF=(EX,COMFLAG) SEND MESSAGE              R4 K1177500
CWTOTNM  OI    COMFLAG,CMBFLAGC    SET TYPE=SVC34 ON                 R4 K1178000
         OI    COMMID+1,X'0F'      INDICATE JOB ID NOT SET           R4 K1178500
         TM    COMFLAG,CMBFLAGU    IS THIS UCMID                     R4 K1179000
         BZR   WA                  RETURN IF NOT                     R4 K1179500
         MVI   COMLINET,0          FORCE NO LINE TYPE                R4 K1180000
         BR    WA                  RETURN                               K1180500
CWTOTW   LTR   R0,R0               TEST FOR MESSAGE                     K1181000
         BNZ   CWTOTM              SEND MESSAGE IF PRESENT              K1181500
         B     CWTOTNM             SKIP MESSAGE                         K1182000
         SPACE 5                                                    R41 K1182200
*********************************************************************** K1182300
*                                                                     * K1182400
*        SEND '$HASP000 OK' MESSAGE                                   * K1182500
*                                                                     * K1182600
*********************************************************************** K1182700
COROK    MVC   COMMAND(2),=C'OK'   SET OK MESSAGE                       K1182800
         LA    R0,2                SET LENGTH                           K1183000
         B     CORETMSG            SEND MESSAGE                         K1183500
         EJECT                                                      R41 K1183700
*********************************************************************** K1183800
*                                                                     * K1183900
*        NULL RETURN - BYPASS $WTO UNLESS UCMID AND END LINE          * K1184000
*                      INDICATOR SET                                  * K1184100
*                                                                     * K1184200
*********************************************************************** K1184300
CONUL    SLR   R0,R0               SET DUMMY                         R4 K1184400
         BCTR  R0,0                LENGTH - 1                        R4 K1184500
         TM    COMFLAG,CMBFLAGU    UCMID                             R4 K1185000
         BZ    CONEXT              NO MLWTO IF NOT                   R4 K1185500
         TM    COMLINET,X'10'      END LINE INDICATOR SET            R4 K1186000
         BNZ   CORETMSG            SEND NULL MESSAGE                    K1186500
*********************************************************************** K1186800
*                                                                     * K1186900
*        GET NEXT CMB                                                 * K1187000
*                                                                     * K1187100
*********************************************************************** K1187200
CONEXT   L     R1,$COMMQUE         PICK UP FIRST COMMAND IN QUEUE       K1187300
         LTR   R1,R1               TEST FOR EMPTY                       K1187500
         BNZ   COWORK              DO WORK IF NOT                       K1188000
         MVC   COMACEID,=CL8' '    BLANK OUT CURRENT ACE ID             K1188500
         L     WF,$SSVT            POINT TO SSVT                        K1189000
         USING SSVT,WF                                                  K1189500
         C     R1,$SVCOMMQ         CHECK FOR EMPTY                      K1190000
         BNZ   COSSQUE             IF NOT REMOVE CMBS                   K1190500
         L     WA,$ACTABLE         POINT TO AUTOMATIC COMMAND TABLE     K1191000
         L     WB,ACTACE-ACTDSECT(,WA) POINT TO POSSIBLE ACE            K1191500
         LTR   WB,WB               IS THERE ONE THERE                   K1192000
         BNZ   COMACE              ENTER AUTOMATIC SCHEDULER IF YES     K1192500
COMNOACE SLR   R1,R1               ZERO REG 1                           K1193000
         MVI   $SVCOMM,X'0'        SIGNAL WE NEED POSTING               K1193500
         C     R1,$SVCOMMQ         CHECK AGAIN                          K1194000
         BNZ   COSSQUE             IF NOT EMPTY BR                      K1194500
         TM    $COMMPCE,X'80'      TEST FOR SHUTDOWN WORK POST @OZ27300 K1194600
         BO    COSPJES2            BR IF YES                   @OZ27300 K1194700
         $WAIT WORK                WAIT FOR WORK                        K1195000
COSSQUE  L     R1,$SVCOMMQ         POINT TO WORK                        K1195500
         USING CMBDSECT,R1                                              K1196000
COSSQUEA LTR   R1,R1               TEST FOR ZERO                        K1196500
         BNZ   COSSDQUE            BR IF QUEUE NOT EMPTY       @OZ27300 K1196600
         SPACE 1                                               @OZ27300 K1196700
COSPJES2 NI    $COMMPCE,FF-X'80'   RESET SHUTDOWN WORK POST    @OZ27300 K1196800
         TM    $STATUS,$SYSEXIT    SHUTDOWN IN PROGRESS...     @OZ27300 K1196900
         BZ    CONEXT              BR IF NO                    @OZ27300 K1197000
         EJECT                                                 @OZ27300 K1197100
***************************************************************@OZ27300 K1197200
*                                                              @OZ27300 K1197300
*        JES2 SHUTDOWN IN PROGRESS -- RE-ENTER $PJES2 SUPPORT  @OZ27300 K1197400
*                                                              @OZ27300 K1197500
***************************************************************@OZ27300 K1197600
         SPACE 1                                               @OZ27300 K1197700
         LH    R1,=Y(CPJES2-HASPCSY1)  SET UP ENTRY            @OZ27300 K1197800
         L     BASE3,=A(HASPCSY1)       REGISTERS              @OZ27300 K1197900
         ALR   R1,BASE3                  AND RE-ENTER          @OZ27300 K1198000
         BR    BASE3                      $PJES2 SUPPORT       @OZ27300 K1198100
         SPACE 1                                               @OZ27300 K1198200
COSSDQUE SLR   R0,R0               ZERO END POINTER            @OZ27300 K1198300
         CS    R1,R0,$SVCOMMQ      REMOVE ALL CMBS FROM QUEUE  @OZ27300 K1198400
         BNZ   COSSQUEA            LOOP                                 K1198500
         L     WA,$COMMQUE         PICK UP OLD WORK POINTER             K1199000
COSSQUEL L     WB,CMBCMB           POINT TO NEXT                     R4 K1199500
         ST    WA,CMBCMB           SET NEW NEXT                      R4 K1200000
         LR    WA,R1               SWITCH POINTERS                      K1200500
         LTR   R1,WB               AND TEST FOR MORE                    K1201000
         BNZ   COSSQUEL            LOOP IF MORE                         K1201500
         ST    WA,$COMMQUE         SET WORK QUEUE                       K1202000
         B     CONEXT              BACK TO TOP                          K1202500
COWORK   MVC   $COMMQUE,CMBCMB     REMOVE FORM QUEUE                 R4 K1203000
         L     BASE3,=A(HASPCOME)  ADDRESS OF EDIT ROUTINE              K1203500
         BR    BASE3               GO TO EDIT PROCESSSOR                K1204000
         EJECT                                                      R41 K1204400
         DROP  R1                                                       K1204500
         DROP  WF                                                       K1205000
         USING JQEDSECT,R1         RESTORE JQE ADDRESSABILITY           K1205500
         SPACE 5                                                    R41 K1205600
*********************************************************************** K1205700
*                                                                     * K1205800
*        CORET - RETURN HERE FROM COMMAND PROCESSORS WITH R15 =       * K1205900
*                X'00' - NULL RETURN DESIRED (CONUL)                  * K1206000
*                X'04' - '$HASP000 OK' MESSAGE DESIRED (COROK)        * K1206100
*                X'08' - $WTO DESIRED - MSG IN 'COMMAND' (CORETMSG)   * K1206200
*                                                                     * K1206300
*********************************************************************** K1206400
CORET    TM    COMFLAG,CMBFLAGU    TEST FOR UCMID                    R4 K1206500
         BZ    COBTABLE(R15)       RETURN TO FUNCTION IF NO             K1206600
         CLI   COMUCMA,0           TEST FOR MLWTO                    R4 K1207000
         BZ    COBTABLE(R15)       RETURN TO FUNCTION IF NO             K1207500
         TM    COMFLAG,CMBFLAGC    THIS COMMAND PHASE                R4 K1208000
         BO    COBTABLE(R15)       RETURN TO FUNCTION IF YES         R4 K1208500
         OI    COMLINET,X'10'      SET END LINE INDICATOR            R4 K1209000
         B     COBTABLE(R15)       RETURN TO FUNCTION                   K1209500
         EJECT                                                          K1210000
         SPACE 3                                                        K1210500
*********************************************************************** K1211000
*                                                                     * K1211500
*        REDIRECTION VALUES FOR DISPLAY COMMANDS                      * K1212000
*                                                                     * K1212500
*********************************************************************** K1213000
$D7D     EQU   4                                                        K1213500
$DA      EQU   1                                                        K1214000
$DF      EQU   2                                                        K1214500
$DI      EQU   3                                                        K1215000
$DJ      EQU   4                                                        K1215500
$DN      EQU   5                                                        K1216000
$DO      EQU   6                                                        K1216500
$DQ      EQU   7                                                        K1217000
$DS      EQU   4                                                        K1217500
$DT      EQU   4                                                        K1218000
$DU      EQU   8                                                        K1218500
         EJECT                                                          K1219000
CDFJOT   EQU   $JOTABLE            JOB OUTPUT TABLE POINTER             K1219500
CPSEXIT  DC    V($HEXIT)           ENTRY TO EXIT ROUTINE                K1220000
COWTO    EQU   CWTO-COBTABLE       COMPUTE OFFSET TO $WTO ENTRY         K1220500
CORTNORM EQU   COBTABLE-COBTABLE   COMPUTE OFFSET TO NULL RETURN        K1221000
CORTOK   EQU   CORETOK-COBTABLE    COMPUTE OFFSET TO 'OK' REPLY         K1221500
CORTMSG  EQU   CORETMSG-COBTABLE   COMPUTE OFFSET TO MSG REPLY          K1222000
         TITLE 'HASP COMMAND PROCESSOR - ACE SERVICE ROUTINES'          K1222500
*********************************************************************** K1223000
*                                                                     * K1223500
*        ACE SCHEDULER                                                * K1224000
*                                                                     * K1224500
* INPUT REGISTERS -                                                   * K1225000
*                                                                     * K1225500
*        WA    = ACT ADDRESS                                          * K1226000
*        WB    = FIRST ACTIVE ACE ADDRESS                             * K1226500
*                                                                     * K1227000
*********************************************************************** K1227500
         USING ACTDSECT,WA                                              K1228000
         USING ACEDSECT,WB                                              K1228500
COMACE   DS    0H                                                       K1229000
*********************************************************************** K1229400
* TEST FOR OLD BASE TIME WANT ACTION                                  * K1229500
*********************************************************************** K1229600
         L     R0,ACTTIME          GET LAST RECORDED TIME (SEC)         K1230000
         C     R0,ACETIME          CHECK EXPIRED                        K1230500
         BNL   COMACEWK            DO WORK IF YES              @OZ27972 K1231000
*********************************************************************** K1231400
* TEST TIMER ACTIVE - GET NEW BASE TIME IF NOT                        * K1231500
*********************************************************************** K1231600
         TM    ACTTQE+IPOST,X'80'  TEST FOR TIMER EXPIRED               K1232000
         BZ    COMNOACE            WAIT FOR EXPIRE                      K1232500
         BAL   LINK,COMACETR       GET NEW TIME REFERENCE               K1233000
         B     COMACECN            IF CLOCK OUT DO $Z       +0          K1233500
*********************************************************************** K1233900
* TRY NEW BASE TIME                                                   * K1234000
*********************************************************************** K1234100
         L     WB,ACTACE           PICK UP ACE              +4          K1234500
         L     R0,ACTTIME          GET BASE TIME                        K1235000
         C     R0,ACETIME          CHECK FOR EXPIRED NOW                K1235500
         BNL   COMACEWK            DO WORK IF YES              @OZ27972 K1236000
         XC    ACTMDELT,ACTMDELT   ZERO MAXIMUM DELAY TIME              K1236500
         L     R1,ACETIME          PICK UP TIME OF ACE                  K1237000
         LNR   R0,R0               - CURRENT TIME                       K1237500
         AR    R0,R1               EXPIRE TIME - CURRENT TIME           K1238000
         C     R0,ACTMINTV         COMPARE WITH MAXIMUM                 K1238500
         BNH   COMACET             IF OK SET TIMER                      K1239000
         L     R0,ACTMINTV         SET MAXIMUM                          K1239500
COMACET  ST    R0,ACTTQE+ITIME     SET TIMER                            K1240000
         $STIMER ACTTQE            QUEUE IT                             K1240500
         B     COMNOACE            EXIT                                 K1241000
         EJECT                                                          K1241500
*********************************************************************** K1242000
*                                                                     * K1242500
*        SCHEDULE AUTOMATIC COMMAND                                   * K1243000
*                                                                     * K1243500
*********************************************************************** K1244000
COMACEWK $GETCMB NUMCMB=1,COUNT=1  GET A CMB AND COUNT ONE              K1244500
         BZ    COMACENC            DELAY IF NO CMB                      K1245000
         USING CMBDSECT,R1                                              K1245500
*********************************************************************** K1245900
* FILL IN CMB AND QUEUE IT                                            * K1246000
*********************************************************************** K1246100
         MVC   CMBFLAG(14),COMAMASK SET BASIC MASK                   R4 K1246500
         MVN   CMBFLAG,ACEFLAG     SET RESTRICTIONS                  R4 K1247000
         MVC   CMBFM,$SYSID        SET FROM SYSTEM IDENTIFICATION    R4 K1247500
         MVC   CMBUCM,ACECON       SET DEFAULT CONSOLE               R4 K1248000
         MVC   CMBMSG(L'ACETEXT),ACETEXT SET TEXT                    R4 K1248500
         ST    R1,$COMMQUE         SET INTO WORK QUEUE (CHAIN 0)        K1249000
         MVC   COMACEID,=CL8'ID=****' SET ACE ID IN PCE                 K1249500
         MVC   COMACEID+3(4),ACEID SET IDENTIFICATION                   K1250000
         MVC   ACTACE,ACEACE       REMOVE ACE FROM ACTIVE               K1250500
*********************************************************************** K1250900
* DISPOSE OF ACE                                                      * K1251000
*********************************************************************** K1251100
         SLR   R0,R0               ZERO R0 FOR INSERT                   K1251500
         ICM   R0,3,ACEINTV        PICK UP INTERVAL                     K1252000
         BZ    COMACEFR            IF NOT INTERVAL FREE IT              K1252500
         A     R0,ACTTIME          ADD BASE TIME                        K1253000
         LR    R1,WB               POINT TO ACE                         K1253500
         BAL   LINK,COMAADD        ADD TO ACTIVE QUEUE                  K1254000
         B     CONEXT              EXIT ( TIMER WILL BE SET )           K1254500
COMACEFR MVC   ACEACE,ACTACEF      PUT FREE QUEUE BEHIND                K1255000
         ST    WB,ACTACEF          SET FREE QUEUE                       K1255500
         B     CONEXT              EXIT                                 K1256000
         EJECT                                                      R41 K1256400
*********************************************************************** K1256500
*                                                                     * K1257000
*        OUT OF CMBS - ACT UPON DELAY                                 * K1257500
*                                                                     * K1258000
*********************************************************************** K1258500
COMACENC ICM   R0,15,ACTMDELT      CHECK DELAY ACTIVE                   K1259000
         BNZ   COMACEDC            IF ACTIVE CHECK EXCEEDED             K1259500
         L     R0,ACTMDELI         PICK UP DELAY INTERVAL               K1260000
         A     R0,ACTTIME          ADD CURRENT TIME                     K1260500
         ST    R0,ACTMDELT         SET TIME                             K1261000
COMACEWT LA    R0,10               SET 10 SECONDS                       K1261500
         TM    ACTTQE+IPOST,X'80'  TIMER EXPIRED                        K1262000
         BO    COMACET             SET TIMER                            K1262500
         B     COMNOACE            EXIT                                 K1263000
COMACEDC C     R0,ACTTIME          CHECK TOO LONG OF DELAY              K1263500
         BL    COMACEWT            CHECK TIMER IF NOT                   K1264000
COMACECN MVC   ACTACEZ,ACTACE      FORCE                                K1264500
         XC    ACTACE,ACTACE        $ZA                                 K1265000
         OI    ACTFLAG,ACTFLAGZ    SET FLAG                             K1265500
         XC    ACTMDELT,ACTMDELT   ZERO DELAY                           K1266000
         $WTO  COMACEM,COMACEML,JOB=NO, SEND DIAGNOSTIC                CK1266500
               ROUTE=$ALL,CLASS=$ALWAYS,PRI=$ST                         K1267000
         BAL   LINK,COMACEKT       KILL TIMER                           K1267500
         B     COMNOACE            EXIT                                 K1268000
         SPACE 5                                                    R41 K1268400
COMACEM  $MSG  002,'AUTOMATIC COMMANDS HALTED',SYMB=COMACEMT            K1268500
COMACEML EQU   *-COMACEM                                                K1269000
COMAMASK $WTO  ,L'ACETEXT,MF=LX,JOB=NO,TYPE=SVC34,UCM=YES,           R4CK1269500
               CLASS=$ALWAYS,PRI=$HI                                 R4 K1270000
         EJECT                                                          K1270500
*********************************************************************** K1271000
*                                                                     * K1271500
*        SUBROUTINE TO GET TIME OF DAY AND ADJUST BASES               * K1272000
*                                                                     * K1272500
* REGISTERS -                                                         * K1273000
*                                                                     * K1273500
*        R0    = WORK                                                 * K1274000
*        R1    = WORK                                                 * K1274500
*        WA    = ACT ADDRESS                                          * K1275000
*        WB    = WORK                                                 * K1275500
*        LINK  = RETURN (LINK+0= ERROR, LINK+4= OK)                   * K1276000
*        R15   = WORK                                                 * K1276500
*                                                                     * K1277000
*********************************************************************** K1277500
COMACETR ST    LINK,PCELINK        SAVE REGISTER 14                     K1278000
         TIME  MIC,ACTDTIME        GET OS TIME OF DAY                   K1278500
         L     LINK,PCELINK        PUT LINK BACK                        K1279000
         LTR   R15,R15             DID CLOCK GO OK                      K1279500
         BNZ   COMACENT            ERROR RETURN                         K1280000
         LM    R14,R15,ACTDTIME    GET TOTAL TIME                       K1280500
         SRDL  R14,32-20           ALIGN MICRO SECS IN RIGHT SIDE       K1281000
         D     R14,=F'1000000'     GET NUMBER OF SECONDS                K1281500
         LR    R0,R15              INTO R0                              K1282000
         L     LINK,PCELINK        PUT LINK BACK                        K1282500
         C     R0,ACTTIME          CHECK AGAINST PREVIOUS TIME          K1283000
         BL    COMACEND            IF LOW PROBABLY NEW DAY              K1283500
         C     R1,ACTDATE          CHECK BASE DATE                      K1284000
         BNE   COMACEND            CHECK NEXT DAY IF NOT SAME           K1284500
         ST    R0,ACTTIME          SET TIME                             K1285000
         B     4(0,LINK)           RETURN OK                            K1285500
COMACENT STM   R0,R1,ACTTIME+ACTDATE-ACTDATE SET TIME AND DATE          K1286000
         BR    LINK                RETURN ERROR                         K1286500
*********************************************************************** K1286900
* CALCULATE BINARY CENTURY DATE                                       * K1287000
*********************************************************************** K1287100
COMACEND L     R15,ACTDATEB        PICK UP DATE                         K1287500
         STM   R0,R1,ACTTIME+ACTDATE-ACTDATE SET NEW VALUES             K1288000
         XC    ACTDWORK,ACTDWORK   ZERO WORK                            K1288500
         LR    R0,R1               COPY R1                              K1289000
         SRL   R0,12               ALIGN YYX TO RIGHT                   K1289500
         ST    R0,ACTDWORK+4       RELYING ON OS                        K1290000
         OI    ACTDWORK+7,X'0F'     TO PROVIDE VALID DATA               K1290500
         CVB   LINK,ACTDWORK       CONVERT TO BINARY                    K1291000
         LA    R0,3(0,LINK)        COPY AND ADJUST FOR LEAP YEARS       K1291500
         MH    LINK,=H'365'        DAYS IN CENTURY OF NEW YEAR          K1292000
         SRL   R0,2                ACCOUNT FOR                          K1292500
         AR    LINK,R0             LEAP YEAR                            K1293000
         ST    R1,ACTDWORK+4       GET READY FOR DAY                    K1293500
         MVI   ACTDWORK+4+1,0      ZERO YY                              K1294000
         CVB   R1,ACTDWORK         PUT DAY IN                           K1294500
         AR    R1,LINK             GET CENTURY + 1                      K1295000
         BCTR  R1,0                CENTURY DAY                          K1295500
         L     LINK,PCELINK        RESTORE LINKAGE REGISTER             K1296000
*********************************************************************** K1296400
* SEE IF NEXT DAY                                                     * K1296500
*********************************************************************** K1296600
         XC    ACTMDELT,ACTMDELT   ZERO DELAY MAXIMUM                   K1297000
         ST    R1,ACTDATEB         SET NEW DAY                          K1297500
         BCTR  R1,0                BACK UP 1                            K1298000
         CR    R1,R15              ARE THEY THE SAME                    K1298500
         BNER  LINK                ERROR EXIT IF NOT                    K1299000
*********************************************************************** K1299400
* ADJUST ALL ELEMENTS BY 24 HOURS                                     * K1299500
*********************************************************************** K1299600
         L     R0,=A(60*60*24)     SET 24 HOURS                         K1300000
         ICM   WB,15,ACTACE        POINT TO FIRST ACE                   K1300500
         BNZ   COMACEAL            ADJUST IF NOT EMPTY                  K1301000
         ICM   WB,15,ACTACEZ       POINT TO FIRST HALTED ACE            K1301500
         BZ    4(0,LINK)           EXIT IF END                          K1302000
COMACEAL L     R1,ACETIME          PICK UP TIME                         K1302500
         SR    R1,R0               SUBTRACT 24 HOURS                    K1303000
         BNM   *+6                 SKIP IF NOT MINUS                    K1303500
         SLR   R1,R1               IF NEGATIVE SET TO ZERO              K1304000
         ST    R1,ACETIME          SET NEW TIME                         K1304500
         ICM   WB,15,ACEACE        POINT TO NEXT ACE                    K1305000
         BNZ   COMACEAL            LOOP                                 K1305500
         B     4(0,LINK)           EXIT                                 K1306000
         EJECT                                                          K1306500
*********************************************************************** K1307000
*                                                                     * K1307500
*        SUBROUTINE TO ADD AN ACE TO CHAIN                            * K1308000
*                                                                     * K1308500
* REGISTERS -                                                         * K1309000
*                                                                     * K1309500
*        R0    = TIME OF ACE                                          * K1310000
*        R1    = ACE ADDRESS                                          * K1310500
*        WA    = ACT ADDRESS                                          * K1311000
*        WB    = WORK                                                 * K1311500
*        LINK  = RETURN                                               * K1312000
*        R15   = WORK                                                 * K1312500
*                                                                     * K1313000
*********************************************************************** K1313500
COMAADD  LA    WB,ACTACE-(ACEACE-ACEDSECT) POINT TO HEAD OF CHAIN       K1314000
         TM    ACTFLAG,ACTFLAGZ    TEST FOR HALTED                      K1314500
         BZ    COMAADDL            BR IF NOT HALTED                     K1315000
         LA    WB,ACTACEZ-(ACEACE-ACEDSECT) POINT TO HEAD OF HALTED     K1315500
COMAADDL LR    R15,WB              COPY POINTER                         K1316000
         L     WB,ACEACE           POINT TO NEXT ACE                    K1316500
         LTR   WB,WB               CHECK FOR END                        K1317000
         BZ    COMAADDQ            QUEUE IT NOW IF YES                  K1317500
         C     R0,ACETIME          CHECK FOR TIME SEQUENCE              K1318000
         BNL   COMAADDL            LOOP                                 K1318500
COMAADDQ ST    R1,ACEACE-ACEDSECT(,R15) CHAIN TO PREVIOUS               K1319000
         ST    WB,ACEACE-ACEDSECT(,R1) PUT HIGHER TIMES BEHIND          K1319500
         ST    R0,ACETIME-ACEDSECT(,R1) SET TIME                        K1320000
         C     R1,ACTACE           IS THIS ONE FIRST                    K1320500
         BNER  LINK                RETURN                               K1321000
COMACEKT TM    ACTTQE+IPOST,X'80'  TEST TIMER ACTIVE                    K1321500
         BOR   LINK                RETURN                               K1322000
         LR    WB,LINK             SAVE LINK REGISTER                   K1322500
         $TTIMER ACTTQE,CANCEL     CANCEL TIMER                         K1323000
         OI    ACTTQE+IPOST,X'80'  SET EXPIRED                          K1323500
         LR    LINK,WB             RESTORE LINK                         K1324000
         BR    LINK                RETURN                               K1324500
         DROP  WA,WB                                                    K1325000
         USING JQEDSECT,R1                                              K1325500
         TITLE 'HASP COMMAND PROCESSOR - SERVICE ROUTINES'              K1326000
COFCVB  $CFCVB TYPE=RES,INFO=YES .                                      K1326500
         EJECT                                                          K1327000
COFCVE  $CFCVE TYPE=RES,INFO=YES .                                      K1327500
         EJECT                                                          K1328000
COFDCTL $CFDCTL TYPE=RES,INFO=YES .                                     K1328500
         EJECT                                                          K1329000
COFINVC $CFINVC TYPE=RES,INFO=YES .                                     K1329500
         EJECT                                                          K1330000
COFINVO $CFINVO TYPE=RES,INFO=YES .                                     K1330500
         EJECT                                                          K1331000
COFJDCT $CFJDCT TYPE=RES,INFO=YES,CONT=COFJDCTC                         K1331500
         EJECT                                                 @OZ40627 K1331600
*********************************************************************** K1331620
*                                                                     * K1331640
*        COFLIM - - CONVERT LIMITS TO BINARY                          * K1331660
*                                                                     * K1331680
* REGISTERS USED                                                      * K1331700
*                                                                     * K1331720
*        R0    = HIGH BOUND LIMIT                                     * K1331740
*        R1    = POINTER TO OPERAND                                   * K1331760
*        R3    = WORK REGISTER                                        * K1331780
*        R4    = ERROR EXIT                                           * K1331800
*        R14   = LINKAGE                                              * K1331820
*        R15   = LOW BOUND LIMIT                                      * K1331840
*                                                                     * K1331860
*********************************************************************** K1331880
         SPACE 1                                               @OZ40627 K1331900
COFLIM   BAL   R3,COFLNUM          SCAN LOWER LIMIT            @OZ40627 K1331940
         LR    R15,R0              SAVE LOWER LIMIT            @OZ40627 K1331960
         LA    R0,1                SET DEFAULT                 @OZ40627 K1331980
         LNR   R0,R0                 UPPER LIMIT               @OZ40627 K1332000
         CLI   1(R1),C'-'          UPPER LIMIT SPECIFIED ...   @OZ40627 K1332020
         BNE   COFLDLM             BR IF NO                    @OZ40627 K1332040
         LA    R1,1(,R1)           POINT AT '-'                @OZ40627 K1332060
         CLI   1(R1),C'*'          IS DEFAULT UPPER LIM SPECIFIED       K1332080
         BE    COFLDFLT            BRANCH IF YES               @OZ40627 K1332100
         BAL   R3,COFLNUM          SCAN UPPER LIMIT            @OZ40627 K1332120
         B     COFLDLM             BR TO CHECK FOR VALID DELIMITER      K1332130
         SPACE 1                                               @OZ40627 K1332140
COFLDFLT LA    R1,1(R1)            POINT AT '*'                @OZ40627 K1332160
COFLDLM  CLI   1(R1),C','          VALID DELIMITER ...         @OZ40627 K1332180
         BE    COFLLIM             BRANCH IF YES               @OZ40627 K1332200
         CLI   1(R1),C' '          VALID DELIMITER ...         @OZ40627 K1332220
         BNER  R4                  BRANCH IF NO                @OZ40627 K1332240
COFLLIM  CLR   R15,R0              LIMITS VALID ...            @OZ40627 K1332260
         BNLR  R4                  BR IF NO                    @OZ40627 K1332280
         BR    LINK                RETURN                      @OZ40627 K1332300
         SPACE 3                                               @OZ40627 K1332310
COFLNUM  SLR   R0,R0               CLEAR ACCUMULATOR           @OZ40627 K1332320
         ST    R0,$DOUBLE          CLEAR WORK AREA             @OZ40627 K1332330
         CLI   1(R1),C'0'          FIRST DIGIT NUMERIC (F0-FF) ...      K1332340
         BLR   R4                  ERROR IF NO                 @OZ40627 K1332350
         CLI   1(R1),C'9'          FIRST DIGIT NUMERIC (F0-FF) ...      K1332360
         BHR   R4                  ERROR IF NO                 @OZ40627 K1332370
COFLNLUP CL    R0,=F'214748365'    GREATER THAN FULL WORD ...  @OZ40627 K1332380
         BHR   R4                  BRANCH IF YES - ERROR       @OZ40627 K1332390
         MVN   $DOUBLE+1(1),1(R1)  GET A DIGIT                 @OZ40627 K1332400
         MH    R0,=H'10'           SHIFT CURRENT ACCUMULATOR   @OZ40627 K1332410
         AH    R0,$DOUBLE          ADD NEW DIGIT               @OZ40627 K1332420
         LTR   R0,R0               GREATER THAN FULL WORD ...  @OZ40627 K1332425
         BMR   R4                  BRANCH IF YES - ERROR       @OZ40627 K1332427
         LA    R1,1(,R1)           POINT TO NEXT DIGIT         @OZ40627 K1332430
         CLI   1(R1),C'0'          FIELD NUMERIC (F0-FF) ...   @OZ40627 K1332435
         BLR   R3                  RETURN IF NO                @OZ40627 K1332440
         CLI   1(R1),C'9'          FIELD NUMERIC (F0-FF) ...   @OZ40627 K1332445
         BHR   R3                  RETURN IF NO                @OZ40627 K1332450
         B     COFLNLUP            LOOP                        @OZ40627 K1332455
         EJECT                                                 @OZ40627 K1332460
*********************************************************************** K1332500
*                                                                     * K1333000
*        COFRTC -- CONVERT ROUTE CODE TO EBCDIC FOR DISPLAY           * K1333500
*                                                                     * K1334000
*        NO $WAITS ARE ISSUED.                                        * K1334500
*                                                                     * K1335000
* REGISTERS USED                                                      * K1335500
*                                                                     * K1336000
*        R0    = ADDRESS OF AREA TO PUT EBCDIC ANSWER, WORK           * K1336500
*        R1    = WORK (SAVED AND RESTORED)                            * K1337000
*        R14   = LINKAGE                                              * K1337500
*        R15   = ADDRESS OF ROUTE CODE FIELD                          * K1338000
*                                                                     * K1338500
* NOTES                                                               * K1339000
*                                                                     * K1339500
*        COMEWORK AND COMDWORK ARE USED BY THIS ROUTINE.              * K1340000
*                                                                     * K1340500
*********************************************************************** K1341000
COFRTC   DS    0H                                                    R4 K1341500
         ST    R1,COMEWORK         SAVE REGISTER                     R4 K1342000
         LR    R1,R0               POINT TO OUTPUT AREA              R4 K1342500
         MVC   0(10,R1),=CL10' R'  ASSUME ' RXXX     '               R4 K1343000
         SLR   R0,R0               ZERO REGISTER                     R4 K1343500
         ICM   R0,1,0(R15)         PICK UP BYTE 1                    R4 K1344500
         BNZ   COFRTCNR            SKIP NEXT IF NOT ZERO             R4 K1345000
         MVI   1(R1),C'U'          SET SPECIAL UNIT                  R4 K1349000
COFRTCNR ICM   R0,1,1(R15)         PICK UP REMOTE NUMBER             R4 K1349500
         BNZ   COFRTCNC            CONVERT WHAT WE HAVE              R4 K1350000
         MVC   1(5,R1),=C'LOCAL'   SET LOCAL                         R4 K1350500
COFRTCNX L     R1,COMEWORK         RESTORE REGISTER                  R4 K1353500
         BR    R14                 RETURN                            R4 K1354000
COFRTCNC CVD   R0,COMDWORK         CONVERT TO DECIMAL                R4 K1357500
         UNPK  2(3,R1),COMDWORK    CONVERT TO EBCDIC                 R4 K1358000
         OI    4(R1),C'0'          SET SIGN                          R4 K1358500
COFRTCNS CLI   2(R1),C'0'          IS HIGH BYTE ZERO                 R4 K1359000
         BNE   COFRTCNX            EXIT IF END                       R4 K1360000
         MVC   2(3,R1),3(R1)       SHIFT ONE                         R4 K1362000
         B     COFRTCNS            LOOP                              R4 K1362500
         EJECT                                                       R4 K1363000
*********************************************************************** K1363500
*                                                                     * K1364000
*        COFRTD -- CONVERT TO DEFAULT ROUTE RANGE                     * K1364500
*                                                                     * K1365000
* REGISTERS USED                                                      * K1365500
*                                                                     * K1366000
*        R0    = HIGH BOUND ANSWER                                    * K1366500
*        R1    = LOW BOUND ANSWER                                     * K1367000
*        R14   = LINKAGE                                              * K1367500
*        R15   = WORK                                                 * K1368000
*                                                                     * K1368500
*********************************************************************** K1369000
COFRTD   DS    0H                                                    R4 K1369500
         SLR   R1,R1               PICK UP DEFAULT                   R4 K1370000
         ICM   R1,3,COMJROUT       ROUTE CODE                        R4 K1370500
         LR    R0,R1               COPY                              R4 K1371000
         TM    COMFLAG,CMBFLAGW    THIS REMOTE WORKSTATION           R4 K1371500
         BO    COFRTDRW            LOOK AT REMOTE WORKSTATION IF YES R4 K1372000
         LA    R0,X'FF'(,R1)       SET HIGH RANGE                    R4 K1372500
         BR    R14                 RETURN                            R4 K1373000
COFRTDRW DS    0H                                                    R4 K1374000
         SLR   R1,R1               PICK UP                           R4 K1376500
         IC    R1,COMJRMT          REMOTE NUMBER                     R4 K1377000
         BCTR  R1,0                REDUCE BY ONE                     R4 K1377500
         MH    R1,=Y(RATTLE)       GET OFFSET                        R4 K1378000
         AL    R1,$RATABLE         POINT TO RAT ELEMENT              R4 K1378500
         IC    R0,RATROUTE+1-RATDSECT(,R1) PICK UP REMOTE ROUTING    R4 K1379000
         LR    R1,R0               COPY                              R4 K1379500
         BR    R14                 RETURN                            R4 K1380000
         EJECT                                                       R4 K1380500
*********************************************************************** K1381000
*                                                                     * K1381500
*        COFRTR -- CONVERT DESTINATION RANGES TO ROUTE RANGES         * K1382000
*                                                                     * K1382500
*        COFRTRA -- CONVERT ADJUSTED RANGES TO ROUTE RANGES           * K1383000
*                                                                     * K1383500
* REGISTERS USED                                                      * K1384000
*                                                                     * K1384500
*        R0    = HIGH BOUND ANSWER                                    * K1385000
*        WD    = POINTER TO OPERAND POINTER                           * K1385500
*        R1    = LOW BOUND ANSWER                                     * K1386000
*        R14   = LINKAGE                                              * K1386500
*        R15   = WORK                                                 * K1387000
*                                                                     * K1387500
*********************************************************************** K1388000
COFRTR   DS    0H                                                    R4 K1388500
         SLR   R0,R0               ZERO HIGH BOUND ANSWER            R4 K1389000
         STM   R0,R15,$CSAVREG     SAVE ALL REGISTERS                R4 K1389500
         LM    WE,WF,0(WD)         POINT TO FIRST                    R4 K1390000
         LA    WE,0(,WE)           PURIFY                            R4 K1390500
         B     COFRTRP             ENTER COMMON CODE                 R4 K1391000
COFRTRA  DS    0H                                                    R4 K1391500
         SLR   R0,R0               ZERO HIGH BOUND ANSWER            R4 K1392000
         STM   R0,R15,$CSAVREG     SAVE ALL REGISTERS                R4 K1392500
         LM    WE,WF,0(WD)         PICK UP POINTERS                  R4 K1393000
         LA    WE,2(,WE)           ADJUST FOR 'X='                   R4 K1393500
         B     COFRTRB             SKIP TO CONVERT RANGE       @OZ34683 K1393700
COFRTRP  CLI   0(WE),C'0'          THIS NUMERIC                      R4 K1394000
         BNL   COFRTRN             DO NUMERIC CONVERT IF YES         R4 K1394500
COFRTRB  LA    WF,0(,WF)           PURIFY                      @OZ34683 K1395000
         BCTR  WF,0                AND LAST                          R4 K1395500
COFRTRL  LR    R10,WF              COPY END + 1                      R4 K1396000
         BCTR  WF,0                POINT TO END CHARACTER            R4 K1396500
         LR    WD,WF               COPY END                          R4 K1397000
         SR    R10,WE              GET LENGTH                        R4 K1397500
         BNP   COFRTRE             ERROR EXIT IF NOT SOLID           R4 K1398000
COFRTRDL CLI   0(WF),C'-'          THIS DASH                         R4 K1398500
         BE    COFRTRD             CONVERT WHAT WE HAVE IF DASH      R4 K1399000
         BCTR  WF,0                REDUCE                            R4 K1399500
         BCT   R10,COFRTRDL        LOOP                              R4 K1400000
COFRTRD  LA    R1,1(,WF)           BACK TO FIRST CHARACTER           R4 K1400500
         MVC   COMDWORK,=CL8' '    SET BLANKS                        R4 K1401000
         SR    WD,R1               GET MACHINE LENGTH                R4 K1401500
         BM    COFRTRE             ERROR IF NOT SOLID                R4 K1402000
         CH    WD,=Y(8)            TOO LONG                          R4 K1402500
         BNL   COFRTRE             EXIT WITH ERROR IF TOO LONG       R4 K1403000
         EX    WD,COFRTRM          MOVE TEXT TO WORK                 R4 K1403500
         LA    R1,COMDWORK         POINT TO WORK AREA                R4 K1404000
         SLR   R2,R2               PICK UP                           R4 K1404500
         IC    R2,COMJSYS          DEFAULT BYTE 1                    R4 K1405500
         L     R11,$SSVT           POINT TO SSVT                     R4 K1407500
         L     R15,$SVDEST-SSVT(,R11) POINT TO CONVERT ROUTINE       R4 K1408000
         BALR  R14,R15             ENTER IT                          R4 K1408500
         B     COFRTREX            EXIT WITH ERROR          + 0      R4 K1409000
         L     R11,$SVHCT-SSVT(,R11) RESTORE BASE REGISTER  + 4      R4 K1409500
         ST    R2,$CSAVREG+(R1*4)  SET LOW BOUND                     R4 K1410000
         OC    $CSAVREG(4),$CSAVREG HAS HIGH BOUND BEEN SET          R4 K1410500
         BNZ   COFRTRX             EXIT IF END                       R4 K1411000
         ST    R2,$CSAVREG         SET HIGH BOUND                    R4 K1411500
         LTR   R10,R10             ANY MORE                          R4 K1412000
         BNZ   COFRTRL             LOOP IF MORE                      R4 K1412500
COFRTRX  LM    R0,R15,$CSAVREG     RESTORE REGISTERS                 R4 K1413000
         CR    R1,R0               IS LOW REALLY LOW                 R4 K1413500
         BNH   SKIP10              SKIP NEXT IF OK                   R4 K1414000
         LR    R1,R0               MAKE SAME AS HIGH                 R4 K1414500
         ST    R1,$CSAVREG+(R1*4)  SET FOR TESTING                   R4 K1415000
SKIP10   B     4(,R14)             RETURN                            R4 K1415500
COFRTREX L     R11,$SVHCT-SSVT(,R11) POINT TO HCT                    R4 K1416000
COFRTRE  LM    R0,R15,$CSAVREG     RESTORE REGISTERS                 R4 K1416500
         BR    R14                 RETURN                            R4 K1417000
COFRTRN  $CFCVB POINTER=(WD),NOK=COFRTRE CONVERT TO BINARY           R4 K1417500
         CH    R0,=Y(255)          TOO HIGH                          R4 K1418000
         BH    COFRTRE             ERROR EXIT                        R4 K1418500
         ICM   R0,2,$OWNSYS        SET HIGH ANSWER                   R4 K1419500
         ICM   R1,2,$OWNSYS        SET LOW ANSWER                    R4 K1420000
         LM    R2,R15,$CSAVREG+(R2*4) RESTORE REGISTERS              R4 K1422500
         B     4(,R14)             RETURN                            R4 K1423000
COFRTRM  MVC   COMDWORK(*-*),0(R1) MOVE TEXT TO WORK                 R4 K1423500
         EJECT                                                          K1424000
COFSEL  $CFSEL TYPE=RES,INFO=YES .                                      K1424500
         EJECT                                                          K1425000
COFVQE  $CFVQE TYPE=RES,INFO=YES .                                      K1425500
         EJECT                                                       R4 K1426000
         LTORG ,                                                        K1426500
         TITLE 'HASP COMMAND PROCESSOR -- DCT DISPLAY ROUTINE'       R4 K1427000
COFDCTD $CFDCTD  TYPE=RES,INFO=YES DCT DISPLAY ROUTINE               R4 K1427500
         EJECT                                                       R4 K1428000
         LTORG                                                       R4 K1428500
         TITLE 'HASP COMMAND PROCESSOR -- JOB INFORMATION MESSAGE ROUTICK1429000
               NE'                                                   R4 K1429500
COFJMSG  $CFJMSG TYPE=RES,INFO=YES                                   R4 K1430000
         EJECT                                                       R4 K1430500
         LTORG ,                                                     R4 K1431000
 TITLE 'HASP COMMAND PROCESSOR COMMAND EDIT ROUTINE'                    K1431500
*********************************************************************** K1432500
*                                                                     * K1433000
*        S E C O N D A R Y  C S E C T  F O R  C O M M  E D I T        * K1433500
*        A N D  A L L  V E R B  P R O C E S S O R S                   * K1434000
*                                                                     * K1434500
*********************************************************************** K1435000
         SPACE 1                                                        K1435500
HASPCOMA $ENTRY BASE=,CSECT=YES    PROVIDE PROCESSOR IDENTIFICATION     K1436000
         SPACE 2                                                        K1436500
HASPCOME NULL .                    START OF EDIT ROUTINE                K1440500
         USING *,BASE3             ADDRESSABILITY FOR EDIT ROUTINE      K1441000
         USING CMBDSECT,R1                                              K1441500
         MVC   COMAUTH,CMBFLAG     SET AUTHORITY FLAGS               R4 K1442000
*********************************************************************** K1442400
*                                                                     * K1442500
*        COPY CMB INTO COMM WORKAREA AND INITIALIZE WORK FIELDS       * K1442600
*                                                                     * K1442700
*********************************************************************** K1442800
         MVC   COMINCON,CMBUCM     COPY POSSIBLE INPUT UCMID         R4 K1442900
         MVC   COMFLAG(14),CMBFLAG COPY CMB INFORMATION              R4 K1443000
         MVI   COMML,0             ZERO THE LENGTH                   R4 K1443500
         NI    COMFLAG,255-CMBFLAGC-CMBFLAGR-CMBFLAGJ-CMBFLAGD-CMBFLAGS K1444000
         MVI   COMLEVEL,$ALWAYS+$HI FORCE LEVEL AND PRIORITY         R4 K1444500
         MVC   COMTO,CMBFM         RESPONSE GOES TO SENDING SYSTEM   R4 K1445000
         MVC   COMJSYS,CMBFMSYS    SET BYTE 1                        R4 K1446000
         TM    COMFLAG,CMBFLAGU    IS THIS UCM                       R4 K1448500
         BZ    SKIP20              SKIP LINE TYPE RESET              R4 K1449000
         MVI   COMLINET,0          RESET LINE TYPE FIELD             R4 K1449500
SKIP20   MVC   COMMID,COMMIDC      INSERT MESSAGE ID                    K1450000
         LA    WB,COMMAND          POINT TO RECEIVE AREA                K1451000
         MVI   0(WB),C' '          SET BLANK                            K1451500
         MVC   1(L'COMMAND-1,WB),0(WB) BLANK OUT AREA                   K1452000
         EJECT                                                      R41 K1459400
*********************************************************************** K1459500
*                                                                     * K1459600
*        INITIALIZE FOR EDIT SCAN                                     * K1459700
*                                                                     * K1459800
*********************************************************************** K1459900
         LA    WA,CMBMSG           POINT TO MESSAGE                     K1460000
         SLR   WC,WC               ZERO COUNTER                         K1460100
         IC    WC,CMBML            PICK UP LENGTH OF MESSAGE         R4 K1460500
         LA    WE,COMOPRND         SET POINTER TO                       K1461000
         ST    WE,COMPNTER         FIRST OPERAND                        K1461500
         LA    WD,COMPNTER+4       POINT TO SECOND OPERAND POINTER      K1462000
         LA    WE,(COMNULOP-COMPNTER)/4 SET MAXIMUM OPERANDS            K1462500
         LA    R0,1                CONSTANT FOR SPACE                   K1463000
         SLR   R15,R15             SET APOSTROPHE SWITCH OFF        R41 K1463500
         SLR   R10,R10             SET MULTIPLE COMMAND POINTER         K1464000
         STH   R10,COMLCCA         SET L=CCA INDICATORS                 K1464500
         ST    R10,COMNULOP        SET MAXIMUM NULL OPERAND          R4 K1465000
*********************************************************************** K1465500
*                                                                     * K1465600
*        CHECK FOR APOSTROPHE AND FLIP APOSTROPHE SWITCH (R15) IF     * K1465700
*        ONE FOUND (DON'T FLIP IF PAIR OF APOSTROPHES).  NOTE THAT    * K1465800
*        THE INSTRUCTION LABELED 'COSW' WILL RESULT IN A BRANCH TO:   * K1465900
*              COMVCOFF -- IF THE APOSTROPHE SWITCH (R15) IS OFF      * K1466000
*              COMVC    -- IF THE APOSTROPHE SWITCH IS ON             * K1466100
*                                                                     * K1466200
*********************************************************************** K1466300
COCOMLOP CLI   0(WA),C''''         DO WE HAVE AN APOSTROPHE             K1466400
         BNE   COSW                IF NOT SKIP SWITCH SETTING           K1466500
         CLI   1(WA),C''''         DO WE HAVE A PAIR                    K1467000
         BNE   COSWFLP             IF NOT FLIP SWITCH                   K1467500
         AR    WA,R0               ADD ONE SOURCE POINTER               K1468000
         BCT   WC,COMVC            MOVE SINGLE APOSTROPHE               K1468500
         AR    WC,R0               FORGET SECOND APOSTROPHI             K1469000
COSWFLP  X     R15,=A(COMVC-COMVCOFF) SET OR RESET APOSTROPHE SW        K1469500
COSW     B     COMVCOFF(R15)       BRANCH ACCORDING TO SWITCH       R41 K1470000
         EJECT                                                      R41 K1470400
*********************************************************************** K1470500
*                                                                     * K1471000
*        REMOVE BLANKS AND CHECK FOR MULTIPLE COMMANDS (SEMICOLON)    * K1471100
*                                                                     * K1471200
*********************************************************************** K1471300
COMVCOFF CLI   0(WA),C' '          DO WE HAVE BLANK                     K1471500
         BE    COCOMNXT            IF SO DO NOT MOVE                    K1472000
         CLI   0(WA),X'5E'         CHECK FOR MULTIPLE COMMANDS          K1472500
         BNE   COMNMUL             BR IF NOT MULTIPLE COMMAND           K1473000
         LTR   R10,R10             TEST FOR FIRST MULTIPLE              K1473500
         BNZ   COMULT              IF NOT TEST FOR PREVIOUS L=CCA       K1474000
         STC   WC,CMBML            SAVE FOR NEXT COMMAND SCAN        R4 K1474500
         BCT   WC,*+8              DECREMENT AND SKIP                   K1475000
         B     COFINMVC            IF NO MORE AFTER SEPARATOR FAKE END  K1475500
         BCTR  WC,0                GET MOVE COUNT                       K1476000
         EX    WC,COMULMV          MOVE COMMAND WITHIN CMB              K1476500
         LA    WA,CMBMSG+1         POINT TO FIRST OF NEXT COMMAND       K1477000
         ALR   WC,R0               UP TO ACTUAL COUNT                   K1477500
         LR    WE,R0               FORCE OPERAND COUNTING OFF           K1478000
         LR    R10,WB              COPY BREAK ADDRESS                   K1478500
         ALR   WB,R0               UP TO NEXT AVAILABLE SPACE           K1479000
         B     COCOMLOP            LOOP                                 K1479500
COMULT   CLC   1(2,R10),=C'L='     IS THIS L= OPERAND                   K1480000
         BE    COFINMVC            FAKE END                             K1480500
         SLR   WB,R10              GET LENGTH                           K1481000
         EX    WB,COMULBK          BLANK OUT COMMAND                    K1481500
         LNR   R1,R1               NEGATIVE CMB POINTER (REQUEUE SW)    K1482000
         LR    WF,WC               SAVE COUNT OF REMAINING INFORMATION  K1482500
         LA    WB,1(0,R10)         POINT TO NEXT AVAILABLE              K1483000
         B     COCOMNXT            LOOP                                 K1483500
*********************************************************************** K1483700
*        EXECUTED INSTRUCTIONS -- EXECUTE ONLY                        * K1483800
*********************************************************************** K1483900
COMULBK  MVC   1(*-*,R10),0(R10)   BLANK OUT COMMAND                    K1484000
COMULMV  MVC   CMBMSG+1(*-*),1(WA) MOVE ALL BUT COMMAND ID CHARACTER    K1484500
         SPACE 2                                                    R41 K1484800
*********************************************************************** K1484900
*                                                                     * K1485000
*        MOVE AND UPPER CASE CHARACTER                                * K1485100
*        UPDATE OPERAND POINTER TABLE IF COMMA                        * K1485200
*                                                                     * K1485300
*********************************************************************** K1485400
COMNMUL  DS    0H                                                       K1485500
         OC    0(1,WB),0(WA)       MOVE AND UPPER CASE THE CHARACTER    K1485600
         AR    WB,R0               ADD TO RECEIVER FIELD POINTER        K1486000
         CLI   0(WA),C','          WAS IT COMMA                         K1486500
         BNE   COCOMNXT            IF NOT GO TO NEXT CHARACTER          K1487000
         BCT   WE,COCOMMA          SET OPERAND POINTER                  K1487500
         AR    WE,R0               FORCE CONTINUOUS FALL THROUGH        K1488000
         B     COCOMNXT            GET NEXT CHARACTER                   K1488500
COCOMMA  ST    WB,0(0,WD)          SAVE OPERAND                         K1489000
         LA    WD,4(0,WD)          POINT TO NEXT AREA                   K1489500
         B     COCOMNXT            NEXT CHARACTER                       K1490000
         EJECT                                                      R41 K1490300
*********************************************************************** K1490400
*                                                                     * K1490500
*        COME HERE WHEN APOSTROPHE SWITCH (R15) IS ON TO MOVE AND     * K1490600
*        UPPER CASE ONLY                                              * K1490700
*                                                                     * K1490800
*        NOTE: TO MOVE WITHOUT UPPER CASING, CHANGE OC TO MVC         * K1490900
*                                                                     * K1491000
*********************************************************************** K1491100
COMVC    OC    0(1,WB),0(WA)       MOVE AND UPPER CASE                  K1491200
         AR    WB,R0               ADD TO RECEIVE FIELD POINTER         K1491500
         SPACE 2                                                    R41 K1491800
*********************************************************************** K1491900
*                                                                     * K1492000
*        CONTINUE EDIT SCAN WITH NEXT CHARACTER (IF ANY)              * K1492100
*                                                                     * K1492200
*********************************************************************** K1492300
COCOMNXT AR    WA,R0               ADD TO SOURCE FIELD POINTER          K1492400
         BCT   WC,COCOMLOP         LOOP                                 K1492500
         SPACE 2                                                    R41 K1492800
*********************************************************************** K1492900
*                                                                     * K1493000
*        COME HERE WHEN ENTIRE COMMAND SCANNED, OR WHEN GLOBAL        * K1493100
*        L=CCA OPERAND HAS BEEN FOUND                                 * K1493200
*                                                                     * K1493300
*********************************************************************** K1493400
COFINMVC ALR   WB,R0               POINT TO NULL LOCATION               K1493500
         LTR   R10,R10             DO WE HAVE MULTIPLE COMMANDS         K1493600
         BZ    COMCMBF             FREE CMB                             K1494000
         CLC   1(2,R10),=C'L='     IS THIS L=                           K1494500
         BNE   COMBKIT             BLANK IT IF NOT                      K1495000
         MVI   0(R10),C','         SATISFY L=CCA CONVERTER              K1495500
         LTR   R1,R1               TEST FOR REQUEUING                   K1496000
         BNM   COMCMBF             FREE IF ONLY ONE COMMAND             K1496500
         B     COMCMBRQ            REQUEUE CMB                          K1497000
COMBKIT  SLR   WB,R10              GET LAST COMMAND LENGTH + 2          K1497500
         BCTR  WB,0                GET + 1                              K1498000
         BCTR  WB,0                GET LENGTH                           K1498500
         EX    WB,COMULBK          BLANK OUT LAST COMMAND               K1499000
         LA    WB,1(0,R10)         POINT TO NEW NULL OPERAND            K1499500
         SLR   R10,R10             SET GLOBAL L=CCA NOT POSSIBLE        K1500000
         SLR   WF,WF               L=CCA NOT PRESENT                 R4 K1500500
         EJECT                                                      R41 K1500800
*********************************************************************** K1500900
*                                                                     * K1501000
*        COME HERE IF MULTIPLE COMMANDS IN CMB TO REQUEUE             * K1501100
*        ADJUSTED CMB TO WORK QUEUE                                   * K1501200
*                                                                     * K1501300
*********************************************************************** K1501400
COMCMBRQ LPR   R1,R1               MAKE POINTER POSITIVE                K1501500
COMCMBR  ST    R1,$COMMQUE         PUT CMB BACK ON LOCAL WORK QUEUE  R4 K1509500
*                                  OTHER CMBS STILL BEHIND CMB          K1510000
         B     COMSETNL            SET NULL POINTER                     K1510500
         SPACE 2                                                    R41 K1510800
*********************************************************************** K1510900
*        FREE CMB                                                     * K1511000
*********************************************************************** K1511100
COMCMBF  $FRECMB CMB=(R1),COUNT=YES FREE CMB AND UP COUNT               K1511200
         EJECT                                                      R41 K1511300
*********************************************************************** K1511400
*                                                                     * K1511500
*        SETUP FOR BXLE WD,WE,... OPERAND SCANS                       * K1511600
*                                                                     * K1511700
*********************************************************************** K1511800
COMSETNL ST    WB,0(0,WD)          SET NULL OPERAND POINTER          R4 K1511900
         LA    WE,4                COUNT                                K1512500
         SLR   WD,WE               POINT TO LAST VALID OPERAND       R4 K1513000
         LR    WF,WD               SET END FOR BXLE                  R4 K1513500
         LA    WD,COMPNTER         POINT TO FIRST OPERAND POINTER    R4 K1514000
*********************************************************************** K1514500
*                                                                     * K1514600
*        SCAN FOR L=CCA OPERAND IF COMMAND ENTERED LOCALLY            * K1514700
*        AT OS CONSOLE                                                * K1514800
*                                                                     * K1514900
*********************************************************************** K1515000
         TM    COMFLAG,CMBFLAGU    IS THIS UCM                       R4 K1515100
         BZ    COMNGLEQ            SKIP ADJUSTMENT IF NOT UCMID         K1515500
         LR    R14,WB              SAVE STARTING POINT FOR BLANK OUT    K1518500
COMLCCAL LA    R15,3               MAXIMUM CHARACTERS IN CCA            K1519000
         BCTR  WB,0                POINT TO                             K1519500
         BCTR  WB,0                 LAST SOLID CHARACTER                K1520000
         MVC   COMEWORK,COMLPTRN   SET X'F0F00000'                      K1520500
         CLI   0(WB),C'A'          IS THIS 'A' +                     R4 K1521000
         BL    COMLRSET            RESET IF NOT                      R4 K1521500
         CLI   0(WB),C'I'          IS THIS 'A' TO 'I'                R4 K1522000
         BNH   COMLSA              SET AREA IF YES                   R4 K1522500
         CLI   0(WB),C'J'          IS THIS 'J' +                     R4 K1523000
         BL    COMLRSET            RESET IF NOT                      R4 K1523500
         CLI   0(WB),C'R'          IS THIS 'J' TO 'R'                R4 K1524000
         BNH   COMLSA              SET AREA IF YES                   R4 K1524500
         CLI   0(WB),C'S'          IS THIS 'S' +                     R4 K1525000
         BL    COMLRSET            RESET IF NOT                      R4 K1525500
         CLI   0(WB),C'Z'          IS THIS 'S' TO 'Z'                R4 K1526000
         BH    COMLCC              TRY CONSOLE ID                    R4 K1526500
COMLSA   MVC   COMLAREA(1),0(WB)   COPY AREA                         R4 K1527000
         OI    COMLFLG,COMLFLGA    SET AREA IS SET                   R4 K1527500
COMLCCC  BCTR  WB,0                NEXT CHARACTER                       K1528000
COMLCC   BCT   R15,COMLC           REDUCE MAX CHARACTERS                K1528500
         B     COMLCK              CHECK FOR KEY WORD                   K1529000
         EJECT                                                      R41 K1529400
COMLC    MVC   COMLLO(1),COMLHI    SHIFT LOW DIGIT                      K1529500
         MVI   COMLHI,C'0'         SET HIGH DIGIT                       K1530000
         CLI   0(WB),C'0'          IS THIS '0' +                        K1530500
         BL    COMLCK              EXIT IF NOT                          K1531000
         CLI   0(WB),C'9'          IS THIS '0' TO '9'                   K1531500
         BH    COMLCK              EXIT IF NOT                          K1532000
         MVC   COMLHI(1),0(WB)     SET HIGH DIGIT                       K1532500
         OI    COMLFLG,COMLFLGC    SET CONSOLE FLAG                     K1533000
         B     COMLCCC             CHECK CONSOLE DIGIT                  K1533500
COMLCK   BCTR  WB,0                POINT TO WHAT SHOULD BE              K1534000
         BCTR  WB,0                 ',L='                               K1534500
         CLC   COMLCLEQ,0(WB)      CHECK FOR ',L='                      K1535000
         BNE   COMLRSET            IF NOT RESET ANY FLAGS               K1535500
         PACK  COMDWORK,COMLHI(2)  CONVERT CONSOLE                      K1536000
         CVB   R0,COMDWORK          TO BINARY                           K1536500
         LTR   R0,R0               CHECK RESULT                         K1537000
         BNZ   COMLCKH             CHECK HIGH BOUND                  R4 K1537500
         NI    COMLFLG,255-COMLFLGC TURN OFF CONSOLE FLAG            R4 K1538000
         OI    COMLFLG,COMLFLGA    SET AREA IS SET                   R4 K1538500
         B     COMLSARA            OVERIDE GLOBAL IF THIS LOCAL      R4 K1539000
COMLCKH  CH    R0,COMCONNO         CHECK FOR TOO HIGH                R4 K1539500
         BH    COMLRSET            IF HIGH RESET FLAGS                  K1540000
         STC   R0,COMUCM           SET UCM                           R4 K1540500
COMLSARA MVI   COMLCCA+1,0         FORCE GLOBAL OFF                     K1541000
COMLBLNK MVI   0(R14),C' '         SET BLANK                            K1541500
         BCTR  R14,0                UNTIL                               K1542000
         CR    R14,WB               PARAMETER                           K1542500
         BNL   COMLBLNK             GONE                                K1543000
         LA    WB,1(0,WB)          POINT TO NEW NULL                    K1543500
         ST    WB,4(0,WF)          SET NEW NULL OPERAND              R4 K1544000
         C     WB,0(0,WF)          SAME AS LAST                      R4 K1544500
         BNE   *+6                 SKIP NSI IF NOT                      K1545000
         SLR   WF,WE               REDUCE NUMBER OF OPERANDS         R4 K1545500
         B     COMNLEQ             SKIP NSI                             K1546000
COMLRSET MVC   COMEWORK,COMLPTRN   RESET WITH PATTERN                   K1546500
COMNLEQ  LTR   R10,R10             MULTIPLE L=CCA POSSIBLE              K1547000
         BZ    COMERGE             MERGE FLAGS IF NOT                   K1547500
         MVC   COMLCCA,COMLFLG     SAVE FLAGS AND AREA                  K1548000
         SLR   R10,R10             ZERO INDICATOR                       K1548500
         B     COMLCCAL            LOOK FOR LOCAL L=CCA                 K1549000
COMERGE  OC    COMLFLG(L'COMLCCA),COMLCCA MERGE FLAGS FOR L=CCA         K1549500
         MVC   COMUCMA,COMLAREA    SET AREA                          R4 K1550000
*********************************************************************** K1550400
*        END OF L=CCA SCAN                                            * K1550500
*********************************************************************** K1550600
COMNGLEQ DS    0H                                                    R4 K1550700
         EJECT                                                      R41 K1597900
*********************************************************************** K1598000
*                                                                     * K1598100
*        LOCATE COMMAND IN HASP COMMAND TABLE                         * K1598200
*                                                                     * K1598300
*********************************************************************** K1598400
COMLOC   DS    0H                  LOCATE SUBCOMMAND PROCESSOR       R4 K1598500
         MVI   COMJRMT,0           ASSUME LOCAL                      R4 K1599000
         TM    COMFLAG,CMBFLAGW    THIS WORKSTATION                  R4 K1599500
         BZ    COMLOOK             SKIP REMOTE SETTING               R4 K1600000
         MVC   COMJRMT,COMRMT      COMPLETE JOB ROUTING FIELD        R4 K1600500
COMLOOK  LA    WC,COMFASTR         POINT TO FAST LOOKUP TABLE        R4 K1608500
         LA    WA,4                SET INCREMENT FOR TABLE SCAN      R4 K1609000
         LA    WB,COMFSTND         SET COMPORAND FOR TABLE SCAN         K1609500
         CLC   0(1,WC),COMVERB     CHECK FOR HIT IN TABLE               K1610000
         BH    COMBAD              IF TABLE HIGHER -- ERROR             K1610500
         BE    *+12                IF EQUAL -- GO GET PROCESSOR         K1611000
         BXLE  WC,WA,*-14          ELSE LOOP THROUGH TABLE              K1611500
         B     COMBAD              IF NOT FOUND -- ERROR                K1612000
         L     WC,0(,WC)           GET MAIN TABLE ADDRESS               K1612500
         LA    WC,0(,WC)           CLEAR HIGH-ORDER BYTE                K1613000
         LA    WA,COMTEL           SET INCREMENT TABLE LENGTH           K1613500
         LA    WB,COMTABE          SET COMPORAND FOR TABLE SCAN         K1614000
COMSRL   CLC   COMTVB(1,WC),COMVERB  CHECK FOR VERB IN RANGE            K1614500
         BH    COMBAD              HIGHER IS ERROR                      K1615000
         CLC   COMTVB+1(1,WC),COMVERB+1 LOOK AT SECOND CHARACTER        K1615500
         BE    COMFND              EXIT IF FOUND                        K1616000
         CLI   COMTVB+1(WC),X'FF'  IS IT THE LAST ENTRY FOR COMMAND     K1616500
         BE    COMFND              EXIT IF FOUND                        K1617000
COMSRC   BXLE  WC,WA,COMSRL        LOOP                                 K1617500
         EJECT                                                      R41 K1617900
*********************************************************************** K1618000
*                                                                     * K1618100
*        COME HERE IF COMMAND NOT IN TABLE                            * K1618200
*                                                                     * K1618300
*********************************************************************** K1618400
COMBAD   TM    COMFLAG,CMBFLAGU    IS THIS UCM                       R4 K1618500
         BZ    COMBADA             DISPLAY ERROR IF NOT                 K1619000
         BAL   WB,COMVCCA          VERIFY CCA (NO RETURN IF BAD)        K1619500
         CLI   COMUCMA,0           MLWTO                             R4 K1620000
         BZ    COMBADA             DISPLAY ERROR IF YES                 K1620500
         MVI   COMLINET,X'80'      SET CONTROL LINE                  R4 K1621000
         $CWTO L=L'COMMAND         DISPLAY COMMAND                      K1621500
         MVI   COMLINET,X'20'      SET DATA LINE                     R4 K1622000
COMBADA  $CFINVC ,                 RESPOND                              K1622500
         SPACE 5                                                    R41 K1624900
*********************************************************************** K1625000
*                                                                     * K1625100
*        COMMAND FOUND IN TABLE -- CHECK CONSOLE AUTHORITY            * K1625200
*                                                                     * K1625300
*********************************************************************** K1625400
COMFND   IC    R1,COMTFL(,WC)      PICK UP RESTRICTION BITS             K1625500
         N     R1,=A(X'F')         PURIFY                      @OZ27300 K1625600
         EX    R1,COMTMI           TEST FOR AUTHORIZED CONSOLE @OZ27300 K1625700
         BNZ   COMBAD              BR IF UNAUTHORIZED CONSOLE  @OZ27300 K1625800
         SPACE 1                                               @OZ27300 K1625900
***************************************************************@OZ27300 K1626000
*                                                              @OZ27300 K1626100
*        ALLOW ONLY '$ESYS,RESET=...'  AND  '$PJES2...'        @OZ27300 K1626200
*                  DURING JES2 SHUTDOWN                        @OZ27300 K1626300
*                                                              @OZ27300 K1626400
***************************************************************@OZ27300 K1626500
         SPACE 1                                               @OZ27300 K1626600
         TM    $STATUS,$SYSEXIT    SHUTDOWN IN PROGRESS...     @OZ27300 K1626700
         BZ    COMTREDI            BR IF NO                    @OZ27300 K1626800
         CLC   =C'ESYS,RESET=',COMVERB  TEST COMMAND           @OZ27300 K1626900
         BE    COMTREDI            ALLOW $ESYS,RESET=          @OZ27300 K1627000
         CLC   =C'PJES2',COMVERB   TEST COMMAND                @OZ27300 K1627100
         BE    COMTREDI            ALLOW $PJES2                @OZ27300 K1627200
    $CRET  MSG='COMMAND REJECTED -- JES2 SHUTDOWN IN PROGRESS' @OZ27300 K1627300
         EJECT                                                      R41 K1627400
*********************************************************************** K1627500
*                                                                     * K1627600
*        CHECK FOR AUTOMATIC REDIRECTION OF RESPONSES                 * K1627700
*                                                                     * K1627800
*********************************************************************** K1627900
COMTREDI TM    COMFLAG,CMBFLAGU    IS THIS UCM...              @OZ27300 K1628000
         BZ    COMGOOD             IF NOT SKIP REDIRECTION              K1628500
         TM    COMLFLG,COMLFLGC    CONSOLE SET                       R4 K1629500
         BNZ   COMRPT              SKIP AUTOMATIC L=CCA              R4 K1631500
         SR    R1,R1               ZERO WORK                            K1632000
         IC    R1,COMTFL(0,WC)     PICK UP REDIRECT OFFSET              K1632500
         SRA   R1,4                ALIGN TO LOW HEX DIGIT               K1633000
         BZ    COMRPT              IF ZERO NO REDIRECTION               K1633500
         BCTR  R1,0                REDUCE BY 1                          K1634000
         AR    R1,R1               DOUBLE                               K1634500
         SR    WA,WA               ZERO WORK                            K1635000
         IC    WA,COMUCM           PICK UP CURRENT UCM               R4 K1635500
         CH    WA,COMCONNO         CHECK FOR TOO HIGH                   K1636000
         BH    COMRPT              FORGET AUTOMATIC IF TOO HIGH      R4 K1636500
         L     R14,COMEXTEN        POINT TO EXTENDED AREA               K1637000
         USING COMDSECT,R14                                             K1637500
         MH    WA,COMLCON          MULTIPLY BY LENGTH DIMENSION         K1638000
         AR    R1,WA               COMBINE OFFSETS                      K1638500
         LA    R1,COMRESP-COMCONL(R1) POINT TO ELEMENT                  K1639000
         MVC   COMUCM,COMCON(R1)   INSERT NEW CONSOLE ID             R4 K1639500
         TM    COMLFLG,COMLFLGA    HAS AREA BEEN SET                 R4 K1640000
         BO    COMRPT              SKIP AUTOMATIC IF YES             R4 K1640500
         MVC   COMUCMA,COMCONA(R1) SET NEW AREA                      R4 K1641000
         DROP  R14                                                      K1641500
COMRPT   BAL   WB,COMVCCA          VERIFY CCA (NO RETURN IF BAD)        K1642000
         CLI   COMUCMA,0           MLWTO                             R4 K1642500
         BZ    COMGOOD             SKIP IF NOT MLWTO                 R4 K1643000
         MVI   COMLINET,X'80'      SET CONTROL LINE                  R4 K1643500
         $CWTO L=L'COMMAND         DISPLAY COMMAND                      K1644000
         MVI   COMLINET,X'20'      SET DATA LINE                     R4 K1644500
         SPACE 3                                                    R41 K1644800
*********************************************************************** K1644900
*                                                                     * K1645000
*        SET UP COMMAND PROCESSOR BASE REGISTER, GET ADDRESS OF       * K1645100
*        COMMAND SUBPROCESSOR ------ GO TO PROCESS COMMAND            * K1645200
*                                                                     * K1645300
*********************************************************************** K1645400
COMGOOD  DS    0H                                                    R4 K1645500
         L     BASE3,0(,WC)        POINT TO GROUP PROCESSOR          R4 K1645600
         LH    R1,COMTOFF(,WC)     OFFSET WITHIN GROUP TO SUB-PROCESSOR K1646000
         ALR   R1,BASE3            COMPUTE ADDRESS OF SUB-PROCESSOR     K1646500
         BR    BASE3               GO TO IT                             K1647000
         EJECT                                                      R41 K1647300
*********************************************************************** K1647400
*                                                                     * K1647500
*        SUBROUTINE TO VERIFY CONSOLE/AREA                            * K1647600
*                                                                     * K1647700
*********************************************************************** K1647800
COMVCCA  DS    0H                                                    R4 K1648000
         L     WA,COMEXTEN         POINT TO EXTENDED WORK AREA       R4 K1650500
         USING COMDSECT,WA                                              K1651000
         MVC   XASCID(1),COMUCM    SET UCM                           R4 K1651500
         MVC   XASDID(1),COMUCMA   SET AREA                          R4 K1652000
         CLI   XASDID,0            ZERO AREA                         R4 K1652500
         BNZ   SKIP40              SKIP NSI                          R4 K1653000
         MVI   XASDID,C'Z'         FORCE AREA Z                      R4 K1653500
SKIP40   MVC   XAU(1),COMUCM       TELL OS SOURCE IS SAME AS OUTPUT  R4 K1654000
         MVI   XAN,X'22'           SET ID FOR VERIFIER                  K1654500
         MODESET EXTKEY=ZERO       GET KEY 0                            K1655000
         L     R15,COMVERIF        POINT TO OS VERIFICATION ROUTINE     K1655500
         BALR  R14,R15             ENTER IT                             K1656000
         MODESET EXTKEY=HASP       GET KEY 1                            K1656500
         CH    R15,=H'4'           CHECK FOR SERIOUS ERROR              K1657000
         BNHR  WB                  SKIP NEXT IF CONSOLE/AREA OK         K1657500
         SLR   R10,R10             ZERO WORK                         R4 K1658000
         ICM   R10,3,COMUCM+(COMUCMA-COMUCMA) PICK UP UCMID AND AREA R4 K1658500
         MVI   COMUCMA,0           FORCE NO MLWTO (NO PREVIOUS LINE) R4 K1659000
         CH    R15,=H'12'          IS CONSOLE DOWN                      K1659500
         BNE   *+16                DO NOT SET LOGICAL CONSOLE  @OZ29470 K1660000
         MVC   COMFLAG(4),COWTOL   DESTROY APPARENT SOURCE INFO      R4 K1660500
         MVC   COMOUT,COWTOL+(COMOUT-COMFLAG) OMITTING CONTROL FIELD R4 K1661000
         $CWTO L=L'COMMAND         DISPLAY COMMAND                      K1661500
         MVC   COMMAND(COMVINVL),COMVINV MOVE DIAGNOSTIC TEXT           K1662000
         STC   R10,COMVINVA        SET AREA                             K1662500
         SRL   R10,8               ALIGN CONSOLE ID                     K1663000
         $CFCVE VALUE=(R10)        CONVERT TO EBCDIC                    K1663500
         MVC   COMVINVC,COMDWORK+3 SET INTO TEXT                        K1664000
         MVC   COMMAND+COMVINVL(8),COMACEID MOVE IDENTIFIER             K1664500
         $CRET L=COMVINVL+8        EXIT                                 K1665000
         DROP  WA                                                       K1665500
         EJECT                                                      R41 K1665800
*********************************************************************** K1665900
*                                                                     * K1666000
*   C O M M A N D   E D I T   R O U T I N E   C O N S T A N T S       * K1666100
*                                                                     * K1666200
*********************************************************************** K1666300
COMTMI   TM    COMAUTH,*-*         *** EXECUTE ONLY ***              R4 K1668000
COWTOL   $WTO  PRI=$HI,CLASS=$ALWAYS,JOB=NO,ROUTE=X'C000',MF=LX      R4 K1668500
COMVINV  DC    C'RESPONSE LOCATION L=CCA UNAVAILABLE '                  K1669000
COMVINVL EQU   *-COMVINV                                                K1669500
COMVINVC EQU   COMMAND+COMVINVL-16,2                                    K1670000
COMVINVA EQU   COMVINVC+2,1                                             K1670500
COMLPTRN DC    C'00',X'0000'       WORK AREA PATTERN                    K1671000
COMLHI   EQU   COMEWORK            HIGH DIGIT OF CONSOLE 'CC'           K1671500
COMLLO   EQU   COMEWORK+1          LOW DIGIT OF CONSOLE 'CC'            K1672000
COMLFLG  EQU   COMEWORK+2          FLAG BYTE                            K1672500
COMLFLGC EQU   2                   CONSOLE HAS BEEN SPECIFIED           K1675000
COMLFLGA EQU   4                   AREA HAS BEEN SPECIFIED           R4 K1675500
COMLAREA EQU   COMEWORK+3          AREA SPECIFICATION                R4 K1676000
COMLCLEQ DC    C',L='              SPECIAL PARAMETER ID                 K1676500
COMMIDC  $MSG  000                 RESPONSE MESSAGE ID                  K1677000
         SPACE 2                                                        K1677500
         USING JQEDSECT,R1         USE R1 TO ADDRESS THE JQE            K1678000
         TITLE 'HASP COMMAND PROCESSOR - HASP COMMAND TABLE'            K1678500
COMTAB   DS    0F                                                       K1679000
COMTBLA  $COMTAB A7D,HASPCJB3,REJECT=COMJ  RELEASE JOB BY NAME          K1679500
         $COMTAB AA,HASPCJB1,REJECT=COMR+COMJ RELEASE ALL JOBS       R4 K1680000
         $COMTAB AJ,HASPCJB2,REJECT=COMJ RELEASE JOB(S)                 K1680500
         $COMTAB AQ,HASPCJB1,REJECT=COMR+COMJ RELEASE XEQ QUEUE      R4 K1681000
         $COMTAB AS,HASPCJB2,REJECT=COMJ RELEASE STC(S)                 K1681500
         $COMTAB AT,HASPCJB2,REJECT=COMJ RELEASE TSU(S)                 K1682000
COMTBLB  $COMTAB B,HASPCDV1,REJECT=COMD    BACKSPACE DEVICE             K1682500
COMTBLC  $COMTAB C7D,HASPCJB3,REJECT=COMJ  CANCEL JOB BY NAME           K1683000
         $COMTAB CA,HASPCAOC,REJECT=COMR+COMS CANCEL ACES            R4 K1683500
         $COMTAB CJ,HASPCJB2,REJECT=COMJ          CANCEL JOB            K1684000
         $COMTAB CS,HASPCJB2,REJECT=COMJ CANCEL STC(S)                  K1684500
         $COMTAB CT,HASPCJB2,REJECT=COMJ CANCEL TSU(S)                  K1685000
         $COMTAB C,HASPCDV1,REJECT=COMD           CANCEL DEVICE ACTVY.  K1685500
COMTBLD  $COMTAB D7D,HASPCJB3,REDIR=$D7D DISPLAY JOB BY NAME            K1686000
         $COMTAB DA,HASPCJB1,REDIR=$DA  DISPLAY ACTIVE JOBS             K1686500
         $COMTAB DF,HASPCJ1A,REDIR=$DF  DISPLAY FORMS QUEUE    @OZ29819 K1687000
         $COMTAB DI,HASPCSY1,REDIR=$DI  DISPLAY INITIATOR(S)            K1687500
         $COMTAB DJ,HASPCJB2,REDIR=$DJ  DISPLAY JOB                     K1688000
         $COMTAB DM,HASPCRM1       DISPLAY MESSAGE                      K1688500
         $COMTAB DN,HASPCJB1,REDIR=$DN  DISPLAY INFO. ON Q'D JOBS       K1689000
         $COMTAB DO,HASPCMS1,REDIR=$DO  DISPLAY OPERATOR REQUESTS       K1689500
         $COMTAB DQ,HASPCJB1,REDIR=$DQ  DISPLAY NUMBER OF Q'D JOBS      K1690000
         $COMTAB DS,HASPCJB2,REDIR=$DS DISPLAY STC(S)                   K1690500
         $COMTAB DT,HASPCJB2,REDIR=$DT DISPLAY TSU(S)                   K1691000
         $COMTAB DU,HASPCMS1,REDIR=$DU  DISPLAY UNITS                   K1691500
COMTBLE  $COMTAB E7D,HASPCJB3,REJECT=COMR+COMJ+COMS  RESTART JOB     R4 K1692000
         $COMTAB EJ,HASPCJB2,REJECT=COMR+COMJ+COMS RESTART JOB       R4 K1692500
         $COMTAB ES,HASPCSY1,REJECT=COMR+COMS RESTART SYSTEM         R4 K1693000
         $COMTAB E,HASPCDV1,REJECT=COMD           RESTART DEVICE        K1693500
COMTBLF  $COMTAB F,HASPCDV1,REJECT=COMD    FORWARD-SPACE DEVICE         K1694000
COMTBLH  $COMTAB H7D,HASPCJB3,REJECT=COMJ  HOLD JOB BY NAME             K1698000
         $COMTAB HA,HASPCJB1,REJECT=COMR+COMJ HOLD ALL JOBS          R4 K1698500
         $COMTAB HJ,HASPCJB2,REJECT=COMJ          HOLD JOB              K1699000
         $COMTAB HQ,HASPCJB1,REJECT=COMR+COMJ HOLD EXECUTION QUEUE   R4 K1699500
         $COMTAB HS,HASPCJB2,REJECT=COMJ HOLD STC(S)                    K1700000
         $COMTAB HT,HASPCJB2,REJECT=COMJ HOLD TSU(S)                    K1700500
COMTBLI  $COMTAB I,HASPCDV1,REJECT=COMD    INTERRUPT DEVICE             K1701000
COMTBLL  $COMTAB L7D,HASPCJB3              LIST JOB OUTPUT BY NM        K1701500
         $COMTAB LJ,HASPCJB2       LIST A JOB'S OUTPUT                  K1702000
         $COMTAB LS,HASPCJB2       LIST A STC'S OUTPUT                  K1702500
         $COMTAB LT,HASPCJB2       LIST A STC'S OUTPUT                  K1703000
COMTBLN  $COMTAB N,HASPCDV1,REJECT=COMD    REPEAT DEVICE ACTIVITY       K1703500
COMTBLO  $COMTAB O7D,HASPCJB3,REJECT=COMJ  OUTPUT BQES BY NAME          K1704000
         $COMTAB OJ,HASPCJB4,REJECT=COMJ  OUTPUT JOB'S HELD DS          K1704500
         $COMTAB OQ,HASPCJ1A,REJECT=COMR+COMJ OUTPUT BY CLASS        R4 K1705000
         $COMTAB OS,HASPCJB4,REJECT=COMJ  OUTPUT STC'S HELD DS          K1705500
         $COMTAB OT,HASPCJB4,REJECT=COMJ  OUTPUT TSU'S HELD DS          K1706000
COMTBLP  $COMTAB P40,HASPCSY1,REJECT=COMR+COMS STOP SYSTEM           R4 K1706500
         $COMTAB P7D,HASPCJB3,REJECT=COMJ  STOP JOB BY NAME          R4 K1707000
         $COMTAB PI,HASPCSY1,REJECT=COMR+COMS STOP INITIATOR         R4 K1707500
         $COMTAB PJ,HASPCJB2,REJECT=COMJ          STOP JOB              K1708000
         $COMTAB PQ,HASPCJ1A,REJECT=COMR+COMJ CANCEL BY OUTPUT CLASS R4 K1708500
         $COMTAB PS,HASPCJB2,REJECT=COMJ STOP STC(S)                    K1709000
         $COMTAB PT,HASPCJB2,REJECT=COMJ STOP TSU(S)                    K1709500
         $COMTAB P,HASPCDV1,REJECT=COMD           STOP (DRAIN) DEVICE   K1710000
COMTBLR  $COMTAB R,HASPCRM1,REJECT=COMJ    ROUTE JOB OUTPUT             K1710500
COMTBLS  $COMTAB S40,HASPCSY1,REJECT=COMR+COMS START SYSTEM          R4 K1711000
         $COMTAB SA,HASPCAOC,REJECT=COMR+COMS START ACES             R4 K1711500
         $COMTAB SI,HASPCSY1,REJECT=COMR+COMS START INITIATOR        R4 K1712000
         $COMTAB S,HASPCDV1,REJECT=COMD      START DEVICE               K1714000
COMTBLT  $COMTAB T7D,HASPCJB3,REJECT=COMR+COMJ SET JOB BY NAME       R4 K1714500
         $COMTAB TA,HASPCAOC,REJECT=COMR SET ACE                     R4 K1715000
         $COMTAB TC,HASPCSY3,REJECT=COMR SET CONSOLE LIST LEVEL      R4 K1715500
         $COMTAB TI,HASPCSY1,REJECT=COMR+COMS SET INITIATOR          R4 K1716000
         $COMTAB TJ,HASPCJ3A,REJECT=COMR+COMJ SET JOB NO. CLASS PRIO R4 K1716500
         $COMTAB TM,HASPCSY3,REJECT=COMR+COMS SET MESSAGE ROUTING    R4 K1717000
         $COMTAB TO,HASPCSY3,REJECT=COMR SET OS CONSOLE              R4 K1719000
         $COMTAB TS,HASPCJ3A,REJECT=COMR+COMJ SET STC NO.            R4 K1719500
         $COMTAB TT,HASPCJ3A,REJECT=COMR+COMJ SET TSU NO.            R4 K1720000
         $COMTAB T,HASPCDV1,REJECT=COMD  SET DEVICE                     K1720500
COMTBLV  $COMTAB VS,HASPCSY1,REJECT=COMR+COMS SEND COMMAND TO VS     R4 K1721000
COMTBLZ  $COMTAB ZA,HASPCAOC,REJECT=COMR+COMS HALT ACES              R4 K1721500
         $COMTAB ZI,HASPCSY1,REJECT=COMR+COMS HALT INITIATOR         R4 K1722000
COMTBLZZ $COMTAB Z,HASPCDV1,REJECT=COMD  HALT DEVICE                    K1722500
COMTABE  EQU   COMTBLZZ                                                 K1723000
         EJECT                                                          K1723500
COMFASTR DS    0F                  FAST LOOK-UP TABLE FOR HASPCOMM      K1724000
         DC    C'A',AL3(COMTBLA)   ENTRY FOR 'A' VERBS                  K1724500
         DC    C'B',AL3(COMTBLB)   ENTRY FOR 'B' VERBS                  K1725000
         DC    C'C',AL3(COMTBLC)   ENTRY FOR 'C' VERBS                  K1725500
         DC    C'D',AL3(COMTBLD)   ENTRY FOR 'D' VERBS                  K1726000
         DC    C'E',AL3(COMTBLE)   ENTRY FOR 'E' VERBS                  K1726500
         DC    C'F',AL3(COMTBLF)   ENTRY FOR 'F' VERBS                  K1727000
         DC    C'H',AL3(COMTBLH)   ENTRY FOR 'H' VERBS                  K1729000
         DC    C'I',AL3(COMTBLI)   ENTRY FOR 'I' VERBS                  K1729500
         DC    C'L',AL3(COMTBLL)   ENTRY FOR 'L' VERBS                  K1730000
         DC    C'N',AL3(COMTBLN)   ENTRY FOR 'N' VERBS                  K1730500
         DC    C'O',AL3(COMTBLO)   ENTRY FOR 'O' VERBS                  K1731000
         DC    C'P',AL3(COMTBLP)   ENTRY FOR 'P' VERBS                  K1731500
         DC    C'R',AL3(COMTBLR)   ENTRY FOR 'R' VERBS                  K1732000
         DC    C'S',AL3(COMTBLS)   ENTRY FOR 'S' VERBS                  K1732500
         DC    C'T',AL3(COMTBLT)   ENTRY FOR 'T' VERBS                  K1733000
         DC    C'V',AL3(COMTBLV)   ENTRY FOR 'V' VERBS                  K1733500
COMFSTND DC    C'Z',AL3(COMTBLZ)   ENTRY FOR 'Z' VERBS                  K1734000
         EJECT                                                          K1734500
*                                                                       K1735000
*        SYMBOLS TO DEFINE COMMAND TABLE ELEMENT FIELDS                 K1735500
*                                                                       K1736000
COMTEL   EQU   8                   LENGTH OF EACH COMTAB ELEMENT        K1736500
COMTOFF  EQU   COMTEL-4            LOCATION OF ENTRY OFFSET             K1737000
COMTFL   EQU   COMTEL-8            LOCATION OF FLAGS WITHIN ELEMENT     K1737500
COMTVB   EQU   COMTEL-2            LOCATION OF VERB WITHIN GROUP        K1738000
COMR     EQU   CMBFLAGR            LEVEL OF RESTRICTION FOR REMOTES  R4 K1738500
COMS     EQU   DCTREJSY            REJECT UNLESS SYSTEM AUTHORIZATION   K1739000
COMD     EQU   DCTREJDV            REJECT UNLESS DEVICE AUTHORIZATION   K1739500
COMJ     EQU   DCTREJJB            REJECT UNLESS JOB AUTHORIZATION      K1740000
COMJDS   EQU   COMJ+COMD+COMS      COMBINATION                          K1740500
         SPACE 2                                                        K1741000
         LTORG ,                                                        K1741500
 TITLE 'HASP COMMAND PROCESSOR KNOWN COMMANDS'                          K1742000
*********************************************************************** K1742500
*                                                                     * K1743000
*        COMMAND SUB-PROCESSOR CONVENTIONS                            * K1743500
*                                                                     * K1744000
* CONTENTS OF REGISTERS UPON ENTRY TO EACH COMMAND SUB-PROCESSOR      * K1744500
*                                                                     * K1745000
*        R0    = UNPREDICTABLE                                        * K1745500
*        R1    = SUB-PROCESSOR ENTRY POINT                            * K1746000
*        WA    = UNPREDICTABLE                                        * K1746500
*        WB    = UNPREDICTABLE                                        * K1747000
*        WC    = UNPREDICTABLE                                        * K1747500
*        WD    = FIRST OPERAND POINTER                                * K1748000
*        WE    = COUNT OF 4                                           * K1748500
*        WF    = LAST OPERAND POINTER ( SET FOR BXLE WD,WE,... )      * K1749000
*        WG    = BASE FOR COMMAND SUB-PROCESSOR                       * K1749500
*        BASE1 = HCTDSECT                                             * K1750000
*        BASE2 = BEGINNING OF MAIN COMMAND PROCESSOR                  * K1750500
*        SAVE  = PCE OF COMMAND PROCESSOR                             * K1751000
*        LINK  = UNPREDICTABLE                                        * K1751500
*        R15   = UNPREDICTABLE                                        * K1752000
*                                                                     * K1752500
* EXAMPLE EDIT OF COMMAND TEXT BEFORE ENTRY TO SUB-COMMAND PROCESSOR  * K1753000
*                                                                     * K1753500
* ORIGIONAL IN $WTO BUFFER  ( S OVER CHARACTER = LOWER CASE )         * K1754000
*                                                                     * K1754500
*         S  S S S    S S S    S    S    S                            * K1755000
*        $V  A B C, ' A B,C '' D ', D '' E                            * K1755500
*                                                                     * K1756000
* FORM PASSED TO COMMAND SUB-PROCESSOR                                * K1756500
*                                                                     * K1757000
*                                                                     * K1757500
*        $VABC,' A B,C ' D ',D'E                                      * K1758000
*          1   2             3   4                                    * K1758500
*                                                                     * K1759000
*        $ IS LOCATED AT COMMAND                                      * K1759500
*                                                                     * K1760000
*        V IS SINGLE CHARACTER FORM OF VERB                           * K1760500
*                                                                     * K1761000
*        WD POINTS TO FIRST OF OPERAND POINTER TABLE WHICH, IN THIS   * K1761500
*        EXAMPLE, CONTAINS FOUR WORDS OF ADDRESSES WHICH IN TURN      * K1762000
*        LOCATES THE BEGINNING OF EACH OPERAND ( INCLUDING A NULL     * K1762500
*        END OPERAND ). THESE LOCATIONS ARE DENOTED BY REFERANCE      * K1763000
*        POINTS 1, 2, 3, AND 4 RESPECTIVELY. USING BXLE WD,WE,...     * K1763500
*        INSTRUCTION WILL FALL THROUGH WITH WD POINTING TO COMNULOP   * K1764000
*                                                                     * K1764500
*********************************************************************** K1765000
 TITLE 'HASP COMMAND PROCESSOR HASPCJB1 - JOB QUEUE COMMANDS'           K1765500
HASPCJB1 $COMGRUP AA,AQ,DA,DN,DQ,HA,HQ  JOB QUEUE COMMANDS     @OZ29819 K1766000
*********************************************************************** K1766500
*                                                                     * K1767000
*        $A A -- RELEASE ALL JOBS IN JOB QUEUE HELD BY $H A           * K1767500
*        $H A -- HOLD ALL JOB(S) IN THE JOB QUEUE                     * K1768000
*                                                                     * K1768500
*        OPERANDS                                                     * K1769000
*        SID...SID = JOB(S) BELONGING TO INDICATED SYSTEMS ARE TO     * K1769500
*              BE HELD/RELEASED                                       * K1770000
*        ALL   = ALL JOB(S) ARE TO HELD/RELEASED                      * K1770500
*        NO OPERAND ONLY JOBS WITH AFFINITY TO ENETRING SYSTEM ARE    * K1771000
*              TO BE HELD/RELEASED                                    * K1771500
*                                                                     * K1772000
*                                                                     * K1772500
*********************************************************************** K1773000
CAA      DS    0H                  RELEASE ALL JOBS IN QUEUE            K1773500
CHA      DS    0H                  HOLD ALL JOBS IN THE QUEUE           K1774000
         MVI   COMNULOP,0          SET NO SID AFFINITY                  K1774500
CAASCAN  BXH   WD,WE,CAAEND        SCAN FOR SID OPERNADS                K1775000
         L     R1,0(,WD)           POINT TO 1ST OPERAND                 K1775500
         CLC   0(3,R1),=C'ALL'     CHECK FOR WHOLE QUEUE OPERATION      K1776000
         BNE   *+14                NO--LOOK FOR SPECIFIC SID            K1776500
         MVC   COMNULOP(L'QUESYSAF),=AL1(QUESYSAF) YES FLAG 'ALL'       K1777000
         B     CAAEND              EXIT OPERAND SCAN LOOP               K1777500
         L     R14,$QSE1           NO -- POINT TO ALL QSES           R4 K1778000
*                                    THIS CARD DELETED BY APAR @OZ27300 K1778500
         USING QSEDSECT,R14        ADDRESSABILITY                       K1779000
*                                    THIS CARD DELETED BY APAR @OZ27300 K1779500
CAASILOP CLC   QSESID,0(R1)        DOES SID MATCH OPERAND      @OZ27300 K1780000
         BE    CAASIFND            YES--FLAG SID FOUND                  K1780500
         TM    QSEFLAGS,QSELAST    NO--SCAN ALL SID'S                   K1781000
         LA    R14,QSELEN(,R14)    BUMP TO NEXT QSE            @OZ27300 K1781100
         BZ    CAASILOP            BR IF NOT LAST QSE                R4 K1781500
        $CFINVO OPERAND=(R1)       IF NOT FOUND, INVALID OPRAND     R41 K1782000
CAASIFND DS    0H                  SID MATCHES OPERAND                  K1782500
         MVC   COMNULOP(L'QSESIAFF),QSESIAFF SET AFFINITY FLAG          K1783000
         DROP  R14                 DROP QSE ADDRESSABILITY              K1783500
CAAEND   DS    0H                  END OF OPERAND SCAN                  K1784000
         CLI   COMNULOP,0          TEST FOR ANY SID'S FOUND             K1784500
         BNE   CAAOPXIT            YES--DON'T SET DEFAULT AFF FLAG      K1785000
         MVC   COMNULOP(L'$SIDAFF),$SIDAFF NO--SET DEFAULT AFF FLAG     K1785500
CAAOPXIT DS    0H                  EXIT OPERAND FUNCTION                K1786000
         SPACE 2                                                        K1786500
         $QSUSE  ,                 ENQUEUE ON SHARED RESOURCE           K1787000
         SPACE 1                                                        K1787500
         $CFJSCAN PROCESS=CAAPRO,EMPTY=CAANONE,NEXT=CAANXT,            CK1788000
               IGNORE=CAAIGN       SCAN JOB QUEUE                       K1788500
         $POST $HASPECF,(JOB,JOT)  POST FOR JOB AND JOT                 K1795000
         OI    $AQSE,QSEPJOB+QSEPJOT   CAUSE X SYSTEM POST(S)           K1795500
         $CRET MSG=OK              AND RETURN                           K1796000
CAANONE  DS    0H                  NO JOBS FOUND                        K1796500
         CLI   COMVERB,C'H'        TEST FOR HOLD OPERATION           R4 K1797000
         MVC   COMMAND(12),=C'NO JOBS HELD' ASSUME TXT FOR NONE HELD R4 K1797500
         BNE   CAAREL              NO--RELEASE OPERATION                K1798000
         LA    R0,12               SET DEFAULT MESSAGE LENGTH           K1798500
         B     CHAAMSG             SEND DIAGNOSTIC                      K1799000
CAAREL   DS    0H                  RELEASE OPERATION                    K1799500
         MVC   COMMAND+8(8),=C'RELEASED'  SET 'RELEASED'                K1800000
         LA    R0,16               SET MESSAGE LENGTH                   K1800500
CHAAMSG  DS    0H                  SEND DIAGNOSTIC                      K1801000
         $CRET L=(R0)              DITTO                                K1801500
CAAPRO   DS    0H                  JOB--FOUND EXAMINE SUCH              K1802000
         IC    R15,COMNULOP        GET SYS AFFINITY BITS                K1802500
         EX    R15,CHATEST         TEST FOR DESIRED AFFINITY            K1803000
         BZ    CAAIGN              NO--IGNORE THIS ENTRY                K1803500
         CLI   COMVERB,C'A'        IS THIS A RELEASE OPERATION          K1804000
         BE    CARREL              YES--TEST FOR SAME                   K1804500
         OI    JQEFLAGS,QUEHOLDA   NO--HOLD JOB WITH 'ALL' OPERAND      K1805000
         B     CAACKPT             AND CHECKPOINT CHANGED JOB           K1805500
CARREL   DS    0H                  RELEASE JOB                          K1806000
         TM    JQEFLAGS,QUEHOLDA   IS JOB HELD BY 'ALL'                 K1806500
         BZ    CAAIGN              NO--IGNORE IT                        K1807000
         TM    JQEFLAGS,QUEHOLD1   IS JOB HELD BY $HJ COMMAND           K1807500
         BO    CAAIGN              YES--IGNORE THIS ONE                 K1808000
         NI    JQEFLAGS,255-QUEHOLDA  ELSE RESET HOLD 'ALL' BIT         K1808500
CAACKPT  DS    0H                  CHECKPOINT CHANGED ELEMENT           K1809000
         $QCKPT (R1)               DO IT                                K1809500
         B     CAANXT              GET NEXT JOB                         K1810000
CHATEST  TM    JQEFLAG2,*-*        **** EXECUTE ONLY ****               K1810500
         EJECT                                                          K1811000
*********************************************************************** K1811500
*                                                                     * K1812000
*        $A Q,CLASSES -- RELEASE EXECUTION QUEUE                      * K1812500
*                                                                     * K1813000
*********************************************************************** K1813500
CAQ      DS    0H                                                       K1814000
*********************************************************************** K1814500
*                                                                     * K1815000
*        $H Q,CLASSES -- HOLD EXECUTION QUEUE                         * K1815500
*                                                                     * K1816000
*********************************************************************** K1816500
CHQ      NULL                      RTN TO 'HOLD', 'RELEASE' A CLAS      K1817000
         L     WA,$CATABLE         POINT TO THE HEAD OF THE CAT         K1817500
         LR    WB,WA               SAVE THE POINTER FOR LATER USE       K1818000
         BXLE  WD,WE,CHQLIST       CHECK FOR CLASS LIST SPECIFIED       K1818500
         LA    WA,CATEND-CATDSECT(,WA) POINT TO 1ST CLASS               K1819000
         LA    R0,C'9'-C'A'+1      SET NUMBER OF CLASSES TO SCAN        K1819500
CHQL     BAL   LINK,CHQSET         SET 'HOLD' OR 'RELEASE'              K1820000
         LA    WA,CATEND-CATDSECT(,WA) POINT TO NEXT CAT ELEM           K1820500
         B     CHQL                LOOP THROUGH CAT(HEAD TO TAIL)       K1821000
         SPACE 1                                                        K1821500
CHQLIST  NULL                      COME HERE TO HANDLE LIST             K1822000
         L     R1,0(,WD)           POINT TO BEGINNING OF OPERAND        K1822500
         L     R15,4(,WD)          POINT TO END OF OPERAND              K1823000
         BCTR  R15,0               REDUCE BY                            K1823500
         BCTR  R15,0               TWO FOR MACHINE LENGTH               K1824000
         SR    R15,R1              COMPUTE OPERAND MACHINE LENGTH       K1824500
         BM    CHQINVO             IF NEGATIVE,  ERROR                  K1825000
         LR    R0,R1               SAVE R1 OVER 'TRT'                   K1825500
         L     WA,=A(CVALIDTB)     POINT TO TEST TABLE               R4 K1826000
         EX    R15,CHQTEST         TEST CLASS STRING                    K1826500
         LR    R1,R0               RESTORE R1                           K1827000
         BNZ   CHQINVO             INVALID CHARACTERS  ERROR            K1827500
         LA    R0,1(,R15)          GET LENGTH OF STRING AGAIN           K1828000
CHQLL    SLR   WA,WA               CLEAR WORK REGISTER                  K1828500
         IC    WA,0(,R1)           INSERT CLASS INTO WORK               K1829000
CHQC     SL    WA,=A(X'C0')        GET ORDINAL PLACE IN CAT             K1829500
         SLL   WA,5                FIND CARDINAL PLACE IN CAT           K1830000
         ALR   WA,WB               ADD $CATABLE BASE                    K1830500
         TM    CATJOBFL-CATDSECT(WA),CATVALID TEST FOR VALID CLASS      K1831000
         BZ    CHQINVO             INVALID CLASS--ERROR                 K1831500
         BAL   LINK,CHQSET         GO SET 'HOLD' OR 'RELEASE'           K1832000
         LA    R1,1(,R1)           POINT TO NEXT CLASS IN STRING        K1832500
         B     CHQLL               LOOP THROUGH ENTIRE OPERAND          K1833000
CHQTEST  TRT   0(*-*,R1),0(WA)     *** EXECUTE ONLY ***              R4 K1833500
CHQSET   NULL                      COME HERE TO SET THE 'CAT'           K1834000
         CLI   COMVERB,C'H'        IS THIS A HOLD OPERATION             K1834500
         BE    CHQH                YES-HOLD CAT(NOT BY TAIL)            K1835000
         NI    CATJBOPT-CATDSECT(WA),255-CATQHELD FREE THE CAT          K1835500
         $POST $HASPECF,JOB        POST INITS' IF WAITING               K1836000
CHQA     BCTR  R0,LINK             RETURN IF CLASSES NOT EXHAUSTED      K1836500
*                                  CLASSES EXHAUSTED--GO BACK           K1837000
*                                  AND RESET TSU AND STC CLASSES        K1837500
*                                  THAT WERE SET BY ALL TYPE            K1838000
         SPACE 1                                                        K1838500
         NI    CATJBOPT-CATDSECT+(CATSTCCL-X'C0')*(CATEND-CATDSECT)(WB)CK1839000
               ,255-CATQHELD       RESET 'STC'                          K1839500
         NI    CATJBOPT-CATDSECT+(CATTSUCL-X'C0')*(CATEND-CATDSECT)(WB)CK1840000
               ,255-CATQHELD       RESET 'TSU'                          K1840500
         $CRET MSG=OK              RETURN WITH 'OK' MSG                 K1841000
         SPACE 2                                                        K1841500
CHQH     OI    CATJBOPT-CATDSECT(WA),CATQHELD SET 'HOLD' BIT 'ON'       K1842000
         B     CHQA                RETURN TO MAJOR LOOP                 K1842500
         SPACE 1                                                        K1843000
CHQINVO  $CFINVO OPERAND=(R1)      INVALID OPERAND--ERROR EXIT          K1843500
         EJECT                                                          K1844000
*********************************************************************** K1844500
*                                                                     * K1845000
*        $D A,SID...SID, OR ALL/XEQ/DEV/JOB/STC/TSU                   * K1845500
*        DISPLAY ACTIVE JOB(S)                                        * K1846000
*                                                                     * K1846500
*        SID...SID = ACTIVE JOBS ON THE SPECIFIED SYSTEM(S)           * K1847000
*        ALL   = ACTIVE JOB(S) ON ALL SYSTEM(S)                       * K1847500
*        XEQ   = DISPLAY JOBS IN EXECUTION                            * K1848000
*        DEV   = DISPLAY JOBS ON DEVICES                              * K1848500
*        JOB   = DISPLAY NORMAL JOBS                                  * K1849000
*        STC   = DISPLAY SYSTEM TASK CONTROL JOBS                     * K1849500
*        TSU   = DISPLAY TIME SHARING USER JOBS                       * K1850000
*                                                                     * K1850500
*********************************************************************** K1851000
CDA      DS    0H                                                       K1851500
         MVI   COMPNTER+COFOPT-COFOPT,0 ZERO OPTION FLAGS            R4 K1852000
         MVI   COMPNTER+COFAFF-COFOPT,0 ZERO AFFINITY FLAGS          R4 K1852500
CDAC     BXLE  WD,WE,CDAFIL        FILL OUT OPTIONS IF MORE OPERANDS    K1853000
         MVC   COFOPT(L'COFOPT+L'COFAFF),COMPNTER SET OPTIONS        R4 K1853500
         CLI   COFOPT,0            ANYTHING SPECIFIED                R4 K1854000
         BNZ   SKIP50              SKIP IF YES                       R4 K1854500
         MVI   COFOPT,COFD+COFX+COFN SET NORMAL JOB AS DEFAULT       R4 K1855000
SKIP50   TM    COFOPT,COFD+COFX    XEQ OR DEV                        R4 K1855500
         BNZ   SKIP60              TEST TO FORCE JOB TYPE            R4 K1856000
         OI    COFOPT,COFD+COFX    FORCE BOTH                        R4 K1856500
SKIP60   TM    COFOPT,COFJ         JOB STC TSU                       R4 K1857000
         BNZ   CDAFFSET            SET AFFINITIES IF NOT             R4 K1857500
         OI    COFOPT,COFJ         FORCE JOB STC TSU                 R4 K1858000
CDAFFSET DS    0H                  TEST FOR AFFINITY SETTING            K1858500
         CLI   COFAFF,0            TEST FOR ANY AFFINITY OPERANDS       K1859000
         BNE   *+10                YES--SKIP SETTING OF DEFAULT         K1859500
         MVC   COFAFF,$SIDAFF      SET DEFAULT ACTIVE SYSTEM            K1860000
         LA    R1,CDAQLIST-1       QUEUE LIST - 1              @OZ29819 K1860050
         ST    R1,CDAQTYPE         SAVE FOR QUEUE SCAN         @OZ29819 K1860100
         TM    COFOPT,COFS         DISPLAY STARTED TASKS...    @OZ29819 K1860200
         BZ    *+12                BR IF NO                    @OZ29819 K1860300
         MVI   1(R1),CATSTCCL-X'80' ELSE SET STC QUEUE         @OZ29819 K1860350
         LA    R1,1(,R1)             AND UPDATE QUEUE POINTER  @OZ29819 K1860400
         TM    COFOPT,COFT         DISPLAY TSO LOGONS...       @OZ29819 K1860450
         BZ    *+12                BR IF NO                    @OZ29819 K1860500
         MVI   1(R1),CATTSUCL-X'80' ELSE SET TSU QUEUE         @OZ29819 K1860550
         LA    R1,1(,R1)             AND UPDATE QUEUE POINTER  @OZ29819 K1860600
         TM    COFOPT,COFN         DISPLAY BATCH JOBS...       @OZ29819 K1860650
         BZ    *+14                BR IF NO                    @OZ29819 K1860700
         MVC   1(36,R1),CDQTYPEA    ELSE SET NORMAL JOB CLASSES@OZ29819 K1860750
         LA    R1,36(,R1)            AND UPDATE QUEUE POINTER  @OZ29819 K1860800
         TM    COFOPT,COFD         DISPLAY JOBS ON DEVICES...  @OZ29819 K1860900
         BZ    *+14                BR IF NO                    @OZ29819 K1860950
         MVC   1(3,R1),=AL1($INPUT,$OUTPUT,$HARDCPY) DEV QUEUES@OZ29819 K1861000
         LA    R1,3(,R1)           UPDATE QUEUE POINTER        @OZ29819 K1861050
         MVI   1(R1),255           SET END OF QUEUES INDICATOR @OZ29819 K1861100
         SLR   WE,WE               CLEAR 'JOB FOUND' INDICATOR @OZ29819 K1861150
         SPACE 1                                               @OZ29819 K1861200
CDALOOPA L     R1,CDAQTYPE         INCREMENT                   @OZ29819 K1861250
         LA    R1,1(,R1)            POINTER TO                 @OZ29819 K1861300
         ST    R1,CDAQTYPE           JOB QUEUE TYPE            @OZ29819 K1861350
         CLI   0(R1),255           ALL QUEUES PROCESSED...     @OZ29819 K1861400
         BE    CDAEND              BR IF YES                   @OZ29819 K1861450
         SLR   R15,R15             CLEAR FOR INSERT            @OZ29819 K1861500
         IC    R15,0(,R1)          GET NEXT QUEUE TYPE         @OZ29819 K1861550
        $CFJSCAN PROCESS=CDAPRO,NEXT=CDANXT,QUEUE=(R15)        @OZ29819 K1861600
         B     CDALOOPA            BR TO PROCESS NEXT QUEUE    @OZ29819 K1861700
         SPACE 1                                               @OZ29819 K1861750
CDAEND   LTR   WE,WE               ANY JOBS DISPLAYED...       @OZ29819 K1861800
         BZ    CDANONE             BR IF NO                    @OZ29819 K1861850
        $CRET  ,                    ELSE EXIT                  @OZ29819 K1861900
CDANONE  $CRET MSG='NO ACTIVE JOBS' EXIT WITH DIAGNOSTIC                K1862000
CDAPRO   DS    0H                  CHECK JOB FOR SID ACTIVITY           K1862500
         LR    WD,R1               SAVE R1 OVER DISPLAY                 K1863000
         $CFJMSG OPT=SET,AFF=SET   DISPLAY JOB                          K1863500
         B     CDAJOK              +0 -- JOB DISPLAYED                  K1864000
         LR    R1,WD               +4 -- JOB NOT ACTIVE                 K1864500
         B     CDANXT              BR TO GET NEXT JOB          @OZ29819 K1865000
CDAJOK   L     R1,CDAQTYPE         GET ADDRESS OF QUEUE TYPE   @OZ29819 K1865500
         SLR   R15,R15             CLEAR FOR INSERT            @OZ29819 K1865600
         IC    R15,0(,R1)          GET QUEUE TYPE              @OZ29819 K1865700
        $CFJSCAN PROCESS=CDACK,NEXT=CDACKNXT,QUEUE=(R15)       @OZ29819 K1866000
         $CRET MSG='LIST INCOMPLETE' EXIT WITH ERROR                    K1866500
CDACK    CR    R1,WD               SAME JQE                             K1867000
         BNE   CDACKNXT            LOOP IF NOT SAME JOB                 K1867500
         LR    WE,R1               INDICATE JOB DISPLAYED      @OZ29819 K1868000
*              THIS LINE DELETED BY APAR NUMBER                @OZ29819 K1868500
         B     CDANXT              CONTINUE DISPLAYING JOBS             K1869000
         SPACE 3                                                        K1869500
*********************************************************************** K1870000
*                                                                     * K1870500
*        LOOK AT LIMITING OPERANDS                                    * K1871000
*                                                                     * K1871500
*********************************************************************** K1872000
CDAFIL   DS    0H                  SCAN OPERANDS                        K1872500
         LM    R1,WA,0(WD)         PICK-UP OPERANDS                     K1873000
         SLR   WA,R1               COMPUTE                              K1873500
         BCTR  WA,0                ACTUAL OPERAND LENGTH                K1874000
         CH    WA,=H'4'            CHECK WITH SID LENGTH                K1874500
         BNE   CDACKALL            NO--MAYBE FOR ALL SID'S              K1875000
         L     R14,$QSE1           POINT TO 1ST QSE                  R4 K1875500
*                                    THIS CARD DELETED BY APAR @OZ27300 K1876000
         USING QSEDSECT,R14        ADDRESSABILITY                       K1876500
*                                    THIS CARD DELETED BY APAR @OZ27300 K1877000
CDAQLOOP CLC   QSESID,0(R1)        DOES OPERAND MATCH SID      @OZ27300 K1877500
         BE    CDAQFND             YES--FLAG AS SUCH                    K1878000
         TM    QSEFLAGS,QSELAST    NO--LOOP THROUGH ALL SIDS         R4 K1878500
         LA    R14,QSELEN(,R14)    BUMP TO NEXT QSE            @OZ27300 K1878600
         BZ    CDAQLOOP            LOOKING FOR SID MATCH                K1879000
         B     CDAINVO             NOT FOUND -- ERROR                   K1879500
CDAQFND  DS    0H                  SID MATCHED OPERAND                  K1880000
         OC    COFAFF-COFOPT+COMPNTER,QSESIAFF SET AFFINITY          R4 K1880500
         B     CDAC                LOOK FOR MORE OPERANDS               K1881000
CDACKALL DS    0H                  NOT A SPECIFIC SID -- 'ALL'          K1881500
         CLC   0(3,R1),=C'ALL'     WAS IT ALL SIDS                      K1882000
         BNE   *+12                NO--SCAN OTHER OPERANDS              K1882500
         MVI   COFAFF-COFOPT+COMPNTER,X'7F' SET FOR ALL SYSTEMS      R4 K1883000
         B     CDAC                AND CONTINUE EXAMING OPERANDS        K1883500
         DROP  R14                 DISESTABLISH-ADDRESSABILITY          K1884000
         LA    WA,COFN             SET FOR BATCH JOBS                   K1884500
         CLI   0(R1),C'J'          TEST FOR SAME                        K1885000
         BE    CDASET              YES--FLAG REQUEST                    K1885500
         LA    WA,COFS             SET FOR SYSTEM TASKS                 K1886000
         CLI   0(R1),C'S'          TEST FOR SAME                        K1886500
         BE    CDASET              YES--FLAG REQUEST                    K1887000
         LA    WA,COFT             SET FOR TIME SHARING USERS           K1887500
         CLI   0(R1),C'T'          TEST FOR SAME                        K1888000
         BE    CDASET              YES--FLAG REQUEST                    K1888500
         LA    WA,COFD             SET REQUEST FOR DEVICE(S)            K1889000
         CLI   0(R1),C'D'          TEST FOR SAME                        K1889500
         BE    CDASET              YES--FLAG REQUEST                    K1890000
         LA    WA,COFX             SET REQUEST FOR JOB IN EXECUTION     K1890500
         CLI   0(R1),C'X'          TEST FOR SAME                        K1891000
         BE    CDASET                                                   K1891500
CDAINVO  $CFINVO OPERAND=(R1)      TELL OPERATOR ABOUT INVO OPERAND     K1892000
CDASET   EX    WA,CDAOI            TURN BIT ON                          K1892500
         B     CDAC                LOOP                                 K1893000
CDAOI    OI    COFOPT-COFOPT+COMPNTER,*-*  *** EXECUTE ONLY ***      R4 K1893500
         SPACE 1                                               @OZ29819 K1893600
CDAQTYPE EQU   COMPNTER,4          POINTER TO JOB QUEUE TYPE   @OZ29819 K1893700
CDAQLIST EQU   CDAQTYPE+4,40       QUEUES TO BE PROCESSED      @OZ29819 K1893800
         EJECT                                                          K1894000
*********************************************************************** K1894500
*                                                                     * K1895000
*        $D N -- DISPLAY INFORMATION ON QUEUED JOBS                   * K1895500
*                                                                     * K1896000
*********************************************************************** K1896500
CDN      LA    WC,CDNCTR           SET TO LIST EACH JOB                 K1897000
         MVI   CDNFLAG,CDNFLGN     INDICATE $DN                @OZ29819 K1897100
         B     CDQBREAK            ENTER COMMON CODE WITH $D Q          K1897500
         EJECT                                                          K1898000
*********************************************************************** K1898500
*                                                                     * K1899000
*        $D Q -- DISPLAY JOB QUEUE                                    * K1899500
*                                                                     * K1900000
*********************************************************************** K1900500
CDQ      LA    WC,CDQCTR           SET TO COUNT EACH JOB                K1901000
         MVI   CDNFLAG,0           RESET ALL FLAGS             @OZ29819 K1901100
*********************************************************************** K1901500
*                                                                     * K1902000
*        FORMAT OF OPERANDS                                           * K1902500
*                                                                     * K1903000
*        SID/ALL/ANY/IND - OPERAND TWO                                * K1903500
*              JOBS WITH AFFINITY TO SYSTEM (SID) (DEFAULT=OWN)       * K1904000
*              JOBS WITH AFFINITY TO SYS 1,2,... (ALL)                * K1904500
*              JOBS WITH AFFINITY TO ANY SYSTEM (ANY)                 * K1905000
*        ALL   = ALL JOB(S) REGARDLESS OF THE SYSTEM AFFINITY         * K1905500
*        ANY   = JOB(S) WITH AFFINITY TO 'ANY' SYSTEM                 * K1906000
*              IND JOBS FOR OWN SYSTEM IN INDEPENDENT MODE            * K1906500
*        IND   - THIRD OPERAND QUALIFIES SID/ALL/ANY OF OPERAND TWO   * K1907000
*        R=DEST1-DEST2 - JOBS WITH ROUTE CODES WITHIN RANGES          * K1907500
*        Q=XEQ/XEQ CLASS/OUT/PPU/HOLD - QUEUE TYPE                    * K1909500
*                                                                     * K1910500
*********************************************************************** K1911000
*        BREAK OUT OPERANDS                                           * K1911500
         SPACE 1                                                        K1912000
CDQBREAK DS    0H                  BREAK-OUT OPERANDS                   K1912500
                                   PRINT OFF - SECTION DELETED @OZ29819 K1913000
*              THIS LINE DELETED BY APAR NUMBER                @OZ29819 K1913500
*              THIS LINE DELETED BY APAR NUMBER                @OZ29819 K1914000
                                   PRINT ON -- SECTION DELETED @OZ29819 K1914500
         TM    COMAUTH,CMBFLAGR    IS CONSOLE REMOTE RESTRICTED     R41 K1915000
         BO    CDQRTD              YES--GET DEFAULT ROUTE RANGE     R41 K1915500
         MVC   CDQDEFR,CDQRALLD    INCLUDE ALL ROUTE CODES     @OZ29819 K1919500
         B     CDQLOCAL            SKIP REMOTE                       R4 K1920000
CDQRTD   BAL   LINK,COFRTD         GET DEFAULT ROUTE RANGES IN R1,R0 R4 K1920500
         STH   R0,CDQRBNDH         SET HIGH BOUND                    R4 K1921000
         STH   R1,CDQRBNDL         SET LOW BOUND                     R4 K1921500
CDQLOCAL MVC   CDQSIDLO,$SIDAFF    ASSUME OUR SYSTEM                 R4 K1922000
         MVC   CDQSIDHI,$SIDAFF    AS DEFAULT                        R4 K1922500
         MVC   CDQSE,CDQS          MOVE IN SCAN PARAMETER DEFAULTS   R4 K1923000
         BXH   WD,WE,CDQXITT       SET DEFAULT SCAN ELEMENTS IF NULL R4 K1923500
         L     R1,0(,WD)           POINT TO OPERAND                  R4 K1924000
         CLI   1(R1),C'='          THIS EQUAL                        R4 K1924500
         BE    CDQROUT             TRY ROUTE RANGE IF YES            R4 K1925000
         CLC   0(3,R1),=C'ANY'     TEST FOR AFFINITY REQ OF 'ANY'       K1925500
         BNE   CDQSIDMO            NO-LOOK FOR 'ALL' OR SPECIFIC AFF    K1926000
         MVI   CDQSIDLO,QUESYSAF   SET AFFINITY TO ANY               R4 K1926500
         MVI   CDQSIDHI,QUESYSAF   HIGH SAME AS LOW                  R4 K1927000
         B     CDQSIDND            AND EXIT AFFINITY SCAN               K1927500
CDQSIDMO CLC   0(3,R1),=C'ALL'     THIS ALL                          R4 K1928000
         BNE   CDQSIDLK            LOOK FOR SID                      R4 K1928500
         MVI   CDQSIDLO,1          SET MASK FOR FIRST QSE            R4 K1929000
         LH    R14,$QSENO          GET NUMBER OF QSES                R4 K1929500
         IC    R14,CDQQSEAF(R14)   PICK UP AFFINITY OF HIGH QSE      R4 K1930000
         STC   R14,CDQSIDHI        SET HIGH QSE MASK                 R4 K1930500
         OI    CDNFLAG,CDNALL      SET ALL SPECIFIED                 R4 K1931000
         B     CDQSIDND            EXIT AFFINITY SCAN                R4 K1931500
CDQSIDLK CLC   0(3,R1),=C'IND'     THIS IND                          R4 K1932000
         BE    CDQIND              SET IND IF YES                    R4 K1932500
         L     R14,$QSE1           POINT TO 1ST QSE                  R4 K1933000
*                                    THIS CARD DELETED BY APAR @OZ27300 K1933500
         USING QSEDSECT,R14        QSE ADDRESSABILITY                   K1934000
*                                    THIS CARD DELETED BY APAR @OZ27300 K1934500
CDQSIDLL CLC   QSESID,0(R1)        FOUND QSE                   @OZ27300 K1935000
         BE    CDQSIDFD            YES--FILL IN END AFFINITY            K1935500
CDQSIDLP TM    QSEFLAGS,QSELAST    TEST FOR LAST ELEMENT                K1936000
         LA    R14,QSELEN(,R14)    BUMP TO NEXT QSE            @OZ27300 K1936100
         BZ    CDQSIDLL            AND LOOP THROUGH ALL ELEMENTS        K1936500
CDQINVOA L     R1,0(,WD)           POINT TO ERROR OPERAND            R4 K1937000
CDQINVO  $CFINVO OPERAND=(R1)      ERROR EXIT                        R4 K1937500
CDQSIDFD MVC   CDQSIDLO,QSESIAFF   SET AFFINITY                      R4 K1938000
         MVC   CDQSIDHI,QSESIAFF   SET ENDING AFFINITY                  K1938500
         DROP  R14                 DROP QSE ADDRESSABILITY              K1939000
CDQSIDND BXH   WD,WE,CDQXITT       SET DEFAULT SCAN ELEMENT IF NULL  R4 K1939500
         L     R1,0(,WD)           POINT TO OPERAND                  R4 K1940000
         CLI   1(R1),C'='          THIS EQUAL                        R4 K1940500
         BE    CDQROUT             TRY ROUTE RANGE IF YES            R4 K1941000
         CLC   0(3,R1),=C'IND'     THIS IND                          R4 K1941500
         BNE   CDQINVO             ERROR IF NOT                      R4 K1942000
CDQIND   OI    CDNFLAG,CDNIND      SET INDEPENDENT MODE              R4 K1942500
         OI    CDQSIDLO,QUEINDAF   SET LOW BOUND IND                 R4 K1943000
         OI    CDQSIDHI,QUEINDAF   SET HIGH BOUND IND                R4 K1943500
CDQNXTOP BXH   WD,WE,CDQXITT       LOOK FOR MORE                     R4 K1944000
         L     R1,0(,WD)           POINT TO OPERAND                  R4 K1944500
         CLI   1(R1),C'='          THIS EQUAL                        R4 K1945000
         BNE   CDQINVO             ERROR IF NOT                      R4 K1945500
CDQROUT  CLI   0(R1),C'R'          THIS ROUTE CODE                   R4 K1946000
         BNE   CDQTYPE             TRY TYPE IF NOT                   R4 K1946500
         TM    CDNFLAG,CDNROUT     ROUTE ALREADY BEEN SPECIFIED      R4 K1947000
         BO    CDQINVO             ERROR IF YES                      R4 K1947500
         OI    CDNFLAG,CDNROUT     SET ROUTE SPECIFIED               R4 K1948000
         BAL   LINK,COFRTRA        CONVERT DESTINATION               R4 K1948500
         B     CDQINVOA            ERROR IF BAD             + 0      R4 K1949000
         STH   R1,CDQRBNDL         SET LOW ROUT CODE        + 4      R4 K1949500
         STH   R0,CDQRBNDH         SET HIGH ROUTING CODE                K1950000
         B     CDQNXTOP            DO NEXT OPERAND                   R4 K1950500
CDQTYPE  CLI   0(R1),C'Q'          THIS QUEUE TYPE                   R4 K1951000
         BNE   CDQINVO             ERROR IF NOT                      R4 K1951500
         TM    CDNFLAG,CDNTYPE     ALREADY SPECIFIED                 R4 K1952000
         BO    CDQINVO             ERROR IF YES                      R4 K1952500
         OI    CDNFLAG,CDNTYPE     SET SPECIFIED                     R4 K1953000
         CLC   2(3,R1),=C'XEQ'     EXECUTION QUEUE                   R4 K1966500
         BNE   CDQOUTT             IF NOT TEST OUT                      K1967000
         CLI   5(R1),C' '          ALL QUEUES...               @OZ29819 K1967500
         BE    CDQENDS             BR IF YES                   @OZ29819 K1968000
         CLI   5(R1),C','          ALL QUEUES...               @OZ29819 K1968500
         BE    CDQENDS             BR IF YES                   @OZ29819 K1969000
         LA    R15,CDQTYPEC        ASSUME CONVERSION QUEUE     @OZ29819 K1969500
         CLI   5(R1),C'*'          IF CONVERSION QUEUE,        @OZ29819 K1970000
         BE    CDQXCLS              BR TO TEST NEXT OPERAND    @OZ29819 K1970500
         LA    R15,CDQTYPE$        ASSUME STC QUEUE            @OZ29819 K1971000
         CLI   5(R1),CATSTCID      IF                          @OZ29819 K1971500
         BE    CDQXCLS              STC                        @OZ29819 K1972000
         CLC   5(3,R1),=C'STC'       QUEUE,                    @OZ29819 K1972500
         BE    CDQXCLS                BR TO TEST NEXT OPERAND  @OZ29819 K1973000
         LA    R15,CDQTYPE@        ASSUME TSU QUEUE            @OZ29819 K1973500
         CLI   5(R1),CATTSUID      IF                          @OZ29819 K1974000
         BE    CDQXCLS              TSU                        @OZ29819 K1974500
         CLC   5(3,R1),=C'TSU'       QUEUE,                    @OZ29819 K1975000
         BE    CDQXCLS                BR TO TEST NEXT OPERAND  @OZ29819 K1975500
         MVC   COMDWORK(1),5(R1)   MOVE QUEUE TYPE TO WORK     @OZ29819 K1976000
         NI    COMDWORK,QUECLASS   CONVERT TO INTERNAL FORMAT  @OZ29819 K1976500
         LA    R15,CDQTYPEA        SET TO SCAN FOR JOB CLASS   @OZ29819 K1977000
         LA    R0,36               MAX VALID CLASSES (A-Z, 0-9)@OZ29819 K1977500
         SPACE 1                                               @OZ29819 K1978000
CDQNXTCL CLC   0(1,R15),COMDWORK   THIS THE ONE...             @OZ29819 K1978500
         BE    CDQXCLS             BR IF YES                   @OZ29819 K1979000
         LA    R15,1(,R15)         POINT TO NEXT CLASS         @OZ29819 K1979500
         BCT   R0,CDQNXTCL          ELSE LOOP                  @OZ29819 K1979600
         B     CDQINVOA            NO SUCH CLASS (ERROR)       @OZ29819 K1979700
         SPACE 1                                               @OZ29819 K1979800
CDQXCLS  STCM  R15,7,CDQTYPLO      SET QUEUE RANGE             @OZ29819 K1979900
         STCM  R15,7,CDQTYPHI       TO SPECIFIED QUEUE         @OZ29819 K1980000
         B     CDQENDS             GO TO SET END                        K1980500
CDQOUTT  CLC   2(3,R1),=C'OUT'     IS IT OUTPUT                      R4 K1981000
         BNE   CDQPPUTT            IF NOT CHK FOR PR/PU                 K1981500
         MVC   CDQSEE,CDQOUTD      MOVE OUT ELEMENT FIRST      @OZ29819 K1982000
         B     CDQENDS             EXIT OPERAND SCAN ROUTINE            K1982500
CDQPPUTT DS    0H                  CHECK FOR PRINT/PUCH QUEUEING        K1983000
         CLC   2(3,R1),=C'PPU'     IS IT PRINT/PUNCH                 R4 K1983500
         BNE   CDQHLDT             NO--CHECK FOR 'HOLD'              R4 K1984000
         MVC   CDQSEE,CDQPPUD      MOVE PPU ELEMENT FIRST      @OZ29819 K1984500
         B     CDQENDS             EXIT OPERAND SCAN ROUTINE            K1985000
CDQHLDT  CLC   2(4,R1),=C'HOLD'    IS IT HOLD STATUS                 R4 K1985500
         BNE   CDQINVO             ERROR IF NOT HOLD                 R4 K1986000
         MVC   CDQSEE,CDQHLDD      MOVE HOLD ELEMENT FIRST     @OZ29819 K1986500
CDQENDS  MVC   CDQSECDD,CDQENDD    MOVE END ELEMENT TO SECOND PLACE     K1987000
         B     CDQNXTOP            DO NEXT OPERAND                   R4 K1987500
         SPACE 1                                               @OZ29819 K1988000
*              THIS LINE DELETED BY APAR NUMBER                @OZ29819 K1988500
*              THIS LINE DELETED BY APAR NUMBER                @OZ29819 K1989000
*              THIS LINE DELETED BY APAR NUMBER                @OZ29819 K1989500
         SPACE 1                                               @OZ29819 K1990000
* SET UP FOR JOB QUEUE SCAN                                             K1990500
CDQXITT  SLR   R10,R10             ZERO QUEUE SCAN HOLD COUNT  @OZ29819 K1991000
         MVC   CDQSESAV,CDQSEE     SAVE SEARCH ELEMENTS FOR NXT SID     K1991500
         MVI   COMMAND+4,C' '      SET BLANK FOR $DQ MESSAGE            K1992000
         CLC   CDQSIDLO,CDQSIDHI   TST FOR ELMNTION OF PPU ELEM         K1992500
         BE    *+10                NO--LEAVE PPU ELEMENT                K1993000
         MVC   CDQSEE+CDQPPUD-CDQS(2),CDQENDD  OMIT PPU        @OZ29819 K1993500
CDQLOOP  DS    0H                  LOOP THROUGH ALL ELEMENTS            K1996500
         LH    WF,CDQSEE           POINT TO CURRENT SEARCH ELEMENT      K1996600
         CH    WF,CDQENDD          TEST FOR LAST ELEMENT                K1996700
         BE    CDQSIDM             YES--CHK FOR MORE SID'S TO DO        K1996800
         CH    WF,CDQOUTD          THIS OUTPUT QUEUE                 R4 K1996900
         BE    SKIP110             SKIP NEXT IF YES                  R4 K1997000
         CH    WF,CDQPPUD          THIS PRINT/PUNCH QUEUE            R4 K1997100
         BNE   CDQLOOPB            SKIP NEXT IF NOT                  R4 K1997500
SKIP110  MVC   CDQSHI(4),CDQDEFR   FORCE ROUTE RANGE                 R4 K1998000
CDQLOOPB SLR   WE,WE               ZERO $DQ COUNTER                  R4 K1998500
*              THIS LINE DELETED BY APAR NUMBER                @OZ29819 K1999000
         LH    WB,CDQSHI           SET FIRST ROUTE CODE                 K1999500
         EJECT                                                          K2000000
*********************************************************************** K2000500
*                                                                     * K2001000
*        SCAN THE JOB QUEUE                                           * K2001500
*                                                                     * K2002000
*********************************************************************** K2002500
CDQLOOPA ICM   R1,7,CDQTYPLO       GET ADDRESS OF QUEUE TYPE   @OZ29819 K2003000
         SLR   R15,R15             CLEAR FOR INSERT            @OZ29819 K2003100
         IC    R15,0(,R1)          GET QUEUE TYPE              @OZ29819 K2003200
        $CFJSCAN PROCESS=4(WF,BASE3),NEXT=CDQNXT,QUEUE=(R15)   @OZ29819 K2003300
         LTR   R0,WE               TEST COUNT FOR ZERO                  K2003500
         BZ    CDQNRES             SKIP DISPLAY IF ZERO                 K2004000
         $CFCVE ,                  CONVERT TO PRINTABLE                 K2004500
         MVC   COMMAND(4),COMDWORK+1 SET NUMBER OF HITS                 K2005000
         B     0(WF,BASE3)         ENTER DISPLAY PREPARATION            K2005500
CDQRES   $CWTO L=(R0)              RESPOND                              K2006000
         SPACE 1                                               @OZ29819 K2006500
         SPACE 1                                               @OZ29819 K2007000
CDQNRES  TM    CDNFLAG,CDNRSCAN    QUEUE RE-SCAN REQUIRED...   @OZ29819 K2007500
         BZ    CDQNEXT             BR IF NO                    @OZ29819 K2008000
         NI    CDNFLAG,255-CDNRSCAN  RESET RE-SCAN FLAG        @OZ29819 K2008500
         STH   WB,CDQSLO           SET NEW RANGE LOW           @OZ29819 K2009000
         B     CDQLOOPB             AND BR TO RE-SCAN QUEUE    @OZ29819 K2009500
         SPACE 1                                               @OZ29819 K2010000
CDQNEXT  ICM   R1,7,CDQTYPLO       GET ADDR OF CURRENT QUEUE   @OZ29819 K2010500
         CLM   R1,7,CDQTYPHI       LAST QUEUE FOR THIS TYPE... @OZ29819 K2011000
         BNL   CDQINCR             BR IF YES                   @OZ29819 K2011500
         LA    R1,1(,R1)           INCREMENT QUEUE ADDRESS     @OZ29819 K2012000
         STCM  R1,7,CDQTYPLO        AND SAVE                   @OZ29819 K2012500
         B     CDQLOOPB            THEN BR TO SCAN NEXT QUEUE  @OZ29819 K2013000
         SPACE 1                                               @OZ29819 K2013500
CDQINCR  MVC   CDQSEE(L'CDQSE-L'CDQSEE),CDQSECDD SHIFT NEXT IN          K2014000
         B     CDQLOOP             LOOP                                 K2014500
         EJECT                                                 @OZ29819 K2014600
CDQSIDM  TM    CDNFLAG,CDNFLGN     $DN...                      @OZ29819 K2014700
         BO    CDQSIDN             BR IF YES                   @OZ29819 K2014800
         LTR   R0,R10              ANY JOBS HELD THIS SYSTEM...@OZ29819 K2015000
         BZ    CDQSIDN             BR IF NO                    @OZ29819 K2015200
        $CFCVE ,                   CONVERT TO PRINTABLE        @OZ29819 K2015300
         MVC   COMMAND(4),COMDWORK+1  SET NUMBER OF HITS       @OZ29819 K2015400
         SLR   R10,R10             CLEAR JOB HOLD COUNT        @OZ29819 K2015500
         B     CDQHLDE             ENTER HOLD DISPLAY ROUTINE  @OZ29819 K2015600
         SPACE 1                                               @OZ29819 K2015700
CDQSIDN  CLC   CDQSIDLO,CDQSIDHI   CHECK FOR END OF SCAN       @OZ29819 K2015800
         BNL   CDQEND              IF NO MORE -- EXIT                   K2016000
         SLR   WE,WE               ZERO INSERT REGISTER                 K2016500
         ICM   WE,8,CDQSIDLO       PICK-UP CURRENT SYSTEM ID            K2017000
         ALR   WE,WE               SHIFT LEFT ONE SYS ID                K2017500
         STCM  WE,8,CDQSIDLO       SAVE NEW SYSTEM ID                   K2018000
         BC    12,*+8              BRANCH IF NOT IND SCAN               K2018500
         OI    CDQSIDLO,QUEINDAF   ELSE FLAG IND SCAN                   K2019000
         MVC   CDQSE,CDQSESAV      RESTORE SEARCH ELEMENTS              K2019500
         CLC   CDQSIDLO,CDQSIDHI   TST FOR ELMNTION OF PPU ELEM         K2020000
         BE    CDQLOOP             NO--LEAVE ELEM FOR LAST SID          K2020500
         MVC   CDQSEE+CDQPPUD-CDQS(2),CDQENDD  OMIT PPU        @OZ29819 K2021000
         B     CDQLOOP             AND CONTINUE ELEMENT SCANS           K2021500
         EJECT                                                          K2022000
*********************************************************************** K2022500
*                                                                     * K2023000
*        EXAMINE JOB QUEUE ELEMENT                                    * K2023500
*                                                                     * K2024000
*********************************************************************** K2024500
                                   PRINT OFF - SECTION DELETED @OZ29819 K2025000
*              THIS LINE DELETED BY APAR NUMBER                @OZ29819 K2025500
*              THIS LINE DELETED BY APAR NUMBER                @OZ29819 K2026000
*              THIS LINE DELETED BY APAR NUMBER                @OZ29819 K2026500
*              THIS LINE DELETED BY APAR NUMBER                @OZ29819 K2027000
*              THIS LINE DELETED BY APAR NUMBER                @OZ29819 K2027500
*              THIS LINE DELETED BY APAR NUMBER                @OZ29819 K2028000
*              THIS LINE DELETED BY APAR NUMBER                @OZ29819 K2028500
*              THIS LINE DELETED BY APAR NUMBER                @OZ29819 K2029000
*              THIS LINE DELETED BY APAR NUMBER                @OZ29819 K2029500
*              THIS LINE DELETED BY APAR NUMBER                @OZ29819 K2030000
*              THIS LINE DELETED BY APAR NUMBER                @OZ29819 K2030500
*              THIS LINE DELETED BY APAR NUMBER                @OZ29819 K2031000
*              THIS LINE DELETED BY APAR NUMBER                @OZ29819 K2031500
*              THIS LINE DELETED BY APAR NUMBER                @OZ29819 K2032000
*              THIS LINE DELETED BY APAR NUMBER                @OZ29819 K2032500
*              THIS LINE DELETED BY APAR NUMBER                @OZ29819 K2033000
*              THIS LINE DELETED BY APAR NUMBER                @OZ29819 K2033500
*              THIS LINE DELETED BY APAR NUMBER                @OZ29819 K2034000
*              THIS LINE DELETED BY APAR NUMBER                @OZ29819 K2034500
*              THIS LINE DELETED BY APAR NUMBER                @OZ29819 K2035000
*              THIS LINE DELETED BY APAR NUMBER                @OZ29819 K2035500
                                   PRINT ON -- SECTION DELETED @OZ29819 K2036000
         SPACE 1                                                        K2036500
* REQUEST FOR 'XEQ' QUEUE                                               K2037000
         SPACE 1                                                        K2037500
CDQXEQ   B     CDQXEQE             ENTER $DQ MESSAGE PREPARATION        K2038000
         BAL   R14,CDQCKRTE        CHECK ROUTE CODES                    K2038500
         TM    JQEFLAGS,QUEBUSY    TEST FOR ACTIVE                      K2039000
         BNZ   CDQNXT              YES--GET NEXT JOB                    K2039500
         BAL   R14,CDQCKSID        CHECK FOR PROPER AFFINITY            K2040000
         BR    WC                  ENTER $DN OR $DQ ROUTINE    @OZ29819 K2040500
                                   PRINT OFF - SECTION DELETED @OZ29819 K2041000
*              THIS LINE DELETED BY APAR NUMBER                @OZ29819 K2041500
*              THIS LINE DELETED BY APAR NUMBER                @OZ29819 K2041600
*              THIS LINE DELETED BY APAR NUMBER                @OZ29819 K2041700
*              THIS LINE DELETED BY APAR NUMBER                @OZ29819 K2042000
*              THIS LINE DELETED BY APAR NUMBER                @OZ29819 K2042500
*              THIS LINE DELETED BY APAR NUMBER                @OZ29819 K2043000
*              THIS LINE DELETED BY APAR NUMBER                @OZ29819 K2043500
*              THIS LINE DELETED BY APAR NUMBER                @OZ29819 K2044000
*              THIS LINE DELETED BY APAR NUMBER                @OZ29819 K2044500
*              THIS LINE DELETED BY APAR NUMBER                @OZ29819 K2045000
*              THIS LINE DELETED BY APAR NUMBER                @OZ29819 K2045500
                                   PRINT ON -- SECTION DELETED @OZ29819 K2046000
         SPACE 1                                                        K2046500
CDQXEQE  DS    0H                  DISPLAY QUEUED FOR EXECUTION         K2047000
         MVC   COMMAND+5(6),=CL6'XEQ *' SET MESSAGE BODY                K2047500
         LA    R1,COMMAND+11-COMMAND PT TO END OF MESSAGE               K2048000
         ICM   R15,7,CDQTYPLO      GET ADDR OF QUEUE TYPE      @OZ29819 K2048100
         CLI   0(R15),$XEQ         CONVERSION QUEUE...         @OZ29819 K2048200
         BE    CDQSYSNM            BR IF YES                   @OZ29819 K2048300
         MVC   COMMAND+9(1),0(R15) MOVE QUEUE TYPE TO MSG      @OZ29819 K2048500
         OI    COMMAND+9,X'80'     MAKE CLASS PRINTABLE                 K2049000
         CLC   CDQSIDLO,$SIDAFF    CHECK FOR POSSIBLE USE OF CAT        K2049500
         BNE   CDQNOCAT            NO--DIFFERENT MACHINE                K2050000
         SLR   R14,R14             ZERO INSERT REGISTER                 K2050500
         IC    R14,0(,R15)         PICK UP CLASS               @OZ29819 K2051000
         SL    R14,=A(X'40')       LESS OFFSET INTO CAT                 K2051500
         SLL   R14,5               TIMES CAT SIZE                       K2052000
         AL    R14,$CATABLE        PLUS BEGINNING ADDRESS IS ELEMENT    K2052500
         USING CATDSECT,R14        CAT ADDRESSABILITY                   K2053000
         TM    CATJBOPT,CATQHELD   TEST FOR CLASS HELD ($HQ)            K2053500
         BZ    CDQNOCAT            NO--EXIT CAT SCAN                    K2054000
         MVC   COMMAND+11(5),=CL5'HOLD' YES--FILL IN 'HOLD'             K2054500
         LA    R1,COMMAND+16-COMMAND PT TO END OF MESSAGE               K2055000
         B     CDQSYSNM            AND GO FILL IN SYSTEM NAME           K2055500
         DROP  R14                 DROP QSE ADDRESSABILITY              K2056000
CDQNOCAT DS    0H                  CAT NOT APPLICABLE                   K2056500
         CLI   COMMAND+9,CATSTCCL  TEST FOR SYSTEM TASK                 K2057000
         BNE   CDQNOSTC            NO--TRY FOR LOGON                    K2057500
         MVC   COMMAND+9(6),CDQTSKID SET STC DESIGNATION                K2058000
         LA    R1,COMMAND+15-COMMAND PT TO END OF MESSAGE               K2058500
         B     CDQSYSNM            GO FILL IN SYSTEM NAME               K2059000
CDQNOSTC DS    0H                  TRY FOR LOGON                        K2059500
         CLI   COMMAND+9,CATTSUCL  TEST FOR TSU                         K2060000
         BNE   CDQSYSNM            NO--FIL-IN SYSTEM NAME               K2060500
         MVC   COMMAND+9(6),CDQLOGID SET LOGON DESIGNATION              K2061000
         LA    R1,COMMAND+15-COMMAND PT TO END OF MESSAGE               K2061500
CDQSYSNM DS    0H                  FILL-IN SYSTEM NAME FOR AFFINITY     K2062000
         LA    R1,COMMAND(R1)      PT TO END OF MESSAGE                 K2062500
         BAL   WA,CDQSIDNM         PICK-UP NAME                         K2063000
         MVC   0(L'QSESID,R1),0(R15)  FILL-IN NAME                      K2063500
         LA    R0,L'QSESID(,R1)    PT TO END OF MESSAGE                 K2064000
         TM    CDNFLAG,CDNIND      TEST FOR 'IND' REQUEST               K2064500
         BZ    *+14                NO--SKIP NEXT INSTRUCTIONS           K2065000
         MVC   L'QSESID(4,R1),=C' IND' SET 'IND' MODE IN MSG            K2065500
         LA    R0,L'QSESID+4(,R1)  SET END OF MESSAGE                   K2066000
         LA    R1,COMMAND          PT OT BEGINNING OF MESSAGE           K2066500
         SLR   R0,R1               COMPUTE MESSAGE LENGTH               K2067000
         B     CDQRES              AND REPLY TO OPERATOR                K2067500
         EJECT                                                          K2082500
         SPACE 1                                                        K2083000
*        REQUEST FOR 'PPU' QUEUE                                        K2083500
CDQPPU   DS    0H                  SCAN JOBS IN HARDCPY QUEUE           K2084000
         B     CDQPPUE             DISPLAY AT END OF JOBS               K2084500
         CLI   JQETYPE,$HARDCPY    JOB IN HARDCPY...           @OZ29819 K2085000
         BE    CDQCOMMN            BR IF YES                   @OZ29819 K2085500
         TM    JQEFLAGS,QUEBUSY    JOB BUSY IN OUTPUT...       @OZ29819 K2086000
         BZ    CDQNXT              BR IF NO TO GET NEXT JOB    @OZ29819 K2086500
         B     CDQCOMMN             ELSE TREAT AS IN HARDCPY   @OZ29819 K2087000
                                   PRINT OFF - SECTION DELETED @OZ29819 K2087500
*              THIS LINE DELETED BY APAR NUMBER                @OZ29819 K2088000
*              THIS LINE DELETED BY APAR NUMBER                @OZ29819 K2088500
*              THIS LINE DELETED BY APAR NUMBER                @OZ29819 K2089000
*              THIS LINE DELETED BY APAR NUMBER                @OZ29819 K2089500
*              THIS LINE DELETED BY APAR NUMBER                @OZ29819 K2090000
                                   PRINT ON -- SECTION DELETED @OZ29819 K2090500
         SPACE 2                                                        K2091000
*        REQUEST FOR 'OUT' QUEUE                                        K2091500
CDQOUT   DS    0H                  CHECK FOR JOBS AWAITING OUTPUT       K2092000
         B     CDQOUTE             DISPALY AT END OF JOBS               K2092500
*              THIS LINE DELETED BY APAR NUMBER                @OZ29819 K2093000
*              THIS LINE DELETED BY APAR NUMBER                @OZ29819 K2093500
         BAL   R14,CDQCKSID        TEST FOR CORRECT SID                 K2094000
         TM    JQEFLAGS,QUEBUSY    TEST FOR ACTIVE                      K2094500
         BNZ   CDQNXT              YES--GET NEXT ELEMENT                K2095000
         SPACE 1                                               @OZ29819 K2095500
CDQCOMMN DS    0H                                                       K2096000
*              THIS LINE DELETED BY APAR NUMBER                @OZ29819 K2096500
         CLC   JQEPRTRT,JQEPUNRT   FIND LOWER ROUTE CODE                K2097000
         BH    CDQPUNL             CHECK PUNCH TOO LOW IF LOWER         K2097500
* PRINT ROUTE IS LOW ( OR EQUAL )                                       K2098000
         CLC   JQEPRTRT,CDQSLO     IS IT LOWER THAN CURRENT LOW         K2098500
         BL    CDQPUNC             IT DEPENDS ON PUNCH IF LOW           K2099000
         BER   WC                  ENTER $DN OR $DQ IF HIT     @OZ29819 K2099500
CDQPRT   CH    WB,JQEPRTRT         IS IT HIGHER THAN HIGH BOUND         K2100000
         BL    CDQNXT              LOOP IF YES                          K2100500
*              THIS LINE DELETED BY APAR NUMBER                @OZ29819 K2101000
         LH    WB,JQEPRTRT         SET NEW HIGH BOUND                   K2101500
         B     CDQHIT              FORCE QUEUE RE-SCAN         @OZ29819 K2102000
CDQPUNC  CLC   JQEPUNRT,CDQSLO     IS PUNCH LOW ALSO                    K2102500
         BL    CDQNXT              LOOP IF YES                          K2103000
         BER   WC                  ENTER $DN OR $DQ IF HIT     @OZ29819 K2103500
         B     CDQPUN              TEST AGAINST UPPER BOUND             K2104000
* PUNCH ROUTE IS LOW                                                    K2104500
CDQPUNL  CLC   JQEPUNRT,CDQSLO     IS IT LOWER THAN CURRENT LOW         K2105000
         BL    CDQPRTC             IT DEPENDS ON PRINT IF LOW           K2105500
         BER   WC                  ENTER $DN OR $DQ IF HIT     @OZ29819 K2106000
CDQPUN   CH    WB,JQEPUNRT         IS IT HIGHER THAN HIGH BOUND         K2106500
         BL    CDQNXT              LOOP IF YES                          K2107000
*              THIS LINE DELETED BY APAR NUMBER                @OZ29819 K2107500
         LH    WB,JQEPUNRT         SET NEW HIGH BOUND                   K2108000
         B     CDQHIT              FORCE QUEUE RE-SCAN         @OZ29819 K2108500
CDQPRTC  CLC   JQEPRTRT,CDQSLO     IS PRINT LOW ALSO                    K2109000
         BL    CDQNXT              LOOP IF YES                          K2109500
         BER   WC                  ENTER $DN OR $DQ IF HIT     @OZ29819 K2110000
         B     CDQPRT              TEST AGAINST UPPER BOUND             K2110500
         SPACE 1                                               @OZ29819 K2111000
CDQHIT   DS    0H                  ANOTHER PASS REQUIRED       @OZ29819 K2111500
         OI    CDNFLAG,CDNRSCAN    FORCE CURRENT QUEUE RE-SCAN @OZ29819 K2112000
         B     CDQNXT              BR TO GET NEXT JOB          @OZ29819 K2112500
         SPACE 1                                                        K2113000
CDQPPUE  DS    0H                  DISPLAY QUEUED FOR PRT/PUN           K2113500
         MVC   COMMAND+5(3),=C'PPU' SET IDENTIFIER                   R4 K2114000
         LA    R15,CDQSLO          POINT TO ROUTE FIELD              R4 K2114500
         LA    R0,COMMAND+8        POINT TO RECEIVE AREA             R4 K2115000
         BAL   LINK,COFRTC         CONVERT TO PRINTABLE              R4 K2115500
         MVC   COMMAND+8+10(3),=CL4'ANY' SET ANY                     R4 K2116000
         LA    R0,COMMAND+18+3-COMMAND SET LENGTH                    R4 K2116500
         B     CDQRES              AND REPLY TO OPERATOR                K2117000
         SPACE 2                                                        K2117500
CDQOUTE  DS    0H                  DISPLAY QUEUED FOR OUTPUT            K2118000
         MVC   COMMAND+5(4),=CL4'OUT' SET MESSAGE                       K2118500
         BAL   WA,CDQSIDNM         PICK-UP SYSTEM NAME                  K2119000
         MVC   COMMAND+9(L'QSESID),0(R15) SET SYSTEM NAME IN MSG        K2119500
         LA    R0,COMMAND+9+L'QSESID-COMMAND SET MESSAGE LENGTH         K2120000
         TM    CDNFLAG,CDNIND      TEST FOR 'IND' REQUEST               K2120500
         BZ    CDQRES              NO--REPLY TO OPERATOR                K2121000
         MVC   COMMAND+9+L'QSESID(4),=C' IND' SET 'IND' MODE IN MSG     K2121500
         LA    R0,COMMAND+13+L'QSESID-COMMAND SET MESSAGE LENGTH        K2122000
         B     CDQRES              AND REPLY TO OPERATOR                K2122500
         EJECT                                                          K2123000
* REQUEST FOR 'HOLD' QUEUE                                              K2123500
         SPACE 1                                                        K2124000
CDQHLD   B     CDQHLDE             ENTER $DQ MESSAGE PREPARATION        K2124500
         TM    JQEFLAGS,QUEHOLDA+QUEHOLD1+QUEHOLD2 ANY HOLD             K2125000
         BZ    CDQNXT              LOOP                                 K2125500
         TM    JQEFLAGS,QUEBUSY    TEST FOR BUSY                        K2126000
         BNZ   CDQNXT              YES--GET NEXT JOB                    K2126500
         BAL   R14,CDQCKSID        CHECK FOR PROPER AFFINITY            K2127000
         BAL   R14,CDQCKRTE        CHECK ROUTE CODES                    K2127500
         BR    WC                  GO TO FUNCTION ROUTINE               K2128000
         SPACE 1                                                        K2128500
CDQHLDE  DS    0H                  DISPLAY HOLD COUNT                   K2129000
         MVC   COMMAND+5(5),=CL5'HOLD' SET QUEUE TYPE IN MSG            K2129500
         BAL   WA,CDQSIDNM         PICK-UP SYSTEM NAME                  K2130000
         MVC   COMMAND+10(L'QSESID),0(R15) SET NAME IN MSG              K2130500
         LA    R0,COMMAND+10+L'QSESID-COMMAND COMPUTE MSG LENGTH        K2131000
         TM    CDNFLAG,CDNIND      TEST FOR 'IND' REQUEST               K2131500
         BZ    *+14                BR IF NO                    @OZ29819 K2132000
         MVC   COMMAND+10+L'QSESID(4),=C' IND' SET MESSAGE              K2132500
         LA    R0,COMMAND+14+L'QSESID-COMMAND SET MSG LENGTH            K2133000
        $CWTO  L=(R0)              ISSUE REPLY TO OPERATOR     @OZ29819 K2133500
         B     CDQSIDN             BR TO TEST FOR END OF SCAN  @OZ29819 K2133600
         SPACE 1                                                        K2134000
* END OF QUEUE SCAN                                                     K2134500
         SPACE 1                                                        K2135000
CDQEND   B     *+4                 DUMMY MESSAGE PREPARATION            K2135500
         L     R15,$SSVT           POINT TO SSVT                        K2136000
         L     R1,$SVTGALC-SSVT(,R15) GET TRACK GROUPS ALLOCATED        K2136500
         M     R0,=F'100'          ALLOW FOR PERCENTAGE                 K2137000
         D     R0,$SVTGTOT-SSVT(,R15) DIVIDE BY TOTAL                   K2137500
         $CFCVE VALUE=(R1)         CONVERT TO PRINTABLE                 K2138000
         MVC   COMMAND(3),COMDWORK+2 PLACE IN MESSAGE AREA              K2138500
         MVC   COMMAND+3(26),=C' PERCENT SPOOL UTILIZATION'             K2139000
         $CRET L=29                RETURN WITH LAST MESSAGE             K2139500
         SPACE 1                                                        K2140000
* ROUTE CODE RANGE CHECK ROUTINE                                        K2140500
         SPACE 1                                                        K2141000
CDQCKRTE CLC   JQEPRTRT,CDQRBNDL   CHECK PRINT AGAINST LOW BOUND        K2141500
         BL    CDQCKRTU            TRY PUNCH IF PRINT TOO LOW           K2142000
         CLC   JQEPRTRT,CDQRBNDH   CHECK PRINT AGAINST HIGH BOUND       K2142500
         BNHR  R14                 RETURN IF OK                         K2143000
CDQCKRTU CLC   JQEPUNRT,CDQRBNDL   CHECK AGAINST LOW BOUND              K2143500
         BL    CDQNXT              LOOP                                 K2144000
         CLC   JQEPUNRT,CDQRBNDH   CHECK PUNCH AGAINST HIGH BOUND       K2144500
         BNHR  R14                 RETURN IF 'OK'                       K2145000
         B     CDQNXT              ELSE GET NEXT JQE ELEMENT            K2145500
         SPACE 1                                                        K2146000
*        CHECK FOR AFFINITY IN DESIRED RANGE                            K2146500
CDQCKSID DS    0H                  CHECK FOR SID MATCH                  K2147000
         IC    R15,JQEFLAG2        GET SID AFFINITY FLAGS               K2147500
         TM    CDQSIDLO,QUESYSAF   TEST FOR ANY REQUEST                 K2148000
         BNO   CDQSIDS             NO--LOOK FOR SPECIFIC OR 'ALL'       K2148500
         CLM   R15,1,CDQSIDLO      TEST FOR 'ANY' AFFINITY              K2149000
         BNE   CDQNXT              NO--RETURN TO GET NEXT JOB           K2149500
         BR    R14                 YES--RETURN OK                       K2150000
CDQSIDS  DS    0H                  CHECK FOR SPECIFIC SID OR 'ALL'      K2150500
         IC    R15,CDQSIDLO        GET CURRENT AFFINITY                 K2151000
         EX    R15,CDNQTEST        TEST FOR JOB WITH SAME               K2151500
         BNO   CDQNXT              NO GET NEXT JOB                      K2152000
         BR    R14                 YES--RETURN OK                       K2152500
         SPACE 1                                                        K2153000
*        COMPUTE SID NAME OFFSET FOR MESSAGE                            K2153500
CDQSIDNM DS    0H                  PICK-UP AFFINITY OF JOBS             K2154000
         TM    CDQSIDLO,QUESYSAF   TEST FOR 'ANY' REQUEST               K2154500
         BNO   CDQSPECA            NO--GET SPECIFIC AFFINITY            K2155000
         LA    R15,=CL4'ANY'       SET ADDRESS OF 'ANY' AFF             K2155500
         BR    WA                  AND RETURN                           K2156000
CDQSPECA DS    0H                  REQUEST IS FOR SPECIFIC AFF          K2156500
         SLR   R15,R15             ZERO INSERT REGISTER                 K2157000
         LR    R14,R15             ZERO COUNT REGISTER                  K2157500
         IC    R15,CDQSIDLO        PICK-UP AFFINITY BIT                 K2158000
         N     R15,=A(127)         TURN 'OFF'POSSIBLE 'IND' BIT         K2158500
         LA    R14,1(,R14)         COUNT ONE FOR EACH AFF BIT           K2159000
         SRA   R15,1               SHIFT OUT ONE BIT                    K2159500
         BNZ   *-8                 AND COUNT FOR EACH BIT MOVED OUT     K2160000
         L     R15,$QSE1           POINT TO 1ST QSE                  R4 K2160500
         BCTR  R14,0               LESS ONE FOR DISPLACEMENT            K2161000
         MH    R14,=AL2(QSELEN)    TIMES ELEMENT SIZE          @OZ27300 K2161500
         ALR   R14,R15             PLUS BEG ADDR EQUALS ELEMENT ADDR    K2162000
         USING QSEDSECT,R14        QSE ADDRESSABILITY                   K2162500
         LA    R15,QSESID          POINT TO SYSTEM NAME FOR AFFINITY    K2163000
         BR    WA                  AND RETURN                           K2163500
         DROP  R14                 DROP QSE ADDRESSABILITY              K2164000
         EJECT                                                          K2164500
*********************************************************************** K2165000
*                                                                     * K2165500
*        $D N ITEM PROCESSING                                         * K2166000
*                                                                     * K2166500
*********************************************************************** K2167000
CDNCTR   DS    0H                  CHECK FOR $DN DISPLAY                K2167500
         CLC   CDQSEE(L'CDQPPUD),CDQPPUD  THIS PPU SEARCH ELEMENT   R41 K2169800
         BE    CDNOTALL            YES--SKIP TESTS                  R41 K2169900
         TM    CDNFLAG,CDNALL      TEST FOR 'ALL' REQUEST               K2170000
         BZ    CDNOTALL            NO -- SKIP TESTS                     K2170500
         SLR   R15,R15             ZERO INSERT REGISTER                 K2171000
         IC    R15,CDQSIDLO        PICK-UP CURRENT AFFINITY BIT         K2171500
         N     R15,=A(127)         TURN 'OFF' POSSIBL 'IND' BIT         K2172000
         EX    R15,CDNQTEST        TST FOR JOB OF DESIRED AFFN          K2172500
         BZ    CDQNXT              NO--GET NEXT JOB                     K2173000
         BCTR  R15,0               HAS THE JOB BEEN                     K2173500
         EX    R15,CDNQTEST        PREVIOUSLY DISPLAYED                 K2174000
         BNZ   CDQNXT              IF SO --GET NEXT JOB                 K2174500
CDNOTALL DS    0H                  COME HERE FOR NOT 'ALL ' REQ         K2175000
         LR    WD,R1               SAVE JQE ADDR FOR NEXT JOB SCAN      K2175500
         $CFJMSG OPT=COFQ          DISPLAY QUEUED JOBS                  K2176000
         NOP   *-*                 SPACER TO PREVENT FUTURE ERROR       K2176500
*              THIS LINE DELETED BY APAR NUMBER                @OZ29819 K2177000
* EACH $CWTO MAY ISSUE A $WAIT THUS GIVING OTHER PROCESSORS A CHANCE    K2177500
* TO ALTER THE JOB QUEUE CHAIN FOR THE CURRENT ENTRY                    K2178000
         ICM   R1,7,CDQTYPLO       GET ADDRESS OF QUEUE TYPE   @OZ29819 K2178500
         SLR   R15,R15             CLEAR FOR INSERT            @OZ29819 K2178600
         IC    R15,0(,R1)          GET QUEUE TYPE              @OZ29819 K2178700
        $CFJSCAN PROCESS=CDNPRO,NEXT=CDNNXT,QUEUE=(R15)        @OZ29819 K2179000
         MVC   COMMAND(15),=C'LIST INCOMPLETE' SET MSG                  K2179500
         LA    R0,15               SET LENGTH                           K2180000
         B     CDQRES              RESPOND                              K2180500
CDNPRO   CR    R1,WD               DO THE POINTERS MATCH                K2181000
         BNE   CDNNXT              NEXT ELEMENT UNTIL END OR MATCH      K2181500
*              THIS LINE DELETED BY APAR NUMBER                @OZ29819 K2182000
*              THIS LINE DELETED BY APAR NUMBER                @OZ29819 K2182500
         B     CDQNXT              NEXT ELEMENT ( CHAIN OK )            K2183000
CDNQTEST TM    JQEFLAG2,*-*        **** EXECUTE ONLY ****               K2183500
         EJECT                                                          K2184000
*********************************************************************** K2184500
*                                                                     * K2185000
*        $D Q ITEM PROCESSING                                         * K2185500
*                                                                     * K2186000
*********************************************************************** K2186500
CDQCTR   CH    WF,CDQHLDD          'Q=HOLD' SPECIFIED...       @OZ29819 K2186600
         BE    CDQCTHLD            BR IF YES                   @OZ29819 K2186700
         LA    WE,1(,WE)           INCREMENT COUNTER           @OZ46253 K2186800
         CLI   JQETYPE,$HARDCPY    IS THIS JQE FOR HARDCOPY..  @OZ46253 K2186900
         BNE   CDQCTRA             NO, DO NOT RE-SCAN          @OZ46253 K2187000
         CLC   JQEPRTRT,CDQSLO     PRINT CURRENT LOW...        @OZ46253 K2187010
         BH    CDQCTRB             CHECK FOR NEXT HIGHER.      @OZ46253 K2187020
         CLC   JQEPUNRT,CDQSLO     PUNCH CURRENT LOW...        @OZ46253 K2187030
         BH    CDQCTRC             CHECK FOR NEXT HIGHER.      @OZ46253 K2187040
CDQCTRA  DS    0H                                              @OZ46253 K2187050
         TM    CDNFLAG,CDNTYPE     'Q=' SPECIFIED...           @OZ29819 K2187100
         BO    CDQNXT              BR IF YES                   @OZ29819 K2187200
         TM    JQEFLAGS,QUEHOLDA+QUEHOLD1+QUEHOLD2  JOB HELD...@OZ29819 K2187300
         BZ    CDQNXT              BR IF NO                    @OZ29819 K2187400
         TM    JQEFLAGS,QUEBUSY    JOB ACTIVE...               @OZ29819 K2187500
         BNZ   CDQNXT              BR IF YES                   @OZ29819 K2187600
         BAL   R14,CDQCKRTE        CHECK ROUTE CODES           @OZ29819 K2187700
         BAL   R14,CDQCKSID        CHECK AFFINITY              @OZ29819 K2187800
CDQCTHLD LA    R10,1(,R10)         OK -- BUMP HOLD COUNT       @OZ29819 K2187900
         B     CDQNXT              GO TO NEXT ENTRY                     K2188000
CDQCTRB  DS    0H                                              @OZ46253 K2188100
         CH    WB,JQEPRTRT         HIGHER THAN HI BOUND...     @OZ46253 K2188110
         BL    CDQCTRA             CONTINUE IF YES.            @OZ46253 K2188120
         LH    WB,JQEPRTRT         SET NEW HI BOUND.           @OZ46253 K2188130
         B     CDQCTRD             GO SET RE-SCAN.             @OZ46253 K2188140
CDQCTRC  DS    0H                                              @OZ46253 K2188150
         CH    WB,JQEPUNRT         HIGHER THAN HI BOUND...     @OZ46253 K2188160
         BL    CDQCTRA             CONTINUE IF YES.            @OZ46253 K2188170
         LH    WB,JQEPUNRT         SET NEW HI BOUND.           @OZ46253 K2188180
CDQCTRD  DS    0H                                              @OZ46253 K2188190
         OI    CDNFLAG,CDNRSCAN    FORCE RE-SCAN.              @OZ46253 K2188200
         B     CDQNXT              CONTINUE                    @OZ46253 K2188210
         EJECT                                                          K2188500
CDQS     EQU   *                                                        K2189000
*              THIS LINE DELETED BY APAR NUMBER                @OZ29819 K2189500
CDQXEQD  DC    AL2(CDQXEQ-CDQB),AL3(CDQTYPEC,CDQTYPE9)         @OZ29819 K2190000
CDQOUTD  DC    AL2(CDQOUT-CDQB),AL3(CDQTYPEO,CDQTYPEO)         @OZ29819 K2192000
CDQPPUD  DC    AL2(CDQPPU-CDQB),AL3(CDQTYPEO,CDQTYPEP)         @OZ29819 K2192100
CDQENDD  DC    AL2(CDQEND-CDQB)                                @OZ29819 K2192200
CDQSL    EQU   *-CDQS                                          @OZ29819 K2192300
CDQHLDD  DC    AL2(CDQHLD-CDQB),AL3(CDQQTYPS,CDQTYPE9)         @OZ29819 K2192400
CDQRALLD DC    AL2(1*256+$MAXRJE,0)  DEFAULT ROUTE RANGE       @OZ29819 K2192500
         SPACE 1                                               @OZ29819 K2192700
CDQQTYPS EQU   *                   VALID JOB QUEUE TYPES       @OZ29819 K2192800
CDQTYPEO DC      AL1($OUTPUT)                                  @OZ29819 K2192900
CDQTYPEP DC      AL1($HARDCPY)                                 @OZ29819 K2193000
CDQTYPER DC      AL1($RECEIVE)                                 @OZ29819 K2193100
CDQTYPET DC      AL1($SETUP)                                   @OZ29819 K2193200
CDQTYPEX DC      AL1($XMIT)                                    @OZ29819 K2193300
CDQTYPEI DC      AL1($INPUT)                                   @OZ29819 K2193400
CDQTYPEC DC      AL1($XEQ)                                     @OZ29819 K2193500
CDQTYPE$ DC      AL1(CATSTCCL-X'80')                           @OZ29819 K2193600
CDQTYPE@ DC      AL1(CATTSUCL-X'80')                           @OZ29819 K2193700
CDQTYPEA DC     9AL1(C'A'-X'80'+*-CDQTYPEA)                    @OZ29819 K2193800
CDQTYPEJ DC     9AL1(C'J'-X'80'+*-CDQTYPEJ)                    @OZ29819 K2193900
CDQTYPES DC     8AL1(C'S'-X'80'+*-CDQTYPES)                    @OZ29819 K2194000
CDQTYPE0 DC    10AL1(C'0'-X'80'+*-CDQTYPE0)                    @OZ29819 K2194100
CDQTYPE9 EQU   *-1                                             @OZ29819 K2194200
         SPACE 1                                               @OZ29819 K2194300
CDQSHI   EQU   COMREGSV,2          SCAN HIGH VALUE             @OZ29819 K2194400
CDQSLO   EQU   COMREGSV+2,2        SCAN LOW VALUE              @OZ29819 K2194500
CDQDEFR  EQU   CDQSLO+L'CDQSLO,4   ROUTE CODE RANGE            @OZ29819 K2194600
CDQRBNDH EQU   CDQDEFR,2           HIGH BOUND                        R4 K2195000
CDQRBNDL EQU   CDQDEFR+2,2         LOW BOUND                         R4 K2195500
CDQSIDLO EQU   CDQDEFR+4,1         SID LOW VALUE                     R4 K2196000
CDQSIDHI EQU   CDQDEFR+5,1         SID HIGH VALUE                    R4 K2196500
CDQSE    EQU   CDQDEFR+6,CDQSL     AREA FOR SCAN ELEMENTS            R4 K2197000
CDQSEE   EQU   CDQSE,8             FIRST SCAN ELEMENT          @OZ29819 K2197500
CDQTYPLO EQU   CDQSEE+2,3          FIRST QUEUE                 @OZ29819 K2198000
CDQTYPHI EQU   CDQSEE+5,3          LAST QUEUE                  @OZ29819 K2198500
CDQSECDD EQU   CDQSEE+L'CDQSEE,L'CDQSEE  SECOND SCAN ELEMENT   @OZ29819 K2199000
                                   PRINT OFF - SECTION DELETED @OZ29819 K2199500
*              THIS LINE DELETED BY APAR NUMBER                @OZ29819 K2200000
*              THIS LINE DELETED BY APAR NUMBER                @OZ29819 K2200500
*              THIS LINE DELETED BY APAR NUMBER                @OZ29819 K2201000
*              THIS LINE DELETED BY APAR NUMBER                @OZ29819 K2201500
*              THIS LINE DELETED BY APAR NUMBER                @OZ29819 K2202000
*              THIS LINE DELETED BY APAR NUMBER                @OZ29819 K2202500
*              THIS LINE DELETED BY APAR NUMBER                @OZ29819 K2203000
*              THIS LINE DELETED BY APAR NUMBER                @OZ29819 K2203500
                                   PRINT ON -- SECTION DELETED @OZ29819 K2204000
CDQTSKID DC    AL1(CATSTCID),CL5' STC' MESSAGE FOR SYSTEM TASK          K2204500
CDQLOGID DC    AL1(CATTSUID),CL5' TSU' MESSAGE FOR TIME SHARING USER    K2205000
CDQSESAV EQU   CDQSE+CDQSL,CDQSL   SAVE AREA FOR $DN,Q ELEMENTS         K2205500
CDNFLAG  EQU   CDQSESAV+CDQSL,1    $DN FLAG BYTE                     R4 K2206000
CDNALL   EQU   X'01'               FLAG FOR 'ALL' REQUEST               K2206500
CDNIND   EQU   X'02'               FLAG FOR 'IND' REQUEST               K2207000
CDNROUT  EQU   X'04'               FLAG FOR ROUTE RANGE              R4 K2207500
CDNTYPE  EQU   X'08'               FLAG FOR QUEUE TYPE               R4 K2208000
CDNFLGN  EQU   X'20'               $DN SPECIFIED               @OZ29819 K2208300
CDNRSCAN EQU   X'10'               RE-SCAN CURRENT QUEUE       @OZ29819 K2208400
CDQB     EQU   HASPCJB1            BASE FOR SUB-COMMAND OFFSETS         K2208500
CDQQSEAF DC    X'0001020408102040' QSE AFFINITIES                    R4 K2209000
         EJECT                                                 @OZ29819 K2209100
         LTORG ,                                               @OZ29819 K2209200
         TITLE 'HASP COMMAND PROCESSOR HASPCJ1A - JOB QUEUE COMMANDS (CCK2209500
               ONTINUED)'                                      @OZ29819 K2209600
HASPCJ1A $COMGRUP DF,OQ,PQ         MORE JOB QUEUE COMMANDS     @OZ29819 K2209700
         SPACE 1                                               @OZ29819 K2209800
*********************************************************************** K2210000
*                                                                     * K2210500
*        $D F,D=H/A,JOB=JN-NN,R=DEST1-DEST2                           * K2211000
*                ( NO H OR A = RELEASED JOBS ONLY )                   * K2211500
*                                                                     * K2212000
*********************************************************************** K2212500
CDF      DS    0H                                                    R4 K2213000
         BAL   LINK,COFRTD         SET DEFAULT ROUTE RANGES          R4 K2213500
         LR    WA,R1               SAVE LOW BOUND ONLY               R4 K2214000
         MVI   COMPNTER,CDFRELJ    DISPLAY ONLY NON-HELD JOBS        R4 K2214500
         LR    WB,WA               COPY ROUTING                         K2215000
         SR    WC,WC               SET DEFAULT LOW JOB NUMBER           K2215500
         LH    R10,=H'32767'       SET DEFAULT HIGH                     K2216000
CDFNSPEC BXH   WD,WE,CDFOK         IF NO MORE EXIT                      K2216500
         L     R1,0(,WD)           POINT TO OPERAND                  R4 K2217000
         CLI   1(R1),C'='          THIS EQUAL                        R4 K2217500
         BNE   CDFINVO             ERROR IF NOT                      R4 K2218000
         $CFSEL (D,CDFHA),(J,CDFJ),(R,CDFR) SELECT OPERAND ROUTINE   R4 K2218500
         B     CDFINVO             ERROR EXIT                        R4 K2219000
CDFHA    CLI   2(R1),C'A'          THIS DISPLAY ALL                  R4 K2219500
         BE    CDFSETA             SET ALL IF YES                    R4 K2220000
         CLI   2(R1),C'H'          THIS DISPLAY HELD ONLY            R4 K2220500
         BE    CDFSETH             SET HELD ONLY IF YES              R4 K2221000
         B     CDFINVO             ERROR EXIT                        R4 K2221500
CDFJ     $CFCVB POINTER=(WD),NOK=CDFINVO,NUM=2                       R4 K2222000
         LTR   R1,R1               JOB ZERO                          R4 K2222500
         BZ    CDFINVO             ERROR IF YES                      R4 K2223000
         L     R15,0(,WD)          POINT TO OPERAND                  R4 K2223500
         CLI   2(R15),C'J'         IS THIS JOB                       R4 K2224000
         BE    CDFSETJ             SET JOB IF YES                    R4 K2224500
         CLI   2(R15),C'S'         IS IT STC                         R4 K2225000
         BE    CDFSETS             SET STC IF YES                    R4 K2225500
         CLI   2(R15),C'T'         IS IT TSU                         R4 K2226000
         BE    CDFSETT             SET TSU IF YES                    R4 K2226500
         B     CDFINVO             ERROR EXIT                        R4 K2227000
CDFR     BAL   LINK,COFRTRA        CONVERT DESTINATION RANGE         R4 K2227500
         B     CDFINVO             ERROR                    + 0      R4 K2228000
         LR    WA,R0               SAVE ROUTE               + 4      R4 K2228500
         LR    WB,R1                LIMITS                              K2229000
         B     CDFNSPEC            LOOP TO NEXT SPECIFICATION           K2229500
CDFSETT  AH    R1,=H'10000'        UP BASE FOR TSU                      K2230000
         AH    R0,=H'10000'        UP BASE                              K2230500
CDFSETS  AH    R1,=H'10000'        UP BASE FOR TSU OR STC               K2231000
         AH    R0,=H'10000'        UP BASE                              K2231500
CDFSETJ  LR    WC,R1               SAVE JOB                             K2232000
         LR    R10,R0               LIMITS                              K2232500
         B     CDFNSPEC            GET NEXT SPECIFICATION               K2233000
CDFSETH  MVI   COMPNTER,CDFHOLD    SET HOLD FLAG TEMPORILY              K2233500
         B     CDFNSPEC            GET NEXT SPECIFICATION               K2234000
CDFSETA  MVI   COMPNTER,CDFRELJ+CDFHOLD SET TO DISPLAY ALL JOBS         K2234500
         B     CDFNSPEC            GET NEXT SPECIFICATION               K2235000
         EJECT                                                          K2235500
*********************************************************************** K2236000
*                                                                     * K2236500
*        PREPARE TO SCAN JOES FOR EACH ROUTE CODE                     * K2237000
*                                                                     * K2237500
*********************************************************************** K2238000
         USING JOTDSECT,WF                                              K2238500
         USING JOEDSECT,R1                                              K2239000
CDFOK    STH   WC,CDFLJOB          SET LOW JOB                          K2239500
         STH   R10,CDFHJOB         SET HIGH JOB                         K2240000
         STH   WA,CDFEROUT         SAVE END ROUTE                       K2240500
         STH   WB,CDFCROUT         SAVE STARTING ROUTE                  K2241000
         LA    WD,COMMAND+70-5     POINT TO LAST OUTPUT ELEMENT         K2241500
         ICM   WD,8,COMPNTER       PICK UP JOB TYPE FLAGS               K2242000
         ST    WD,CDFCOMPR-1+CDFFLAGS-CDFFLAGS SET PTR AND FLAGS        K2242500
         L     WF,CDFJOT           POINT TO JOT                         K2243000
*                                    THIS LINE DELETED BY APAR @OZ20010 K2243100
*                                    THIS LINE DELETED BY APAR @OZ20010 K2243200
*                                    THIS LINE DELETED BY APAR @OZ20010 K2243300
         EJECT                                                          K2243500
*********************************************************************** K2244000
*                                                                     * K2244500
*        GET JOE AND PREPARE TO SCAN                                  * K2245000
*                                                                     * K2245500
*********************************************************************** K2246000
CDFNROUT LA    R1,JOTCHRQ-(JOENEXT-JOEDSECT) QUEUE HEAD                 K2246500
         LH    R1,JOENEXT          POINT TO NEXT JOE OFFSET             K2247000
         N     R1,=A(X'0000FFFF')  INSURE OFFSET IS POSITIVE            K2247500
         BZ    CDFNOJOP            LAST JOE -- EXIT                     K2248000
         SLL   R1,2                EXPAND TO BYTE OFFSET             R4 K2248500
         ALR   R1,WF               COMPUTE ACTUAL JOE ADDRESS           K2249000
         MVC   CDFNXTLO,CDFEROUT   SET NEXT LOW ROUTE CODE     @OZ29819 K2249100
CDFMVCHR MVC   CDFSETUP,JOESETUP   MOVE SETUP REQUIREMENTS     @OZ27300 K2249500
         LA    R0,CDFMR1           POINT TO OUTPUT ROUTING           R4 K2250000
         LA    R15,CDFCROUT        POINT TO CURRENT ROUTING          R4 K2250500
         BAL   LINK,COFRTC         CONVERT TO PRINTABLE              R4 K2251000
         MVC   CDFMID,=C'OUT R='   SET MESSAGE HEADER                R4 K2251500
         MVC   CDFMB,=C'F=XXXX C=XXXX T=XXXX W= (NONE) '  BASE MSG   R4 K2252000
         MVC   CDFMBF,CDFORMS      SET FORMS                         R4 K2252500
         MVC   CDFMBC,CDFFCB       SET CARRIAGE                      R4 K2253000
         MVC   CDFMBT,CDFUCS       SET TRAIN                         R4 K2253500
         CLI   CDFWTR,C' '         WRITER BLANK                      R4 K2254000
         BE    SKIP120             SKIP NEXT                         R4 K2254500
         MVC   CDFMBW,CDFWTR       SET WRITER NAME                   R4 K2255000
SKIP120  LA    WD,CDFMB+L'CDFMB    POINT TO NEXT MSG AREA            R4 K2255500
         CLC   CDFLASH,=C'****'    TEST FOR FLASH SPECIFIED          R4 K2256000
         BE    CDFTBRST            BR IF NOT                         R4 K2256500
         MVC   0(3,WD),=C' O='     SET FLASH PREFIX                  R4 K2257000
         MVC   3(L'CDFLASH,WD),CDFLASH  SET FLASH FRAME ID           R4 K2257500
         LA    WD,3+L'CDFLASH(,WD) POINT TO NEXT MSG AREA            R4 K2258000
CDFTBRST TM    CDFCFLAG,$JOEBRST   TEST FOR BURST=YES                R4 K2258500
         BZ    SKIP130             BR IF NOT                         R4 K2259000
         MVC   0(4,WD),=C' B=Y'    SET BURST=YES IN MSG              R4 K2259500
         LA    WD,4(,WD)           POINT TO NEXT MSG AREA            R4 K2260000
SKIP130  MVC   0(7,WD),=C' CLASS ' SET CLASS PREFIX                  R4 K2260500
         LA    WD,7(,WD)           POINT TO FIRST CLASS AREA         R4 K2261000
         EJECT                                                          K2279000
*********************************************************************** K2279500
*                                                                     * K2280000
*        SCAN CLASS QUEUES                                            * K2280500
*                                                                     * K2281000
*********************************************************************** K2281500
         SR    WB,WB               SET FOR CLASS A                      K2282000
         B     CDFACLS             PROCESS CLASS                        K2283000
CDFNCLS  LA    WB,2(0,WB)          UP TO NEXT CLASS                     K2283500
         CH    WB,=H'70'           CHECK FOR MAX NBR CLASSES            K2284000
         BH    CDFEJOE             EXIT FOR THIS CHARACTERISTIC         K2284500
CDFACLS  MVC   1(4,WD),=C'=**,'    SET PATTERN FOR CLASS                K2285000
*********************************************************************** K2290500
*                                                                     * K2291000
*        PASS THROUGH JOES FOR A CLASS                                * K2291500
*                                                                     * K2292000
*********************************************************************** K2292500
         SR    R0,R0               SET COUNT                            K2293000
         LA    R1,JOTCLSQ-(JOENEXT-JOEDSECT)(WB) POINT TO QUEUE         K2294000
CDFNXTJO DS    0H                  GET ANOTHER JOE OF THE SAME CLS      K2294500
*              THIS LINE DELETED BY APAR NUMBER                @OZ29819 K2295000
         LH    R1,JOENEXT          GET NEXT JOE OFFSET                  K2295500
         N     R1,=A(X'0000FFFF')  INSURE OFFSET IS POSITIVE            K2296000
         BZ    CDFECLS             END--TRY NEXT CLASS                  K2296500
         SLL   R1,2                EXPAND TO BYTE OFFSET             R4 K2297000
         ALR   R1,WF               COMPUTE ACTUAL JOE ADDRESS           K2297500
         TM    JOEFLAG,$JOEBUSY    TEST FOR JOE BUSY                    K2298000
         BNZ   CDFNXTJO            IF BUSY FORGET IT                    K2298500
         LH    R14,JOEJQE          PICK-UP JQE OFFSET                   K2299000
         N     R14,=X'0000FFFF'    CLEAR LEFT HALFWORD         @OZ37385 K2299200
         SLL   R14,2               COMPUTE ACTAUAL JQE OFFSET ( * 4)    K2299500
         AL    R14,$JOBQPTR        COMPUTE JQE ADDRESS                  K2300000
         TM    QUEFLAGS(R14),QUEHOLDA+QUEHOLD1 JOB HELD                 K2300500
         BZ    CDFJBNH             IF NOT TEST FOR DESIRES              K2301000
         TM    CDFFLAGS,CDFHOLD    DOES USER WANT HOLD                  K2301500
         BZ    CDFNXTJO            IF NOT FORGET IT                     K2302000
         B     CDFCKR              CHECK RANGE                          K2302500
CDFJBNH  TM    CDFFLAGS,CDFRELJ    DOES USER WANT NON HELD              K2303000
         BZ    CDFNXTJO            IF NOT FORGET IT                     K2303500
CDFCKR   CLC   QUEJOBNO(2,R14),CDFLJOB TEST FOR WITHIN RANGE            K2304000
         BL    CDFNXTJO            IF LOW FORGET IT                     K2304500
         CLC   QUEJOBNO(2,R14),CDFHJOB TEST FOR WITHIN RANGE            K2305000
         BH    CDFNXTJO            IF HIGH FORGET IT                    K2305500
         LH    R15,JOEROUT         GET THE ROUTE CODE          @OZ29819 K2306000
         LTR   R15,R15             INDIRECT ROUTE...           @OZ29819 K2306100
         BNZ   CDFNRTE             IF NO, DO NORMAL ROUTE      @OZ29819 K2306500
         ST    R1,COMWREGS         SAVE JOE POINTER                     K2307000
         BAL   WA,CDFCNVT          CONVERT JOE DISP TO EBCDIC CLS       K2307500
         L     R15,$SSVT           POINT TO THE SSVT                    K2308000
         LA    R15,$SVSCAT-SSVT(,R15)  GET ADDRESS OF SCAT              K2308500
         ALR   R15,R1              COMPUTE THIS CLS LOCATION            K2309000
         L     R1,COMWREGS         RESTORE JOE POINTER                  K2309500
         TM    SCATFLAG-SCADSECT(R15),SCATPRNT TEST FOR NORM PRT        K2310000
         BO    CDFPRTRT            YES--LOOK AT JQE PRT RTE             K2310500
         TM    SCATFLAG-SCADSECT(R15),SCATPNCH TEST FOR NORM PNCH       K2311000
         BZ    CDFNXTJO            NO -- SKIP FURTHER TESTS             K2311500
         LH    R15,QUEPUNRT(,R14)  GET PUNCH ROUTE CODE        @OZ29819 K2312000
         B     CDFNRTE             BR TO TEST ROUTE CODE       @OZ29819 K2312500
         SPACE 1                                               @OZ29819 K2313000
CDFPRTRT LH    R15,QUEPRTRT(,R14)  GET PRINT ROUTE CODE        @OZ29819 K2313500
         SPACE 1                                               @OZ29819 K2314000
CDFNRTE  CH    R15,CDFCROUT        CHECK AGAINST CURRENT RTE CD@OZ29819 K2314500
         BL    CDFNXTJO            BR IF TOO LOW               @OZ29819 K2315000
         CH    R15,CDFNXTLO        CHECK AGAINST NEXT LOW      @OZ29819 K2315500
         BH    CDFNXTJO            BR IF HIGHER                @OZ29819 K2316000
*              THIS LINE DELETED BY APAR NUMBER                @OZ29819 K2316500
         LH    R14,JOECHAR         GET CHARACTERISTIC JOE OFFSET        K2317000
         N     R14,=A(X'0000FFFF') INSURE POSITIVE OFFSET               K2317500
         SLL   R14,2               EXPAND TO BYTE OFFSET             R4 K2318000
         ALR   R14,WF              POINT TO CHARACTERISTIC JOE          K2318500
         CLC   CDFSETUP,JOESETUP-JOEDSECT(R14) CHECK FOR MATCH @OZ27300 K2319000
         BNE   CDFNXTJO            IF NOT FORGET IT                     K2319500
         CH    R15,CDFCROUT        THIS AN EXACT HIT...        @OZ29819 K2319600
         BE    CDFINCR             BR IF YES                   @OZ29819 K2319700
         STH   R15,CDFNXTLO        SET NEW NEXT LOW            @OZ29819 K2319800
         OI    CDFFLAGS,CDFRSCAN   INDICATE RE-SCAN REQUIRED   @OZ29819 K2319900
         B     CDFNXTJO            BR TO TEST NEXT JOE         @OZ29819 K2319910
CDFINCR  LA    R15,1               SET INCREMENT               @OZ29819 K2319920
         AR    R0,R15              UP 1                                 K2320000
         CH    R0,=H'100'          CHECK FOR OVERFLOW                   K2320500
         BL    CDFNXTJO            LOOP                                 K2321000
         CLC   CDFCROUT,CDFEROUT   MORE ROUTE CODES TO TEST... @OZ29819 K2323500
         BL    CDFNXTJO            BR IF YES                   @OZ29819 K2323600
         EJECT                                                          K2324000
*********************************************************************** K2324500
*                                                                     * K2325000
*        PUT COUNT IN RESPONSE COUNT FIELD                            * K2325500
*                                                                     * K2326000
*********************************************************************** K2326500
CDFECLS  LTR   R0,R0               IS THIS ZERO                         K2327000
         BZ    CDFNCLS             IF ZERO DO NEXT CLASS                K2327500
         CH    R0,=H'100'          TEST HIT COUNT              @OZ29819 K2327600
         BNL   CDFOVF              BR IF EXCEEDS 99            @OZ29819 K2327700
         $CFCVE  VALUE=(R0)        CONVERT TO EBCDIC                    K2328000
         MVC   2(2,WD),COMDWORK+3  INSERT COUNT                         K2328500
CDFOVF   BAL   WA,CDFCNVT          CONVERT JOE DISPL TO CLS CHAR        K2329500
         STC   R1,0(0,WD)          STORE RESULT                         K2330000
         LA    WD,5(0,WD)          UP TO NEXT                           K2332000
         OI    CDFFLAGS,CDFJOEOK+CDFSOMJO SET FLAGS                     K2332500
         CLM   WD,7,CDFCOMPR       CHECK FOR OUTPUT REQUIRED            K2333000
         BNH   CDFNCLS             IF NOT GO TO NEXT CLASS              K2333500
         BAL   WC,CDFPRNT          DISPLAY MESSAGE                      K2334000
         MVC   CDFMCCL,=C'CLASS '  SET CONTINUATION CLASS            R4 K2334500
         LA    WD,CDFMCC           POINT TO CONTINUATION CLASS ELEMT R4 K2335000
         B     CDFNCLS             NEXT CLASS                           K2335500
*********************************************************************** K2336000
*                                                                     * K2336500
*        END OF SCAN FOR A GIVEN CHARACTERISTIC                       * K2337000
*                                                                     * K2337500
*********************************************************************** K2338000
CDFEJOE  TM    CDFFLAGS,CDFSOMJO   IS THERE SOMETHING TO PRINT          K2338500
         BZ    CDFEJOA             IF NOT FORGET IT                     K2339000
         BAL   WC,CDFPRNT          DISPLAY MESSAGE                      K2339500
CDFEJOA  LA    R1,JOTCHRQ-(JOENEXT-JOEDSECT) QUEUE HEAD                 K2340000
CDFEJOB  LH    R1,JOENEXT          GET NEXT JOE OFFSET                  K2340500
         N     R1,=A(X'0000FFFF')  INSURE OFFSET IS POSITIVE            K2341000
         BZ    CDFNOJO             LAST--EXIT                           K2341500
         SLL   R1,2                EXPAND TO BYTE OFFSET             R4 K2342000
         ALR   R1,WF               COMPUTE JOE ADDRESS                  K2342500
         CLC   CDFSETUP,JOESETUP   CHECK FOR ONE WE WANT       @OZ27300 K2343000
         BNL   CDFEJOB             IF NOT LOOP                          K2343500
         B     CDFMVCHR            IF SO COPY CHARACTERISTICS           K2344000
         EJECT                                                          K2344500
*********************************************************************** K2345000
*                                                                     * K2345500
*        END OF PASS THROUGH ALL JOES                                 * K2346000
*                                                                     * K2346500
*********************************************************************** K2347000
CDFNOJO  TM    CDFFLAGS,CDFRSCAN   QUEUE RE-SCAN REQUIRED...   @OZ29819 K2347500
         BZ    CDFNOJOP            BR IF NO                    @OZ29819 K2348000
         NI    CDFFLAGS,255-CDFRSCAN  RESET RE-SCAN INDICATOR  @OZ29819 K2348500
         MVC   CDFCROUT,CDFNXTLO   SET NEW CURRENT ROUTE CODE  @OZ29819 K2349000
         B     CDFNROUT            BR TO RE-SCAN QUEUE         @OZ29819 K2349500
CDFNOJOP TM    CDFFLAGS,CDFJOEOK   DID WE FIND ANY                      K2350000
         BZ    CDFEMPTY            EXIT WITH DIAGNOSTIC IF NO           K2350500
         $CRET ,                   RETURN                               K2351000
CDFEMPTY $CRET MSG='NO OUTPUT QUEUED'   RETURN WITH DIAGNOSTIC          K2351500
*********************************************************************** K2352000
*                                                                     * K2352500
*        DISPLAY A LINE                                               * K2353000
*                                                                     * K2353500
*********************************************************************** K2354000
CDFPRNT  DS    0H                                                       K2354500
         LR    R0,WD               POINT TO END + 2                     K2355000
         LA    R1,COMMAND+1        START + 1                            K2355500
         SR    R0,R1               GET COUNT                            K2356000
         $CWTO L=(R0)              DISPLAY MESSAGE                      K2356500
         NI    CDFFLAGS,255-CDFSOMJO TURN OFF FLUSH BIT                 K2357000
*                                    THIS LINE DELETED BY APAR @OZ20010 K2357100
*                                    THIS LINE DELETED BY APAR @OZ20010 K2357200
*                                    THIS LINE DELETED BY APAR @OZ20010 K2357300
         BR    WC                  RETURN                               K2357500
         EJECT                                                          K2358000
*********************************************************************** K2381000
*                                                                     * K2381500
*        MISCELLANEOUS                                                * K2382000
*                                                                     * K2382500
*********************************************************************** K2383000
CDFINVO  L     R1,0(0,WD)          POINT TO INVALID OPERAND             K2383500
         $CFINVO OPERAND=(R1)      EXIT ...                             K2384000
CDFCNVT  DS    0H                  CONVERT JOE DISP TO CLS CHAR         K2385000
         LR    R1,WB               MOVE JOE CLASS TO WORK REGISTER      K2385500
         SRA   R1,1                DIVIDE BY TWO                        K2386000
         L     R15,=A(CLJHLDTB)    POINT TO CONVERSION TABLE            K2386500
         IC    R1,0(R1,R15)        PICK-UP CLASS IN R1                  K2387000
         BR    WA                  AND RETURN                           K2387500
CDFSETUP EQU   COMPNTER,L'JOESETUP ALL CHARACTERISTICS         @OZ27300 K2388500
CDFORMS  EQU   COMPNTER,4          FORMS CHARACTERISTICS                K2389000
CDFFCB   EQU   COMPNTER+4,4        FCB CHARACTERISTICS                  K2389500
CDFUCS   EQU   COMPNTER+8,4        UCS CHARACTERISTICS                  K2390000
CDFWTR   EQU   COMPNTER+12,8       WTR CHARACTERISTICS                  K2390500
CDFLASH  EQU   COMPNTER+20,4       FLASH CHARACTERISTICS             R4 K2391000
CDFCFLAG EQU   COMPNTER+24,1       CHARACTERISTICS FLAGS (JOECFLAG)  R4 K2391500
CDFNXTLO EQU   COMNULOP-10,2       NEXT ROUTE CODE TO SCAN     @OZ29819 K2391600
CDFLJOB  EQU   COMNULOP-8          LOW JOB NUMBER OF RANGE              K2392000
CDFHJOB  EQU   COMNULOP-6          HIGH JOB NUMBER OF RANGE             K2392500
CDFFLAGS EQU   COMNULOP-4          FLAGS                                K2393000
CDFJOEOK EQU   X'80'               AT LEAST ONE JOE HAD INFO            K2393500
CDFSOMJO EQU   X'40'               THIS JOE HAS SOME TO DISPLAY         K2394000
CDFRELJ  EQU   X'20'               DISPLAY RELEASED JOBS                K2394500
CDFHOLD  EQU   X'10'               DISPLAY HELD JOBS                    K2395000
CDFRSCAN EQU   X'08'               JOT RE-SCAN REQUIRED        @OZ29819 K2395100
CDFCOMPR EQU   COMNULOP-3          LAST CLASS ELEMENT ADDRESS           K2395500
CDFCROUT EQU   COMNULOP,2          CURRENT ROUTING             @OZ29819 K2396000
CDFEROUT EQU   COMNULOP+2,2        LAST ROUTING                @OZ29819 K2396500
         USING JQEDSECT,R1         RESTORE JQE ADDRESSABILITY           K2397000
         DROP  WF                                                       K2397500
         SPACE 2                                                        K2398000
CDFMID   EQU   COMMAND,6           TEXT 'OUT R='                     R4 K2398500
CDFMR1   EQU   COMMAND+5,10        TEXT ' RXXX     '                 R4 K2399000
CDFMB    EQU   CDFMR1+10,31        BASE TEXT                         R4 K2399500
CDFMBF   EQU   CDFMB+2,4           FORMS                             R4 K2400000
CDFMBC   EQU   CDFMBF+7,4          CARRAGE                           R4 K2400500
CDFMBT   EQU   CDFMBC+7,4          TRAIN                             R4 K2401000
CDFMBW   EQU   CDFMBT+7,8          WRITER NAME                       R4 K2401500
CDFMCCL  EQU   COMMAND,6           CONTINUATION TEXT 'CLASS '        R4 K2402000
CDFMCC   EQU   CDFMCCL+L'CDFMCCL   CONTINUATION CLASS ELEMENT        R4 K2402500
*              THIS LINE DELETED BY APAR NUMBER                @OZ29819 K2403000
*              THIS LINE DELETED BY APAR NUMBER                @OZ29819 K2403500
*              THIS LINE DELETED BY APAR NUMBER                @OZ29819 K2404000
         EJECT                                                 @OZ29819 K2404500
*********************************************************************** K2405000
*                                                                     * K2405500
*        $P Q,Q=CLASSES,R=DESTINATION -- CANCEL DATA SETS             * K2406500
*                                                                     * K2408500
*********************************************************************** K2409000
         SPACE 2                                                        K2409500
CPQ      DS    0H                  CANCEL OUTPUT DATA SETS              K2410000
         LNR   WB,WE               SET DEFAULT TO NO ROUTE ARGUMENT     K2411000
         XC    CPQCLAS,CPQCLAS     ZERO CLASS SELECTION              R4 K2413500
CPQLOOP  DS    0H                  LOOP THROUGH OPERANDS                K2414000
         BXH   WD,WE,CPQEND        PICK-UP NEXT OPERAND POINTER         K2414500
         LM    R14,R15,0(WD)       PICK-UP POINTERS TO NEXT OPERANDS    K2415000
         CLI   1(R14),C'='         CHECK FOR =                       R4 K2415500
         BNE   CPQINVO             EXIT IF NOT                       R4 K2416000
         CLI   0(R14),C'Q'         CHECK FOR Q                       R4 K2416500
         BE    CPQCLS              BREAK OUT CLASS LIST              R4 K2417000
         CLI   0(R14),C'R'         CHECK FOR ROUTING                 R4 K2417500
         BNE   CPQINVO             ERROR IF NOT                      R4 K2418000
         BAL   LINK,COFRTRA        CONVERT ROUTINGS                  R4 K2418500
         B     CPQINVO             ERROR EXIT               + 0      R4 K2419000
         LR    WB,R0               COPY ANSWER              + 4      R4 K2419500
         CR    R0,R1               SAME VALUE                        R4 K2420500
         BNE   CPQINVO             ERROR IF NOT                      R4 K2421000
         B     CPQLOOP             LOOP                              R4 K2423000
         SPACE 1                                                        K2423500
CPQCLS   DS    0H                  EXTRACT CLASS ARGUMENT               K2424000
         SLR   R15,R14             COMPUTE STRING SIZE                  K2424500
         SH    R15,=H'4'           TEST FOR EXISTENCE OF STRING         K2425000
         BM    CPQINVO             NONE -- ERROR                        K2425500
         CH    R15,*+10            TEST FOR MAX SIZE OF EIGHT           K2426000
         BNH   *+8                 IF NOT HIGH USE SIZE                 K2426500
         LA    R15,L'CPQCLAS-2     ELSE USE MAX SIZE -- EIGHT           K2427000
         L     R1,=A(CVALIDTB)     POINT TO TEST TABLE               R4 K2427500
         EX    R15,CPQCLTST        TEST FOR VALID CHARACTERS            K2428000
         BNZ   CPQINVO             IF INVALID -- EXIT IN ERROR          K2428500
         XC    CPQCLAS,CPQCLAS     ZERO PREVIOUS CLASSES             R4 K2429000
         EX    R15,CPQMVCLS        MOVE CLASS STRING TO SAVE AREA       K2429500
         B     CPQLOOP             AND LOOK FOR MORE OPERANDS           K2430000
         SPACE 1                                                        K2430500
CPQCLTST TRT   2(*-*,R14),0(R1)    *** EXECUTE ONLY ***              R4 K2431000
CPQMVCLS MVC   CPQCLAS(*-*),2(R14) **** EXECUTE ONLY ****               K2431500
         SPACE 1                                                        K2432000
CPQINVO  DS    0H                  INVLAID OPERAND ROUTINE              K2432500
         L     R1,0(,WD)           POINT TO INVALID OPERAND             K2433000
         $CFINVO OPERAND=(R1)      DISPLAY INVALID OPERAND              K2433500
         SPACE 2                                                        K2434000
CPQEND   DS    0H                  END OF OPERAND SCAN                  K2434500
        $QSUSE                     REQUEST ACCESS TO CKPT DATA      R41 K2434600
         SLR   R10,R10             ZERO HIT RECORDER                    K2435000
         SLR   WD,WD               ZERO CLASS OFFSET REGISTER           K2435500
         SLR   R0,R0               ZERO CLASS INSERT REGISTER           K2436000
         CLI   CPQCLAS,0           TEST FOR NO CLASS STRING SUPPLIED    K2437000
         BNE   CPQNALL             NOT ALL CLASSES TO BE CANCELLED      K2437500
         BCTR  WD,0                LESS ONE                             K2438000
         BCTR  WD,0                LESS ONE                             K2438500
         LA    WA,CPQALLP          POINT TO END OF JOE EXIT             K2439000
         BR    WA                  GO THERE                             K2439500
CPQNALL  DS    0H                  CANCEL A SELECTED NBR OF CLASSES     K2440000
         LA    WA,CPQONE           POINT TO END OF JOE EXIT             K2440500
         BR    WA                  GO THERE                             K2441000
         SPACE 1                                                        K2441500
CPQALLP  DS    0H                  ALL CLASSES LOOP                     K2442000
         LA    WD,2(,WD)           GET NEXT CLASS OFFSET                K2442500
         CH    WD,=H'70'           TEST FOR LAST CLASS                  K2443000
         BH    CPQFINI             YES--EXIT ROUTINE                    K2443500
         LR    R15,WD              SAVE WD IN R15                       K2444000
         SRA   R15,1               DIVIDE BY TWO                        K2444500
         L     R14,=A(CLJHLDTB)    POINT TO CLASS CNVT TABLE            K2445000
         IC    R0,0(R15,R14)       PICK-UP EBCDIC CLASS                 K2445500
         B     CPQJOT              GO SCAN JOT FOR THIS CLASS           K2451000
         SPACE 1                                                        K2451500
CPQONE   DS    0H                  REQUEST FOR UP TO EIGHT CLASSES      K2452000
         IC    R0,CPQCLAS          PICK-UP POSSIBLE CLASS CHARACTER     K2453000
         NI    CPQCLAS,255-X'C0'   REDUCE TO JOE DISPLACEMENT           K2454000
         BZ    CPQFINI             EXIT IF LAST CLASS                   K2454500
         IC    WD,CPQCLAS          PICK-UP PSEUDO JOT OFFSET            K2455000
         IC    WD,CPQTABLE-1(WD)   PICK-UP ACTUAL JOT OFFSET            K2456000
         MVC   CPQCLAS(L'CPQCLAS-1),CPQCLAS+1 MOVE CLASS(ES) DOWN       K2458000
CPQJOT   DS    0H                  SCAN JOT LOOKING FOR JOES TO CNCL    K2458500
         L     WF,CDFJOT           POINT TO THE JOT                     K2459000
         PUSH  USING               SAVE USING STATUS                    K2459500
         USING JOTDSECT,WF         JOT ADDRESSABILITY                   K2460000
         LA    R1,JOTCLSQ-(JOENEXT-JOEDSECT)(WD) PT TO JOE BFORE CLS    K2461000
         USING JOEDSECT,R1         JOE ADDRESSABILITY                   K2463000
CPQNXTJO DS    0H                  GET ANOTHER JOE                      K2463500
         LH    R1,JOENEXT          GET OFFSET TO NEXT JOE               K2464000
         N     R1,=A(X'0000FFFF')  INSURE OFFSET IS POSITIVE            K2464500
         BZR   WA                  LAST JOE -- EXIT                     K2465000
         SLL   R1,2                EXPAND TO BYTE OFFSET             R4 K2465500
         ALR   R1,WF               COMPUTE JOE ADDRESS                  K2466000
         TM    JOEFLAG,$JOEBUSY    TEST FOR ACTIVE JOE                  K2466500
         BNZ   CPQNXTJO            IF YES -- GET ANOTHER                K2467000
         LTR   WB,WB               TEST FOR SELECTIVE CANCEL BY ROUT    K2468000
         BM    CPQDELET            NO--DELETE THIS JOE                  K2468500
         LH    R15,JOEROUT         GET THE ROUTE CODE          @OZ29819 K2469000
         LTR   R15,R15             INDIRECT ROUTE...           @OZ29819 K2469100
         BZ    CPQIRTE             IF YES, EXAMINE JQE         @OZ29819 K2469500
         CH    WB,JOEROUT          NO--TEST FOR ROUTING MATCH           K2470000
         BNE   CPQNXTJO            NO--GET NEXT JOE                     K2470500
         B     CPQDELET            YES--DELETE THIS JOE                 K2471000
CPQIRTE  DS    0H                  TEST JQE FOR ROUTE MATCH             K2471500
         LH    R14,JOEJQE          POINT TO JQE OFFSET                  K2472000
         N     R14,=X'0000FFFF'    CLEAR LEFT HALFWORD         @OZ37385 K2472200
         SLL   R14,2               COMPUTE JQE OFFSET ( * 4)            K2472500
         AL    R14,$JOBQPTR        COMPUTE JQE ADDRESS                  K2473000
         USING JQEDSECT,R14        JQE ADDRESSABILITY                   K2473500
         L     R15,$SSVT           POINT TO THE SSVT                    K2474000
         USING SSVT,R15            SSVT ADDRESSABILITY                  K2474500
         LA    R15,$SVSCAT         POINT TO SYSOUT CLS ATTRIBUTE TBL    K2475000
         DROP  R15                 FORGET SSVT ADDRESSABILITY           K2475500
         ALR   R15,R0              COMPUTE LOC OF THIS CLS IN SCAT      K2476000
         USING SCADSECT,R15        SCAT ADDRESSABILITY                  K2476500
         TM    SCATFLAG,SCATPRNT   IS CLASS NORMALLY PRINTED            K2477000
         LH    WE,JQEPRTRT         PICK-UP POSSIBLE PRINT ROUTING       K2477500
         BO    CPQRTEST            YES--TEST FOR ROUTE MATCH            K2478000
         LH    WE,JQEPUNRT         PICK-UP POSSIBLE PUNCH ROUTING       K2478500
         TM    SCATFLAG,SCATPNCH   TEST FOR PUNCH CLASS                 K2479000
         BZ    CPQNXTJO            NO--GET NEXT DATA SET                K2479500
CPQRTEST DS    0H                  TEST FOR ROUTE CODE MATCH            K2480000
         CLR   WB,WE               TEST FOR MATCH                       K2480500
         BNE   CPQNXTJO            NO--GET NEXT DATA SET                K2481000
CPQDELET DS    0H                  DELETE THIS DATA SET                 K2490500
         LR    WF,R0               SAVE R0 OVER DELETE                  K2491500
         LR    R10,R1              SET HIT REGISTER                     K2492500
         $#REM WORK=(R1)           DELETE THIS JOE                      K2493000
         LR    R0,WF               RESTORE CLASS                        K2494000
         LR    R1,R10              RELOAD JOE ADDRESS               R41 K2494600
         TM    JOEFLAG,$JOESPIN    IS THIS A SPIN DATA SET...       R41 K2494700
         BZ    CPQJOT              BR IF NO                         R41 K2494800
         L     R15,=A($IOTPUR)     GET ADDR OF IOT PURGE RTN        R41 K2494900
         BALR  LINK,R15            GO TO PURGE SPIN DS TRACKS       R41 K2495000
         POP   USING               RESTORE USINGS                   R41 K2495100
         B     CPQJOT              AND GET NEXT JOE TO DELETE           K2495200
         SPACE 1                                                        K2495500
CPQFINI  DS    0H                  FINISHED WITH DATA SET DELETE        K2496000
         LTR   R10,R10             TEST FOR ANY CANCELLED               K2496500
         BNZ   CPQCANCL            YES -- RETURN 'OK'                   K2497000
         $CRET MSG='NO DATA SET(S) CANCELLED'                           K2497500
         SPACE 1                                                        K2498000
CPQCANCL DS    0H                  RETURN 'OK'                          K2498500
         $CRET MSG=OK              RETURN TO OPERATOR                   K2499000
         SPACE 2                                                        K2499500
CPQCLAS  EQU   COMREGSV,9          CLASS STRING SAVE AREA               K2500000
         SPACE 1                                                        K2500500
CPQTABLE DS    0H                  JOT CONVERSION TABLE                 K2501000
         DC    AL1(0,2,4,6,8,10,12,14,16,18)         A-I OR *,A-I    R4 K2501500
         DC    6AL1(0)                                               R4 K2502000
         DC    AL1(18,20,22,24,26,28,30,32,34,36)    J-R             R4 K2502500
         DC    7AL1(0)                                               R4 K2503000
         DC    AL1(36,38,40,42,44,46,48,50,52)       S-Z             R4 K2503500
         DC    5AL1(0)                                               R4 K2504000
         DC    AL1(52,54,56,58,60,62,64,66,68,70,72) 0-9             R4 K2504500
         EJECT                                                          K2505000
*********************************************************************** K2505500
*                                                                     * K2506000
*        $O Q,Q=CLASSES,CANCEL,R=DESTINATION -- OUTPUT HELD DATA SET  * K2506500
*                                                                     * K2507000
*********************************************************************** K2507500
         SPACE 2                                                        K2508000
COQINVO  EQU   CPQINVO             EQUATE ERROR ROUTINE                 K2508500
COQ      DS    0H                  FREE OR CANCEL HELD DATA SETS        K2509000
         MVI   COQFLAGS,0          TURN OFF ALL FLAGS                   K2509500
        $TIME  ,                   GET CURRENT DATE IN R1           R41 K2509600
         ST    R1,COQSVCRD         SAVE IT                          R41 K2509700
COQLOOP  BXH   WD,WE,COQEND        SCAN ALL OPERANDS                    K2510000
         LM    R1,WA,0(WD)         PICK-UP OPERAND POINTERS             K2510500
         CLI   0(R1),C'C'          THIS CANCEL                       R4 K2511000
         BE    COQCANCL            CANCEL IF YES                     R4 K2511500
         CLI   1(R1),C'='          THIS EQUAL                        R4 K2512000
         BNE   COQINVO             ERROR EXIT IF NOT                 R4 K2512500
         CLI   0(R1),C'Q'          CLASS STRING                      R4 K2513000
         BE    COQCLAS             BREAK OUT CLASSES IF YES          R4 K2513500
         CLI   0(R1),C'D'          CUT-OFF DATE SPECIFIED...        R41 K2513600
         BE    COQDATE             BR IF YES                        R41 K2513700
         CLI   0(R1),C'R'          ROUTE CODE                        R4 K2514000
         BNE   COQINVO             ERROR EXIT IF NOT                 R4 K2514500
         BAL   LINK,COFRTRA        CONVERT TO ROUTE CODE             R4 K2515000
         B     CPQINVO             ERROR EXIT               + 0      R4 K2515500
         LR    R10,R0              COPY ANSWER              + 4      R4 K2516000
         CR    R0,R1               SAME                              R4 K2516500
         BNE   CPQINVO             ERROR IF NOT                      R4 K2517000
         OI    COQFLAGS,COQRTE     FLAG ROUTING DESIRED              R4 K2517500
         B     COQLOOP             LOOP                              R4 K2518000
COQCLAS  DS    0H                                                    R4 K2518500
         SLR   WA,R1               COMPUTE OPERAND SIZE                 K2519000
         SH    WA,=H'4'            LESS '4' FOR MACHINE 'EX'            K2519500
         BM    COQINVO             IF NEGATIVE -- ERROR                 K2520000
         CH    WA,*+10             CHECK WITH MAX OF '8' CHARACTERS     K2520500
         BNH   *+8                 LRSS THAN OR EQUAL 'OK'              K2521000
         LA    WA,7                SET MAX CLASS STRING LENGTH          K2521500
         L     R14,=A(CVALIDTB)    POINT TO TEST TABLE               R4 K2522000
         EX    WA,COQVALID         TEST FOR VALID CLASS CHARACTERS      K2522500
         BNZ   COQINVO             IF ANY INVALID--ERROR                K2523000
         MVI   COQCLASS,C' '       SET CLASS AREA TO BLANKS             K2523500
         MVC   COQCLASS+1(L'COQCLASS-1),COQCLASS  DITTO                 K2524000
         EX    WA,COQMVCLS         MOVE CLASSES INTO SAVE AREA          K2524500
         OI    COQFLAGS,COQCLS     FLAG CLASS STRING EXISTS             K2525000
         B     COQLOOP             AND LOOP FOR MORE OPERANDS           K2525500
         SPACE 1                                                        K2526000
COQVALID TRT   2(*-*,R1),0(R14)    *** EXECUTE ONLY ***              R4 K2526500
COQMVCLS MVC   COQCLASS(*-*),2(R1) **** EXECUTE ONLY ****               K2527000
         SPACE 2                                                        K2527500
COQCANCL DS    0H                  REQUEST TO CANCEL DATA SETS          K2528000
         OI    COQFLAGS,COQCNCL    SET FLAGS AS SUCH                    K2528500
         B     COQLOOP             AND LOOP FOR MORE OPERANDS           K2529000
         SPACE 2                                                    R41 K2529100
COQDATE  SLR   WA,R1               ENSURE                           R41 K2529200
         SH    WA,=H'3'             AT LEAST 1                      R41 K2529300
         BNP   COQINVO               AND NOT                        R41 K2529400
         CH    WA,=H'5'               MORE THAN                     R41 K2529500
         BH    COQINVO                 5 DIGITS                     R41 K2529600
         LR    R0,WA               RELOAD VALUE LENGTH              R41 K2529700
         LR    LINK,R1              AND OPERAND POINTER             R41 K2529800
         SPACE 1                                                    R41 K2529900
COQDATVL LA    LINK,1(,LINK)       ENSURE                           R41 K2530000
         CLI   1(LINK),C'0'         OPERAND                         R41 K2530100
         BL    COQINVO               VALUE                          R41 K2530200
         CLI   1(LINK),C'9'           IS                            R41 K2530300
         BH    COQINVO                 STRICTLY                     R41 K2530400
         BCT   R0,COQDATVL              NUMERIC                     R41 K2530500
         SPACE 1                                                    R41 K2530600
         BCTR  WA,0                REDUCE FOR EXECUTE               R41 K2530700
         EX    WA,COQDATPK         CONVERT VALUE TO PACKED DECIMAL  R41 K2530800
         CH    WA,=H'1'            TEST FORM OF VALUE               R41 K2530900
         BH    COQYYDDD            BR IF NOT NN (DAYS)              R41 K2531000
        $TIME  ,                   GET CURRENT DATE IN R1           R41 K2531100
         SLR   R0,R0               CLEAR R0                         R41 K2531200
         STM   R0,R1,COMDWORK      STORE PACKED DECIMAL DATE        R41 K2531300
         CVB   R1,PCER1            CONVERT DAYS TO BINARY           R41 K2531400
         CVB   R0,COMDWORK         CONVERT DATE TO BINARY           R41 K2531500
         CLC   PCER1+6(2),COMDWORK+6  CUT-OFF DATE LAST YEAR...     R41 K2531600
         BL    COQYYOK             BR IF NO                         R41 K2531700
         LA    R1,1000-365(,R1)    IGNORE DAYS 366 - 999            R41 K2531800
         MVO   COMDWORK+5(3),COMDWORK+5(1)  ISOLATE CURRENT YEAR    R41 K2531900
         CVB   LINK,COMDWORK       CONVERT YEAR TO BINARY           R41 K2532000
         BCTR  LINK,0              BACK UP 1 YEAR                   R41 K2532100
         N     LINK,=F'3'          TEST FOR LEAP YEAR               R41 K2532200
         BNZ   COQYYOK             BR IF NO                         R41 K2532300
         BCTR  R1,0                ACKNOWLEDGE DAY 366              R41 K2532400
         SPACE 1                                                    R41 K2532500
COQYYOK  SR    R0,R1               GET CUT-OFF DATE                 R41 K2532600
         BNM   *+6                 BR IF THIS CENTURY               R41 K2532700
         SLR   R0,R0               CUT-OFF AT TURN OF CENTURY       R41 K2532800
         CVD   R0,PCER1            CONVERT RESULT TO PACKED DECIMAL R41 K2532900
         MVC   COQSVCRD,PCER1+4    STORE CUT-OFF DATE               R41 K2533000
         OI    COQSVCRD+3,X'0F'    MAKE 'PRINTABLE'                 R41 K2533100
         B     COQLOOP             BR TO TEST FOR MORE OPERANDS     R41 K2533200
         SPACE 1                                                    R41 K2533300
COQYYDDD CH    WA,=H'4'            TEST FOR YYDDD                   R41 K2533400
         BNE   COQINVO             INVALID IF NO                    R41 K2533500
         MVC   COQSVCRD,PCER1+4    STORE CUT-OFF DATE               R41 K2533600
         B     COQLOOP             BR TO TEST FOR MORE OPERANDS     R41 K2533700
         SPACE 1                                                    R41 K2533800
COQDATPK PACK  PCER1(8),2(*-*,R1)  *** EXECUTE ONLY ***             R41 K2533900
         SPACE 1                                                    R41 K2534000
COQEND   DS    0H                  END OF OPERANDS                      K2534100
         LR    WA,R10              COPY ROUTE CODE                   R4 K2534200
         SLR   R10,R10             SET HIT FLAG TO ZERO                 K2534300
         $CFJSCAN PROCESS=COQPRO,NEXT=COQNEXT,EMPTY=COQNONE,           CK2534400
               IGNORE=COQIGN       SCAN THE JOB QUEUE                   K2534500
         SPACE 1                                                        K2534600
         LTR   R10,R10             WERE ANY JOBS FOUND WITH HLD D S     K2534700
         BZ    COQNOHLD            NO--EXIT WITH DIAGNOSTIC             K2534800
COQPOST  DS    0H                                              @OZ46407 K2534850
         L     R15,$PSOPCE         POINT TO PSO PCE                  R4 K2534900
         $POST (R15),WORK          POST FOR WORK                        K2535000
         MVC   COMMAND(21),=C'DATA SETS RELEASED TO' SET BASIC MSG   R4 K2535100
         LA    R0,COMMAND+18-COMMAND SET MESSAGE LENGTH                 K2535500
         TM    COQFLAGS,COQCNCL    TEST FOR DATA SETS CANCELLED         K2536000
         BZ    COQRERTE            NO--TEST FOR RE-ROUTING              K2536500
         MVC   COMMAND+10(9),=C'CANCELLED' SET DATA SETS CANCELLED      K2537000
         LA    R0,COMMAND+19-COMMAND SET MESSAGE LENGTH                 K2537500
         B     COQ$WTO             AND EXIT WITH RESPOMSE               K2538000
COQRERTE DS    0H                  TEST FOR DATA SETS RE-ROUTED         K2538500
         TM    COQFLAGS,COQRTE     TEST FOR RE-ROUTING                  K2539000
         BZ    COQ$WTO             NO--SEND MESSAGE                     K2539500
         LA    R15,COMPNTER        POINT TO ROUTE CODE               R4 K2540000
         STH   WA,COMPNTER         SET ROUTE CODE                    R4 K2540500
         LA    R0,COMMAND+21       POINT TO TEXT AREA                R4 K2541000
         BAL   LINK,COFRTC         CONVERT TO EBCDIC                 R4 K2541500
         LA    R0,COMMAND+21+9-COMMAND SET LENGTH OF MESSAGE         R4 K2542000
COQ$WTO  DS    0H                  RETURN WITH RESPONSE                 K2542500
         $CRET L=(R0)              EXIT WITH RESPONSE                   K2543000
         SPACE 1                                                        K2543500
*        EXIT WITH MESSAGE THAT NONE WERE FREED/CANCELLED               K2544000
COQNOHLD DS    0H                                                       K2544500
         $CRET MSG='NO HELD DATA SETS'                                  K2545000
         SPACE 2                                                        K2545500
COQNONE  DS    0H                  NO JOB(S) WERE IN THE QUEUE          K2546000
        $CRET  MSG='JOB(S) NOT FOUND'  EXIT WITH DIAGNOSTIC         R41 K2546500
         SPACE 2                                                        K2547000
COQPRO   DS    0H                  TEST FOR HELD DATA SETS              K2547500
         LH    WB,JQEHLDCT         TEST HOLD COUNT                      K2548000
         LTR   WB,WB               TEST FOR NONE                        K2548500
         BZ    COQNEXT             NONE--GET NEXT JOB                   K2549000
         LR    R10,R1              SET HIT FLAG                         K2549500
         LR    WB,R1               SAVE JQE ADDRESS OVER GETMAIN        K2550000
         SPACE 1                                                        K2550500
*        GETMAIN AREA TO BUILD PSO ELEMENT                              K2551000
         SPACE 1                                                        K2551500
         GETMAIN RC,LV=PSOLNGTH,SP=0 GET STORAGE FOR PSO ELEMENT        K2552000
         SPACE 1                                                        K2552500
         LR    WD,R1               SAVE GOTTEN AREA ADDRESS             K2553000
         LTR   R15,R15             TEST FOR STORAGE AVAILABLE           K2554000
         BNZ   COQNOSTR            NONE--ISSUE DIAGNOSTIC               K2554500
         USING PSODSECT,WD         PSO ADDRESSABILITY                   K2555000
         LR    R0,R1               CLEAR                            R41 K2555500
         LA    R1,PSOLNGTH          PSO                             R41 K2556000
         MVCL  R0,R14                STORAGE                        R41 K2556100
         LR    R1,WB               POINT TO JQE                     R41 K2556200
         OI    PSOFLG1,PSOFHLD+PSOFJOBI+PSOFJOBN SET PSO FLAGS          K2556500
         MVC   PSOCRDT,COQSVCRD    SET CUT-OFF DATE IN ELEMENT      R41 K2556600
         TM    COQFLAGS,COQCLS     TEST FOR CLASS STRING PROVIDED       K2557000
         BZ    *+14                NONE--DON'T SET                      K2557500
         OI    PSOFLG1,PSOFCLAS    SET PSO FLAG                         K2558000
         MVC   PSOCLAS,COQCLASS    SET CLASS STRING INTO PSO ELEMENT    K2558500
         OI    PSOFLG2,PSOFDONE+PSOF$O SET ADDITIONAL PSO FLAGS         K2559000
         MVC   PSOJOBN,JQEJNAME    SET JOB NAME IN PSO ELEMENT          K2559500
         MVC   PSOJOBNO,JQEJOBNO   SET JOB NBR IN PSO ELEMENT           K2560000
         TM    COQFLAGS,COQCNCL    TEST FOR CANCEL REQUEST              K2560500
         BZ    *+12                NO--TEST FOR RE-ROUTING              K2561000
         OI    PSOUFLG,PSOFDELC    SET CANCEL REQUIRED                  K2561500
         B     COQQUEUE            GO QUEUE ELEMENT TO CHAIN            K2562000
         OI    PSOUFLG,PSOFRLSE    SET RELEASE DATA SET                 K2562500
         TM    COQFLAGS,COQRTE     TEST FOR RE-ROUTING DESIRED          K2563000
         BZ    *+12                NO--GO QUEUE ELEMENT                 K2563500
         STH   WA,PSOROUTE         SAVE ROUTE CODE                      K2564000
         OI    PSOUFLG,PSOFROUT    AND SET APPROPRIATE FLAG             K2564500
COQQUEUE DS    0H                  QUEUE ELEMENT TO END OF CHAIN        K2565000
         LR    R15,WD              SAVE ELEMENT ADDRESS                 K2565500
         LA    WD,$OQUEUE-(PSONEXT-PSODSECT) POINT TO HEAD OF QUEUE     K2566000
         L     R0,PSONEXT          PT TO NEXT ELEMENT                   K2566500
         LTR   R0,R0               TEST FOR LAST ELEMENT                K2567000
         BZ    *+10                YES--SET NEW LAST ELEMENT            K2567500
         LR    WD,R0               PT TO NEXT ELEMENT                   K2568000
         B     *-12                AND LOOP TILL LAST ELEMENT           K2568500
         ST    R15,PSONEXT         CHAIN ELEMENT INTO                   K2569000
         B     COQNEXT             AND GET NEXT JOB                     K2569500
         DROP  WD                  DROP PSO ADDRESSABILITY              K2570000
         SPACE 2                                                        K2570500
*        MESSAGE NO STORAGE AVAILABLE                                   K2571000
         SPACE 1                                                        K2571500
COQNOSTR DS    0H                                                       K2572000
        $CWTO  MSG='NO STORAGE AVAILABLE'  SEND DIAG MESSAGE   @OZ46407 K2572500
         B     COQPOST             POST PSO PROCESSOR          @OZ46407 K2572600
         SPACE 2                                                        K2573000
*        $OQ EQUATES                                                    K2573500
         SPACE 1                                                        K2574000
COQFLAGS EQU   COMEWORK,1          OPTION FLAGS                         K2574500
COQCLASS EQU   COMJNAME,8          SAVE AREA FOR CLASS STRING           K2575000
COQSVCRD EQU   COMREGSV,4          AREA FOR SAVING CUT-OFF DATE     R41 K2575100
COQCLS   EQU   X'80'               FLAG FOR CLASS STRING EXISTS         K2575500
COQCNCL  EQU   X'40'               FLAG FOR CANCEL HELD DATA SETS       K2576000
COQRTE   EQU   X'20'               FLAG FOR RE-ROUTING DESIRED          K2576500
         EJECT                                                 @OZ29819 K2577000
         LTORG ,                                                        K2577500
 TITLE 'HASP COMMAND PROCESSOR HASPCJB2 - JOB LIST COMMANDS'            K2578000
HASPCJB2 $COMGRUP  AJ,AS,AT,CJ,CS,CT,DJ,DS,DT,EJ,HJ,HS,HT,LJ,LS,LT,    CK2578500
               PJ,PS,PT,DELAY=YES  DECLARE SUB-PROCESSOR                K2579000
*********************************************************************** K2579500
*                                                                     * K2580000
*        JOB NUMBER LISTS ARE OF THE FOLLOWING FORM                   * K2580500
*                                                                     * K2581000
*        $V JXXN1-M1,N2-M2,...,NX-MX                                  * K2581500
*        $V    = HASP COMMAND VERB                                    * K2582000
*        JXX   = JOB, JB, JOBS, ETC. ( J IS ONLY ID REQUIRED )        * K2582500
*        NI-MI ( I=1 TO X ) = PAIR OF START STOP VALUES, IE. 1-10     * K2583000
*              INDICATING THAT JOBS 1,2,3,4,5,6,7,8,9,10 ARE          * K2583500
*              DESIRED. ( -M VALUES ARE OPTIONAL )                    * K2584000
*                                                                     * K2584500
* NOTES                                                               * K2585000
*                                                                     * K2585500
*    (1) A RESPONSE IS REQUIRED FOR EACH JOB                          * K2586000
*                                                                     * K2586500
*    (2) COMNULOP IS USED FOR FLAGS DURING PROCESSING AS FOLLOWS      * K2587000
*                                                                     * K2587500
*              X'80' - A JOB WAS FOUND DURING SCAN FOR JOBS           * K2588000
*              X'40' - THE VERB IS C WITH DUMP SPECIFIED              * K2588500
*              X'02' - THE VERB IS P                                  * K2589000
*              X'01' - THE VERB IS C WITH PURGE SPECIFIED             * K2589500
*                                                                     * K2590000
*        THESE DEFINITIONS MUST NOT BE CHANGED WITHOUT CHANGING       * K2590500
*        THE $JCAN MACRO INSTRUCTION.                                 * K2591000
*                                                                     * K2591500
*********************************************************************** K2592000
CCJFJOBF EQU   X'80'               JOB FOUND FLAG                       K2592500
CCJFDUMP EQU   X'40'               VERB IS C WITH DUMP FLAG             K2593000
CPJQOPER EQU   X'10'               CANCEL A JOB(S) DATA SETS            K2593500
CCJFDISP EQU   X'08'               OUTPUT IS DISPLAY ONLY      @OZ40275 K2593600
CLJHOLD  EQU   X'04'               LIST HELD DATA SETS FLAG             K2594000
CCJFSTOP EQU   X'02'               VERB IS P (STOP) FLAG                K2594500
CCJFPURG EQU   X'01'               VERB IS C WITH PURGE FLAG            K2595000
CPJQCLS  EQU   COMREGSV,9          SAVE AREA FOR CLASSES TO BE CNCLD    K2595500
         CLC   COMVERB(5),=C'PJES2'  CHECK FOR STOP JES2                K2596000
         BNE   CAJNJES2            NO--CONTINUE JOB LIST COMMANDS       K2596500
         LH    R1,=Y(CPJES2-HASPCSY1)  SET OFFSET TO PROCESSOR          K2597000
         L     BASE3,=A(HASPCSY1)  PT TO SUB-PROCESSOR FOR $PJES2       K2597500
         ALR   R1,BASE3            COMPUTE ENTRY ADDRESS                K2598000
         BR    BASE3               GO STOP JES2                         K2598500
CAJNJES2 DS    0H                  NOT $PJES2 COMMAND                   K2599000
         CLC   COMVERB(4),=C'LSYS' CHECK FOR LIST SYSTEM STATUS         K2599500
         BNE   CAJNLSYS            NO--SKIP SETTING OFFSETS             K2600000
         LH    R1,=Y(CLSYS-HASPCSY1) SET OFFSET TO $LSYS PROCESSOR      K2600500
         L     BASE3,=A(HASPCSY1)  POINT TO SYSTEM COMMANDS             K2601000
         ALR   R1,BASE3            COMPUTE $LSYS ENRTY ADDRESS          K2601500
         BR    BASE3               ENTER SYSTEM COMMAND GROUP           K2602000
         EJECT                                                 @OZ40275 K2602100
CAJNLSYS DS    0H                  NOT $LSYS COMMAND                    K2602500
         LR    WB,R1               SAVE OFFSET TO JOB LIST              K2603000
* HIGH BYTE OF COMNULOP IS ZERO                                         K2603500
         CLI   COMVERB,C'D'        TEST COMMAND                @OZ40275 K2603600
         BE    CAJDISP             BR IF 'D'                   @OZ40275 K2603650
         CLI   COMVERB,C'L'        TEST COMMAND                @OZ40275 K2603700
         BE    CAJDISP             BR IF 'L'                   @OZ40275 K2603750
         B     CAJLOOP             BR TO PROCESS COMMAND       @OZ40275 K2603800
         SPACE 1                                               @OZ40275 K2603850
CAJDISP  OI    COMNULOP,CCJFDISP   INDICATE DISPLAY ONLY       @OZ40275 K2603900
         SPACE 1                                               @OZ40275 K2603950
CAJLOOP  L     R1,0(0,WD)          POINT TO OPERAND                     K2604000
         CLI   0(R1),C'0'          DOES IT START WITH NUMERIC           K2604500
         BNL   CAJLOOPC            IF SO CONTINUE CONVERSION            K2605000
         SLR   WC,WC               ASSUME BASE FOR JX...                K2605500
         CLI   0(R1),C'J'          IS IT JOB                            K2606000
         BE    CAJLOOPC            CONVERT IF YES                       K2606500
         LH    WC,=H'10000'        ASSUME BASE FOR SX...                K2607000
         CLI   0(R1),C'S'          IS IT STC                            K2607500
         BE    CAJLOOPC            CONVERT IF YES                       K2608000
         LH    WC,=H'20000'        ASSUME BASE FOR TX...                K2608500
         CLI   0(R1),C'T'          IS IT TSU                            K2609000
         BE    CAJLOOPC            CONVERT IF YES                       K2609500
         CLI   COMVERB,C'C'        CHECK FOR CANCEL OPTIONS             K2610000
         BE    CAJCANCL            YES--CHECK FOR CANCEL OPTIONS        K2610500
         CLI   COMVERB,C'P'        TEST FOR STOP OPTIONS                K2611000
         BE    CAJSTOP             YES--TEST FOR STOP OPTION            K2611500
         CLI   COMVERB,C'L'        TEST FOR OPTIONS FOE LIST            K2612000
         BNE   CAJINVO             NO-OTHER JOB LISTS HAVE NO OPTION    K2612500
         CLI   0(R1),C'H'          TEST FOR REQUEST TO LIST HELD DS     K2613000
         BNE   CAJINVO             NO--INVALID LIST OPTION              K2613500
         OI    COMNULOP,CLJHOLD    YES--FLAG OPTION FOR HOLD LIST       K2614000
         B     CAJADJWF            GO ADJUST OPERAND PTRS               K2614500
         SPACE 1                                                        K2615000
CAJSTOP  DS    0H                  REQUEST IS AN OPTION FOR STOP JOB    K2615500
         CLC   0(2,R1),=C'Q='      TEST FOR CORRECT OPTION              K2616000
         BNE   CAJINVO             NO--EXIT IN ERROR                    K2616500
         L     R15,4(,WD)          PT TO NEXT OPERAND                   K2617000
         SLR   R15,R1              COMPUTE OPERAND                      K2617500
         SH    R15,=H'4'           SIZE-LESS 'Q='                       K2618000
         BM    CAJINVO             IF NEGATIVE--NO CLASSES EXIST        K2618500
         L     R14,=A(CVALIDTB)    POINT TO TEST TABLE               R4 K2619000
         EX    R15,CPJQTEST        TEST FOR VALID CLASS STRING          K2619500
         BNZ   CAJINVO             INVALID CLASSES                      K2620000
         CH    R15,*+10            TEST FOR MAX OF EIGHT CLASSES        K2620500
         BNH   *+8                 YES--USE SUBMITTED LENGTH            K2621000
         LA    R15,L'CPJQCLS-2     NO--USE MAXIMUM OF EIGHT             K2621500
         MVI   CPJQCLS,0           SET SAVE AREA TO ZEROES              K2622000
         MVC   CPJQCLS+1(L'CPJQCLS-1),CPJQCLS DITTO                     K2622500
         EX    R15,CPJQMVIT        MOVE CLASSES INTO SAVE AREA          K2623000
         OI    COMNULOP,CPJQOPER   FLAG GOOD OPERAND FOUND              K2623500
         B     CAJADJWF            GO ADJUST OPERAND PTRS               K2624000
CPJQTEST TRT   2(*-*,R1),0(R14)    *** EXECUTE ONLY ***              R4 K2624500
CPJQMVIT MVC   CPJQCLS(*-*),2(R1)  **** EXECUTE ONLY ****               K2625000
         EJECT                                                 @OZ40275 K2625500
CAJCANCL DS    0H                  OPTIONS FOR CANCEL COMMAND           K2626000
         OI    COMNULOP,CCJFDUMP   ASSUME OPTION IS 'DUMP'              K2626500
         CLI   0(R1),C'D'          TEST FOR SAME                        K2627000
         BE    CAJADJWF            IF SO--ADJUST OPERAND PTRS           K2627500
         XI    COMNULOP,CCJFDUMP+CCJFPURG SET PURGE OPTION              K2628000
         CLI   0(R1),C'P'          TEST FOR SAME                        K2628500
         BNE   CAJINVO             NO--INVALID OPTION                   K2629000
CAJADJWF DS    0H                  SET THIS OPERAND AS LAST ONE         K2629500
         LR    WF,WD               SET THIS AS LAST                     K2630000
         SLR   WF,WE               PT TO FIRST                          K2630500
         B     CAJGO               GO GET JOB(S)                        K2631000
         SPACE 1                                               @OZ40275 K2631500
CAJLOOPC $CFCVB POINTER=(WD),NOK=CAJINVO CONVERT NUMBERS TO BINARY      K2632000
         LTR   R1,R1               JOB ZERO                          R4 K2632500
         BZ    CAJINVO             ERROR IF YES                      R4 K2633000
         AR    R0,WC               ADD BASE VALUES                      K2633500
         AR    R1,WC               TO HIGH AND LOW                      K2634000
         STH   R0,2(0,WD)          STORE FINAL VALUE                    K2634500
         STH   R1,0(0,WD)          STORE START VALUE                    K2635000
         BXLE  WD,WE,CAJLOOP       COMPLETE FOR ALL STRINGS             K2635500
         EJECT                                                 @OZ40275 K2635600
CAJGO    LA    WD,COMPNTER         POINT TO FIRST OPERAND POINTER    R4 K2636000
* START STOP VALUES STORED IN OPERAND POINTER AREA                      K2636500
CAJLOOPA LH    WC,0(0,WD)          PICK UP FIRST JOB OF PAIR            K2637000
CAJLOOPB SLR   R10,R10             ZERO HIT RECORDER                    K2637500
         LH    WA,2(0,WD)          SET UPPER BOUND AND RESULT           K2638000
         TM    COMNULOP,CCJFDISP   DISPLAY ONLY...             @OZ40275 K2638100
         BO    CAJSCAN             BR IF YES                   @OZ40275 K2638200
         $QSUSE ,                  ENQUEUE ON SHARED RESOURCE           K2638500
         SPACE 1                                                        K2639000
CAJSCAN $CFJSCAN PROCESS=CAJPRO,NEXT=CAJNEXTJ  SCAN JOB QUEUE  @OZ40275 K2639500
         LTR   R1,R10              DID WE GET A HIT                     K2640000
         BZ    CAJNEXTP            IF NOT TRY NEXT PAIR                 K2640500
         LR    WC,WA               SAVE JOB NUMBER                      K2641000
         OI    COMNULOP,CCJFJOBF   SET JOB FOUND FLAG          @OZ40275 K2641500
         BR    WB                  ENTER SELECTED ROUTINE      @OZ40275 K2641600
         EJECT                                                 @OZ40275 K2641700
CAJHITA $CFVQE NOK=CAJNEXTJ        VERIFY JOB OWNER            @OZ40275 K2641800
         OI    COMNULOP,CCJFJOBF   SET JOB FOUND FLAG                   K2642000
         BR    WB                  ENTER SELECTED ROUTINE            R4 K2642500
CAJINVO  L     R1,0(0,WD)          PICK UP OPERAND ADDRESS              K2643000
         $CFINVO OPERAND=(R1)      RETURN WITH INVALID OPERAND          K2643500
CAJPRO   LH    R0,JQEJOBNO         PICK UP JOB NUMBER                   K2644000
         CR    R0,WC               CHECK AGAINST LOW BOUND              K2644500
         BL    CAJNEXTJ            LOOP                                 K2645000
         BE    CAJHITA             STOP SCAN ON MATCH                   K2645500
         CR    R0,WA               CHECK AGAINST UPPER BOUND            K2646000
         BH    CAJNEXTJ            LOOP                                 K2646500
        $CFVQE NOK=CAJNEXTJ        VERIFY JOB OWNER            @OZ40275 K2646600
         LH    WA,JQEJOBNO         SAVE JOB NUMBER             @OZ40275 K2647000
         LR    R10,R1              COPY JQE ADDRESS                     K2647500
         B     CAJNEXTJ            LOOP                                 K2648000
         EJECT                                                          K2648500
*********************************************************************** K2649000
*                                                                     * K2649500
*        $A JOB LIST -- RELEASE JOB(S) HELD BY $H JOB, $H ALL,        * K2650000
*              TYPERUN=HOLD, ETC.                                     * K2650500
*                                                                     * K2651000
*********************************************************************** K2651500
CAS      DS    0H                                                       K2652000
CAT      DS    0H                                                       K2652500
CAJ      MVC   COFQUE-1(10),=C' NOT HELD ' SET MESSAGE                  K2653000
         TM    JQEFLAGS,QUEHOLDA+QUEHOLD1  IS JOB HELD                  K2653500
         BZ    CAJMSG              IF NOT SEND NOT HELD                 K2654000
         NI    JQEFLAGS,255-QUEHOLDA-QUEHOLD1  RELEASE JOB              K2654500
         MVC   COFQUE(8),=C'RELEASED' SET MESSAGE                       K2655000
         $POST $HASPECF,(JOB,JOT)  POST JOB AND JOT                     K2660000
         OI    $AQSE,QSEPJOB+QSEPJOT   CAUSE X SYSTEM POST(S)           K2660500
         $QCKPT (R1)               SET CHECKPOINT                       K2661000
CAJMSG   LA    WA,COFQUE-COFJOB+9  SET LENGTH OF MESSAGE                K2661500
CAJMSGA  MVC   COFJNAME,JQEJNAME   SET JOB NAME                         K2662000
         LR    R0,WC               COPY JOB NUMBER                      K2662500
SKIP140  MVC   COFJOB,=C'JOB'      SET ID                               K2665500
         CH    R0,=H'10000'        CHECK FOR CORRECT                    K2666000
         BL    CAJMSGB             IF OK SET NUMERIC                    K2666500
         MVC   COFJOB,=C'TSU'      SET ID                               K2667000
         SH    R0,=H'20000'        CHECK FOR CORRECT                    K2667500
         BNL   CAJMSGB             IF OK SET NUMERIC                    K2668000
         MVC   COFJOB,=C'STC'      SET ID                               K2668500
         AH    R0,=H'10000'        SET NUMERIC                          K2669000
CAJMSGB  $CFCVE VALUE=(R0)         CONVERT TO EBCDIC                    K2669500
         MVC   COFJNO,COMDWORK     MOVE NUMBER                          K2670000
         MVI   COFJNAME-1,C' '     SET BLANK                            K2670500
         NI    COMMID+1,X'FE'      INDICATE JOB ID SET                  K2671000
         $CWTO L=(WA)              DISPLAY MESSAGE                      K2671500
CAJNEXT  LA    WC,1(0,WC)          NEXT NUMBER OF SEQUENCE              K2672000
         CH    WC,2(0,WD)          CHECK FOR END OF PAIR                K2672500
         BNH   CAJLOOPB            IF NOT, WORK ON NEXT JOB             K2673000
CAJNEXTP BXLE  WD,WE,CAJLOOPA      GO TO NEXT PAIR IF PRESENT           K2673500
         TM    COMNULOP,CCJFJOBF   TEST JOB FOUND FLAG                  K2674000
         BO    CAJRET              IF ON, EXIT                          K2674500
         $CRET MSG='JOB(S) NOT FOUND'                                   K2675000
CAJRET   $CRET ,                   EXIT                                 K2675500
         EJECT                                                          K2676000
*********************************************************************** K2676500
*                                                                     * K2677000
*        $C JOB LIST -- CANCEL JOB, DELETE APPROPRIATE PRINT/PUNCH    * K2677500
*              FUNCTION AND DELETE JOB                                * K2678000
*                                                                     * K2678500
*********************************************************************** K2679000
CCS      DS    0H                                                       K2679500
CCT      DS    0H                                                       K2680000
CCJ      SLR   R0,R0               ZERO OPTION REGISTER                 K2680500
         IC    R0,COMNULOP         PICK UP REQUEST OPTIONS              K2681000
        $JCAN  JQE=(R1),NOTJOB=CCNOTCAN,OK=CDJ  CANCEL JOB          R41 K2681500
         SPACE 4                                                    R41 K2681800
CCNOTCAN MVC   COFQUE-1(15),=C' NON-CANCELABLE'  SET MESSAGE        R41 K2681900
         LA    WA,COFQUE+14-COFJOB                AND LENGTH        R41 K2682000
         B     CAJMSGA             ISSUE DIAGNOSTIC AND CONTINUE    R41 K2682100
         EJECT                                                          K2682200
*********************************************************************** K2682500
*                                                                     * K2683000
*        $D JOB LIST -- DISPLAY JOB(S)                                * K2683500
*                                                                     * K2684000
*********************************************************************** K2684500
CDS      DS    0H                                                       K2685000
CDT      DS    0H                                                       K2685500
CDJ      $CFJMSG ,                 DISPLAY JOB INFORMATION              K2686000
         B     CAJNEXT             GO TO NEXT JOB                       K2686500
         EJECT                                                          K2687000
*********************************************************************** K2687500
*                                                                     * K2688000
*        $H JOB LIST -- HOLD JOB(S), PREVENT FURTHER PROCESSING       * K2688500
*                                                                     * K2689000
*********************************************************************** K2689500
CHS      DS    0H                                                       K2690000
CHT      DS    0H                                                       K2690500
CHJ      OI    JQEFLAGS,QUEHOLD1   SET HOLD BIT ON                      K2691000
CHJCKPT  $QCKPT (R1)               SET CHECKPOINT                       K2691500
         B     CDJ                 DISPLAY JOB                          K2692000
         EJECT                                                          K2692500
*********************************************************************** K2693000
*                                                                     * K2693500
*        $P JOB LIST -- STOP JOB WHEN CURRENT ACTIVITY IS COMPLETE    * K2694000
*                                                                     * K2694500
*********************************************************************** K2695000
CPS      DS    0H                  STOP A STC                           K2695500
CPT      DS    0H                  STOP A TSU                           K2696000
CPJ      DS    0H                  STOP A JOB                           K2696500
         TM    COMNULOP,CPJQOPER   TEST FOR REQUEST TO CANCEL OUTPUT    K2697000
         BO    CPJQCAN             YES--CANCEL SELECTED CLASSES         K2697500
         OI    COMNULOP,CCJFSTOP   ELSE FLAG STOP JOB,STC,OR TSU        K2698000
         B     CCJ                 AND ENTER CANCEL ROUTINE             K2698500
         EJECT                                                          K2699000
*********************************************************************** K2699500
*                                                                     * K2700000
*        REQUEST IS TO CANCEL CLASS(ES) OF OUTPUT                     * K2700500
*        FOR A JOB, STC, OR A TSU                                     * K2701000
*                                                                     * K2701500
*********************************************************************** K2702000
         SPACE 1                                                        K2702500
CPJQCAN  DS    0H                  CANCEL INACTIVE OUTPUT               K2703000
        $QSUSE                     REQUEST ACCESS TO CKPT DATA      R41 K2703100
         STM   WB,WE,COMWREGS      SAVE REGISTERS FOR WORK              K2703500
         ST    WF,COMFWORK         SAVE CLASS POINTER REGISTER          K2704000
         SLR   WA,WA               ZERO JOE REMOVED REGISTER            K2704500
         LR    WB,R1               SAVE JQE ADDRESS FOR TESTING         K2705000
         LA    WF,CPJQCLS          POINT TO CLASS LIST                  K2706000
CPJQLOOP DS    0H                  LOOP THROUGH ALL CLASS(ES)           K2706500
         ICM   WC,1,0(WF)          PICK-UP NEXT CLASS CHARACTER         K2707000
         BZ    CPJQEND             IF LAST -- EXIT ROUTINE              K2707500
         N     WC,=A(255-X'C0')    TURN 'OFF' HIGH ZONE(S)              K2708000
         L     R14,=A(CPQTABLE-1)  PT TO CLASS CONVERT TABLE            K2708500
         IC    WC,0(WC,R14)        PICK-UP CORRESPONDING JOT OFFSET     K2709000
         IC    R0,0(,WF)           PICK-UP ACTUAL CLASS CHARACTER       K2709500
         LA    WF,1(,WF)           PT TO NEXT CLASS CHARACTER           K2710000
CPJQJOT  DS    0H                  ENTER JOT SCAN ROUTINE               K2710500
         L     WD,CDFJOT           POINT TO THE JOT                     K2711000
         PUSH  USING               SAVE CURRENT USING STATUS            K2711500
         USING JOTDSECT,WD         JOT ADDRESSABILITY                   K2712000
         USING JOEDSECT,R1         JOE ADDRESSABILITY                   K2712500
         SLR   R15,R15             ZERO JOE OFFSET REGISTER             K2713000
         LA    R1,JOTCLSQ-(JOENEXT-JOEDSECT)(WC) POINT TO HEAD OF Q     K2713500
CPJQNXJO LH    R1,JOENEXT          GET OFFSET TO NEXT JOE               K2714000
         N     R1,=A(X'0000FFFF')  INSURE OFFSET IS POSITIVE            K2714500
         BZ    CPJQLOOP            IF LAST JOE--LOOP FOR MORE CLSES     K2715000
         SLL   R1,2                EXPAND TO BYTE OFFSET             R4 K2715500
         ALR   R1,WD               COMPUTE JOE ADDRESS                  K2716000
         TM    JOEFLAG,$JOEBUSY    TEST FOR JOE BUSY                    K2716500
         BNZ   CPJQNXJO            YES--GET NEXT JOE                    K2717000
         LH    R14,JOEJQE          POINT TO JQE OFFSET                  K2717500
         N     R14,=X'0000FFFF'    CLEAR LEFT HALFWORD         @OZ37385 K2717700
         SLL   R14,2               COMPUTE ACTUAL JQE OFFSET ( * 4)     K2718000
         AL    R14,$JOBQPTR        COMPUTE JQE ADDRESS                  K2718500
         CLR   WB,R14              CHECK FOR DESIRED JOB                K2719000
         BNE   CPJQNXJO            NO--GET NEXT JOE                     K2719500
*              THIS LINE DELETED BY APAR NUMBER                @OZ24821 K2719700
*              THIS LINE DELETED BY APAR NUMBER                @OZ24821 K2719800
*              THIS LINE DELETED BY APAR NUMBER                @OZ24821 K2719900
         LR    WE,R0               SAVE CLASS IN WE            @OZ24821 K2720000
         LR    WA,R1               SAVE JOE ADDRESS                 R41 K2720100
         $#REM WORK=(R1)           REMOVE JOE FROM JOT                  K2720500
         LR    R1,WA               RELOAD JOE ADDRESS               R41 K2720600
         LR    R0,WE               RESTORE CLASS TO R0                  K2721000
         LR    WA,WF               SET JOE REMOVED REGISTER             K2721500
         TM    JOEFLAG,$JOESPIN    IS THIS A SPIN DATA SET...       R41 K2721600
         BZ    CPJQJOT             BR IF NO                         R41 K2721700
         L     R15,=A($IOTPUR)     GET ADDR OF IOT PURGE RTN        R41 K2721800
         BALR  R14,R15             GO TO PURGE SPIN DS TRACKS       R41 K2721900
         B     CPJQJOT             AND GET NEXT JOE                     K2722000
         POP   USING               RESTORE USING'S                      K2745500
         SPACE 1                                                        K2746000
CPJQEND  DS    0H                  END OF JOE REMOVE ROUTINE            K2746500
         LR    R1,WB               RESTORE JQE POINTER                  K2747000
         LM    WB,WE,COMWREGS      RESTORE REGISTERS                    K2747500
         L     WF,COMFWORK         RELOAD SAVED REGISTER                K2748000
         LTR   WA,WA               TEST FOR ANY JOES REMOVED            K2748500
         BZ    CPJQNONE            NO--SEND DIAGNOSTIC                  K2749000
         MVC   COFQUE-1(20),=C' DATA SETS CANCELLED'  SET MESSAGE       K2749500
         LA    WA,COFQUE-COFJOB+19 SET MESSAGE LENGTH                   K2750000
         B     CAJMSGA             GO ISSUE MESSAGE                     K2750500
CPJQNONE DS    0H                  NO JOES WERE CANCELLED               K2751000
         MVC   COFQUE-1(23),=C' NO DATA SETS CANCELLED' SET DIAG        K2751500
         LA    WA,COFQUE-COFJOB+22 SET MESSAGE LENGTH                   K2752000
         B     CAJMSGA             GO ISSUE MESSAGE                     K2752500
         EJECT                                                          K2753000
*********************************************************************** K2753500
*                                                                     * K2754000
*        $E JOB LIST -- RESTART JOB CURRENTLY IN EXECUTION            * K2754500
*                                                                     * K2755000
*********************************************************************** K2755500
CEJ      CLI   JQETYPE,$XEQ        TEST FOR CONVERTING                  K2756000
         BE    CEJERR              IF SO -- ERROR                       K2756500
         TM    JQETYPE,$XEQ        TEST FOR EXECUTING                   K2757000
         BZ    CEJERR              NO -- ERROR                          K2757500
         TM    JQEFLAGS,QUEBUSY    ACTIVE IN EXECUTION                  K2758000
         BZ    CEJERR              NO--ERROR                            K2758500
         CLC   JQEJOBNO,=H'10000'  JOB IN NORMAL BATCH RANGE            K2759000
         BNL   CEJERR              ERROR IF NOT                         K2759500
         LR    R0,R1               RELOAD JQE ADDRESS          @OZ40028 K2759600
         SL    R0,$JOBQPTR         REDUCE ADDRESS TO OFFSET    @OZ40028 K2759700
         L     WA,$PITABLE         GET ADDRESS OF FIRST PIT             K2760000
         USING PITDSECT,WA         PROVIDE PIT ADDRESSABILITY           K2760500
CEJLOOPE TM    PITSTAT,PITBUSY     TEST FOR PIT IN USE                  K2761000
         BZ    CEJNPIT             BR IF NO                             K2761500
         CLC   JQEJOBNO,=H'10000'  JOB IN NORMAL RANGE                  K2762000
         BNL   CEJERR              ERROR IF NOT                         K2762500
         L     R14,PITSJB          GET ADDRESS OF SJB                   K2763000
         CLM   R0,7,SJBJQOFF+1-SJBDSECT(R14)  TEST JQE OFFSET  @OZ40028 K2763500
         BE    CEJE                BR IF FOUND THE JOB                  K2764000
CEJNPIT  ICM   WA,15,PITNEXT       POINT TO NEXT PIT                 R4 K2764500
         BNZ   CEJLOOPE            BR IF VALID PIT ADDRESS           R4 K2765000
         B     CEJERROR            IF NOT FOUND BUT ACTIVE SEND DIAG    K2765500
         DROP  WA                  KILL PIT ADDRESSABILITY              K2766000
CEJERR   MVC   COFQUE-1(16),=C' NOT RESTARTABLE' SET MESSAGE            K2766500
         LA    WA,COFQUE-COFJOB+15 SET LENGTH                           K2767000
         B     CAJMSGA             DISPLAY MESSAGE                      K2767500
CEJE     OI    SJBFLG1-SJBDSECT(R14),SJB1EJOB  SET FOR RESTART          K2768000
         B     CDJ                 ENTER DISPLAY JOB                    K2768500
CEJERROR DS    0H                  SEND DIAGNOSTIC                      K2769000
         MVC   COFQUE-1(18),=C' NOT EXECUTING ON ' SET MSG BODY         K2769500
         MVC   COFQUE+17(L'$SID),$SID  SET END OF MESSAGE               K2770000
         LA    WA,COFQUE+17+L'$SID-COFJOB  SET LENGTH                   K2770500
         B     CAJMSGA             EXIT WITH DIAGNOSTIC                 K2771000
         EJECT                                                          K2771500
*********************************************************************** K2772000
*                                                                     * K2772500
*        $L JOB LIST -- LIST JOB,STC,OR TSU OUTPUT                    * K2773000
*                       INCLUDES READY AND HELD DATA SETS             * K2773500
*                                                                     * K2774000
*********************************************************************** K2774500
         SPACE 1                                                        K2775000
CLT      DS    0H                  DEFINE A COMMON ENTRY POINT          K2775500
CLS      DS    0H                  FOR TIME SHARING USERS SYSTEM        K2776000
CLJ      DS    0H                  CONTROL TASKS AND BATCH JOBS         K2776500
         MVI   COMMAND,C' '        SET MSG AREA TO ALL BLANKS           K2777000
         MVC   COMMAND+1(L'COMMAND-1),COMMAND MORE OF ABOVE             K2777500
         NI    COMMID+1,X'FE'      INDICATE TO HASPCON JOB ID SET       K2778000
         LR    R0,WC               GET CURRENT TASK NUMBER              K2778500
         MVC   COFJOB,=C'JOB'      ASSUME BATCH JOB                     K2779000
         CH    R0,=H'10000'        TEST FOR BATCH JOB                   K2779500
         BL    CLJMSGC             YES--CONTINUE MSG                    K2780000
         MVC   COFJOB,=C'TSU'      ASSUME TIME SHARING USER             K2780500
         SH    R0,=H'20000'        TEST FOR TSU                         K2781000
         BNM   CLJMSGC             YES--CONTINUE MESSAGE                K2781500
         MVC   COFJOB,=C'STC'      NO--MUST BE SYSTEM CNTRL TASK        K2782000
         AH    R0,=H'10000'        READJUST NUMBER FOR IT               K2782500
CLJMSGC  DS    0H                  CONTINUE MSG PREFIX                  K2783000
         $CFCVE    VALUE=(R0)      CONVERT THE NBR TO EBCDIC            K2783500
         MVC   COFJNO,COMDWORK     AND MOVE IT TO THE MSG               K2784000
         MVC   COFJNAME,JQEJNAME   INSERT THE JOB NAME                  K2784500
         TM    COMNULOP,CLJHOLD    TEST FOR HELD REQUEST                K2785000
         BO    CLJHLDDS            YES--LIST HELD DATA SETS FOR JOB     K2785500
         MVC   COFQUE(6),=CL6'READY'   SET JOE QUEUE ID                 K2786000
         LA    WA,COFQUE+6         POINT TO NEXT AVAILABLE BYTE         K2786500
         STM   WB,WE,COMWREGS      SAVE REGISTERS FOR WORK              K2787000
*********************************************************************** K2787500
*                                                                     * K2788000
*        SCAN JOES AND COUNT ANY BELONGING TO THIS JOB                * K2788500
*                                                                     * K2789000
*********************************************************************** K2789500
         USING JOTDSECT,WB         SET                                  K2790000
         USING JOEDSECT,WC         ADDRESSABILITIES                     K2790500
         SLR   WD,WD               START JOES WITH CLASS A              K2791000
         SLR   WE,WE               ZERO JOE FOUND REGISTER              K2791500
         L     WB,CDFJOT           POINT TO THE JOT                     K2792000
*                                    THIS LINE DELETED BY APAR @OZ20010 K2792100
*                                    THIS LINE DELETED BY APAR @OZ20010 K2792200
*                                    THIS LINE DELETED BY APAR @OZ20010 K2792300
CLJOLOOP DS    0H                  LOOP THROUGH JOES                    K2792500
         SLR   R15,R15             ZERO COUNTER FOR THIS CLASS          K2793000
         LA    WC,JOTCLSQ-(JOENEXT-JOEDSECT)(WD) POINT TO CLS Q         K2794000
CLJOES   LH    WC,JOENEXT          GET OFFSET TO NEXT JOE               K2794500
         N     WC,=A(X'0000FFFF')  INSURE OFFSET IS POSITIVE            K2795000
         BZ    CLJENDJO            LAST IN THIS CLASS -- EXIT           K2795500
         SLL   WC,2                EXPAND TO BYTE OFFSET             R4 K2796000
         ALR   WC,WB               COMPUTE ADDRESS OF JOE               K2796500
         LH    R0,JOEJQE           PICK-UP JQE OFFSET                   K2797000
         N     R0,=X'0000FFFF'     CLEAR LEFT HALFWORD         @OZ37385 K2797200
         SLL   R0,2                COMPUTE ACTUAL JQE OFFSET ( * 4)     K2797500
         AL    R0,$JOBQPTR         COMPUTE JQE ADDRESS                  K2798000
         CLR   R1,R0               IS IT MY JOE                         K2798500
         BNE   CLJOES              NO--GET THE NEXT IN THIS CLASS       K2799000
         LA    R15,1(,R15)         YES--COUNT IT                        K2799500
         B     CLJOES              AND CONTINUE TO LOOK AT JOES         K2800000
         DROP  WB,WC               DROP ADDRESSABILITIES                K2815500
CLJENDJO DS    0H                  COME HERE WHEN END OF CLASS          K2816000
         LTR   R0,R15              TEST FOR ANY HITS                    K2816500
         BZ    CLJNXJOE            NO--GET NEXT CLASS                   K2817000
         LR    WE,WF               SET JOE FOUND                        K2817500
         LR    R14,WD              PUT JOE CLASS OFFSET INTO WORK       K2818500
         SRA   R14,1               DIVIDE BY TWO FOR OFFSET INTO TBL    K2819000
         IC    R14,CLJHLDTB(R14)   PICK-UP ACTUAL CLASS CHARACTER       K2819500
         STC   R14,0(,WA)          SAVE CHARACTER IN MESSAGE            K2820000
         MVC   1(3,WA),=C'=**'     SET PATTERN IN MSG                   K2820500
         CH    R0,=H'100'          CHK FOR MAX JOE COUNT EXCEEDED       K2821000
         BNL   CLJOVJOE            YES--SKIP INSERTION OF COUNT         K2821500
         $CFCVE VALUE=(R0)         CONVERT HITS TO EBCDIC VALUE         K2822500
         MVC   2(2,WA),COMDWORK+3  AND PLACE RESULT IN MSG              K2823000
CLJOVJOE LA    WA,5(,WA)           STEP TO NEXT MSG BYTE                K2823500
         BAL   R15,CLJCKMSG        AND TEST FOR $WTO NEEDED             K2824000
CLJNXJOE LA    WD,2(,WD)           POINT TO NEXT CLASS                  K2824500
         CH    WD,=Y(L'JOTRDYWQ-2) END OF CLASSES                    R4 K2825000
         BL    CLJOLOOP              BR IF NO TO RESUME SACN   @OZ20010 K2825500
         LTR   WE,WE               TEST FOR ANY JOE(S) FOUND            K2826000
         BNZ   CLJRDYND            YES--SKIP DIAGNOSTIC                 K2826500
         MVC   COFQUE(18),=C'NO READY DATA SETS'  SET DIAGNOSTIC        K2827000
         LA    WA,COFQUE+18        SET END OF DIAG ADDRESS              K2827500
         EJECT                                                          K2828000
*********************************************************************** K2828500
*                                                                     * K2829000
*        MESSAGE LENGTH AND $WTO PORTION                              * K2829500
*                                                                     * K2830000
*********************************************************************** K2830500
CLJRDYND DS    0H                  END OF READY DISPLAY                 K2831000
         LM    WB,WE,COMWREGS      RESTORE WORK REGISTERS               K2831500
         SPACE 1                                                        K2832000
CLJWTO   DS    0H                  ISSUE WTO FOR $L COMMAND             K2832500
         LA    R14,COMMAND         POINT TO BEGINNING OF AREA           K2833000
         LR    R0,WA               POINT TO END OF MESSAGE              K2833500
         SLR   R0,R14              COMPUTE MESSAGE LENGTH               K2834000
CLJ$WTO  $CWTO L=(R0)              ISSUE MESSAGE                        K2834500
         B     CAJNEXT             AND GET NEXT JOB                     K2835000
         SPACE 1                                                        K2835500
CLJCKMSG DS    0H                  CKECK CURRENT MESSAGE LENGTH         K2836000
         LA    R14,COMMAND+64      SET END ADDR OF LARGEST MESSAGE      K2836500
         CLR   WA,R14              CHECK CURRENT LENGTH                 K2837000
         BLR   R15                 IF LESS THAN THIS -- RETURN          K2837500
         ST    R15,COMFWORK        ELSE SAVE REGISTERS                  K2838000
         ST    R1,COMDWORK         SAVE R1 AS WELL                  R41 K2838500
         LR    R0,WA               GET END ADDRESS                      K2839000
         LA    R14,COMMAND         GET BEGINNING ADDRESS                K2839500
         SLR   R0,R14              COMPUTE LENGTH                       K2840000
         $CWTO L=(R0)              SEND MESSAGE                         K2840500
         L     R15,COMFWORK        RESTORE R15                          K2841000
         L     R1,COMDWORK         RESTORE R1                       R41 K2841500
         MVI   COMMAND,C' '        CLEAR MESSAGE AREA                   K2842000
         MVC   COMMAND+1(L'COMMAND-1),COMMAND  DITTO                    K2842500
         NI    COMMID+1,X'FE'      INDICATE JOB ID IS SET               K2843000
         LA    WA,COFQUE           POINT TO FIRST FREE MESSAGE AREA     K2843500
         BR    R15                 AND RETURN                           K2844000
         SPACE 2                                                        K2844500
*********************************************************************** K2845000
*                                                                     * K2845500
*        LIST HELD DATA SETS FOR JOB(S)                               * K2846000
*                                                                     * K2846500
*********************************************************************** K2847000
         SPACE 1                                                        K2847500
CLJHLDDS DS    0H                  LIST HELD DATA SETS                  K2848000
         LH    WA,JQEHLDCT         GET POSSIBLE HOLD COUNT              K2848500
         LTR   WA,WA               TEST FOR ANY                         K2849000
         BZ    CLJNOHLD            NONE--DISPLAY DIAGNOSTIC             K2849500
         STM   R14,R12,COMREGSV    ELSE SAVE REGISTRES                  K2850000
         MVI   CLJCLAS,0           ZERO CLASS SAVE AREA                 K2850500
         MVC   CLJCLAS+1(L'CLJCLAS-1),CLJCLAS  DITTO                    K2851000
         ST    R1,CLJJQE           SAVE JQE ADDRESS                     K2851500
         LA    R1,CLJJQE           POINT TO PARAMETER LIST              K2852000
         SPACE 1                                                        K2852500
         $LINK HASPLIST            ENTER HOLD DATA SET PROCESSOR        K2853000
         SPACE 1                                                        K2853500
         LM    R14,R12,COMREGSV    RESTORE REGISTERS                    K2854000
         MVC   COFQUE(5),=CL5'HELD'  SET MESSAGE HEADER                 K2854500
         LA    WA,COFQUE+5         POINT TO NEXT MESSAGE AREA           K2855000
         SLR   WB,WB               CLEAR HIT COUNT             @OZ27300 K2855100
         SLR   WC,WC               ZERO INSERT REGISTER                 K2855500
         SLR   R1,R1               ZERO TABLE(S) INDEX REGISTER         K2856000
         BCTR  R1,0                LESS ONE FOR START                   K2856500
         LA    WE,1                SET INCREMENT                        K2857000
         LA    WF,35               SET COMPORAND                        K2857500
CLJHLDLP DS    0H                  SCAN THE TABLE FOR HOLD COUNTS       K2858000
         BXH   R1,WE,CLJHLDND      LOOP TROUGH CLASS FIELDS             K2858500
         LR    R14,R1              PUT CLASS OFFSET INTO WORK REG       K2859000
         SLL   R14,1               MULTIPLY BY TWO FOR HALFWORD AREA    K2859500
         LH    WC,CLJCLAS(R14)     PICK-UP POSSIBLE HOLD COUNT          K2860000
         LTR   WC,WC               TEST FOR ANY HELD DATA SETS          K2860500
         BZ    CLJHLDLP            NONE OF THIS CLASS -- LOOP           K2861000
         LR    WB,WC               INDICATE HIT                @OZ27300 K2861100
         IC    R0,CLJHLDTB(R1)     PICK-UP CLASS CHARACTER              K2861500
         STC   R0,0(,WA)           PLACE CHARACTER IN MESSAGE AREA      K2862000
         MVI   1(WA),C'='          SET EQUAL SIGN FOR MESSAGE           K2862500
         $CFCVE VALUE=(WC)         CONVERT COUNT TO DISPLAYABLE FORM    K2863000
         MVC   2(3,WA),COMDWORK+2  COMPLETE MSG -- 'CLASS=NNN'          K2863500
         LA    WA,6(,WA)           POINT TO NXT AVAIL. MSG AREA         K2864000
         BAL   R15,CLJCKMSG        GO TEST FOR POSSIBLE $WTO            K2864500
         B     CLJHLDLP            AND LOOP THROUGH ALL 36 CLASSES      K2865000
         SPACE 2                                                        K2865500
*        EXIT LIST HOLD DATA SETS ROUTINE                               K2866000
         SPACE 1                                                        K2866500
CLJHLDND DS    0H                  END OF HELD DATA SETS                K2867000
         LTR   WB,WB               ANY HELD DATA SETS...       @OZ27300 K2867100
         LR    R14,WA              SAVE WA OVER 'LM'                    K2867500
         LM    R15,R12,COMREGSV+4  RESTORE REGSITERS                    K2868000
         LR    WA,R14              RESTORE WA                           K2868500
         BNZ   CLJWTO              BR IF ANY HELD DATA SETS    @OZ27300 K2869000
         SPACE 2                                                        K2869500
*        SEND DIAGNOSTIC 'NO HELD DATA SETS'                            K2870000
         SPACE 1                                                        K2870500
CLJNOHLD DS    0H                  SEND MESSAGE 'NO HELD DATA SETS'     K2871000
         MVC   COFQUE(17),=C'NO HELD DATA SETS'  CREATE DIAGNOSTIC      K2871500
         LA    R0,COFQUE+17-COMMAND  SET MESSAGE LENGTH                 K2872000
         B     CLJ$WTO             AND ISSUE DIAGNOSTIC                 K2872500
         SPACE 2                                                        K2873000
*        CLASS CONVERT TABLE                                            K2873500
         SPACE 1                                                        K2874000
CLJHLDTB DC    C'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'                  K2874500
         EJECT                                                          K2875000
         SPACE 2                                                        K2875500
*********************************************************************** K2876000
*                                                                     * K2876500
*        EQUATES FOR $L COMMAND                                       * K2877000
*                                                                     * K2877500
*********************************************************************** K2878000
CLJJQE   EQU   COMREGSV+15*4,4     SAVE AREA FOR JQE ADDRESS            K2878500
CLJCLAS  EQU   CLJJQE+4,72         SAVE AREA FOR CLASS COUNTS           K2879000
         SPACE 2                                                        K2879500
         LTORG ,                                                        K2880000
         TITLE 'HASP COMMAND PROCESSOR HASPCJB3 - MISC. JOB COMMANDS'   K2880500
HASPCJB3 $COMGRUP  A7D,C7D,D7D,E7D,H7D,L7D,O7D,P7D,T7D  JOB CMNDS       K2881000
CD7D     DS    0H                  ENTRY PT FOR DISPLAY BY NAME         K2881500
CA7D     EQU   CD7D                ENTRY PT FOR RELEASE BY NAME         K2882000
CC7D     EQU   CD7D                ENTRY PT FOR CANCEL BY NAME          K2882500
CE7D     EQU   CD7D                ENTRY PT FOR RESTART BY NAME         K2883000
CH7D     EQU   CD7D                ENTRY PT FOR HOLD BY NAME            K2883500
CL7D     EQU   CD7D                ENTRY PT FOR LIST BY NAME            K2884000
CO7D     EQU   CD7D                ENTRY PT FOR OUTPUT BY NAME          K2884500
CP7D     EQU   CD7D                ENTRY PT FOR STOP BY NAME            K2885000
CT7D     EQU   CD7D                ENTRY PT FOR MODIFY BY NAME          K2885500
*********************************************************************** K2886000
*                                                                     * K2886500
*        $D 'JOBNAME' -- DISPLAY JOB INFORMATION FOR JOB(S)           * K2887000
*                                                                     * K2887500
*********************************************************************** K2888000
         L     R1,0(,WD)           PICK-UP START OF OPERAND             K2888500
         L     WC,4(0,WD)          PICK UP END OF OPERAND + 2           K2889000
         ST    WD,COMFWORK         SAVE FIRST OPERAND POINTER POINTER   K2889500
         CLI   COMVERB,C'P'        IS OPTION FOR $PJOB                  K2890000
         BNE   CD7DCN              NO--TRY OPTIONS FOR CANCEL JOB       K2890500
         CLC   0(2,WC),=C'Q='      CHECK FOR CANCEL OF OUTPUT CLSES     K2891000
         BNE   CD7DNL              NO--MUST BE $P WITH NO OPERANDS      K2891500
         L     R15,8(,WD)          YES--POINT TO LAST OPERAND           K2892000
         SLR   R15,WC              COMPUTE OPERAND LENGTH               K2892500
         SH    R15,=H'4'           COMPUTE STRING SIZE LESS ONE         K2893000
         BM    CD7DINVC            IF NEGATIVE--NO STRING               K2893500
         L     R14,=A(CVALIDTB)    POINT TO TEST TABLE               R4 K2894000
         EX    R15,CD7DCTST        TEST FOR VALIS CLASS STRING          K2894500
         BNZ   CD7DINVC            IF NOT VALID CHARACTERS--ERROR       K2895000
         CH    R15,*+10            TEST FOR MAXIMUM LENGTH              K2895500
         BNH   *+8                 NOT GREATER--USE PRESENTED LENGTH    K2896000
         LA    R15,L'CPJQCLS-2     ELSE USE MAXIMUM LENGTH              K2896500
         MVI   CPJQCLS,0           SET SAVE AREA TO                     K2897000
         MVC   CPJQCLS+1(L'CPJQCLS-1),CPJQCLS ZEROES                    K2897500
         EX    R15,CD7DCMV         MOVE STRING INTO SAVE AREA           K2898000
         OI    COMNULOP,CPJQOPER   SET OPTION FLAG FOR OUTPUT CANCEL    K2898500
         B     CD7DNL              AND CONTINUE                         K2899000
CD7DINVC DS    0H                  INVALID OPERAND IN CLASS STRING      K2899500
         L     R1,4(,WD)           POINT TO INVALID OPERAND          R4 K2900000
         B     CD7DINV             AND BRANCH TO ERROR RTN              K2900500
CD7DCTST TRT   2(*-*,WC),0(R14)    *** EXECUTE ONLY ***              R4 K2901000
CD7DCMV  MVC   CPJQCLS(*-*),2(WC)  **** EXECUTE ONLY ****               K2901500
CD7DCN   DS    0H                  TRY CANCEL OPTIONS                   K2902000
         CLI   COMVERB,C'C'        TEST FOR CANCEL VERB                 K2902500
         BNE   CD7DA               NO--TRY OTHERS                       K2903000
         OI    COMNULOP,CCJFDUMP   ASSUME DUMP REQUESTED                K2903500
         CLI   0(WC),C'D'          IS DUMP REQUESTED                    K2904000
         BE    CD7DNL              SKIP NEXT IF SO                      K2904500
         XI    COMNULOP,CCJFPURG+CCJFDUMP ASSUME PURGE                  K2905000
         CLI   0(WC),C'P'          IS PURGE REQUESTED                   K2905500
         BE    CD7DNL              SKIP NEXT IF SO                      K2906000
         XI    COMNULOP,CCJFPURG   SET NO 'PURGE' OPERAND               K2906500
         B     CD7DNL              NO--MUST BE CANCEL WITH NO OPERND    K2907000
CD7DA    DS    0H                  CHECK FOR $L'JOBNAME',HOLD           K2907500
         CLI   COMVERB,C'L'        CHECK FOR $L COMMAND                 K2908000
         BNE   CD7DNL              NO--SKIP REST OF TESTS               K2908500
         CLI   0(WC),C'H'          TEST FOR LIST HOLD DATA SETS         K2909000
         BNE   CD7DNL              NO--ASSUME REQ FOR READY D SETS      K2909500
         OI    COMNULOP,CLJHOLD    SET SWITCH TO LIST HELD DATA SETS    K2910000
CD7DNL   DS    0H                  NOT $L'JOBNAME',HOLD                 K2910500
         MVC   COMJNAME,=CL8' '    SET JOBNAME TO BLANKS                K2911000
         BCTR  WC,0                POINT TO END + 1                     K2911500
         BCTR  WC,0                POINT TO END                         K2912000
         MVC   COMFWORK(1),COMVERB SAVE THE VERB                        K2912500
         SR    WD,WD               ZERO QUEUE POINTER                   K2913000
         CLI   0(WC),C''''         DOES OPERAND END WITH APOSTROPHI     K2913500
         BNE   *+6                 SKIP NSI IF NOT                      K2914000
         BCTR  WC,0                POINT TO END OF NAME                 K2914500
         SR    WC,R1               GET LENGTH OF JOB NAME               K2915000
         BNP   CD7DINV             IF NOT POSITIVE, ERROR               K2915500
         BCTR  WC,0                SET MACHINE LENGTH                   K2916000
         LA    R0,7                SET MAXIMUM MACHINE LENGTH           K2916500
         CR    WC,R0               IS LENGTH TOO LONG                   K2917000
         BNH   *+6                 IF NOT, SKIP                         K2917500
         LR    WC,R0               SET TO MAXIMUM LENGTH                K2918000
         EX    WC,CA7DMVC          MOVE NAME                            K2918500
CA7DDUP  DS    0H                  RESCAN AFTER DUPLICATE ERROR         K2919000
         $CFJSCAN PROCESS=CD7DPRO,EMPTY=CD7DNFND,IGNORE=CD7DL,         CK2919500
               NEXT=CD7DNXT        SCAN THE JOB QUEUE FOR MATCHING JOBS K2920000
         CLI   COMFWORK,C'D'       IS THIS DISPLAY COMMAND              K2920500
         BNE   CA7DSET             SET FOR XCTL TO ROUTINE              K2921000
         $CRET ,                   RETURN                               K2921500
CD7DPRO  NULL                                                           K2922000
         CLC   COMJNAME,JQEJNAME   COMPARE FOR MATCH                    K2922500
         BNE   CD7DL               LOOP IF NO MATCH                     K2923000
         CLI   COMFWORK,C'D'       IS THIS DISPLAY COMMAND              K2923500
         BNE   CA7DXIT             IF NOT EXIT FOR OTHER COMMANDS       K2924000
         LR    WC,R1               SAVE CURRENT LOCATION                K2924500
         L     WB,COMFWORK         SAVE CONTENTS OF COMFWORK         R4 K2925000
         $CFJMSG JOBQE=(R1),TYPE=CALL  DISPLAY JOB INFO                 K2925500
         ST    WB,COMFWORK         RESTORE COMFWORK                  R4 K2926000
         $CFJSCAN PROCESS=CD7DCK,NEXT=CD7DCKL,STORE=NO CK CHAIN         K2926500
CD7DNTFD DS    0H                  CHAIN IS BROKEN                      K2927000
         $CRET MSG='LIST INCOMPLETE'                                    K2927500
CD7DCK   CR    WC,R1               HAVE WE MET THE LAST JOB DISPLAYED   K2928000
         BNE   CD7DCKL             IF NOT, LOOK FURTHER                 K2928500
         CH    R15,COMJQHDS        TEST FOR JOB ON SAME QUEUE           K2929000
         BNE   CD7DNTFD            NO -- CHAIN IS BROKEN                K2929500
         B     CD7DNXT             NEXT JOB PLEASE                      K2930000
CD7DNFND MVC   COMMAND(8),COMJNAME MOVE NAME                            K2930500
         MVC   COMMAND+8(14),=C' JOB NOT FOUND' SET EXPLANATION         K2931000
         $CRET L=22                SEND THE MESSAGE                     K2931500
CD7DINVO L     R1,0(0,WD)          POINT TO OPERAND                     K2932000
CD7DINV  $CFINVO OPERAND=(R1)      ERROR -- EXIT ...                    K2932500
CA7DMVC  MVC   COMJNAME(*-*),1(R1) MOVE NAME                            K2933000
         EJECT                                                          K2933500
*********************************************************************** K2934000
*                                                                     * K2934500
*        ROUTINE TO CONVERT $A,$C,$E,$H,$P 'JOBNAME' COMMANDS         * K2935000
*        TO CORRESPONDING $VJ... COMMANDS                             * K2935500
*                                                                     * K2936000
*********************************************************************** K2936500
CA7DXIT  LTR   WD,WD               QUEUE POINTER STILL ZERO             K2937000
         LR    WD,R1               ASSUME YES                           K2937500
         BZ    CD7DNXT             SIGNAL FOUND AND CONTINUE SCAN       K2938000
         MVC   COMMAND+12(20),=C' MULTIPLE JOBS FOUND' SET DIAG         K2938500
         $CWTO L=12+20             SEND MESSAGE                         K2939000
         MVI   COMFWORK,C'D'       CONVERT FLAG TO $D                   K2939500
         B     CA7DDUP             START SCAN ALL OVER                  K2940000
CA7DSET  LR    R1,WD               POINT TO QUEUE ELEMENT               K2940500
         L     WD,COMFWORK         RESTORE POINTER TO FIRST OPERAND     K2941000
         LA    WD,0(0,WD)          PURIFY                               K2941500
         $CFVQE  NOK=CD7DINVO      VERIFY OWNERSHIP                     K2942000
         LH    R0,JQEJOBNO         GET JOB NUMBER IN R0                 K2942500
         STH   R0,0(,WD)           SAVE JOB NUMBER AS BOTH              K2943000
         STH   R0,2(,WD)           HIGH AND LOW BOUNDS                  K2943500
         CLI   COMFWORK,C'T'       TEST FOR SET COMMAND                 K2944000
         BE    CT7DFND             YES--EXIT TO IT                      K2944500
         CLI   COMFWORK,C'O'       CHECK FOR $O COMMAND                 K2945000
         BE    CO7DFND             YES--BR TO $ O PROCESSING            K2945500
         LR    WF,WD               ELSE TRUNCATE COMMAND                K2946000
         LA    WC,CA7DTAB          POINT TO ACTION VERB TABLE           K2946500
         LA    R1,CA7DTABN         SET COUNT AND CLEAR HIGH BYTES       K2947000
CA7DSCN  CLC   COMFWORK(1),0(WC)   MATCHING VERB                        K2947500
         BE    CA7DFND             IF FOUND EXIT                        K2948000
         LA    WC,3(,WC)           UP TO NEXT ENTRY                     K2948500
         BCT   R1,CA7DSCN          LOOP                                 K2949000
         B     CD7DINVO            EXECUTED ON LOGIC ERROR ONLY         K2949500
CA7DFND  DS    0H                  FOUND JOB                            K2950000
         $QSUSE ,                  ENQUEUE ON SERIAL RESOURCE           K2950500
         SLR   WB,WB               ZERO OFFSET REGISTER                 K2951000
         L     BASE3,=A(HASPCJB2)  ADDRESS OF GROUP ROUTINE             K2951500
         ICM   WB,3,1(WC)          PICK UP OFFSET                       K2952000
         ALR   WB,BASE3            POINT TO FUNCTIONAL ENTRY            K2952500
         B     CAJLOOPA-HASPCJB2(,BASE3) ENTER JOB LIST ROUTINE         K2953000
CT7DFND  L     BASE3,=A(HASPCJ3A)  ADDRESS OF GROUP CONTROL             K2953500
         LR    R1,R0               MAKE LOW = HIGH JOB NUMBER        R4 K2954000
         B     CTJALTER-HASPCJ3A(,BASE3) ENTER $T JOB COMMAND        R4 K2954500
CO7DFND  DS    0H                  PREPARE TO EXIT TO $O                K2955000
         L     BASE3,=A(HASPCJB4)  POINT TO SUB-PROCESSOR               K2955500
         B     COJBEGIN-HASPCJB4(,BASE3)   EXIT                         K2956000
CA7DTAB  DS    0H                                                       K2956500
         DC    C'A',AL2(CAJ-HASPCJB2)  OFFSET TO RELEASE JOB            K2957000
         DC    C'C',AL2(CCJ-HASPCJB2)  OFFSET TO CANCEL JOB             K2957500
         DC    C'E',AL2(CEJ-HASPCJB2)  OFFSET TO RESTART JOB            K2958000
         DC    C'H',AL2(CHJ-HASPCJB2)  OFFSET TO HOLD JOB               K2958500
         DC    C'L',AL2(CLJ-HASPCJB2)  OFFSET TO LIST JOB               K2959000
         DC    C'P',AL2(CPJ-HASPCJB2)  OFFSET TO STOP JOB               K2959500
CA7DTABN EQU   (*-CA7DTAB)/3       NUMBER OF ENTRIES IN THE TABLE       K2960000
         SPACE 2                                                        K2960500
         LTORG ,                                                        K2961000
         EJECT                                                          K2961500
HASPCJ3A $COMGRUP TJ,TS,TT         SET BASE NUMBER OR MODIFY            K2962000
*********************************************************************** K2962500
*                                                                     * K2963000
*        $T    (J,S,T)N -- SET NEW NBR FOR JOBS, STCS, OR TSUS        * K2963500
*                                                                     * K2964000
*        $T    J1-J2,C=CLASS       -- SET JOB CLASS                   * K2964500
*                                                                     * K2965000
*        $T    J1-J2,P=(+ OR -)VALUE   -- SET JOB PRIORITY            * K2965500
*              +N                      -- INCREMENT CURRENT PRIO      * K2966000
*              -N                      -- DECREMENT CURRENT PRIO      * K2966500
*              N                       -- SET PRIORITY EXPLICITLY     * K2967000
*                                                                     * K2967500
*        $T    J1-J2,S=(+ OR -)SID...SID -- SET SYSTEM AFFINITY       * K2968000
*              -SID (...SID)             -- DELETE AFFINITIE(S)       * K2968500
*              +SID (...SID)             -- ADD AFFINITIE(S)          * K2969000
*              SID (...SID)              -- SET AFFINITIE(S) XPLCIT   * K2969500
*                                                                     * K2970000
*********************************************************************** K2970500
CTS      NULL                      ENTER HERE FOR STC CHANGE            K2971000
         CLC   COMVERB(4),=C'TSYS' TEST FOR '$TSYS' COMMAND             K2971500
         BNE   CTSNOTSY            NO--SKIP NEXT                        K2972000
         LH    R1,=Y(CTSYS-HASPCSY1) PICK-UP OFFSET TO $TSYS COMMAND    K2972500
         L     BASE3,=A(HASPCSY1)  POINT TO SYSTEM COMMAND PROCESSOR    K2973000
         ALR   R1,BASE3            COMPUTE ENTRY ADDRESS                K2973500
         BR    BASE3               ENTER SYSTEM COMMAND PROCESSOR       K2974000
CTSNOTSY DS    0H                  NOT $TSYS COMMAND                    K2974500
         LH    WA,=H'10000'        SET LOW END FOR STCS                 K2975000
         LA    WB,$STCNO           POINT TO STC BASE                    K2975500
         MVC   COMJNAME(3),=C'STC' SET MESSAGE JOB ID                   K2976000
         B     CTJA                ENTER COMMON ROUTINE                 K2976500
CTT      NULL                      ENTER HERE FOR TSU CHANGE            K2977000
         LH    WA,=H'20000'        SET LOW END FOR TSUS                 K2977500
         LA    WB,$TSUNO           POINT TO TSU BASE                    K2978000
         MVC   COMJNAME(3),=C'TSU' SET MESSAGE JOB ID                   K2978500
         B     CTJA                ENTER COMMON ROUTINE                 K2979000
CTJ      NULL                      ENTER HERE FOR JOB CHANGE            K2979500
         SLR   WA,WA               SET LOW END FOR JOBS                 K2980000
         LA    WB,$JOBNO           POINT TO JOB BASE                    K2980500
         MVC   COMJNAME(3),=C'JOB' SET MESSAGE JOB ID                   K2981000
CTJA     $CFCVB POINTER=(WD),NOK=CTJINVO CHANGE NBR TO BINARY           K2981500
         LTR   R0,R0               TEST FOR GOOD VALUE                  K2982000
         BNP   CTJINVO             NO--ERROR                            K2982500
         ALR   R0,WA               COMPUTE JOB NUMBER                   K2983000
         ALR   R1,WA               COMPUTE JOB NUMBER                   K2983500
         CLR   WD,WF               TEST FOR ALTER A JOB                 K2984000
         BL    CTJALTER            YES--GO TO IT                        K2984500
         $QSUSE ,                  ENQUEUE ON SHARED RESOURCE           K2985000
         SLR   R0,WA               RESET NUMBER                         K2985500
         ALR   WA,R0               COMPUTE ACTUAL TASK NUMBER           K2986000
         $CFCVE VALUE=(R0)         CONVERT NUMBER TO EBCDIC             K2986500
         MVC   COFJNO+(COMJNAME-COFJOB),COMDWORK SET IN MSG             K2987000
         MVC   COFJOB,COMJNAME     SET REST OF MESSAGE                  K2987500
         BCTR  WA,0                LESS ONE FOR ACTUAL NUMBER           K2988000
         STH   WA,0(0,WB)          SET NEW BASE                         K2988500
        $POST  $HASPECF,CKPW       $POST CHECKPOINT WRITER          R41 K2988600
         MVC   COFJNO(14),CTJBM    SET ' NUMBER SET TO'                 K2989000
         MVC   COFJNO+14,COMDWORK  SET JOB NUMBER BASE                  K2989500
         $CRET L=COFJNAME-COFJOB+14 EXIT WITH MESSAGE                   K2990000
CTJBM    DC    C' NUMBER SET TO'   MESSAGE BODY                         K2990500
*********************************************************************** K2991000
*                                                                     * K2991500
*        ALTER A JOB'S CLASS, PRIORITY, OR AFFINITY                   * K2992000
*                                                                     * K2992500
*********************************************************************** K2993000
         SPACE 2                                                        K2993500
CTJALTER DS    0H                  ALTER A JOB' CHARACTERISTICS         K2994000
         SLL   R1,16               SHIFT INFORMATION                 R4 K2994500
         LR    WC,R1               COPY LOW BOUND                    R4 K2995000
         ALR   WC,R0               INCLUDE HIGH BOUND                R4 K2995500
CTJALTR1 MVI   CTJFLAG,0           SET ALL OPTIONS OFF                  K2996000
CTJLOOP  DS    0H                  LOOP THROUGH OPERANDS                K2996500
         BXH   WD,WE,CTJEND        LOOP THROUGH ALL OPERANDS            K2997000
         L     R1,0(,WD)           POINT TO OPERAND                     K2997500
         CLI   1(R1),C'='          CHECK FOR PROPER FORMAT              K2998000
         BNE   CTJINVO             NO -- ERROR                          K2998500
CTJSELCT DS    0H                  SELECT PROPER BREAK-OUT RTOUTINE     K2999000
         $CFSEL (C,CTJCLAS),(P,CTJPRIO),(S,CTJSID),OPERAND=(R1)         K2999500
         SPACE 1                                                        K3000000
CTJINVO  DS    0H                  INVALID OPERAND ROUTINE              K3000500
         L     R1,0(,WD)           POINT TO INVALID OPERAND             K3001000
         $CFINVO OPERAND=(R1)      ISSUE DIAGNOSTIC                     K3001500
         SPACE 3                                                        K3002000
CTJCLAS  DS    0H                  SET A NEW CLASS                      K3002500
         NI    CTJFLAG,255-CTJCLS  RESET CLASS FOUND FLAG               K3003000
         L     R15,=A(CVALIDTB)    POINT TO TEST TABLE               R4 K3003500
         TRT   2(1,R1),0(R15)      VALID CLASS                       R4 K3004000
         BNZ   CTJINVO             IF INVALID -- ERROR                  K3004500
         SLR   R15,R15             ZERO INSERT REGISTER                 K3005000
         IC    R15,2(,R1)          PICK-UP NEW CLASS                    K3005500
         SL    R15,=A(X'C0')       LESS OFFSET TO CAT                R4 K3006000
         SLL   R15,5               TIMES CAT ELEMENT SIZE               K3006500
         AL    R15,$CATABLE        COMPUTE ADDRESS OF CAT ELEMENT       K3007000
         USING CATDSECT,R15        CAT ADDRESSABILITY                   K3007500
         TM    CATJOBFL,CATVALID   TEST FOR VALID CLASS                 K3008000
         BZ    CTJINVO             NO  --  ERROR                        K3008500
         DROP  R15                 DROP CAT ADDRESSABILITY              K3009000
         MVC   CTJSVCLS,2(R1)      SAVE GOOD CLASS                      K3009500
         NI    CTJSVCLS,255-X'80'  TURN OFF HIGH BIT                 R4 K3010000
         OI    CTJFLAG,CTJCLS      SET CLASS OPERAND FOUND              K3010500
         B     CTJLOOP             AND LOOK FOR MORE OPERANDS           K3011000
         SPACE 2                                                        K3011500
CTJPRIO  DS    0H                  SET CHANGE TO JOB(S) PRIORITY        K3012000
         NI    CTJFLAG,255-(CTJUPRI+CTJDPRI+CTJPRI)  RESET PRI FOUND    K3012500
         OI    CTJFLAG,CTJUPRI     ASSUME ADDITION TO PRIO              K3013000
         CLI   2(R1),C'+'          TEST FOR SAME                        K3013500
         BE    CTJCNVT             YES--CONVERT NUMBER                  K3014000
         XI    CTJFLAG,CTJUPRI+CTJDPRI RESET ADD ASSUME SUB             K3014500
         CLI   2(R1),C'-'          TEST FOR SUBTRACTION                 K3015000
         BE    CTJCNVT             YES--CONVERT NUMBER                  K3015500
         XI    CTJFLAG,CTJDPRI     RESET SUBTRACTION                    K3016000
CTJCNVT  $CFCVB POINTER=(WD),NOK=CTJINVO  CONVERT PRIO                  K3016500
         SLA   R0,4                MULTIPLY BY 16                       K3017000
         CH    R0,*+10             TEST FOR EXCESSION OF MAX PRIO       K3017500
         BNH   *+8                 NO--LEAVE VALUE AS IS                K3018000
         LA    R0,255              SET MAX POSSIBLE PRIORITY            K3018500
         STC   R0,CTJSVPRI         AND SAVE IT FOR LATER                K3019000
         OI    CTJFLAG,CTJPRI      SET PRIORITY FOUND                   K3019500
         B     CTJLOOP             AND LOOK FOR MORE OPERANDS           K3020000
         SPACE 2                                                        K3020500
CTJSID   DS    0H                  EXTRACT NEW AFFINITES FOR JOB(S)     K3021000
         NI    CTJFLAG,255-(CTJUAFF+CTJDAFF+CTJAFF) RESET AFF FOUND     K3021500
         MVI   CTJSVSID,0          SET AFFINITY TO 'NONE'               K3022000
         OI    CTJFLAG,CTJUAFF     ASSUME ADDITION TO AFFINITY          K3022500
         CLI   2(R1),C'+'          TEST FOR SAME                        K3023000
         BE    CTJSID1             YES--GO EXTRACT REST OF FIELD        K3023500
         XI    CTJFLAG,CTJUAFF+CTJDAFF ASSUME DELETION OF AFFINITY      K3024000
         CLI   2(R1),C'-'          TEST FOR SAME                        K3024500
         BE    CTJSID1             YES -- EXTRACT REST OF OPERAND       K3025000
         XI    CTJFLAG,CTJDAFF     RESET DELETION OF AFFINITIES         K3025500
         BCTR  R1,0                FAKE EXISTENCE OF '+' OR '-'         K3026000
CTJSID1  DS    0H                  EXTRACT REST OF AFFINITY OPERAND     K3026500
         LA    R1,3(,R1)           POINT TO FIRST SID CHARACTER         K3027000
CTJSID2  DS    0H                  MAJOR LOOP FOR SID SCAN              K3027500
         CLC   0(3,R1),=C'ANY'     TEST FOR 'ANY' AFFINITY DESIRED      K3028000
         BNE   CTJSIIND            NO--TEST FOR INDEPENDENT MODE        K3028500
         OI    CTJSVSID,QUESYSAF   YES -- SET AFFINITY TO 'ANY'         K3029000
         NI    CTJFLAG,255-(CTJUAFF+CTJDAFF) RESET ADD OR SUB           K3029500
         B     CTJLPSID            AND EXIT FOR NEXT POSSIBLE SID       K3030000
CTJSIIND DS    0H                  TEST FOR INDEPENDENT MODE            K3030500
         CLC   0(3,R1),=C'IND'     IS REQUEST FOR INDEPENDENT MODE      K3031000
         BNE   CTJSIDM             NO--TRY FOR SPECIFIC SID OPERAND     K3031500
         OI    CTJSVSID,QUEINDAF   YES -- SET INDEPENDENT MODE          K3032000
         B     CTJLPSID            AND LOOP FOR MORE SID'S              K3032500
CTJSIDM  DS    0H                  TRY FOR SPECIFIC SID OPERAND         K3033000
         L     R14,$QSE1           POINT TO 1ST QSE                  R4 K3033500
*                                    THIS CARD DELETED BY APAR @OZ27300 K3034000
         USING QSEDSECT,R14        QSE ADDRESSABILITY                   K3034500
CTJAFFLP DS    0H                  LOOP FOR SID/OPERAND MATCH           K3035000
*                                    THIS CARD DELETED BY APAR @OZ27300 K3035500
         CLC   QSESID,0(R1)        TEST FOR MATCH                       K3036000
         BE    CTJAFFND            FOUND -- FLAG AFFINITY               K3036500
         TM    QSEFLAGS,QSELAST    TEST FOR LAST ELEMENT                K3037000
         LA    R14,QSELEN(,R14)    BUMP TO NEXT QSE            @OZ27300 K3037100
         BZ    CTJAFFLP            AND LOOP TILL FOUND OR ERROR         K3037500
         B     CTJINVO             ERROR -- OPERAND NOT FOUND           K3038000
CTJAFFND DS    0H                  SID MATCHED OPERAND                  K3038500
         OC    CTJSVSID,QSESIAFF   FLAG THIS AFFINITY                   K3039000
         SPACE 1                                                        K3039500
CTJLPSID DS    0H                  LOOP FOR MORE AFFINITIES             K3040000
         OI    CTJFLAG,CTJAFF      FLAG AFFINITY FOUND                  K3040500
         BXLE  WD,WE,CTJSIDNX      LOOK FOR MORE TO DO                  K3041000
         TM    CTJSVSID,QUEINDAF   IF LAST TEST FOR 'IND 'MODE          K3041500
         BZ    CTJEND              NO--EXIT OPERAND SCAN                K3042000
         TM    CTJSVSID,255-QUEINDAF TEST FOR 'IND' WITHOUT OTHER AF    K3042500
         BNZ   CTJEND              NO--EXIT OPERAND SCAN                K3043000
         TM    CTJFLAG,CTJUAFF+CTJDAFF TEST FOR '+' OR '-'              K3043500
         BNZ   CTJEND              'OK' WHEN + OR - IND                 K3044000
         SLR   WD,WE               ELSE ERROR, BACK UP ONE OPERAND      K3044500
         B     CTJINVO             AND ISSUE DIAGNOSTIC                 K3045000
         SPACE 1                                                        K3045500
CTJSIDNX DS    0H                  TRY FOR NEXT OPERAND                 K3046000
         L     R1,0(,WD)           PT TO NEXT OPERAND                   K3046500
         CLI   1(R1),C'='          TEST FOR ANOTHER SID                 K3047000
         BE    CTJSELCT            NO -- SELECT NEXT CHANGE             K3047500
         B     CTJSID2             ELSE ENTER SCAN LOOP                 K3048000
         DROP  R14                 DROP QSE ADDRESSABILITY              K3048500
         SPACE 2                                                        K3049000
CTJEND   DS    0H                  END OF OPERANDS                      K3049500
         MVC   CTJFLAG1,CTJFLAG    SAVE OPTIONS                         K3050000
         ST    WC,CTJRANGE         SET JOB RANGES                    R4 K3050500
         LH    WD,CTJRANGE         PICK UP LOW BOUND                 R4 K3051000
CTJSCAN  LH    WE,CTJRANGE+2       PICK UP HIGH BOUND                R4 K3051500
         $QSUSE ,                  ENQUEUE ON SHARED QUEUES             K3052000
         SLR   R10,R10             ZERO JOB HIT REGISTER                K3052500
         $CFJSCAN PROCESS=CTJPRO,NEXT=CTJNEXT  SCAN JOB QUEUE           K3053000
         SPACE 1                                                        K3053500
         LTR   R1,R10              TEST FOR ANY JOB(S) FOUND            K3054000
         BZ    CTJNOJOB            NONE--EXIT                           K3054500
         LR    WD,WE               SET NEW HIGHEST NUMBER               K3055000
         B     CTJCHNG             AND GO MODIFY FOUND JOB              K3055500
CTJNOJOB DS    0H                  TEST FOR ANY JOB(S) SET              K3056000
         TM    CTJFLAG,CTJJOB      TEST FOR SAME                        K3056500
         BO    CTJRET              YES--RETURN                          K3057000
         $CRET MSG='NO JOB(S) FOUND'  EXIT EITH DIAGNOSTIC              K3057500
CTJRET   DS    0H                  RETURN WITH NO DIAGNOSTIC            K3058000
         $CRET ,                   RETURN                               K3058500
         SPACE 1                                                        K3059000
CTJUPONE DS    0H                  PICK-UP NEXT NUMBER                  K3059500
         MVC   CTJFLAG,CTJFLAG1    GET OPTIONS FOR NEXT JOB             K3060000
         LA    WD,1(,WD)           ADD ONE TO FIRST NUMBER              K3060500
         CH    WD,CTJRANGE+2       ABOVE HIGH BOUND                  R4 K3061000
         BNH   CTJSCAN             NO--SCAN QUEUE AGAIN                 K3061500
         B     CTJNOJOB            ELSE EXIT $TJ ROUTINE                K3062000
         SPACE 1                                                        K3062500
CTJPRO   DS    0H                  JOB FOUND -- TEST IT                 K3063000
         LH    R0,JQEJOBNO         PICK-UP JOB'S NUMBER                 K3063500
         CLR   R0,WD               TEST FOR IN LOW RANGE                K3064000
         BE    CTJCHNG             EXACT HIT GO CHANGE IT               K3064500
         BL    CTJNEXT             BELOW RANGE - GET NEXT JOB           K3065000
         CLR   R0,WE               HIGH--TEST FOR HIGH RANGE            K3065500
         BH    CTJNEXT             IF HIGHER THAN HIGH-GET NEXT         K3066000
         LR    R10,R1              IF LOW OR EQUAL SET JOB TO CHANGE    K3066500
         LR    WE,R0               SET NEW HIGHEST NUMBER               K3067000
         B     CTJNEXT             AND GET NEXT JOB                     K3067500
         SPACE 1                                                        K3068000
CTJCHNG  DS    0H                  JOB FOUND TO CHANGE                  K3068500
         OI    CTJFLAG1,CTJJOB     SET JOB FLAG FOUND FLAG              K3069000
         TM    CTJFLAG,CTJPRI      TEST FOR PRIORITY CHANGE             K3069500
         BZ    CTJCCLAS            NO--CHECK FOR CLASS CHANGE           K3070000
         TM    JQEFLAGS,QUEBUSY    TEST FOR JOB BUSY                    K3070500
         BZ    CTJNTPRI            NO--OK TO CHANGE PRIORITY            K3071000
         NI    CTJFLAG,255-(CTJPRI+CTJUPRI+CTJDPRI) RESET PRI OPTION    K3071500
         B     CTJCCLAS            AND TRY FOR CLASS CHANGE             K3072000
CTJNTPRI DS    0H                  CONTINUE WITH PRIORITY CHANGE        K3072500
         SLR   R0,R0               ZERO CURRENT PRIO REGISTER           K3073000
         IC    R0,JQEPRIO          GET CURRENT PRIORITY                 K3073500
         SLR   WA,WA               ZERO NEW PRIORITY REGISTER           K3074000
         IC    WA,CTJSVPRI         PICK-UP NEW PRIORITY                 K3074500
         TM    CTJFLAG,CTJUPRI     TEST FOR ADDITION                    K3075000
         BO    CTJPRIU             YES--ADD NEW TO OLD TO GET NEW       K3075500
         TM    CTJFLAG,CTJDPRI     TEST FOR SUBTRACTION TO PRIORITY     K3076000
         BO    CTJPRID             YES-SUB NEW FROM OLD TO GET NEW      K3076500
         SLR   R0,R0               ELSE SET PRIORITY EXPLICITLY         K3077000
         B     CTJPRIU             AND ENTER ADDITION RTN               K3077500
CTJPRID  LNR   WA,WA               SET NEW AS NEGATIVE                  K3078000
CTJPRIU  AR    WA,R0               COMPUTE NEW PRIORITY                 K3078500
         BNM   *+6                 IF NOT NEGATIVE -- OK                K3079000
         SLR   WA,WA               ELSE SET AS ZERO                     K3079500
         CH    WA,*+10             TEST FOR ABOVE MAX                   K3080000
         BNH   CTJCCLAS            NO--LEAVE AS IS                      K3080500
         LA    WA,255              SET MAX PRIORITY                     K3081000
         SPACE 2                                                        K3081500
CTJCCLAS DS    0H                  TEST FOR CHANGE TO JOB CLASS         K3082000
         TM    CTJFLAG,CTJCLS      TEST FOR CLASS CHANGE                K3082500
         BZ    CTJCAFF             NO TEST FOR CHANGE TO AFFINITY       K3083000
         TM    JQETYPE,$XEQ        TEST FOR CNVT OR XEQT                K3083500
         BZ    CTJBDCLS            NO--CAN'T CHANGE CLASS               K3084000
         TM    JQEFLAGS,QUEBUSY    TEST FOR JOB BUSY IN THESE STAGES    K3084500
         BNZ   CTJBDCLS            YES -- CAN'T CHANGE CLASS            K3085000
         CLI   JQETYPE,$XEQ        TEST FOR QUEUED FOR CONVERSION       K3085500
         BE    CTJBDCLS            YES--CAN'T CHANGE CLASS              K3086000
         SLR   WB,WB               ZERO NEW CLASS REGISTER              K3086500
         IC    WB,CTJSVCLS         PICK-UP NEW CLASS                    K3087000
         SLR   R15,R15             ZERO OLD CLASS REGISTER              K3087500
         IC    R15,JQETYPE         PICK-UP OLD JOB CLASS                K3088000
         SL    R15,=A(X'40')       SUBTRACT FOR OFFSET TO CAT           K3088500
         SLL   R15,5               COMPUTE DISPLACEMENT INTO CAT        K3089000
         AL    R15,$CATABLE        COMPUTE CAT ADDRESS                  K3089500
         SL    WB,=A(X'40')        SUBTRACT FOR CAT                     K3090000
         SLL   WB,5                TIMES CAT SIZE                       K3090500
         AL    WB,$CATABLE         COMPUTE CAT ELEMENT ADDRESS          K3091000
         TM    CATJOBFL-CATDSECT(R15),CATBATCH  TEST FOR BATCH       R4 K3091500
         BZ    CTJBDCLS            ERROR IF NOT BATCH                R4 K3092000
         TM    CATJBOPT-CATDSECT(R15),CATXBACH  TEST FOR XBM         R4 K3092500
         BO    CTJBDCLS            ERROR IF XBATCH                   R4 K3093000
         TM    CATJOBFL-CATDSECT(WB),CATBATCH  TEST FOR BATCH        R4 K3093500
         BZ    CTJBDCLS            ERROR IF NOT BATCH                R4 K3094000
         TM    CATJBOPT-CATDSECT(WB),CATXBACH  TEST FOR XBM          R4 K3094500
         BO    CTJBDCLS            ERROR IF XBATCH                   R4 K3095000
         SLR   WB,WB               CLEAR REGISTER                    R4 K3095500
         IC    WB,CTJSVCLS         PICK-UP GOOD CLASS                   K3096000
         B     CTJCAFF             AND GO CHANGE AFFINITY POSSIBLY      K3096500
CTJBDCLS DS    0H                  INVLAID TO CHANGE CLASS              K3097000
         NI    CTJFLAG,255-CTJCLS  INDICATE NO CLASS CHANGE             K3097500
         SPACE 2                                                        K3098000
CTJCAFF  DS    0H                  SET NEW AFFINITY                     K3098500
         TM    CTJFLAG,CTJAFF      TEST FOR AFFINITY CHANGE             K3099000
         BZ    CTJQMOD             NO--MODIFY ELEMENT POSSIBLY          K3099500
         CLC   JQEJOBNO,=H'10000'  TEST FOR NORMAL JOB                  K3100000
         BL    CTJNTAFF            YES--OK TO CHANGE AFFINITY           K3100500
         TM    JQETYPE,$XEQ        TEST FOR STC OR TSU IN XEQ OR CNV    K3101000
         BO    CTJBDAFF            YES--CAN'T CHANGE AFFINITY           K3101500
         CLI   JQETYPE,$INPUT      TEST FOR STC OR TSU IN INPUT RDR     K3104000
         BNE   CTJNTAFF            NO--OK TO CHANGE AFFINITY            K3104500
CTJBDAFF DS    0H                  CAN'T CHANGE AFFINITY                K3105000
         NI    CTJFLAG,255-(CTJAFF+CTJUAFF+CTJDAFF) RESET AFF CHANGE    K3105500
         B     CTJQMOD             AND MODIFY JOB QUEUE ELEMENT         K3106000
CTJNTAFF DS    0H                  OK TO CHANGE AFFINITY                K3106500
         MVC   CTJOLDAF,JQEFLAG2   PICK-UP OLD AFFINITIES               K3107000
         TM    CTJFLAG,CTJUAFF     TEST FOR ADDITION TO AFF             K3107500
         BO    CTJUPAF             YES--GO DO IT                        K3108000
         TM    CTJFLAG,CTJDAFF     TEST FOR SUBTRACTION TO AFF          K3108500
         BO    CTJDWAF             YES--GO DO IT                        K3109000
         MVI   CTJOLDAF,0          SET AFFINITY TO 'NONE'               K3109500
CTJUPAF  OC    CTJOLDAF,CTJSVSID   SET NEW AFFINITIES                   K3110000
         B     CTJQMOD             GO SET NEW JOB CHARACTERISTICS       K3110500
CTJDWAF  DS    0H                  REQUEST IS TO REMOVE AFFINITIES      K3111000
         LA    R15,255             SET REGISTER TO ALL BITS 'ON'        K3111500
         SLR   R0,R0               ZERO INSERT REGISTER                 K3112000
         IC    R0,CTJSVSID         PICK-UP AFFINITIES TO REMOVE         K3112500
         SLR   R15,R0              COMPUTE BITS TO LEAVE 'ON'           K3113000
         EX    R15,CTJOFFAF        TURN 'OFF' SELECTED AFFINITIES       K3113500
         L     R14,$QSE1           POINT TO 1ST QSE                  R4 K3114000
*                                    THIS CARD DELETED BY APAR @OZ27300 K3114500
         USING QSEDSECT,R14        QSE ADDRESSABILITY                   K3115000
*                                    THIS CARD DELETED BY APAR @OZ27300 K3115500
CTJAFFCK IC    R15,QSESIAFF        PICK UP AFFINITY FOR TEST   @OZ27300 K3116000
         EX    R15,CTJAFFON        TEST FOR IMPOSSIBLE AFFINITY         K3116500
         BO    CTJQMOD             AFFINITY IS 'OK'                     K3117000
         TM    QSEFLAGS,QSELAST    TEST FOR LAST ELEMENT                K3117500
         LA    R14,QSELEN(,R14)    BUMP TO NEXT QSE            @OZ27300 K3117600
         BZ    CTJAFFCK            GO LOOK AGIN                         K3118000
         B     CTJUPAF             NOT FOUND -RESET AFFINITY            K3118500
CTJOFFAF NI    CTJOLDAF,*-*        **** EXECUTE ONLY ****               K3119000
CTJAFFON TM    CTJOLDAF,*-*        **** EXECUTE ONLY ****               K3119500
         DROP  R14                 DROP QSE ADDRESSABILITY              K3120000
         SPACE 1                                                        K3120500
CTJQMOD  DS    0H                  SET NEW JOB CHARACTERISTICS          K3121000
         TM    CTJFLAG,CTJPRI+CTJCLS+CTJAFF TEST FOR ANY CHANGES        K3121500
         BZ    CTJDISP             NO--DISPLAY JOB ONLY                 K3122000
         TM    CTJFLAG,CTJPRI      TEST FOR PRIORITY CHANGE             K3122500
         BZ    *+8                 NO--TRY AFFINITY CHANGE              K3123000
         STC   WA,JQEPRIO          SET NEW PRIORITY                     K3123500
         TM    CTJFLAG,CTJAFF      TEST FOR AFFINITY CHANGE             K3124000
         BZ    CTJNPOST            NO--TEST FOR $QMOD OR $QCKPT         K3124500
         MVC   JQEFLAG2,CTJOLDAF   SET NEW AFFINITIES                   K3125000
         $POST $HASPECF,(JOB)      POST FOR JOB CHANGE                  K3125500
         OI    $AQSE,QSEPJOB       CAUSE X SYSTEM POST(S)               K3126000
CTJNPOST DS    0H                  NO POST REQUIRED                     K3126500
         TM    CTJFLAG,CTJCLS      TEST FOR CLASS CHANGE                K3127000
         BO    CTJ$QMOD            YES--USE NEW CLASS                   K3127500
         TM    CTJFLAG,CTJPRI      TEST FOR $QMOD OR $QCKTP NEEDED      K3128000
         BZ    CTJCKPT             NO--CHECKPOINT THE ELEMENT           K3128500
         SLR   WB,WB               ELSE ZERO CLASS REGISTER             K3129000
         IC    WB,JQETYPE          PICKUP EXISTING CLASS                K3129500
CTJ$QMOD DS    0H                  MODIFY JOB QUEUE ELEMENT             K3130000
         $QMOD (R1),(WB)           ELSE RESET JOB IN QUEUE              K3130500
         SPACE 1                                                        K3131000
CTJDISP  $CFJMSG ,                 DISPLAY JOB                          K3131500
         SPACE 1                                                        K3132000
         B     CTJUPONE            AND GET NEXT JOB                     K3132500
CTJCKPT  DS    0H                  CHECK POINT NEEDED                   K3133000
         $QCKPT (R1)               CHECK POINT MODIFIED JOB             K3133500
         B     CTJDISP             AND DISPLAY IT                       K3134000
         SPACE 2                                                        K3134500
*        $TJOB EQUATES                                                  K3135000
         SPACE 1                                                        K3135500
CTJOLDAF EQU   COMPNTER,1          OLD AFFINITY SAVE AREA               K3136000
CTJSVSID EQU   COMPNTER+1,1        NEW AFFINITY SAVE AREA               K3136500
CTJSVPRI EQU   COMPNTER+2,1        NEW PRIORITY SAVE ATEA               K3137000
CTJSVCLS EQU   COMPNTER+3,1        NEW CLASS SAVE AREA                  K3137500
CTJFLAG  EQU   COMPNTER+4,1        FLAGS FOR JOB CHANGES                K3138000
CTJFLAG1 EQU   COMPNTER+5,1        SAVE AREA FOR FLAGS                  K3138500
CTJRANGE EQU   COMPNTER+8,4        JOB RANGES                        R4 K3139000
*        FLAG DEFINITIONS                                               K3139500
CTJCLS   EQU   X'80'               CLASS OPERAND WAS PROVIDED           K3140000
CTJPRI   EQU   X'40'               PRIORITY OPERAND WAS PROVIDED        K3140500
CTJUPRI  EQU   X'20'               PRIORITY IS TO BE INCREASED          K3141000
CTJDPRI  EQU   X'10'               PRIORITY IS TO BE DECREASED          K3141500
CTJAFF   EQU   X'08'               AFFINITY OPERAND WAS PROVIDED        K3142000
CTJUAFF  EQU   X'04'               AFFINITY IS TO BE INCREASED          K3142500
CTJDAFF  EQU   X'02'               AFFINITY IS TO BE DECREASED          K3143000
CTJJOB   EQU   X'01'               JOB WAS FOUND FLAG                   K3143500
         SPACE 2                                                        K3144000
         LTORG ,                                                        K3144500
         EJECT                                                          K3145000
HASPCJB4 $COMGRUP OJ,OS,OT         DEFINE SUB-PROCESSOR FOR $O CMN      K3145500
         SPACE 2                                                        K3146000
*********************************************************************** K3146500
*                                                                     * K3147000
*        $O (J,S,T)N-NN,OPTIONS,Q=SYSOUT CLASS(ES) OF DATA SETS       * K3147500
*        CHANGE STATUS OF OUTPUT DATA SETS FOR JOBS, STCS, OR TSUS    * K3148000
*        WHERE OPTIONS ARE - CANCEL, RELEASE, OR RELEASE TO A         * K3148500
*                            SPECIFIED REMOTE OR LOCAL                * K3149000
*        JOB, STC, OR TSU NUMBERS MAY BE SPECIFIED BY RANGE N-NN      * K3149500
*        WITH N LESS THAN NN. OPERANDS FOLLOWING THE FIRST MAY        * K3150000
*        APPEAR IN ANY ORDER.                                         * K3150500
*                                                                     * K3151000
* REGISTERS USED -                                                    * K3151500
*                                                                     * K3152000
*        WB    = ROUTE CODE IF RE-ROUTING IS DESIRED                  * K3152500
*        WC    = BEGINNING JOB, STC, OR TSU NUMBER                    * K3153000
*        WE    = ENDING JOB, STC, OR TSU NUMBER                       * K3153500
*                                                                     * K3154000
*********************************************************************** K3154500
         SPACE 2                                                        K3155000
COT      DS    0H                  ENTRY FOR $OT COMMAND                K3155500
         LH    WA,=H'20000'        SET TSU INCREMENT                    K3156000
         B     COJTS               AND ENTER COMMON SECTION             K3156500
COS      DS    0H                  ENTRY FOR $OS COMMAND                K3157000
         LH    WA,=H'10000'        SET STC INCREMENT                    K3157500
         B     COJTS               AND ENTER COMMON SECTION             K3158000
COJ      DS    0H                  ENTRY FOR $OJ COMMAND                K3158500
         SLR   WA,WA               INDICATE NO INCREMENT FOR JOBS       K3159000
COJTS    DS    0H                  COMMON SECTION FOR JOB,STC,TSU       K3159500
         $CFCVB POINTER=(WD),NOK=COJINVOA CONVERT TO BINARY             K3160000
         LTR   R1,R1               RESULT ZERO                       R4 K3160500
         BZ    COJINVOA            ERROR IF YES                      R4 K3161000
         ALR   R1,WA               COMPUTE ACTUAL LOW NUMBER         R4 K3161500
         ALR   R0,WA               COMPUTE ACTUAL HIGH NUMBER        R4 K3162000
         STH   R1,0(,WD)           SAVE LOW NUMBER FOR LATER            K3162500
         STH   R0,2(,WD)           AND HIGH ALSO                        K3163000
         EJECT                                                          K3163500
*********************************************************************** K3164000
*                                                                     * K3164500
*        SCAN OPERANDS FOR OUTPUT DATA SET ACTION                     * K3165000
*                                                                     * K3165500
*********************************************************************** K3166000
COJBEGIN LR    WC,WD               SAVE POINTER TO OPERAND PTRS         K3166500
        $TIME                      GET CURRENT DATE IN R1           R41 K3166600
         ST    R1,COJSVCRD         SAVE IT                          R41 K3166700
COJLOOP  DS    0H                  ENTER OPERAND SCAN LOOP              K3167000
         BXH   WC,WE,COJOPEND      SCAN TILL END OF OPERANDS            K3167500
         L     R1,0(,WC)           POINT TO OPERAND                     K3168000
         CLI   1(R1),C'='          TEST FOR POSSIBLE CLASS STRING       K3168500
         BNE   COJTEST             NO--LOOK FURTHER                     K3169000
         CLI   0(R1),C'Q'          YES -- TEST FOR PROPER FORMAT        K3169500
         BE    COJCLASS            YES--EXTRACT CLASS STRING            K3170000
         CLI   0(R1),C'R'          THIS ROUTE CODE                   R4 K3170500
         BE    COJRMT              BREAK OUT ROUTE CODE IF YES       R4 K3171000
         CLI   0(R1),C'D'          CUT-OFF DATE SPECIFIED...        R41 K3171100
         BE    COJDATE             BR IF YES                        R41 K3171200
         B     COJINVOO            NO--ERROR IN OPERAND                 K3171500
COJTEST  CLI   0(R1),C'C'          IS IT A REQUEST TO CANCEL            K3172000
         BE    COJCANCL            YES--FLAG CANCEL REQUIRED            K3172500
COJINVOO DS    0H                  INVALID OPERAND                      K3173000
         LR    WD,WC               COPY OPERAND POINTER                 K3173500
COJINVOA L     R1,0(,WD)           POINT TO INVALID OPERAND             K3174000
         $CFINVO OPERAND=(R1)      AND DISPLAY IT                       K3174500
         SPACE 2                                                        K3175000
COJCLASS DS    0H                  EXTRACT SYSOUT CLASSES               K3175500
         L     R15,4(,WC)          POINT TO NEXT OPERAND                K3176000
         LA    R15,0(,R15)         CLEAR HI-ORDER FLAG BYTE             K3176500
         SLR   R15,R1              COMPUTE SIZE OF OPERAND              K3177000
         SH    R15,=H'4'           COMPUTE MACHINE SIZE                 K3177500
         BM    COJINVOO            NO STRING IF NEGATIVE--ERROR         K3178000
         CH    R15,*+10            CHECK FOR MAX SIZE                   K3178500
         BNH   *+8                 LESS THAN OR EQ -- OK                K3179000
         LA    R15,7               ELSE USE MAX OF 8 CHARACTERS         K3179500
         L     R14,=A(CVALIDTB)    POINT TO TEST TABLE               R4 K3180000
         EX    R15,COJVALID        TEST FOR ALL VALID CLASSES           K3180500
         BNZ   COJINVOO            INVALID OPERAND IF INVALID CLASSES   K3181000
         MVI   COJSVCLS,C' '       BLANK CLASS SAVE AREA                K3181500
         MVC   COJSVCLS+1(L'COJSVCLS-1),COJSVCLS  DITTO                 K3182000
         EX    R15,COJMVCLS        ELSE MOVE CLASS STRING               K3182500
         OI    COMNULOP,COJQOP     AND FLAG CLASS STRING EXISTS         K3183000
         B     COJLOOP             LOOP THROUGH ALL OPERANDS            K3183500
COJVALID TRT   2(*-*,R1),0(R14)    *** EXECUTE ONLY ***              R4 K3184000
COJMVCLS MVC   COJSVCLS(*-*),2(R1) **** EXECUTE ONLY ****               K3184500
         EJECT                                                      R41 K3185000
COJCANCL DS    0H                  COME HERE FOR CANCEL OPTION          K3185500
         OI    COMNULOP,COJCNCL    INDICATE HELD DATA SET CANCEL    R41 K3186000
         B     COJLOOP             LOOP FOR MORE OPERANDS               K3186500
COJRMT   DS    0H                                                    R4 K3187000
         LR    WB,WD               SAVE NORMAL SCAN REGISTER         R4 K3187500
         LR    WD,WC               PUT OPERAND POINTER BACK          R4 K3188000
         BAL   LINK,COFRTRA        CONVERT RANGES                    R4 K3188500
         B     COJINVOA            ERROR EXIT               + 0      R4 K3189000
         CR    R1,R0               SAME ROUTE               + 4      R4 K3189500
         BNE   COJINVOA            ERROR EXIT                        R4 K3190000
         LR    WD,WB               RESTORE SCAN REGISTER             R4 K3190500
         LR    WB,R1               SET ROUTE CODE                    R4 K3191000
         OI    COMNULOP,COJRTE     SET ROUTE FLAG                    R4 K3191500
         B     COJLOOP             LOOP FOR MORE                     R4 K3192000
         SPACE 1                                                    R41 K3192100
COJDATE  L     WA,4(,WC)           GET POINTER TO NEXT OPERAND      R41 K3192200
         LA    WA,0(,WA)           CLEAR HIGH-ORDER BYTE            R41 K3192300
         SLR   WA,R1               ENSURE                           R41 K3192400
         SH    WA,=H'3'             AT LEAST 1                      R41 K3192500
         BNP   COJINVOO              AND NOT                        R41 K3192600
         CH    WA,=H'5'               MORE THAN                     R41 K3192700
         BH    COJINVOO                5 DIGITS                     R41 K3192800
         LR    R0,WA               RELOAD VALUE LENGTH              R41 K3192900
         LR    LINK,R1              AND OPERAND POINTER             R41 K3193000
         SPACE 1                                                    R41 K3193100
COJDATVL LA    LINK,1(,LINK)       ENSURE                           R41 K3193200
         CLI   1(LINK),C'0'         OPERAND                         R41 K3193300
         BL    COJINVOO              VALUE                          R41 K3193400
         CLI   1(LINK),C'9'           IS                            R41 K3193500
         BH    COJINVOO                STRICTLY                     R41 K3193600
         BCT   R0,COJDATVL              NUMERIC                     R41 K3193700
         SPACE 1                                                    R41 K3193800
         BCTR  WA,0                REDUCE FOR EXECUTE               R41 K3193900
         EX    WA,COJDATPK         CONVERT VALUE TO PACKED DECIMAL  R41 K3194000
         CH    WA,=H'1'            TEST FORM OF VALUE               R41 K3194100
         BH    COJYYDDD            BR IF NOT NN (DAYS)              R41 K3194200
        $TIME  ,                   GET CURRENT DATE IN R1           R41 K3194300
         SLR   R0,R0               CLEAR R0                         R41 K3194400
         STM   R0,R1,COMDWORK      STORE PACKED DECIMAL DATE        R41 K3194500
         CVB   R1,PCER1            CONVERT DAYS TO BINARY           R41 K3194600
         CVB   R0,COMDWORK         CONVERT DATE TO BINARY           R41 K3194700
         CLC   PCER1+6(2),COMDWORK+6  CUT-OFF DATE LAST YEAR...     R41 K3194800
         BL    COJYYOK             BR IF NO                         R41 K3194900
         LA    R1,1000-365(,R1)    IGNORE DAYS 366 - 999            R41 K3195000
         MVO   COMDWORK+5(3),COMDWORK+5(1)  ISOLATE CURRENT YEAR    R41 K3195100
         CVB   LINK,COMDWORK       CONVERT YEAR TO BINARY           R41 K3195200
         BCTR  LINK,0              BACK UP 1 YEAR                   R41 K3195300
         N     LINK,=F'3'          TEST FOR LEAP YEAR               R41 K3195400
         BNZ   COJYYOK             BR IF NO                         R41 K3195500
         BCTR  R1,0                ACKNOWLEDGE DAY 366              R41 K3195600
         SPACE 1                                                    R41 K3195700
COJYYOK  SR    R0,R1               GET CUT-OFF DATE                 R41 K3195800
         BNM   *+6                 BR IF THIS CENTURY               R41 K3195900
         SLR   R0,R0               CUT-OFF AT TURN OF CENTURY       R41 K3196000
         CVD   R0,PCER1            CONVERT RESULT TO PACKED DECIMAL R41 K3196100
         MVC   COJSVCRD,PCER1+4    STORE CUT-OFF DATE               R41 K3196200
         OI    COJSVCRD+3,X'0F'    MAKE 'PRINTABLE'                 R41 K3196300
         B     COJLOOP             BR TO TEST FOR MORE OPERANDS     R41 K3196400
         EJECT                                                      R41 K3196500
COJYYDDD CH    WA,=H'4'            TEST FOR YYDDD                   R41 K3196600
         BNE   COJINVOO            INVALID IF NO                    R41 K3196700
         MVC   COJSVCRD,PCER1+4    STORE CUT-OFF DATE               R41 K3196800
         B     COJLOOP             BR TO TEST FOR MORE OPERANDS     R41 K3196900
         SPACE 1                                                    R41 K3197000
COJDATPK PACK  PCER1(8),2(*-*,R1)  *** EXECUTE ONLY ***             R41 K3197100
         SPACE 1                                                    R41 K3197200
COJOPEND DS    0H                  COME HERE AFTER ALL OPERANDS         K3197300
         LH    WC,0(,WD)           GET RANGE OF                         K3197400
COJLP    LH    WE,2(,WD)           JOBS TO ACT UPON                     K3197500
         SLR   R10,R10             CLEAR HIT REGISTER                   K3197600
         $CFJSCAN PROCESS=COJJOB,NEXT=COJNXJOB  LOOK FOR JOBS           K3197700
         LTR   R1,R10              LOOK FOR ANY JOBS IN RANGE           K3197800
         BZ    COJNOJOB            NO--ISSUE DIAGNOSTIC                 K3197900
         LR    WC,WE               YES--SET NEW FIRST NBR               K3198000
COJOWNER DS    0H                  CHECK OWNERSHIP OF JOB               K3198100
         $CFVQE OK=COJOBOK         IS CONSOLE SUBMITTER THE OWNER       K3198200
COJUPONE LA    WC,1(,WC)           NOT OWNED--GET NEXT                  K3198300
         CH    WC,2(,WD)           CHECK FOR LAST TO HANDLE             K3198400
         BNH   COJLP               NO--LOOK FOR NEXT JOB                K3198500
COJNOJOB TM    COMNULOP,COJJOBS    TEST FOR ANY JOBS FOUND              K3199000
         BO    COJRET              YES--RETURN WITHOUT DIAGNOSTIC       K3199500
         $CRET MSG='JOB(S) NOT FOUND'                                   K3200000
COJJOB   DS    0H                  JOB FOUND                            K3200500
         LH    R0,JQEJOBNO         LOAD JOB NUMBER                      K3201000
         CLR   R0,WC               CHECK VS. DESIRED JOB                K3201500
         BE    COJOWNER            YES--CHECK OWNERSHIP                 K3202000
         BL    COJNXJOB            OUT OF RANGE--GET NEXT               K3202500
         CLR   R0,WE               CHECK JOB WITH LAST IN RANGE         K3203000
         BH    COJNXJOB            HIGH--NEXT JOB                       K3203500
         LR    R10,R1              COPY JQE ADDRESS FOR LATER TEST      K3204000
         LR    WE,R0               COPY JOB NBR FOR LATER USE           K3204500
         B     COJNXJOB            AND GET ANOTHER JOB                  K3205000
COJOBOK  DS    0H                  COME HERE WHEN JOB FOUND             K3205500
         OI    COMNULOP,COJJOBS    FLAG JOB FOUND                       K3206000
         MVI   COMMAND,C' '        CLEAR MSG AREA                       K3206500
         MVC   COMMAND+1(L'COMMAND-1),COMMAND  DITTO                    K3207000
         NI    COMMID+1,X'FE'      TELL HASPCON JOB ID IS SET           K3207500
         LR    R0,WC               PREPARE TO CONVERT JOB NBR           K3208000
         MVC   COFJOB,=C'JOB'      ASSUME BATCH JOB                     K3208500
         CH    R0,=H'10000'        TEST FOR SAME                        K3209000
         BL    COJMSGC             COMPLETE MSG IF JOB                  K3209500
         MVC   COFJOB,=C'TSU'      ASSUME TIME SHARING USER             K3210000
         SH    R0,=H'20000'        TEST FOR TSU                         K3210500
         BNM   COJMSGC             YES--COMPLETE MESSAGE                K3211000
         AH    R0,=H'10000'        MUST BE SYSTEM CONTROL TASK          K3211500
         MVC   COFJOB,=C'STC'      ADJUST ID AND NUMBER FOR STC         K3212000
COJMSGC  DS    0H                  COMPLETE MESSAGE PREFIX              K3212500
         $CFCVE VALUE=(R0)         CONVERT JOB NUMBER TO EBCDIC         K3213000
         MVC   COFJNO,COMDWORK     AND PUT SAME IN MSG                  K3213500
         MVC   COFJNAME,JQEJNAME   FINALLY INSERT TASK NAME             K3214000
*********************************************************************** K3214500
*                                                                     * K3215000
*        GET PSO ELEMENT AND QUEUE IT FOR $O REQUEST                  * K3215500
*                                                                     * K3216000
*********************************************************************** K3216500
         SPACE 1                                                        K3217000
         LH    WF,JQEHLDCT         PICK-UP HOLD DATA SET COUNT          K3217500
         LTR   WF,WF               TEST FOR ANY                         K3218000
         BZ    COJNOHLD            NO--ISSUE DIAGNOSTIC                 K3218500
         ST    R1,COMEWORK         SAVE JQE ADDRESS                     K3219000
         GETMAIN RC,LV=PSOLNGTH,SP=0  GET STORAGE FOR PSO ELEMENT       K3219500
         SPACE 1                                                        K3220000
         LR    WF,R1               PICK-UP STORAGE ADDRESS              K3220500
         LTR   R15,R15             CHECK FOR STORAGE AVAILABLE          K3221000
         BNZ   COJNOSTR            NONE--ISSUE DIAGNOSTIC               K3221500
         USING PSODSECT,WF         PSO ADDRSSSABILITY                   K3222000
         LR    R0,R1               CLEAR                             R4 K3222500
         LA    R1,PSOLNGTH          PSO                              R4 K3223000
         MVCL  R0,R14                STORAGE                         R4 K3223500
         L     R1,COMEWORK         POINT TO JQE                      R4 K3224000
         OI    PSOFLG1,PSOFHLD+PSOFJOBI+PSOFJOBN  SET PSO FLAGS         K3224500
         MVC   PSOCRDT,COJSVCRD    SET CUT-OFF DATE IN ELEMENT      R41 K3224600
         TM    COMNULOP,COJQOP     TEST FOR CLASS STRING                K3225000
         BZ    *+14                NO--SKIP SETTING SUCH                K3225500
         OI    PSOFLG1,PSOFCLAS    SET CLASS STRING PROVIDED            K3226000
         MVC   PSOCLAS,COJSVCLS    SET CLASSES IN ELEMENT               K3226500
         OI    PSOFLG2,PSOFDONE+PSOF$O  SET PSO FLAGS                   K3227000
         MVC   PSOJOBN,JQEJNAME    SET JOB NAME IN ELEMENT              K3227500
         MVC   PSOJOBNO,JQEJOBNO   SET JOB NUMBER IN ELEMENT            K3228000
         TM    COMNULOP,COJCNCL    TEST FOR CANCEL DATA SETS            K3228500
         BZ    *+12                NO--SET RELEASE                      K3229000
         OI    PSOUFLG,PSOFDELC    SET CANCEL DATA SETS                 K3229500
         B     COJQUEUE            GO QUEUE PSO ELEMENT                 K3230000
         OI    PSOUFLG,PSOFRLSE    SET TO RELEASE DATA SETS             K3230500
         TM    COMNULOP,COJRTE     TEST FOR RE-ROUTONG DESIRED          K3231000
         BZ    *+12                NO--SKIP SETTING NEW ROUTE CODE      K3231500
         STH   WB,PSOROUTE         SET NEW ROUTE CODE                   K3232000
         OI    PSOUFLG,PSOFROUT    AND FLAG AS SUCH                     K3232500
COJQUEUE DS    0H                  ADD ELEMENT TO QUEUE                 K3233000
         LR    R15,WF              SAVE ADDRESS OF ELEMENT              K3233500
         LA    WF,$OQUEUE-(PSONEXT-PSODSECT) POINT TO ELEMENT           K3234000
         L     R14,PSONEXT         PT TO NEXT ELEMENT                   K3234500
         LTR   R14,R14             TEST FOR LAST ELEMENT                K3235000
         BZ    *+10                YES--SET NEW LST ELEMENT             K3235500
         LR    WF,R14              ELSE PT TO NEXT ELEMENT              K3236000
         B     *-12                AND LOOP TILL LAST ELEMENT           K3236500
         ST    R15,PSONEXT         ADD NEW ELEMENT                      K3237000
         DROP  WF                  DROP PSO ADDRESSABILITY              K3237500
         OI    COMNULOP,COJPSOMD   FLAG REQUEST HONORED                 K3238000
         MVC   COFQUE(21),=C'DATA SETS RELEASED TO'                  R4 K3238500
         LA    R0,COFQUE+18-COFJOB SET LENGTH FOR NO RE-ROUTING         K3239000
         TM    COMNULOP,COJCNCL    TEST FOR DATA SETS CANCELLED         K3239500
         BZ    COJRNCL             NO--TRY FOR RE-ROUTING               K3240000
         MVC   COFQUE+10(9),=C'CANCELLED' YES--INDICATE SUCH            K3240500
         LA    R0,COFQUE+19-COFJOB SET MESSAGE LENGTH                   K3241000
         B     COJRES              AND RESPOND TO OPERATOR              K3241500
COJRNCL  DS    0H                  REQUEST IS NOT TO CANCEL             K3242000
         TM    COMNULOP,COJRTE     TEST FOR RE-ROUTING                  K3242500
         BZ    COJRES              IF NO RE-ROUTING--RESPOND            K3243000
         LA    R15,COMFWORK        POINT TO ROUTE CODE FIELD         R4 K3243500
         STH   WB,COMFWORK         SET ROUTE CODE IN IT              R4 K3244000
         LA    R0,COFQUE+21        POINT TO TEXT AREA                R4 K3244500
         BAL   LINK,COFRTC         CONVERT TO PRINTABLE              R4 K3245000
         LA    R0,COFQUE+21+9-COFJOB SET MESSAGE LENGTH              R4 K3245500
COJRES   DS    0H                  RESPOND TO THE OPERATOR              K3246000
         $CWTO L=(R0)                                                   K3246500
         B     COJUPONE            AND GET NEXT JOB                     K3247000
         B     COJUPONE            GET NEXT JOB                         K3247500
         SPACE 2                                                        K3248000
*        MESSAGE WHEN JOB HAS NO HELD DATA SETS                         K3248500
         SPACE 1                                                        K3249000
COJNOHLD DS    0H                  SEND NO HELD DS DIAG                 K3249500
         MVC   COFQUE(17),=C'NO HELD DATA SETS'  FORMAT MESSAGE         K3250000
         LA    R0,COFQUE+17-COFJOB SET MESSAGE LENGTH                   K3250500
         B     COJRES              RESPOND TO OPERATOR                  K3251000
         SPACE 2                                                        K3251500
*        MESSAGE NO STORAGE AVAILABLE FOR PSO ELEMEMNT                  K3252000
         SPACE 1                                                        K3252500
COJNOSTR DS    0H                  NO STORAGE AVAILABLE                 K3253000
         MVC   COMMAND+18(20),=C'NO STORAGE AVAILABLE' SEND    @OZ46407 K3253500
        $CWTO  L=18+20                             DIAG MSG    @OZ46407 K3254000
         SPACE 2                                                        K3255000
COJRET   DS    0H                  EXIT $O COMMAND                      K3255500
         TM    COMNULOP,COJPSOMD   TEST FOR ANY PSO ELEMENTS QUEUED     K3256000
         BZ    COJEXIT             NO--EXIT COMMAND                     K3256500
         L     R15,$PSOPCE         POINT TO PSO PCE                  R4 K3257000
         $POST (R15),WORK          POST PSO FOR $O WORK                 K3257500
COJEXIT  DS    0H                  EXIT                                 K3258000
         $CRET ,                   EXIT $OJ COMMAMD                     K3258500
*********************************************************************** K3259000
*                                                                     * K3259500
*        $O COMMAND EQUATES                                           * K3260000
*                                                                     * K3260500
*********************************************************************** K3261000
COJJOBS  EQU   X'80'               FLAG FOR JOBS FOUND                  K3261500
COJPSOMD EQU   X'40'               FLAG FOR PSO ELEMENT ADDED           K3262000
COJRTE   EQU   X'20'               FLAG FOR RE-ROUTING                  K3262500
COJCNCL  EQU   X'10'               FLAG FOR CANCELLING                  K3263000
COJQOP   EQU   X'08'               FLAG FOR CLASS STRING EXISTS         K3263500
COJSVCLS EQU   COMJNAME,8          AREA FOR SAVING CLASSES              K3264000
COJSVCRD EQU   COMREGSV,4          AREA FOR SAVING CUT-OFF DATE     R41 K3264100
         SPACE 2                                                        K3264500
         LTORG ,                                                        K3265000
         TITLE 'HASP COMMAND PROCESSOR HASPCDV1- DEVICE LIST COMMANDS'  K3265500
HASPCDV1 $COMGRUP  B,C,E,F,I,N,P,S,T,Z,DELAY=YES                        K3266000
*********************************************************************** K3266500
*                                                                     * K3267000
*        DEVICE LISTS ARE OF THE FOLLOWING FORM                       * K3267500
*                                                                     * K3268000
*        $V DEV1,DEV2,...,DEVN                                        * K3268500
*        $V    = HASP COMMAND VERB                                    * K3269000
*        DEVX  = DEVICE DESIRED  PRT1,PUN1,RM2.PR1,ETC                * K3269500
*                                                                     * K3270000
*********************************************************************** K3270500
         LA    WC,COMPNTER         POINT TO FIRST OPERAND POINTER       K3271000
         MVI   0(WC),0             INSURE BYTE ZERO                     K3271500
         BXLE  WC,WE,*-4           LOOP                                 K3272000
         LR    WC,R1               SAVE SUB-COMMAND OFFSET              K3272500
CBXDCTL  $CFDCTL POINTER=(WD)      FIND THE DCT                         K3273000
         USING DCTDSECT,R1                                              K3273500
         LTR   R1,R1               WAS DCT LOCATED                      K3274000
         BM    CBXRAT              IF NEGATIVE R1 POINTS TO -RAT        K3274500
         BZ    CBXINVO             IF NOT, INVALID OPERAND              K3275000
         TM    COMAUTH,CMBFLAGR    CONSOLE REMOTE OWNERSHIP RESTRICTED  K3275500
         BZR   WC                  IF NOT, ENTER SUB-PROCESSOR          K3276000
         TM    DCTDEVTP,DCTRJE     MAKE SURE REMOTE CATEGORY            K3276500
         BZ    CBXINVO             ERROR IF NOT                         K3277000
         CLI   DCTDEVTP,DCTLNE     IS THIS A LINE DCT...            R41 K3277100
         BE    CBXINVO             BR IF YES (INVALID OPERAND)      R41 K3277200
         LH    R0,COMJROUT         PICK UP JOB ROUTING OF CONSOLE    R4 K3277500
         SLR   R15,R15             GET REMOTE                        R4 K3280000
         IC    R15,COMJRMT          NUMBER LESS 1                    R4 K3280500
         BCTR  R15,0                 FOR INDEX                       R4 K3281000
         MH    R15,=Y(RATTLE)      FIND DESIRED                      R4 K3281500
         AL    R15,$RATABLE         RAT ELEMENT                      R4 K3282000
         LH    R0,RATROUTE-RATDSECT(,R15) GET RAT ROUTE CODE            K3282500
CBXCKRT  CH    R0,DCTNO            DEVICE ROUTE MATCH                R4 K3283000
         BER   WC                  IF OWNER ENTER SUB-PROCESSOR         K3283500
CBXINVO  L     R1,0(0,WD)          PICK UP OPERAND                      K3284000
         MVC   COMJNAME,$BLANKS    INSURE FIELD AFTER BLANK    @OZ40627 K3284500
         MVC   COMMAND(9),0(R1)    MOVE TEXT                         R4 K3285000
         MVC   COMMAND+9(16),=C' INVALID OPERAND'                    R4 K3285500
         LA    R0,25               SET LENGTH                           K3286000
CBXTRUNC $CWTO L=(R0),TRUNC=YES    TRUNCATE MLWTO                       K3286500
         LA    WD,COMPNTER         POINT BACK TO FIRST OP POINTER       K3287000
CBXTRUNL CLI   0(WD),0             POINTER STILL OPERAND                K3287500
         BE    CBXTRUNN            TRY NEXT                             K3288000
         ICM   R1,7,1(WD)          PICK UP DCT ADDRESS                  K3288500
         TM    DCTSTAT,DCTINUSE    TEST DRAINED                         K3289000
         BO    CBXTRUNN            SKIP FREE UNIT                       K3289500
         $FREUNIT (R1)             FREE UNIT                            K3290000
CBXTRUNN BXLE  WD,WE,CBXTRUNL      LOOP                                 K3290500
CBXTRUND DS    0H                  EXIT DEVICE COMMANDS                 K3291000
         $CRET ,                   EXIT                                 K3291500
         SPACE 2                                                    R41 K3291600
CBXRAT   DS    0H                                                   R41 K3291700
         LCR   WA,R1               RECOMPLEMENT RAT ADDRESS         R41 K3291800
         TM    COMAUTH,CMBFLAGR    TEST FOR RMT CONSOLE RESTRICTED  R41 K3291900
         BZ    CBXRATD             BR IF NO, GO PROCCESS COMMAND    R41 K3292000
         CLC   COMJROUT,RATCONRT-RATDSECT(WA)  TEST CMD ORIGIN      R41 K3292100
         BNE   CBXINVO             BR IF NOT THE SAME RMT, INVALID  R41 K3292200
CBXRATD  CLI   COMVERB,C'S'        TEST COMMAND VERB                R41 K3292300
         BE    CSXRTER             $S -- ENTER SUBPROCESSOR         R41 K3292400
         CLI   COMVERB,C'P'        TEST COMMAND VERB                R41 K3292500
         BE    CPXRMT              $P -- ENTER SUBPROCESSOR         R41 K3292600
         CLI   COMVERB,C'T'        TEST COMMAND VERB                R41 K3292700
         BNE   CBXINVO             NOT $T -- INVALID VERB           R41 K3292800
         CLC   COMDWORK+4(3),=C'CON'  IS THIS $\RN.CON COMMAND      R41 K3292900
         BNE   CTXRMT              NO, MUST BE $TRMTX COMMAND       R41 K3293000
         L     R1,=A(CTOR)         POINT TO REMOTE CONSOLE SETTING      K3293500
         L     BASE3,=A(HASPCSY3)  SET BASE                             K3294000
         BR    BASE3               ENTER PROCESSOR                      K3294500
         EJECT                                                          K3295000
*********************************************************************** K3295500
*                                                                     * K3296000
*        BACKSPACE DEVICE                                      @OZ19494 K3296500
*                                                              @OZ19494 K3296520
*        $B DEV,PAGES                                          @OZ19494 K3296530
*        $B DEV,D                                              @OZ19494 K3296540
*        $B DEV,C,PAGES   OR   $B DEV,PAGES,C                  @OZ19494 K3296550
*        $B DEV,C                                              @OZ19494 K3296560
*                                                              @OZ19494 K3296570
*        DEV   = PRINT/PUNCH PROCESSOR OUTPUT DEVICE                  * K3297000
*        PAGES = NUMBER OF PAGES TO BACK UP                           * K3297500
*        D     = BACK UP TO START OF DATASET                   @OZ19494 K3298000
*        C     = BACK UP FROM LAST CHECKPOINT                  @OZ19494 K3298100
*                                                                     * K3298500
*********************************************************************** K3299000
CB       TM    DCTDEVTP,DCTPRPU    IS DEVICE OF CORRECT CLASS           K3299500
* TEST INCLUDES LOCAL AND REMOTE PRINTER AND PUNCH DEVICES              K3300000
         BZ    CBXINVO             IF NOT, OPERAND INVALID              K3300500
         BAL   R14,CTDEVCHK        CHECK FOR ACTIVE DEVICE              K3303000
         SPACE 1                                               @OZ19494 K3303500
         SLR   R0,R0               CLEAR PAGE COUNT            @OZ19494 K3304000
         SPACE 1                                               @OZ19494 K3304500
CBFLOOP  BXH   WD,WE,CBFCHEK       SCAN FOR NEXT OPERAND       @OZ19494 K3305000
         L     WA,0(WD)            POINT TO OPERAND            @OZ19494 K3305500
        $CFSEL (D,CBFD),(C,CBFC),OPERAND=(WA),TYPE=CALL        @OZ19494 K3306000
         CLI   0(WA),C'0'          CHECK FOR NUMERIC           @OZ19494 K3306500
         BL    CBFCHEK             BR IF NO - END THIS SCAN    @OZ19494 K3307000
         OR    R0,R0               PAGE COUNT ALREADY SET      @OZ19494 K3307500
         BNZ   CBXINVO             INVALID IF YES              @OZ19494 K3308000
         LR    WA,R1               SAVE DCT ADDRESS            @OZ19494 K3308500
        $CFCVB POINTER=(WD),NOK=CBXINVO  OBTAIN PAGE COUNT     @OZ19494 K3309000
         LR    R1,WA               RESTORE DCT ADDRESS         @OZ19494 K3309500
         OR    R0,R0               TEST RESULT                 @OZ19494 K3309600
         BZ    CBXINVO             ZERO PAGES NOT ALLOWED      @OZ19494 K3309700
         B     CBFLOOP             CONTINUE SCAN               @OZ19494 K3310000
         SPACE 1                                               @OZ19494 K3310500
CBFD     OR    R0,R0               PAGE COUNT ALREADY SET      @OZ19494 K3311000
         BNZ   CBXINVO             INVALID IF YES              @OZ19494 K3311500
         L     R0,CBFDVALU         ELSE SET FOR $B/$F DATASET  @OZ19494 K3312000
         B     CBFLOOP             CONTINUE SCAN               @OZ19494 K3312500
         SPACE 1                                               @OZ19494 K3313000
CBFC     OI    DCTPPSW2,DCTBFCKP   $F/$B FROM LAST CHECKPOINT  @OZ19494 K3313500
         B     CBFLOOP             CONTIUNE SCAN               @OZ19494 K3314000
         EJECT                                                 @OZ19494 K3314500
CBFCHEK  SLR   WD,WE               RESET WD FOR NORMAL SCAN    @OZ19494 K3315000
         OR    R0,R0               PAGES OR DATASET SPECIFIED  @OZ19494 K3315500
         BNZ   CBFCHEKD            BRANCH IF YES               @OZ19494 K3316000
         TM    DCTPPSW2,DCTBFCKP   WAS CHECKPOINT SPECIFIED    @OZ19494 K3316500
         BZ    CBFDEFLT            BRANCH IF NO                @OZ19494 K3317000
         CLI   COMVERB,C'F'        $F,C ILLEGAL WITHOUT        @OZ19494 K3317500
         BE    CBXINVO              PAGES SPECIFIED            @OZ19494 K3318000
         B     CBFSET              SET PAGE COUNT TO 0         @OZ19494 K3318500
         SPACE 1                                               @OZ19494 K3318600
CBFDEFLT LA    R0,1                SUPPLY DEFAULT OF 1 PAGE    @OZ19494 K3318800
         CLR   WD,WF               LAST DEVICE IN LIST...      @OZ19494 K3319000
         BL    CBFPAGES            BRANCH IF NO                @OZ19494 K3319500
         BXH   WD,WE,CBFPAGES       ELSE BUMP WD AND BRANCH    @OZ19494 K3320000
         SPACE 1                                               @OZ19494 K3320500
CBFCHEKD CL    R0,CBFDVALU         $F/$B DATASET               @OZ19494 K3320700
         BNE   CBFPAGES            BRANCH IF NO                @OZ19494 K3320800
         TM    DCTPPSW2,DCTBFCKP   $F/$B DATASET IS            @OZ19494 K3320900
         BZ    CBFPAGES             MUTUALLY EXCLUSIVE         @OZ19494 K3321000
         NI    DCTPPSW2,255-DCTBFCKP WITH $F/$B FROM LAST      @OZ19494 K3321100
         B     CBXINVO                CHECKPOINT               @OZ19494 K3321200
         SPACE 1                                               @OZ19494 K3321300
CBFPAGES CLI   COMVERB,C'B'        CHECK FOR $B                @OZ19494 K3321400
         BNE   CBFSET              BRANCH IF $F                @OZ19494 K3321500
         LNR   R0,R0               ELSE NEGATE PAGE COUNT      @OZ19494 K3321600
         SPACE 1                                               @OZ19494 K3321700
CBFSET   L     R14,DCTPCE          GET PRINT/PUNCH PCE         @OZ19494 K3321800
         TM    DCTPPSW2,DCTCKJAM   CANCEL KEY OR JAM...        @OZ47948 K3321850
         BO    CBFSETA             IN PROGRESS, DO NOT STORE   @OZ47948 K3321900
         ST    R0,PFSBSCT-PCEDSECT(,R14)  SAVE $F/$B PAGE CNT  @OZ19494 K3322000
CBFSETA  DS    0H                                              @OZ47948 K3322050
         OI    DCTFLAGS,DCTBKSP    SET BACKSPACE FLAG          @OZ19494 K3322100
         EJECT                                                 @OZ19494 K3322500
CBXPOST  TM    DCTSTAT,DCTINUSE    TEST FOR DCT ACTIVE                  K3323000
         BZ    CBXNEXT             IF NOT SKIP POST OF DCT'S PCE        K3323500
         L     R14,DCTPCE          PICK UP PCE ADDRESS               R4 K3324000
         USING PCEDSECT,R14        TEMPORARY PCE ADDRESSABILITY      R4 K3324500
         CLI   DCTDEVTP,DCTLOG     TEST FOR LOGON DCT                R4 K3325000
         BNE   SKIP150             NO--TEST FOR LINE DCT             R4 K3325500
         OI    MSCANREQ,MSCNSLOG   SET SCAN OF ACTIVE LOGON DCTS     R4 K3326000
SKIP150  CLI   DCTDEVTP,DCTLNE     TEST FOR LINE DCT                 R4 K3326500
         BNE   *+24                NO--DO POST                       R4 K3327000
         TM    MDCTTYPE,DCTPSNA    TEST FOR SNA LINE DCT             R4 K3327500
         BO    SKIP160             YES--SET SCAN                     R4 K3328000
         OI    MSCANREQ,MSCNBACT   SET SCAN OF                       R4 K3328500
         B     *+8                  ACTIVE BSC LINE DCTS             R4 K3329000
SKIP160  OI    MSCANREQ,MSCNSIDL+MSCNSALL SCAN ACTIVE SNA LINE DCTS  R4 K3329500
         DROP R14                                                    R4 K3330000
         $POST (R14),IO            POST PROCESSOR FOR I/O            R4 K3330500
CBXNEXT  BXLE  WD,WE,CBXDCTL       LOCATE NEXT DCT IF REQUESTED         K3331000
CBXRET   MVC   COMMAND(2),=C'OK'   SET OK                               K3331500
         LA    R0,2                SET LENGTH                           K3332000
         B     CBXTRUNC            TRUNCATE                             K3332500
         SPACE 1                                               @OZ19494 K3332600
         DS    0F                  FORCE TO FULLWORD BOUNDARY  @OZ19494 K3332650
CBFDVALU DC    X'3FFFFFFF'         $B/$F DATASET PAGE COUNT    @OZ19494 K3332700
         EJECT                                                          K3333000
*********************************************************************** K3333500
*                                                                     * K3334000
*        $C DEV -- CANCEL ACTIVITY ON DEVICE                          * K3334500
*        DEV   = INPUT SERVICE PROCESSOR INPUT DEVICE                 * K3335000
*              = PRINT/PUNCH PROCESSOR OUTPUT DEVICE                  * K3335500
*                                                                     * K3336000
*********************************************************************** K3336500
CC       TM    DCTDEVTP,DCTRPP     TEST FOR DEVICE CLASS                K3337500
         BZ    CBXINVO             IF NOT, INVALID OPERAND              K3339500
         CLI   DCTDEVTP,DCTINR     CHECK FOR INTERNAL RDR               K3340000
         BE    CBXINVO             INVALID IF INTRDR                    K3340500
         BAL   R14,CTDEVCHK        CHECK FOR ACTIVE DEVICE              K3341000
* INCLUDES LOCAL AND REMOTE RDRS,ALL PUNCHES AND PRINTERS               K3341500
         OI    DCTFLAGS,DCTDELET   SET DELETE FLAG                      K3342000
         NI    DCTFLAGS,255-DCTSTOP RESET STOP INDICATOR IF ON          K3342500
         B     CBXPOST             POST DCT'S PCE FOR I/O               K3343000
         EJECT                                                          K3343500
*********************************************************************** K3344000
*                                                                     * K3344500
*        $E DEV -- RESTART CURRENT FUNCTION ON DEVICE                 * K3345000
*        DEV   = PRINT/PUNCH PROCESSOR OUTPUT DEVICE                  * K3345500
*              = LINE MANAGER TELEPROCESSING DEVICE                   * K3346000
*              = LOGON DCT                                            * K3346500
*                                                                     * K3347000
*********************************************************************** K3347500
CE       DS    0H                  RESTART DEVICE                       K3348000
         TM    DCTDEVTP,DCTPRPU    TEST FOR PRT/PUN DEVICE              K3349000
         BO    CEDEVCK             YES--CHECK FOR DEVICE ACTIVE         K3349500
         CLI   DCTDEVTP,DCTLOG     TEST FOR LOGON DCT                R4 K3350000
         BE    CEDEVCK             YES--CHECK FOR ACTIVE DCT         R4 K3350500
         CLI   DCTDEVTP,DCTLNE     TEST FOR RJE LINE                    K3353000
         BNE   CBXINVO             NO--ERROR IN DEVICE                  K3353500
CEDEVCK  BAL   R14,CTDEVCHK        CHECK FOR DEVICE ACTIVE              K3354000
         TM    DCTDEVTP,DCTPRPU    TEST DCT TYPE                     R4 K3354500
         BO    CEXGOOD             BRANCH IF NOT LINE                R4 K3355000
         TM    MDCTTYPE,DCTPSNA    CHECK LINE TYPE                   R4 K3356000
         BO    CEXPOST             GO POST LNE MGR IF VTAM LINE      R4 K3356500
         CLI   DCTBUFCT,1          IS LINE I/O ACTIVE                   K3357500
         BNE   CEXGOOD             BRANCH IF NOT                        K3358000
         ST    R1,PCER1            SAVE R1                              K3358500
         L     R15,DCTBUFAD        R15 = TP BUFFER ADDRESS           R4 K3359000
         USING BUFDSECT,R15        TEMPORARY BUF ADDRESSABILITY      R4 K3359500
*              THIS LINE DELETED BY APAR NUMBER                @OZ43648 K3359600
*              THIS LINE DELETED BY APAR NUMBER                @OZ43648 K3359700
         CLI   IOBECBCC-BUFDSECT(R15),X'48'  HAS I/O PURGED...       R4 K3360000
         BE    CEXGOOD             BR IF YES                         R4 K3360500
         CLI   BUFECBCC,X'00'      HAS I/O COMPLETED...        @OZ43648 K3360600
         BNE   CEXGOOD             BR IF YES                   @OZ43648 K3360700
         L     R1,DCTDCB           R1 = DCB ADDRESS                     K3361000
         MVI   CEPURGE,X'A1'       PREPARE PURGE                     R4 K3361500
         XC    CEPURGE+4(12),CEPURGE+4  PARM LIST                    R4 K3362000
         MVC   CEPURGE+1(3),DCBDEBA-IHADCB(R1)  DEB ADDR TO PARMS       K3362500
         LA    R1,CEPURGE          R1 = ADDRESS OF PURGE PARMS          K3363000
         PURGE (1)                 ISSUE PURGE                          K3363500
         L     R1,PCER1            RELOAD R1                            K3364000
         L     R15,DCTBUFAD        R15 = TP BUFFER ADDRESS              K3364500
         CLI   IOBECBCC,X'48'      HAS I/O BEEN PURGED               R4 K3365000
         BNE   CEXGOOD             BRANCH IF NOT                        K3365500
         L     R0,$RJECHEQ         GET TOP OF RJE BUFFER QUEUE       R4 K3366000
SKIP170  ST    R0,BUFCHAIN         CHAIN BUFFER TO RJE QUEUE         R4 K3366500
         CS    R0,R15,$RJECHEQ     ATTEMPT TO UPDATE QUEUE PNTRS     R4 K3367000
         BNE   SKIP170             RETRY IF UNSUCCESSFUL             R4 K3367500
CEXPOST  L     R14,$MLLMPCE        GET LINE MANAGER PCE ADDRESS      R4 K3368000
         $POST (R14),WORK          POST LINE MANAGER FOR WORK        R4 K3368500
         DROP  R15                 RELEASE TEMPORARY BASE REG        R4 K3369000
CEXGOOD  OI    DCTFLAGS,DCTRSTRT   TURN ON RESTART FLAG                 K3369500
         NI    DCTFLAGS,255-DCTSTOP CLEAR STOP                          K3370000
         B     CBXPOST             POST I/O                             K3370500
CEPURGE  EQU   $POSTSAV            PURGE PARM LIST                   R4 K3371000
         EJECT                                                          K3371500
*********************************************************************** K3372000
*                                                                     * K3372500
*        $F DEV,PAGES -- FORWARDSPACE DEVICE                          * K3373000
*        DEV   = PRINT/PUNCH DEVICE                                   * K3373500
*        PAGES = NUMBER OF PAGES TO SKIP                              * K3374000
*              = DS - SKIP TO END OF DATA SET                         * K3374500
*                                                                     * K3375000
*********************************************************************** K3375500
CF       EQU   CB                  COMMON ENTRY WITH BACKSPACE          K3376000
         EJECT                                                          K3376500
*********************************************************************** K3377000
*                                                                     * K3377500
*        $I DEV -- INTERRUPT ACTIVITY ON DEVICE                       * K3378000
*        DEV   = PRINT/PUNCH DEVICE                                   * K3378500
*                                                                     * K3379000
*********************************************************************** K3379500
CI       TM    DCTDEVTP,DCTPRPU    TEST FOR PRT/PUN                     K3380000
         BZ    CBXINVO             IF NOT, ERROR                        K3380500
         BAL   R14,CTDEVCHK        CHECK FOR ACTIVE DEVICE              K3383000
         OI    DCTFLAGS,DCTBKSP    SET BACKSPACE                        K3383500
         B     CEXGOOD             DO RESTART                           K3384000
         EJECT                                                          K3384500
*********************************************************************** K3385000
*                                                                     * K3385500
*        $N DEV -- REPEAT CURRENT FUNCTION ON DEVICE                  * K3386000
*        DEV   = PRINT/PUNCH PROCESSOR OUTPUT DEVICE                  * K3386500
*                                                                     * K3387000
*********************************************************************** K3387500
CN       TM    DCTDEVTP,DCTPRPU    TEST FOR VALID DEVICE GROUP          K3388000
* TEST INCLUDES PRINTER AND PUNCH DEVICES                               K3388500
         BZ    CBXINVO             IF NOT, INVALID OPERAND              K3389000
         BAL   R14,CTDEVCHK        CHECK FOR ACTIVE DEVICE              K3391500
         OI    DCTFLAGS,DCTRPT     SET REPEAT FLAG                      K3392000
         B     CBXPOST             POST I/O                             K3392500
         SPACE 2                                                        K3393000
*********************************************************************** K3393500
*                                                                     * K3394000
*        ROUTINE TO TEST FOR DEVICE ACTIVE                            * K3394500
*                                                                     * K3395000
*********************************************************************** K3395500
         SPACE 2                                                        K3396000
CTDEVCHK DS    0H                  CHECK FOR DEVICE ACTIVE              K3396500
         TM    DCTSTAT,DCTINUSE    TEST FOR ACTIVE DEVICE               K3397000
         BNZR  R14                 YES--RETURN                          K3397500
         MVC   COMREGSV(L'COMMAND),COMMAND SAVE COMMAND OVER $WTO       K3398000
         MVC   COMMAND(L'DCTDEVN),DCTDEVN SET DEVICE NAME IN MSG        K3398500
         MVC   COMMAND+L'DCTDEVN(15),=C' NOT ACTIVE ON '  SET MSG       K3399000
         MVC   COMMAND+L'DCTDEVN+15(L'$SID),$SID  SET SYSTEM ID         K3399500
         $CWTO L=L'DCTDEVN+15+L'$SID  SEND IT                           K3400000
         MVC   COMMAND,COMREGSV    RESTORE COMMAND TO AREA              K3400500
         CLI   COMVERB,C'B'        THIS BACKSPACE                    R4 K3401000
         BE    SKIP180             SKIP NEXT IF YES                  R4 K3401500
         CLI   COMVERB,C'F'        THIS FORWARD SPACE                R4 K3402000
         BNE   SKIP190             SKIP NEXT IF NOT                  R4 K3402500
SKIP180  DS    0H                                              @OZ39815 K3403000
         L     WA,0(WE,WD)         POINT TO OPERAND            @OZ19494 K3403010
         CLI   0(WA),C'C'          TEST FOR CHARACTER          @OZ19494 K3403040
         BE    SKIP185             BRANCH IF MATCH             @OZ19494 K3403050
         CLI   0(WA),C'D'          TEST CHARACTER              @OZ39815 K3403052
         BE    SKIP185             BRANCH IF MATCH             @OZ39815 K3403054
         CLI   0(WA),C'0'          TEST FOR NUMERIC            @OZ19494 K3403060
         BL    SKIP190             BR IF NOT - GET OPERAND     @OZ19494 K3403070
SKIP185  BXLE  WD,WE,SKIP180       LOOP IF MORE OPERANDS       @OZ39815 K3403080
         B     CBXTRUND            ELSE EXIT DEVICE COMMAND    @OZ39815 K3403085
SKIP190  BXLE  WD,WE,CBXDCTL       AND LOCATE NEXT OPERAND              K3403500
         B     CBXTRUND            NO--EXIT DEVICE COMMANDS             K3404000
         EJECT                                                          K3404500
*********************************************************************** K3405000
*                                                                     * K3405500
*        $P DEV -- STOP DEVICE AFTER THE CURRENT FUNCTION COMPLETES   * K3406000
*        DEV   = PRINT/PUNCH PROCESSOR OUTPUT DEVICE                  * K3406500
*              = INPUT SERVICE PROCESSOR INPUT DEVICE                 * K3407000
*              = LINE MANAGER TELEPROCESSING DEVICE                   * K3407500
*              = LOGON DCT                                            * K3408000
*                                                                     * K3408500
*********************************************************************** K3409000
CP       NULL                                                           K3409500
         CLI   DCTDEVTP,DCTINR     TEST FOR INTERNAL READER             K3410000
         BE    CBXINVO             IF SO REJECT                         K3410500
         OI    DCTSTAT,DCTDRAIN    SET DRAIN FLAG                       K3411000
         TM    DCTSTAT,DCTINUSE    TEST FOR DEVICE NOT ACTIVE           K3411500
         BNO   CPNIU               PREPARE FOR FREUNIT IF NOT IN USE R4 K3412000
         L     R14,$MLLMPCE        POINT TO LINE MANAGER PCE         R4 K3412500
         USING PCEDSECT,R14        TEMPORARY PCE ADDRESSABILITY      R4 K3413000
         CLI   DCTDEVTP,DCTLOG     TEST FOR LOGON DCT                R4 K3413500
         BNE   SKIP200             TEST FOR LINE DCT IF NOT          R4 K3414000
         OI    MSCANREQ,MSCNSLOG   SET SCAN OF ACTIVE SNA LOGON DCTS R4 K3414500
         B     CPPOST              POST LINE MANAGER                 R4 K3415000
SKIP200  CLI   DCTDEVTP,DCTLNE     TEST FOR LINE DCT                 R4 K3415500
         BNE   CBXNEXT             NEXT DCT IF NOT                   R4 K3416000
         TM    MDCTTYPE,DCTPSNA    TEST FOR SNA LINE DCT             R4 K3416500
         BNO   CBXNEXT             NEXT DCT IF NOT                   R4 K3417000
         OI    MSCANREQ,MSCNSALL+MSCNSIDL SCAN ACTIVE SNA LINE DCTS  R4 K3417500
         DROP  R14                                                   R4 K3418000
CPPOST   $POST (R14),WORK          POST LINE MANAGER                 R4 K3418500
         B     CBXNEXT             NEXT DCT                          R4 K3419000
CPNIU    ST    R1,0(0,WD)          SET DCT ADDRESS IN PLACE OF OP    R4 K3419500
         MVI   0(WD),X'80'         SET FLAG                             K3420000
         TM    DCTDEVTP,DCTPRPU    LOCAL OR REMOTE PRPU        @G38ESBB K3420100
         BZ    CBXNEXT             NO, GO GET NEXT DCT         @G38ESBB K3420200
         L     R14,DCTPCE          ADDRESS PRPU PCE FOR $POST  @G38ESBB K3420300
         B     CPPOST              GO WAKE UP PRPU             @G38ESBB K3420500
         SPACE 2                                                    R41 K3420600
CPXRMT   DS    0H                                                   R41 K3420700
         LCR   WA,R1               RECOMPLEMENT RAT ADDRESS         R41 K3420800
         NI    RATFLAGS-RATDSECT(WA),255-RATSRMT FORCE $SRMT OFF    R41 K3420900
         L     R15,RATLDCT-RATDSECT(,WA)  PICK UP LINE DCT ADDRESS  R41 K3421000
         LTR   R15,R15             TEST LINE DCT ADDRESS            R41 K3421100
         BZ    CBXNEXT             BRANCH IF NONE, NEXT OPERAND     R41 K3421200
         OI    MDCTSTAT-DCTDSECT(R15),DCTSOFF  INIDICATE QUIESCE    R41 K3421300
         B     CBXNEXT             PROCESS NEXT OPERAND             R41 K3421400
         EJECT                                                      R41 K3421500
*********************************************************************** K3421600
*                                                                     * K3422000
*        $S DEV -- START DEVICE                                       * K3422500
*        DEV   = INPUT SERVICE PROCESSOR DEVICE                       * K3423000
*              = PRINT/PUNCH PROCESSOR OUTPUT DEVICE                  * K3423500
*              = LINE MANAGER TELEPROCESSING DEVICE                   * K3424000
*              = CONSOLE DEVICE                                       * K3424500
*                                                                     * K3425000
*                                                                     * K3425500
*********************************************************************** K3426000
CS       DS    0H                  START A HASP DEVICE                  K3426500
         CLI   DCTDEVTP,DCTINR     CHECK FOR INTERNAL READER            K3427000
         BE    CBXINVO             YES--INVALID TO START                K3427500
         NI    DCTSTAT,255-DCTDRAIN  TURN 'OFF' DRAIN BIT               K3428000
         TM    DCTDEVTP,DCTRJE     TEST FOR REMOTES                     K3429000
         BZ    SKIP210             SKIP NEXT TESTS IF LOCAL DEVICE   R4 K3431000
         TM    DCTDEVTP,DCTDEV     CHECK FOR REMOTE DEVICE DCT       R4 K3431500
         BNZ   CSXRMT              BYPASS ALLOCATION IF YES          R4 K3432000
         TM    MDCTTYPE,DCTPSNA    TEST LINE OR LOGON TYPE           R4 K3432500
         BO    CSXRMT              BYPASS ALLOCATION IF VTAM         R4 K3433000
SKIP210  L     WA,DCTDCB           START TO CHECK FOR REAL DEVICE       K3433500
         L     R15,DCBDEBAD-IHADCB(,WA)  POSSIBLE                       K3434000
         ICM   R15,3,DEBSUCBA+2-DEBDSECT(R15) NOT POSSIBLE              K3434500
         BZ    CSXINVU             IF NO UCB POINTER INITIALIZED        K3435000
         LR    WA,R1               SAVE DCT POINTER OVER ALLOCATE       K3435500
         OI    DCTSTAT,DCTCIP      FORESTALL LOCAL PRINTERS    @OZ57366 K3435600
         $ALLOC (R1),CSXINUSE      ALLOCATE UCB TO HASP DCT             K3436000
         LR    R1,WA               RELOAD DCT PTR                       K3436500
         NI    DCTSTAT,255-DCTCIP  RESET $S CMD IN PROGRESS    @OZ57366 K3436600
         NI    DCTSTAT,255-DCTHOLD TURN OFF HOLD BIT                    K3437000
         TM    DCTDEVTP,DCTPRPU    TEST FOR PRT/PUN                     K3437500
         BZ    *+8                 IF NOT DON'T TURN OFF PAUSE BIT      K3438000
         NI    DCTSTAT,255-DCTPAUSE  PRT/PUN--TURN OFF PAUSE BIT        K3438500
CSXRMT   DS    0H                  COME HERE FOR REMOTE DEVICES         K3439000
*                                  THIS LINE DELETED BY APAR   @OZ50177 K3439100
*                                  THIS LINE DELETED BY APAR   @OZ50177 K3439200
*                                  THIS LINE DELETED BY APAR   @OZ50177 K3439300
         NI    DCTFLAGS,255-DCTSTOP  TURN OFF STOP BIT                  K3439500
         CLI   DCTDEVTP,DCTLOG     CHECK FOR LOGON DCT               R4 K3440000
         BE    SKIP220             YES--POST LINE MANAGER            R4 K3440500
         CLI   DCTDEVTP,DCTLNE     CHECK FOR RJE LINE                   K3441000
         BNE   CSXNLNE             NO--SKIP POSTING OF MLLM             K3441500
SKIP220  L     R14,$MLLMPCE        POINT TO RTAMS PCE                R4 K3442000
         USING PCEDSECT,R14        TEMPORARY PCE ADDRESSABILITY      R4 K3442500
         OI    MSCANREQ,MSCNUNIT   SCAN INACTIVE LINE AND LOGON DCTS R4 K3443000
         DROP  R14                 RELEASE TEMPORARY PCE BASE        R4 K3443500
         $POST (R14),WORK          POST LINE MANAGER FOR WORK        R4 K3444000
         B     CSXPOST             THEN BR TO $POST JOB AND JOT      R4 K3444500
         EJECT                                                       R4 K3445000
CSXNLNE  TM    DCTDEVTP,DCTPRPU+DCTRJE  TEST FOR REMOTE DEVICE      R41 K3445100
         BO    CSXPOST             BRANCH IF YES, SKIP POST         R41 K3445200
         TM    DCTSTAT,DCTINUSE    TEST DEVICE STATUS               R41 K3445300
         BO    CSXPOST             BRANCH IF IN USE, SKIP POST      R41 K3445400
         L     WA,DCTPCE           GET PCE ADDRESS FROM DCT         R41 K3445500
        $POST  (WA),WORK            AND INDICATE DEVICE AVAILABLE    R4 K3446000
CSXPOST $POST  $HASPECF,(JOB,JOT)  $POST ALL FOR JOB AND JOT         R4 K3446500
         B     CBXPOST             AND EXIT                             K3447000
CSXINVU  DS    0H                  COM HERE WHEN INVALID UNIT           K3447500
         MVC   COMMAND+L'DCTDEVN(13),=C' INVALID UNIT'  SET MSG         K3448000
         LA    R0,L'DCTDEVN+13     SET MSG LENGTH                       K3448500
         B     CSXDEVNM            ADD NAME TO MSG AND ISSUE            K3449000
CSXINUSE DS    0H                  COME HERE IF DEVICE CAN'T BE AL      K3449500
         LR    R1,WA               RESTORE DCT POINTER                  K3450000
         NI    DCTSTAT,255-DCTCIP  RESET $S CMD IN PROGRESS    @OZ57366 K3450400
         MVC   COMMAND+L'DCTDEVN(14),=C' NOT AVAILABLE'  SET MSG        K3450500
         LA    R0,L'DCTDEVN+14     COMPUTE MESSAGE LENGTH               K3451000
CSXDEVNM MVC   COMMAND(L'DCTDEVN),DCTDEVN  ADD DEVICE NAME              K3451500
         OI    DCTSTAT,DCTDRAIN    IF NOT ALLOCATED TURN ON DRAIN       K3452000
         $CRET L=(R0)              AND ISSUE DIAGNOSTIC                 K3452500
CSXRTER  LCR   R1,R1               COMPLEMENT ADDRESS OF RAT        R41 K3452600
         USING RATDSECT,R1         ESTABLISH ADDRESSABILITY         R41 K3452700
         TM    RATTYPE,DCTPSNA     TEST FOR REMOTE TYPE             R41 K3452800
         BZ    CBXINVO             BR IF NOT SNA, INVALID OPERAND   R41 K3452900
         OI    RATFLAGS,RATSRMT    SET START FLAG IN RAT            R41 K3453000
         STCK  COMDWORK            STORE CLOCK VALUE                R41 K3453100
         MVC   RATIMER,COMDWORK     AND PLACE IN RAT                R41 K3453200
         L     R15,$MLLMPCE        LOAD PROCESSOR ADDRESS           R41 K3453300
         OI    MSCANREQ-PCEDSECT(R15),MSCNRAT SET SCAN FLAG         R41 K3453400
         $POST (R15),WORK          POST LINE MANAGER                R41 K3453500
         B     CBXNEXT             TEST NEXT REMOTE                 R41 K3453600
         EJECT                                                          K3453700
CZXNEXT  EQU   CBXNEXT             COMMON ROUTINE ENTRY                 K3453800
CTXINVO  EQU   CBXINVO             COMMON ROUTINE ENTRY                 K3454000
CZXRET   EQU   CBXRET              COMMON ROUTINE ENTRY                 K3454500
*********************************************************************** K3455000
*                                                                     * K3455500
*        $T DEV -- SET DEVICE                                         * K3456000
*        DEV   = PRINT/PUNCH PROCESSOR OUTPUT DEVICE                  * K3456500
*              = INPUT SERVICE PROCESSOR DEVICE                       * K3457000
*              = LINE                                                 * K3457500
*                                                                     * K3458000
* NOTES                                                               * K3458500
*        READER SETTING FORMAT FOLLOWS                                * K3459000
*        H= Y/N - SET TO HOLD JOBS READ OR NOT                        * K3459500
*        P= DEST - SET DEFAULT PRINT DESTINATION FOR JOBS READ        * K3460000
*        U= DEST - SET DEFAULT PUNCH DESTINATION FOR JOBS READ        * K3460500
*        A= NUMBER - SET CONSOLE AUTHORITY LEVEL                      * K3461000
*        C= CLASS - SET DEFAULT JOB CLASS FOR JOBS READ               * K3461500
*        Q= CLASS - SET DEFAULT MSG CLASS FOR JOBS READ               * K3462000
*        S= +/- SID,SID,... - SET/ADD/SUBTRACT DEFAULT AFFINITIES     * K3462500
*           ANY/IND - SET AFFINITY TO ALL OR INDEPENDANT MODE         * K3463000
*                                                                     * K3465000
*        PRINTER SETTING FORMAT FOLLOWS                               * K3465500
*        B= Y/N FOR BURST/NOBURST ON 3800                             * K3466000
*        M= Y/N - EDGE-MARKING BETWEEN UNITS OF 3800 PRINTING OR NOT  * K3466500
*        C= CARRAGE TAPE NAME OR FCB IMAGE FROM SYS1.IMAGELIB         * K3467000
*        F= FORM OR 'AUTOM'                                           * K3467500
*        T= TRAIN NAME 'QN,TN,RN,PN,HN,ETC'                           * K3468000
*           OR UCS IMAGE FROM SYS1.IMAGELIB                           * K3468500
*           SYSTEM DEFAULT FOR 3800 CHAR SET FROM SYS1.IMAGELIB       * K3469000
*        K= 1/2/3/R - FORCE SPACING FOR DATA SET                      * K3469500
*        LIM= M-N - LOW AND HIGH LINE LIMITS FOR THIS PRINTER  @OZ40627 K3469600
*        O= FLASH FRAME ID FOR 3800 PRINTERS                          * K3470000
*        S= Y/N - PRINT SEPARATORS BETWEEN UNITS OF WORK OR NOT       * K3470500
*               - PRINT REMOTE MESSAGES BETWEEN UNITS OF WORK OR NOT  * K3471000
*        P= Y/N - LOCAL PRINTER PAUSE BETWEEN UNITS OF WORK OR NOT    * K3471500
*        Y= COPY-MODIFICATION RECORD ID FOR 3800 FROM SYS1.IMAGELIB   * K3472000
*        Q= LIST OF SYSOUT CLASSES AVAILABLE TO THE PRINTER           * K3472500
*        R= NUMBER TO SET ROUTE CODE THIS PRINTER WILL PROCESS        * K3473000
*        X1/X2/X3/X4= 3800 CHAR SET ID'S FROM SYS1.IMAGELIB           * K3473500
*        Z= NUMBER-SET COMPACTION TABLE NUMBER                        * K3473600
*                                                                     * K3474000
*                                                                     * K3474500
*        PUNCH SETTING FORMAT FOLLOWS                                 * K3475000
*        LIM= M-N - LOW AND HIGH CARD LIMITS FOR THIS PUNCH    @OZ40627 K3475100
*        S= Y/N - PUNCH SEPARATORS BETWEEN UNITS OF WORK OR NOT       * K3475500
*        P= Y/N - LOCAL PUNCH PAUSE BETWEEN UNITS OF WORK OR NOT      * K3476000
*        Q= LIST OF SYSOUT CLASSES AVAILABLE TO THE PUNCH             * K3476500
*        R= NUMBER TO SET ROUTE CODE THIS PUNCH WILL PROCESS          * K3477000
*        Z= NUMBER-SET COMPACTION TABLE NUMBER                        * K3477100
*                                                                     * K3477500
*        RJE LINE SETTING FORMAT FOLLOWS                              * K3478000
*        E= Y/N - LOG CHANNEL ENDS OR NOT (TESTING MODE ONLY)         * K3478500
*        D= QUIESCE/IMMEDIATE TO CAUSE LINE DISCONNECT                * K3479000
*        P= PASSWORD OR NULL TO SET OR NULLIFY A PASSWORD             * K3479500
*                                                                     * K3480000
*        REMOTE DEVICE SETTING FORMAT FOLLOWS                         * K3480100
*        A=Y/N SET OR RESET AUTOLOGON FOR SNA DEVICES                 * K3480200
*        D=NNN INCREASE OR D INITIALIZATION                           * K3480300
*********************************************************************** K3480500
         SPACE 1                                                     R4 K3481000
         DROP  R1                                                       K3481500
         USING DCTDSECT,WA                                              K3482000
CT       LR    WA,R1               SAVE DCT POINTER                     K3482500
         MVI   COMNULOP,0          CLEAR FLAG FOR RDI LOOP              K3483000
         LA    WC,CTXINVO          SET ERROR EXIT ADDRESS               K3483500
         BXH   WD,WE,CTXINVO       IF NO CORRESPONDING PARAMETER EXIT   K3484000
CTXLOOP  DS    0H                                                       K3484500
         L     R1,0(0,WD)          PICK UP OPERAND ADDRESS              K3485000
         CLI   DCTDEVTP,DCTLNE     IS THIS A LINE SETTING               K3485500
         BE    CTXLINE             YES--GO CHANGE LINE                  K3486000
         CLI   DCTDEVTP,DCTLOG     IS THIS A LOGON SETTING           R4 K3487000
         BE    CTXLOG              YES--GO CHANGE LOGON              R4 K3487500
         TM    DCTDEVTP,DCTRPP     TEST FOR READER/PRINTER/PUNCH        K3489000
         BZR   WC                  IF NOT, INVALID OPERAND              K3491000
         CLI   1(R1),C'='          TEST FOR PROPER FORMAT               K3491500
         BNE   CTXLOOP0            IF NOT, POSSIBLY A 3800 OPERAND   R4 K3492000
         TM    DCTDEVTP,DCTPRPU    TEST FOR PRINTER/PUNCH               K3492500
         BZ    CTXRDR              IF NOT, MUST BE READER               K3493000
         B     CTXLOOP1            IF YES, SKIP 3800 PROCESSNG       R4 K3495500
CTXLOOP0 TM    DCTDEVTP,DCTPRPU    TEXT FOR PRINTER/PUNCH      @OZ40627 K3496000
         BZR   WC                  IF NOT, ERROR               @OZ40627 K3496100
         CLC   =C'LIM=',0(R1)      CHANGING DEVICE LIMITS ...  @OZ40627 K3496200
         BE    CTXLIM              BRANCH IF YES               @OZ40627 K3496300
         TM    DCTPPSW2,DCTNIPRT   TEST FOR 3800 PRINTER       @OZ40627 K3496400
         BNOR  WC                  IF NOT, ERROR                     R4 K3496500
         CLI   0(R1),C'X'          CHECK FOR 'XN=' FORMAT            R4 K3497000
         BNER  WC                  IF NOT, ERROR                     R4 K3497500
         CLI   2(R1),C'='          STILL CHECKING  'XN='             R4 K3498000
         BNER  WC                  IF NOT, ERROR                     R4 K3498500
CTXLOOP1 L     WB,4(0,WD)          POINT TO NEXT OPERAND             R4 K3499000
         SR    WB,R1               GET SIZE OF OPERAND + 1              K3499500
         SH    WB,=H'4'            GET TEXT MACHINE COUNT               K3500000
         BMR   WC                  EXIT IN ERROR IF NULL                K3500500
        $CFSEL (B,CTXB),(C,CTXC),(F,CTXF),(K,CTXK),(M,CTXM),         R4CK3501000
               (O,CTXO),(P,CTXP),(Q,CTXQ),(R,CTXR),(S,CTXS),         R4CK3501500
               (T,CTXT),(X,CTXX),(Y,CTXY),(Z,CTXZ),OPERAND=(R1),    R41CK3502000
               TYPE=CALL                                            R41 K3502100
         BR    WC                  IF NOT FOUND, INVALID             R4 K3502500
         EJECT                                                       R4 K3503000
*********************************************************************** K3503500
*        SET BURST OPTION FOR 3800 PRINTER                            * K3504000
*********************************************************************** K3504500
CTXB     TM    DCTPPSW2,DCTNIPRT   TEST FOR 3800 PRINTER             R4 K3505000
         BZR   WC                  ERROR IF NOT                      R4 K3505500
         CLI   2(R1),C'Y'          TEST FOR 'BURST=YES'              R4 K3506000
         BNE   CTXBN               IF NOT TRY 'BURST=NO'             R4 K3506500
         OI    DCTPPSW2,DCTNIBRS   SET BURSTER ON                    R4 K3507000
         B     CTXLOOPA            GO $POST AND GET NEXT KEYWORD     R4 K3507500
CTXBN    CLI   2(R1),C'N'          TEST FOR 'BURST=NO'               R4 K3508000
         BNER  WC                  IF NOT, ERROR                     R4 K3508500
         NI    DCTPPSW2,255-DCTNIBRS SET BURST FLAG OFF              R4 K3509000
         B     CTXLOOPA            GO $POST AND GET NEXT KEYWORD     R4 K3509500
*********************************************************************** K3510000
*        SET EDGE-MARK OPTION FOR 3800 PRINTER                        * K3510500
*********************************************************************** K3511000
CTXM     TM    DCTPPSW2,DCTNIPRT   TEST FOR 3800 PRINTER             R4 K3511500
         BZR   WC                  ERROR IF NOT                      R4 K3512000
         CLI   2(R1),C'Y'          TEST FOR 'MARK=YES'               R4 K3512500
         BNE   CTXMN               IF NOT TRY 'MARK=NO'              R4 K3513000
         OI    DCTPPSW2,DCTNIMRK   INDICATE EDGE-MARKING             R4 K3513500
         B     CTXLOOPC            GET NEXT KEYWORD                  R4 K3514000
CTXMN    CLI   2(R1),C'N'          TEST FOR 'MARK=NO'                R4 K3514500
         BNER  WC                  ERROR IF NOT                      R4 K3515000
         NI    DCTPPSW2,255-DCTNIMRK SET EDGE-MARK FLAG OFF          R4 K3515500
         B     CTXLOOPC            GET NEXT KEYWORD                  R4 K3516000
*********************************************************************** K3516500
*        SET FLASH FRAME ID FOR 3800 PRINTER                          * K3517000
*********************************************************************** K3517500
CTXO     TM    DCTPPSW2,DCTNIPRT   TEST FOR 3800 PRINTER             R4 K3518000
         BZR   WC                  ERROR IF NOT                      R4 K3518500
         LA    R15,DCTFLASH        POINT TO FLASH FRAME FIELD        R4 K3519000
         CLC   2(5,R1),=C'RESET'   TEST FOR FLASH RESET              R4 K3519500
         BNE   SKIP230             BR IF NOT                         R4 K3520000
         MVC   0(4,R15),=C'****'   RESET FLASH FRAME ID              R4 K3520500
         B     CTXLOOPA            GO $POST AND GET NEXT KEYWORD     R4 K3521000
SKIP230  SLR   R0,R0               CHANGE INDICATOR                  R4 K3521500
         B     CTXIDVAL            GO CHECK FOR VALID NAME           R4 K3522000
*********************************************************************** K3522500
*        SET MODIFY IMAGE FOR 3800 PRINTER                            * K3523000
*********************************************************************** K3523500
CTXY     TM    DCTPPSW2,DCTNIPRT   TEST FOR 3800 PRINTER             R4 K3524000
         BZR   WC                  ERROR IF NOT                      R4 K3524500
         LA    R15,DCTMODF         POINT TO MODIFY-IMAGE FIELD       R4 K3525000
         CLC   2(5,R1),=C'RESET'   TEST FOR MODIFY RESET             R4 K3525500
         BNE   SKIP240             BR IF NOT                         R4 K3526000
         MVC   0(4,R15),=C'****'   RESET MODIFY ID                   R4 K3526500
         B     CTXLOOPC            GET NEXT KEYWORD                  R4 K3527000
SKIP240  SLR   R0,R0               SET CHANGE INDICATOR              R4 K3527500
         B     CTXIDVAL            GO CHECK FOR VALID NAME           R4 K3528000
         EJECT                                                       R4 K3528500
*********************************************************************** K3529000
*        SET TRANSLATE TABLE  1,2,3, OR 4 FOR 3800 PRINTER            * K3529500
*********************************************************************** K3530000
CTXX     TM    DCTPPSW2,DCTNIPRT   TEST FOR 3800 PRINTER             R4 K3530500
         BZR   WC                  ERROR IF NOT                      R4 K3531000
         LA    R1,1(,R1)           INCR TO NEXT BYTE (CHAR NUMBER)   R4 K3531500
         SLR   R0,R0               SET CHANGE INDICATOR              R4 K3532000
         SH    WB,=H'1'            ACCT FOR EXTRA KEYW LGTH          R4 K3532500
         BMR   WC                  NULL OPERAND SPECIFIED            R4 K3533000
         LA    R15,DCTCHAR1        POINT TO CHAR SET FIELD           R4 K3533500
         CLI   0(R1),C'1'          TEST FOR 'X1='                    R4 K3534000
         BE    CTXIDVAL            BR IF YES                         R4 K3534500
         LA    R15,DCTCHAR2        POINT TO CHAR SET FIELD           R4 K3535000
         CLI   0(R1),C'2'          TEST FOR 'X2='                    R4 K3535500
         BE    CTXIDVAL            BR IF YES                         R4 K3536000
         LA    R15,DCTCHAR3        POINT TO CHAR SET FIELD           R4 K3536500
         CLI   0(R1),C'3'          TEST FOR 'X3='                    R4 K3537000
         BE    CTXIDVAL            BR IF YES                         R4 K3537500
         LA    R15,DCTCHAR4        POINT TO CHAR SET FIELD           R4 K3538000
         CLI   0(R1),C'4'          TEST FOR 'X4='                    R4 K3538500
         BE    CTXIDVAL            BR IF YES                         R4 K3539000
         BR    WC                  ERROR, INVALID KEYWORD            R4 K3539500
*********************************************************************** K3540000
*        SET SEPARATOR OPTION FOR PRINT/PUNCH DEVICE                  * K3540500
*********************************************************************** K3541000
CTXS     CLI   2(R1),C'Y'          TEST FOR 'SEPARATE=YES'           R4 K3541500
         BNE   CTXSN               IF NOT TRY 'SEPARATE=NO'          R4 K3542000
         NI    DCTPPSW,255-DCTPPSWS ALLOW SEPARATORS                    K3542500
         B     CTXLOOPA            GO POST AND DO NEXT OPERAND       R4 K3543000
CTXSN    CLI   2(R1),C'N'          IS THIS SEPARATE = 'NO'              K3543500
         BNER  WC                  ERROR IF NEITHER                     K3544000
         OI    DCTPPSW,DCTPPSWS    PREVENT SEPARATORS                   K3544500
         B     CTXLOOPA            GO TO NEXT OPERAND                R4 K3545000
*********************************************************************** K3545500
*        SET A LOCAL PRINT/PUNCH DEVICE TO PAUSE AFTER EACH JOB       * K3546000
*********************************************************************** K3546500
CTXP     DS    0H                  SET/RESET PAUSE ON DEVICE            K3547000
         TM    DCTDEVTP,DCTRJE     TEST FOR REMOTE PRT/PUN              K3547500
         BOR   WC                  IF REMOTE,ERROR TO SET PAUSE         K3548000
         CLI   2(R1),C'Y'          CHECK FOR SET OF PAUSE               K3548500
         BE    CTXPAUSE            YES--TURN ON PAUSE BIT               K3549000
         CLI   2(R1),C'N'          NO--CHECK FOR RESET                  K3549500
         BNER  WC                  NO--ERROR IN COMMAND                 K3550000
         NI    DCTPPFL,255-DCTPAUSE  RESET PAUSE BIT                    K3550500
         B     CTXLOOPC            AND LOOK FOR MORE OPERANDS           K3551000
CTXPAUSE OI    DCTPPFL,DCTPAUSE    SET PRINT/PUNCH TO PAUSE             K3551500
         B     CTXLOOPC            AND LOOK FOR MORE OPERANDS           K3552000
*********************************************************************** K3552100
*        SET PRINTER/PUNCH RECORD LIMITS                              * K3552200
*********************************************************************** K3552300
CTXLIM   LA    R1,3(,R1)           POINT AT '='                @OZ40627 K3552350
         BAL   LINK,COFLIM         BR TO OBTAIN NEW LIMITS     @OZ40627 K3552400
         CL    R15,=F'999999'      IS LOWER LIMIT VALID ...    @OZ40627 K3552420
         BHR   R4                  BRANCH IF NO                @OZ40627 K3552440
         CL    R0,=F'-1'           IS UPPER LIMIT VALID ...    @OZ40627 K3552460
         BE    CTXLIMOK            BRANCH IF VALID             @OZ40627 K3552480
         CL    R0,=F'999999'       IS UPPER LIMIT VALID ...    @OZ40627 K3552500
         BHR   R4                  BRANCH IF NO                @OZ40627 K3552520
CTXLIMOK ST    R0,DCTLIMHI         STORE UPPER LIMIT           @OZ40627 K3552540
         ST    R15,DCTLIMLO        STORE LOWER LIMIT           @OZ40627 K3552600
         B     CTXLOOPA            BR TO $POST                 @OZ40627 K3552700
         EJECT                                                 @OZ40627 K3552800
*********************************************************************** K3553000
*        SET/RESET EXPLICIT SPACING FOR A PRINTER                     * K3553500
*********************************************************************** K3554000
CTXK     NULL                      COME HERE TO SET CARRIAGE SPC        K3554500
         TM    DCTDEVTP,DCTPUN     TEST FOR PUNCH                       K3555000
         BOR   WC                  YES--INVALID TO SET SPACING          K3555500
         CLI   2(R1),C'R'          IS THIS A RESET OPERATION            K3556000
         BE    CTXKRSET            YES--GO HANDLE                       K3556500
         CLI   2(R1),C'3'          NO--CHECK BOUNDS                     K3557000
         BHR   WC                  TRIPLE SPCING IS GREATEST            K3557500
         CLI   2(R1),C'1'          SINGLE-SPCING IS SMALLEST            K3558000
         BLR   WC                  ERROR IF LESS THAN                   K3558500
         NI    2(R1),X'03'         TURN 'OFF' ALL ZONE BITS             K3559000
         IC    R15,2(,R1)          GET READY TO SET SPCING              K3559500
         NI    DCTFLAGS,255-DCTSPACE FIRST REST PREV SPEC               K3560000
         EX    R15,CTXKSET         SET SPCING EXPLICITLY                K3560500
         B     CTXLOOPC            LOOK FOR MORE OPERANDS               K3561000
CTXKRSET NI    DCTFLAGS,255-DCTSPACE RESET SPACING FLAGS                K3561500
         B     CTXLOOPC            LOOK FOR MORE OPERANDS               K3562000
CTXKSET  OI    DCTFLAGS,*-*          **** EXECUTE ONLY ****             K3562500
*********************************************************************** K3563000
*        SET TRAIN (UCS) FOR A PRINTER                                * K3563500
*********************************************************************** K3564000
CTXT     LA    R15,DCTUCS          POINT TO UCS TRAIN SETTING           K3564500
         LA    R0,DCTPPSWT         SET CHANGE INDICATOR                 K3565000
         B     CTXCCTST            TEST FOR INVALID PUNCH               K3565500
*********************************************************************** K3566000
*        SET CARRIAGE (FCB) FOR A PRINTER                             * K3566500
*********************************************************************** K3567000
CTXC     LA    R15,DCTFCB          POINT TO FCB CARRIAGE SETTING        K3567500
         LA    R0,DCTPPSWC         SET CHANGE INDICATOR                 K3568000
         CLC   2(5,R1),=C'RESET'   TEST FOR FCB IMAGE RESET          R4 K3568500
         BNE   CTXCCTST            BR IF NOT                         R4 K3569000
         TM    DCTPPSW2,DCTNIPRT   TEST FOR 3800 PRINTER             R4 K3569500
         BZR   WC                  ERROR IF NOT                      R4 K3570000
         MVC   0(4,R15),=C'****'   RESET FCB IMAGE ID                R4 K3570500
         L     R15,DCTPCE          GET ASSOCIATED PCE                R4 K3571000
         MVC   PRDFCB-PCEDSECT(4,R15),=C'****'  RESET DEFAULT FCB ID R4 K3571500
         B     CTXLOOPA            GO $POST AND GET NEXT KEYWORD     R4 K3572000
CTXCCTST TM    DCTDEVTP,DCTPUN     TEST FOR PUNCH DEVICE                K3572500
         BOR   WC                  BRANCH IN ERROR IF YES               K3573000
CTXCCT   DS    0H                                                       K3573500
         TM    DCTPPSW,DCTPPSWO    TEST FOR OPERATOR ACTION ALLOW       K3574000
         BO    *+8                 BRANCH IF OPERATOR ACTION OK         K3574500
         BAL   LINK,CTXDEV         CHECK FOR IDLE DEVICE                K3575000
CTXIDVAL DS    0H                                                    R4 K3575500
         CH    WB,=H'4'            MOVE NO MORE THAN FOUR               K3576000
         BNLR  WC                  BRANCH IN ERROR IF TOO LONG          K3576500
         L     R14,=A(CVALTABL)    POINT TO TEST TABLE               R4 K3577000
         EX    WB,CTXQVAL          TEST FOR VALID FIELD              R4 K3577500
         BNZR  WC                  IF INVALID EXIT IN ERROR             K3578000
         MVC   0(4,R15),$BLANKS    BLANK OUT DCT FIELD         @OZ40627 K3578500
CTXEXMVC EX    WB,CTXMVC           MOVE IN PARAMETER                    K3579000
         LR    WB,R0               GET ACTIVITY FLAG                    K3579500
         EX    WB,CTXOI            TURN ON CHANGE FLAG               R4 K3580000
         LA    WB,DCTPPSWT         SET UCS INDICATOR           @OZ27012 K3580500
         CLR   R0,WB               UCS REQUEST                 @OZ27012 K3580550
         BNE   CTXFCBLD            BR IF NO, TEST FCB          @OZ27012 K3580575
         NI    DCTPPSW,255-DCTPPSWU RESET NON-STD SWITCH       @OZ27012 K3580650
         L     R15,DCTPCE          LOAD PRINT PCE ADDR         @OZ27012 K3580725
         TM    PDEVTYPE+1-PCEDSECT(R15),X'80' TEST UCS         @OZ27012 K3580800
         BZ    CTXFCBLD            BR IF NOT SUPPORTED         @OZ27012 K3580875
         TM    DCTPPSW2,DCTNIPRT   3800 PRINTER                @OZ27012 K3580950
         BO    CTXFCBLD            BRANCH IF YES               @OZ27012 K3581000
         $GETBUF NOBUF             GET BUFFER FOR IMAGELIB     @OZ27012 K3581100
         LR    WB,R1               LOAD BUFFER INTO R3         @OZ27012 K3581175
         USING BUFDSECT,WB         SET BUFFER ADDRESSABILITY   @OZ27012 K3581250
         ST    R0,COMEWORK         SAVE R0                     @OZ27012 K3581325
         MVC   BUFSTART(4),=X'0001003A' BLDL PARAMETER LIST    @OZ27012 K3581400
         MVC   BUFSTART+4(4),=C'UCS1' IMAGE PREFIX-1403 USC    @OZ27012 K3581500
         MVC   BUFSTART+8(4),DCTUCS USER UCS IMAGE ID          @OZ27012 K3581550
         L     R15,DCTPCE          LOAD PCE ADDRESS            @OZ27012 K3581625
         STCM  WA,7,BUFDCT+1       ENSURE CORRECT DCT ADDR     @OZ27012 K3581675
         CLI   PDEVBYT3-PCEDSECT(R15),UCB1403   IS IT A 1403   @OZ40627 K3581700
         BE    CTXUCS01            BRANCH IF YES               @OZ27012 K3581775
         MVI   BUFBYT7,C'3'        SET PREFIX FOR 3203         @OZ40627 K3581850
         CLI   PDEVBYT3-PCEDSECT(R15),UCB3203   IS IT A 3203   @OZ40627 K3581860
         BE    CTXUCS01            BRANCH IF IT IS A 3203      @OZ40627 K3581870
         MVI   BUFBYT7,C'2'        SET PREFIX FOR 3211         @OZ40627 K3581880
* JES2 ONLY INITS THREE IMPACT PRINTERS SO GO ON AS 3211       @OZ40627 K3581890
CTXUCS01 DS    0H                                              @OZ27012 K3581925
         TM    $IMAGECB,X'40'      IS IMAGE LOADER TASK BUSY   @OZ27012 K3582000
         BNO   CTXUCS02            BRANCH IF NO                @OZ27012 K3582075
         $WAIT IMAG             WAIT FOR IMAGE TASK TO $$POST  @OZ27012 K3582150
         B     CTXUCS01            TRY AGAIN                   @OZ27012 K3582225
CTXUCS02 DS    0H                                              @OZ27012 K3582300
         MVI   BUFECBCC,X'80'      SET BUFFER ECB AS WAITING   @OZ27012 K3582375
         POST  $IMAGECB,(R3)       POST WITH BUFFER ADDRESS    @OZ27012 K3582450
CTXUCS03 DS    0H                                              @OZ27012 K3582500
         $WAIT IMAG             WAIT FOR IMAGE TASK TO $$POST  @OZ27012 K3582600
         TM    BUFECBCC,X'7F'      TEST STATUS OF LOAD REQ     @OZ27012 K3582675
         BZ    CTXUCS03            BRANCH IF NOT COMPLETE      @OZ27012 K3582750
         BM    CTXUCSMS            BR TO NOT FOUND MSG         @OZ27012 K3582825
         TM    BUFSTART,X'80'      IS IT A STD UCS IMAGE. .    @OZ27012 K3582900
         BO    CTXUCSEX            BRANCH IF YES               @OZ27012 K3583000
         OI    DCTPPSW,DCTPPSWU    TURN ON NON-STD SWITCH      @OZ27012 K3583050
         DROP  WB                  DROP BUFFER ADDRESSIBILITY  @OZ27012 K3583125
CTXUCSEX $FREEBUF  (WB)            FREE BUFFER                 @OZ27012 K3583200
         L     R0,COMEWORK         RESTORE R0                  @OZ27012 K3583275
         B     CTXFCBLD            TRY FCB CHANGE              @OZ27012 K3583300
CTXUCSNO CLC   $PRTUCS,DCTUCS      REQUESTING STD UCS. . .     @OZ27012 K3583350
         BE    CTXFCBLD            BRANCH IF YES               @OZ27012 K3583425
         OI    DCTPPSW,DCTPPSWU    TURN ON NON-STD SWITCH      @OZ27012 K3583500
CTXFCBLD LA    WB,DCTPPSWC         SET FCB CHANGE INDICATOR    @OZ27012 K3583575
         CLR   R0,WB               FCB REQUEST. . .            @OZ27012 K3583650
         BNE   CTXLOOPA            BRANCH IF NOT               @OZ27012 K3583725
         L     R15,DCTPCE          LOAD PRINT PCE ADDR         @OZ27012 K3583800
         TM    DCTPPSW2,DCTNIPRT   3800 PRINTER. .             @OZ27012 K3583875
         BZ    CTXCHUCB            BRANCH IF NOT               @OZ27012 K3583950
         MVC   PRDFCB-PCEDSECT(,R15),DCTFCB UPDATE 3800 FCB    @OZ27012 K3584000
         B     CTXLOOPA            POST JOB                    @OZ27012 K3584100
CTXCHUCB NI    DCTPPSW,255-DCTPPSWB TURN OFF NON=STAND SWITCH  @OZ27012 K3584175
         CLI   PDEVTYPE+3-PCEDSECT(R15),X'08' IS IT A 1403..   @OZ27012 K3584250
         BNE   CTXTTE              BRANCH IF NOT 1403          @OZ27012 K3584325
         CLC   $PRTFCB,DCTFCB      IS IT STD FCB. . .          @OZ27012 K3584400
         BE    CTXLOOPA            BRANCH IF YES               @OZ27012 K3584500
         OI    DCTPPSW,DCTPPSWB    TURN ON NON-STD SWITCH      @OZ27012 K3584550
         B     CTXLOOPA            POST JOB                    @OZ27012 K3584625
CTXTTE   $GETBUF NOBUF             GET BUFFER FOR FCB READ     @OZ27012 K3584700
         LR    WB,R1               LOAD R3 WITH BUFF ADDRESS   @OZ27012 K3584775
         ST    R0,COMEWORK         SAVE R0                     @OZ27012 K3584850
         USING BUFDSECT,WB         SET BUFFER ADDRESSABILITY   @OZ27012 K3584925
         MVC   BUFSTART(4),=X'0001003A' BLDL PARAMETER LIST    @OZ27012 K3585000
         MVC   BUFSTART+4(L'FCB2MSG),FCB2MSG IMAGE PREFIX-3211 FCB      K3585075
         MVC   BUFSTART+8(4),DCTFCB   USER FCB IMAGE ID        @OZ27012 K3585150
         L     R15,DCTPCE          LOAD PRINT PCE ADDR         @OZ27012 K3585175
         STCM  WA,7,BUFDCT+1       ENSURE CORRECT DCT ADDR     @OZ27012 K3585200
CTXFCB01 DS    0H                                              @OZ27012 K3585225
         TM    $IMAGECB,X'40'      IS IMAGE LOADER TASK BUSY   @OZ27012 K3585300
         BNO   CTXFCB02            BRANCH IF NO                @OZ27012 K3585375
         $WAIT IMAG             WAIT FOR IMAGE TASK TO $$POST  @OZ27012 K3585450
         B     CTXFCB01            TRY AGIN                    @OZ27012 K3585500
CTXFCB02 DS    0H                                              @OZ27012 K3585600
         MVI   BUFECBCC,X'80'      SET BUFFER ECB AS WAITING   @OZ27012 K3585675
         POST  $IMAGECB,(R3)       POST WITH BUFFER ADDRESS    @OZ27012 K3585750
CTXFCB03 DS    0H                                              @OZ27012 K3585825
         $WAIT IMAG             WAIT FOR IMAGE TASK TO $$POST  @OZ27012 K3585900
         TM    BUFECBCC,X'7F'      TEST STATUS OF LOAD REQ     @OZ27012 K3586000
         BZ    CTXFCB03            BRANCH IF NOT COMPLETE      @OZ27012 K3586050
         BM    CTXFCBMS            BRANCH IF IMAGE NOT FOUND   @OZ27012 K3586125
         TM    BUFSTART,X'80'      TEST FOR STD IMAGE. . .     @OZ27012 K3586200
         BO    CTXFCBEX            BRANCH IF YES               @OZ27012 K3586275
         OI    DCTPPSW,DCTPPSWB    TURN ON NON-STD SWITCH      @OZ27012 K3586350
         DROP  WB                  DROP BUFFER ADDRESSABILITY  @OZ27012 K3586425
CTXFCBEX $FREEBUF (WB)             FREE BUFFER                 @OZ27012 K3586500
         L     R0,COMEWORK         RESTORE R0                  @OZ27012 K3586575
         B     CTXLOOPA            POST JOB                    @OZ27012 K3587000
CTXQVAL  TRT   2(*-*,R1),0(R14)    *** EXECUTE ONLY ***              R4 K3587500
CTXMVC   MVC   0(*-*,R15),2(R1)    *** EXECUTE ONLY ***              R4 K3588000
CTXOI    OI    DCTPPSW,*-*         *** EXECUTE ONLY ***              R4 K3588500
CTXUCSMS DS    0H                                              @OZ27012 K3588520
         USING BUFDSECT,WB         GET BUFFER ADDRESSABILITY   @OZ27012 K3588540
         MVC   BUFSTART(2),=X'000F' MOVE MESSAGE NUMBER        @OZ27012 K3588560
         MVC   BUFSTART+2(8),DCTDEVN MOVE DEVICE NAME          @OZ27012 K3588580
         MVC   BUFSTART+10(L'IMAGEMSG),IMAGEMSG UCS NOT FOUND  @OZ40627 K3588600
         MVC   BUFSTART+22(4),DCTUCS MOVE UCS ID               @OZ27012 K3588620
        $WTO   BUFSTART,36,JOB=NO, ISSUE BUFFER LOAD FAIL MSG  @OZ27012*K3588640
               ROUTE=$LOG+$UR,CLASS=$ACTION,PRI=$ST            @OZ27012 K3588660
         B     CTXUCSEX            EXIT TO GET NEXT PARAMETER  @OZ27012 K3588680
CTXFCBMS DS    0H                                              @OZ27012 K3588700
         USING BUFDSECT,WB         GET BUFFER ADDRESSABILITY   @OZ27012 K3588720
         MVC   BUFSTART(2),=X'000F' MOVE MSG ID                @OZ27012 K3588740
         MVC   BUFSTART+2(8),DCTDEVN MOVE DEVICE NAME          @OZ27012 K3588760
         MVC   BUFSTART+10(L'IMAGEMSG),IMAGEMSG FCB NOT FOUND  @OZ40627 K3588780
         MVC   BUFSTART+10+1(L'FCBMSG),FCBMSG SET FCB NOT FOUND@OZ40627 K3588790
         MVC   BUFSTART+22(4),DCTFCB MOVE FCB ID               @OZ27012 K3588800
        $WTO   BUFSTART,36,JOB=NO, ISSUE BUFFER LOAD FAIL MSG  @OZ27012*K3588820
               ROUTE=$LOG+$UR,CLASS=$ACTION,PRI=$ST            @OZ27012 K3588840
         B     CTXFCBEX            BR TO GET NEXT PARAMETER    @OZ27012 K3588860
NOBUF   $WTO   COMNFCB,COMFCBL,JOB=NO,  BUFFER SHORTAGE MSG    @OZ27012*K3588880
               ROUTE=$LOG+$UR,CLASS=$NORMAL,PRI=$ST            @OZ27012 K3588900
         B     CTXLOOPA            POST JOB                    @OZ27012 K3588920
COMNFCB  $MSG  000,'NO BUFFERS TO DETERMINE IF STD UCS/FCB'    @OZ27012 K3588940
COMFCBL  EQU   *-COMNFCB                                       @OZ27012 K3588960
         EJECT                                                          K3589000
*********************************************************************** K3589500
*        SET STRING OF AVAILABLE SYSOUT CLASS(ES) FOR PRT/PUN         * K3590000
*********************************************************************** K3590500
CTXQ     SLR   R15,R15             CHECK                             R4 K3591000
         IC    R15,$NUMCLAS         FOR                              R4 K3591500
         CLR   WB,R15                TOO LONG                        R4 K3592000
         BNLR  WC                  EXIT IF TOO LONG                     K3592500
         L     R14,=A(CVALIDTB)    POINT TO TEST TABLE               R4 K3593000
         EX    WB,CTXQVALD         CHECK FOR VALID CLASSES              K3593500
         BNZR  WC                  ERROR IF NOT (A-Z) OR (0-9)          K3594000
         LA    R14,DCTCLASS        MOVE                              R4 K3594500
         LA    R0,2(,R1)            CLASS                            R4 K3595000
         LA    R1,1(,WB)             STRING                          R4 K3595500
         ICM   R1,8,$BLANKS           TO                       @OZ40627 K3596000
         MVCL  R14,R0                  DCT                           R4 K3596500
         B     CTXLOOPA .          GO POST THE JOB                      K3597000
CTXQVALD TRT   2(*-*,R1),0(R14)    *** EXECUTE ONLY ***              R4 K3597500
*********************************************************************** K3598000
*        SET ROUTE CODE THIS PRINTER/PUNCH WILL PROCESS               * K3598500
*********************************************************************** K3599000
CTXR     TM    COMFLAG,CMBFLAGW    WAS COMMAND ENTERED FROM REMOTE   R4 K3599500
         BOR   WC                  ERROR EXIT IF YES                 R4 K3600000
         BAL   LINK,COFRTRA        CONVERT DESTINATION               R4 K3600500
         B     0(,WC)              ERROR EXIT               + 0      R4 K3601000
         CR    R0,R1               SAME                     + 4      R4 K3601500
         BNER  WC                  ERROR EXIT                        R4 K3602000
         STH   R0,DCTNO            STORE NEW DEVICE ROUTE CODE          K3606000
         B     CTXLOOPA            GO $POST JOT, LOOK FOR MORE          K3606500
*********************************************************************** K3607000
*        SET FORMS FOR PRINTER OR PUNCH                               * K3607500
*********************************************************************** K3608000
CTXF     LA    R15,DCTFORMS        POINT TO FORMS                       K3608500
         LA    R0,DCTPPSWF         SET OPERATOR CONTROL                 K3609000
         CLC   2(5,R1),=C'AUTOM'   CHECK FOR AUTOMATIC FORMS            K3609500
         BNE   CTXCCT              FILL IN DATA IF NOT                  K3610000
         NI    DCTPPSW,255-DCTPPSWF ALLOW AUTOMATIC FORMS               K3610500
* OPERATOR CAN RELINQUISH FORMS CONTROL ANY TIME                        K3611000
CTXLOOPA $POST $HASPECF,(JOB,JOT)  POST JOB AND JOT                     K3611500
CTXLOOPC BXLE  WD,WE,CTXLOOP       GET NEXT OPERAND                     K3612000
         DROP  WA                  DROP DCT ADDRESSABILITY              K3613000
         LR    WB,WA               PUT DCT IN NON-USED REGISTER         K3613500
         USING DCTDSECT,WB         DCT ADDRESSABILITY                   K3614000
CTXDISP  $CFDCTD DCT=(WB),EXT=YES,ENTRY=COFDVDSP DISPLAY DEVICE         K3614500
         SPACE 1                                                        K3615000
         B     CBXTRUND            AND EXIT $TDEVICE COMMAND            K3615500
         DROP  WB                  DROP DCT ADDRESSABILITY              K3616000
         USING DCTDSECT,WA         DCT ADDRESSABILITY                   K3616500
         EJECT                                                       R4 K3622500
*********************************************************************** K3623000
*        TEST FOR ACTIVE PRINT/PUNCH DEVICE                           * K3623500
*********************************************************************** K3624000
CTXDEV   TM    DCTSTAT,DCTINUSE    TEST FOR ACTIVE DEVICE               K3624500
         BZR   LINK                NO -- RETURN 'OK' TO MODIFY          K3625000
         MVC   COMMAND(8),DCTDEVN  SET NAME                             K3625500
         MVC   COMMAND+8(7),=C' IN USE' MOVE IN DIAGNOSTIC              K3626000
         $CRET L=15                SEND DIAGNOSTIC AND EXIT             K3626500
*********************************************************************** K3626600
*        SET COMPACTION TABLE NUMBER FOR PRT/PUN                      * K3626700
*********************************************************************** K3626800
CTXZ     TM    MDCTFEAT-DCTDSECT(WA),DCTPCPCT TEST IF SUPPORTED     R41 K3626900
         BZR   WC                  NO, ERROR EXIT                   R41 K3627000
        $CFCVB POINTER=(WD),NOK=(WC) CONVERT COMPACTION NO TO BIN   R41 K3627100
         CH    R0,=H'99'           TEST IF COMPACTION NB UNDER 99   R41 K3627200
         BHR   WC                  NO,ERROR                         R41 K3627300
         STC   R0,DCTDCPTN         STORE COMPACTION NB IN DCT       R41 K3627400
         B     CTXLOOPC            LOOK FOR OTHER OPERANDS          R41 K3627500
         SPACE 1                                                    R41 K3627600
*********************************************************************** K3627700
*        PROCESS $TRMTN,A=Y/N,D=NNNN                                  * K3627800
*********************************************************************** K3627900
CTXRMT   DS    0H                                                   R41 K3628000
         DROP  WA                                                   R41 K3628100
         USING RATDSECT,WA         RAT ADDRESSABILITY               R41 K3628200
         LA    WC,CBXINVO          SET ERROR EXIT ADDRESS           R41 K3628300
         BXH   WD,WE,CBXINVO       IF NO CORRESPONDING PARM, EXIT   R41 K3628400
CTXRLOOP DS    0H                                                   R41 K3628500
         L     R1,0(0,WD)          PICK UP OPERAND ADDRESS          R41 K3628600
         TM    COMFLAG,CMBFLAGR+CMBFLAGS TEST FOR RESTRICTED CNSL   R41 K3628700
         BNZR  WC                  YES, INVALID TO SET REMOTE       R41 K3628800
         CLI   1(R1),C'='          CHECK PROPER FORMAT              R41 K3628900
         BNER  WC                  NO, ERROR                        R41 K3629000
         $CFSEL (A,CTXRMTA),(D,CTXRMTD)                             R41 K3629100
         BR    WC                  ERROR, UNKNOWN OPERAND           R41 K3629200
         SPACE 1                                                    R41 K3629300
CTXRMTA  DS    0H                                                   R41 K3629400
         TM    RATTYPE,DCTPLU1     IS THIS AN SNA REMOTE            R41 K3629500
         BNOR  WC                  NO, ERROR                        R41 K3629600
         CLI   2(R1),C'Y'          IS THIS A=Y                      R41 K3629700
         BNE   CTXRMTA1            NO CHECK MORE                    R41 K3629800
         OI    RATFLAGS,RATALM     YES, INDICATE IN RAT             R41 K3629900
         STCK  COMDWORK            STORE CLOCK VALUE                R41 K3630000
         MVC   RATIMER,COMDWORK     AND MOVE INTO RAT               R41 K3630100
         B     CTXPOSTX            GO POST MLLM                     R41 K3630200
CTXRMTA1 DS    0H                                                   R41 K3630300
         CLI   2(R1),C'N'          IS THIS A=N                      R41 K3630400
         BNER  WC                  NO, ERROR - NEITHER Y OR N       R41 K3630500
         NI    RATFLAGS,255-RATALM YES, INDICATE IN RAT             R41 K3630600
         B     CTXPOSTX            GO POST MLLM                     R41 K3630700
         SPACE 1                                                    R41 K3630800
CTXRMTD  DS    0H                                                   R41 K3630900
         $CFCVB POINTER=(WD),NOK=CBXINVO CONVERT D=NNNN             R41 K3631000
         CH    R0,=H'8160'         CHECK MAX CHANGE                 R41 K3631100
         BHR   WC                  ERROR IF TOO MUCH                R41 K3631200
         AH    R0,=H'31'           ROUND TO MULTIPLE OF 32          R41 K3631300
         SRL   R0,5                DIVIDE BY 32                     R41 K3631400
         CLI   RATIDINV,X'00'      CHECK FOR NO INTERVAL            R41 K3631500
         BE    CTXRMTD1            NO INTERVAL, ALLOW MAX CHANGE    R41 K3631600
         LTR   R0,R0               CHECK FOR ZERO                   R41 K3631700
         BZR   WC                  YES ERROR                        R41 K3631800
         CLM   R0,1,RATIDINV       CHECK INTERVAL BEING SET         R41 K3631900
         BHR   WC                  CANT BE GT INITIAL INTERVAL      R41 K3632000
CTXRMTD1 STC   R0,RATDINTV         PUT IN RAT                       R41 K3632100
         B     CTXLOOPX            CHECK IF MORE                    R41 K3632200
         SPACE 1                                                    R41 K3632300
CTXPOSTX L     R15,$MLLMPCE        TELL LINE MANAGER ABOUT WORK     R41 K3632400
         OI    MSCANREQ-PCEDSECT(R15),MSCNRAT  REQUEST RAT SCAN     R41 K3632500
         $POST (R15),WORK                                           R41 K3632600
CTXLOOPX DS    0H                                                   R41 K3632700
         BXLE  WD,WE,CTXRLOOP      LOOP IF MORE OPERANDS            R41 K3632800
         LNR   R1,WA               LOAD -RAT ADDR FOR DISPLAY       R41 K3632900
         $CFDCTD DCT=(R1),EXT=SET      DISPLAY RAT INFO             R41 K3633000
         B     CBXTRUND            RETURN                           R41 K3633100
         SPACE 2                                                    R41 K3633200
         DROP  WA                  RELEASE RAT ADDRESSABILITY       R41 K3633300
         EJECT                                                       R4 K3633400
*********************************************************************** K3633500
*                                                                     * K3633600
*        PROCESS $T READER COMMAND                                    * K3633700
*                                                                     * K3633800
*********************************************************************** K3633900
CTXRDR   DS    0H                  CHANGE A READER                      K3634000
         USING DCTDSECT,WA         DCT ADDRESSABILITY               R41 K3634100
         $CFSEL (A,CTXRDRA),(C,CTXRDRC),(H,CTXRDRH),(P,CTXRDRP),       CK3634700
               (Q,CTXRDRQ),(S,CTXRDRS),(U,CTXRDRU)                      K3634800
         BR    WC                  BRANCH IF NOT FOUND                  K3636000
*********************************************************************** K3636500
*        SET LOCAL CARD READER COMMAND AUTHORITY                      * K3637000
*********************************************************************** K3637500
CTXRDRA  DS    0H                  CHANGE A READERS AUTHORITY           K3638000
         CLI   DCTDEVTP,DCTRJR     INSURE NOT A REMOTE RDR              K3638500
         BER   WC                  RMT RDR -- ERROR                     K3639000
         TM    COMFLAG,CMBFLAGU+CMBFLAGT READER CONSOLE              R4 K3639500
         BZR   WC                  YES-RDR CANNOT SET ANOTHER           K3640000
         TM    COMAUTH,COMS        CONSOLE LACK SYSTEM AUTHORITY     R4 K3640500
         BOR   WC                  YES-- ERROR                          K3641000
CTXRDRAA $CFCVB POINTER=(WD),NUM=1,NOK=(WC) CONVERT AUTHORITY           K3641500
         CH    R0,=H'7'            CHECK FOR MAX AUTH                   K3642000
         BHR   WC                  HIGHER-- ERROR                       K3642500
         OI    DCTRAUTH,COMJDS     RESTRICT RDR COMPLETELY              K3643000
         LR    R15,R0              GET GOOD REG FOR 'EX'                K3643500
         EX    R15,CTXSETA         SET NEW AUTHORITY                    K3644000
         BAL   R14,CTXLOOPR        GO TEST FOR INTERNAL RDR CHANGE      K3644500
         B     CTXLOOPC            AND GET NEXT OPERAND                 K3645000
CTXSETA  XI    DCTRAUTH,*-*        **** EXECUTE ONLY ****               K3645500
         EJECT                                                       R4 K3646000
*********************************************************************** K3646500
*        SET READER'S DEFAULT JOB CLASS                               * K3647000
*********************************************************************** K3647500
CTXRDRC  DS    0H                  CHANGE RDR DEFAULT JOB CLASS         K3648000
         LA    R15,DCTJCLAS        POINT TO FIELD TO CHANGE             K3648500
         B     CTXRDRCQ            GO CHECK SOURCE CLASS                K3649000
*********************************************************************** K3649500
*        SET READER'S DEFAULT MESSAGE CLASS                           * K3650000
*********************************************************************** K3650500
CTXRDRQ  DS    0H                  CHANGE RDR DEFAULT MSG CLASS         K3651000
         CLI   DCTDEVTP,DCTINR     INVALID TO SET DEFAULT MSG           K3651500
         BER   WC                  CLASS FOR INTERNAL READER            K3652000
         LA    R15,DCTMCLAS        POINT TO FIELD TO CHANGE             K3652500
CTXRDRCQ DS    0H                  COMMON ROUTINE FOR READER CHANGE     K3653000
         L     R14,=A(CVALIDTB)    POINT TO TEST TABLE               R4 K3653500
         TRT   2(L'DCTJCLAS,R1),0(R14) CHECK FOR VALID CLASS         R4 K3654000
         BNZR  WC                  NO  --  ERROR                        K3654500
         MVC   0(L'DCTMCLAS,R15),2(R1) SET NEW CLASS AS IS IN R15       K3655000
         BAL   R14,CTXLOOPR        GO TEST FOR INTERNAL READER          K3655500
         B     CTXLOOPC            AND GET NEXT OPERAND                 K3656000
         SPACE 1                                                        K3656500
*********************************************************************** K3657000
*        SET READER TO HOLD/RELEASE INCOMING JOBS                     * K3657500
*********************************************************************** K3658000
CTXRDRH  DS    0H                  SET READER TO HOLD/RELEASE JOBS      K3658500
         CLI   2(R1),C'N'          TEST FOR RESET HOLD OPTION           K3659000
         BE    CTXRDRR             YES--GO TO IT                        K3659500
         CLI   2(R1),C'Y'          TEST FOR REQUEST TO HOLD READER      K3660000
         BNER  WC                  NO--ERROR                            K3660500
         OI    DCTFLAGS,DCTHOLDJ   SET HOLDING BIT 'ON'                 K3661000
         B     CTXRDND             EXIT                                 K3661500
CTXRDRR  DS    0H                  RELEASE READER FROM HOLDING JOBS     K3662000
         NI    DCTFLAGS,255-DCTHOLDJ  RESET HOLDING BIT TO 'OFF'        K3662500
CTXRDND  DS    0H                  EXIT ROUTINE                         K3663000
         BAL   R14,CTXLOOPR        GO TEST FOR INTERNAL READER          K3663500
         B     CTXLOOPC            AND GET NEXT OPERAND                 K3664000
*********************************************************************** K3664500
*        SET DEFAULT SYSTEM AFFINITY FOR READER                       * K3665000
*********************************************************************** K3665500
CTXRDRS  DS    0H                  SET DEFAULT SYSTEM AFFINITY          K3666000
         LPR   R10,WE              ASSUME ADDITION TO AFFINITY          K3666500
         CLI   2(R1),C'+'          CHECK FOR SAME                       K3667000
         BE    CTXRSCHG            YES--ADD SELECTED AFFINITIES         K3667500
         LNR   R10,R10             ASSUME DELETION FROM AFFINITIES      K3668000
         CLI   2(R1),C'-'          TEST FOR SAME                        K3668500
         BE    CTXRSCHG            YES--FIND AFFINITIES TO DELETE       K3669000
         SLR   R10,R10             SET NO ADDITION OR DELETION          K3669500
         BCTR  R1,0                PT BACK ONE FOR NEXT ADDITION        K3670000
CTXRSCHG DS    0H                  FIND DESIRED AFFINITIES              K3670500
         MVI   CTXRSIAF,0          SET AFFINITIES TO ZERO               K3671000
         LA    R1,3(,R1)           POINT TO FIRST SID CHARACTER         K3671500
CTXRSLP1 DS    0H                  TEST FOR AFFINITY                    K3672000
         CLC   0(3,R1),=C'ANY'     TEST FOR AFFINITY OF 'ANY'           K3672500
         BNE   CTXRSIND            NO--TRY FOR INDY MODE OPERATION      K3673000
         OI    CTXRSIAF,QUESYSAF   YES--FLAG ANY AFFINITY               K3673500
         SLR   R10,R10             SET NO ADDITION OR DELETION          K3674000
         B     CTXRSLP4            AND TRY FOR MORE OPERANDS            K3674500
CTXRSIND DS    0H                  TEST FOR INDEPENDENT MODE DESIRED    K3675000
         CLC   0(3,R1),=C'IND'     TEST FOR 'IND' MODE                  K3675500
         BNE   CTXRSLP2            NO--TRY FOR SPECIFIC SID             K3676000
         OI    CTXRSIAF,QUEINDAF   YES--SET READER AS SUCH              K3676500
         B     CTXRSLP4            AND TRY FOR MORE OPERANDS            K3677000
CTXRSLP2 DS    0H                  TEST FOR SPECIFIC SID GIVEN          K3677500
         L     R15,$QSE1           POINT TO 1ST QSE                  R4 K3678000
*                                    THIS CARD DELETED BY APAR @OZ27300 K3678500
         USING QSEDSECT,R15        QSE ADDRESSABILITY                   K3679000
*                                    THIS CARD DELETED BY APAR @OZ27300 K3679500
CTXRSLP3 CLC   QSESID,0(R1)        TEST FOR MATCH WITH OPERAND @OZ27300 K3680000
         BE    CTXRSFND            YES--SET AFFINITY AS SUCH            K3680500
         TM    QSEFLAGS,QSELAST    TEST FOR LAST ELEMENT                K3681000
         LA    R15,QSELEN(,R15)    BUMP TO NEXT QSE            @OZ27300 K3681100
         BZ    CTXRSLP3            NOT LAST QSE, LOOP FOR MATCH         K3681500
         BR    WC                  NOT FOUND -- ERROR                   K3682000
         SPACE 1                                                        K3682500
CTXRSFND DS    0H                  SID WAS FOUND TO MATCH OPERAND       K3683000
         OC    CTXRSIAF,QSESIAFF   FLAG THIS AFFINITY                   K3683500
         SPACE 1                                                        K3684000
CTXRSLP4 BXLE  WD,WE,CTXRSLP5      LOOP THROUGH ALL OPERANDS            K3684500
         TM    CTXRSIAF,QUEINDAF   IF END TEST FOR 'IND' ON             K3685000
         BZ    CTXRSFIN            NO--FORGET OTHER TESTS               K3685500
         TM    CTXRSIAF,255-QUEINDAF TEST FOR 'IND' 'ON' BY ITSELF      K3686000
         BNZ   CTXRSFIN            OTHERS 'ON' --OK                     K3686500
         LTR   R10,R10             MAKE SURE DESIRE IS 'OFF' OR 'ON'    K3687000
         BNZ   CTXRSFIN            YES--'OK' AS IS                      K3687500
         SLR   WD,WE               NO--POINT TO BAD OPERAND             K3688000
         BR    WC                  AND EXIT IN ERROR                    K3688500
CTXRSLP5 DS    0H                  MORE OPERANDS TEST FOR MORE SID'S    K3689000
         L     R1,0(,WD)           PT TO NEXT OPERAND                   K3689500
         CLI   1(R1),C'='          CHECK FOR NOT SID BUT NEW OPERAND    K3690000
         BNE   CTXRSLP1            NO--TRY FOR NEXT SID MATCH           K3690500
CTXRSFIN DS    0H                  SET NEW DEFAULT AFFINITIES           K3691000
         SLR   WD,WE               POINT BACK TO OPERAND                K3691500
         LTR   R10,R10             TEST FOR TYPE OF CHANGE              K3692000
         BM    CTXRSMIN            IF SUBTRACTION  --  BRANCH           K3692500
         BP    CTXRSPLS            IF ADDITION  --  BRANCH              K3693000
         MVI   DCTSIAFF,0          SET AFFINITIES TO 'NONE'             K3693500
CTXRSPLS OC    DCTSIAFF,CTXRSIAF   SET NEW AFFINITIES                   K3694000
         B     CTXRSEND            AND EXIT                             K3694500
CTXRSMIN DS    0H                  REMOVE SELECTED AFFINITIES           K3695000
         LA    R10,255             SET REGISTER TO ALL BITS 'ON'        K3695500
         SLR   R0,R0               ZERO INSERT REGISTER                 K3696000
         IC    R0,CTXRSIAF         PICK-UP AFFINITIES TO DELETE         K3696500
         SLR   R10,R0              COMPUTE BITS TO BE LEFT 'ON'         K3697000
         EX    R10,CTXRAFOF        DELETE SELECTED AFFINITIES           K3697500
         L     R15,$QSE1           POINT TO 1ST QSE                  R4 K3698000
*                                    THIS CARD DELETED BY APAR @OZ27300 K3698500
*                                    THIS CARD DELETED BY APAR @OZ27300 K3699000
CTXRAFLP IC    R10,QSESIAFF        PICK UP AFFINITY BIT        @OZ27300 K3699500
         EX    R10,CTXRAFON        TEST FOR IMPOSSIBLE AFFINITY         K3700000
         BO    CTXRSEND            NO--EXIT QSE SCAN                    K3700500
         TM    QSEFLAGS,QSELAST    TEST FOR LAST ELEMENT                K3701000
         LA    R15,QSELEN(,R15)    BUMP TO NEXT QSE            @OZ27300 K3701100
         BZ    CTXRAFLP            NOT LAST--LOOP THROUGH QSE'S         K3701500
         OC    DCTSIAFF,CTXRSIAF   RESET AFFINITIES                     K3702000
         BR    WC                  AND EXIT IN ERROR                    K3702500
CTXRSEND DS    0H                  END OF SID CHANGE                    K3703000
         BAL   R14,CTXLOOPR        SET ALL INTERNAL READERS POSSIBLY    K3703500
         B     CTXLOOPC            AND EXIT FOR NEXT OPERAND            K3704000
CTXRAFOF NI    DCTSIAFF,*-*        **** EXECUTE ONLY ****               K3704500
CTXRAFON TM    DCTSIAFF,*-*        **** EXECUTE ONLY ****               K3705000
         DROP  R15                 DROP QSE ADDRESSABILITY              K3705500
CTXRSIAF EQU   COMWREGS,1          AFFINITY CREATE AREA                 K3706000
*********************************************************************** K3706500
*        CHANGE ALL INTERNAL READERS SUBROUTINE                       * K3707000
*********************************************************************** K3707500
CTXLOOPR DS    0H                  SET ALL INTERNAL READERS             K3708000
         CLI   DCTDEVTP,DCTINR     TEST FOR INTERNAL READER             K3708500
         BNER  R14                 NO--EXIT                             K3709000
         LR    R15,WA              SAVE BEGINNING ADDRESS               K3709500
CTXINRLP ICM   WA,7,DCTCHAIN+1     GET NEXT DCT                         K3710000
         BNZ   *+8                 IF NOT LAST TRST FOR INTRDR          K3710500
         LR    WA,R15              RESET DCT ADDRESS TO FIRST INTRDR    K3711000
         BR    R14                 AND RETURN                           K3711500
         CLI   DCTDEVTP,DCTINR     TEST FOR STILL INTERNAL READER       K3712000
         BNE   *-8                 NO--EXIT                             K3712500
         MVC   DCTSIAFF(L'DCTSIAFF+L'DCTRAUTH+L'DCTJCLAS),DCTSIAFF-DCTDCK3713000
               SECT(R15)           SET APPRO. FIELDS IN DCT    @OZ29471 K3713500
         MVC   DCTFLAGS,DCTFLAGS-DCTDSECT(R15)  DITTO                   K3714000
         B     CTXINRLP            AND LOOP FOR MORE INTRDR'S           K3714500
         SPACE 1                                                        K3715000
*********************************************************************** K3715500
*        SET READER'S DEFAULT PRINT/PUNCH DESTINATION(S)              * K3716000
*********************************************************************** K3716500
CTXRDRP  LA    R10,DCTPRINT        SET ADDRESS OF PRINT DESTINATION     K3717000
         B     *+8                 SKIP                                 K3717500
CTXRDRU  LA    R10,DCTPUNCH        SET ADDRESS OF PUNCH DESTINATION     K3718000
         CLI   DCTDEVTP,DCTINR     IS THIS AN INTERNAL READER        R4 K3718500
         BER   WC                  ERROR EXIT IF YES                 R4 K3719000
         BAL   LINK,COFRTRA        CONVERT DESTINATION               R4 K3719500
         B     0(,WC)              ERROR EXIT               + 0      R4 K3720000
         CR    R0,R1               SAME                     + 4      R4 K3720500
         BNER  WC                  ERROR EXIT                        R4 K3721000
         STH   R0,0(,R10)          STORE NEW PRINT/PUNCH DEST           K3721500
         B     CTXLOOPC            LOOK FOR ADDITIONAL OPERANDS         K3722000
*********************************************************************** K3730000
*        SET LOGON DCT VALUES                                         * K3730500
*********************************************************************** K3731000
CTXLOG   NULL                                                        R4 K3731500
         TM    COMFLAG,CMBFLAGR+CMBFLAGS TEST FOR RESTRICTED CONSOLE R4 K3732000
         BNZR  WC                  YES--ILLEGAL TO SET LOGON         R4 K3732500
         CLI   1(R1),C'='          CHECK FOR VALID OPERAND FORMAT    R4 K3733000
         BNER  WC                  IF NOT -- ERROR                   R4 K3733500
         $CFSEL (A,CTXAPPL),(P,CTXLPAS),(E,CTXLLOG)                  R4 K3734000
         BR    WC                  NO-- ERROR IN COMMAND             R4 K3734500
*********************************************************************** K3735000
*        SET LOGON APPLICATION ID                                     * K3735500
*********************************************************************** K3736000
CTXAPPL  LA    WB,MDCTAPPL         PICK UP APPLICATION ID FEILD ADDR R4 K3736500
         B     CTXLAPAS            GO TO COMMON LINE / LOGON RTN     R4 K3737000
*********************************************************************** K3738000
*        SET RJE LINE PASSWORD / LOGGING OPTION                       * K3738500
*********************************************************************** K3739000
CTXLINE  NULL                                                           K3739500
         TM    COMFLAG,CMBFLAGR+CMBFLAGS TEST FOR RESTRICTED CONSOLE R4 K3740000
         BNZR  WC                  YES -- INVALID TO SET RJE LNE        K3740500
         CLI   1(R1),C'='          CHK FOR PROPER FORMAT                K3741000
         BNER  WC                  IF NOT--ERROR                        K3741500
         $CFSEL (D,CTXLDIS),(E,CTXLLOG),(P,CTXLPAS)                  R4 K3742000
         BNER  WC                  NO  --  ERROR IN COMMAND             K3742500
CTXLPAS  LA    WB,MDCTPSWD         PICK UP PASSWORD FIELD ADDR       R4 K3743000
         EJECT                                                      R41 K3743900
*********************************************************************** K3744000
*        SET LINE/LOGN DCT PASSWORD/APPLICATION ID                    * K3744500
*********************************************************************** K3745000
CTXLAPAS MVI   0(WB),C' '          BLANK OUT DCT                     R4 K3746000
         MVC   1(7,WB),0(WB)         RECEIVING FEILD                 R4 K3746500
         L     R15,4(,WD)          FIND END OF OPERAND               R4 K3747000
         SR    R15,R1              COMPUTE OPERAND LENGTH            R4 K3747500
         SH    R15,=H'4'             LESS 4 FOR KEYWORD AND MACHINE  R4 K3748000
         BM    CTXLOOPC            RESET VALUE IF NEGATIVE           R4 K3748500
         CH    R15,*+10            CHECK FOR MAX SIZE                   K3749000
         BNH   *+8                 MOVE IT IF SIZE 'OK'                 K3749500
         LA    R15,8-1             ELSE SUBSTITUTE MAX SIZE          R4 K3750000
         EX    R15,CTXLMOV         MOVE IN NEW VALUE                 R4 K3750500
         B     CTXLOOPC            LOOK FOR OTHER OPERANDS              K3751000
         SPACE 2                                                    R41 K3751400
CTXLMOV  MVC   0(*-*,WB),2(R1)     **** EXECUTE ONLY ****            R4 K3751500
         SPACE 3                                                    R41 K3751600
*********************************************************************** K3752000
*        SET RJE LINE CHANNEL END LOGGING OPTION                      * K3752500
*********************************************************************** K3753000
CTXLLOG  NULL                                                           K3753500
         CLI   2(R1),C'Y'          LOG ALL CHNL ENDS                    K3754000
         BE    CTXLOGY             YES--GO DO IT                        K3754500
         CLI   2(R1),C'N'          RESET CHNL END LOGGING               K3755000
         BNER  WC                  BR IN ERROR IF NEITHER               K3755500
         NI    DCTFLAGS,255-DCTLOGAL YES--RESET IT                   R4 K3756000
         B     CTXLOOPC            LOOK FOR ADDITIONAL OPERANDS         K3756500
CTXLOGY  OI    DCTFLAGS,DCTLOGAL   INDICATE LOG ALL ACTIONS          R4 K3757000
         B     CTXLOOPC            LOOK FOR ADDITIONAL OPERANDS      R4 K3757500
         EJECT                                                      R41 K3757900
*********************************************************************** K3758000
*        CAUSE RJE LINE DISCONNECT                                    * K3758500
*********************************************************************** K3759000
CTXLDIS  TM    DCTSTAT,DCTINUSE    IS LINE IN USE                    R4 K3759500
         BZ    CTXLOOPC            BRANCH, IF NOT                    R4 K3760000
         CLI   2(R1),C'Q'          IS QUIESCE REQUESTED              R4 K3760500
         BE    CTXLDISQ            BRANCH IF YES                     R4 K3761000
         CLI   2(R1),C'I'          IS IMMEDIATE REQUESTED            R4 K3761500
         BNER  WC                  BRANCH IF NEITHER - ERROR         R4 K3762000
         OI    DCTFLAGS,DCTRSTRT   CAUSE ACTION AT NEXT CHANNEL END  R4 K3762500
CTXLDISQ OI    MDCTSTAT,DCTSOFF    SET FOR LINE MANAGER DISCONNECT   R4 K3763000
         TM    MDCTTYPE,DCTPSNA    TEST FOR SNA LINE                 R4 K3763500
         BZ    CTXLOOPC            NO, SKIP POST                     R4 K3764000
         L     R14,$MLLMPCE        PICK UP LINE MANAGER PCE ADDRESS  R4 K3764500
         USING PCEDSECT,R14        SHOW PCE TEMPORARY ADDRESSABILITY R4 K3765000
         OI    MSCANREQ,MSCNSIDL+MSCNSALL SCAN ACTIVE SNA LINE DCTS  R4 K3765500
         DROP  R14                                                   R4 K3766000
         $POST (R14),WORK          POST LINE MANAGER                 R4 K3766500
         B     CTXLOOPC            LOOK FOR ADDITIONAL OPERANDS      R4 K3767000
         DROP  WA                                                       K3767500
         EJECT                                                          K3768500
         SPACE 4                                                        K3769000
         USING DCTDSECT,R1                                              K3770000
         SPACE 1                                                     R4 K3770500
*********************************************************************** K3771000
*                                                                     * K3771500
*        $Z DEV -- HALT DEVICE                                        * K3772000
*        DEV   = PRINT/PUNCH PROCESSOR OUTPUT DEVICE                  * K3772500
*              = INPUT SERVICE PROCESSOR INPUT DEVICE                 * K3773000
*                                                                     * K3773500
*********************************************************************** K3774000
CZ       DS    0H                  HALT A DEVICE                        K3774500
         TM    DCTDEVTP,DCTINT     IS THIS AN INTERNAL DEVICE        R4 K3775500
         BNZ   CTXINVO             INVALID DEVICE OPERAND IF YES     R4 K3777500
         TM    DCTDEVTP,DCTRPP     IS THIS A RDR,PRTR, OR PUNCH      R4 K3778000
         BZ    CTXINVO            INVALID DEVICE OPERAND IF NOT      R4 K3778500
         TM    DCTDEVTP,DCTRJE     IS THIS A REMOTE DEVICE           R4 K3779000
         BO    CTXINVO            INVALID DEVICE OPERAND IF YES      R4 K3779500
         BAL   R14,CTDEVCHK        CHECK FOR ACTIVE DEVICE              K3780000
         OI    DCTFLAGS,DCTSTOP    HALT THE DEVICE IF PRINT/PUNCH       K3780500
         B     CZXNEXT             GO TO NEXT DEVICE                    K3781000
         DROP  R1                                                       K3781500
         EJECT                                                      R41 K3782000
         LTORG ,                                                        K3782500
FCBMSG   DS    0CL3                FCB IMAGE PREFIX            @OZ40627 K3782600
FCB2MSG  DC    CL4'FCB2'           FCB2 IMAGE PREFIX           @OZ40627 K3782700
IMAGEMSG DC    CL26' UCS  IMAGE XXXX NOT FOUND'                @OZ40627 K3782800
 TITLE 'HASP COMMAND PROCESSOR HASPCSY1 - SYSTEM COMMANDS'              K3783000
HASPCSY1 $COMGRUP DI,PI,SI,TI,ZI,P40,S40,PJES2,VS,ESYS,LSYS,TALL,      CK3783500
               TSYS,DELAY=YES      DECLARE SYSTEM COMMANDS PROCESSOR    K3784000
*********************************************************************** K3784500
*                                                                     * K3785000
*        INITIATOR COMMANDS                                           * K3785500
*                                                                     * K3786000
*        $D IN -- DISPLAY INITIATOR(S)                                * K3786500
*                                                                     * K3787000
*        $P IN -- STOP ( DRAIN ) INITIATOR(S)                         * K3787500
*                                                                     * K3788000
*        $S IN -- START INITIATOR(S)                                  * K3788500
*                                                                     * K3789000
*        $Z IN -- HALT INITIATOR(S)                                   * K3789500
*                                                                     * K3790000
*        N     =INITIATOR ID, RANGE OF ID'S, OR ALL IF BLANK          * K3790500
*                                                                     * K3791000
*        $T IN,LIST -- SET INITIATOR CLASSES                          * K3791500
*        N     =INITIATOR ID, RANGE OF ID'S, OR ALL IF BLANK          * K3792000
*        LIST  = NEW CLASSES FOR DESIGNATED INITIATOR                 * K3792500
*                                                                     * K3793000
*********************************************************************** K3793500
         CLI   COMVERB+1,C'I'      CHECK FOR INITIATOR ACTION           K3794000
         BNER  R1                  NO--ENTER SUB-PROCESSOR              K3794500
*********************************************************************** K3795000
*        SCAN FOR RANGE OF INITIATORS TO ACT UPON                     * K3795500
*********************************************************************** K3796000
         MVI   COMEWORK,X'FF'      FORCE LOW BOUND TO BE SET            K3796500
         LA    WC,COMOPRND+1       POINT TO FIRST ID CHARACTER          K3797000
         L     R15,4(0,WD)         POINT TO NEXT OR NULL OPERAND        K3797500
         BCTR  R15,0               THEN COMMA OR BLANK                  K3798000
         LA    R14,1               SET INCREMENT FOR BXLE               K3798500
CDIIDS   LR    WB,WC               SAVE STARTING POINT                  K3799000
CDIIDSL  CLI   0(WC),C'-'          CHECK FOR ID SEPARATOR               K3799500
         BNE   CDIIDSA             SKIP FILL OUT IF NOT SEPARATOR       K3800000
         SR    WC,WB               GET LENGTH OF ID                     K3800500
         BZ    CDIINVO             ERROR IF NULL                        K3801000
         CH    WC,=Y(L'PITPATID)   CHECK FOR TOO LONG                   K3801500
         BH    CDIINVO             ERROR IF TOO LONG                    K3802000
         LA    R10,COMEWORK        POINT TO TARGET FIELD                K3802500
         BCT   WC,*+8              REDUCE TO MACHINE LENGTH             K3803000
         LA    R10,1(,R10)         INSURE ID IS RIGHT-JUSTIFIED         K3803500
         MVC   COMEWORK(L'PITPATID),=CL(L'PITPATID)' ' INSURE ID BLANK  K3804000
         EX    WC,CDIIDSMV         MOVE 1ST IDENTIFIER                  K3804500
         LA    WC,2(WC,WB)         POINT TO NEXT CHARACTER TO SCAN      K3805000
         B     CDIIDS              LOOP FOR OVERIDE OR HIGH ID          K3805500
CDIIDSA  CLI   0(WC),C''''         INSURE NO APOSTROPHI                 K3806000
         BE    CDIINVO             EXIT IF PRESENT                      K3806500
         BXLE  WC,R14,CDIIDSL      LOOP                                 K3807000
         MVC   COMEWORK+L'PITPATID(L'PITPATID),=CL(L'PITPATID)' '       K3807500
         BCTR  WC,0                BACK-UP TO LAST CHARACTER            K3808000
         SR    WC,WB               GET LENGTH                           K3808500
         BZ    CDIIDSCK            CHECK FOR ASSENDING                  K3809000
         CH    WC,=Y(L'PITPATID)   CHECK FOR TOO LONG                   K3809500
         BH    CDIINVO             ERROR EXIT                           K3810000
         LA    R10,COMEWORK+L'PITPATID POINT TO TARGET FIELD            K3810500
         BCT   WC,*+8              REDUCE TO MACHINE LENGTH             K3811000
         LA    R10,1(,R10)         INSURE ID IS RIGHT-JUSTIFIED         K3811500
         EX    WC,CDIIDSMV         MOVE 2ND IDENTIFIER                  K3812000
CDIIDSCK CLC   COMEWORK(L'PITPATID),COMEWORK+L'PITPATID ASSENDING       K3812500
         BL    *+10                SKIP NEXT IF ASSENDING IDS           K3813000
         MVC   COMEWORK(L'PITPATID),COMEWORK+L'PITPATID  FORCE EQ       K3813500
         BR    R1                  ENTER FUNCTION SETUP                 K3814000
CDIIDSMV MVC   0(*-*,R10),0(WB)    **** EXECUTE ONLY ****               K3814500
         SPACE 2                                                        K3815000
         USING PITDSECT,WB         PROVIDE PIT ADDRESSABILITY           K3815500
CTI      LA    WC,12               SET OFFSET FOR $TI COMMAND           K3816000
         B     CDIW                ENTER COMMON ROUTINE                 K3816500
CDI      SR    WC,WC               SET REQUEST OFFSET                   K3817000
         B     CDIW                DO WORK                              K3817500
CPI      LA    WC,4                SET REQUEST OFFSET                   K3818000
         B     CDIW                DO WORK                              K3818500
CSI      LA    WC,8                SET REQUEST OFFSET                   K3819000
         B     CDIW                ENTER COMMON ROUTINE                 K3819500
CZI      LA    WC,16               SET INDEX FOR $ZI COMMAND            K3820000
CDIW     NULL                      COMMON ROUTINE FOR ALL INIT CMNDS    K3820500
         L     WB,$PITABLE         POINT TO START OF PITS               K3821000
         CLI   COMEWORK+1,C' '     CHECK FOR ALL INITS                  K3821500
         BE    CDIALL              YES-BR TO ALL INITS RTN              K3822000
         SLR   R10,R10             CLEAR HIT REG FOR RANGE SCAN         K3822500
*********************************************************************** K3823000
*        ACT UPON ONE OR A RANGE OF INITIATORS                        * K3823500
*********************************************************************** K3824000
CDIONE   BAL   WA,CDIFIXIT         FIX PIT IF REQUIRED                  K3824500
         CLC   COMEWORK(L'PITPATID),PITPATID  CHK PIT VS LOW            K3825000
         BH    CDIPITLP            IF HIGH CONTINUE SCAN                K3825500
         CLC   COMEWORK+L'PITPATID(L'PITPATID),PITPATID CHK VS HIG      K3826000
         BL    CDIPITLP            IF LOW CONTINUE SCAN                 K3826500
         LR    R10,WB              ELSE SAVE PIT IN HIT REG             K3827000
         EX    0,CDIFUN(WC)        AND PERFORM INDICATED FUNCTION       K3827500
CDIPITLP ICM   WB,15,PITNEXT       POINT TO NEXT PIT                 R4 K3828000
         BNZ   CDIONE              BR IF VALID PIT ADDRESS           R4 K3828500
         LTR   R10,R10             IF LAST--TEST FOR ANY FOUND          K3829000
         BZ    CDIINVO             IF NOT ERROR IN OPERANDS             K3829500
         B     CDIXIT(WC)          IF ANY FOUND EXIT PER (WC)           K3830000
*********************************************************************** K3830500
*        ACT UPON ALL INITIATORS                                      * K3831000
*********************************************************************** K3831500
CDIALL   BAL   WA,CDIFIXIT         FIX PIT IF REQUIRED                  K3832000
         EX    0,CDIFUNA(WC)       MODIFY ALL INITS                     K3832500
         ICM   WB,15,PITNEXT       POINT TO NEXT PIT                 R4 K3833000
         BNZ   CDIALL              BR IF VALID PIT ADDRESS           R4 K3833500
         B     CDIXIT(WC)          FINI--GO TO INDICATED EXIT           K3834000
CDIINVO  L     R1,0(0,WD)          POINT TO CURRENT OPERAND             K3834500
         $CFINVO OPERAND=(R1)      EXIT WITH DISPLAY                    K3835000
         SPACE 1                                                        K3835500
CDIFIXIT TM    PITFLAGS,PITSIVER+PITSIERR WAS A START REJECTED          K3836000
         BNOR  WA                  RETURN IF NOT                        K3836500
         NI    PITFLAGS,255-(PITSIVER+PITSIERR) RESET FLAGS             K3837000
         NI    PITSTAT,255-PITINIT RESET INIT STARTED                   K3837500
         OI    PITSTAT,PITHOLD1    SET DRAIN FLAG                       K3838000
         BR    WA                  RETURN                               K3838500
         SPACE 1                                                        K3839000
*        MULTIPLE INITIATOR FUNCTIONS                                   K3839500
         SPACE 1                                                        K3840000
CDIFUNA  NULL                      MODIFY ALL PITS                      K3840500
         BAL   WA,CDIDIS           DISPLAY ALL PITS        WC = 0       K3841000
         BAL   WA,CDIPIA           STOP ALL PITS           WC = 4       K3841500
         NI    PITSTAT,255-(PITHOLDA+PITHALTA) START PITS  WC = 8       K3842000
         BAL   WA,CDITI            CHANGE ALL PITS         WC = 12      K3842500
         OI    PITSTAT,PITHALTA    HALT ALL PITS           WC = 16      K3843000
         SPACE 1                                                        K3843500
*        SINGLE INITIATOR FUNCTIONS                                     K3844000
         SPACE 1                                                        K3844500
CDIFUN   NULL                      MODIFY A PIT OR RANGE OF PITS        K3845000
         BAL   WA,CDIDIS           DISPLAY A PIT           WC = 0       K3845500
         BAL   WA,CDIPI1           SYOP A PIT              WC = 4       K3846000
         NI    PITSTAT,255-(PITHOLD1+PITHOLDA+PITHALT1+PITHALTA)        K3846500
         BAL   WA,CDITI            CHANGE A PIT            WC = 12      K3847000
         OI    PITSTAT,PITHALT1    HALT A PIT              WC = 16      K3847500
         SPACE 1                                                        K3848000
*********************************************************************** K3848500
*        EXIT INITIATOR COMMAND ROUITNES                              * K3849000
*********************************************************************** K3849500
         SPACE 1                                                        K3850000
CDIXIT   B     CDIRET              EXIT FOR DISPLAY PIT(S) WC = 0       K3850500
         B     CPIRET              EXIT FOR STOP PIT(S)    WC = 4       K3851000
         B     CSIRET              EXIT FOR START PIT(S)   WC = 8       K3851500
         B     CTIRET              EXIT FOR CHANGE PIT(S)  WC = 12      K3852000
         B     CZIRET              EXIT FOR HALT PIT(S)    WC = 16      K3852500
CTIRET   $POST $HASPECF,JOB        POST HASP FOR WORK                   K3853000
CZIRET   $CRET MSG=OK              RETURN WITH 'OK' STATUS              K3853500
CDIRET   $CRET ,                   RETURN WITH NULL MSG--FOR $DI        K3854000
CPIRET   TM    COMNULOP,CIPOSTX    SEE IF HASP IS TO BE POSTED          K3854500
         BZ    CZIRET              NO-DON'T POST HASP--RETURN 'OK'      K3855000
         B     CTIRET              YES-POST HASP--RETURN 'OK'           K3855500
CSIRET   $POST $HASPECF,JOB        POST JOB                             K3856000
         $CWTO MSG='OK',TRUNC=YES  RESPOND AND PREPARE FOR SVC 34       K3856500
CSIRETI  L     WB,$PITABLE         LOCATE PITS                          K3857000
         MVC   COMFLAG(14),COMAMASK COPY MASK INTO                   R4 K3857500
         MVI   COMUCM,X'FF'        INDICATE S INIT SVC 34            R4 K3858000
         MVC   COMTO,$SYSID        SET OUR SYSTEM                    R4 K3858500
CSIRETA  TM    PITSTAT,PITINIT     DOES PIT HAVE INIT                   K3859000
         BO    CSIRETN             IF SO GET NEXT PIT                   K3859500
         TM    PITSTAT,PITHOLDA+PITHOLD1 IS PIT DRAINED                 K3860000
         BNZ   CSIRETN             IF SO SKIP START                     K3860500
         OI    PITFLAGS,PITSIVER   SET VERIFICATION REQUIRED            K3861000
         OI    PITSTAT,PITINIT     INDICATE INIT STARTED                K3861500
         L     WA,$SSVT            POINT TO THE SSVT                    K3862000
         L     R1,$SVPIDLE-SSVT(,WA)   GET ACTIVE INIT COUNT            K3862500
         LA    R0,1(,R1)           UP IT BY ONE FOR NEW INIT            K3863000
         CS    R1,R0,$SVPIDLE-SSVT(WA) SET NEW COUNT -- MAYBE           K3863500
         BZ    *+8                 GOOD -- ISSUE START COMMAND          K3864000
         B     *-16                NO--LOOP 'TILL UPDATED               K3864500
         MVC   COMMAND(14),=C'S INIT.INIT,,,'  SET START INIT           K3865000
         MVC   COMMAND+14(L'$SVSSNM),$SVSSNM-SSVT(WA) COMMAND           K3865500
         LA    R0,14+L'$SVSSNM     SET COMMAND LENGTH                   K3866000
         $CWTO L=(R0)              START THE INITIATOR                  K3866500
CSIRETN  ICM   WB,15,PITNEXT       POINT TO NEXT PIT                 R4 K3867000
         BNZ   CSIRETA             BR IF VALID PIT ADDRESS           R4 K3867500
         $CRET ,                   RETURN WITH NOTHING                  K3868000
         SPACE 1                                                        K3868500
*********************************************************************** K3869000
*        DISPLAY CURRENT STATUS OF AN INITIATOR                       * K3869500
*********************************************************************** K3870000
         SPACE 1                                                        K3870500
* SET STATUS                                                            K3871000
CDIDIS   MVC   COMMAND(CDIML),CDIM INSERT MESSAGE PROTOTYPE             K3871500
         TM    PITSTAT,PITHOLDA+PITHOLD1  TEST FOR DRAIN BITS ON        K3872000
         BZ    CDINDRN             BR IF NOT DRAINING OR DRAINED        K3872500
         MVC   CDIMS-CDIM+COMMAND,=CL8'DRAINING' ASSUME DRAINING        K3873000
         TM    PITSTAT,PITBUSY     TEST FOR PIT IN USE                  K3873500
         BO    CDICLAS             SET CLASSES, PIT (DRAINING)          K3874000
         MVC   CDIMS-CDIM+COMMAND,=CL8'DRAINED' SET DRAIN               K3874500
         B     CDICLAS             SET CLASSES, PIT (DRAINED)           K3875000
CDINDRN  TM    PITSTAT,PITHALTA+PITHALT1 TEST FOR HALT BITS ON          K3875500
         BZ    CDINHLT             IF NOT, CAN NOT BE HALTED-HALTING    K3876000
*                                  HALTING TEXT IN PROTOTYPE            K3876500
         TM    PITSTAT,PITBUSY     TEST FOR PIT IN USE                  K3877000
         BO    CDICLAS             SET CLASSES, PIT (HALTING)           K3877500
         MVC   CDIMS-CDIM+COMMAND,=CL8'HALTED' SET HALTED               K3878000
         B     CDICLAS             SET CLASSES, PIT (HALTED)            K3878500
CDINHLT  MVC   CDIMS-CDIM+COMMAND,=CL8'INACTIVE' ASSUME INACTIVE        K3879000
         TM    PITSTAT,PITBUSY     TEST FOR PIT IN USE                  K3879500
         BZ    CDINBSY             IF NOT, MAY BE UNVERIFIED   @OZ35293 K3880000
         MVC   CDIMS-CDIM+COMMAND,=CL8'ACTIVE' SET ACTIVE               K3880500
         B     CDICLAS             SET CLASSES, PIT (ACTIVE)   @OZ35293 K3880520
CDINBSY  TM    PITFLAGS,PITSMVER   TEST IF IN MEMORY CREATE    @OZ35293 K3880540
         BZ    CDICLAS             SET CLASSES, PIT(INACTIVE)  @OZ35293 K3880560
         MVC   CDIMS-CDIM+COMMAND,=CL8'STARTING' SET STARTING  @OZ35293 K3880580
* SET CLASSES                                                           K3881000
CDICLAS  SLR   R1,R1               MOVE PIT                          R4 K3881500
         IC    R1,$MAXCLAS          CLASS                            R4 K3882000
         BCTR  R1,0                  LIST TO                         R4 K3882500
         EX    R1,CDIPITCL            MESSAGE                        R4 K3883000
* SET PIT IDENTIFICATION                                                K3883500
         MVC   CDIMI-CDIM+COMMAND,PITPATID SET INIT ID                  K3884000
         TM    PITSTAT,PITBUSY     TEST FOR PIT BUSY                    K3884500
         BO    *+12                YES--SKIP TEST FOR XBM               K3885000
         TM    PITFLAGS,PITXBM     TEST FOR XEQ BATCHING                K3885500
         BZ    CDILNGTH            FAILED BOTH TESTS-MSG COMPLETE       K3886000
         L     R1,PITSJB           POINT TO POSSIBLE SJB                K3886500
         LA    R1,0(,R1)           CLEAR HIGH-ORDER BYTE                K3887000
         TM    PITFLAGS,PITXBM     TEST FOR XEQ BATCH MOMITOR           K3887500
         BZ    CDIJOBNM            NONE--SET POSSIBLE JOB NAME          K3888000
         MVC   CDIXBM-CDIM+COMMAND,=C'XB'  SET XEQ BATCH MON ID         K3888500
         TM    PITSTAT,PITHOLD1+PITHOLDA+PITHALT1+PITHALTA              K3889000
         BNZ   CDIXBMNM            NOT BUSY SET XBM NAME                K3889500
         TM    PITSTAT,PITBUSY     TEST FOR BUSY                        K3890000
         BO    CDIJOBNM            YES--INSERT XEQ JOB ID               K3890500
CDIXBMNM MVC   CDINAME-CDIM+COMMAND,SJBXBJNM-SJBDSECT(R1) SET XBM       K3891000
         B     CDILNGTH            GO SEND MESSAGE                      K3891500
CDIJOBNM MVC   CDINAME-CDIM+COMMAND,SJBJOBID-SJBDSECT(R1) SET JOB       K3892000
CDILNGTH LA    R0,CDIML            SET MESSAGE LENGTH                   K3892500
         $CWTO L=(R0),RET=(WA)     SEND INIT DISPLAY                    K3893000
         SPACE 2                                                        K3893500
CDIPITCL MVC   CDIMCLAS-CDIM+COMMAND(*-*),PITCLASS *** EXEC ONLY **  R4 K3894000
CDIM     DC    CL3' ',CL5'INIT'    MESSAGE PROTOTYPE                    K3894500
CDIXBM   EQU   CDIM,2              AREA FOR XBM IDENTIFIER              K3895000
CDIMI    DC    CL(L'PITPATID)' ',C' ' INIT ID AND A BLANK               K3895500
CDIMS    DC    CL8'HALTING',C' '   STATUS OF INIT AND A BLANK           K3896000
CDINMID  DC    8C'*',CL3' C='      JOB ID AND CLASS PREFIX              K3896500
CDINAME  EQU   CDINMID,8           AREA FOR JOB OR XBM ID               K3897000
CDIMCLAS DC    CL36' '             INITIATOR CLASSES                 R4 K3897500
CDIML    EQU   *-CDIM              LENGTH OF MESSAGE                    K3898000
         SPACE 2                                                        K3898500
*********************************************************************** K3899000
*        STOP ALL OR ONE INITIATOR                                    * K3899500
*********************************************************************** K3900000
CDIPIA   NULL                      STOP ALL PITS                        K3900500
         OI    PITSTAT,PITHOLDA    INDICATE PIT STOPPED BY 'ALL' CMND   K3901000
         B     *+8                 BR ARND STOP SINGLE                  K3901500
CDIPI1   OI    PITSTAT,PITHOLD1    STOP A PIT --$PIN CMND               K3902000
         L     R15,$SSVT           LOCATE THE SSVT                      K3902500
         OI    $SVJOB-SSVT(R15),X'80'  FLAG INIT DRAINED FOR XEQ        K3903000
         TM    PITSTAT,PITBUSY     TEST FOR $POST OF HASP NECESSARY     K3903500
         BNZR  WA                  INIT BUSY--NOT NEEDED                K3904000
         OI    COMNULOP,CIPOSTX    INIT IDLE--POST OF HASP IS NECESSARY K3904500
         BR    WA                  RETURN                               K3905000
         EJECT                                                       R4 K3905500
*********************************************************************** K3906000
*        CHANGE THE CLASS STRING OF AN INITIATOR                      * K3906500
*********************************************************************** K3907000
         SPACE 1                                                        K3907500
CDITI    NULL                      CHANGE A CLASS STRING OF A PIT       K3908000
         CLR   WD,WF               CHECK FOR PRESENCE OF OPERAND        K3908500
         BNL   CDIINVO             NO THER -- ERROR                     K3909000
         L     R1,4(,WD)           POINT TO START OF CLS STRING         K3909500
         L     R15,8(,WD)          POINT TO END OF CLS STRING           K3910000
         SR    R15,R1              COMPUTE STRING SIZE + 1              K3910500
         BNP   CDIINVO             ERROR IF NULL                        K3911000
         BCT   R15,*+8             REDUCE TO TRUE LENGTH                K3911500
         B     CDIINVO             ERROR IF ZERO                        K3912000
         CLM   R15,1,$MAXCLAS      CHECK FOR MAXIMUM SIZE            R4 K3912500
         BNH   *+8                 OK -- FORGET USING MAXIMUM SIZE      K3913000
         IC    R15,$MAXCLAS        HIGH -- USE MAXIMUM SIZE          R4 K3913500
         BCTR  R15,0               REDUCE BY 1 FOR MACHINE LENGTH       K3914000
         L     R14,=A(CVALIDTB)    POINT TO TEST TABLE               R4 K3914500
         EX    R15,CTIVALID        CHECK STRING VS VALID ONES           K3915000
         BNZ   CDIINVO             INVALID CHAR--ERROR EXIT             K3915500
*                                  VALID CHAR ARE 'A-Z' AND '0-9'       K3916000
         LR    R0,R15              SAVE STRING LENGTH                R4 K3916500
         IC    R15,$MAXCLAS        BLANK                             R4 K3917000
         BCTR  R15,0                OLD                              R4 K3917500
         EX    R15,CTIBLANK          CLASSES                         R4 K3918000
         LR    R15,R0              RESTORE STRING LENGTH             R4 K3918500
         EX    R15,CTIMOVE         PASSED ALL TESTS--MOVE NEW STRING    K3919000
         BR    WA                  RETURN                               K3919500
         SPACE 1                                                        K3920000
CTIVALID TRT   0(*-*,R1),0(R14)    *** EXECUTE ONLY ***              R4 K3920500
CTIBLANK MVC   PITCLASS(*-*),CDIMCLAS  *** EXECUTE ONLY ***          R4 K3921000
CTIMOVE  MVC   PITCLASS(*-*),0(R1) **** EXECUTE ONLY ****               K3921500
CIPOSTX  EQU   X'80'               INDICATE POST NEEDED--INIT IDLE      K3922000
         SPACE 2                                                        K3922500
         DROP  WB                  DROP PIT ADDRESSABILITY              K3923000
         EJECT                                                          K3923500
*********************************************************************** K3924000
*                                                                     * K3924500
*        $P S -- STOP ( DRAIN ) SYSTEM                                * K3925000
*                                                                     * K3925500
*********************************************************************** K3926000
CP40     OI    $STATUS,$DRAINED    SET SYSTEM DRAIN FLAG                K3926500
         $CRET MSG='SYSTEM DRAINING'     TELL OPERATOR                  K3927000
         EJECT                                                          K3927500
*********************************************************************** K3928000
*                                                                     * K3928500
*        $S   -- START SYSTEM                                         * K3929000
*                                                                     * K3929500
*********************************************************************** K3930000
CS40     NI    $STATUS,255-$ALMSGSW-$DRAINED RESET DRAIN FLAGS          K3930500
         L     R1,$PCEORG          LOCATE FIRST PCE                     K3931000
CSSPOST  $POST (R1),HOLD           POST ALL PCES TO START               K3931500
         L     R1,PCENEXT-PCEDSECT(0,R1) PICK UP NEXT                   K3932000
         LTR   R1,R1               TEST FOR END                         K3932500
         BNZ   CSSPOST             IF MORE, LOOP                        K3933000
         $POST $HASPECF,(JOB,JOT)  POST JOB AND JOT                     K3933500
         B     CSIRET              POST JOB AND REPLY OK                K3934000
         EJECT                                                          K3934500
*********************************************************************** K3935000
*                                                                     * K3935500
*        $P JES2 -- STOP (WITHDRAW) JES2                              * K3936000
*                                                                     * K3936500
*********************************************************************** K3937000
         USING JQEDSECT,R1                                              K3937500
CPJES2   TM    COMAUTH,COMR+COMS   TEST FOR RESTRICTED CONSOLE @OZ27300 K3937600
         BNZ   CDIINVO             YES--CAN'T WITHDRAW JES2    @OZ27300 K3937700
         CLC   =C',ABEND',COMVERB+5  'ABEND' SPECIFIED...      @OZ27300 K3937800
         BNE   CPJNORM             BR IF NO                    @OZ27300 K3937900
PJ2     $ERROR                     ** SHUTDOWN IMMEDIATELY **  @OZ27300 K3938000
         SPACE 1                                               @OZ27300 K3938100
CPJNORM  TM    $STATUS,$SYSEXIT    SHUTDOWN IN PROGRESS...     @OZ27300 K3938500
         BO    CPJTEXIT            BR IF YES TO CONTINUE       @OZ27300 K3939000
         OI    $STATUS,$DRAINED    SET SYSTEM DRAINING FLAG             K3939500
         LH    R1,$EXCPCT          TEST OUTSTANDING I/O                 K3940000
         A     R1,$BUSYQUE         TEST WTO                             K3940500
         BNZ   CPSRET              REJECT IF WORK TO DO                 K3941000
*        WITHDRAW JES2 FROM CONTROL OF THE MACHINE                      K3941500
         CLI   $ACTIVE,0           MAKE SURE READERS ARE NOT STARTING   K3942000
         BNE   CPSRET              RETURN IF STARTING                   K3942500
         L     R1,$PCEORG          LOCATE FIRST PCE                     K3943000
CPSL     CLI   PCEID-PCEDSECT+1(R1),PCERDRID IS THIS RDR                K3943500
         BE    CPSNXT              SKIP HOLD TEST FOR RDRS              K3944000
         TM    PCEEWF-PCEDSECT(R1),$EWFHOLD IS PROCESSOR HELD           K3944500
         BO    CPSPOST             POST IT IF YES                       K3945000
CPSNXT   L     R1,PCENEXT-PCEDSECT(0,R1) POINT TO NEXT                  K3945500
         LTR   R1,R1               TEST FOR END                         K3946000
         BNZ   CPSL                LOOP                                 K3946500
         B     CPSENQ              BR TO BLOCK NEW STARTS      @OZ56448 K3947000
CPSPOST  $POST (R1),HOLD           RELEASE PROCESSOR                    K3947500
         NI    $STATUS,255-$ALMSGSW RESET MESSAGE SW                    K3948000
CPSNXTA  L     R1,PCENEXT-PCEDSECT(0,R1) POINT TO NEXT                  K3948500
         LTR   R1,R1               TEST FOR END                         K3949000
         BZ    CPSRET              EXIT IF END                          K3949500
         CLI   PCEID-PCEDSECT+1(R1),PCERDRID IS THIS RDR                K3950000
         BE    CPSNXTA             FORGET POST                          K3950500
         B     CPSPOST             POST PROCESSOR                       K3951000
         EJECT                                                 @OZ56448 K3951100
*************************************************************  @OZ56448 K3951110
*        ENQUEUE ON THE STC INTERNAL READER SO NO NEW          @OZ56448 K3951120
*        TASKS CAN BE STARTED DURING JES2 WITHDRAWAL.          @OZ56448 K3951130
*        THE RESOURCE WILL BE RELEASED ON JES2 TERMINATION.    @OZ56448 K3951140
*************************************************************  @OZ56448 K3951150
         SPACE 1                                               @OZ56448 K3951160
CPSENQ   L     R10,$SSVT           IF THIS SYSTEM IS NO        @OZ56448 K3951200
         TM    $SVSTUS-SSVT(R10),$SVSTUSP  THE PRIMARY, SKIP   @OZ56448 K3951300
         BNO   CPSOK               ...THE ENQUEUE ON STCINRDR  @OZ56448 K3951400
         ENQ   (STCQNM,STCRNM,E,,SYSTEM),RET=USE               @OZ56448 K3951500
         LTR   R15,R15             IF WE DON'T HAVE CONTROL,   @OZ56448 K3951600
         BNZ   CPSRET                 RETURN.                  @OZ56448 K3951700
CPSOK    DS    0H                                              @OZ56448 K3951800
         OI    $STATUS,$SYSEXIT    SET FOR SYSTEM EXIT                  K3952000
         LA    R1,$PCEORG-(PCENEXT-PCEDSECT) POINT TO PCE HEAD          K3952500
CPSPCEL  ICM   R1,15,PCENEXT-PCEDSECT(R1) POINT TO NEXT PCE             K3953000
         BZ    CPSPCEE             EXIT IF END                          K3953500
         CLI   PCEID-PCEDSECT+1(R1),PCERDRID IS THIS A READER           K3954000
         BNE   CPSPCEL             LOOP                                 K3954500
         LM    WA,WB,PCEPCEA-PCEDSECT(R1) PICK UP DISPATCH PTRS         K3955000
         ST    WA,PCEPCEA-PCEDSECT(,WB) REMOVE                          K3955500
         ST    WB,PCEPCEB-PCEDSECT(,WA) PCE                             K3956000
         ST    R1,PCEPCEA-PCEDSECT(,R1) QUEUE IT                        K3956500
         ST    R1,PCEPCEB-PCEDSECT(,R1) TO ITSELF                       K3957000
         MVI   PCEEWF-PCEDSECT(R1),$EWFOPER DEACTIVATE PROCESSOR        K3957500
         B     CPSPCEL             LOOP                                 K3958000
CPSPCEE  DS    0H                                                       K3958500
         $POST $HASPECF,JOB        TELL XEQ TO CLEAN UP                 K3959000
         SPACE 1                                               @OZ27300 K3959500
CPJCRET $CRET  ,                   GO BACK TO SLEEP            @OZ27300 K3960000
         SPACE 1                                               @OZ27300 K3960500
CPJTEXIT TM    $EXECPCE,X'80'      XEQ  SHUTDOWN COMPLETE...   @OZ27300 K3961000
         BZ    CPJCRET             BR IF NO TO WAIT            @OZ27300 K3961500
         TM    $CKPTPCE,X'80'      CKPT SHUTDOWN COMPLETE...   @OZ27300 K3962000
         BZ    CPJCRET             BR IF NO TO WAIT            @OZ27300 K3962500
*                                  THIS CARD DELETED BY APAR   @OZ27300 K3963000
*                                  THIS CARD DELETED BY APAR   @OZ27300 K3963500
*                                  THIS CARD DELETED BY APAR   @OZ27300 K3964000
         L     R10,$SSVT           POINT TO SSVT                        K3964500
         LA    R1,1                SET COMPLETION INDICATOR             K3965000
         ST    R1,$SVHASP-SSVT(,R10) SIGNAL THAT HASP IS GOING DOWN     K3965500
         L     R15,CPSEXIT         POINT TO EXIT ROUTINE                K3966000
         BR    R15                 ENTER IT                             K3966500
CPSRET   $CRET MSG='JES2 NOT DORMANT -- SYSTEM NOW DRAINING'            K3967000
         DROP  R1                                                       K3967500
         SPACE 1                                               @OZ56448 K3967600
STCQNM   DC    C'SYSIEFSD'         MAJOR NAME                  @OZ56448 K3967700
STCRNM   DC    C'STCQUE'           MINOR NAME                  @OZ56448 K3967800
         EJECT                                                          K3968000
*********************************************************************** K3968500
*                                                                     * K3969000
*        $VS COMMAND-- SEND VS2 COMMANDS TO VS2                       * K3969500
*        COMMUNICATIONS TASK VIA SVC34                                * K3970000
*                                                                     * K3970500
*********************************************************************** K3971000
CVS      DS    0H                  ENTRY TO $VS COMMAND                 K3971500
         BXH   WD,WE,CDIINVO       CHECK FOR OPERANDS                   K3972000
         $CWTO TRUNC=YES           TRUNCATE MLWTO FOR SVC 34            K3972500
CVSLOOP  L     R15,0(,WD)          POINT TO 1ST OPERAND                 K3973000
         L     R1,4(,WD)           POINT TO END OF 1ST OPERAND          K3973500
         CLI   0(R15),C''''        CHECK FOR CORRECT FORMAT             K3974000
         BNE   CDIINVO             IF NOT ERROR                         K3974500
         SH    R1,=H'2'            LOOK AT END FOR QUOTE ALSO           K3975000
         CLI   0(R1),C''''         MUST BE SURROUNDED BY QUOTES         K3975500
         BNE   CDIINVO             IF NOT -- ERROR                      K3976000
         SLR   R1,R15              COMPUTE SIZE OF VS2 CMND             K3976500
         SH    R1,=H'2'            LESS TWO FOR MACHINE                 K3977000
         BM    CDIINVO             IF NEGATIVE -- ERROR                 K3977500
         EX    R1,CVSCMND          MOVE GOOD CMND TO BEGINNING OF       K3978000
         LA    R0,1(,R1)           AREA, AND GET TRUE LENGTH            K3978500
*********************************************************************** K3978600
*                                                                     * K3978700
*        MAKE SURE COMMAND IS NOT ALL BLANKS                          * K3978800
*                                                                     * K3978900
*********************************************************************** K3979000
         LR    R1,R0               GET TRUE COMMAND LENGTH          R41 K3979100
CVSBLKCK CLI   1(R15),C' '         IS CHARACTER A BLANK             R41 K3979200
         BNE   CVSSVC34            IF NOT, GO TO ISSUE SVC 34       R41 K3979300
         LA    R15,1(,R15)         POINT TO NEXT CHARACTER          R41 K3979400
         BCT   R1,CVSBLKCK         LOOP BACK IF MORE CHARACTERS     R41 K3979500
         B     CDIINVO             ELSE ALL BLANKS -- ERROR         R41 K3979600
         SPACE 2                                                    R41 K3979700
CVSSVC34 DS    0H                  SEND COMMAND TO VS2              R41 K3979800
         $CWTO L=(R0)              SVC 34 THE COMMAND                   K3979900
         BXLE  WD,WE,CVSLOOP       AND LOOP THROUGH ALL CMNDS           K3980000
         B     CDIRET              RETURN AFTER ALL CMNDS               K3980100
CVSCMND  MVC   COMMAND(*-*),1(R15) **** EXECUTE ONLY ****               K3980500
         EJECT                                                          K3981000
*********************************************************************** K3981500
*                                                                     * K3982000
*        $ESYS,SID -- WARM START A SYSTEM THAT IS NOT ACTIVE          * K3982500
*        OPERAND IS A VALID SID WHOSE NAME IS IN THE QSE TABLE        * K3983000
*        ONLY ONE SYSTEM IS WARM-STARTABLE AT A TIME                  * K3983500
*                                                                     * K3984000
*        $ESYS,RESET=SID -- CAUSE THE CHECKPOINT PROCESSOR TO  @OZ27300 K3984100
*        GET THE DASD RESIDENT CHECKPOINT LOCK, BEING HELD BY  @OZ27300 K3984200
*        SPECIFIED SYSTEM. THIS FORM OF THE COMMAND WILL BE    @OZ27300 K3984300
*        IGNORED BY THE CHECKPOINT PROCESSOR UNLESS A MESSAGE  @OZ27300 K3984400
*        (HASP264) HAS INFORMED THE OPERATOR THAT THE SYSTEM   @OZ27300 K3984500
*        HAS BEEN UNABLE TO GET THE LOCK NORMALLY.             @OZ27300 K3984600
*                                                              @OZ27300 K3984700
***************************************************************@OZ27300 K3984800
         SPACE 2                                                        K3985000
CES      DS    0H                  RESTART SYSTEM                       K3985500
         CLC   COMVERB(4),=C'ESYS'  TEST FOR PROPER COMMAND FORMAT      K3986000
         BE    CESYSOK             YES--CONTINUE                        K3986500
         $CFINVC ,                 ELSE FLAG AS INVALID COMMAND         K3987000
CESYSOK  DS    0H                  CONTINUE $ESYS COMMAND               K3987500
*                                  THIS CARD DELETED BY APAR   @OZ27300 K3988000
*                                  THIS CARD DELETED BY APAR   @OZ27300 K3988500
*                                  THIS CARD DELETED BY APAR   @OZ27300 K3989000
         BXH   WD,WE,CDIINVO       FETCH NEXT OPERAND                   K3989500
         LM    R1,WA,0(WD)         PICK-UP OPERAND POINTERS             K3990000
         CLC   =C'RESET=',0(R1)    TEST FOR RESET= KEYWORD     @OZ27300 K3990100
         BNE   CESYSNRS            BRANCH IF NOT               @OZ27300 K3990200
         LA    R1,6(,R1)            ELSE POINT TO RESET SID    @OZ27300 K3990300
         CLC   =C'INITI',0(R1)     'INITIALIZATION' KEYWORD... @OZ27300 K3990320
         BNE   CESYSNRS            BR IF NO                    @OZ27300 K3990340
         L     R14,$CKPTPCE         ELSE SET SPECIAL SYS-ID    @OZ27300 K3990360
         MVI   CKPRLSID-PCEDSECT(R14),X'80'  FOR HASPCKPT      @OZ27300 K3990380
         B     CESYSOKM            BR TO EXIT                  @OZ27300 K3990400
CESYSNRS SLR   WA,R1               COMPUTE OPERAND             @OZ27300 K3990500
         BCTR  WA,0                LENGTH                               K3991000
         CH    WA,=H'4'            TEST LENGTH                          K3991500
         BNE   CDIINVO             NOT CORRECT--ERROR                   K3992000
*                                  THIS CARD DELETED BY APAR   @OZ27300 K3992500
         L     WA,$QSE1            POINT TO 1ST QSE                  R4 K3993000
*                                    THIS CARD DELETED BY APAR @OZ27300 K3993500
         USING QSEDSECT,WA         QSE ADDRESSABILITY                   K3994000
*                                    THIS CARD DELETED BY APAR @OZ27300 K3994500
CESLOOP  CLC   QSESID,0(R1)        TEST FOR MATCH WITH OPERAND @OZ27300 K3995000
         BE    CESYSFND            YES--RESTART IT                      K3995500
         TM    QSEFLAGS,QSELAST    TEST FOR LAST ELEMENT                K3996000
         LA    WA,QSELEN(,WA)      BUMP TO NEXT QSE            @OZ27300 K3996100
         BZ    CESLOOP             NOT LAST -- LOOP                     K3996500
         B     CDIINVO             LAST -- ERROR                        K3997000
CESYSFND DS    0H                  SYSTEM ID FOUND                      K3997500
         CL    R1,0(WD)            WAS RESET= KEYWORD FOUND    @OZ27300 K3997600
         BE    CESYSQS             BR IF NO, NORMAL $ESYS      @OZ27300 K3997700
         L     R14,$CKPTPCE         ELSE, PICK UP CKPT PCE     @OZ27300 K3997800
         MVC   CKPRLSID-PCEDSECT(,R14),QSESIBSY  SET SYSTEM ID @OZ27300 K3997900
         B     CESYSOKM                           AND EXIT     @OZ27300 K3998000
CESYSQS $QSUSE ,                   ENQUEUE ON SHARED RESOURCES @OZ27300 K3998100
         L     WB,$ESYSQSE         POINT TO QSE WARM START PTR @OZ27300 K3998200
         LTR   WB,WB               TEST FOR ACTIVE             @OZ27300 K3998300
         BNZ   CESYSERR            IF ACTIVE--EXIT WITH MSG    @OZ27300 K3998400
         STCK  COMDWORK            STORE TOD CLOCK VALUE       @OZ27300 K3998500
         L     WC,QSESITIM         PICK-UP LAST CKPT TIME      @OZ27300 K3998600
         L     WD,$SYNCTOL         PICK-UP SYNC TIME VALUE           R4 K3999000
         ALR   WC,WD               COMPUTE CURRENT TIME VALUE           K3999500
         CL    WC,COMDWORK         TEST FOR PROCESSOR ACTIVE            K4000000
         BNL   CESYSACT            YES--PROCESSOR STILL ACTIVE          K4000500
         ST    WA,$ESYSQSE         SET QSE TO BE WARM STARTED           K4001000
         NI    QSESTAT,FF-QSERSTID INDICATE $ESYS              @OZ35996 K4001500
         OC    QSESTAT,$SIDBUSY     IN PROGRESS                @OZ35996 K4001600
         OI    QSESTAT,QSEACTIV      ON THIS SYSTEM            @OZ35996 K4001700
         L     R15,$WARMPCE        POINT TO WARM START PCE           R4 K4002000
         $POST (R15),WORK          POST FOR WORK                        K4002500
         SPACE 1                                                        K4003000
CESYSOKM $CRET MSG=OK              AND EXIT WITH 'OK'          @OZ27300 K4003500
         EJECT                                                 @OZ35996 K4004000
*        MESSAGE THAT WARM START TASK IS BUSY                           K4004500
         SPACE 1                                                        K4005000
CESYSERR DS    0H                  WARM START PCE IS BUSY               K4005500
         MVC   COMMAND(CESYSLN1),CESYSMS1  SET MESSAGE HEADER           K4006000
         L     WA,$QSE1            POINT TO 1ST QSE                  R4 K4006500
*                                    THIS CARD DELETED BY APAR @OZ27300 K4007000
*                                    THIS CARD DELETED BY APAR @OZ27300 K4007500
CESYSERL CLR   WB,WA               SID BEING WARM STARTED      @OZ27300 K4008000
         BE    CESYSERF            FOUND SID BEING WARM-STARTED         K4008500
         TM    QSEFLAGS,QSELAST    TEST FOR LAST                        K4009000
         LA    WA,QSELEN(,WA)      BUMP TO NEXT QSE            @OZ27300 K4009100
         BZ    CESYSERL            IF NOT LAST LOOP                     K4009500
         LA    R0,CESYSLN1-1       SET MSG LENGTH FOR SID NOT FOUND     K4010000
         B     CESYSWTO            AND EXIT WITH DIAGNOSTIC             K4010500
CESYSERF DS    0H                  SID BEING WARM/STARTED WAS FOUND     K4011000
         MVC   COMMAND+CESYSLN1(L'QSESID),QSESID SET SID NAME           K4011500
         LA    R0,CESYSLN1+L'QSESID  SET MESSAGE LENGTH                 K4012000
CESYSWTO DS    0H                  SEND MESSAGE                         K4012500
         $CRET L=(R0)              EXIT WITH DIAGNOSTIC                 K4013000
         SPACE 2                                                        K4013500
*        MESSAGE THAT CURRENT SID IS ACTIVE                             K4014000
         SPACE 1                                                        K4014500
CESYSACT DS    0H                  SID IS ACTIVE                        K4015000
         MVC   COMMAND(L'QSESID),QSESID  SET SID NAME                   K4015500
         TM    QSESTAT,QSERSTID    $ESYS IN PROGRESS...        @OZ35996 K4015600
         BZ    CESYSN$E            BR IF NO                    @OZ35996 K4015700
         LR    WB,WA               RELOAD QSE ADDRESS          @OZ35996 K4015800
         BAL   WE,CLSYSRST         ISSUE 'RESTARTING' REPLY    @OZ35996 K4015900
        $CRET  ,                   EXIT                        @OZ35996 K4016000
         SPACE 1                                               @OZ35996 K4016100
CESYSN$E MVC   COMMAND+L'QSESID(CESYSLN2),CESYSMS2  SET TEXT   @OZ35996 K4016200
         LA    R0,L'QSESID+CESYSLN2  SET DIAGNOSTIC LENGTH              K4016500
         B     CESYSWTO            AND EXIT WITH MESSAGE                K4017000
         SPACE 1                                                        K4017500
CESYSMS1 DC    C'TASK BUSY RE-STARTING '  WARMSTART ACTIVE MSG @OZ27300 K4018000
CESYSLN1 EQU   *-CESYSMS1          LENGTH OF DIAGNOSTIC                 K4018500
         SPACE 1                                                        K4019000
CESYSMS2 DC    C' IS ACTIVE AND CANNOT BE RE-STARTED'                   K4019500
CESYSLN2 EQU   *-CESYSMS2          LENGTH OF DIAGNOSTIC                 K4020000
         SPACE 1                                                        K4020500
         DROP  WA                  DROP QSE ADDRESSABILITY              K4021000
         EJECT                                                          K4021500
*********************************************************************** K4022000
*                                                                     * K4022500
*        $LSYS -- LIST STATUS OF SYSTEMS IN MULTI-SYSTEM NODE         * K4023000
*        NO OPERANDS ARE REQUIRED                                     * K4023500
*                                                                     * K4024000
*********************************************************************** K4024500
         SPACE 1                                                     R4 K4025000
CLSYS    DS    0H                  ENTER LIST SYSTEM STATUS             K4025500
         TM    COMAUTH,COMR+COMS   TEST FOR RESTRICTED CONSOLE       R4 K4026000
         BNZ   CDIINVO             YES--INVALID AUTH FOR THIS CMND      K4026500
         L     WB,$QSE1            POINT TO 1ST QSE                  R4 K4027000
         B     CLSYSMVC            ENTER COMMON DISPLAY ROUTINE      R4 K4027500
         USING QSEDSECT,WB         QSE ADDRESSABILITY                   K4028000
CLSYSLP  TM    QSEFLAGS,QSELAST    TEST FOR LAST ELEMENT                K4028500
         BZ    CLSYSQSE            NOT LAST -- ENTER DISPLAY ROUTINE    K4029000
         $CRET ,                   ELSE EXIT                            K4029500
         SPACE 2                                                        K4030000
CLSYSQSE LA    WB,QSELEN(,WB)      POINT TO NEXT QSE           @OZ27300 K4030500
CLSYSMVC MVC   COMMAND(L'QSESID),QSESID  SET SID NAME IN MESSAGE     R4 K4031000
*                                  THIS LINE DELETED BY APAR   @OZ35996 K4031500
*                                  THIS LINE DELETED BY APAR   @OZ35996 K4032000
*                                  THIS LINE DELETED BY APAR   @OZ35996 K4032200
*                                  THIS LINE DELETED BY APAR   @OZ35996 K4032400
         TM    QSESTAT,QSEACTIV    TEST FOR ACTIVE SYSTEM            R4 K4032500
         BZ    CLSYSDWN            BR IF NO                          R4 K4033000
         STCK  COMDWORK            SAVE TOD CLOCK VALUE                 K4033500
         L     WC,QSESITIM         PICK-UP LAST CKPT TIME               K4034000
         L     WA,$SYNCTOL         PICK-UP SYNC TIME VALUE           R4 K4034500
         ALR   WC,WA               COMPUTE CURRENT TIME                 K4035000
         CL    WC,COMDWORK         COMPARE FOR STATUS                   K4035500
         BH    CLSYSACT            IF NOT LOW OR EQUAL --ACTIVE         K4036000
         MVC   COMMAND+L'QSESID(8),=C' DORMANT'  SHOW MAYBE DOWN     R4 K4036500
         LA    R0,L'QSESID+8       SET MESSAGE LENGTH                R4 K4037000
         B     CLSYSWTO            AND SEND IT                       R4 K4037500
CLSYSDWN DS    0H                  SYSTEM DEFINTELY NOT UP           R4 K4038000
         MVC   COMMAND+L'QSESID(9),=C' INACTIVE' SET REST OF MESSAGE    K4038500
         LA    R0,L'QSESID+9       SET MESSAGE LENGTH                   K4039000
CLSYSWTO DS    0H                  SEND MESSAGE OF STATUS               K4039500
         $CWTO L=(R0)              SEND IT                              K4040000
         B     CLSYSLP             AND LOOP FOR MORE                    K4040500
         EJECT                                                 @OZ35996 K4041000
CLSYSRST MVC   COMMAND+L'QSESID(16),=C' RE-STARTING ON ' MSG   @OZ35996 K4041500
         IC    WA,QSESTAT          GET ADDRESS                 @OZ35996 K4042000
         N     WA,=A(QSERSTID)      OF QSE                     @OZ35996 K4042500
         BCTR  WA,0                  OF SYSTEM                 @OZ35996 K4043000
         MH    WA,=Y(QSELEN)          PERFORMING               @OZ35996 K4043500
         AL    WA,$QSE1                $ESYS                   @OZ35996 K4044000
         MVC  COMMAND+L'QSESID+16(L'QSESID),QSESID-QSEDSECT(WA) OZ35996 K4044100
         LA    R0,2*L'QSESID+16    SET MESSAGE LENGTH          @OZ35996 K4044200
        $CWTO  L=(R0)              ISSUE REPLY                 @OZ35996 K4044300
         BR    WE                  RETURN                      @OZ35996 K4044400
         SPACE 1                                               @OZ35996 K4044500
CLSYSACT TM    QSESTAT,QSERSTID    $ESYS IN PROGRESS...        @OZ35996 K4044600
         BZ    CLSYSNRS            BR IF NO                    @OZ35996 K4044700
         BAL   WE,CLSYSRST         ISSUE 'RESTARTING' REPLY    @OZ35996 K4044800
         B     CLSYSLP             BR TO CONTINUE              @OZ35996 K4044900
         SPACE 1                                               @OZ35996 K4045000
CLSYSNRS MVC   COMMAND+L'QSESID(7),=C' ACTIVE'  SET MSG TEXT   @OZ35996 K4045100
         LA    R0,L'QSESID+7       SET MESSAGE LENGTH          @OZ35996 K4045500
         CLC   QSESID,$SID         TEST FOR SAME SYSTEM                 K4046000
         BNE   CLSYSWTO            NO--CAN'T TELL ABOUT IND MODE        K4046500
         TM    $STATUS,$INDMODE    TEST FOR IND MODE                    K4047000
         BZ    CLSYSWTO            NO--SEND MESSAGE AS IS               K4047500
         MVC   COMMAND+L'QSESID+7(17),=C' INDEPENDENT MODE' SET  MSG    K4048000
         LA    R0,L'QSESID+24      SET MESSAGE LENGTH                   K4048500
         B     CLSYSWTO            AND RESPOND TO OPERATOR              K4049000
         DROP  WB                  DROP QSE ADDRESSABILITY              K4049500
         EJECT                                                          K4050000
*********************************************************************** K4050500
*                                                                     * K4051000
*        $TALL,SID1,+ - OR NULL SID2,SID3,...SIDN                     * K4051500
*        SID1  = SID THAT CURRENTLY HAS JOB(S) AFFINITY               * K4052000
*        SID2  = SID'S TO WHICH JOB(S) ARE TO BE RE-ROUTED            * K4052500
*        + OR - MEANS THAT SID2...SIDN WILL BE ADDED OR SUBTRACTED    * K4053000
*        THE WORD 'ANY' MAY BE USE TO SET A SYSTEM AFF TO 'ANY'       * K4053500
*        THE WORD 'IND' WHEN USED MEANS INDEPENDENT MODE              * K4054000
*        AND INDICATES THAT JOBS ARE TO BE PLACED IN THAT SELECTION   * K4054500
*        MODE                                                         * K4055000
*                                                                     * K4055500
*********************************************************************** K4056000
         SPACE 2                                                        K4056500
CTALL    DS    0H                                                       K4057000
         TM    COMAUTH,COMR+COMS   TEST FOR RESTRICTED CONSOLE       R4 K4057500
         BZ    CTALLAOK            NO -- AUTHORITY IS 'OK'              K4058000
         $CFINVC ,                 AUTHORITY IS INVALID FOR COMMAND     K4058500
CTALLAOK DS    0H                                                       K4059000
         BXH   WD,WE,CDIINVO       SKIP TO NEXT OPERAND                 K4059500
        $QSUSE                     REQUEST ACCESS TO CHECKPOINT DATA R4 K4060000
         LM    R1,WA,0(WD)         PICK-UP OPERAND POINTERS             K4060500
         SLR   WB,WB               ZERO INSERT REGISTER                 K4061000
         CLC   0(3,R1),=C'IND'     TEST FOR 'IND' JOBS                  K4061500
         BNE   CTALLNIN            NO--TRY SPECIFIC SID                 K4062000
         IC    WB,=AL1(QUEINDAF)   PICK-UP IND BIT                      K4062500
         B     CTALLFDA            AND TRY FOR NEXT OPERAND             K4063000
CTALLNIN DS    0H                  NOT REQUEST FOR 'IND' JOBS           K4063500
         SLR   WA,R1               COMPUTE                              K4064000
         BCTR  WA,0                OPERAND LENGTH                       K4064500
         CH    WA,=H'4'            CHECK FOR PROPER LENGTH              K4065000
         BNE   CDIINVO             NO--ERROR                            K4065500
         LA    R15,CTALLFD1        POINT TO FOUND ROUTINE               K4066000
CTALSCAN DS    0H                  SCAN QSE(S) FOR OPERAND              K4066500
         L     WA,$QSE1            POINT TO 1ST QSE                  R4 K4067000
*                                    THIS CARD DELETED BY APAR @OZ27300 K4067500
         USING QSEDSECT,WA         QSE ADDRESSABILITY                   K4068000
*                                    THIS CARD DELETED BY APAR @OZ27300 K4068500
CTALLP1  CLC   QSESID,0(R1)        CHECK FOR MATCH             @OZ27300 K4069000
         BER   R15                 ENTER APPROPRIATE RTN                K4069500
         TM    QSEFLAGS,QSELAST    TEST FOR LAST ONE                    K4070000
         LA    WA,QSELEN(,WA)      BUMP TO NEXT QSE            @OZ27300 K4070100
         BZ    CTALLP1             NO LAST -- LOOP                      K4070500
         B     CDIINVO             NOT FOUND--ERROR                     K4071000
CTALLFD1 DS    0H                  FOUND OPERAND ONE                    K4071500
         IC    WB,QSESIAFF         SET AFFINITY FOR 'EX'                K4072000
CTALLFDA DS    0H                  TRY FOR NEXT OPERAND                 K4072500
         BXH   WD,WE,CDIINVO       GET NEXT OPERAND OR ERROR            K4073000
         L     R1,0(,WD)           POINT TO OPERAND                     K4073500
         MVI   CTALLAFF,0          SET NO AFFINITY                      K4074000
         LPR   R10,WE              ASSUME ADDITION                      K4074500
         CLI   0(R1),C'+'          CHECK FOR ADDITION                   K4075000
         BE    CTALCHG             YES -- GO DO IT                      K4075500
         LNR   R10,R10             ASSUME DELETION OF AFFINITIES        K4076000
         CLI   0(R1),C'-'          TEST FOR SAME                        K4076500
         BE    CTALCHG             YES -- GO DO IT                      K4077000
         SLR   R10,R10             SET NO ADDITION OR SUBTRACTION       K4077500
         BCTR  R1,0                PT BEFOR NO-EXISTANT '+' OR '-'      K4078000
CTALCHG  DS    0H                  CONTINUE OPERAND SCAN                K4078500
         LA    R1,1(,R1)           POINT PAST POSSIBLE '+' OR '-'       K4079000
         SPACE 1                                                        K4079500
*        OTHER THAN FIRST OPERAND FOUND                                 K4080000
CTALLOOP CLC   0(3,R1),=C'ANY'     TEST FOR ANY AFFINITY                K4080500
         BNE   CTALNANY            NO--TEST FOR IND MODE OPERATION      K4081000
         SLR   R10,R10             INDICATE NO ADD OR DELETION          K4081500
         OI    CTALLAFF,QUESYSAF   FLAG AFFINITY OF 'ANY'               K4082000
         B     CTALLFD3            AND LOOK FOR MORE OPERANDS           K4082500
CTALNANY DS    0H                  NOT 'ANY' AFFINITY                   K4083000
         CLC   0(3,R1),=C'IND'     CHECK FOR 'IND' MODE                 K4083500
         BNE   CTALCHG1            NO -- TRY FOR SPECIFIC AFF           K4084000
         OI    CTALLAFF,QUEINDAF   YES -- SET 'IND' MODE                K4084500
         B     CTALLFD3            AND LOOK FOR MORE OPERANDS           K4085000
CTALCHG1 DS    0H                  LOOK FOR SPECIFIC SID NAME           K4085500
         LA    R15,CTALLFD2        SET TARGET ADDRESS                   K4086000
         B     CTALSCAN            AND GO SCAN QSE(S)                   K4086500
         SPACE 1                                                        K4087000
CTALLFD2 DS    0H                  FOUND SPECIFIC AFFINITY              K4087500
         OC    CTALLAFF,QSESIAFF   SET AFFINITY INTO SAVE AREA          K4088000
CTALLFD3 DS    0H                  SEARCH FOR MORE OPERANDS             K4088500
         BXLE  WD,WE,CTALLMOR      LOOK FOR NEXT OPERAND                K4089000
         TM    CTALLAFF,QUEINDAF   TEST FOR 'IND' MODE                  K4089500
         BZ    CTALLEND            NO--EXIT OPERAND SCAN                K4090000
         TM    CTALLAFF,255-QUEINDAF TEST FOR OTHER AFFINITIES          K4090500
         BNZ   CTALLEND            YES--EXIT OPERAND SCAN               K4091000
         LTR   R10,R10             TEST FOR ADDITION OR DELETION        K4091500
         BNZ   CTALLEND            YES--EXIT OPERAND SCAN               K4092000
         SLR   WD,WE               NO--ERROR                            K4092500
         B     CDIINVO             POINT TO OPERAND AND EXIT            K4093000
         SPACE 1                                                        K4093500
CTALLMOR DS    0H                  MORE OPERANDS                        K4094000
         L     R1,0(,WD)           POINT TO NEXT OPERAND                K4094500
         B     CTALLOOP            AND ENTER MAJOR SCAN LOOP            K4095000
         SPACE 2                                                        K4095500
*        SEARCH JOB QUEUE FOR JOB(S) WITH FIRST SID'S AFFINITY          K4096000
         SPACE 1                                                        K4096500
CTALLEND DS    0H                  END OF OPERANDS                      K4097000
         SLR   WA,WA               SET NO JOBS ALTERED                  K4097500
         USING JQEDSECT,R1         JQE ADDRESSABILITY                   K4098000
         $CFJSCAN PROCESS=CTALPRO,NEXT=CTALNXT,EMPTY=CTALNONE,         CK4098500
               IGNORE=CTALIGN      SCAN THE JOB QUEUE                   K4099000
         LTR   WA,WA               TEST FOR ANY JOB(S) RE-ROUTED        K4099500
         BNZ   CTALRET             YES -- SKIP DIAGNOSTIC               K4100000
         $CRET MSG='NO JOB(S) RE-ROUTED'                                K4100500
         SPACE 1                                                        K4101000
CTALRET  DS    0H                  RETURN                               K4101500
         $POST $HASPECF,(JOB)      POST FOR WORK                        K4102000
         OI    $AQSE,QSEPJOB       CAUSE X SYSTEM POST(S)               K4102500
         $CRET MSG=OK              AND RETURN 'OK'                      K4103000
CTALNONE DS    0H                  COME HERE WHEN NO JOB(S) FND         K4103500
         $CRET MSG='NO JOB(S) FOUND'                                    K4104000
         SPACE 2                                                        K4104500
*        LOOK AT EACH JOB TO SEE IF AFFINITY TO SID                     K4105000
         SPACE 1                                                        K4105500
CTALPRO  DS    0H                  PROCESS AJOB                         K4106000
         CLC   JQEJOBNO,=H'10000'  TEST FOR NORMAL BATCH JOB            K4106500
         BL    CTALLTST            IF YES -- BRANCH                     K4107000
         TM    JQETYPE,$XEQ        TEST FOR STC OR TSU IN XEQ OR CVT    K4107500
         BO    CTALNXT             YES -- GET NEXT JOB                  K4108000
         CLI   JQETYPE,$INPUT      TEST FOR STC OR TSU IN INPUT RDR     K4108500
         BE    CTALNXT             YES--GET NEXT JOB                    K4109000
CTALLTST DS    0H                  TEST JOB FOR AFFINITY                K4111500
         EX    WB,CTALTEST         TEST FOR AFFINITY OWNERSHIP          K4112000
         BZ    CTALNXT             NO--GET NEXT JOB                     K4112500
         LTR   R10,R10             TEST FOR TYPE OF CHANGE              K4113000
         BM    CTALLESS            IF DELETION GO DO IT                 K4113500
         BP    CTALMORE            IF ADDITION GO DO IT                 K4114000
         NI    JQEFLAG2,QUEINDAF   TURN OFF OLD AFFINITIES          R41 K4114500
CTALMORE DS    0H                  ADD NEW AFFINITIES                   K4115000
         OC    JQEFLAG2,CTALLAFF   ADD AFFINITIES                       K4115500
         B     CTALCKPT            AND CHECK-POINT ELEMENT              K4116000
CTALLESS DS    0H                  DELETE SELECTED AFFINITIES           K4116500
         LA    R15,255             SET REGSITER TO ALL BITS 'ON'        K4117000
         SLR   R0,R0               ZERO INSERT REGISTER                 K4117500
         IC    R0,CTALLAFF         PICK-UP AFFINITIES TO DELETE         K4118000
         SLR   R15,R0              COMPUTE BITS TO BE LEFT 'ON'         K4118500
         EX    R15,CTALAFOF        DELETE SELECTED AFFINITIES           K4119000
         L     R14,$QSE1           POINT TO 1ST QSE                  R4 K4119500
*                                    THIS CARD DELETED BY APAR @OZ27300 K4120000
         USING QSEDSECT,R14        QSE ADDRESSABILITY                   K4120500
*                                    THIS CARD DELETED BY APAR @OZ27300 K4121000
CTALAFLP IC    R15,QSESIAFF        PICK UP AFFINITIY BITS      @OZ27300 K4121500
         EX    R15,CTALTEST        TEST FOR IMPOSSIBLE AFFINITY         K4122000
         BO    CTALCKPT            NO -- GO CHECK POINT ELEMENT         K4122500
         TM    QSEFLAGS,QSELAST    TEST FOR LAST ELEMENT                K4123000
         LA    R14,QSELEN(,R14)    BUMP TO NEXT QSE            @OZ27300 K4123100
         BZ    CTALAFLP            LOOP FOR TEST OF AFFINITIES          K4123500
         OC    JQEFLAG2,CTALLAFF   RESET ORIGINAL AFFINITY              K4124000
         B     CTALNXT             AND GET NEXT JOB                     K4124500
         DROP  R14                 DROP QSE ADDRESSABILITY              K4125000
         SPACE 1                                                        K4125500
CTALCKPT DS    0H                  CHECK-POINT MODIFIED JQE             K4126000
         LR    WA,WE               FLAG A MODIFICATION HAS BEEN MADE    K4126500
         $QCKPT (R1)               CKPT MODIFIED JQE                    K4127000
         B     CTALNXT             AND GET ANOTHER JOB                  K4127500
         SPACE 2                                                        K4128000
CTALTEST TM    JQEFLAG2,*-*        **** EXECUTE ONLY ****               K4128500
CTALLOFF XI    JQEFLAG2,*-*        **** EXECUTE ONLY ****               K4129000
CTALAFOF NI    JQEFLAG2,*-*        **** EXECUTE ONLY ****               K4129500
         SPACE 2                                                        K4130000
*        $TALL EQUATES                                                  K4130500
         SPACE 1                                                        K4131000
CTALLAFF EQU   COMEWORK,1          AFFINITY SAVE AREA                   K4131500
         SPACE 2                                                        K4132000
         EJECT                                                          K4132500
*********************************************************************** K4133000
*                                                                     * K4133500
*        $TSYS,IND=Y/N -- SET SYSTEM IN INDEPENDENT MODE              * K4134000
*        OPERAND(S) -- IND=YES/NO -- SET/RESET INDEPENDENT MODE       * K4134500
*                                                                     * K4135000
*********************************************************************** K4135500
         SPACE 2                                                        K4136000
CTSYS    DS    0H                  SET/RESET SYS TO INDEPENDENT MODE    K4136500
         TM    COMAUTH,COMR+COMS   TEST FOR RESTRICTED CONSOLE       R4 K4137000
         BZ    CTSYSAOK            BRANCH IF AUTHORITY IS 'OK'          K4137500
         $CFINVC ,                 ELSE COMMAND IS INVALID              K4138000
         SPACE 1                                                        K4138500
CTSYSAOK DS    0H                  AUHTORITY IS 'OK'                    K4139000
         BXH   WD,WE,CDIINVO       CHECK FOR PRESENCE OF OPERAND        K4139500
         L     R1,0(,WD)           POINT TO OPERAND                     K4140000
         CLC   0(4,R1),=C'IND='    CHECK FOR PROPER FORMAT              K4140500
         BNE   CDIINVO             NO -- ERROR                          K4141000
         CLI   4(R1),C'Y'          IS DESIRE TO ENTER IND MODE          K4142000
         BE    CTSYINDY            YES -- GO DO IT                      K4142500
         NI    $STATUS,255-$INDMODE RESET INDEPENDENT MODE SELECTION    K4143500
         MVC   COMMAND+L'$SID(CTSYSLN1),CTSYMSG1 SET MESSAGE            K4144000
         LA    R0,CTSYSLN1+L'$SID  SET MESSAGE LENGTH                   K4144500
         B     CTSYEXIT            AND EXIT COMMAND                     K4145000
CTSYINDY DS    0H                  ENTER INDEPENDENT MODE               K4145500
         OI    $STATUS,$INDMODE    SET INDEPENDENT MODE                 K4146500
         MVC   COMMAND+L'$SID(CTSYSLN2),CTSYMSG2 SET MESSAGE            K4147000
         LA    R0,CTSYSLN2+L'$SID  SET MESSAGE LENGTH                   K4147500
CTSYEXIT DS    0H                  EXIT COMMAND                         K4148000
         $POST $HASPECF,JOB        POST THIS PROCESSOR FOR JOB          K4148500
         MVC   COMMAND(L'$SID),$SID SET SYSTEM NAME IN MESSAGE          K4149000
         $CRET L=(R0)              EXIT WITH MESSAGE                    K4149500
         SPACE 2                                                        K4150000
CTSYMSG1 DC    C' IS NO LONGER IN INDEPENDENT MODE' MESSAGE             K4150500
CTSYSLN1 EQU   *-CTSYMSG1          LENGTH OF MESSAGE                    K4151000
CTSYMSG2 DC    C' IS NOW IN INDEPENDENT MODE' MESSAGE                   K4151500
CTSYSLN2 EQU   *-CTSYMSG2          LENGTH OF MESSAGE                    K4152000
         LTORG ,                                                        K4152500
         TITLE 'HASP COMMAND PROCESSOR HASPCSY3 - CONSOLE COMMANDS'     K4153000
HASPCSY3 $COMGRUP  TC,TM,TO        CONSOLE COMMAND GROUP                K4153500
*********************************************************************** K4154000
*                                                                     * K4154500
*        $T CON,LEVEL,LIST - SET LIST LEVEL OF LOGICAL CONSOLES       * K4155000
*                                                                     * K4155500
*        LEVEL = MESSAGE LEVEL (ONLY LEVELS ABOVE THIS DISPLAY)       * K4156000
*        LIST  = MAIN/TAPE/TP/UR/ERROR/LOG (LOGICAL ROUTINGS)         * K4156500
*                                                                     * K4157000
*********************************************************************** K4157500
CTC      DS    0H                                                       K4158000
         BXH   WD,WE,CTOINVO       LOCATE SECOND OPERAND POINTER        K4158500
         L     R1,0(0,WD)          POINT TO OPERAND                     K4159000
         LA    WC,CTOINVO          POINT TO ERROR EXIT ROUTINE          K4159500
         $CFCVB POINTER=(WD),NOK=CTOINVO CONVERT TO BINARY              K4160000
         CH    R0,=H'15'           CHECK FOR MAX LEVEL EXCEEDED         K4160500
         BCR   H,WC                INVALID OPERAND IF SO                K4161000
         BXH   WD,WE,CTOINVO       LOCATE OPERAND                       K4161500
         SLR   R14,R14             ZERO ACCUMULATOR                  R4 K4162000
CTXCLOP  L     R1,0(0,WD)          POINT TO OPERAND                     K4162500
         LA    R15,CTXTAB          POINT TO LOGICAL CONSOLE TABLE       K4163000
         LA    WA,CTXTABCT         SET NUMBER OF ENTRIES                K4163500
CTXCLOOP CLC   0(2,R15),0(R1)      COMPARE TABLE ENTRY AGAINST TEXT  R4 K4164000
         BE    CTXCFND             IF MATCH, EXIT                       K4164500
         LA    R15,CTXTESIZ(0,R15) POINT TO NEXT ENTRY                  K4165000
         BCT   WA,CTXCLOOP         LOOP UNTIL END                       K4165500
         BR    WC                  ERROR EXIT                           K4166000
CTXCFND  O     R14,0(,R15)         ACCUMULATE ROUTINGS               R4 K4166500
         BXLE  WD,WE,CTXCLOP       LOOP IF MORE OPERANDS             R4 K4167000
         L     R15,$CSAREA         POINT TO CONSOLE SERVICE AREA     R4 K4167500
         LA    R15,CSALEVEL+7*2-CSADSECT(,R15) POINT TO HIGHEST LEVELR4 K4168000
         LA    WC,7                SET HIGHEST LEVEL NUMBER          R4 K4168500
CTXSLOP  LH    R1,0(,R15)          PICK UP OLD ROUTINGS              R4 K4169000
         OR    R1,R14              TURN ON ROUTE CODE                R4 K4169500
         CR    WC,R0               IS LEVEL HIGHER THAN SPECIFIED    R4 K4170000
         BH    CTXSON              TURN ROUTE ON IF YES              R4 K4170500
         XR    R1,R14              FLIP ROUTES OFF IF NOT            R4 K4171000
CTXSON   STH   R1,0(,R15)          SET NEW ROUTINGS                  R4 K4171500
         BCTR  R15,0               DOWN                              R4 K4172000
         BCTR  R15,0               TWO                               R4 K4172500
         BCT   WC,CTXSLOP          DO FOR 7 (0 NOT ALTERED)          R4 K4173000
         $CRET MSG=OK              RETURN                            R4 K4173500
CTXTAB   DS    0F                  HASP LOGICAL ROUTING TEXT IDS     R4 K4174000
         DC    C'MA',X'C000'       MAIN                              R4 K4174500
CTXTESIZ EQU   *-CTXTAB                                              R4 K4175000
         DC    C'TA',X'3C00'       TAPE                              R4 K4175500
         DC    C'TP',X'0100'       TELE-PROCESSING                   R4 K4176000
         DC    C'UR',X'0200'       UNIT RECORD                       R4 K4176500
         DC    C'ER',X'0040'       ERROR                             R4 K4177000
         DC    C'LO',X'0000'       LOG                               R4 K4177500
CTXTABCT EQU   (*-CTXTAB)/CTXTESIZ                                      K4178000
         EJECT                                                          K4178500
*********************************************************************** K4179000
*                                                                     * K4179500
*        $TMCCA,LIST -- SET MESSAGE ROUTING                           * K4180000
*                                                                     * K4180500
*        CC    = CONSOLE TO RECEIVE THE RESPONSE                      * K4181000
*        A     = AREA OF CONSOLE CC                                   * K4181500
*        LIST  = DISPLAY COMMAND OPERANDS FOR CONSOLE CC AREA A       * K4182000
*                ( NO COMMAS BETWEEN LIST ITEMS )                     * K4182500
*                                                                     * K4183000
*********************************************************************** K4183500
CTM      DS    0H                                                       K4184000
         SLR   WA,WA               ZERO WORK                         R4 K4184500
         ST    WA,COMEWORK         ALSO WORK AREA                    R4 K4185000
         IC    WA,COMUCM           ASSUME DESIRED UCM PRESENT        R4 K4185500
         LA    R1,COMOPRND         SET ERROR LOCATOR                    K4186000
         TM    COMFLAG,CMBFLAGU    IS THIS A UCM                     R4 K4186500
         BZ    CTMINVO             IF NOT OS CONSOLE, NO                K4187000
         L     R10,COMEXTEN        POINT TO EXTENDED AREA               K4187500
         USING COMDSECT,R10                                             K4188000
         LR    WC,WA               GET ENTRY CONSOLE                    K4188500
         MH    WC,COMLCON          CALCULATE OFFSET (1 TOO HIGH)        K4189000
         LA    WC,COMRESP-COMCONL(WC) POINT TO ELEMENTS                 K4189500
         LA    R15,1(0,R1)         POINT TO NUMERIC                     K4190000
         CLI   0(R15),C' '         CHECK FOR DISPLAY ONLY               K4190500
         BE    CTMDISP             DISPLAY                              K4191000
         CLI   0(R15),C'0'         IS IT NUMERIC                        K4191500
         BL    CTMGETA             IF NOT TRY AREA                      K4192000
         MVN   COMEWORK+3(1),0(R15) EXTRACT NUMERIC                     K4192500
         L     WB,COMEWORK         PICK UP RESPONSE CONSOLE NUMBER   R4 K4193000
         LA    R15,1(0,R15)        UP 1                                 K4193500
         CLI   0(R15),C'0'         CHECK SECOND NUMERIC                 K4194000
         BL    CTMCKC              IF NOT CHECK FOR SUPPORTED           K4194500
         MH    WB,=H'10'           MULTIPLY BY TEN                   R4 K4195000
         MVN   COMEWORK+3(1),0(R15) EXTRACT NUMERIC                     K4195500
         A     WB,COMEWORK         ADD UNITS DIGIT                   R4 K4196000
         LA    R15,1(0,R15)        UP 1                                 K4196500
CTMCKC   LTR   WB,WB               CHECK FOR ZERO                    R4 K4197000
         BZ    CTMCOMBA            LEAVE DEFAULT CONSOLE IN          R4 K4197500
         CH    WB,COMOCON          CONSOLE TOO HIGH                  R4 K4198000
         BH    CTMERROR            EXIT IF TOO HIGH                     K4198500
         LR    WA,WB               PUT IN CONSOLE REGISTER           R4 K4199000
CTMGETA  CLI   0(R15),C','         END OF OPERAND                    R4 K4199500
         BE    CTMCOMBA            IF SO COMBINE AREA AND UCM           K4200000
         CLI   0(R15),C' '         IS IT BLANK                          K4200500
         BE    CTMCOMBA            IF SO COMBINE AREA AND UCM           K4201000
         CLI   0(R15),C'A'         BELOW A                              K4201500
         BL    CTMINVO             IF YES EXIT                          K4202000
         CLI   0(R15),C'I'         IS IT SET NOW                        K4202500
         BNH   CTMCOMB             IF SO COMBINE AREA AND UCM           K4203000
         CLI   0(R15),C'J'         IS IT WITHIN RANGE                   K4203500
         BL    CTMINVO             IF NOT EXIT                          K4204000
         CLI   0(R15),C'R'         IS IT J - R                       R4 K4204500
         BNH   CTMCOMB             IF SO COMBINE AREA AND UCM        R4 K4205000
         CLI   0(R15),C'S'         IS IT BELOW S                     R4 K4205500
         BL    CTMINVO             IF YES EXIT                       R4 K4206000
         CLI   0(R15),C'Z'         IS IT S - Z                       R4 K4206500
         BH    CTMINVO             EXIT IF HIGH                         K4207000
CTMCOMB  ICM   WB,8,0(R15)         PICK UP AREA                      R4 K4207500
CTMCOMBZ LA    R15,1(0,R15)        UP 1                                 K4208000
CTMCOMBA SLDL  WA,8                COMBINE UCM AND AREA                 K4208500
         CLI   0(R15),C','         IS IT ALL OR LIST                    K4209000
         BE    CTMLIST             USE LIST                             K4209500
         CLI   0(R15),C' '         IS IT BLANK                          K4210000
         BNZ   CTMINVO             ERROR IF NOT                         K4210500
* USER WANTS TO SET ALL OPERANDS                                        K4211000
         LH    R0,COMLCON          GET COUNT*2                          K4211500
         SRA   R0,1                HALVE IT                             K4212000
         LR    WB,WC               POINT TO FIRST ELEMENT               K4212500
CTMALL   STCM  WA,3,0(WB)          SET RESPONSE CONSOLE                 K4213000
         LA    WB,2(0,WB)          UP 2 ( NEXT ELEMENT )                K4213500
         BCT   R0,CTMALL           LOOP                                 K4214000
* DISPLAY CURRENT SETTINGS                                              K4214500
CTMDISP  LA    WE,6                SET INCREMENT                        K4215000
         LA    WF,COMMAND+70-6     SET END                              K4215500
         LH    WB,COMLCON          PICK UP LENGTH OF ELEMENTS           K4216000
         SRA   WB,1                HALVE TO GET NUMBER                  K4216500
         SR    WD,WD               SET OFFSET                           K4217000
         SR    R0,R0               ZERO WORK                            K4217500
         IC    R0,COMUCM           PICK UP ENTRY CONSOLE             R4 K4218000
         MVC   COMMAND(3),=C'CON'  SET BEGINNING OF MESSAGE             K4218500
         $CFCVE  VALUE=(R0)        CONVERT TO EBCDIC                    K4219000
         MVC   COMMAND+3(3),COMDWORK+2 INSERT                           K4219500
CTMDNLN  LA    WA,COMMAND          SET TO START OF LINE                 K4220000
         SR    R0,R0               ZERO WORK                            K4220500
CTMDNXE  BXH   WA,WE,CTMELN        END OF LINE TEST                     K4221000
         IC    R0,COMCON(WD,WC)    PICK UP CONSOLE ID                   K4221500
         $CFCVE  VALUE=(R0)        CONVERT TO EBCDIC                    K4222000
         MVC   0(5,WA),COMDWORK    SET OUTPUT ITEM '   CC'              K4222500
         MVI   2(WA),C'='          SET '  =CC'                          K4223000
         MVI   5(WA),C' '          SET BLANK AREA                    R4 K4223500
         LA    R14,COMCONA(WD,WC)  POINT TO AREA                     R4 K4224000
         CLI   0(R14),0            IS IT ZERO                        R4 K4224500
         BZ    SKIP270             SKIP NSI IF YES                   R4 K4225000
         MVC   5(1,WA),0(R14)      SET '  =CCA'                         K4225500
SKIP270  LA    R14,CTMTAB-2        POINT TO CONVERT TAB -2              K4226000
CTMDL    LA    R14,2(0,R14)        UP 2                                 K4226500
         CLI   0(R14),X'FF'        IS IT END                            K4227000
         BE    CTMERROR            EXIT ON ERROR                        K4227500
         CLM   WD,1,1(R14)         CHECK FOR MATCHING OFFSET            K4228000
         BNE   CTMDL               LOOP                                 K4228500
         MVC   1(1,WA),0(R14)      SET ' O=CCA'                         K4229000
         LA    WD,2(0,WD)          UP TO NEXT ELEMENT                   K4229500
         BCT   WB,CTMDNXE          LOOP TO NEXT ELEMENT                 K4230000
         LA    R0,COMMAND-6        CALCULATE                            K4230500
         SR    WA,R0                LENGTH                              K4231000
         LR    R0,WA                OF MESSAGE                          K4231500
         $CRET L=(R0)              DISPLAY AND EXIT                     K4232000
* END OF DISPLAY LINE                                                   K4232500
CTMELN   LA    R0,COMMAND-6        CALCULATE                            K4233000
         SR    WA,R0                LENGTH                              K4233500
         LR    R0,WA                OF MESSAGE                          K4234000
         $CWTO L=(R0)              DISPLAY                              K4234500
         B     CTMDNLN             DO NEXT LINE                         K4235000
* LIST ITEMS DESIRED                                                    K4235500
CTMLIST  LA    R1,1(0,R15)         POINT TO FIRST SPECIFICATION         K4236000
CTMTBNK  CLI   0(R1),C' '          CHECK FOR END                        K4236500
         BE    CTMDISP             DISPLAY SETTINGS IF END              K4237000
         LA    R14,CTMTAB-2        POINT TO CONVERT TABLE - 2           K4237500
CTMLNXT  LA    R14,2(0,R14)        UP TO NEXT                           K4238000
         CLI   0(R14),X'FF'        IS IT END                            K4238500
         BE    CTMINVO             EXIT ON ERROR                        K4239000
         CLC   0(1,R14),0(R1)      MATCH SPECIFICATION                  K4239500
         BNE   CTMLNXT             LOOP                                 K4240000
         SR    WB,WB               ZERO WORK                            K4240500
         IC    WB,1(0,R14)         PICK UP OFFSET                       K4241000
         CH    WB,COMLCON          CHECK FOR COMPATIBLE                 K4241500
         BNL   CTMERROR            GEN BAD                              K4242000
         AR    WB,WC               POINT TO ELEMENT                     K4242500
         STCM  WA,3,0(WB)          SET                                  K4243000
         LA    R1,1(0,R1)          UP TO NEXT                           K4243500
         B     CTMTBNK             LOOP                                 K4244000
CTMERROR $CRET MSG='ENTRY CONSOLE NOT SUPPORTED' SEND DIAGNOSTIC        K4244500
CTMINVO  $CFINVO OPERAND=(R1)      INVALID OPERAND                   R4 K4245000
CTMTAB   DS    0H                  ITEMS IN LIST                        K4245500
         DC    C'A',AL1($DA*2-2)                                        K4246000
         DC    C'F',AL1($DF*2-2)                                        K4246500
         DC    C'I',AL1($DI*2-2)                                        K4247000
         DC    C'J',AL1($DJ*2-2)                                        K4247500
         DC    C'N',AL1($DN*2-2)                                        K4248000
         DC    C'O',AL1($DO*2-2)                                        K4248500
         DC    C'Q',AL1($DQ*2-2)                                        K4249000
         DC    C'U',AL1($DU*2-2)                                        K4249500
* OPTIONAL SPECIFICATIONS NOT DISPLAYED                                 K4250000
         DC    X'7D',AL1($D7D*2-2)                                      K4250500
         DC    C'S',AL1($DS*2-2)                                        K4251000
         DC    C'T',AL1($DT*2-2)                                        K4251500
         DC    X'FF'               END OF TABLE                         K4252000
         DROP  R10                                                      K4252500
         EJECT                                                          K4253000
*********************************************************************** K4253500
*                                                                     * K4254000
*        $T OSCX,D=M/D=J/D=T - SET OS CONSOLE DISPLAY OPTION          * K4254500
*                                                                     * K4255000
*        X     = CONSOLE UCMID NUMBER                                 * K4255500
*        M     = DISPLAY MESSAGE TEXT ONLY                            * K4256000
*        J     = DISPLAY JOB ID AND MESSAGE TEXT                      * K4256500
*        T     = DISPLAY TIME STAMP, JOB ID, AND TEXT                 * K4257000
*                                                                     * K4257500
*********************************************************************** K4258000
CTO      DS    0H                                                       K4258500
         $CFCVB POINTER=(WD),NOK=CTOINVO GET UCMID                      K4259000
         LA    R1,255              SET MAXIMUM UCMID                    K4259500
         CR    R0,R1               ABOVE MAX                            K4260000
         BH    CTOINVO             EXIT IF HIGH                         K4260500
* COMNULOP BYTE 0 IS 0 FOR D=M                                          K4261000
         L     R15,CVTPTR          POINT TO CVT                         K4261500
         L     R15,CVTCUCB-CVT(,R15) POINT TO UCM                       K4262000
         LM    R1,WB,UCMVEA-UCM(R15) PICK UP ELEMENT SCAN PARMS         K4262500
CTOCONL  CLM   R0,1,UCMID-UCMLIST(R1) FIND ENTRY                        K4263000
         BE    CTOCON              EXIT IF FOUND                        K4263500
         BXLE  R1,WA,CTOCONL       LOOP                                 K4264000
         B     CTOINVO             ERROR EXIT                           K4264500
CTOCON   LR    WB,R1               SAVE UCME ADDRESS                    K4265000
         BXLE  WD,WE,CTOSEL        CHECK FOR MORE PARAMETERS            K4265500
CTOSET   $GETLOK ,                 LOCK                                 K4266000
         MODESET EXTKEY=ZERO       GET KEY 0                            K4266500
         NI    UCMDISP2-UCMLIST(WB),255-UCMDISPI-UCMDISPJ RESET         K4267000
         OC    UCMDISP2-UCMLIST(1,WB),COMNULOP TURN ON INDICATORS       K4267500
         MODESET EXTKEY=HASP       GET KEY 1                            K4268000
         $FRELOK ,                 UNLOCK                               K4268500
CTOXIT   $CRET MSG=OK              EXIT WITH OK                         K4269000
CTOSEL   L     R1,0(0,WD)          POINT TO OPERAND                     K4269500
         CLC   0(2,R1),=C'D='      CHECK FOR D=                         K4270000
         BNE   CTOINVO             EXIT IF NOT                          K4270500
         LA    R1,2(0,R1)          POINT TO SELECT CHARACTER            K4271000
         $CFSEL (M,CTOSET),(J,CTOJ),(T,CTOT),OPERAND=(R1)               K4271500
CTOINVO  L     R1,0(0,WD)          POINT TO                             K4272000
         $CFINVO OPERAND=(R1)      INVALID OPERAND                      K4272500
CTOJ     OI    COMNULOP,UCMDISPJ   SET TO DISPLAY JOB ID                K4273000
         B     CTOSET              SET UCME                             K4273500
CTOT     OI    COMNULOP,UCMDISPI   SET TO DISPLAY TIME STAMP            K4274000
         B     CTOSET              SET UCME                             K4274500
         EJECT                                                          K4275000
*********************************************************************** K4275500
*                                                                     * K4276000
*        $T RX.CON,D=M/D=J/C=T - SET REMOTE CONSOLE DISPLAY OPTION    * K4276500
*                                                                     * K4277000
*        M     = DISPLAY MESSAGE TEXT ONLY                            * K4277500
*        J     = DISPLAY JOB ID AND MESSAGE TEXT                      * K4278000
*        T     = DISPLAY TIME STAMP, JOB ID, AND TEXT                 * K4278500
*                                                                     * K4279000
*********************************************************************** K4279500
CTOR     DS    0H                                                       K4280000
         USING RATDSECT,WA                                              K4280500
* WA SET TO RAT ADDRESS BY DEVICE COMMAND GROUP CONTROL                 K4281000
         TM    COMAUTH,COMD        IS CONSOLE RESTRICTED FOR DEVICE  R4 K4281500
         BO    CTOINVO             EXIT IF YES                          K4282000
         TM    COMAUTH,CMBFLAGR    IS THIS A REMOTE RESTRICTION      R4 K4282500
         BZ    CTORCOK             DO NEXT OPERAND IF NOT               K4283000
         CLC   COMJROUT,RATROUTE   CHECK CONSOLE ROUTE FIELD        R41 K4283500
         BNE   CTOINVO             EXIT IF NOT                          K4284000
CTORCOK  BXLE  WD,WE,CTORSEL       IF MORE OPERANDS EXAMINE             K4284500
CTORSET  NI    RATCONF,255-RATCONFT-RATCONFJ RESET OPTIONS              K4285000
         OC    RATCONF,COMNULOP    SET SELECTIONS                       K4285500
         B     CTOXIT              RETURN                               K4286000
CTORSEL  L     R1,0(0,WD)          POINT TO OPERAND                     K4286500
         CLC   0(2,R1),=C'D='      CHECK FOR D=                         K4287000
         BNE   CTOINVO             ERROR IF NOT                         K4287500
         LA    R1,2(0,R1)          POINT TO SELECT CHARACTER            K4288000
         $CFSEL (M,CTORSET),(J,CTORJ),(T,CTORT),OPERAND=(R1)            K4288500
         B     CTOINVO             ERROR EXIT                           K4289000
CTORJ    OI    COMNULOP,RATCONFJ   SET TO DISPLAY JOB, TEXT             K4289500
         B     CTORSET             SET FLAG                             K4290000
CTORT    OI    COMNULOP,RATCONFT   SET TO DISPLAY TIME, JOB, TEXT       K4290500
         B     CTORSET             SET FLAG                             K4291000
         DROP  WA                                                       K4291500
         SPACE 2                                                        K4292000
         LTORG ,                                                        K4292500
         TITLE 'HASP COMMAND PROCESSOR HASPCAOC - AUTOMATIC OPERATOR COCK4293000
               MMANDS'                                                  K4293500
HASPCAOC $COMGRUP CA,SA,TA,ZA      AUTOMATIC OPERATOR COMMANDS          K4294000
*********************************************************************** K4294500
*                                                                     * K4295000
*        $C A -- CANCEL AUTOMATIC OPERATOR COMMANDS                   * K4295500
*                                                                     * K4296000
*********************************************************************** K4296500
         USING ACTDSECT,WA                                              K4297000
         USING ACEDSECT,WB                                              K4297500
CCA      L     WA,$ACTABLE         POINT TO ACT                         K4298000
         L     WD,ACTACEF          POINT TO FIRST FREE ELEMENT          K4298500
         ICM   R1,15,ACTACE        POINT TO FIRST ACTIVE ELEMENT        K4299000
         BZ    CCANACT             BR IF NO ACTIVE                      K4299500
         BAL   LINK,COMACEKT       KILL TIMER                           K4300000
         L     R1,ACTACE           POINT TO ACE                         K4300500
CCAFIND  LR    R15,R1              POINT TO FIRST                       K4301000
CCAENDAL LR    WB,R1               POINT TO ACE                         K4301500
         ICM   R1,15,ACEACE        POINT TO NEXT                        K4302000
         BNZ   CCAENDAL            LOOP                                 K4302500
         ST    R1,ACTACE           ZERO ACTIVE POINTERS                 K4303000
         ST    R1,ACTACEZ          SET ACTIVE POINTERS                  K4303500
         ST    WD,ACEACE           SET OLD FREE BEHIND                  K4304000
         ST    R15,ACTACEF         SET NEW FREE CHAIN                   K4304500
CCARET   $CRET MSG=OK              RETURN WITH OK                       K4305000
CCANACT  ICM   R1,15,ACTACEZ       PICK UP FIRST HALTED ACE             K4305500
         BNZ   CCAFIND             FIND END                             K4306000
         B     CCARET              RETURN                               K4306500
*********************************************************************** K4307000
*                                                                     * K4307500
*        $S A -- START AUTOMATIC OPERATOR COMMANDS                    * K4308000
*                                                                     * K4308500
*********************************************************************** K4309000
CSA      L     WA,$ACTABLE         POINT TO ACT                         K4309500
         NI    ACTFLAG,255-ACTFLAGZ TURN OFF HALT FLAG IF ON            K4310000
         ICM   WB,15,ACTACEZ       PICK UP HALTED ACE Q                 K4310500
         BZ    CCARET              RETURN                               K4311000
         ST    WB,ACTACE           PUT INTO ACTIVE CHAIN                K4311500
         SLR   WB,WB               ZERO WORK                            K4312000
         ST    WB,ACTACEZ          SET ZERO IN HALTED                   K4312500
         BAL   LINK,COMACEKT       KILL TIMER                           K4313000
         B     CCARET              RETURN                               K4313500
         EJECT                                                          K4314000
*********************************************************************** K4314500
*                                                                     * K4315000
*        $T A ID,I=SSSS/T=HH.MM/CANCEL/'TEXT' -- SET ACE              * K4315500
*                                                                     * K4316000
*        ID    = USER OR SYSTEM ASSIGNED ACE ID                       * K4316500
*        HH.MM = TIME OF CURRENT DAY TO EXECUTE 'TEXT' (00.01-99.59)  * K4317000
*        SSSS  = TIME INTERVAL BETWEEN EXECUTIONS                     * K4317500
*        CANCEL= DELETE ACE                                           * K4318000
*        'TEXT'= COMMAND(S) TO EXECUTE AT TIME INDICATED              * K4318500
*                                                                     * K4319000
*********************************************************************** K4319500
CTA      DS    0H                  START CHANGE ACE COMMAND             K4320000
         CLC   COMVERB(4),=C'TALL' TEST FOR $TALL COMMAND               K4320500
         BNE   CTANOTAL            NO--CONTINUE MODIFY ACE CMND         K4321000
         LH    R1,=Y(CTALL-HASPCSY1) PICK-UP OFFSET TO $TALL COMMAND    K4321500
         L     BASE3,=A(HASPCSY1)  POINT TO $TALL PROCESSING GROUP      K4322000
         ALR   R1,BASE3            COMPUTE $TALL ENTRY ADDRESS          K4322500
         BR    BASE3               EXIT TO $TALL COMMAND                K4323000
CTANOTAL DS    0H                                                    R4 K4323500
         L     WA,$ACTABLE         POINT TO ACE TABLE                   K4326000
         BAL   LINK,COMACETR       GET NEW BASE                         K4326500
         B     CTATERR             ERROR EXIT                           K4327000
CTAA     L     R1,0(0,WD)          POINT TO OPERAND                     K4327500
         L     WC,4(0,WD)          POINT TO NEXT                        K4328000
         BCTR  WC,0                REDUCE TO OPERAND                    K4328500
         BCTR  WC,0                LAST CHARACTER                       K4329000
         SR    WC,R1               GET COUNT OF ID                      K4329500
         BNP   CTANOID             BR IF NO ID                          K4330000
         CH    WC,=H'4'            CHECK FOR WITHIN RANGE               K4330500
         BH    CTAINVO             EXIT IF OPERAND INVALID              K4331000
         BCTR  WC,0                GET MACHINE LEBGTH                   K4331500
         MVC   COMEWORK,=CL4' '    BLANK COMEWORK                       K4332000
         EX    WC,CTAMID           MOVE ID TO TEMPORARY                 K4332500
* FIND ACE WITH ID INDICATED                                            K4333000
         LA    WB,ACTACE-(ACEACE-ACEDSECT) POINT TO ACTIVE HEAD         K4333500
         TM    ACTFLAG,ACTFLAGZ    IS QUEUE HALTED                      K4334000
         BZ    CTASACE             SKIP NEXT IF NOT                     K4334500
         LA    WB,ACTACEZ-(ACEACE-ACEDSECT) POINT TO HALTED HEAD        K4335000
CTASACE  LR    R15,WB              COPY POINTER                         K4335500
         ICM   WB,15,ACEACE        POINT TO NEXT ACE                    K4336000
         BZ    CTACENEW            EXIT IF END                          K4336500
         CLC   ACEID,COMEWORK      CHECK FOR MATCH                      K4337000
         BNE   CTASACE             LOOP                                 K4337500
         BAL   LINK,CTAACECK       CHECK AUTHORITY                      K4338000
         B     CTAAOK              OK, CONTINUE             +0          K4338500
* CONSOLE DOES NOT HAVE AUTHORITY TO REFERENCE THE ACE      +4          K4339000
CTAINVO  MVC   COMMAND(8),0(R1)    SHIFT TEXT                           K4339500
         MVC   COMMAND+8(22),=C' INVALID SPECIFICATION'                 K4340000
         LA    R0,8+22             SET LENGTH                           K4340500
         B     CTALDISR            EXIT WITH DISPLAY                    K4341000
         SPACE 1                                                        K4341500
CTAINVC $CFINVC ,                  INVALID COMMAND ERROR EXIT        R4 K4342000
         EJECT                                                          K4342500
CTAAOK   BXLE  WD,WE,CTAMODS       CHECK FOR MORE OPERANDS              K4343000
CTALDIS  BAL   LINK,CTADIS         PREPARE DISPLAY                      K4343500
CTALDISR TM    ACTFLAG,ACTFLAGZ    HALTED                               K4344000
         BZ    CTALDISX            LET IT GO AS IS                      K4344500
         $CWTO L=(R0)              DISPLAY WHAT WE HAVE                 K4345000
         MVC   COMMAND(COMACEML-2),COMACEMT SET DIAGNOSTIC              K4345500
         LA    R0,COMACEML-2       SET LENGTH                           K4346000
CTALDISX $CRET L=(R0)              EXIT WITH DISPLAY                    K4346500
* REMOVE ACE FROM QUEUE AND BUILD UPON IT                               K4347000
CTAMODS  MVC   ACEACE-ACEDSECT(,R15),ACEACE REMOVE ACE                  K4347500
*********************************************************************** K4348000
*                                                                     * K4348500
*        MODIFY ACE (ACE IS OFF ALL CHAINS)                           * K4349000
*                                                                     * K4349500
*********************************************************************** K4350000
CTAMOD   L     R1,0(0,WD)          POINT TO OPERAND                     K4350500
         L     WC,4(0,WD)          POINT TO NEXT                        K4351000
         BCTR  WC,0                POINT TO COMMA                       K4351500
         CLI   0(R1),C''''         CHECK FOR APOSTROPHE        @OZ46720 K4352000
         BE    CTATEXT             IF SO SET TEXT              @OZ46720 K4352500
* MUST BE TIME, INTERVAL, OR CANCEL                            @OZ46720 K4353000
         CLI   1(R1),C'='          IS IT T OR I                @OZ46720 K4353500
         BE    CTAMTIME            IF SO MODIFY TIME           @OZ46720 K4354000
* MUST BE CANCEL                                               @OZ46720 K4354500
         CLI   0(R1),C'C'          IS IT CANCEL                         K4355000
         BE    CTACAN              CANCEL IT IF YES                     K4355500
CTAABORT MVC   COMMAND(8),0(R1)    SHIFT ERROR                          K4356000
         MVC   COMMAND+8(22),=C' INVALID SPECIFICATION'                 K4356500
         LA    R0,22+8             SET MESSAGE LENGTH                   K4357000
CTAFREE  $CWTO L=(R0)              SEND MESSAGE                         K4357500
         L     WA,$ACTABLE         POINT TO ACT                         K4358000
CTACAN   MVC   ACEACE,ACTACEF      PUT FREE QUEUE BEHIND                K4358500
         ST    WB,ACTACEF          FREE ACE                             K4359000
         B     CTALDIS             DISPLAY AND EXIT                     K4359500
CTATEXT  BCTR  WC,0                POINT TO LAST CHARACTER     @OZ46720 K4360000
         CLI   0(WC),C''''         CHECK FOR APOSTROPHE        @OZ46720 K4360100
         BNE   *+6                 SKIP NEXT                            K4360500
         BCTR  WC,0                REDUCE BY 1                          K4361000
         BCTR  WC,0                REDUCE FOR MACHINE COUNT             K4361500
         SR    WC,R1               CALCULATE MOVE COUNT                 K4362000
         BM    CTAABORT            ABORT IF NULL                        K4362500
         CH    WC,=Y(L'ACETEXT)    MAKE SURE NOT TOO LONG               K4363000
         BNL   CTAABORT            ABORT IF TOO LONG                    K4363500
         CLC   1(1,R1),$CCOMCHR    CHECK COMMAND CHARACTER     @OZ40998 K4364000
         BNE   CTAABORT            ABORT IF NOT                         K4364500
         MVI   ACETEXT,C' '        BLANK OUT TEXT                       K4365000
         MVC   ACETEXT+1(L'ACETEXT-1),ACETEXT AREA                      K4365500
         EX    WC,CTAMTXT          MOVE TEXT                            K4366000
         OI    ACEFLAG,ACEFLAGD    SET TEXT OK FLAG                     K4366500
CTAMODN  BXLE  WD,WE,CTAMOD        MODIFY MORE                          K4367000
         MVC   COMMAND(21),=C'INSUFFICIENT OPERANDS'                    K4367500
         LA    R0,21               SET LENGTH                           K4368000
         TM    ACEFLAG,ACEFLAGD+ACEFLAGT DO WE HAVE REQUIRED PARMS      K4368500
         BNO   CTAFREE             SEND DIAGNOSTIC IF NOT               K4369000
         L     R0,ACETIME          GET TIME OF COMMAND                  K4369500
         LR    R1,WB               COPY POINTER                         K4370000
         LR    WC,WB               SAVE ACE ADDRESS                     K4370500
         BAL   LINK,COMAADD        ADD ACE TO ACTIVE CHAIN              K4371000
         LR    WB,WC               BACK TO ACE                          K4371500
         B     CTALDIS             DISPLAY ACE                          K4372000
CTAMTIME LA    R14,2(0,R1)         POINT TO NUMERIC                     K4372500
         SR    WC,R14              GET LENGTH OF SSSS                   K4373000
         BNP   CTAABORT            ABORT IF NULL                        K4373500
         SLR   R0,R0               ZERO AC                              K4374000
         CLI   0(R1),C'T'          IS IT T                              K4374500
         BE    CTATIME             BR IF YES                            K4375000
         CLI   0(R1),C'I'          IS IT I                              K4375500
         BNE   CTAABORT            ABORT IF NOT                         K4376000
* USER WANTS INTERVAL                                                   K4376500
         CH    WC,=H'4'            CHECK FOR TOO LONG                   K4377000
         BH    CTAABORT            ABORT IF TOO LONG                    K4377500
CTAIL    MH    R0,=H'10'           MULTIPLY BY 10                       K4378000
CTAILA   IC    R15,0(,R14)         PICK UP CHARACTER                    K4378500
         N     R15,=A(X'F')        MASK OUT HIGH VALUES                 K4379000
         CLI   0(R14),C'0'         CHECK FOR NUMERIC                    K4379500
         BL    CTAABORT            ABORT IF LOW                         K4380000
         AR    R0,R15              ADD                                  K4380500
         LA    R14,1(0,R14)        UP 1                                 K4381000
         BCT   WC,CTAIL            LOOP                                 K4381500
         CLI   0(R1),C'T'          IS IT T                              K4382000
         BE    CTATIMEC            BR IF YES                            K4382500
         CH    R0,=H'30'           CHECK FOR BELOW 30                   K4383000
         BL    CTAABORT            EXIT IF LOW                          K4383500
         STH   R0,ACEINTV          SET INTERVAL                         K4384000
         OI    ACEFLAG,ACEFLAGT    SET TIME IS SET                      K4384500
         B     CTAMODN             LOOP                                 K4385000
CTATIME  CH    WC,=H'5'            CHECK FOR TOO LONG                   K4385500
         BH    CTAABORT            ABORT IF LONG                        K4386000
         CH    WC,=H'4'            CHECK FOR TOO SHORT                  K4386500
         BL    CTAABORT            ABORT IF LOW                         K4387000
         BE    CTALHR              DO 1 DIGIT HOUR                      K4387500
         CLI   0(R14),C'0'         CHECK FOR NUMERIC                    K4388000
         BL    CTAABORT            ABORT IF NOT                         K4388500
         IC    R0,0(,R14)          PICK UP VALUE                        K4389000
         N     R0,=A(X'F')         PURIFY                               K4389500
         MH    R0,=H'10'           MULTIPLY BY 10                       K4390000
         LA    R14,1(0,R14)        ACCOUNT FOR SPACE                    K4390500
CTALHR   CLI   0(R14),C'0'         NUMERIC                              K4391000
         BL    CTAABORT            ABORT IF NOT                         K4391500
         IC    R15,0(,R14)         PICK UP CHARACTER                    K4392000
         N     R15,=A(X'F')        PURIFY                               K4392500
         AR    R0,R15              ACCUMULATE                           K4393000
         CLI   1(R14),C'.'         CHECK FOR SEPARATOR                  K4393500
         BNE   CTAABORT            EXIT IF NOT OK                       K4394000
         MH    R0,=H'6'            MULTIPLY BY 6                        K4394500
         LA    WC,2                SET 2                                K4395000
         LA    R14,2(0,R14)        UP 2                                 K4395500
         B     CTAILA              CONVERT LAST 2                       K4396000
CTATIMEC CH    R0,=H'6000'         CHECK FOR BEYOND MAXIMUM             K4396500
         BNL   CTAABORT            ABORT IF YES                         K4397000
         MH    R0,=H'60'           GET NUMBER OF SECONDS                K4397500
         ST    R0,ACETIME          SET TIME OF DAY                      K4398000
         OI    ACEFLAG,ACEFLAGT    SET TIME IS SET                      K4398500
         B     CTAMODN             LOOP                                 K4399000
* USER DID NOT GIVE ID - DISPLAY OR CREATE ACE                          K4399500
CTANOID  BXLE  WD,WE,CTAGETID      IF MORE PARMS GET ID                 K4400000
         MVC   COMMAND(26),=C'NO AUTOMATIC COMMAND FOUND'               K4400500
         LA    R0,26               SET COUNT                            K4401000
         LA    WB,ACTACE-(ACEACE-ACEDSECT) POINT TO HEAD OF ACES        K4401500
         TM    ACTFLAG,ACTFLAGZ    CHECK FOR HALTED                     K4402000
         BZ    CTADAL              SKIP NEXT IF NOT                     K4402500
         LA    WB,ACTACEZ-(ACEACE-ACEDSECT) POINT TO HALTED HEAD        K4403000
CTADAL   ICM   WB,15,ACEACE        POINT TO NEXT ACE                    K4403500
         BZ    CTALDISR            EXIT WITH MESSAGE                    K4404000
         BAL   LINK,CTAACECK       CHECK CONSOLE AUTHORITY              K4404500
         B     CTADALL             DO DISPLAY IF OK         +0          K4405000
         B     CTADAL              LOOP                     +4          K4405500
CTADALL  BAL   LINK,CTADIS         CREATE MESSAGE                       K4406000
CTADALLA ICM   WB,15,ACEACE        POINT TO NEXT ACE                    K4406500
         BZ    CTALDISR            EXIT WITH MESSAGE                    K4407000
         BAL   LINK,CTAACECK       CHECK CONSOLE AUTHORITY              K4407500
         B     *+8                 SKIP NSI IF OK           +0          K4408000
         B     CTADALLA            GET NEXT ACE IF NOT OK   +4          K4408500
         $CWTO L=(R0)              DISPLAY                              K4409000
         L     WA,$ACTABLE         RESTORE WA                           K4409500
         B     CTADALL             LOOP                                 K4410000
         EJECT                                                          K4410500
*********************************************************************** K4411000
*                                                                     * K4411500
*        SUPPLY AN ACE ID LEFT ADJUSTED                               * K4412000
*                                                                     * K4412500
*********************************************************************** K4413000
CTAGETID L     R1,ACTBID           PICK UP BASE ID                      K4413500
         LA    R1,1(0,R1)          UP 1                                 K4414000
         CH    R1,=H'9999'         CHECK FOR ABOVE MAX                  K4414500
         BNH   *+8                 SKIP RESET                           K4415000
         LA    R1,1                SET NEW BASE                         K4415500
         ST    R1,ACTBID           SET FOR NEXT TIME                    K4416000
         LR    R0,R1               COPY VALUE                           K4416500
         $CFCVE ,                  CONVERT TO EBCDIC                    K4417000
         MVC   COMEWORK,COMDWORK+1 PUT INTO COMEWORK                    K4417500
CTASLIDE CLI   COMEWORK,C' '       CHECK FOR BLANK                      K4418000
         BNE   CTAID               IF NOT LOOK FOR ID                   K4418500
         MVC   COMEWORK,COMEWORK+1 SLIDE OVER 1                         K4419000
         B     CTASLIDE            LOOP                                 K4419500
CTAID    LA    WB,ACTACE-(ACEACE-ACEDSECT) POINT TO HEAD OF CHAIN       K4420000
         TM    ACTFLAG,ACTFLAGZ    CHECK FOR HALTED                     K4420500
         BZ    CTAIDS              SCAN IDS                             K4421000
         LA    WB,ACTACEZ-(ACEACE-ACEDSECT) POINT TO HALTED HEAD        K4421500
CTAIDS   ICM   WB,15,ACEACE        POINT TO NEXT ID                     K4422000
         BZ    CTANEW              BUILD NEW IF NO MATCH                K4422500
         CLC   ACEID,COMEWORK      CHECK FOR MATCH                      K4423000
         BNE   CTAIDS              LOOP                                 K4423500
         B     CTAGETID            GET NEXT ID                          K4424000
*********************************************************************** K4424500
*                                                                     * K4425000
*        CREATE A NEW ACE                                             * K4425500
*                                                                     * K4426000
*********************************************************************** K4426500
CTACENEW BXH   WD,WE,CTAANF        GO TO NEXT OPERAND, ERROR IF NONE    K4427000
CTANEW   ICM   WB,15,ACTACEF       PICK UP NEW ACE                      K4427500
         BZ    CTAOUT              BR IF NO ACE                         K4428000
         MVC   ACTACEF,ACEACE      SET NEW FREE ACE                     K4428500
         MVC   ACEFLAG,COMAUTH     COPY RESTRICTIONS                 R4 K4429000
         MVC   ACECON,COMUCM       COPY POSSIBLE UCMID               R4 K4429500
         NI    ACEFLAG,ACEFLAGR    FORCE OTHER FLAGS OFF             R4 K4430000
         TM    COMFLAG,CMBFLAGU    IS THIS UCMID                     R4 K4430500
         BO    CTANEWA             SKIP NEXT IF YES                     K4431000
         L     R15,CVTPTR          GET ADDRESS OF CVT          @OZ41571 K4431500
         L     R15,CVTCUCB-CVT(,R15)  ADDRESS OF UCM BASE      @OZ41571 K4431550
         SL    R15,=F'4'           ADDRESS OF MCS PREFIX PTR   @OZ41571 K4431600
         L     R15,UCMPRFXP-UCMPRFXP(,R15)  ADD OF MCS PREFIX  @OZ41571 K4431650
         L     R15,UCMMCENT-UCMPRFX(,R15)  ADD OF MSTR CON UCM @OZ41571 K4431700
         MVC   ACECON,UCMID-UCMLIST(R15)  SET MSTR CNSL UCMID  @OZ41571 K4431750
CTANEWA  XC    ACEINTV,ACEINTV     ZERO OUT INTERVAL                    K4432000
         XC    ACETIME,ACETIME     ZERO TIME                            K4432500
         MVI   ACETEXT,C' '        BLANK                                K4433000
         MVC   ACETEXT+1(L'ACETEXT-1),ACETEXT OUT TEXT AREA             K4433500
         MVC   ACEID,COMEWORK      SET ACE ID                           K4434000
         B     CTAMOD              FILL IT IN                           K4434500
         EJECT                                                          K4435000
*********************************************************************** K4435500
*                                                                     * K4436000
*        FORMAT A DISPLAY OF AN ACE                                   * K4436500
*                                                                     * K4437000
*********************************************************************** K4437500
CTADIS   MVC   CTABASIC,=C'ID **** T=**.** I=**** '                     K4438000
         MVC   CTAAID,ACEID        SET ID                               K4438500
         ICM   R1,15,ACETIME       PICK UP TIME                         K4439000
         BNP   CTADNT              BR IF NO TIME                        K4439500
         SR    R0,R0               ZERO R0                              K4440000
         D     R0,=A(60*60)        SEPARATE HOURS                       K4440500
         CVD   R1,COMDWORK         CONVERT                              K4441000
         UNPK  CTAAHH,COMDWORK     TO EBCDIC                            K4441500
         OI    CTAAHH+1,C'0'       SET SIGN                             K4442000
         LR    R1,R0               PUT REMAINDER                        K4442500
         SLR   R0,R0               IN R1                                K4443000
         D     R0,=A(60)           DIVIDE BY SECONDS/MIN                K4443500
         CVD   R1,COMDWORK         CONVERT                              K4444000
         UNPK  CTAAMM,COMDWORK     TO EBCDIC                            K4444500
         OI    CTAAMM+1,C'0'       SET SIGN                             K4445000
CTADNT   LH    R0,ACEINTV          PICK UP INTERVAL                     K4445500
         CVD   R0,COMDWORK         CONVERT TO DECIMAL                   K4446000
         MVC   COMDWORK-1(6),=X'402020202120'                           K4446500
         ED    COMDWORK-1(6),COMDWORK+5 THEN TO EBCDIC                  K4447000
         MVC   CTAASS,COMDWORK+1   SET SSSS                             K4447500
         MVC   CTAATEXT,ACETEXT    MOVE TEXT                            K4448000
         LA    R0,CTAATEXT-CTABASIC+L'CTAATEXT SET MESSAGE LENGTH       K4448500
         BR    LINK                RETURN                               K4449000
*********************************************************************** K4449500
*                                                                     * K4450000
*        MISCELLANEOUS                                                * K4450500
*                                                                     * K4451000
*********************************************************************** K4451500
CTAACECK IC    WC,COMAUTH          PICK UP RESTRICTION FLAGS         R4 K4452000
         N     WC,=A(COMJDS)       PURIFY                               K4452500
         BZR   LINK                RETURN OK IF FULL AUTHORITY CONSOLE  K4453000
         EX    WC,CTAAUTH          CHECK PARTIAL AUTHORITY OK           K4453500
         BOR   LINK                RETURN OK IF SUFFICIENT              K4454000
         B     4(0,LINK)           RETURN NOK                           K4454500
         SPACE 1                                                        K4455000
CTAOUT   MVC   COMMAND(31),=C'AUTOMATIC COMMAND LIMIT REACHED'          K4455500
         LA    R0,31               SET LENGTH                           K4456000
         B     CTALDISR            EXIT WITH DIAGNOSTIC                 K4456500
         SPACE 1                                                        K4457000
CTATERR  OC    ACTACE,ACTACE       CHECK FOR EMPTY                      K4457500
         BZ    CTAA                IF ZERO GO ON                        K4458000
         OI    ACTFLAG,ACTFLAGZ    SET HALTED                           K4458500
         MVC   ACTACEZ,ACTACE      PUT QUEUE IN HALTED QUEUE            K4459000
         XC    ACTACE,ACTACE       ZERO ACTIVE QUEUE                    K4459500
         B     CTAA                GO ON                                K4460000
         SPACE 1                                                        K4460500
CTAANF   MVC   COMMAND(26),=C'NO AUTOMATIC COMMAND FOUND'               K4461000
         LA    R0,26               SET COUNT                            K4461500
         B     CTALDISR            EXIT                                 K4462000
         EJECT                                                          K4462500
CTAMID   MVC   COMEWORK(*-*),1(R1) MOVE USER SPECIFIED ID               K4463000
CTAAUTH  TM    ACEFLAG,*-*         CHECK FOR AUTHORITY                  K4463500
CTAMTXT  MVC   ACETEXT(*-*),1(R1) MOVE USER TEXT                        K4464000
CTABASIC EQU   COMMAND,23          RESPONSE PATTERN                     K4464500
CTAAID   EQU   CTABASIC+3,4        ACE ID                               K4465000
CTAAHH   EQU   CTAAID+7,2          HH                                   K4465500
CTAAMM   EQU   CTAAHH+3,2          MM                                   K4466000
CTAASS   EQU   CTAAMM+5,4          SSSS                                 K4466500
CTAATEXT EQU   CTABASIC+23,L'ACETEXT TEXT AREA                          K4467000
         EJECT                                                          K4467500
*********************************************************************** K4468000
*                                                                     * K4468500
*        $Z A -- HALT AUTOMATIC OPERATOR COMMANDS                     * K4469000
*                                                                     * K4469500
*********************************************************************** K4470000
CZA      L     WA,$ACTABLE         POINT TO ACT                         K4470500
         OI    ACTFLAG,ACTFLAGZ    SHOW HALTED                          K4471000
         ICM   WB,15,ACTACE        PICK UP ACTIVE ACE                   K4471500
         BZ    CCARET              RETURN                               K4472000
         ST    WB,ACTACEZ          SET INTO HALTED QUEUE                K4472500
         SLR   WB,WB               ZERO WORK                            K4473000
         ST    WB,ACTACE           SET ZERO IN ACTIVE                   K4473500
         BAL   LINK,COMACEKT       KILL TIMER                           K4474000
         B     CCARET              RETURN                               K4474500
         DROP  WA,WB                                                    K4475000
         SPACE 2                                                        K4475500
         LTORG ,                                                        K4476000
 TITLE 'HASP COMMAND PROCESSOR HASPCMS1 - MISC DISPLAY COMMANDS'        K4476500
HASPCMS1 $COMGRUP DO,DU            DISPLAY COMMANDS                     K4477000
*********************************************************************** K4477500
*                                                                     * K4478000
*        $D O -- DISPLAY OPERATOR REQUESTS                            * K4478500
*                                                                     * K4479000
*********************************************************************** K4479500
CDO      DS    0H                                                       K4480000
* COMNULOP HIGH BYTE = 0 ON ENTRY                                       K4480500
         USING CMBDSECT,R1                                              K4481000
         SR    WB,WB               CURRENT ID IS ZERO                   K4481500
CDRLOOP  DS    0H                                                       K4482000
         LA    R1,$DOMQUE-(CMBCMB-CMB) POINT TO QUEUE HEAD           R4 K4482500
CDRLOOPA ICM   R1,7,CMBCMB+1       POINT TO NEXT CMB                 R4 K4483000
         BZ    CDREND              IF NONE EXIT                         K4483500
         CLM   WB,15,CMBDOMID      CHECK FOR DOMID                   R4 K4484000
         BNL   CDRLOOPA            LOOP                                 K4484500
         ICM   WB,15,CMBDOMID      PICK UP NEW ID                    R4 K4485000
         SR    WD,WD               ZERO COUNT REGISTER                  K4485500
         IC    WD,CMBML            PICK UP LENGTH                    R4 K4486000
         MVC   COMMAND(L'CMBJOBID+1),CMBJOBID MOVE JOBID PORTION        K4486500
         LA    WA,CMBJOBN-CMBMSG+1 GET LENGTH OF SPECIAL TEXT           K4487000
         SLR   WD,WA               GET MACHINE MOVE COUNT               K4487500
         EX    WD,CDRMVC           MOVE                                 K4488000
         MVI   COMNULOP,X'80'      TURN ON FOUND FLAG                   K4488500
         NI    COMMID+1,X'FE'      INDICATE JOB ID SET (IF ANY)         K4489000
         LA    R0,L'CMBJOBID+2(,WD)  GET TRUE LENGTH                    K4489500
         $CWTO L=(R0)              DISPLAY MESSAGE                      K4490000
         B     CDRLOOP             LOOP                                 K4490500
CDREND   DS    0H                                                       K4491000
         CLI   COMNULOP,0          DID WE DISPLAY ANYTHING              K4491500
         BE    CDRNREQ             IF NOT DISPLAY EMPTY                 K4492000
         $CRET ,                   EXIT                                 K4492500
CDRNREQ  $CRET MSG='NO OPERATOR REQUESTS' SEND MSG                      K4493000
CDRMVC   MVC   COMMAND+L'CMBJOBID+1(*-*),CMBJOBN MOVE NORMAL TEXT       K4493500
         DROP  R1                                                       K4494000
         EJECT                                                          K4494500
*********************************************************************** K4495000
*                                                                     * K4495100
*                         ----DISPLAY UNITS-----                      * K4495200
*                                                                     * K4495300
*                                                                     * K4495400
*        $DU   ( ,RDRS )   ( ,RMTN (-N)  )    ( ,ACTIVE  )            * K4495500
*              ( ,PRTS )   ( ,DEVICENAME )    ( ,STARTED )            * K4495600
*              ( ,PUNS )                      ( ,SHORT   )            * K4495700
*              ( ,LGNS )                                              * K4495800
*              ( ,LNES )   NOTE: ANY COMBINATION OF OPERANDS          * K4495900
*              ( ,RDI  )         MAY BE USED.                         * K4496000
*              ( ,RMTS )                                              * K4496100
*              ( ,ALL  )                                              * K4496200
*              ( ,TP   )                                              * K4496300
*                                                                     * K4496400
*      **DISPLAY OPERANDS                             CONNECTED RMT   * K4496500
*                                                       BREAKDOWN     * K4496600
*        RDRS---ALL LOCAL READERS ------------------------ N/A        * K4496700
*        PRTS---ALL LOCAL PRINTERS ----------------------- N/A        * K4496800
*        PUNS---ALL LOCAL PUNCHES ------------------------ N/A        * K4496900
*        LGNS---ALL VTAM INTERFACES ---------------------- NO         * K4497000
*        LNES---ALL TP LINES ----------------------------- YES        * K4497100
*        RDI----ALL INTERNAL READERS --------------------- N/A        * K4497200
*        RMTS---ALL REMOTES ------------------------------ YES        * K4497300
*        ALL----ALL LOCAL DEVICES AND INTERNAL READERS --- YES        * K4497400
*        TP-----ALL TP LNES AND VTAM INTERFACES ---------- NO         * K4497500
*                                                                     * K4497600
*      **MODIFIER OPERANDS                                            * K4497700
*                                                                     * K4497800
*        ACTIVE---DISPLAY ONLY CONNECTED TP LINES OR ACTIVE DEVICES   * K4497900
*        STARTED--DISPLAY ONLY DEVICES WHICH ARE STARTED '$S'         * K4498000
*        SHORT----ALL DISPLAYS IN NON-EXTENDED FORM                   * K4498100
*                                                                     * K4498200
*      **NO DISPLAY OPERANDS --- DISPLAY OF ALL LOCAL DEVICES         * K4498300
*                                IN SHORT FORM. ACTIVE OR STARTED     * K4498400
*                                CAN BE USED WITHOUT OTHER OPERANDS   * K4498500
*                                                                     * K4498600
*********************************************************************** K4498700
CDU      DS    0H                  $DU COMMAND ENTRY POINT           R4 K4505500
         SPACE 1                                                     R4 K4506000
*********************************************************************** K4506500
*        PRE-PROCESS ALL OPERANDS                                     * K4507000
*********************************************************************** K4507500
         LA    WE,0                SET OFFSET INDEX ZERO             R4 K4508000
         LA    WB,CDUTABLE         PICK UP TABLE ADDRESS             R4 K4508500
         CR    WD,WF               CHECK FOR PLAIN $DU               R4 K4509000
         BE    CDUFND              YES, TREAT AS MATCH TABLE-ENTRY-0 R4 K4509500
         ST    WE,0(,WD)           IGNORE FIRST OPERAND              R4 K4510000
         LA    WD,4(,WD)            AND SKIP IT                      R4 K4510500
CDUFIND  LA    WE,0                SET OFFSET INDEX ZERO             R4 K4511000
         LA    WB,CDUTABLE         PICK UP TABLE ADDRESS             R4 K4511500
         L     R1,0(,WD)           PICK UP OPERAND POINTER           R4 K4512000
*********************************************************************** K4512500
*        SEARCH TABLE FOR NON-SPECIFIC OPERAND                        * K4513000
*********************************************************************** K4513500
CDUSRCH  LA    WB,CDUTBSZ(,WB)     FIND NEXT TABLE ENTRY             R4 K4514000
         LA    WE,1(,WE)           INCREMENT OFFSET INDEX            R4 K4514500
         L     WA,CDUTBSET(,WB)    PICK UP SETUP INSTRUCTION         R4 K4515000
         LTR   WA,WA               TEST FOR TABLE END                R4 K4515500
         BZ    CDUNOFND            YES, BR- TRY SPECIFIC DCT         R4 K4516000
         IC    WC,CDUTBLEN(,WB)    PICK UP COMPARE LENGTH            R4 K4516500
         EX    WC,CDUCLC           COMPARE OPERAND                   R4 K4517000
         BNE   CDUSRCH             NOT EQUAL, BR - TRY NEXT ENTRY    R4 K4517500
CDUFND   EX    0,CDUTBSET(,WB)     EXECUTE THE SETUP INSTRUCTION     R4 K4518000
CDUGO    LTR   R1,R1               TEST FOR DCT ADDRESS              R4 K4518500
         ST    R1,0(,WD)           STORE DCT ADDRESS OR ZERO         R4 K4519000
         BZ    CDUERR              ZERO, COMPLETE OPERAND LOOP       R4 K4519500
CDUINDEX STC   WE,0(,WD)           STORE TABLE OFFSET                R4 K4520000
         B     CDUMDTST            SKIP ERROR FLAGGING              R41 K4520500
CDUERR   OI    CDUFLAG2,CDUFLERR   INDICATE SOME OPERANDS IN ERROR   R4 K4521000
CDUMDTST TM    CDUTBFL1(WB),CDUFLMOD  TEST OPERAND TYPE             R41 K4521100
         BO    CDUNOTOP            BRANCH IF MODIFIER               R41 K4521200
         OI    CDUFLAG2,CDUFLOPR   SHOW ACTION OPERAND FOUND        R41 K4521300
CDUNOTOP LA    WD,4(,WD)           BUMP TO NEXT OPERAND             R41 K4521500
         CLR   WD,WF               TEST FOR LAST OPERAND             R4 K4522000
         BNH   CDUFIND             NO, PRE-PROCESS NEXT OPERAND      R4 K4522500
         SPACE 1                                                     R4 K4523000
*********************************************************************** K4523500
*        DO DISPLAYS FOR ALL PRE-PROCESSED OPERANDS                   * K4524000
*********************************************************************** K4524500
         SLR   R1,R1               CLEAR OPERAND VALUE              R41 K4524600
         LA    WD,COMPNTER         RESTORE ADDRESS OF FIRST OPERAND  R4 K4525000
         TM    CDUFLAG2,CDUFLOPR   TEST FOR MODIFIER ONLY CASES     R41 K4525100
         BO    CDUNEXT             BR IF ANY NON-MODIFIER OPERANDS  R41 K4525200
         EX    0,CDUTABLE+CDUTBSET USE TABLE-ENTRY-0 SETUP INSTRCTN R41 K4525300
         ST    R1,0(,WD)            TO SIMULATE NULL OPERAND CASE   R41 K4525400
CDUNEXT  L     R1,0(,WD)           PICK UP OPERAND                   R4 K4525500
         LTR   R1,R1               TEST FOR DUMMY OPERAND            R4CK4526000
                                      (PRE-PROCESSED ERRORS)         R4 K4526500
         BZ    CDULOOP             IGNORE - DO NEXT OPERAND          R4 K4527000
         LA    R1,0(,R1)           PURIFY IT                         R4 K4527500
         SLR   WB,WB               CLEAR OFFSET REGISTER             R4 K4528000
         IC    WB,0(,WD)           PICK UP TABLE INDEX               R4 K4528500
         MH    WB,=AL2(CDUTBSZ)    COMPUTE TRUE OFFSET               R4 K4529000
         LA    WB,CDUTABLE(WB)     PICK UP TABLE ENTRY ADDRESS       R4 K4529500
         MVC   CDUFLAG1(2),CDUTBFL1(WB) COPY FLAGS AND DEVICE TYPE  R41 K4530000
         MVC   CDUMASK(1),CDUTBMSK(WB)      TO PROCESSOR WORK AREA  R41 K4530500
         L     WA,CDUTBRTN(,WB)    PICK UP DISPLAY ROUTINE ADDRESS   R4 K4531000
         BR    WA                  EXECUTE DISPLAY ROUTINE           R4 K4531500
         SPACE 1                                                     R4 K4532000
CDUCLC   CLC   CDUTBKEY(*-*,WB),0(R1) **** EXECUTED ****             R4 K4532500
         SPACE 1                                                     R4 K4533000
         EJECT                                                       R4 K4533500
*********************************************************************** K4534000
*        OPERAND = SPECIFIC DCT NAME                                  * K4534500
*********************************************************************** K4535000
CDUNOFND $CFDCTL POINTER=(WD)      TRY TO LOCATE THE DEVICE BY NAME  R4 K4535500
         LTR   R1,R1               TEST RETURNED DCT ADDRESS         R4 K4536000
         BP    CDUGO               VALID, BR - STORE DCT ADDRESS     R4 K4536500
         SLR   R1,R1               FORCE ZERO                        R4 K4537000
         B     CDUGO               COMPLETE DUMMY OPERAND            R4 K4537500
         SPACE 1                                                     R4 K4538000
*********************************************************************** K4538500
*        OPERAND IS 'RMTS'                                            * K4539000
*********************************************************************** K4539500
CDURMALL LA    R1,1                SET FIRST RMT TO DISPLAY TO 1     R4 K4540000
         LH    R0,$NUMRJE          SET LAST RMT TO DISPLAY TO MAX    R4 K4540500
         LTR   R0,R0               CHECK FOR REMOTES                R41 K4540600
         BZ    CDURERR             BR IF NONE                       R41 K4540700
         B     CDURMT              GO COMPLETE PRE-PROCESSING RMT    R4 K4541000
         SPACE 1                                                     R4 K4541500
*********************************************************************** K4542000
*        OPERAND IS RMTNNN(-NNN)                                      * K4542500
*********************************************************************** K4543000
CDURMTS  $CFCVB POINTER=(WD),NOK=CDURERR CONVERT OPERAND             R4 K4543500
         LA    WA,0                CLEAR THE                         R4 K4544000
         ST    WA,0(,WD)             THE OPERAND                     R4 K4544500
         LTR   R1,R1               TEST LOW REMOTE NUMBER VALIDITY   R4 K4545000
         BNP   CDURERR             BR IF INVALID                    R41 K4545500
         CH    R0,$NUMRJE          TEST HIGH REMOTE NUMBER VALIDITY  R4 K4546000
         BH    CDURERR             BR IF INVALID                    R41 K4546500
CDURMT   BCTR  R0,0                DECREMENT LOW AND                 R4 K4547000
         BCTR  R1,0                 HIGH REMOTE NUMBERS              R4 K4547500
         STC   R0,2(WD)            STORE REMOTE                      R4 K4548000
         STC   R1,1(WD)             RANGE IN OPERAND                 R4 K4548500
         B     CDUINDEX            GO FINISH OPERAND LOOP            R4 K4549000
         SPACE 1                                                     R4 K4549500
CDURERR  SLR   R1,R1               INDICATE NO DEVICE LOCATED        R4 K4550000
         B     CDUGO               FLAG ERROR - DO NEXT OPERAND      R4 K4550500
         EJECT                                                       R4 K4551000
*********************************************************************** K4551500
*        DISPLAY ONE OR MORE REMOTES (VIA RAT)                        * K4552000
*********************************************************************** K4552500
CDUREMOT SLR   WC,WC               CLEAR FIRST AND                   R4 K4553000
         SLR   WE,WE                LAST REMOTE INDICES              R4 K4553500
         IC    WC,1(,WD)           PICK UP FIRST REMOTE DISPLAY      R4 K4554000
         IC    WE,2(,WD)           PICK UP LAST REMOTE TO DISPLAY    R4 K4554500
         MH    WC,=AL2(RATTLE)     COMPUTE RAT                       R4 K4555000
         MH    WE,=AL2(RATTLE)      OFFSETS                          R4 K4555500
         L     R1,$RATABLE         COMPUTE                           R4 K4556000
         LA    WC,0(WC,R1)          HIGH AND LOW                     R4 K4556500
         LA    WE,0(WE,R1)           RAT ADDRESS                     R4 K4557000
         LR    R1,WC               COPY FIRST RAT ADDRESS            R4 K4557500
         B     CDURMGRP            GO DISPLAY RMT GROUP              R4 K4558000
         SPACE 1                                                     R4 K4558500
*********************************************************************** K4559000
*        GENERAL DCT DISPLAY ROUTINE                                  * K4559500
*********************************************************************** K4560000
CDUSPLAY LA    R1,0(,R1)           PURIFY DCT ADDRESS               R41 K4560100
         TM    CDUFLAG2,CDUFLACT   TEST FOR ACTION MODIFIER         R41 K4560200
         BNO   CDUSTEST            BRANCH IF NOT SPECIFIED          R41 K4560300
         CLI   DCTDEVTP-DCTDSECT(R1),DCTLNE  TEST DEVICE TYPE       R41 K4560400
         BNE   CDUZINUS            IF NOT LNE, GO TEST IN USE       R41 K4560500
         OC    MDCTRAT-DCTDSECT(4,R1),MDCTRAT-DCTDSECT(R1)  TEST    R41CK4560600
                                   LINE CONNECTION                  R41 K4560700
         BZ    CDURSUB             IF NOT CONNECTED, SKIP DISPLAY   R41 K4560800
         B     CDUSHTST             ELSE GO DO DISPLAY              R41 K4560900
CDUSTEST TM    CDUFLAG2,CDUFLSTR   TEST FOR STARTED MODIFIER        R41 K4561000
         BNO   CDUSHTST            BRANCH IF NOT - DO DISPLAY       R41 K4561100
         TM    DCTSTAT-DCTDSECT(R1),DCTDRAIN  TEST DEVICE STATUS    R41 K4561200
         BNO   CDUSHTST            NOT DRAINED - GO DO DISPLAY      R41 K4561300
CDUZINUS TM    DCTSTAT-DCTDSECT(R1),DCTINUSE  TEST DEVICE STATUS    R41 K4561400
         BNO   CDURSUB             BRANCH IF NOT IN USE, SKIP DSPLY R41 K4561500
CDUSHTST TM    CDUFLAG2,CDUFLSHT   TEST FOR SHORT MODIFIER          R41 K4561600
         BO    CDUDSPL             FORCE NON-EXTENDED DSPLY IF ON   R41 K4561700
         TM    CDUFLAG1,CDUFLNEX   TEST FOR EXTENED REQUEST         R41 K4561800
         BO    CDUDSPL             IF NO EXTENED REQD, GO DSPLY     R41 K4561900
         ICM   R1,8,=X'0F'         SET HI ORDER FOR EXTENDED DISP   R41 K4562000
CDUDSPL  TM    CDUFLAG1,CDUFLCLS   TEST FOR CLASS CHECK REQUESTED   R41 K4562100
         BNO   CDUDCTD             NO CHECK, BR - GO DSPLY          R41 K4562200
         IC    WA,CDUDEVTP         PICK UP DEVICE CLASS             R41 K4562300
         EX    WA,CDUTM            TEST DEVICE CLASS                R41 K4562400
         IC    WA,CDUMASK          PICK UP BRANCH MASK              R41 K4562500
         EX    WA,CDUBRNCH         EXECUTE BRANCH INSTRUCTION       R41 K4562600
CDUDCTD  $CFDCTD EXT=SET           DISPLAY THE DCT                  R41 K4562700
         OI    CDUFLAG2,CDUFLFND   SHOW SOMETHING DISPLAYED         R41 K4562800
         EJECT                                                      R41 K4563000
*********************************************************************** K4564000
*        SNA LUNAME SUB-DISPLAY ROUTINE                               * K4564500
*********************************************************************** K4565000
         TM    CDUFLAG1,CDUFLLU    TEST FOR LUNAME SUB-DISPLAY REQD  R4 K4565500
         BNO   CDURSUB             NO, BR - CONTINUE CURRENT DISPLAY R4 K4566000
         CLI   DCTDEVTP-DCTDSECT(R1),DCTLOG TEST - LOGON DCT   @OZ38617 K4566500
         BE    CDULOGLU            YES, SKIP OTHER TESTS - DSPLY LUS R4 K4567000
         TM    DCTDEVTP-DCTDSECT(R1),DCTRJE TEST FOR RJE DCT         R4 K4567500
         BNO   CDURSUB             NO, BR - CONTINUE CURRENT DISPLAY R4 K4568000
         TM    MDCTTYPE-DCTDSECT(R1),DCTPSNA TEST FOR SNA DEVICES    R4 K4568500
         BNO   CDURSUB             NO, BR- CONTINUE CURRENT DISPLAY  R4 K4569000
CDULOGLU L     WB,MDCTICE-DCTDSECT(,R1) GET ASSOC. ICE ADDR FROM DCT R4 K4569500
         LTR   WB,WB               TEST FOR ANY SESSION PRESENT      R4 K4570000
         BZ    CDURSUB             NO, BR- CONTINUE CURRENT DISPLAY  R4 K4570500
         MVI   COMMAND,C' '        CLEAR THE                         R4 K4571000
         MVC   COMMAND+1(L'COMMAND-1),COMMAND MESSAGE AREA           R4 K4571500
         MVC   COMMAND+23(14),=CL14'SESSION(S) -' MOVE IN HEADING    R4 K4572000
CDULUOOP LA    WA,COMMAND+23+14    INDENT LUNAME DISPLAY             R4 K4572500
         MVC   0(L'ICESYMB,WA),ICESYMB-ICEDSECT(WB) MOVE IN LUNAME   R4 K4573000
         LA    WA,L'ICESYMB+1(,WA) BUMP PAST SNA LUNAME              R4 K4573500
         TM    DCTDEVTP-DCTDSECT(R1),DCTPRPU TEST FOR REMOTE DEVICES R4 K4574000
         BNO   CDULUALC            NO, BR--GO TEST FOR ALLOCATION    R4 K4574500
         TM    MDCTSTAT-DCTDSECT(R1),DCTPSUSP CHK FOR SUSPNDED SESN  R4 K4575000
         BNO   CDULUALC            NO, BR--TRY OTHER STATES          R4 K4575500
         MVC   0(9,WA),=CL9'SUSPENDED' SHOW SESSION SUSPENDED        R4 K4576000
         B     CDULUDSP            GO DISPLAY SUSPENDED SESSION      R4 K4576500
CDULUALC MVC   0(9,WA),=CL9'INACTIVE' ASSUME SESSION INACTIVE        R4 K4577000
         TM    ICESTAT-ICEDSECT(WB),ICEALLOC TEST ASSUMPTION         R4 K4577500
         BZ    CDULUCLO            INACTIVE, BR--GO TEST FOR CLOSING R4 K4578000
         CLI   DCTDEVTP-DCTDSECT(R1),DCTLNE TEST FOR LINE SUB DSPLY  R4 K4578500
         BE    CDULUNX             YES, BR--SKIP ACTIVE SESSIONS     R4 K4579000
         MVC   0(9,WA),=CL9'ACTIVE' SHOW SESSION ACTIVE              R4 K4579500
         TM    ICESTAT-ICEDSECT(WB),ICEDRAIN TEST FOR DRAINING       R4 K4580000
         BZ    CDULULOG            NO, SKIP                          R4 K4580500
         MVC   0(9,WA),=CL9'DRAINING' SHOW SESSION DRAINING          R4 K4581000
         B     CDULULOG            GO TEST FOR TAGGING AND DISPLAY   R4 K4581500
CDULUCLO TM    ICESTAT-ICEDSECT(WB),ICECLOSE TEST FOR CLOSING        R4 K4582000
         BNO   CDULULOG            NO, BR--GO TEST TAGGING AND DSPLY R4 K4582500
         MVC   0(9,WA),=CL9'CLOSING' SHOW SESSION CLOSING            R4 K4583000
CDULULOG LA    WA,10(,WA)          MOVE PAST STATUS INDICATION       R4 K4583500
         CLI   DCTDEVTP-DCTDSECT(R1),DCTLOG TEST FOR LOGON DCT DSPLY R4 K4584000
         BNE   CDULUDSP            NO, BR--NO TAGGING REQD           R4 K4584500
         LR    R0,R1               SAVE LOGON DCT ADDRESS            R4 K4585000
         L     R1,ICELDCT-ICEDSECT(,WB) PICK UP ASSOC LINE DCT ADDR  R4 K4585500
         LTR   R1,R1               TEST FOR LINE DCT PRESENT         R4 K4586000
         BZ    CDULUTGD            NO, BR--NO TAGGING REQD           R4 K4586500
         MVI   0(WA),C'('          INSERT OPEN PAREN INTO MSG        R4 K4587000
         MVC   1(L'DCTDEVN,WA),DCTDEVN-DCTDSECT(R1) PUT LINE ID INTO R4CK4587500
                                                        MESSAGE      R4 K4588000
         MVI   9(WA),C')'          CLOSE THE PAREN                   R4 K4588500
CDULUTGD LR    R1,R0               RELOAD THE LOGON DCT ADDRESS      R4 K4589000
CDULUDSP STM   R1,WA,COMDWORK      SAVE REGISTERS ACROSS WTO         R4 K4589500
         $CWTO L=66                DISPLAY LUNAME MESSAGE            R4 K4590000
         LM    R1,WA,COMDWORK      RELOAD REGISTERS                  R4 K4590500
         MVC   COMMAND+23(L'COMMAND-22),COMMAND+22 BLANK USED AREA   R4 K4591000
CDULUNXT TM    DCTDEVTP-DCTDSECT(R1),DCTDEV  TEST FOR RJE DEVICES   R41 K4591500
         BNZ   CDURSUB             YES, BR--NO CHAINING NEEDED      R41 K4592000
CDULUNX  LA    WB,ICEAPCHN-ICEDSECT(,WB) ASSUME LOGON DCT CHAIN USED R4 K4592500
         CLI   DCTDEVTP-DCTDSECT(R1),DCTLOG TEST ASSUMPTION          R4 K4593000
         BE    CDULUCHN            NO, BR--CHAIN TO NEXT ICE         R4 K4593500
         LA    WB,(ICEALCHN-ICEAPCHN)(,WB) BUMP TO LNE DCT CHN FLD   R4 K4594000
CDULUCHN L     WB,0(,WB)           PICK UP NEXT ICE ADDRESS          R4 K4594500
         LA    WB,0(,WB)           PURIFY ADDRESS                    R4 K4595000
         LTR   WB,WB               TEST FOR END OF CHAIN             R4 K4595500
         BNZ   CDULUOOP            NO, BR--CONTINUE ICE SUB DSPLY    R4 K4596000
         SPACE 1                                                     R4 K4596500
*********************************************************************** K4597500
*        REMOTE SUB-DISPLAY CODE                                      * K4598000
*********************************************************************** K4598500
CDURSUB  TM    CDUFLAG1,CDUFLRMT   TEST FOR REMOTE-SUB DISPLAY REQD  R4 K4599000
         BNO   CDUGRPLP            NO, BR CONTINUE MAIN LOOP         R4 K4599500
         TM    CDUFLAG2,CDUFLSUB   ARE WE IN RMT SUB-DISPLAY LOOP    R4 K4600000
         BNZ   CDUSUB              YES, CONTINUE SUB-DISPLAY         R4 K4600500
         CLI   DCTDEVTP-DCTDSECT(R1),DCTLNE TEST FOR LINE DCT        R4 K4601000
         BNE   CDUGRPLP            NO, CONTINUE MAIN LOOP            R4 K4601500
         OI    CDUFLAG2,CDUFLSUB   SET SUB-DISPLAY IN PROGRESS       R4 K4602000
         LR    WC,R1               SAVE LINE DCT POINTER             R4 K4602500
CDUSUB   L     R1,MDCTDCT-DCTDSECT(,R1) PICK UP NEXT RMT DCT         R4 K4603000
         LTR   R1,R1               TEST FOR REMOTE DCT PRESENT       R4 K4603500
         BNZ   CDUSPLAY            YES, BR - GO DISPLAY REMOTE DCT   R4 K4604000
         NI    CDUFLAG2,255-CDUFLSUB SHOW OUT OF REMOTE LOOP         R4 K4604500
         LR    R1,WC               RESTORE LINE DCT/RAT POINTER      R4 K4605000
         SPACE 1                                                     R4 K4605500
*********************************************************************** K4606000
*        GROUP DCT DISPLAY TERMINATION CODE                           * K4606500
*********************************************************************** K4607000
CDUGRPLP TM    CDUFLAG1,CDUFLGRP   IS THIS A GROUP DISPLAY           R4 K4607500
         BZ    CDULOOP             NO, BR - THEN GO DO NEXT OPERAND  R4 K4608000
         TM    CDUFLAG1,CDUFLRAT   TEST FOR RAT BASED GROUP          R4 K4608500
         BNO   CDUGROUP            NO, BR- PROCESS NORMAL DCT CHAIN  R4 K4609000
CDUGRPL1 LA    WC,RATTLE(,R1)      LOCATE AND SAVE NEXT RAT ENTRY   R41 K4609500
         CLR   WC,WE               TEST FOR END OF RAT (RMT) GROUP   R4 K4610000
         BH    CDULOOP             YES, BR- GO DO NEXT OPERAND       R4 K4610500
CDURMGRP OI    CDUFLAG2,CDUFLSUB   SHOW BACK IN REMOTE SUB-DISPLAY   R4 K4611000
         TM    CDUFLAG2,CDUFLACT   TEST FOR ACTION MODIFIER         R41 K4611100
         BNO   CDURMGP1            BRANCH IF NOT SPECIFIED          R41 K4611200
         L     R1,RATLDCT-RATDSECT(,WC) GET LINE DCT ADDRESS        R41 K4611300
         LA    R1,0(,R1)           PURIFY ADDRESS                   R41 K4611400
         LTR   R1,R1               TEST FOR LINE DCT PRESENT        R41 K4611500
         LR    R1,WC               RESET R1 TO RAT ADDR FOR BRANCH  R41 K4611600
         BZ    CDUGRPL1            BRANCH IF NO LINE DCT            R41 K4611700
CDURMGP1 LNR   R1,WC               LOAD -RAT FOR RAT DISPLAY        R41 K4611800
         $CFDCTD EXT=SET           DISPLAY RAT INFO                 R41 K4611900
         L     R1,RATLDCT-RATDSECT(,WC)  GET LINE DCT ADDRESS        R4 K4612000
         LA    R1,0(,R1)           PURIFY ADDRESS                    R4 K4612100
         LTR   R1,R1               TEST FOR LINE DCT PRESENT         R4 K4612500
         BZ    SKIP290             NO, BR-- GO DISPLAY REMOTE        R4 K4613000
         CL    WC,MDCTRAT-DCTDSECT(,R1) TEST FOR RMT SIGNED ON LINE  R4 K4613500
         BE    CDUSPLAY            YES, BR--GO DISPLAY RMT AND LINE  R4 K4614000
SKIP290  L     R1,RATRDCT-RATDSECT(,WC) GET FIRST REMOTE DCT ADDRESS R4 K4614500
         B     CDUSPLAY            DISPLAY ONLY REMOTE               R4 K4615000
CDUGROUP L     R1,DCTCHAIN-DCTDSECT(,R1) GO FIND NEXT DCT            R4 K4615500
         LA    R1,0(,R1)           PURIFY ADDRESS                    R4 K4616000
         LTR   R1,R1               TEST FOR END OF THE DCT CHAIN     R4 K4616500
         BZ    CDULOOP             YES, BR- DO NEXT OPERAND          R4 K4617000
         EJECT                                                      R41 K4619600
         SPACE 1                                                     R4 K4620000
*********************************************************************** K4620500
*        DCT TYPE-GROUP DISPLAY TERMINATION                           * K4621000
*********************************************************************** K4621500
CDUNOCLS TM    CDUFLAG1,CDUFLTYP   IS THIS A TYPE-GROUP DISPLAY      R4 K4622000
         BNO   CDUSPLAY            NO, BR- NO CHECK - GO DISPLAY DCT R4 K4622500
         IC    R0,CDUDEVTP         PICK UP DCT TYPE FOR COMPARE      R4 K4623000
         CLM   R0,1,DCTDEVTP-DCTDSECT(R1)  COMPARE FOR TERMINATION   R4 K4623500
         BE    CDUSPLAY            EQUAL - CONTINUE DISPLAY LOOP     R4 K4624000
         SPACE 1                                                     R4 K4624500
*********************************************************************** K4625000
*        MAIN DISPLAY LOOP                                            * K4625500
*********************************************************************** K4626000
CDULOOP  LA    WD,4(,WD)           MOVE TO NEXT OPERAND POINTER      R4 K4626500
         CR    WD,WF               TEST FOR END OF OPERANDS          R4 K4627000
         BNH   CDUNEXT             NO, CONTINUE WITH NEW OPERAND     R4 K4627500
         SPACE 1                                                     R4 K4628000
*********************************************************************** K4628500
*        DISPLAY UNIT EXIT                                            * K4629000
*********************************************************************** K4629500
CDUEXIT  DS    0H                                                    R4 K4630000
         TM    CDUFLAG2,CDUFLERR   WERE ANY ERRORS ENCOUNTERED       R4 K4630500
         BZ    CDUEXITC            NO, BR - JUST EXIT                R4 K4631000
         $CRET MSG='INVALID OPERAND(S) DETECTED'                     R4 K4631500
CDUEXITC TM    CDUFLAG2,CDUFLFND   TEST DISPLAY STATUS              R41 K4632000
         BO    CDUEXITN            BRANCH IF DISPLAY DONE           R41 K4632100
         $CRET MSG='NO DEVICE(S) FOUND'  SHOW NO DEVICES DISPLAYED  R41 K4632200
CDUEXITN $CRET ,                   NORMAL RETURN                    R41 K4632300
         SPACE 1                                                     R4 K4632500
CDUTM    TM    DCTDEVTP-DCTDSECT(R1),*-* *** EXECUTED ***            R4 K4633000
CDUBRNCH NOP   CDURSUB             *** EXECUTED ***                 R41 K4633100
         EJECT                                                       R4 K4633500
*********************************************************************** K4634000
*        DISPLAY UNIT FLAG DEFINITONS                                 * K4634500
*********************************************************************** K4635000
CDUFLAG1 EQU   COMNULOP            CDUFLAG1 DEFINITION               R4 K4635500
         SPACE 1                                                     R4 K4636000
CDUFLONE EQU   B'00000000'             SINGLE DCT DISPLAY REQUEST    R4 K4636500
CDUFLGRP EQU   B'10000000'             GROUP DISPLAY REQUEST         R4 K4637000
CDUFLTYP EQU   B'11000000'             TYPE-GROUP DISPLAY REQUEST    R4 K4637500
CDUFLRMT EQU   B'00100000'             REMOTE SUB-DISPLAY REQUEST    R4 K4638000
CDUFLRAT EQU   B'00010000'             RAT BASED DISPLAY REQUEST     R4 K4638500
CDUFLNEX EQU   B'00001000'             NO EXTEND DISPLAY REQUIRED    R4 K4639000
CDUFLCLS EQU   B'00000100'             DCT CLASS SKIP REQUESTED      R4 K4639500
CDUFLLU  EQU   B'00000010'             SNA LUNAME SUBDISPLAY REQD    R4 K4640500
CDUFLMOD EQU   B'00000001'             MODIFIER OPERAND ONLY        R41 K4640600
         SPACE 2                                                     R4 K4641500
CDUDEVTP EQU   COMNULOP+1          TYPE-GROUP DCT TYPE               R4 K4642000
         SPACE 1                                                    R41 K4642100
CDUMASK  EQU   COMNULOP+2          BRANCH MASK VALUE                R41 K4642200
         SPACE 2                                                     R4 K4642500
CDUFLAG2 EQU   COMNULOP+3          CDUFLAG2 DEFINITION              R41 K4643000
         SPACE 1                                                     R4 K4643500
CDUFLSUB EQU   B'10000000'             RMT SUB-DSPLY IN PROGRESS     R4 K4644000
CDUFLERR EQU   B'01000000'             INVALID OPERANDS DETECTED     R4 K4644500
CDUFLFND EQU   B'00100000'             DEVICE FOUND IN DISPLAY      R41 K4644600
CDUFLOPR EQU   B'00010000'             NON-MODIFIER OPERANDS FND    R41 K4644700
CDUFLACT EQU   B'00001000'             ACTIVE ONLY MODIFIER         R41 K4644800
CDUFLSTR EQU   B'00000100'             STARTED ONLY MODIFIER        R41 K4644900
CDUFLSHT EQU   B'00000010'             SHORT MODIFIER               R41 K4645000
         SPACE 1                                                    R41 K4645100
*********************************************************************** K4645500
*        DISPLAY UNIT OPERAND TABLE DEFINITON                         * K4646000
*********************************************************************** K4646500
CDUTBFL1 EQU   0                   DISPLAY REQUEST FLAGS             R4 K4647000
CDUTBTYP EQU   1                   DEVICE TYPE VALUE                 R4 K4647500
CDUTBLEN EQU   2                   COMPARE LENGTH FOR OPERAND CHECK  R4 K4648000
CDUTBMSK EQU   3                   BRANCH MASK FOR CLASS CHECK      R41 K4648500
CDUTBKEY EQU   4                   OPERAND KEYWORD VALUE             R4 K4649000
CDUTBRTN EQU   8                   ADDRESS OF DISPLAY ROUTINE        R4 K4649500
CDUTBSET EQU   12                  PRE-PROCESSOR SETUP INSTRUCTION   R4 K4650000
CDUTBSZ  EQU   16                  OPERAND TABLE ELEMENT SIZE        R4 K4650500
         EJECT                                                       R4 K4651000
*********************************************************************** K4651500
*        DISPLAY UNIT OPERAND TABLE                                   * K4652000
*********************************************************************** K4652500
         SPACE 1                                                     R4 K4653000
CDUTABLE DS    0F                                                    R4 K4653500
         SPACE 1                                                     R4 K4654000
         DC    AL1(CDUFLNEX+CDUFLGRP+CDUFLCLS),AL1(DCTINR),AL1(0)    R4 K4654500
         DC    AL1(O*16)                                            R41 K4655000
         DC    CL4'NULL'           PLAIN $DU - DISPLAY ALL LOCAL     R4 K4655500
         DC    A(CDUSPLAY)         DEVICES (NON-EXTENDED FORM)       R4 K4656000
         L     R1,$DCTPOOL                                           R4 K4656500
         SPACE 1                                                     R4 K4657000
         DC    AL1(CDUFLTYP),AL1(DCTRDR),AL1(3),AL1(0)               R4 K4657500
         DC    CL4'RDRS'           DISPLAY ALL LOCAL READERS         R4 K4658000
         DC    A(CDUSPLAY)                                           R4 K4658500
         L     R1,$RDRDCT                                            R4 K4659000
         SPACE 1                                                     R4 K4659500
         DC    AL1(CDUFLTYP),AL1(DCTPRT),AL1(3),AL1(0)               R4 K4660000
         DC    CL4'PRTS'           DISPLAY ALL LOCAL PRINTERS        R4 K4660500
         DC    A(CDUSPLAY)                                           R4 K4661000
         L     R1,$PRTDCT                                            R4 K4661500
         SPACE 1                                                     R4 K4662000
         DC    AL1(CDUFLTYP),AL1(DCTPUN),AL1(3),AL1(0)               R4 K4662500
         DC    CL4'PUNS'           DISPLAY ALL LOCAL PUNCHES         R4 K4663000
         DC    A(CDUSPLAY)                                           R4 K4663500
         L     R1,$PUNDCT                                            R4 K4664000
         SPACE 1                                                     R4 K4665000
         DC    AL1(CDUFLTYP),AL1(DCTLOG),AL1(3),AL1(0)               R4 K4665500
         DC    CL4'LGNS'           DISPLAY ALL LOGON DCTS            R4 K4666000
         DC    A(CDUSPLAY)                                           R4 K4666500
         L     R1,$LOGNDCT                                           R4 K4667000
         SPACE 1                                                     R4 K4668000
         DC    AL1(CDUFLTYP+CDUFLRMT),AL1(DCTLNE),AL1(3),AL1(0)      R4 K4668500
         DC    CL4'LNES'           DISPLAY ALL LINES                 R4 K4669000
         DC    A(CDUSPLAY)                                           R4 K4669500
         L     R1,$LNEDCT                                            R4 K4670000
         SPACE 1                                                     R4 K4670500
         DC    AL1(CDUFLONE+CDUFLRMT+CDUFLLU),AL1(0),AL1(3),AL1(0)   R4 K4671500
         DC    CL4'LINE'           DISPLAY A LINE                    R4 K4673500
         DC    A(CDUSPLAY)                                           R4 K4674000
         B     CDUNOFND                                              R4 K4674500
         SPACE 1                                                     R4 K4675000
         DC    AL1(CDUFLONE+CDUFLRMT+CDUFLLU),AL1(0),AL1(2),AL1(0)   R4 K4676000
         DC    CL4'LNE*'           DISPLAY A LINE                    R4 K4678000
         DC    A(CDUSPLAY)                                           R4 K4678500
         B     CDUNOFND                                              R4 K4679000
         SPACE 1                                                     R4 K4679500
         DC    AL1(CDUFLGRP),AL1(0),AL1(2),AL1(0)                    R4 K4680000
         DC    CL4'RDI*'           DISPLAY ALL INTERNAL READERS      R4 K4680500
         DC    A(CDUSPLAY)                                           R4 K4681000
         L     R1,$INRDCT                                            R4 K4681500
         SPACE 1                                                     R4 K4682000
         DC    AL1(CDUFLGRP),AL1(0),AL1(2),AL1(0)                    R4 K4682500
         DC    CL4'ALL*'           DISPLAY ALL LOCAL DEVICES         R4 K4683000
         DC    A(CDUSPLAY)                                           R4 K4683500
         L     R1,$DCTPOOL                                           R4 K4684000
         SPACE 1                                                     R4 K4684500
         DC    AL1(CDUFLGRP+CDUFLRAT+CDUFLRMT),AL1(0),AL1(3),AL1(0)  R4 K4685000
         DC    CL4'RMTS'           DISPLAY ALL REMOTES               R4 K4685500
         DC    A(CDUREMOT)                                           R4 K4686000
         B     CDURMALL                                              R4 K4686500
         SPACE 1                                                     R4 K4687000
         DC    AL1(CDUFLGRP+CDUFLRMT+CDUFLRAT+CDUFLLU),AL1(0),AL1(2) R4 K4688000
         DC    AL1(0)                                                R4 K4690000
         DC    CL4'RMT*'           DISPLAY ONE OR MORE REMOTES       R4 K4690500
         DC    A(CDUREMOT)                                           R4 K4691000
         B     CDURMTS                                              R41 K4691100
         SPACE 1                                                    R41 K4691200
         DC    AL1(CDUFLGRP+CDUFLCLS),AL1(DCTLNE),AL1(1),AL1(Z*16)  R41 K4691300
         DC    CL4'TP**'           ALL TP                           R41 K4691400
         DC    A(CDUSPLAY)                                          R41 K4691500
         L     R1,$DCTPOOL                                          R41 K4691600
         SPACE 1                                                    R41 K4691700
         DC    AL1(CDUFLMOD),AL1(0),AL1(2),AL1(0)                   R41 K4691800
         DC    CL4'ACT*'           ACTIVE ONLY MODIFIER             R41 K4691900
         DC    A(CDULOOP)                                           R41 K4692000
         OI    CDUFLAG2,CDUFLACT                                    R41 K4692100
         SPACE 1                                                    R41 K4692200
         DC    AL1(CDUFLMOD),AL1(0),AL1(2),AL1(0)                   R41 K4692300
         DC    CL4'STAR'           STARTED ONLY MODIFIER            R41 K4692400
         DC    A(CDULOOP)                                           R41 K4692500
         OI    CDUFLAG2,CDUFLSTR                                    R41 K4692600
         SPACE 1                                                    R41 K4692700
         DC    AL1(CDUFLMOD),AL1(0),AL1(1),AL1(0)                   R41 K4692800
         DC    CL4'SHOR'           SHORT ONLY MODIFIER              R41 K4692900
         DC    A(CDULOOP)                                           R41 K4693000
         OI    CDUFLAG2,CDUFLSHT                                    R41 K4693100
         SPACE 1                                                    R41 K4693200
         DC    AL1(CDUFLONE+CDUFLLU),AL1(0),AL1(0),AL1(0)           R41 K4693300
         DC    CL4'****'           DISPLAY A SINGLE SPECIFIC DCT     R4 K4695000
         DC    A(CDUSPLAY)                                           R4 K4695500
         DC    A(0)                                                  R4 K4696000
         EJECT                                                          K4696500
         SPACE 2                                                        K4697000
         LTORG ,                                                     R4 K4697500
         TITLE 'HASP COMMAND PROCESSOR HASPCRM1 - REMOTE JOB ENTRY COMMCK5430000
               ANDS'                                                 R4 K5430500
HASPCRM1 $COMGRUP DM,R             REMOTE JOB ENTRY COMMANDS            K5431000
*********************************************************************** K5431500
*                                                                     * K5432000
*        $D M LOC,TEXT -- DISPLAY MESSAGE AT LOCATION                 * K5432500
*                                                                     * K5433000
*        $ D M JOBID,TEXT -- DISPLAY MSG ON EXECUTING JOB'S LOG       * K5435600
*                                                                     * K5435700
*        $ D M 'JOBNAME',TEXT -- DISPLAY MSG ON EXECUTING JOB'S LOG   * K5435800
*                                                                     * K5435900
*        LOC   = R N-NN            REMOTE NUMBER OR RANGE (0=LOCAL)   * K5436100
*        TEXT  = MESSAGE TEXT                                         * K5440000
*                                                                     * K5440500
*********************************************************************** K5441000
         USING JQEDSECT,R1                                           R4 K5441500
CDM      DS    0H                                                    R4 K5442000
         SLR   R0,R0               ZERO WORK                         R4 K5442500
         ST    R0,CDMRRL           SET DEFAULT REMOTE                R4 K5445000
         ST    R0,CDMRRH           RANGE                             R4 K5445500
         CLI   COMOPRND+1,C'R'     REMOTE TRANSMISSION               R4 K5450500
         BE    CDMCR               CONVERT REMOTE RANGE              R4 K5451000
         B     CDMJ                GO TEST FOR '$DMJ' COMMAND       R41 K5453400
CDMERR   L     R1,0(0,WD)          POINT TO INVALID OPERAND          R4 K5453500
         $CFINVO OPERAND=(R1)      INVALID OPERAND                   R4 K5454000
CDMCR    $CFCVB POINTER=(WD),NOK=CDMERR CONVERT REMOTE RANGE         R4 K5481000
         L     LINK,$SSVT          POINT TO SSVT                     R4 K5484500
         CH    R0,$SVROUT-SSVT(,LINK) ABOVE OUR LIMIT                R4 K5485000
         BH    CDMERR              ERROR IF YES                      R4 K5485500
CDMCSRR  STM   R0,R1,CDMRRH        SET HIGH/LOW RANGES               R4 K5486000
CDMPM    TM    COMAUTH,COMR        IS SOURCE REMOTE RESTRICTED       R4 K5486500
         BO    CDMPMA              NEGATE ANY RANGES IF YES          R4 K5487000
         TM    COMAUTH,COMJ+COMD+COMS DISPLAY ONLY                   R4 K5487500
         BNO   CDMPMB              ALLOW RANGES IF NOT               R4 K5488000
CDMPMA   DS    0H                                                    R4 K5489000
         MVC   CDMRRL,CDMRRH       FORCE SAME REMOTE                 R4 K5491500
CDMPMB   BXH   WD,WE,CDMERR        ANY TEXT                          R4 K5492000
         L     WA,0(,WD)           POINT TO START                    R4 K5492500
         L     WB,4(,WD)           POINT TO END + 2                  R4 K5493000
         SLR   WB,WA               CALCULATE LENGTH                  R4 K5493500
         BCTR  WB,0                BACK UP TO FULL TEXT LENGTH       R4 K5494000
         BCTR  WA,0                INCLUDE COMMA                     R4 K5494500
         EX    WB,CDMTEXT          MOVE COMMA AND TEXT               R4 K5495000
         LA    WF,5(,WB)           SET FULL MESSAGE LENGTH           R4 K5495500
         MVC   COMPNTER(7),COMFLAG COPY SOURCE INFO                  R4 K5496000
         $CWTO MSG='OK',TRUNC=YES  TRUNCATE MLWTO                    R4 K5496500
         SLR   R0,R0               ZERO WORK                         R4 K5497000
         IC    R0,COMUCM-COMFLAG+COMPNTER PICK UP CON OR RMT NUMBER  R4 K5497500
         MVC   COMMAND(4),=C'C  0' SET FOR LOGICAL CONSOLE           R4 K5498000
         $CFCVE VALUE=(R0)         CONVERT TO EBCDIC                 R4 K5498500
         TM    COMPNTER,CMBFLAGW   IS THIS FROM A REMOTE             R4 K5499000
         BZ    SKIP460             SKIP IF NOT                       R4 K5499500
         MVI   COMMAND,C'R'        SET REMOTE IDENTIFIER             R4 K5500000
SKIP460  TM    COMPNTER,CMBFLAGW+CMBFLAGU REMOTE OR UCM              R4 K5500500
         BZ    CDMPMC              SKIP IF EITHER                   R41 K5501000
         MVC   COMMAND+1(3),COMDWORK+2 SET SOURCE ID                 R4 K5501500
CDMPMC   DS    0H                                                   R41 K5501700
         LA    WB,CDMRRH           POINT TO RANGES                   R4 K5502500
         LM    WD,WE,0(WB)         PICK UP RANGES                    R4 K5503000
CDML     LA    WC,1                SET RANGE INCREMENT               R4 K5508000
CDMLL    ST    WE,4(,WB)           SET CURRENT VALUE                 R4 K5508500
         MVC   COMFLAG(14),CDMWTO  PUT MASK IN                       R4 K5509000
         CLI   CDMRRL+3,0          LOCAL SYSTEM                      R4 K5509500
         BZ    CDMLOC              DISPLAY TO LOCAL IF YES           R4 K5510000
         MVI   COMFLAG,CMBFLAGW    SET WORKSTATION AS RECEIVER       R4 K5510500
         MVC   COMRMT,CDMRRL+3     SET REMOTE NUMBER                 R4 K5511000
CDMLOC   MVC   COMTO,$SYSID        SET SYSTEM IDENTIFICATION         R4 K5512000
CDMPUT   $CWTO L=(WF)              SEND MESSAGE                      R4 K5520500
         BXLE  WE,WC,CDMLL         LOOP                              R4 K5521000
         $CRET ,                   RETURN                            R4 K5521500
CDMTEXT  MVC   COMMAND+4(*-*),0(WA) *** EXECUTE ONLY ***             R4 K5522000
*********************************************************************** K5524000
*                                                                     * K5524500
*        $DM EQUATES                                                  * K5525000
*                                                                     * K5525500
*********************************************************************** K5526000
CDMRRH   EQU   COMREGSV,4          REMOTE RANGE HIGH VALUE           R4 K5527000
CDMRRL   EQU   CDMRRH+4,4          REMOTE RANGE LOW VALUE            R4 K5531000
CDMWTO   $WTO  PRI=$HI,CLASS=$ALWAYS,JOB=NO,ROUTE=X'0100',MF=LX      R4 K5531500
CDMMID   $MSG  001                 MESSAGE ID                           K5532000
         EJECT                                                      R41 K5532100
*********************************************************************** K5532200
*                                                                     * K5532300
*        $ D M JOBID,TEXT    AND    $ D M 'JOBNAME',TEXT              * K5532400
*                                                                     * K5532500
*        DISPLAY MSG TO EXECUTING JOB, STC, TSU                       * K5532600
*                                                                     * K5532700
*********************************************************************** K5532800
         PUSH  USING               SAVE STATUS OF BASE REGS         R41 K5532900
         SPACE 1                                                    R41 K5533000
CDMJ     DS    0H                  CHECK FOR $DM TO ACTIVE JOB      R41 K5533100
         MVC   COMJNAME,=CL8' '    BLANK OUT JOB NAME SLOT          R41 K5533200
         SLR   WA,WA               SET OFFSET FOR JOB NO            R41 K5533300
         CLI   COMOPRND+1,C'J'     CHECK FOR JOB                    R41 K5533400
         BE    CDMJOBID            BRANCH IF YES TO EXTRACT JOBID   R41 K5533500
         LH    WA,=H'10000'        SET OFFSET FOR STC NO            R41 K5533600
         CLI   COMOPRND+1,C'S'     CHECK FOR STC                    R41 K5533700
         BE    CDMJOBID            BRANCH IF YES TO EXTRACT JOBID   R41 K5533800
         ALR   WA,WA               SET OFFSET FOR TSU NO            R41 K5533900
         CLI   COMOPRND+1,C'T'     CHECK FOR TSU                    R41 K5534000
         BE    CDMJOBID            BRANCH IF YES TO EXTRACT JOBID   R41 K5534100
         CLI   COMOPRND+1,C''''    SEE IF JOBNAME (STARTS W/ QUOTE) R41 K5534200
         BNE   CDMERR              ERROR IF NOT                     R41 K5534300
         LA    R1,COMOPRND+2       POINT TO 1ST CHAR OF JOBNAME     R41 K5534400
         L     WC,4(,WD)           POINT TO END OF NAME + 2         R41 K5534500
         SLR   WC,R1               COMPUTE MACHINE                  R41 K5534600
         SH    WC,=H'3'              TEXT LENGTH                    R41 K5534700
         BM    CDMERR              ERROR IF NOT VALID               R41 K5534800
         LA    R0,7                ENSURE                           R41 K5534900
         CLR   WC,R0                 LENGTH                         R41 K5535000
         BNH   CDMJEX                NOT                            R41 K5535100
         LR    WC,R0                 OVER 7                         R41 K5535200
CDMJEX   EX    WC,CDMJNMV          MOVE IN JOB NAME                 R41 K5535300
         SLR   WC,WC               SHOW JQE NOT FOUND YET           R41 K5535400
CDMJSCAN DS    0H                  BRANCH HERE TO RE-SCAN           R41 K5535500
        $CFJSCAN PROCESS=CDMJCK,   SCAN JOB QUEUE,                  R41CK5535600
               EMPTY=CDMJNJF,        LOOKING FOR                    R41CK5535700
               NEXT=CDMJNEXT,        MATCHING                       R41CK5535800
               IGNORE=CDMJNG         JOBNAME                        R41 K5535900
         LTR   WA,WC               AT END OF SCAN, CHECK FOR ONLY 1 R41 K5536000
         BNM   CDMJXEQ               JOB FOUND, BRANCH IF SO        R41 K5536100
        $CRET  ,                   EXIT IF ERROR                    R41 K5536200
CDMJNJF  CLI   COMJNAME,C' '       SEE IF JOBNAME SUPPLIED          R41 K5536300
         BNE   CDMJNJF2              BRANCH IF SO                   R41 K5536400
        $CRET  MSG='JOB(S) NOT FOUND'  EXIT WITH DIAGNOSTIC         R41 K5536500
CDMJNJF2 MVC   COMMAND(8),COMJNAME CONSTRUCT ERROR MESSAGE          R41 K5536600
         MVC   COMMAND+8(14),=C' JOB NOT FOUND'                     R41 K5536700
        $CRET  L=8+14              EXIT WITH ERROR MESSAGE          R41 K5536800
CDMJCK   CLC   JQEJNAME,COMJNAME   SEE IF DESIRED JOBNAME,          R41 K5536900
         BNE   CDMJNG                CONTINUE SCAN IF NOT           R41 K5537000
         LTR   WC,WC               SEE IF FOUND BEFORE,             R41 K5537100
         BNZ   CDMJCK1               BRANCH IF SO                   R41 K5537200
         LR    WC,R1               SHOW JQE FOUND                   R41 K5537300
         B     CDMJNEXT            CONTINUE SCAN                    R41 K5537400
CDMJCK1  BM    CDMJDISP            BRANCH IF IN 'DISPLAY' MODE      R41 K5537500
         MVC   COMMAND(8),COMJNAME BUILD ERROR MESSAGE              R41 K5537600
         MVC   COMMAND+8(20),=C' MULTIPLE JOBS FOUND'               R41 K5537700
        $CWTO  L=8+20              ISSUE DISGNOSTIC                 R41 K5537800
         ICM   WC,8,=X'80'         SHIFT TO 'DISPLAY' MODE          R41 K5537900
         B     CDMJSCAN              AND RESTART SCAN AT THE TOP    R41 K5538000
CDMJDISP $CFJMSG JOBQE=(R1),       DISPLAY INFO ABOUT               R41CK5538100
               TYPE=CALL             DUPLICATE JOB                  R41 K5538200
         B     CDMJNEXT            RESUME SCAN                      R41 K5538300
CDMJOBID $CFCVB POINTER=(WD),NOK=CDMERR  EXTRACT JOBID              R41 K5538400
         CLR   R0,R1               RANGE CANNOT BE SPECIFIED        R41 K5538500
         BNE   CDMERR              ERROR IF RANGE                   R41 K5538600
         ALR   R1,WA               ADD IN JOB/STC/TSU OFFSET        R41 K5538700
        $QLOC  (R1)                SEE IF SPECIFIED JOB EXISTS      R41 K5538800
         BZ    CDMJNJF             ERROR IF JOB NOT FOUND           R41 K5538900
         LR    WA,R1               SAVE JQE POINTER IN WA           R41 K5539000
         MVC   COMJNAME,QUEJNAME(WA) SAVE JOB NAME                  R41 K5539100
CDMJXEQ  DS    0H                  ENTRY FROM $DM'JOBNAME','TEXT    R41 K5539200
         TM    QUETYPE(WA),$XEQ    TEST FOR EXECUTION               R41 K5539300
         BZ    CDMJERR             ERROR IF NOT                     R41 K5539400
         CLI   QUETYPE(WA),$XEQ    RETEST FOR EXECUTION             R41 K5539500
         BE    CDMJERR             ERROR IF REALLY CONVERSION       R41 K5539600
         IC    R0,QUEFLAGS(WA)     PICK UP BUSY FLAGS FOR JOB       R41 K5539700
         N     R0,=A(QUEBUSY)      ISOLATE BUSY SYSTEM ID           R41 K5539800
         CLM   R0,1,$SIDBUSY       SEE IF EXECUTING ON OUR SYSTEM   R41 K5539900
         BNE   CDMJERR             ERROR IF NOT                     R41 K5540000
         BXH   WD,WE,CDMERR        MAKE SURE TEXT WAS SPECIFIED     R41 K5540100
         LA    R0,2                SET CELL                         R41 K5540200
         LR    R1,R0                 CLAIM ID                       R41 K5540300
         LA    R4,S34DL            LENGTH OF REQUIRED CELL          R41 K5540400
        $GETCEL NONE=CDMJEND       GET CELL FOR QUEUEING MESSAGE    R41 K5540500
         LR    R3,R1               SET UP ADDRESSABILITY            R41 K5540600
         USING S34DSECT,R3           ON CELL                        R41 K5540700
         MVC   S34DTIME-1(CDMJEDTL),CDMJEDIT MOVE EDIT & FILL CHARS R41 K5540800
         TIME  DEC                 GET TIME OF DAY                  R41 K5540900
         ST    R0,PCER0            STORE HHMMSSTH FOR EDIT          R41 K5541000
         ED    S34DTIME-1(L'S34DTIME+1),PCER0 EDIT TIME OF DAY      R41 K5541100
         TM    COMFLAG,CMBFLAGU    IF MSG FROM LOCAL CONSOLE,       R41 K5541200
         BO    CDMVCTXT              LEAVE ID AT 'OPER'             R41 K5541300
         MVC   S34EDIT,=X'D9202120' MOVE 'R' & EDIT PATTERN         R41 K5541500
         SLR   R0,R0               PICK UP                          R41 K5541600
         IC    R0,COMRMT             REMOTE NUMBER                  R41 K5541700
CDMJCVD  CVD   R0,PCER1            CREATE DECIMAL NUMBER            R41 K5542900
         LA    R1,S34EDIT+3        PRESET SIGNIF. CHAR. POINTER     R41 K5543000
         EDMK  S34EDIT,PCER1+6     EDIT NUMBER AND                  R41 K5543100
         MVC   S34EDIT+1(4),0(R1)    LEFT-JUSTIFY                   R41 K5543200
CDMVCTXT L     R1,0(,WD)           POINT TO START OF TEXT           R41 K5543300
         L     R15,4(,WD)          POINT TO END OF TEXT PLUS 2      R41 K5543400
         SLR   R15,R1              COMPUTE LENGTH                   R41 K5543500
         BCTR  R15,0                 FOR EXECUTED                   R41 K5543600
         BCTR  R15,0                 MVC                            R41 K5543700
         LA    R0,L'S34DTEXT-(S34MSG-S34HEADR)-1 LOAD MAX LENGTH    R41 K5543800
         CLR   R15,R0              IF TEXT                          R41 K5543900
         BNH   CDMJEX2               TOO LONG,                      R41 K5544000
         LR    R15,R0                TRUNCATE                       R41 K5544100
CDMJEX2  EX    R15,CDMS34MV        MOVE TEXT TO MSG CELL            R41 K5544200
         LA    R15,S34MSG-S34DTIME+1(,R15) COMPUTE MSG LENGTH       R41 K5544300
         STH   R15,S34DMSGL          AND STORE IN CELL              R41 K5544400
         LA    R0,S34DL            SET TOTAL LENGTH                 R41 K5544500
         STH   R0,S34DLN             OF CELL                        R41 K5544600
        $GETLOK ,                  GET LOCAL, CMS LOCKS             R41 K5544700
         L     R14,$SSVT           POINT REG 14 TO SSVT             R41 K5544800
         USING SSVT,R14            SSVT ADDRESSABILITY              R41 K5544900
         USING SJBDSECT,R1         SJB ADDRESSABILITY               R41 K5545000
         LR    R0,WA               RELOAD JQE ADDRESS          @OZ40028 K5545020
         SL    R0,$JOBQPTR         REDUCE ADDRESS TO OFFSET    @OZ40028 K5545040
         L     R1,$SVJXCLS         POINT TO BATCH JOB CHAIN         R41 K5545100
         CLC   QUEJOBNO(,WA),=H'10000' CHECK FOR BATCH JOB          R41 K5545200
         BNH   CDMSJBLP            BRANCH IF SO                     R41 K5545300
         L     R1,$SVJXNUM         POINT TO STC/TSU CHAIN           R41 K5545400
CDMSJBLP LTR   R1,R1               CHECK FOR END OF CHAIN           R41 K5545500
         BZ    CDMFRELK            BR TO FREE LOCK IF SO            R41 K5545600
         CLM   R0,7,SJBJQOFF+1     TEST JQE OFFSET             @OZ40028 K5545700
         BE    CDMSJBOK            BR IF THIS IS THE SJB WE WANT    R41 K5545800
         L     R1,SJBXQCHN         CHAIN TO NEXT                    R41 K5545900
         B     CDMSJBLP            LOOP                             R41 K5546000
CDMSJBOK L     R15,S34DCCEW        SET OWNING SJB ID                R41 K5546100
         ST    R1,CCESJB-CCEDSECT(,R15)  IN CELL                    R41 K5546200
         MVC   S34DJOB,SJBJOBID    SET JOBID IN MESSAGE             R41 K5546300
         MODESET EXTKEY=ZERO       ZERO PROTECT KEY FOR QUEUEING    R41 K5546400
         L     R15,SJBLOGQ         POINT TO CHAIN OF THINGS TO LOG  R41 K5546500
CDMCSLP  ST    R15,S34DNEXT        PUT CHAIN POINTER IN OUR CELL    R41 K5546600
         CS    R15,R3,SJBLOGQ      TRY TO ADD CELL TO CHAIN         R41 K5546700
         BNE   CDMCSLP             LOOP IF UNSUCCESSFUL             R41 K5546800
         MODESET EXTKEY=HASP       RETURN TO REGULAR KEY            R41 K5546900
         DROP  R14                 DROP SSVT ADDRESSABILITY         R41 K5547000
CDMFRELK $FRELOK ,                 RELEASE CMS, LOCAL LOCKS         R41 K5547100
         LTR   R1,R1               SEE IF SJB WAS FOUND             R41 K5547200
         BNZ   CDMJEND             BRANCH IF SO                     R41 K5547300
         LR    R1,R3               POINT R1 TO CELL                 R41 K5547400
        $FRECEL ,                  FREE CELL CONTAINING MESSAGE     R41 K5547500
CDMJERR  MVC   COMMAND(8),COMJNAME CONSTRUCT ERROR MESSAGE          R41 K5547600
         MVC   COMMAND+8(22),=C' JOB NOT EXECUTING ON '             R41 K5547700
         MVC   COMMAND+8+22(4),$SID APPEND OUR SYSTEM ID            R41 K5547800
        $CRET  L=8+22+4            EXIT & ISSUE DIAGNOSTIC          R41 K5547900
CDMJEND $CRET  MSG='OK'            END OF $DMJ COMMAND              R41 K5548000
         EJECT                                                      R41 K5548100
CDMJNMV  MVC   COMJNAME(*-*),0(R1) *** EXECUTE ONLY ***             R41 K5548200
CDMS34MV MVC   S34MSG(*-*),0(R1)   *** EXECUTE ONLY ***             R41 K5548300
CDMJEDIT DS    0C                  EDIT PATTERNS AND FILLER         R41 K5548400
         DC    X'4021204B20204B2020'                                R41 K5548500
         DC    C' JOB NNNN  '                                       R41 K5548600
S34CONST DC    C'MSG FROM OPER:    '                                R41 K5548700
S34HEADR EQU   S34DTEXT,L'S34CONST LOCATION OF ABOVE TEXT           R41 K5548800
S34EDIT  EQU   S34HEADR+9,4        EDIT PATTERN OVERLAYS 'OPER'     R41 K5548900
S34MSG   EQU   S34HEADR+16         TEXT OF MESSAGE                  R41 K5549000
CDMJEDTL EQU   *-CDMJEDIT          LENGTH FOR INITIAL MOVE          R41 K5549100
         POP   USING                                                R41 K5549200
         EJECT                                                          K5549300
*********************************************************************** K5549400
*                                                                     * K5549500
*        $R ALL/PRT/PUN,J=FOR-JOBID/R=FOR-DEST,D=TO-DEST,Q=CLASSES    * K5549600
*                                                                     * K5550000
*        MEANING                                                      * K5550100
*        ROUTE OUTPUT OF TYPE 'OP1' FOR JOB OR DEST TO DEST           * K5550200
*        OPTIONALLY QUALIFIED BY CLASSES                              * K5550300
*                                                                     * K5550700
*********************************************************************** K5550800
         SPACE 2                                                        K5550900
*********************************************************************** K5551000
*                                                                     * K5551100
*        CHECK FOR 'ALL' 'PRT' OR 'PUN'                               * K5551300
*                                                                     * K5551700
*********************************************************************** K5551800
CR       DS    0H                  START OF $R COMMAND                  K5551900
         CLI   COMOPRND+3,C','     CHECK FOR PROPER FORMAT              K5552000
         BNE   CDMERR              NO--EXIT IN ERROR                    K5552100
         CLC   COMOPRND(3),=C'ALL' IS ROUTING FOR BOTH PRT AND PUN      K5552200
         MVI   COMNULOP,CRXALL     ASSUME 'ALL'                         K5552300
         BE    CRXTYPE             YES--EXIT TYPE SCAN                  K5552400
         CLC   COMOPRND(3),=C'PRT' IS ROUTING FOR PRT ONLY              K5552500
         MVI   COMNULOP,CRXPRINT   ASSUME SUCH                          K5552600
         BE    CRXTYPE             YES--EXIT TYPE SCAN                  K5552700
         CLC   COMOPRND(3),=C'PUN' IS ROUTING FOR PUNCH ONLY            K5552800
         MVI   COMNULOP,CRXPUNCH   SET 'PUN'                            K5552900
         BNE   CDMERR              NO--ERROR  OR NEXT SECTION           K5553500
         SPACE 1                                                        K5554000
*********************************************************************** K5554500
*                                                                     * K5555000
*        EXAMINE 2ND, 3RD AND 4TH OPERANDS FOR VALID SPECS            * K5555500
*                                                                     * K5556000
*********************************************************************** K5556500
CRXTYPE  DS    0H                  EXAMINE ADDITIONAL OPERANDS          K5557000
         XC    CRXWORKA,CRXWORKA   SET CRX WORK AREA TO ZEROES       R4 K5557500
CRXNXTOP BXH   WD,WE,CRXGO         POINT TO NEXT OPERAND POINTER     R4 K5558000
         L     WB,0(,WD)           POINT TO FIRST CHARACTER          R4 K5558500
         CLI   1(WB),C'='          THIS EQUAL                        R4 K5559000
         BNE   CDMERR              ERROR IF JOB                      R4 K5559500
         CLI   0(WB),C'J'          IS THIS JOB                       R4 K5560000
         BE    CRXJANL             BREAK OUT JOB                     R4 K5560500
         CLI   0(WB),C'Q'          IS THIS QUEUE                     R4 K5561000
         BE    CRXQANL             BREAK OUT QUEUES                  R4 K5561500
         CLI   0(WB),C'R'          IS THIS ROUTING                   R4 K5562000
         BE    CRXFMANL            BREAK OUT DESTINATION             R4 K5562500
         CLI   0(WB),C'D'          IS THIS NEW DESTINATION           R4 K5563000
         BNE   CDMERR              ERROR IF NOT                      R4 K5563500
         BAL   WA,CRXANAL          BREAK OUT DESTINATION             R4 K5564000
         STCM  R0,3,CRXNEWRT       SET ROUTING                       R4 K5564500
         OI    COMNULOP,CRXOP3     SET OPERAND 3 PRESENT             R4 K5565000
         B     CRXNXTOP            DO NEXT OPERAND                   R4 K5565500
CRXFMANL TM    COMNULOP,CRXOP2     ALREADY SPECIFIED                 R4 K5566000
         BO    CDMERR              ERROR IF YES                      R4 K5566500
         BAL   WA,CRXANAL          BREAK OUT DESTINATION             R4 K5567000
         STCM  R0,3,CRXOLDRT       SET OLD ROUTE CODE                R4 K5567500
         OI    COMNULOP,CRXOP2     SET OPERAND 2 PRESENT             R4 K5568000
         B     CRXNXTOP            DO NEXT OPERAND                   R4 K5568500
CRXGO    TM    COMNULOP,CRXOP2+CRXOP3 REQUIRED OPERANDS PRESENT      R4 K5569000
         BNO   CDMERR              ERROR IF NOT                      R4 K5569500
         $QSUSE ,                  ENQUEUE ON SHARED RESOURCE           K5570000
         TM    COMNULOP,CRXJOB     CHECK FOR FROM ID A JOB              K5570500
         BO    CRXCHKJB            YES--GO HANDLE JOB                   K5571000
         CLC   CRXNEWRT,CRXOLDRT   ANY EFFECTIVE CHANGE              R4 K5571500
         BE    CRXRET              SKIP IT IF NOT                    R4 K5572000
         EJECT                                                          K5572500
*********************************************************************** K5573000
*                                                                     * K5573500
*        SCAN JOB QUEUE LOOKING FOR JOBS BELONGING TO FROM ID         * K5574000
*                                                                     * K5574500
*********************************************************************** K5575000
CRXSCAN  $CFJSCAN  PROCESS=CRXJQE,NEXT=CRXNXJQE  SCAN THE JOB Q         K5575500
         SPACE 1                                                        K5576000
         L     R1,COMWREGS         GET ADR OF JOBNAME HIT JQE        R4 K5576500
         CLI   CRXJOBNO,X'FF'      WAS THERE A JOBNAME HIT           R4 K5577000
         BE    CRXCHKJO            CHECK JOB OWNERSHIP IF YES        R4 K5577500
         B     CRXRET              RETURN WHEN QUEUE EXHAUSTED          K5578000
         EJECT                                                       R4 K5578500
*********************************************************************** K5579000
*                                                                     * K5579500
*        FROM ID IS A JOB -- CHK VALIDITY OF JOB & PERFORM FUNCT      * K5580000
*                                                                     * K5580500
*********************************************************************** K5581000
CRXCHKJB DS    0H                  FROM ID IS A JOB                     K5581500
         SLR   R0,R0               ZERO WORK                            K5582000
         ICM   R0,3,CRXJOBNO       GET JOB NUMBER                       K5582500
         BZ    CRXSCAN             IF CRXJOBNO=0 THIS IS J='JOBNAME' R4 K5583000
         $QLOC (R0),CRXJNFND       LOOK FOR JOB IN QUEUE                K5583500
CRXCHKJO $CFVQE NOK=CRXRET         VERIFY OWNERSHIP                  R4 K5584000
         TM    JQEFLAGS,QUEPURGE   TRST FOR JOB TO BE PURGED            K5584500
         BO    CRXRET              YES -- FORGET CHANGING               K5585000
         CLI   JQETYPE,$INPUT      IS JOB ON A READER                   K5585500
         BE    CRXRET              YES -- DON'T ROUTE IT                K5586000
         ICM   WB,15,CRXCLSPT      LOOK FOR Q= OPERAND                  K5591500
         BNZ   CRXJBCLQ            YES -- CHG ALL JOES TO SPECIAL       K5592000
         TM    COMNULOP,CRXPRINT   ELSE CHANGE JQE FIRST                K5592500
         BZ    CRXJPUN             TEST FOR PRINT ROUTING CHANGE        K5593000
         MVC   JQEPRTRT,CRXNEWRT   CHANGE PRINT ROUTING IF YES          K5593500
CRXJPUN  TM    COMNULOP,CRXPUNCH   TEST FOR PUN RE-ROUTING              K5594000
         BZ    *+10                NO--SKIP JQE CHANGE                  K5594500
         MVC   JQEPUNRT,CRXNEWRT   YES--RE-ROUTE PUNCH                  K5595000
         $QCKPT  (R1)              CHECKPOINT THE CHANGED JQE           K5595500
         OI    COMNULOP,CRXMODS    FLAG A MODIFICATION MADE             K5596000
CRXJBCLQ DS    0H                                              @OZ29780 K5598500
         LR    WF,R1               POINT TO JOB QUEUE ELEMENT  @OZ29780 K5599000
         BAL   WE,CRXALLCL         YES-CHANGE SPECIAL JOE ROUTINGS      K5600000
         B     CRXRET              AND THEN RETURN                      K5600500
         EJECT                                                          K5603500
*              THIS LINE DELETED BY APAR NUMBER              * @OZ29780 K5604500
*              THIS LINE DELETED BY APAR NUMBER              * @OZ29780 K5605000
*              THIS LINE DELETED BY APAR NUMBER              * @OZ29780 K5605500
*              THIS LINE DELETED BY APAR NUMBER              * @OZ29780 K5606000
*              THIS LINE DELETED BY APAR NUMBER              * @OZ29780 K5606500
*              THIS LINE DELETED BY APAR NUMBER              * @OZ29780 K5607000
*              THIS LINE DELETED BY APAR NUMBER              * @OZ29780 K5607500
*              THIS LINE DELETED BY APAR NUMBER              * @OZ29780 K5608000
*              THIS LINE DELETED BY APAR NUMBER              * @OZ29780 K5608500
*              THIS LINE DELETED BY APAR NUMBER              * @OZ29780 K5609000
*              THIS LINE DELETED BY APAR NUMBER              * @OZ29780 K5609500
*              THIS LINE DELETED BY APAR NUMBER              * @OZ29780 K5610000
*********************************************************************** K5611000
*                                                                     * K5611500
*        LOOK AT EACH JOB IN QUEUE TO SEE IF IT                       * K5612000
*        BELONGS TO FROM ID AND THEN CHANGE IT ACCORDINGLY            * K5612500
*                                                                     * K5613000
*********************************************************************** K5613500
CRXJQE   DS    0H                  A JOB WAS FOUND                      K5614000
         TM    COMNULOP,CRXJOB     WAS J= OPTION SPECIFIED (JOBNAME) R4 K5614500
         BZ    CRXJQEF             BRANCH IF NOT                     R4 K5615000
         CLC   JQEJNAME,COMJNAME   DOES JQE JOBNAME = CMD JOBNAME    R4 K5615500
         BNE   CRXNXJQE            CONTINUE SCAN IF NOT              R4 K5616000
         CLI   CRXJOBNO,X'FF'      IS THIS 1ST JOBNAME HIT           R4 K5616500
         BE    CRXMULTI            OUTPUT ERROR MSG IF NOT           R4 K5617000
         MVI   CRXJOBNO,X'FF'      INDICATE JOBNAME HIT FOUND        R4 K5617500
         ST    R1,COMWREGS         SAVE ADR OF JQE                   R4 K5618000
         B     CRXNXJQE            CONTINUE JQE SCAN                 R4 K5618500
CRXJQEF  DS    0H                                                    R4 K5619000
         CLI   JQETYPE,$INPUT      IS JOB ON A READER                   K5619500
         BE    CRXNXJQE            YES -- DON'T ROUTE IT                K5620000
         TM    JQEFLAGS,QUEPURGE   TEST FOR JOB ON PURGE Q              K5622500
         BO    CRXNXJQE            YES--GET NEXT JOB                    K5623000
         $CFVQE NOK=CRXNXJQE       VERIFY JOB'S OWNERSHIP               K5623500
         ICM   WB,15,CRXCLSPT      TEST FOR CLASSES SUPPLIED            K5626000
         BNZ   CRXTSJOE            DO ONLY JOES IF CLASS LIST  @OZ29780 K5627000
*              THIS LINE DELETED BY APAR NUMBER              * @OZ29780 K5627500
*              THIS LINE DELETED BY APAR NUMBER              * @OZ29780 K5628000
         TM    COMNULOP,CRXPRINT   CHK FOR RE-ROUTING OF PRINT          K5630000
         BZ    CRXRPUN             NO--TEST FOR PUNCH RE-ROUTING        K5630500
         CLC   JQEPRTRT,CRXOLDRT   SEE IF FROM ID IS OWNER OF PRT       K5631000
         BNE   CRXRPUN             NO--MAYBE PUNCH IS TO BE RE-RTD      K5631500
         MVC   JQEPRTRT,CRXNEWRT   YES--CHANGE PRINT ROUTING            K5632000
         OI    COMNULOP,CRXCKPT+CRXMODS  CKPT NEEDED AND CHG MADE       K5632500
CRXRPUN  DS    0H                  TEST FOR PUNCH RE-ROUTING            K5633000
         TM    COMNULOP,CRXPUNCH   TEST FOR SAID CHANGE                 K5633500
         BZ    CRXTSTCK            NO--TEST FOR POSSIBLE CKPT           K5634000
         CLC   JQEPUNRT,CRXOLDRT   TEST FOR FROM ID PUNCH OWNER         K5634500
         BNE   CRXTSTCK            NO--TEST FOR CKPT                    K5635000
         MVC   JQEPUNRT,CRXNEWRT   YES--RE-ROUTE PUNCH ACCORDINGLY      K5635500
         OI    COMNULOP,CRXMODS    FLAG A MODIFICATION MADE             K5636000
         B     *+12                FORCE CHECKPOINT                     K5636500
CRXTSTCK TM    COMNULOP,CRXCKPT    TEST FOR JQE CKPT                    K5637000
         BZ    CRXTSJOE            NO--LOOK FOR JOES TO CHANGE          K5637500
         $QCKPT (R1)               CHECKPOINT THE JQE                   K5638000
         NI    COMNULOP,255-CRXCKPT    RESET CHECKPOINT NECESSARY       K5638500
CRXTSJOE DS    0H                                                    R4 K5639000
         LR    WF,R1               POINT TO JOB QUEUE ELEMENT  @OZ29780 K5640000
         BAL   WE,CRXALLCL         REROUTE ANY READY DATA SETS @OZ29780 K5640500
         LR    R1,WF               POINT TO JOB QUEUE ELEMENT  @OZ29780 K5641000
         B     CRXNXJQE            GET NEXT JOB                @OZ29780 K5641500
         EJECT                                                          K5647500
*********************************************************************** K5648000
*                                                                     * K5648500
*        ROUTINE TO COMPUTE JOT DISPLACEMENT                          * K5649000
*        FOR ANY CLASS AND THEN BRANCH AND LINK TO                    * K5649500
*        JOE MODIFY ROUTINE                                           * K5650000
*                                                                     * K5650500
*********************************************************************** K5651000
         USING JOTDSECT,R10                                          R4 K5651500
CRXALLCL DS    0H                  BEGIN CLASS CONVERTS                 K5652000
         CLC   JQEJOE,$ZEROS       TEST FOR ANY JOES           @OZ27300 K5652500
         BZR   WE                  NONE -- RETURN                       K5653000
         L     R10,CDFJOT          POINT TO JOT                      R4 K5653500
         SLR   WC,WC               ZERO CLASS OFFSET           @OZ29780 K5654000
         TM    COMNULOP,CRXALL     REQUEST FOR ALL             @OZ29780 K5654500
         BO    CRXNJALL            LOOK FOR QUALIFYING CLASSES @OZ29780 K5655000
         L     WB,$SSVT            POINT TO SSVT               @OZ29780 K5655500
         LA    WB,$SVSCAT-SSVT(,WB) POINT TO SCAT              @OZ29780 K5656000
CRXNJL   LA    WC,2(,WC)           UP TO NEXT CLASS OFFSET     @OZ29780 K5656500
         CH    WC,=Y(L'JOTRDYWQ)   TEST FOR END                @OZ29780 K5657000
         BNLR  WE                  RETURN IF END               @OZ29780 K5657500
         LR    R1,WC               COPY OFFSET                 @OZ29780 K5663000
         SRL   R1,1                HALVE                       @OZ29780 K5663500
         IC    R1,CRXCLASS-1(R1)   PICK UP OFFSET IN SCAT      @OZ29780 K5664000
         ALR   R1,WB               POINT TO ENTRY              @OZ29780 K5664500
         TM    COMNULOP,CRXPRINT   WANT PRINT                  @OZ29780 K5665000
         BO    CRXNJPRT            LOOK FOR PRINT CLASS        @OZ29780 K5665500
         TM    0(R1),SCATPNCH      THIS A PUNCH CLASS          @OZ29780 K5666000
         BZ    CRXNJL              LOOP                        @OZ29780 K5666500
         B     CRXNJOK             TRY JOE MODIFICATION        @OZ29780 K5667000
CRXNJPRT TM    0(R1),SCATPRNT      THIS A PRINT CLASS          @OZ29780 K5667500
         BZ    CRXNJL              LOOP                        @OZ29780 K5668000
CRXNJOK  BAL   WA,CRXCHJOE         CHANGE JOES                 @OZ29780 K5668500
         B     CRXNJL              LOOP                        @OZ29780 K5669000
CRXNJALL OC    CRXCLSPT,CRXCLSPT   CLASSES SPECIFIED           @OZ29780 K5669500
         BNZ   CRXONEC             DO ONLY SPECIFIED CLASSES   @OZ29780 K5670000
CRXJOLOP LA    WC,2(,WC)           UP TO NEXT                  @OZ29780 K5670500
         BAL   WA,CRXCHJOE         CHANGE JOES OF THIS CLASS   @OZ29780 K5671000
         CH    WC,=Y(L'JOTRDYWQ-2) TEST FOR END                @OZ29780 K5671500
         BL    CRXJOLOP            LOOP                        @OZ29780 K5672000
         BR    WE                  YES--RETURN TO CALLER                K5673000
CRXONEC  DS    0H                  USER CLASS LIST SUPPLIED             K5673500
*                                  THIS LINE DELETED BY APAR   @OZ48133 K5674000
         IC    WC,0(WB)            POINT TO NEXT CLASS         @OZ48133 K5674500
         N     WC,=A(FF-X'C0')     TURN OFF ZONE BITS          @OZ48133 K5675000
         L     WA,=A(CPQTABLE)     PT TO HEAD OF CONVERT TABLE @OZ29780 K5676000
         IC    WC,0(WC,WA)         PICK-UP OFFSET INTO JOT              K5678000
         BAL   WA,CRXCHJOE         GO MODIFY JOES OF THIS CLASS         K5678500
         CLI   1(WB),C' '          CHECK FOR LAST CHARACTER             K5679000
         BER   WE                  YES--EXIT                            K5679500
         LA    WB,1(,WB)           ELSE POINT TO NEXT CLASS             K5680000
         B     CRXONEC             AND LOOP FOR ALL CLASSES             K5680500
         EJECT                                                       R4 K5681000
*********************************************************************** K5681500
*                                                                     * K5682000
*        CHANGE JOES FOR CLASS IN REG (WC)                            * K5682500
*                                                            * @OZ29780 K5683500
************************************************************** @OZ29780 K5684000
*              THIS LINE DELETED BY APAR NUMBER              * @OZ29780 K5684500
*              THIS LINE DELETED BY APAR NUMBER              * @OZ29780 K5685000
*              THIS LINE DELETED BY APAR NUMBER              * @OZ29780 K5685500
*              THIS LINE DELETED BY APAR NUMBER              * @OZ29780 K5686000
*              THIS LINE DELETED BY APAR NUMBER              * @OZ29780 K5686500
*              THIS LINE DELETED BY APAR NUMBER              * @OZ29780 K5687000
*              THIS LINE DELETED BY APAR NUMBER              * @OZ29780 K5687500
*              THIS LINE DELETED BY APAR NUMBER              * @OZ29780 K5688000
*              THIS LINE DELETED BY APAR NUMBER              * @OZ29780 K5689000
*              THIS LINE DELETED BY APAR NUMBER              * @OZ29780 K5689500
CRXCHJOE DS    0H                  CHANGE JOE ROUTINGS                  K5690000
         USING JOEDSECT,WD                                           R4 K5690500
         LA    WD,JOTRDYWQ-(JOENEXT-JOEDSECT)(WC)              @OZ29780 K5691500
CRXNXJOE DS    0H                                                    R4 K5693500
         LR    R0,WD               COPY ADDRESS                      R4 K5694000
         LH    WD,JOENEXT          PICK UP OFFSET TO NEXT JOE        R4 K5694500
         N     WD,=A(X'0000FFFF')  ENSURE OFFSET POSITIVE            R4 K5695000
         BZR   WA                  EXIT IF LAST JOE OF CLASS            K5695500
         SLL   WD,2                EXPAND TO BYTE OFFSET             R4 K5696000
         ALR   WD,R10              POINT TO JOE                      R4 K5696500
         LH    R14,JOEJQE          PICK UP JQE INDEX                 R4 K5697000
         N     R14,=X'0000FFFF'    CLEAR LEFT HALFWORD         @OZ37385 K5697200
         SLL   R14,2               POINT TO                          R4 K5697500
         AL    R14,$JOBQPTR        JQE                               R4 K5698000
         CLR   R14,WF              JOE BELONG TO JOB           @OZ29780 K5699000
         BNE   CRXNXJOE            LOOK AT NEXT                      R4 K5701000
         TM    COMNULOP,CRXJOB     CHK FOR FROM ID A JOB                K5701500
         BO    CRXSPCL             YES--BR FOR JOB'S JOES               K5702000
         CLC   JOEROUT,CRXOLDRT    IS THIS JOE A SPECIAL FOR            K5702500
*                                  THIS ROUTE                           K5703000
         BNE   CRXNXJOE            NO--DON'T RE-ROUTE                   K5703500
CRXALLJO DS    0H                                                    R4 K5704000
         TM    JOEFLAG,$JOEBUSY    IS JOE ACTIVE               @OZ29780 K5704100
         BNZ   CRXJOEB             SKIP SETTING IF YES         @OZ29780 K5704200
         TM    COMNULOP,CRXALL     IS THIS $RALL...            @OZ16683 K5704300
         BO    CRXUPDR             BR IF YES                   @OZ16683 K5704400
         CLC   JOEDEST,=H'0'       IS JOE SPECIAL ROUTE...     @OZ16683 K5704500
         BNE   CRXNXJOE            SKIP SETTING IF YES         @OZ16683 K5704600
CRXUPDR  MVC   JOEROUT,CRXNEWRT    SET NEW ROUTE CODE          @OZ16683 K5705000
CRXCKJO  $#CKPT JOE=0(WD),TYPE=A   SCHEDULE CHECKPOINT FOR JOE       R4 K5728500
         OI    COMNULOP,CRXMODS    FLAG A MODIFICATION MADE             K5729000
         B     CRXNXJOE            AND GET ANOTHER                      K5729500
CRXSPCL  EQU   CRXALLJO                                        @OZ29780 K5730500
CRXJOEB  OI    COMNULOP,CRXJOEA    SET ERROR INDICATOR         @OZ29780 K5731000
         B     CRXNXJOE            DO NEXT JOE                 @OZ29780 K5731500
*              THIS LINE DELETED BY APAR NUMBER              * @OZ29780 K5732000
*              THIS LINE DELETED BY APAR NUMBER              * @OZ29780 K5732500
*              THIS LINE DELETED BY APAR NUMBER              * @OZ29780 K5733000
         EJECT                                                       R4 K5736000
*********************************************************************** K5736500
*                                                                     * K5737000
*        SUBROUTINE TO EXAMINE R=DEST(FROM) AND D=DEST(TO)            * K5737500
*                                                                     * K5738000
*********************************************************************** K5738500
CRXANAL  DS    0H                  START SCAN OF OPERANDS               K5739000
         BAL   LINK,COFRTRA        CONVERT ROUTE CODE                R4 K5739500
         B     CDMERR              ERROR EXIT               + 0      R4 K5740000
         CR    R0,R1               SAME                     + 4      R4 K5740500
         BNE   CDMERR              ERROR IF NOT                      R4 K5741000
         BR    WA                  RETURN                            R4 K5745500
*********************************************************************** K5759500
*                                                                     * K5760000
*        EXAMINE THE FROM JOB OPERAND (J=JN/J=SN/J=TN)                * K5760500
*                                                                     * K5761000
*********************************************************************** K5761500
CRXJANL  DS    0H                                                    R4 K5762000
         TM    COMNULOP,CRXOP2     OPERAND 2 ALREADY SPECIFIED       R4 K5762500
         BO    CDMERR              ERROR IF YES                      R4 K5763000
         CLI   2(WB),C''''         IS THIS A J='JOBNAME' OPERAND     R4 K5763500
         BNE   CRXJJNOV            GO TO VALIDATE JOB NO. IF NOT     R4 K5764000
         LA    WB,2(,WB)           STEP WB TO START OF 'JOBNAME'     R4 K5764500
         L     WC,4(,WD)           POINT 2 BYTES PAST END-OF-OPERAND R4 K5765000
         BCTR  WC,0                BACK UP TO END                    R4 K5765500
         BCTR  WC,0                  OF OPERAND                      R4 K5766000
         CLI   0(WC),C''''         DOES OPERAND END WITH APOSTROPHE  R4 K5766500
         BNE   SKIP480             SKIP NSI IF NOT                   R4 K5767000
         BCTR  WC,0                POINT TO LAST CHAR OF JOBNAME     R4 K5767500
SKIP480  SR    WC,WB               COMPUTE LENGTH OF JOBNAME         R4 K5768000
         BNP   CDMERR              ERROR EXIT IF NOT POSITIVE        R4 K5768500
         BCTR  WC,0                GET MACHINE LENGTH                R4 K5769000
         LA    R0,7                SET R0 = MAXIMUM MACHINE LENGTH   R4 K5769500
         CR    WC,R0               IS JOBNAME LENGTH TOO LONG        R4 K5770000
         BNH   SKIP490             SKIP NSI IF NOT                   R4 K5770500
         LR    WC,R0               SET TO MOVE MAXIMUM LENGTH        R4 K5771000
SKIP490  MVC   COMJNAME,=CL8' '    BLANK OUT JOBNAME WORKAREA        R4 K5771500
         EX    WC,CRXJNMVC         MOVE JOBNAME TO WORKAREA          R4 K5772000
         SLR   R0,R0               SET R0 (JOB NUMBER) TO ZERO       R4 K5772500
         B     CRXJXIT             GO TO SET COMNULOP FLAGS AND EXIT R4 K5773000
CRXJJNOV DS    0H                  VALIDATE JOB NO.                  R4 K5773500
         SLR   WC,WC               SET BATCH JOB VALUE                  K5774000
         CLI   2(WB),C'J'          TEST FOR BATCH JOB                R4 K5774500
         BE    CRXCVB              YES--GET JOB NUMBER                  K5775000
         AH    WC,=H'10000'        SET STC OFFSET VALUE                 K5777500
         CLI   2(WB),C'S'          TEST FOR SYSTEM STARTED TASK      R4 K5778000
         BE    CRXCVB              YES--GET STC NUMBER                  K5778500
         ALR   WC,WC               SET TSU OFFSET VALUE                 K5779000
         CLI   2(WB),C'T'          TEST FOR TIME SHARING USER        R4 K5779500
         BNE   CDMERR              ERROR IF NOT                      R4 K5780000
CRXCVB   DS    0H                                                    R4 K5780500
         $CFCVB POINTER=(WD),NUM=1,NOK=CDMERR  DO IT                    K5781000
         LTR   R0,R0               RESULT ZERO                       R4 K5781500
         BZ    CDMERR              ERROR IF YES                      R4 K5782000
         ALR   R0,WC               COMPUTE TRUE TASK NUMBER             K5782500
CRXJXIT  DS    0H                  SET COMNULOP FLAGS AND EXIT       R4 K5783000
         OI    COMNULOP,CRXJOB+CRXOP2 SET SECOND OPERAND IS JOB      R4 K5783500
         STH   R0,CRXJOBNO         SET JOB NUMBER                    R4 K5784000
         B     CRXNXTOP            DO NEXT OPERAND                   R4 K5784500
         EJECT                                                       R4 K5785000
*********************************************************************** K5785500
*                                                                     * K5786000
*        EXTRACT Q= OPERAND IF SUPPLIED                               * K5786500
*                                                                     * K5787000
*********************************************************************** K5787500
CRXQANL  DS    0H                                                       K5788000
         L     WC,4(,WD)           POINT TO OPERAND END                 K5788500
         LA    WC,0(,WC)           CLEAR HI-ORDER FLAG BYTE             K5789000
         SLR   WC,WB               COMPUTE SIZE OF OPERAND              K5789500
         SH    WC,=H'4'            LESS FOUR FOR 'Q=' AND MACH.         K5790000
         BM    CDMERR              NOT PRESENT -- ERROR                 K5790500
         L     R14,=A(CVALIDTB)    POINT TO TEST TABLE               R4 K5791000
         EX    WC,CRXVALID         TEST FOR VALID STRING                K5791500
         BNZ   CDMERR              INVALID CHARACTERS -- ERROR          K5792000
         TM    COMNULOP,CRXALL     TEST FOR TYPE OF ALL                 K5792500
         BNO   CDMERR              IF NOT -- 'Q=' IS INVALID            K5793000
         LA    R0,2(,WB)           POINT TO FIRST CHAR IN STRING        K5793500
         ALR   WC,R0               COMPUTE END OF STRING - 1            K5794000
         MVI   1(WC),C' '          TRUNCATE STRING                      K5794500
         STCM  R0,15,CRXCLSPT      SET CLASS STRING POINTER          R4 K5795000
         B     CRXNXTOP            LOOK AT NEXT OPERAND              R4 K5795500
         SPACE 1                                                        K5796000
CRXVALID TRT   2(*-*,WB),0(R14)    *** EXECUTE ONLY ***              R4 K5796500
CRXJNMVC MVC   COMJNAME(*-*),1(WB) *** EXECUTE ONLY ***              R4 K5797000
         EJECT                                                       R4 K5797500
*********************************************************************** K5798000
*                                                                     * K5798500
*        CRXMULTI - COME HERE IF J=JOBNAME OPERAND WAS USED ON $R     * K5799000
*                   COMMAND AND JOB NAME IS NOT UNIQUE.  PUT OUT      * K5799500
*                   'MULTIPLE JOBS FOUND' MSG AND DISPLAY THE JOBS.   * K5800000
*                                                                     * K5800500
*********************************************************************** K5801000
CRXMULTI DS    0H                                                    R4 K5801500
         MVC   COMMAND(19),=C'MULTIPLE JOBS FOUND' MOVE MSG          R4 K5802000
         LA    R0,19               MSG LENGTH                        R4 K5802500
        $CWTO  L=(R0)              SEND MSG                          R4 K5803000
*                                  SCAN FOR AND DISPLAY JOBS         R4 K5803500
        $CFJSCAN PROCESS=CRXMJPRO,NEXT=CRXMJNXT                      R4 K5804000
         B     CRXRET              RETURN (DISPLAYS COMPLETE)        R4 K5804500
CRXMJPRO NULL  ,                                                     R4 K5805000
         CLC   JQEJNAME,COMJNAME   JQE JOBNAME = CMD JOBNAME         R4 K5805500
         BNE   CRXMJNXT            CONTINUE SCAN IF NOT              R4 K5806000
         LR    WB,R1               SAVE JQE ADR                      R4 K5806500
        $CFJMSG JOBQE=(R1),TYPE=CALL  DISPLAY JOB INFORMATION        R4 K5807000
*********************************************************************** K5807500
*                                                                     * K5808000
*        USING $CFJSCAN MACRO, TRY TO RETRACE CHAIN BACK TO SAME      * K5808500
*        JQE.  IF FOUND, AND ON THE SAME QUEUE, WE CAN CONTINUE       * K5809000
*        OUR ORIGINAL SCAN LOOKING FOR DUPLICATE JOBS TO DISPLAY.     * K5809500
*        IF NOT FOUND OR ON ANOTHER QUEUE, MSG = 'LIST INCOMPLETE.'   * K5810000
*                                                                     * K5810500
*********************************************************************** K5811000
        $CFJSCAN PROCESS=CRXMJCHK,NEXT=CRXMJX,STORE=NO               R4 K5811500
CRXNOFND DS    0H                                                    R4 K5812000
         MVC   COMMAND(15),=C'LIST INCOMPLETE' MOVE MSG              R4 K5812500
         LA    R0,15               MSG LENGTH                        R4 K5813000
        $CWTO  L=(R0)              SEND MSG                          R4 K5813500
         B     CRXRET              RETURN                            R4 K5814000
CRXMJCHK NULL  ,                   COME HERE TO CHECK JQE            R4 K5814500
         CR    R1,WB               IS THIS THE SAME JQE AS DISPLAYED R4 K5815000
         BNE   CRXMJX              GO TO CHECK NEXT JQE IF NOT       R4 K5815500
         CH    R15,COMJQHDS        IS JOB STILL ON SAME QUEUE        R4 K5816000
         BNE   CRXNOFND            IF NOT,CHAIN BROKEN, BRANCH       R4 K5816500
         B     CRXMJNXT            OTHERWISE, CONTINUE ORIG JOB SCAN R4 K5817000
         EJECT                                                          K5817500
*********************************************************************** K5818000
*        EQUATES FOR $ROUTE COMMAND                                   * K5818500
*********************************************************************** K5819000
CRXOP2   EQU   X'80'               OPERAND 2 IS PRESENT              R4 K5819500
CRXOP3   EQU   X'40'               OPERAND 3 IS PRESENT              R4 K5820000
CRXPRINT EQU   X'08'               TYPE IS PRINT                        K5820500
CRXPUNCH EQU   X'04'               TYPE IS PUNCH                        K5821000
CRXALL   EQU   CRXPRINT+CRXPUNCH   TYPE IS ALL                          K5821500
CRXJOB   EQU   X'02'               FROM ID IS A JOB                     K5822000
CRXCKPT  EQU   X'01'               A CHECKPOINT OF THE JQE IS NEED      K5824000
CRXJOEA  EQU   X'20'               AT LEAST ONE ELIGIBLE JOE IS ACTIVE  K5824500
CRXMODS  EQU   X'10'               MODIFICATION HAS BEEN MADE           K5825000
         SPACE 1                                                        K5825500
CRXWORKA EQU   COMREGSV,8          $ROUTE COMMAND WORK AREA          R4 K5826000
CRXOLDRT EQU   COMREGSV,2          SAVE AREA FOR OLD ROUTE CODE      R4 K5826500
CRXJOBNO EQU   COMREGSV,2          SAVE AREA FOR JOB, STC, TSU NO.   R4 K5827000
CRXNEWRT EQU   COMREGSV+2,2        SAVE AREA FOR NEW ROUTE CODE      R4 K5827500
CRXCLSPT EQU   COMREGSV+4,4        SAVE AREA FOR CLASS STRING PTR    R4 K5828000
         SPACE 3                                                        K5828500
*********************************************************************** K5829000
*        $ROUTE EXITS                                                 * K5829500
*********************************************************************** K5830000
CRXJNFND DS    0H                  COME HERE IF JOB NOT FOUND           K5830500
         $CRET MSG='JOB(S) NOT FOUND'                                   K5831000
         SPACE 1                                                        K5831500
CRXRET   DS    0H                  RETURN EXIT                          K5832000
         TM    COMNULOP,CRXJOEA    ANY ACTIVE JOES ELIGIBLE    @OZ29780 K5833000
         BZ    CRXRETA             SKIP NEXT                   @OZ29780 K5833500
         $POST $HASPECF,(JOB,JOT)  POST JOB AND JOT            @OZ29780 K5834000
         $CRET MSG='ACTIVE DATA SETS NOT ROUTED'               @OZ29780 K5834500
CRXRETA  DS    0H                                              @OZ29780 K5835000
         TM    COMNULOP,CRXMODS    TEST FOR ANY CHANGES                 K5836000
         BZ    CRXMSG              NONE -- TELL OPERATOR SUCH           K5836500
         $POST $HASPECF,(JOB,JOT)  POST JOB AND JOT                     K5837000
         OI    $AQSE,QSEPJOB+QSEPJOT   CAUSE X SYSTEM POST(S)           K5837500
         $CRET MSG=OK              RETURN 'OK'                          K5838000
CRXMSG   DS    0H                  NO RE-ROUTING OF DATA SETS           K5838500
         $CRET MSG='NO DATA SETS RE-ROUTED'                             K5839500
         SPACE 2                                                        K5841500
CRXCLASS DC    C'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'         @OZ29780 K5842500
         LTORG ,                                                        K5843500
         DROP  R1                                                    R4 K5844000
         DROP  WD                                                    R4 K5844500
         DROP  R10                                                   R4 K5845000
         PRINT &DATA               DEFINE PRINTING FOR LITERALS         K5845500
         TITLE 'HASP COMMAND PROCESSOR - LITERAL POOL'                  K5846500
HASPCOMM CSECT                                                          K5847000
         LTORG ,                                                        K5847500
         TITLE 'HASP COMMAND PROCESSOR - GLOBAL DEFINITIONS'            K5848500
CVALIDTB EQU   *                                                        K5849000
         DC    193X'01'            X'00'-X'C0' INVALID                  K5849500
         DC    9X'00'              X'C1'-X'C9' VALID (A-I)              K5850000
         DC    7X'01'              X'CA'-X'D3' INVALID                  K5850500
         DC    9X'00'              X'D1'-X'D9' VALID (J-R)              K5851000
         DC    8X'01'              X'DA'-X'E1' INVALID                  K5851500
         DC    8X'00'              X'E2'-X'E9' VALID (S-Z)              K5852000
         DC    6X'01'              X'EA'-X'EF' INVALID                  K5852500
         DC    10X'00'             X'F0'-X'F9' VALID (0-9)              K5853000
         DC    6X'01'              X'FA'-X'FF' INVALID                  K5853500
         SPACE 5                                                     R4 K5854000
CVALTABL EQU   *                                                     R4 K5854500
         DC    75X'01'             X'00'-X'4A'  INVALID              R4 K5855000
         DC      X'00'             X'4B'        VALID (.)            R4 K5855500
         DC    15X'01'             X'4C'-X'5A'  INVALID              R4 K5856000
         DC      X'00'             X'5B'        VALID ($)            R4 K5856500
         DC    31X'01'             X'5C'-X'7A'  INVALID              R4 K5857000
         DC    2X'00'              X'7B',X'7C' VALID (#,@)     @OZ18216 K5857500
         DC    68X'01'             X'7D'-X'C0' INVALID         @OZ18216 K5858000
         DC     9X'00'             X'C1'-X'C9'  VALID (A-I)          R4 K5858500
         DC     7X'01'             X'CA'-X'D0'  INVALID              R4 K5859000
         DC     9X'00'             X'D1'-X'D9'  VALID (J-R)          R4 K5859500
         DC     8X'01'             X'DA'-X'E1'  INVALID              R4 K5860000
         DC     8X'00'             X'E2'-X'E9'  VALID (S-Z)          R4 K5860500
         DC     6X'01'             X'EA'-X'EF'  INVALID              R4 K5861000
         DC    10X'00'             X'F0'-X'F9'  VALID (0-9)          R4 K5861500
         DC     6X'01'             X'FA'-X'FF'  INVALID              R4 K5862000
         TITLE 'HASP COMMAND PROCESSOR - CANCEL JOB SERVICE ROUTINE' R4 K5862500
*********************************************************************** K5863000
*                                                                     * K5863500
*        $JCAN -- JOB CANCEL SERVICE ROUTINE                          * K5864000
*                                                                     * K5864500
* FUNCTIONS                                                           * K5865000
*                                                                     * K5865500
*    (1) REJECT ATTEMPTS TO CANCEL OR STOP STC OR TSU JOBS            * K5866000
*        PRIOR TO EXECUTION.                                          * K5866500
*                                                                     * K5867000
*    (2) PURGE HQRS FOR STOP JOB AND CANCEL WITH PURGE REQUESTS.      * K5867500
*                                                                     * K5868000
*    (3) PURGE JOES FOR STOP JOB AND CANCEL WITH PURGE REQUESTS.      * K5868500
*                                                                     * K5869000
*    (4) ISSUE SVC 34 TO CANCEL JOB IF REQUIRED.                      * K5869500
*                                                                     * K5870000
*    (5) DELET ACTIVITY ON HASP READERS FOR CANCEL REQUESTS           * K5870500
*        AND ON HASP PRINTERS AND PUNCHES FOR CANCEL WITH PURGE       * K5871000
*        REQUESTS.                                                    * K5871500
*                                                                     * K5872000
*    (6) FORCE CHECKPOINT IF JQE HAS AN OWNER AND $QPUT TO            * K5872500
*        $OUTPUT, $HARDCPY, OR $PURGE IF NO OWNER.                    * K5873000
*                                                                     * K5873500
*    (7) IGNORE ATTEMPTS TO CANCEL OUTPUT FOR JOB IF CANCEL           * K5874000
*        WITHOUT PURGE IS REQUESTED.                                  * K5874500
*                                                                     * K5875000
*    (8) SIGNAL USER TO WAIT ON CHECKPOINT IF ACTIVE.                 * K5875500
*                                                                     * K5876000
* INPUT REGISTERS                                                     * K5876500
*                                                                     * K5877000
*        R0    = REQUEST CODE                                         * K5877500
*        R1    = JQE ADDRESS                                          * K5878000
*        R11   = BASE1 (HCT)                                          * K5878500
*        R13   = PCE ADDRESS (CALLERS)                                * K5879000
*        R14   = RETURN (RETURN WILL BE TO R14 + R15)                 * K5879500
*        R15   = ENTRY BASE                                           * K5880000
*                                                                     * K5880500
* OUTPUT REGISTERS                                                    * K5881000
*                                                                     * K5881500
*        R0-R14= UNCHANGED                                            * K5882000
*        R15   = RETURN CODE ( OFFSET TO R14 FOR RETURN )             * K5882500
*                                                                     * K5883000
*              = 0 - STC OR TSU CANCEL EXECUTION REQUEST REJECTED     * K5883500
*              = 4 - CANCEL IGNORED FOR JOB IN OUTPUT                 * K5884000
*              = 8 - JQE FLAGGED FOR CANCEL AS REQUESTED              * K5884500
*                                                                     * K5885000
*********************************************************************** K5885500
         EJECT                                                          K5886000
$JCANR   DS    0H                                                       K5886500
         USING *,R15                                                    K5887000
         STM   R0,R14,CCJSAVE      SAVE USER REGISTERS                  K5887500
         LR    R8,R15              ESTABLISH WORKING BASE               K5888000
         USING $JCANR,R8                                                K5888500
         USING JQEDSECT,R1                                              K5889000
         DROP  R15                                                      K5889500
         LR    WE,R1               SAVE JQE ADDRESS                     K5890000
         SLR   WB,WB               CLEAR SJB ADDRESS REGISTER       R41 K5890200
         LA    WF,CCJXNJ           SET NOT JOB ERROR RETURN CODE        K5890500
         CLC   JQEJOBNO,CCJJMAX    CHECK FOR ABOVE BATCH JOB NUMBERS    K5891000
         BL    CCJB                DO CANCEL FOR JOBS                   K5891500
         TM    JQETYPE,$XEQ        IS IT IN OR PRIOR TO XEQ             K5892000
         BO    CCJRET              RETURN 'NOTJOB' IF YES               K5892500
         CLI   JQETYPE,$INPUT      IS TSU OR STC ON A READER            K5895000
         BE    CCJRET              RETURN 'NOTJOB' IF YES               K5895500
         B     CCJB1                ELSE CONTINUE                   R41 K5897800
         SPACE 1                                                    R41 K5898000
*********************************************************************** K5898100
*                                                                     * K5898200
*        CHECK FOR 'NON-CANCELABLE' BATCH JOB ATTRIBUTE               * K5898300
*                                                                     * K5898400
*********************************************************************** K5898500
         SPACE 1                                                    R41 K5898600
         USING PITDSECT,WC         PROVIDE PIT ADDRESSABILITY       R41 K5898700
         SPACE 1                                                    R41 K5898800
CCJB     TM    JQETYPE,$XEQ        XEQ OR CONVERTER...              R41 K5898900
         BZ    CCJB1               BR IF NO                         R41 K5899000
         TM    JQEFLAGS,QUEBUSY    IS JOB ACTIVE...                 R41 K5899100
         BZ    CCJB1               BR IF NO                         R41 K5899200
         CLI   JQETYPE,$XEQ        CONVERTING...                    R41 K5899300
         BE    CCJB1               BR IF YES                        R41 K5899400
         LR    R0,R1               RELOAD JQE ADDRESS          @OZ40028 K5899420
         SL    R0,$JOBQPTR         REDUCE ADDRESS TO OFFSET    @OZ40028 K5899440
         L     WC,$PITABLE         POINT TO PITS                    R41 K5899500
         SPACE 1                                                    R41 K5899600
CCJPIT1  TM    PITSTAT,PITBUSY     IS PIT ACTIVE...                 R41 K5899700
         BO    CCJSJB              BR IF YES                        R41 K5899800
         SPACE 1                                                    R41 K5899900
CCJPIT2  ICM   WC,15,PITNEXT       POINT TO NEXT PIT                R41 K5900000
         BZ    CCJB1               BR IF END OF PITS                R41 K5900100
         B     CCJPIT1              ELSE TEST NEW PIT               R41 K5900200
         SPACE 1                                                    R41 K5900300
         USING SJBDSECT,WD         PROVIDE SJB ADDRESSABILITY       R41 K5900400
         SPACE 1                                                    R41 K5900500
CCJSJB   L     WD,PITSJB           POINT TO SJB                     R41 K5900600
         CLM   R0,7,SJBJQOFF+1     TEST JQE OFFSET             @OZ40028 K5900700
         BNE   CCJPIT2             TRY NEXT PIT IF NO               R41 K5900800
         LR    WB,WD               SAVE SJB ADDRESS                 R41 K5900900
         ICM   WD,15,SJBCSCB       POINT TO CSCB                    R41 K5901000
         BZ    CCJB1               BR IF NO CSCB                    R41 K5901100
         SPACE 1                                                    R41 K5901200
         USING CSCDSECT,WD         PROVIDE CSCB ADDRESSABILITY      R41 K5901300
         SPACE 1                                                    R41 K5901400
         TM    CHACT,CHCL          IS JOB CANCELABLE...             R41 K5901500
         BZ    CCJRET              RETURN 'NOTJOB' IF NO            R41 K5901600
         SPACE 1                                                    R41 K5901700
         DROP  WD                  DROP CSCB ADDRESSABILITY         R41 K5901800
         EJECT                                                      R41 K5901900
CCJB1    ST    WB,CCJSJBAD         SAVE SJB ADDRESS                 R41 K5902000
         TM    CCJR,CCJRSTOP+CCJRPURG  $C ONLY...                   R41 K5902100
         BZ    CCJC                BRANCH IF $C ONLY                    K5902200
         NI    JQEFLAGS,255-QUEHOLDA-QUEHOLD1-QUEHOLD2 RESET HOLD       K5902300
         OI    JQEFLAGS,QUEPURGE   SET PURGE FOR $CJ,P AND $PJ          K5902400
         TM    CCJR,CCJRPURG       TEST FOR $CJ,P ONLY                  K5902500
         BZ    *+8                 NO--SKIP SETTING QUEOPCAN            K5902600
         OI    JQEFLAGS,QUEOPCAN   SET OPERATOR CANCEL                  K5902700
*********************************************************************** K5902800
*                                                                     * K5902900
*        PURGE ANY HELD DATA SETS                                     * K5903000
*                                                                     * K5903100
*********************************************************************** K5903500
         SPACE 1                                                        K5904000
         LH    WB,JQEHLDCT         PICK-UP HOLD COUNT                   K5904500
         LTR   WB,WB               TEST FOR ANY                         K5905000
         BZ    CCJNOHLD            NONE--EXIT DELETION ROUTINE          K5905500
         LR    WC,R1               SAVE JQE ADDRESS OVER GETMAIN        K5906000
         LA    WF,CCJXNOP          SET POSSIBLE NOP FOR NO STORAGE      K5906500
         GETMAIN RC,LV=PSOLNGTH,SP=0  GET STORAGE FOR PSO ELEMENT       K5907000
         SPACE 1                                                        K5907500
         LR    R2,R1               RELOAD PSO ADDRESS (IF ANY)      R41 K5908000
         USING PSODSECT,R2         PROVIDE PSO ADDRESSABILITY       R41 K5908500
         LTR   R3,R15              TEST FOR STORAGE AVAILABLE       R41 K5909000
         BNZ   CCJRET              IF NONE--EXIT NOT CANCELLED          K5909500
         LR    R0,R1               CLEAR                             R4 K5910000
         LA    R1,PSOLNGTH          PSO                              R4 K5910500
         MVCL  R0,R2                 STORAGE                        R41 K5911000
        $TIME  ,                   GET CURRENT DATE IN R1           R41 K5911100
         ST    R1,PSOCRDT          SET CUT-OFF DATE                 R41 K5911200
         LR    R1,WC               RESTORE JQE ADDRESS               R4 K5911500
         OI    PSOFLG1,PSOFHLD+PSOFJOBI+PSOFJOBN SET PSO FLAGS          K5912000
         OI    PSOFLG2,PSOFDONE+PSOF$O SET ADDITIONAL FLAGS             K5912500
         OI    PSOUFLG,PSOFDELC    SET TO CANCEL DATA SETS              K5913000
         MVC   PSOJOBN,JQEJNAME    SET JOBNAME INTO PSO ELEMENT         K5913500
         MVC   PSOJOBNO,JQEJOBNO   SET JOB NUMBER INTO PSO ELEMENT      K5914000
         LR    R15,R2              SAVE ADDRESS OF NEW ELEMENT      R41 K5914500
         LA    R2,$OQUEUE-(PSONEXT-PSODSECT)  PREPARE TO SCAN PSO Q R41 K5915000
         L     R0,PSONEXT          PT TO NEXT ELEMENT                   K5915500
         LTR   R0,R0               TEST FOR LAST ELEMENT                K5916000
         BZ    *+10                YES--SET NEW LAST ELEMENT            K5916500
         LR    R2,R0                ELSE RELOAD ELEMENT ADDRESS     R41 K5917000
         B     *-12                AND LOOP TILL LAST FOUND             K5917500
         ST    R15,PSONEXT         ADD ELEMENT TO END OF CHAIN          K5918000
         L     R15,$PSOPCE         POINT TO PSO PCE                  R4 K5918500
         $POST (R15),WORK          POST PSO FOR DELETE REQUEST          K5919000
         DROP  R2                  KILL PSO ADDRESSABILITY          R41 K5919500
         SPACE 1                                                        K5920000
CCJNOHLD DS    0H                  COME HERE WHEN NO HELD DATA SETS     K5920500
         EJECT                                                          K5921000
*********************************************************************** K5921500
*                                                                     * K5922000
*        PURGE JOES FOR JOB                                           * K5922500
*                                                                     * K5923000
*********************************************************************** K5923500
         CLC   JQEJOE,$ZEROS       TEST FOR ANY JOES           @OZ27300 K5924000
         BZ    CCJNOJOE            SKIP CANCEL IF NONE                  K5924500
         $#CAN JQE=(R1)            CANCEL IDLE JOES                     K5925000
CCJNOJOE LR    R1,WE               MAKE SURE R1 STILL POINTS TO JQE     K5925500
*********************************************************************** K5926000
*                                                                     * K5926500
*        CANCEL ACTIVITY OR CHECKPOINT                                * K5927000
*                                                                     * K5927500
*********************************************************************** K5928000
CCJCANC  TM    JQETYPE,$XEQ        IS IT XEQ OR CONVERTER               K5928500
         BZ    CCJNDEV             BR IF NO                          R4 K5929000
         TM    JQEFLAGS,QUEBUSY    TEST FOR JOB ACTIVE                  K5929500
         BZ    CCJQPUT             BR IF NO TO RE-QUEUE              R4 K5930000
         CLI   JQETYPE,$XEQ        TEST FOR JOB CONVERTING              K5930500
         BE    CCJCKPT             POST CHECKPOINT IF YES               K5931000
         TM    CCJR,CCJFSTOP       IS THIS $P...                    R41 K5931500
         BO    CCJCKPT             DO NOT DISRUPT EXECUTION IF $P       K5932000
         OI    CCJR,CCJRCANX       SET FLAG TO RETURN CANCEL REQUIRED   K5932500
         EJECT                                                          K5933000
*********************************************************************** K5933500
*                                                                     * K5934000
*        FORCE CHECKPOINT OR PUT JQE ON $OUTPUT, $HARDCPY, OR         * K5934500
*        $PURGE QUEUE                                                 * K5935000
*                                                                     * K5935500
*********************************************************************** K5936000
CCJNDEV  TM    JQEFLAGS,QUEBUSY    IS JOB ACTIVE                        K5936500
         BNZ   CCJCKPT             CHECK POINT IF YES                   K5937000
CCJQPUT  LA    R0,$OUTPUT          SET OUTPUT                           K5937500
         $QPUT (R1),(R0)           PUT TO OUTPUT, HARDCPY, PURGE        K5938000
         B     CCJRETOK            RETURN WITH OK RETURN CODE        R4 K5938500
CCJCKPT  $QCKPT (R1)               FORCE CHECKPOINT OF JQE              K5939000
CCJRETOK LA    WF,CCJXOK           SET RETURN                           K5939500
         TM    CCJR,CCJRCANX       IS CANCEL SVC 34 REQUIRED            K5940000
         BZ    CCJRET              SKIP CANCEL EXECUTION IF NOT         K5940500
*********************************************************************** K5941000
*                                                                     * K5941500
*        TELL OPERATING SYSTEM TO CANCEL EXECUTION OF JOB             * K5942000
*                                                                     * K5942500
*********************************************************************** K5943000
         SPACE 1                                                    R41 K5943500
         USING SJBDSECT,WD         PROVIDE SJB ADDRESSABILITY       R41 K5944000
         SPACE 1                                                    R41 K5944500
         LM    WA,WC,CCJSAVEA      SAVE WORK SPACE CONTENTS         R41 K5945000
         ICM   WD,15,CCJSJBAD      PICK UP SJB ADDRESS              R41 K5945500
         BZ    CCJPITUH            BR IF NO SJB TO UNHOLD JQE       R41 K5946000
         OI    SJBFLG2,SJB2CNCL    SET CANCEL FLAG                      K5949500
         MVC   CCJSAVEA+4(8),SJBASCBP+SJBERRET-SJBERRET SET XM POST     K5950000
         ICM   WE,15,SJBCSCB       POINT TO CSCB                        K5950500
         USING CSCDSECT,WE                                              K5951000
         BZ    CCJPITTR            BR IF NO CSCB TO TEST RSTRT      R41 K5951500
         MODESET EXTKEY=ZERO       GET KEY 0                            K5952000
         OI    CHACT,CHCLD         TELL OS TO DO WHOLE JOB              K5952500
         MODESET EXTKEY=HASP       GET KEY 1                            K5953000
         LA    R1,CHCECB           POINT TO ECB                         K5953500
         ST    R1,CCJSAVEA         SET INTO XM POST ELEMENT             K5954000
         LA    R0,X'222'           SET ABEND CODE FOR NO DUMP           K5954500
         TM    CCJR,CCJRDUMP       IS 'DUMP' DESIRED                    K5955000
         BZ    CCJPOST             SKIP NEXT IF NOT                  R4 K5955500
         LA    R0,X'122'           SET ABEND CODE FOR DUMP              K5956000
CCJPOST  POST  ,(0),MF=(E,CCJSAVEA)  POST TO CANCEL JOB              R4 K5956500
         LA    R0,44               SET REQUEST TO SWAP IN               K5957000
         ICM   R0,12,SJBASID       SET ASID NUMBER                      K5957500
         SVC   95                  SWAP USER IN (MAYBE)                 K5958000
CCJPITTR DS    0H                  TEST RESTART BIT IN SJB          R41 K5958100
         TM    SJBFLG1,SJB1EJOB    Q. IF RESTART BIT SET                K5958500
         BO    CCJPITE             BR. IF YES                           K5959000
CCJPITUH DS    0H                  UNHOLD JQE                       R41 K5959100
         L     R1,CCJSAVE+4        RELOAD JQE ADDRESS                   K5959500
         NI    JQEFLAGS,255-QUEHOLDA-QUEHOLD1-QUEHOLD2  UNHOLD          K5960000
CCJPITE  STM   WA,WC,CCJSAVEA      RESTORE SAVE AREA                    K5960500
         DROP  WD,WE                                                    K5961000
CCJRET   LR    R15,WF              SET RETURN CODE                      K5961500
         LM    R0,R14,CCJSAVE      RESTORE USER REGISTERS               K5962000
         B     0(R15,R14)          RETURN TO USER                       K5962500
         EJECT                                                          K5963000
*********************************************************************** K5963500
*                                                                     * K5964000
*        VERB IS $C WITHOUT PURGE OPERAND                             * K5964500
*                                                                     * K5965000
*********************************************************************** K5965500
CCJC     TM    JQETYPE,$XEQ        TEST FOR XEQ OR CONVERTER            K5966000
         BO    CCJWXEQT            IF EITHER TEST FOR EXECUTING     R41 K5966500
CCJCRDRT LA    WF,CCJXNOP          SET NO-OP RETURN CODE            R41 K5970500
         CLI   JQETYPE,$INPUT      IS IT ON A READER                R41 K5971000
         BNE   CCJRET              IGNORE REQUEST                       K5973500
CCJCRDR  NI    JQEFLAGS,255-QUEHOLDA-QUEHOLD1-QUEHOLD2 RELEASE JOB   R4 K5974000
         OI    JQEFLAGS,QUEOPCAN   SET CANCEL                           K5974500
         B     CCJNDEV             CHECKPOINT OR PUT ON NEXT QUEUE   R4 K5975000
CCJWXEQT TM    JQEFLAGS,QUEBUSY    IS JOB ACTIVE...                 R41 K5975100
         BZ    CCJW                BR IF NO TO RELEASE              R41 K5975200
         CLI   JQETYPE,$XEQ        IS JOB CONVERTING...             R41 K5975300
         BNE   CCJWCAN             BR IF NO (EXECUTING)             R41 K5975400
CCJW     NI    JQEFLAGS,255-QUEHOLDA-QUEHOLD1-QUEHOLD2 RELEASE JOB   R4 K5975500
CCJWCAN  OI    JQEFLAGS,QUEOPCAN   SET CANCEL FLAG                  R41 K5976000
         B     CCJCANC             CANCEL ACTIVITY                      K5976500
         EJECT                                                          K5977000
*********************************************************************** K5977500
*                                                                     * K5978000
*        JOB CANCEL ROUTINE WORKAREA DEFINITIONS                      * K5978500
*                                                                     * K5979000
*********************************************************************** K5979500
         SPACE 3                                                        K5980000
CCJJMAX  DC    H'10000'            UPPER LIMIT FOR JOB NUMBERS          K5980500
CCJCBNK  DC    C'C '               COMMAND VERB                         K5981000
CCJDUMP  DC    C',DUMP'            DUMP OPTION CHARACTERS               K5981500
CCJSAVE  EQU   $REGSAVE            NON-REENTRANT REGISTER SAVE AREA R41 K5982000
CCJR     EQU   CCJSAVE+3,1         REQUESTS IN LOW BYTE OF R0           K5982500
CCJSAVEA EQU   CCJSAVE+4*R2,12     POST PARAMETER LIST                  K5983000
CCJSJBAD EQU   CCJSAVE+(R14-R0+1)*4  SJB ADDRESS SAVE AREA          R41 K5983200
         SPACE 3                                                        K5983500
CCJRDUMP EQU   CCJFDUMP            A DUMP IS REQUESTED                  K5984000
CCJRCANX EQU   X'20'               SVC 34 CANCEL REQUIRED               K5984500
CCJRSTOP EQU   CCJFSTOP            USER REQUESTED STOP JOB              K5985000
CCJRPURG EQU   CCJFPURG            USER REQUESTED PURGE JOB             K5985500
*        EQU   X'00'               USER REQUESTED CANCEL EXECUTION      K5986000
         SPACE 3                                                        K5986500
CCJXNJ   EQU   X'00'               RETURN OFFSET FOR 'NOT JOB'          K5987000
CCJXNOP  EQU   X'04'               RETURN OFFSET FOR 'NOP'              K5987500
CCJXOK   EQU   X'08'               RETURN OFFSET FOR 'OK'               K5988000
         TITLE 'HASP COMMAND PROCESSOR - PURGE TRACKS FOR SPIN DATA SETCK5988500
               S'                                                   R41 K5989000
*********************************************************************** K5989500
*                                                                     * K5990000
*        $IOTPUR -- IOT PURGE SERVICE ROUTINE                         * K5990500
*                                                                     * K5991000
* FUNCTIONS --                                                        * K5991500
*                                                                     * K5992000
*   (1) READ IN THE IOT FOR A SPIN DATA SET.                          * K5992500
*                                                                     * K5993000
*   (2) PURGE THE TRACKS USED FOR THE DATA SET IF AN ALLOCATION       * K5993500
*       IOT.                                                          * K5994000
*                                                                     * K5994500
*   (3) TURN OFF THE PSO FLAG IN THE PDDB (SO THAT THE DATA SET       * K5995000
*       WILL NOT BE RE-SPUN ON JES2 WARM START) AND REWRITE THE       * K5995500
*       IOT.                                                          * K5996000
*                                                                     * K5996500
* INPUT REGISTERS --                                                  * K5997000
*                                                                     * K5997500
*        R1 = ADDR OF WORK JOE                                        * K5998000
*                                                                     * K5998500
* OUTPUT REGISTERS --                                                 * K5999000
*                                                                     * K5999500
*        R0 - R15 UNCHANGED (RETURN IS TO LINK+0)                     * K6000000
*                                                                     * K6000500
* NOTE - IF UNABLE TO GET AN IOT BUFFER, AN IMMEDIATE RETURN IS       * K6001000
*       MADE INSTEAD OF WAITING FOR A BUFFER.  IF AN I/O ERROR        * K6001500
*       OCCURS WHEN READING OR WRITING AN IOT THE $IOERROR            * K6002000
*       MACRO IS ISSUED TO WRITE A DIAGNOSTIC MESSAGE TO THE          * K6002500
*       CONSOLE.  HOWEVER, THE $IOERROR ROUTINE WILL RETURN           * K6003000
*       WITHOUT WAITING IF UNABLE TO GET A CMB.                       * K6003500
*                                                                     * K6004000
*********************************************************************** K6004500
         EJECT                                                      R41 K6005000
$IOTPUR  DS    0H                  ENTRY POINT                      R41 K6005500
         USING $IOTPUR,R15         TEMPORARY ADDRESSABILITY         R41 K6006000
         USING JOEDSECT,WE         ADDRESSABILITY FOR JOE           R41 K6006500
         USING IOTDSECT,WF         ADDRESSABILITY FOR IOT           R41 K6007000
         USING PDBDSECT,WD         ADDRESSABILITY FOR PDDB          R41 K6007500
         SPACE 2                                                    R41 K6008000
         STM   R14,R10,COMREGSV+12 STORE REGISTERS             @OZ18622 K6008500
         LR    BASE3,R15           ESTABLISH WORKING BASE           R41 K6009000
         DROP  R15                                                  R41 K6009500
         USING $IOTPUR,BASE3                                        R41 K6010000
         LR    WE,R1               GET ADR OF WORK JOE              R41 K6010500
        $GETBUF ,                  GET IOT BUFFER                   R41 K6011500
         BZ    CIPEXIT             RETURN IF NO BUFFER AVAIL        R41 K6012000
         LR    WF,R1               POINT TO IOT BUFFER              R41 K6012500
*********************************************************************** K6013000
*                                                                     * K6013500
*        READ SPIN DATA SET IOT                                       * K6014000
*                                                                     * K6014500
*********************************************************************** K6015000
CIPREAD  MVI   PCEDEVTP,PCEDARD    SET UP DCT TO READ               R41 K6015500
         ST    WF,PCEBUFAD         ADDR OF BUFFER                   R41 K6016000
         MVC   PCESEEK,JOEIOTTR    MTTR OF SPIN IOT                 R41 K6016500
         LA    R1,PCEDADCT         ADDR OF DCT                      R41 K6017000
        $EXCP  (R1),WAIT=YES       READ SPIN IOT                    R41 K6017500
         BM    CIPFBUF             GO FREE IOT BUFFER IF ERROR      R41 K6018000
         SPACE 2                                                    R41 K6018500
*********************************************************************** K6019000
*                                                                     * K6019500
*        PURGE SPIN DATA SET TRACKS IF ALLOCATION IOT                 * K6020000
*                                                                     * K6020500
*********************************************************************** K6021000
CIPIOT   DS    0H                                              @OZ49172 K6021100
         CLC   IOTID,=C'IOT '      TEST FOR VALID IOT          @OZ49172 K6021200
         BE    CIPIOT1             BR IF VALID IOT             @OZ49172 K6021300
CIPDSTER $DISTERR                  INDICATE DISASTEROUS ERR    @OZ49172 K6021400
         B     CIPFBUF             GO FREE IOT BUF IF ERR      @OZ49172 K6021500
CIPIOT1  TM    IOTFLAG1,IOT1ALOC   IF NOT AN ALLOCATION IOT    @OZ49172 K6021600
         BNO   CIPPSO              BRANCH (NO TRACKS TO PURGE)      R41 K6022000
        $PURGE IOTTGMAP            PURGE SPIN DATA SET TRACKS       R41 K6022500
         NI    IOTFLAG1,255-IOT1ALOC  TURN OFF ALLOCATE FLAG        R41 K6023000
*********************************************************************** K6023500
*                                                                     * K6024000
*        UPDATE PDDB FLAG AND WRITE IOT                               * K6024500
*                                                                     * K6025000
*********************************************************************** K6025500
CIPPSO   L     WD,$IOTPDDB         GET PDDB DISPLACEMENT            R41 K6026000
         ALR   WD,WF               GET ADDR OF PDDB, MAKE DS        R41 K6026500
         NI    PDBFLAG1,255-PDB1PSO INELIGIBLE FOR WARMSTART        R41 K6027000
         MVI   PCEDEVTP,PCEDAWR    SET UP DCT FOR WRITE             R41 K6027500
         LA    R1,PCEDADCT         POINT TO DCT                     R41 K6028000
        $EXCP  (R1),WAIT=YES       WRITE UPDATED IOT                R41 K6028500
*********************************************************************** K6030000
*                                                                     * K6030500
*        NOTE--IF AN IO READ/WRITE ERROR OCCURS, $EXCP WILL           * K6031000
*              ISSUE THE $IOERROR MACRO TO OUTPUT A DIAGNOSTIC        * K6031500
*              MESSAGE.  IF HOWEVER, THE $IOERROR ROUTINE IS          * K6032000
*              UNABLE TO GET A CMB, IT WILL RETURN (WITHOUT           * K6032500
*              WAITING FOR A CMB) TO PROTECT AGAINST A POSSIBLE       * K6033000
*              CONSOLE LOCKOUT.                                       * K6033100
*                                                                     * K6033500
*********************************************************************** K6034000
         SPACE 2                                                    R41 K6035000
CIPFBUF $FREEBUF (WF)              FREE IOT BUFFER                  R41 K6035500
         SPACE 2                                                    R41 K6036000
CIPEXIT $QSUSE                     REQUEST ACCESS TO CKPT DATA      R41 K6036500
         LM    R14,R10,COMREGSV+12 RESTORE REGISTERS           @OZ18622 K6036600
         BR    LINK                RETURN TO CALLER                 R41 K6037000
         LTORG                                                 @OZ50888 K6037250
$COMMEND DS    0D                                                   R41 K6037500
$MLENGTH $DLENGTH HEADER=M         COMPUTE HASPCOMM CSECT LEN       R41 K6038000
         SPACE 2                                                    R41 K6039000
HASPCOMA CSECT                     REVERT TO HASPCOMA CSECT         R41 K6039500
$COMAEND DS    0D                  FILL OUT CONTROL SECTION         R41 K6040000
$ALENGTH $DLENGTH HEADER=A         COMNPUTE HASPCOMA CSECT LEN      R41 K6040500
         SPACE 5                                                    R41 K6041000
*              THIS LINE DELETED BY APAR NUMBER                @OZ50888 K6041500
APARNUM  DC    CL5'56448'          APAR NUMBER                          K6042498
         END   ,                                                    R41 K6042500
