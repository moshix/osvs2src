RDR      TITLE 'HASP INPUT SERVICE PROLOG'                     @OZ18212 R0002000
*********************************************************************** R0004000
*                                                                     * R0006000
* MODULE NAME = HASJES20 ( HASPRDR CSECT )                            * R0008000
*                                                                     * R0010000
* DESCRIPTIVE NAME = HASPRDR CSECT OF JES2 MAIN MODULE                * R0012000
*                                                                     * R0014000
* COPYRIGHT = NONE                                                    * R0016100
*                                                                     * R0018000
* STATUS = OS/VS2 MVS   --  SEE &VERSION (BELOW) FOR JES2 LEVEL       * R0020000
*                                                                     * R0022000
* FUNCTION = THE HASPRDR CSECT PROVIDES INPUT SERVICE TO THE JES2     * R0024000
*            SUBSYSTEM.  THE FUNCTIONS OF THIS MODULE ARE AS          * R0026000
*            FOLLOWS --                                               * R0028000
*                                                                     * R0030000
*              1.  TO READ CARD IMAGES FROM AN INPUT DEVICE.          * R0032000
*                                                                     * R0034000
*              2.  TO DETECT AND SCAN JOB CARDS, EXTRACTING PARAM-    * R0036000
*                  ETERS FOR JOB ACCOUNTING, JOB CONTROL, AND PRINT   * R0038000
*                  AND PUNCH IDENTIFICATION.                          * R0040000
*                                                                     * R0042000
*              3.  TO DETECT AND PROCESS OTHER CONTROL CARDS, SUCH AS * R0044000
*                  THE COMMAND, PRIORITY, ROUTE, SETUP, MESSAGE,      * R0046000
*                  JOBPARM, OUTPUT, DD *, AND DD DATA CARDS.          * R0048000
*                                                                     * R0050000
*              4.  TO ASSIGN A UNIQUE JOB IDENTIFIER (JOBID) TO EACH  * R0052000
*                  JOB.                                               * R0054000
*                                                                     * R0056000
*              5.  TO LOG JOBS INTO THE JES2 SYSTEM.                  * R0058000
*                                                                     * R0060000
*              6.  TO ASSIGN JOB PRIORITY BASED UPON PRIORITY CARD,   * R0062000
*                  JOB CARD, OR JOBPARM CARD PARAMETERS.              * R0064000
*                                                                     * R0066000
*              7.  TO GENERATE, FROM CARDS READ, A JCL FILE AND INPUT * R0068000
*                  DATA FILES, AND TO RECORD THESE FILES ON DIRECT-   * R0070000
*                  ACCESS STORAGE DEVICE(S) FOR LATER USE BY THE JOB  * R0072000
*                  EXECUTION STAGES (SPOOLING FUNCTION).              * R0074000
*                                                                     * R0076000
*              8.  TO GENERATE JES2 JOB CONTROL TABLES, INPUT/OUTPUT  * R0078000
*                  TABLES, JOB QUEUE ENTRIES, AND OTHER JES2 CONTROL  * R0080000
*                  BLOCKS REQUIRED FOR LATER JOB PROCESSING.          * R0082000
*                                                                     * R0084000
*              9.  TO QUEUE JOBS FOR PROCESSING BY THE JCL CONVERSION * R0086000
*                  PROCESSOR.                                         * R0088000
*                                                                     * R0090000
*                                                                     * R0092000
* NOTES = SEE BELOW                                                   * R0094000
*                                                                     * R0096000
*    DEPENDENCIES = NONE                                              * R0098000
*                                                                     * R0100000
*    RESTRICTIONS = NONE                                              * R0102000
*                                                                     * R0104000
*                                                                     * R0106000
*                                                                     * R0108000
*                                                                     * R0110000
*                                                                     * R0112000
*    REGISTER CONVENTIONS = R0          = WORK REGISTER               * R0114000
*                           R1          = WORK REGISTER               * R0116000
*                           R2  = RW    = WORK REGISTER               * R0118000
*                           R3  = RBI   = ADDRESS OF INPUT BUFFER     * R0120000
*                           R4  = RPI   = ADDR OF NEXT INPUT CARD     * R0122000
*                           R5  = RL1   = INTERNAL LINK REGISTER      * R0124000
*                           R6  = RL2   = INTERNAL LINK REGISTER      * R0126000
*                           R7  = RBASE2= PROCESSOR SECONDARY BASE    * R0128000
*                           R8  = BASE3 = SECONDARY BASE REGISTER     * R0130000
*                           R9          = UNUSED                      * R0132000
*                           R10 = JCT   = ADDRESS OF JES2 JCT         * R0134000
*                           R11 = BASE1 = ADDRESS OF HCT              * R0136000
*                           R12 = BASE2 = PROCESSOR ADDRESSABILITY    * R0138000
*                           R13 = SAVE  = ADDRESS OF INPUT PCE        * R0140000
*                           R14 = LINK  = LINK REGISTER               * R0142000
*                           R15         = WORK REGISTER               * R0144000
*                                                                     * R0146000
*    PATCH LABEL = NONE                                               * R0148000
*                                                                     * R0150000
* MODULE TYPE = PROCESSOR, TABLE ( CSECT TYPE )                       * R0152000
*                                                                     * R0154000
*    PROCESSOR = ASSEMBLER F                                          * R0156000
*                                                                     * R0158000
*    MODULE SIZE = SEE $DLENGTH MACRO EXPANSION(S) AT END OF ASSEMBLY * R0160000
*                                                                     * R0166000
*    ATTRIBUTES = READ ONLY (AFTER PROCESSOR INITIALIZATION) AND      * R0168000
*                 HASP REENTRANT                                      * R0170000
*                                                                     * R0172000
* ENTRY POINTS = $READ    -- PRIMARY PROCESSOR ENTRY POINT            * R0174000
*                HASPRJCS -- JOB CONTROL INFORMATION INITIALIZATION   * R0176000
*                HASPRSCN -- JOB CARD ACCOUNTING FIELD SCAN           * R0178000
*                                                                     * R0180000
*    PURPOSE = SEE FUNCTION                                           * R0182000
*                                                                     * R0184000
*    LINKAGE = STANDARD JES2 PROCESSOR LINKAGE CONVENTIONS            * R0186000
*                                                                     * R0188000
* INPUT = R0-R10 = ZERO                                               * R0190000
*         R11    = ADDRESS OF HCT                                     * R0192000
*         R12    = PROCESSOR ADDRESSABILITY                           * R0194000
*         R13    = ADDRESS OF INPUT PCE                               * R0196000
*         R14    = ZERO                                               * R0198000
*         R15    = ADDRESS OF ENTRY POINT                             * R0200000
*                                                                     * R0202000
* OUTPUT = SEE REGISTER CONVENTIONS                                   * R0204000
*                                                                     * R0206000
* EXIT-NORMAL = TO JES2 DISPATCHER ($WAIT)                            * R0208000
*                                                                     * R0210000
* EXIT-ERROR = NONE                                                   * R0212000
*                                                                     * R0214000
*                                                                     * R0216000
*                                                                     * R0218000
*                                                                     * R0220000
*                                                                     * R0222000
* EXTERNAL REFERENCES = SEE BELOW                                     * R0224000
*                                                                     * R0226000
*    ROUTINES = TIME ROUTINE (SVC 11)                                 * R0228000
*               POST ROUTINE (SVC 2)                                  * R0230000
*               MISCELLANEOUS JES2 SERVICE ROUTINES IN HASPNUC        * R0232000
*                                                                     * R0234000
*    DATA AREAS -- COMMUNICATIONS VECTOR TABLE (CVT)                  * R0236000
*                  SYSTEM MANAGEMENT CONTROL AREA (SMCA)              * R0238000
*                                                                     * R0240000
*    CONTROL BLOCKS = MISCELLANEOUS JES2 CONTROL BLOCKS (SEE MACROS)  * R0242000
*                                                                     * R0244000
* TABLES = RSCANTBL -- CONTROL CARD SCAN TABLE                        * R0246000
*                                                                     * R0248000
* MACROS = SEE $HASPCB MACRO FOR CONTROL BLOCK MACROS USED            * R0250000
*                                                                     * R0251000
* CHANGE ACTIVITY                                                     * R0251100
*                                                                     * R0251200
*     RELEASE 4.0 = OZ03304,OZ04322,OZ04973,OZ04981,OZ06724,OZ06748,  * R0251400
*                   OZ08209,OZ09031,OZ09041                           * R0251500
*                                                                     * R0251600
*     RELEASE 4.1 = OZ10325,OZ10356,OZ11741,OZ11742,OZ14246,OZ15289,  * R0251700
*                   OZ15825                                           * R0251800
*                                                                     * R0256000
*********************************************************************** R0258000
         TITLE 'HASP CONTROL BLOCK GENERATION MACRO'                    R0260000
         SPACE 5                                                        R0262000
*                                                                       R0264000
***** $HASPCB  *****          GENERATE HASP CONTROL BLOCKS              R0266000
*                                                                       R0268000
*                                                                       R0270000
         MACRO                                                          R0272000
         $HASPCB &DOC=NO,&LIST=NO                                       R0274000
         GBLC  &PRINT,&GEN,&DATA                                        R0276000
         PUSH  PRINT                                                    R0278000
         PRINT &PRINT                                                   R0280000
         $CVT  LIST=&LIST          GENERATE OS CVT DSECT                R0282000
         $DCB  LIST=&LIST          GENERATE OS DCB DSECT                R0284000
         $DEB  LIST=&LIST          GENERATE OS DEB DSECT                R0286000
         $UCB  LIST=&LIST          GENERATE OS UCB DSECT                R0288000
         $TGM  DOC=&DOC            GENERATE HASP TGM DSECT              R0292000
         $TAB  DOC=&DOC            GENERATE HASP TAB DSECT           R4 R0292100
         $SVT  DOC=&DOC            GENERATE HASP SSVT DSECT             R0294000
         $HCT  DOC=&DOC            GENERATE HASP HCT DSECT              R0296000
         $PCE  DOC=&DOC            GENERATE HASP PCE DSECT              R0298000
         $LRC  DOC=&DOC            GENERATE HASP LRC DSECT              R0300000
         $SCR  DOC=&DOC            GENERATE HASP SCR DSECT           R4 R0301000
         $BUFFER DOC=&DOC          GENERATE HASP BUFFER DSECT           R0302000
         $CMB  DOC=&DOC            GENERATE HASP CMB DSECT              R0304000
         $JQE  DOC=&DOC            GENERATE HASP JQE DSECT              R0306000
         $QSE  DOC=&DOC            GENERATE HASP QSE DSECT              R0307000
         $JCT  DOC=&DOC            GENERATE HASP JCT DSECT              R0308000
         $PDDB DOC=&DOC            GENERATE HASP PDDB DSECT             R0310000
         $IOT  DOC=&DOC            GENERATE HASP IOT DSECT              R0312000
         $CAT  DOC=&DOC            GENERATE HASP CAT DSECT              R0314000
         $OCR  DOC=&DOC            GENERATE HASP OCR DSECT              R0316000
         $OCT  DOC=&DOC            GENERATE HASP OCT DSECT              R0318000
         $SCAT DOC=&DOC            GENERATE HASP SCAT DSECT             R0320000
         $RAT  DOC=&DOC            GENERATE HASP RAT DSECT              R0322000
         $DCT  DOC=&DOC            GENERATE HASP DCT DSECT              R0324000
         $RDRWORK DOC=&DOC         GENERATE INPUT PCE WORK AREA DSECT   R0326000
         SPACE 3                                                        R0328000
         POP   PRINT                                                    R0330000
         PRINT &GEN,&DATA          SET ASSEMBLY PRINT OPTIONS           R0332000
         MEND                                                           R0334000
         TITLE 'HASP INPUT SERVICE PROCESSOR'                           R0340000
         SPACE 5                                                        R0342000
HASPRDR  START 0                   HASP INPUT PROCESSOR                 R0344000
         SPACE 5                                                        R0346000
*                                                                       R0348000
*                             EXTERNAL REFERENCES                       R0350000
*                                                                       R0352000
         SPACE 3                                                        R0354000
         ENTRY $RDREND             END OF HASPRDR CSECT                 R0356000
         ENTRY $RDROEND            END OF HASPRDRO CSECT                R0358000
         SPACE 5                                                        R0378000
         COPY  $HASPGEN            COPY HASPGEN PARAMETERS              R0380000
         TITLE 'HASP CONTROL BLOCKS'                                    R0382000
HASPRDR  $ENTRY CSECT=YES,BASE=(BASE2,RBASE2)  DEFINE ENTRY POINT    R4 R0384000
         SPACE 5                                                        R0386000
*                                                                       R0388000
*                             DOCUMENTATION OPTIONS FOR THIS ASSEMBLY   R0390000
*                                                                       R0392000
         SPACE 3                                                        R0394000
        $SYSPARM (OFF,GEN,NODATA,NO,NO)                                 R0396000
         SPACE 5                                                        R0398000
*                                                                       R0400000
*                             GENERATE HASP CONTROL BLOCKS              R0402000
*                                                                       R0404000
         SPACE 3                                                        R0406000
        $HASPCB DOC=&DOC,LIST=&LIST  GENERATE HASP CONTROL BLOCKS       R0408000
         TITLE 'HASP INPUT SERVICE -- CONTROL CARD SCAN TABLE DSECT'    R0410000
         SPACE 5                                                        R0412000
RSCANTBL DSECT                     CONTROL CARD SCAN TABLE DSECT        R0414000
RSCANAME DS    CL7                 KEYWORD NAME (7 CHARACTERS MAX)      R0416000
RSCANABR DS    C                   KEYWORD ABREVIATION (1 CHARACTER)    R0418000
RSCANFLG DS    X                   KEYWORD VALUE FLAGS                  R0420000
RSCFLCOM EQU   B'10000000'              MASK IS COMPLEMENTED            R0422000
RSCFLNUM EQU   B'10000000'              VALUE MUST BE NUMERIC           R0424000
RSCFLBIN EQU   B'01000000'              CONVERT VALUE TO BINARY         R0426000
RSCFLEFT EQU   B'00100000'              LEFT ADJUST VALUE               R0428000
RSCFLBLK EQU   B'00010000'              BLANK-FILL VALUE                R0430000
RSCFLPCT EQU   B'00001111'              MAXIMUM NUMBER OF VALUES        R0432000
RSCANMSK DS    0X                  KEYWORD MASK                         R0434000
RSCANLEN DS    AL1                 KEYWORD VALUE LENGTH                 R0436000
RSCANDSP DS    AL2                 KEYWORD VALUE DISPLACEMENT           R0438000
RSCANEXT DS    0F                  ADDRESS OF NEXT TABLE ENTRY          R0440000
HASPRDR  CSECT                     END OF CONTROL CARD SCAN DSECT       R0442000
         TITLE 'HASP INPUT SERVICE PROCESSOR'                           R0444000
*                                                                       R0446000
*                             READER REGISTER DEFINITIONS               R0448000
*                                                                       R0450000
         SPACE 3                                                        R0452000
RW       EQU   WA                  WORK REGISTER                        R0454000
RBI      EQU   WB                  INPUT BUFFER                         R0456000
RPI      EQU   WC                  INPUT POINTER                     R4 R0458000
RL1      EQU   WD                  INTERNAL LINK REGISTER 1          R4 R0460000
RL2      EQU   WE                  INTERNAL LINK REGISTER 2          R4 R0462000
RBASE2   EQU   WF                  INPUT SERVICE BASE REGISTER       R4 R0464000
         SPACE 4                                                        R0466000
*                                                                       R0468000
*                             READER BUFFER DEFINITIONS                 R0470000
*                                                                       R0472000
         SPACE 3                                                        R0474000
RBUFTRK  EQU   HDBNXTRK-BUFDSECT   BUFFER CHAIN TRACK DISPLACEMENT      R0476000
*                                  INPUT BUFFER START DISPLACEMENT      R0478000
ROBUFST  EQU   HDBSTART-BUFDSECT   OUTPUT BUFFER START DISPLACEMENT     R0482000
         SPACE 4                                                        R0486000
*                                                                       R0488000
*                             MISCELLANEOUS DEFINITIONS                 R0490000
*                                                                       R0492000
         SPACE 3                                                        R0494000
*                               RDRSW                                R4 R0495000
RJFLUSH  EQU   X'01'               JOB FLUSH SWITCH                     R0496000
RNOSCAN  EQU   X'02'               NO CARD SCAN SWITCH                  R0498000
RDREOFSW EQU   X'04'               END-OF-FILE SWITCH                   R0500000
RJCLSW   EQU   X'08'               JOB CONTROL LANGUAGE SWITCH          R0502000
RSYSINSW EQU   X'10'               GENERATED DD * PROCESSING SWITCH     R0504000
RXBJOBSW EQU   X'20'               XEQ BATCH CLASS JOB SWITCH           R0506000
RJNABORT EQU   X'40'               READER PURGE SWITCH              R41 R0507000
RJKILL   EQU   X'80'               JOB KILLED VIA RJOBKILL     @OZ19495 R0507500
RUNIEXCP EQU   X'01'               UNIT EXCEPTION BIT                   R0508000
*                               RDRSW2                               R4 R0509000
RJCLH    EQU   X'01'               TYPRUN=JCLHOLD                    R4 R0509100
RTPCPY   EQU   X'08'               TYPRUN=COPY FLAG.           @OZ48524 R0509800
*                                                                    R4 R0509900
RSIOCSWS EQU   X'10'               SIO CSW STORED BIT                   R0510000
RSIOCC   EQU   X'30'               SIO COMPLETION CODE BITS             R0512000
RDLMSKIP EQU   LRC1RSV7            DLM TEST BYPASS SWITCH            R4 R0513000
         TITLE 'HASP INPUT SERVICE -- PROCESSOR INITIALIZATION'         R0514000
         SPACE 5                                                     R4 R0515000
         LA    RBASE2,2048(,BASE2)  SET UP                           R4 R0515500
         LA    RBASE2,2048(,RBASE2)  SECOND BASE REGISTER            R4 R0516000
         L     R1,=A(RCOMCHAR)     INITIALIZE COMMAND CHARACTER      R4 R0517000
         MVC   0(1,R1),$RCOMCHR     IN CONTROL CARD ROUTING TABLE    R4 R0518000
         SPACE 5                                                     R4 R0519000
         USING BUFDSECT,RBI        ESTABLISH IOB ADDRESSABILITY         R0520000
$READ   $LINK  HASPRDRI            LINK TO INITIALIZATION MODULE     R4 R0522000
         EJECT                                                          R0524000
HASPRDRO CSECT                     DEFINE SUBROUTINE CSECT              R0526000
HASPRDRI $ENTRY                    DEFINE INITIALIZATION SEGMENT        R0528000
         L     RL1,PCEDCT          GET ADDRESS OF INPUT DCT    @OZ32566 R0529000
         USING DCTDSECT,RL1        ESTABLISH DCT ADDRESSABILITY      R4 R0530000
         SPACE 3                                                        R0532000
RGETUNIT NULL                      *                                 R4 R0534000
        $GETUNIT (RL1)             ATTEMPT TO ACQUIRE INPUT DCT      R4 R0536100
         BNZ   RGOTUNIT            BRANCH IF DEVICE IS AVAILABLE     R4 R0538000
         SPACE 2                                                     R4 R0539000
         TM    PCEID,PCERJEID      TEST DEVICE TYPE                  R4 R0542000
         BO    RJEWAIT             BRANCH IF REMOTE DEVICE           R4 R0544000
         TM    PCEID,PCEINRID      IS THIS INT RDR...          @OZ37382 R0544500
         BZ    RGETUN1             BR IF NOT                   @OZ37382 R0545000
         TM    RIDFLAGS,RIDEOM     IS EOM IN PROGRESS...       @OZ37382 R0545500
         BZ    RGETUN1             BR IF NOT                   @OZ37382 R0545600
         NI    RIDFLAGS,255-RIDEOM RESET FLAG BIT              @OZ37382 R0545700
         $XMPOST RIDEOMP             AND POST WAITING TASK     @OZ37382 R0545800
RGETUN1  DS    0H                                              @OZ37382 R0545900
        $WAIT  UNIT,INHIBIT=NO     NO, WAIT FOR UNIT RECORD DEVICE   R4 R0546000
         B     RGETUNIT            GO TRY AGAIN                      R4 R0548000
         SPACE 3                                                     R4 R0549000
RJEWAIT $WAIT  WORK                $WAIT FOR RJE DEVICE              R4 R0552000
         B     RGETUNIT            GO TRY AGAIN                      R4 R0554000
         EJECT                                                       R4 R0556000
RGOTUNIT NI    DCTFLAGS,DCTHOLDJ   RESET OPERATOR COMMANDS           R4 R0576000
        $ACTIVE                    INDICATE PROCESSOR ACTIVE            R0584000
         TM    PCEID,PCEINRID      IS THIS INTERNAL READER              R0588000
         BZ    RNOTINR1            BRANCH IF NOT INTERNAL READER     R4 R0590000
         ICM   RBI,15,RIDPBF       GET ADDRESS OF PROTECTED BUFFER      R0592000
         BNZ   RINRSTRT            BRANCH IF BUFFER IS RESIDUAL         R0594000
         GETMAIN RC,SP=231,LV=RIDBUFSZ+256  GET STORAGE FOR BUFFERS     R0596000
         LTR   R15,R15             TEST SUCCESS OF GETMAIN              R0598000
         BNZ   RRETURN             BRANCH IF GETMAIN WAS NOT SUCCESSFUL R0600000
         LR    RBI,R1              RBI = ADDRESS OF PROTECTED BUFFER    R0602000
         ST    RBI,RIDPBF          SAVE ADDRESS                         R0604000
RINRSTRT LA    RPI,RIDBUFSZ(,RBI)  GET ADDRESS OF WORK AREA             R0606000
         B     RRETURN             CONTINUE PROCESSING                  R0608000
         SPACE 1                                                     R4 R0610000
RNOTINR1 NULL                      *                                 R4 R0612000
         TM    PCEID,PCERJEID      IS THIS A REMOTE TERMINAL         R4 R0614800
         BZ    RINBGET             BRANCH IF NOT                     R4 R0615200
         SPACE 1                                                     R4 R0620200
ROPEN    OI    DCTSTAT,DCTHOLD     SET DEVICE UNAVAILABLE            R4 R0620300
        $EXTP  OPEN,(RL1)          OPEN REMOTE TERMINAL FOR INPUT       R0620400
         LA    RPI,RTPCARD         INITIALIZE ADDRESS OF CARD IMAGE  R4 R0622000
         B     RRETURN             CONTINUE PROCESSING               R4 R0624000
         SPACE 1                                                     R4 R0626000
RINBGET $GETBUF WAIT=YES           GET INPUT BUFFER                  R4 R0628000
         EJECT                                                       R4 R0635000
         LR    RBI,R1              RBI = ADDRESS OF INPUT BUFFER     R4 R0636000
         LA    RW,BUFSTART         RW = START OF CCW CHAIN              R0638000
         ST    RW,IOBSTART         SET IOBSTART IN INPUT BUFFER         R0640000
         ST    RBI,DCTBUFAD        SET INPUT BUFFER                     R0642000
         SLR   R0,R0               OBTAIN                            R4 R0643200
         LH    R1,$BUFSIZE          COUNT                            R4 R0643600
         D     R0,RF88               OF CCW'S                        R4 R0644000
         LR    RL2,R1                 PER BUFFER                     R4 R0644400
         BCTR  RL2,0                   (MINUS 1)                     R4 R0644800
         SLL   R1,3                      SET UP                      R4 R0645200
         LA    R0,BUFSTART-BUFDSECT(,R1)  READER                     R4 R0645600
         ST    R0,RIBUFST                  CCW                       R4 R0646000
         AL    R0,RDRCCW                    IN R0                    R4 R0646400
         L     R1,RDRCCW+4                   AND R1                  R4 R0646800
         L     R15,DCTDCB          R15 = DCB ADDRESS                    R0648000
         L     R15,DCBDEBAD-DCBDSECT(,R15)   R15 = DEB ADDRESS          R0650000
         L     R15,DEBSUCBA-DEBDSECT(,R15)   R15 = UCB ADDRESS          R0652000
         CLI   UCBTBYT4-UCBDSECT(R15),UCB2540R  TEST DEVICE TYPE     R4 R0654000
         BE    SKIP10              SET STACKER 2 IF 2540 READER      R4 R0656000
         ICM   R0,8,RDRCCW1        SET STACKER 1 IF NOT 2540 READER  R4 R0658000
SKIP10   ALR   R0,RBI              SET BUFFER ADDRESS IN CCW            R0660000
         DROP  RL1                 DROP DCT ADDRESSABILITY              R0662000
         SPACE 1                                                     R4 R0663000
RCCWBLD  STM   R0,R1,0(RW)         STORE CCW                            R0664000
         LA    RW,8(,RW)           UPDATE CCW LIST ADDRESS              R0666000
         AL    R0,=F'80'           UPDATE CCW DATA ADDRESS              R0668000
         BCT   RL2,RCCWBLD         GENERATE CCW CHAIN                   R0670000
         LA    R1,0(,R1)           CLEAR COMMAND CHAIN BIT              R0672000
         STM   R0,R1,0(RW)         STORE LAST CCW                       R0674000
         ST    JCT,RBIEND          INITIALIZE BUFFER END                R0676000
         SPACE 2                                                     R4 R0678000
RRETURN  ST    JCT,PCEIOEWF        INITIALIZE DIRECT-ACCESS DCT         R0680000
         MVI   RDRSW,RJFLUSH       SET FOR JOB FLUSH                    R0682000
         MVC   RPRIORTY,=CL2' '    SET STANDARD PRIORITY             R4 R0684000
         MVC   RDRDLM,=CL2'/*'     SET INPUT DATA SET DELIMITER         R0686000
RDRIRET $RETURN                    RETURN TO MAIN PROCESSOR          R4 R0691900
         SPACE 3                                                     R4 R0698000
*                                                                       R0700000
*                             INITIALIZATION CONSTANTS                  R0702000
*                                                                       R0704000
         SPACE 2                                                     R4 R0706000
RF88     DC    F'88'               CONSTANT                          R4 R0708000
RDRCCW   DC    0F'0',X'42',AL3(*-*),X'40',AL3(80)  2540 READ CCW     R4 R0709000
RDRCCW1  DC    X'02'               NON-2540 READ CCW OPERATION       R4 R0710000
         SPACE 2                                                     R4 R0712000
         DROP  BASE3               DROP SEGMENT ADDRESSABILITY          R0714000
         TITLE 'HASP INPUT SERVICE -- MAIN PROCESSOR'                   R0716000
HASPRDR  CSECT                     DEFINE MAIN PROCESSOR RESIDENT       R0718000
RCRDOUT  BAL   RL1,RPUT            PUT CARD IN OUTPUT BUFFER            R0720000
RNXTCRD  BAL   RL1,RGET            GET NEXT CARD                        R0722000
         B     RDREND              BRANCH IF EOF                        R0724000
         TM    RDRSW,RNOSCAN       TEST FOR CARD SCAN.         @OZ48524 R0724500
         BO    RDATAC              BRANCH IF NOT.              @OZ48524 R0725000
         TM    RDRSW,RJCLSW+RXBJOBSW    TEST CURRENT MODE               R0726000
         BZ    RDATAC              BRANCH IF DATA CARD.        @OZ48524 R0728000
         MVC   RDRDLM,=CL2'/*'     SET INPUT DATA SET DELIMITER         R0730000
RDATAC   DS    0H                                              @OZ48524 R0730100
         CLC   0(2,RPI),RDRDLM     TEST FOR DELIMITER CARD              R0732000
         BNE   RSCANCHK            BRANCH IF NOT DELIMITER CARD         R0734000
         NI    RDRSW,255-RNOSCAN   TURN ON CARD SCAN                    R0736000
         CLC   0(2,RPI),=CL2'/*'   TEST FOR HASP CONTROL CARD           R0738000
         BNE   RNOTCCRD            BR IF NOT HASP CONTROL CARD          R0740000
         CLI   2(RPI),C' '         TEST FOR HASP CONTROL CARD           R0742000
         BE    RNOTCCRD            BRANCH IF NOT HASP CONTROL CARD      R0744000
        $LINK  HASPRCCS            SCAN HASP CONTROL CARD               R0746000
         BR    RL2                 UPON RETURN RL2 SPECIFIES EXIT       R0748000
         SPACE 3                                                     R4 R0750000
RNOTCCRD TM    RDRSW,RXBJOBSW      TEST STATUS                          R0752000
         BO    RCRDOUT             BRANCH IF EXECUTION BATCHING         R0754000
         TM    RDRSW2,RTPCPY       IF TYPRUN=COPY, BYPASS      @OZ53356 R0754100
         BO    RCRDOUT              SETTING NULL FLAG          @OZ53356 R0754200
         OI    RCARDLRC,RDLMSKIP   DON'T COUNT DELIMITER       @OZ53442 R0756000
         TM    RDRSW,RJCLSW        TEST JCL SWITCH             @OZ53442 R0758000
         BO    RCRDOUT             BYPASS FURTHER PROC IF SET  @OZ53442 R0760000
         OI    RCARDLRC,LRC1INUL   ELSE SET NULL-ON-INPUT AND  @OZ53442 R0762000
         BAL   RL1,RPUT               ADD CARD TO OUTPUT FILE  @OZ53442 R0763000
         OI    RDRSW,RJCLSW        SET JCL SWITCH                       R0764000
         B     RFLTEST             TERMINATE DATA SET                   R0766000
         SPACE 3                                                     R4 R0768000
RPRIREAD BAL   RL1,RGET            GET NEXT CARD                        R0770000
         B     RDREND              BRANCH IF END OF FILE                R0772000
         SPACE 3                                                     R4 R0774000
RSCANCHK TM    RDRSW,RNOSCAN       TEST FOR CARD SCAN                   R0776000
         BO    RFLTEST             BRANCH IF NO SCAN                    R0778000
         CLC   0(2,RPI),=CL3'//'   TEST COLUMNS 1 AND 2                 R0780000
         BE    RJCLCARD            BRANCH IF '//' CARD                  R0782000
         TM    RDRSW,RJCLSW+RXBJOBSW    TEST CURRENT MODE               R0784000
         BNM   RFLTEST             PROCESS CARD IF DATA OR BATCH        R0786000
         TM    RDRSW2,RTPCPY       TEST TYPRUN=COPY FLAG.      @OZ48524 R0786100
         BO    RFLTEST             BRANCH IF ON.               @OZ48524 R0786200
         OI    RDRSW,RSYSINSW      INDICATE GENERATED DD *              R0788000
         ST    RPI,RSAVE1          SAVE ADDRESS OF CURRENT CARD         R0790000
         LA    RPI,RSYSINCD        GET ADDRESS OF HASP SUPPLIED DD *    R0792000
         EJECT                                                       R4 R0794000
RJCLCARD TM    RDRSW,RJCLSW        TEST JCL SWITCH                      R0796000
         BO    RJCLSCAN            START SCAN IF SET                    R0798000
         ST    RPI,RSAVE1          SAVE INPUT POINTER                   R0800000
         LA    RPI,RDRDLM          ADD DELIMITER CARD                   R0802000
         BAL   RL1,RPUT             TO OUTPUT FILE                      R0804000
         L     RPI,RSAVE1          RESTORE INPUT POINTER                R0806000
         MVC   RDRDLM,=CL2'/*'     SET INPUT DATA SET DELIMITER         R0808000
         OI    RDRSW,RJCLSW        SET JCL SWITCH                       R0810000
         SPACE 1                                                     R4 R0812000
RJCLSCAN CLI   2(RPI),C'*'         TEST COLUMN 3                        R0814000
         BE    RFLTEST             BRANCH IF JCL COMMENT                R0816000
         LA    RW,0(,RPI)          SET 'RW' FOR CARD SCAN               R0818000
         LA    R14,1               SET INCREMENT FOR SCAN               R0820000
         LA    R15,65(,RPI)         AND LIMIT FOR END OF CARD           R0822000
         SPACE 1                                                        R0824000
RJBTEST  CLI   2(RW),C' '          SEARCH FOR END OF NAME FIELD         R0826000
         BE    RJBLANK             BRANCH IF BLANK                      R0828000
         BXLE  RW,R14,RJBTEST      ADVANCE TO NEXT COLUMN               R0830000
         B     RFLTEST             END IF CARD -- IGNORE                R0832000
         SPACE 1                                                     R4 R0834000
RJBLANK  CLI   3(RW),C' '          SEARCH FOR START OF OPERATION        R0836000
         BNE   RDDTEST             BRANCH IF FOUND                      R0838000
         BXLE  RW,R14,RJBLANK      ADVANCE TO NEXT COLUMN               R0840000
         SPACE 1                                                        R0842000
RDDTEST  CLC   3(3,RW),=CL3'DD'    TEST FOR DD CARD                     R0844000
         BNE   RJJTEST             BRANCH IF NOT A DD CARD              R0846000
         TM    RDRSW,RXBJOBSW      TEST XEQ BATCH JOB SWITCH            R0850000
         BO    RFLTEST             PROCESS DD AS DATA CARD IF SET       R0852000
         LA    R15,66(,RPI)        SET NEW LIMIT FOR END OF CARD        R0858000
         SPACE 1                                                     R4 R0859000
RDDBLANK BXH   RW,R14,RFLTEST      ADVANCE TO NEXT COLUMN               R0860000
         CLI   4(RW),C' '          SEARCH DATA FIELD START              R0862000
         BE    RDDBLANK            BRANCH IF NOT FOUND                  R0864000
         CLI   4(RW),C'*'          TEST FOR DD *                        R0866000
         BE    RDDSTAR             BRANCH IF DD *                       R0868000
         CLC   4(4,RW),=CL4'DATA'  TEST FOR DD DATA                     R0870000
         BNE   RFLTEST             BRANCH IF NOT DD DATA                R0872000
         OI    RDRSW,RNOSCAN       TURN OFF CARD SCAN                R4 R0874000
         LA    RW,3(,RW)           ADVANCE INPUT COLUMN              R4 R0876000
         SPACE 1                                                     R4 R0878000
RDDSTAR $LINK  HASPRDDS            SCAN DD */DATA                    R4 R0880000
         BR    RL2                 UPON RETURN RL2 SPECIFIES EXIT    R4 R0882000
         SPACE 1                                                     R4 R0884000
RJJTEST  CLC   3(4,RW),=CL4'JOB'   TEST FOR JOB CARD                    R1140000
         BNE   RFLTEST             BRANCH IF NOT A JOB CARD             R1142000
        $LINK  HASPRJCS            INITIALIZE JOB CONTROL INFORMATION   R1144000
         EJECT                                                       R4 R1144700
RFLTEST  TM    RDRSW,RJFLUSH       TEST FLUSH SWITCH                    R1152000
         BZ    RCRDOUT             BRANCH IF NOT START OF FLUSH         R1154000
         CLC   2(7,RPI),=CL7'SIGNON'  TEST FOR /*SIGNON CARD            R1156000
         BE    RCRDOUT             BRANCH IF /*SIGNON CARD              R1158000
         L     R1,PCEDCT           R1 = READER DCT ADDRESS     @OZ32566 R1160000
         USING DCTDSECT,R1         ESTABLISH DCT ADDRESSABILITY         R1162000
         MVC   RMESSAGE(L'RFLMSG),RFLMSG  SET UP READER SKIPPING        R1170000
         MVC   RMESSAGE+2(8),DCTDEVN       FOR JOB CARD MESSAGE         R1172000
         DROP  R1                  DROP DCT ADDRESSABILITY              R1174000
         TM    PCEID,PCERJEID      TEST PROCESSOR TYPE                  R1178000
         BZ    RNOTRJE1            BRANCH IF NOT REMOTE TERMINAL        R1180000
         ICM   R1,7,DCTDCB+1-DCTDSECT(R1) GET LINE DCT PTR     @OZ31782 R1182000
         BZ    RDREND              NO LINE DCT PTR, FREE RDR   @OZ31782 R1182100
         L     R1,MDCTRAT-DCTDSECT(,R1)  GET ADDRESS OF RAT             R1184000
         SLR   LINK,LINK                     CLEAR AND INSERT           R1186000
         ICM   LINK,2,RATCONRT+1-RATDSECT(R1) REMOTE CONSOLE ROUTE CODE R1188000
         LA    R0,L'RFLMSG(,LINK)  GENERATE LENGTH OF MESSAGE           R1190000
        $WTO   RMESSAGE,(R0),JOB=NO,         ISSUE SKIPPING MESSAGE  R4CR1192000
               RMT=YES,CLASS=$NORMAL,PRI=$ST  TO REMOTE TERMINAL     R4 R1194000
         SPACE 2                                                     R4 R1196000
RNOTRJE1 $WTO  RMESSAGE,L'RFLMSG,JOB=NO,  ISSUE SKIPPING MESSAGE     R4CR1200000
               ROUTE=$LOG+$UR,CLASS=$NORMAL,PRI=$ST                     R1202000
         MVC   RPRIORTY,=CL2' '    RESET PRIORITY                    R4 R1204000
         NI    RDRSW,255-RJFLUSH   TURN OFF FLUSH SWITCH                R1206000
         B     RNXTCRD             GET NEXT CARD                        R1208000
         SPACE 5                                                        R1210000
RDREND  $LINK  HASPRDRT            LINK TO TERMINATION MODULE           R1212000
         B     $READ               RETURN TO INITIALIZATION             R1214000
         TITLE 'HASP INPUT SERVICE -- PROCESSOR TERMINATION'            R1216000
HASPRDRO CSECT                     DEFINE SUBROUTINE CSECT              R1218000
HASPRDRT $ENTRY                    DEFINE TERMINATION SEGMENT           R1220000
         BAL   RL1,RJOBEND         TERMINATE LAST JOB                R4 R1220200
         L     RW,PCEDCT           GET ADDR OF INTRNAL RDR DCT @OZ32566 R1225100
         USING DCTDSECT,RW         ESTABLISH DCT ADDRESSABILITY         R1226000
         TM    PCEID,PCEINRID      IS THIS INTERNAL READER              R1228000
         BZ    RNOTINR2            BRANCH IF NOT INTERNAL READER     R4 R1230000
         ST    JCT,RIDPBF          CLEAR BUFFER ADDRESS                 R1232000
         ST    JCT,RIDPBFO          AND BUFFER OFFSET                   R1234000
         LTR   RBI,RBI             TEST FOR PROTECTED BUFFER            R1236000
         BZ    RUNFREE             BRANCH IF NONE                       R1238000
         FREEMAIN R,SP=231,LV=RIDBUFSZ+256,A=(RBI)  FREE BUFFER STORAGE R1240000
         SR    RBI,RBI             INDICATE NO BUFFER                   R1242000
         B     RUNFREE             FREE INTERNAL READER                 R1244000
         SPACE 1                                                     R4 R1246000
RNOTINR2 TM    PCEID,PCERJEID      TEST FOR REMOTE TERMINAL          R4 R1248800
         BZ    RNOTRJE2            BRANCH IF NOT                     R4 R1249200
        $EXTP  CLOSE,(RW)          CLOSE REMOTE TERMINAL                R1254000
         B     RUNFREE             FREE REMOTE READER DCT               R1256000
         SPACE 1                                                     R4 R1258000
RNOTRJE2 $FREEBUF (RBI)            RETURN INPUT BUFFER               R4 R1260000
         OI    DCTSTAT,DCTHOLD     SET READER UNAVAILABLE               R1262000
         SPACE 1                                                     R4 R1263000
RUNFREE $FREUNIT (RW)              FREE INPUT DEVICE                    R1264000
         DROP  RW                  DROP DCT ADDRESSABILITY              R1266000
        $DORMANT                   INDICATE PROCESSOR INACTIVE          R1268000
        $RETURN                    RETURN TO MAIN PROCESSOR             R1270000
         DROP  BASE3               DROP SEGMENT ADDRESSABILITY          R1272000
         TITLE 'HASP INPUT SERVICE -- CONTROL CARD SCAN ROUTINES'       R1274000
HASPRDRO CSECT                     DEFINE SUBROUTINE CSECT              R1276000
HASPRCCS $ENTRY                    DEFINE CONTROL CARD SCAN SEGMENT     R1278000
         SPACE 5                                                        R1280000
*                                                                       R1282000
*                             DETERMINE TYPE OF CONTROL CARD            R1284000
*                                                                       R1286000
         SPACE 3                                                        R1288000
         LA    RW,RCCTAB           GET ADDR OF CONTROL CARD CODE TABLE  R1290000
         LA    R14,RCCTBNXT-RCCTAB GET LENGTH OF EACH ENTRY             R1292000
         LA    R15,RCCTBEND-1      GET END OF CODE TABLE                R1294000
         SPACE 1                                                     R4 R1296000
RCCSERCH IC    R1,0(,RW)           GET LENGTH OF CODE WORD              R1298000
         EX    R1,RCCTBCLC         COMPARE CODE WORD                    R1300000
         BE    RCNTLCRD            BRANCH IF TABLE ENTRY FOUND          R1302000
         BXLE  RW,R14,RCCSERCH     TRY AGAIN                            R1304000
         SPACE 2                                                     R4 R1306000
RCNTLCRD L     RL1,0(,RW)          GET ADDRESS FROM CODE TABLE          R1308000
         BR    RL1                 GO TO APPROPRIATE PROCESSING ROUTINE R1310000
         SPACE 5                                                        R1312000
RCCTBCLC CLC   4(*-*,RW),2(RPI)    TABLE COMPARE INSTRUCTION            R1314000
         SPACE 3                                                        R1316000
RCCTAB   DS    0F                  CONTROL CARD ROUTING TABLE           R1318000
RCOMCHAR EQU   *+4,1               HASP COMMAND CHARACTER               R1320000
         DC    AL1(0),AL3(RCOMCARD),CL8'$'        HASP COMMAND CARD     R1322000
RCCTBNXT DS    0F                                                       R1324000
         DC    AL1(7),AL3(RJBPCARD),CL8'JOBPARM'  HASP JOBPARM CARD     R1326000
         DC    AL1(7),AL3(RMSGCARD),CL8'MESSAGE'  HASP MESSAGE CARD     R1328000
         DC    AL1(6),AL3(ROTPCARD),CL8'OUTPUT'   HASP OUTPUT CARD      R1330000
         DC    AL1(7),AL3(RPRICARD),CL8'PRIORITY' HASP PRIORITY CARD    R1332000
         DC    AL1(5),AL3(ROUTCARD),CL8'ROUTE'    HASP ROUTE CARD       R1334000
         DC    AL1(5),AL3(RSETCARD),CL8'SETUP'    HASP SETUP CARD       R1336000
RCCTBEND DC    A(RILLCCRD)         END OF CONTROL CARD CODE TABLE       R1338000
         EJECT                                                          R1340000
*                                                                       R1342000
*                             HASP COMMAND CARD PROCESSING ROUTINE      R1344000
*                                                                       R1346000
         SPACE 3                                                        R1348000
RCOMCARD NULL                                                           R1350000
         LTR   JCT,JCT             TEST FOR JOB                      R4 R1352000
         BNZ   RILLCCRD            IGNORE COMMAND IF IN A JOB           R1354000
         SPACE 2                                                     R4 R1355000
RGETQUE $GETCMB COUNT=1            TRY TO GET CONSOLE MESSAGE BUFFER    R1356000
         BNZ   RCOMBUF             BRANCH IF SUCCESSFUL                 R1358000
        $WAIT  CMB                 WAIT FOR CONSOLE MESSAGE BUFFER      R1360000
         B     RGETQUE             TRY AGAIN                            R1362000
         SPACE 1                                                     R4 R1363000
RCOMBUF  LR    RL1,R1              RL1 = ADDRESS OF CMB                 R1364000
         USING CMBDSECT,RL1        ESTABLISH CMB ADDRESSABILITY         R1366000
         L     RW,PCEDCT           RW = ADDRESS OF INPUT DCT   @OZ32566 R1368000
         CLI   71(RPI),C'N'        TEST COLUMN 72                       R1370000
         BE    RCOMQUE             BYPASS WTO IF COLUMN 72 IS 'N'       R1372000
         MVC   0(2,RL1),RCOMMSG              SET UP                     R1374000
         MVC   2(8,RL1),DCTDEVN-DCTDSECT(RW)  MESSAGE NUMBER            R1376000
         MVI   10(RL1),C' '                    DEVICE NAME              R1378000
         MVC   11(69,RL1),2(RPI)                AND COMMAND             R1380000
        $WTO   (RL1),80,JOB=NO,    LOG COMMAND                         CR1382000
               ROUTE=$LOG+$UR+$TP,CLASS=$NORMAL,PRI=$HI                 R1384000
         SPACE 1                                                     R4 R1385000
RCOMQUE  MVC   CMBFLAG(14),RCOMASK SET HEADER                        R4 R1386000
         MVN   CMBFLAG,DCTRAUTH-DCTDSECT(RW)  SET RESTRICTION FLAGS  R4 R1388000
         MVC   CMBFM,$SYSID        SET RESPONSE SYSTEM               R4 R1390000
         TM    PCEID,PCERJEID      TEST PROCESSOR TYPE                  R1392000
         BZ    RCONRMT             BRANCH IF NOT REMOTE TERMINAL        R1394000
         ICM   R1,7,DCTDCB+1-DCTDSECT(RW) GET LINE DCT ADDR    @OZ38127 R1396000
         BZ    RCOMRET             EXIT IF NONE                @OZ38127 R1396100
         L     R1,MDCTRAT-DCTDSECT(,R1)  GET ADDRESS OF RAT             R1398000
         MVC   CMBRMT,RATCONRT+1-RATDSECT(R1)  SET RESPONSE REMOTE   R4 R1400000
         MVI   CMBFLAG,CMBFLAGC+CMBFLAGW+CMBFLAGR  SET REMOTE FLAGS  R4 R1402000
         EJECT                                                       R4 R1403000
RCONRMT  MVC   CMBMSG(69),2(RPI)   SET UP COMMAND                    R4 R1404000
         MVI   CMBMSG+69,C' '      BLANK OUT REST OF BUFFER             R1406000
         MVC   CMBMSG+70(L'CMBMSG-70),CMBMSG+69                         R1408000
         L     RW,$SSVT            RW = ADDRESS OF SSVT                 R1410000
         USING SSVT,RW             ESTABLISH SSVT ADDRESSABILITY        R1412000
         L     R0,$SVCOMMQ         GET COMMAND QUEUE HEAD               R1414000
         SPACE 1                                                     R4 R1415000
RCOMRQUE ST    R0,CMBCMB           PREPARE TO QUEUE COMMAND          R4 R1416000
         CS    R0,RL1,$SVCOMMQ     QUEUE TO COMMAND PROCESSOR           R1418000
         BNE   RCOMRQUE            TRY AGAIN IF NOT QUEUED              R1420000
         L     R1,$COMMPCE         $POST COMMAND SERVICE             R4 R1422000
        $POST  (R1),WORK            PROCESSOR                           R1424000
         LA    RL2,RNXTCRD         LOAD ADDRESS OF EXIT                 R1426000
RCOMRET $RETURN                                                @OZ38127 R1428000
         DROP  RW,RL1              DROP SSVT AND CMB ADDRESSABILITY     R1430000
         EJECT                                                          R1432000
*                                                                       R1434000
*                             HASP PRIORITY CARD PROCESSING ROUTINE     R1436000
*                                                                       R1438000
         SPACE 3                                                        R1440000
RPRICARD NULL                                                           R1442000
         BAL   RL1,RJOBEND         TERMINATE PREVIOUS JOB               R1444000
         LA    R1,RILLPRIC         SET IGNORE/EXIT BRANCH ADDRESS    R4 R1446000
         TM    $RUNOPTS,$PRIOOPT   IGNORE /*PRIORITY CARD IF         R4 R1447000
         BZR   R1                    INIT OPTION NOT SELECTED        R4 R1448000
         CLI   10(RPI),C' '        VERIFY BLANK                     R41 R1448100
         BNER  R1                   AFTER 'PRIORITY'                R41 R1448200
         LA    RW,10(,RPI)         SET                              R41 R1448300
         LA    R14,1                REGISTERS FOR                   R41 R1448400
         LA    R15,70(,RPI)          CARD SCAN                      R41 R1448500
         SPACE 1                                                    R41 R1448600
RPRIBLUP BXH   RW,R14,RILLPRIC     SCAN                             R41 R1448700
         CLI   0(RW),C' '           FOR FIRST                       R41 R1448800
         BE    RPRIBLUP              NON-BLANK                      R41 R1448900
         CLI   0(RW),C'0'          IGNORE IF                        R41 R1449000
         BLR   R1                    FIRST DIGIT                     R4 R1450000
         CLI   0(RW),C'9'            NOT ZERO                       R41 R1451000
         BHR   R1                    THRU NINE                       R4 R1452000
         CLI   1(RW),C' '          BRANCH IF NEXT                   R41 R1453000
         BNE   RPRI2                 CHARACTER NOT BLANK             R4 R1454000
         MVC   RPRIORTY+1(1),0(RW)   SAVE 1-DIGIT PRIORITY          R41 R1455000
         BR    R1                  BRANCH TO END                     R4 R1456000
         SPACE 1                                                     R4 R1457000
RPRI2    CLI   2(RW),C' '          IGNORE IF MORE                   R41 R1458000
         BNER  R1                    THAN 2 CHARACTERS               R4 R1459000
         CLI   1(RW),C'0'          IGNORE IF                        R41 R1460000
         BLR   R1                    SECOND DIGIT                    R4 R1461000
         CLI   1(RW),C'9'            NOT ZERO                       R41 R1462000
         BHR   R1                    THRU NINE                       R4 R1463000
         CLC   =C'15',0(RW)        IGNORE IF OVER                   R41 R1464000
         BLR   R1                    FIFTEEN                         R4 R1465000
         MVC   RPRIORTY(2),0(RW)   SAVE 2-DIGIT PRIORITY            R41 R1466000
         SPACE 1                                                     R4 R1473000
RILLPRIC OI    RDRSW,RJFLUSH+RJCLSW  SET FLUSH AND JCL SWITCHES         R1474000
         LA    RL2,RPRIREAD        LOAD ADDRESS OF EXIT                 R1476000
        $RETURN                     AND RETURN                          R1478000
         EJECT                                                          R1480000
*                                                                       R1482000
*                             HASP ROUTE CARD PROCESSING ROUTINE        R1484000
*                                                                       R1486000
         SPACE 1                                                     R4 R1488000
ROUTCARD LTR   JCT,JCT             TEST FOR JOB                      R4 R1492000
         BZ    RILLCCRD            IGNORE ROUTE CARD IF NOT IN JOB      R1494000
         OI    RCARDLRC,LRC1INUL+RDLMSKIP  INDICATE SUPERFLUOUS CARD R4 R1496000
         BAL   RL1,RPUT            ADD ROUTE CARD TO OUTPUT FILE        R1498000
         TM    RDRSW,RJCLSW        TEST STATUS                          R1500000
         BO    *+12                BRANCH IF JCL FILE                   R1502000
         BAL   RL1,RPUT            TERMINATE DATA SET                   R1504000
         OI    RDRSW,RJCLSW        SET JCL SWITCH                       R1506000
         LA    R1,7(,RPI)          SET                              R41 R1508000
         LA    R14,1                REGISTERS FOR                   R41 R1508100
         LA    R15,70(,RPI)          CARD SCAN                 @OZ32101 R1508200
         SPACE 1                                                    R41 R1508300
ROUTROUT BXH   R1,R14,RILLROUT     SCAN FOR                         R41 R1508400
         CLI   0(R1),C' '           FIRST                           R41 R1508500
         BE    ROUTROUT              NON-BLANK                      R41 R1508600
*              THIS LINE DELETED BY APAR NUMBER                @OZ32101 R1508700
*              THIS LINE DELETED BY APAR NUMBER                @OZ32101 R1508800
         LA    RW,JCTPROUT         ASSUME PRINT ROUTING                 R1510000
         CLC   RPRINT,0(R1)        'PRINT'...                       R41 R1512000
         BE    ROUTDES             BR IF PRINT ROUTING              R41 R1514000
         CLC   RPUNCH,0(R1)        'PUNCH'...                       R41 R1516000
         BNE   RILLROUT            ILLEGAL IF NOT PUNCH ROUTING         R1518000
         LA    RW,JCTPUOUT         SET FOR PUNCH ROUTING                R1520000
         SPACE 1                                                    R41 R1520500
ROUTDES  BXH   R1,R14,RILLROUT     SCAN                             R41 R1520600
         CLI   0(R1),C' '           PAST                            R41 R1520700
         BNE   ROUTDES               ROUTING                        R41 R1520800
         SPACE 1                                                    R41 R1520900
ROUTDEST BXH   R1,R14,RILLROUT     SCAN                             R41 R1521000
         CLI   0(R1),C' '           FOR                             R41 R1521100
         BE    ROUTDEST              DESTINATION                    R41 R1521200
         SR    RL1,RL1             CLEAR R5                    @OZ32101 R1521260
         SPACE 1                                               @OZ32101 R1521270
ROUTNME  LA    RL1,1(RL1)          INCREMENT COUNTER           @OZ32101 R1521280
         BXH   R1,R14,RILLROUT     SCAN FOR                    @OZ32101 R1521290
         CLI   0(R1),C' '           INVALID                    @OZ32101 R1521300
         BNE   ROUTNME               DESTINATION NAME          @OZ32101 R1521310
         CH    RL1,=H'8'           IS DEST NAME TOO LONG...    @OZ32101 R1521320
         BH    RILLROUT            BRANCH IF YES               @OZ32101 R1521330
         SR    R1,RL1              RESET DEST NAME ADDRESS     @OZ32101 R1521340
         SPACE 1                                               @OZ32101 R1521350
RPROUTE  BAL   RL1,RDESTSCN        CONVERT DESTINATION TO ROUTE CODE R4 R1521400
         B     RILLROUT            BRANCH IF INVALID DESTINATION        R1526000
         B     ROPSHIFT            BRANCH IF VALID   DESTINATION    R41 R1526100
         EJECT                                                      R41 R1534000
RILLROUT OI    RCARDLRC,LRC1ONUL+RDLMSKIP SET INTERNALLY GEN   @OZ30530 R1536000
         BAL   RL1,RPUT            ADD MESSAGE TO OUTPUT FILE  @OZ30530 R1536800
         OI    RCARDLRC,LRC1CCTL+LRC1TASA SET ASA CAR CONTROL  @OZ30530 R1537500
         MVI   RDRCCTL,C'0'        FORCE DOUBLE SPACE                R4 R1538000
         MVI   0(RPI),C'*'         FILL OUT CARD IMAGE               R4 R1540000
         MVC   1(78,RPI),0(RPI)     WITH ASTERISKS                   R4 R1542000
         MVI   79(RPI),C' '        ADD TRAILING BLANK                R4 R1543000
         MVC   (79-22)/2(22,RPI),RRILEGAL+4  MOVE IN ERROR MESSAGE   R4 R1544000
         BAL   RL1,RPUT            ADD ERROR MESSAGE TO OUTPUT FILE     R1546000
        $WTO   RRILEGAL,L'RRILEGAL,JOB=YES,               ISSUE ERROR  CR1548000
               ROUTE=$LOG+$UR,CLASS=$TRIVIA,PRI=$ST         MESSAGE     R1550000
         BAL   RL1,RJOBKILL        KILL JOB                             R1552000
         LA    RL2,RFLTEST         LOAD ADDRESS OF EXIT                 R1554000
        $RETURN                     AND RETURN                          R1556000
         EJECT                                                          R1558000
*                                                                       R1560000
*                             HASP SETUP CARD PROCESSING ROUTINE        R1562000
*                                                                       R1564000
         SPACE 3                                                        R1566000
RSETCARD NULL                                                           R1568000
         LTR   JCT,JCT             TEST FOR JOB                      R4 R1570000
         BZ    RILLCCRD            IGNORE SETUP CARD IF NOT IN A JOB    R1572000
         TM    JCTJBOPT,JCTSETUP   TEST FOR PREVIOUS SETUP CARD         R1574000
         BO    RMSGCARD            TREAT AS MESSAGE CARD IF NOT FIRST   R1576000
        $WTO   RSETHMSG,L'RSETHMSG,JOB=YES,                ISSUE SETUP CR1578000
               ROUTE=$LOG+$TAPE+$MAIN,CLASS=$ACTION,PRI=$ST MESSAGE     R1580000
         OI    JCTJBOPT,JCTSETUP   INDICATE SETUP CARD(S) PRESENT       R1590000
         EJECT                                                          R1592000
*                                                                       R1594000
*                             HASP MESSAGE CARD PROCESSING ROUTINE      R1596000
*                                                                       R1598000
         SPACE 3                                                        R1600000
RMSGCARD NULL                                                           R1602000
         LTR   JCT,JCT             TEST FOR JOB                      R4 R1604000
         BZ    RMSGSCAN            BRANCH IF NO JOB                     R1606000
         OI    RCARDLRC,LRC1INUL+RDLMSKIP  INDICATE SUPERFLUOUS CARD R4 R1608000
         BAL   RL1,RPUT            ADD CARD TO OUTPUT FILE              R1610000
         TM    RDRSW,RJCLSW        TEST STATUS                          R1612000
         BO    *+12                BRANCH IF JCL FILE                   R1614000
         BAL   RL1,RPUT            TERMINATE DATA SET                   R1616000
         OI    RDRSW,RJCLSW        SET JCL SWITCH                       R1618000
         SPACE 1                                                     R4 R1621000
RMSGSCAN LA    R14,1               SET UP REGISTERS                 R41 R1622000
         LA    R15,70(,RPI)         FOR CARD SCAN                   R41 R1623000
         LA    RW,7(,RPI)          STARTING COL. FOR SETUP INFO     R41 R1624000
         CLI   2(RPI),C'S'         /*SETUP CARD...                  R41 R1625000
         BE    RMSGSMSG            BR IF YES                        R41 R1626000
         LA    RW,9(,RPI)           ELSE, STARTING COL. FOR MESSAGE R41 R1627000
         SPACE 1                                                    R41 R1628000
RMSGSMSG BXH   RW,R14,RMSGRETN     SUPPRESS                         R41 R1629000
         CLI   0(RW),C' '           LEADING                         R41 R1630000
         BE    RMSGSMSG              BLANKS                         R41 R1631000
         SPACE 1                                                    R41 R1632000
         USING CMBDSECT,R1         PROVIDE CMB ADDRESSABILITY       R41 R1633000
         SPACE 1                                                    R41 R1634000
RMSGCMB $GETCMB ,                  GET A CMB FOR CONSOLE MSG        R41 R1635000
         BNZ   RMSGBLD             BR IF GOT CMB                    R41 R1636000
        $WAIT  CMB                  ELSE WAIT FOR A CMB             R41 R1637000
         B     RMSGCMB             TRY AGAIN                        R41 R1638000
         SPACE 1                                                    R41 R1639000
RMSGBLD  LA    R14,71-1(,RPI)      COMPUTE LENGTH -1                R41 R1640000
         SLR   R14,RW               OF MESSAGE                      R41 R1641000
         EX    R14,RMSGMOVE        MOVE MESSAGE TO CMB              R41 R1642000
         SPACE 1                                                    R41 R1643000
         LA    RW,CMBTEXT          MESSAGE AREA        (JOB-TYPE)   R41 R1644000
         LA    R0,2+1(,R14)        MESSAGE LENGTH      (JOB-TYPE)   R41 R1645000
         LA    R15,RMSGJOB         LIST-FORM $WTO      (JOB-TYPE)   R41 R1646000
         EJECT                                                      R41 R1647000
         LTR   JCT,JCT             WAS CARD FOUND WITHIN A JOB...   R41 R1648000
         BNZ   RMSGMID             BR IF YES                        R41 R1649000
         SPACE 1                                                    R41 R1650000
         LA    RW,CMBJOBN          MESSAGE AREA        (NOJOB-TYPE) R41 R1651000
         LA    R0,2+9+1(,R14)      MESSAGE LENGTH      (NOJOB-TYPE) R41 R1652000
         L     R15,PCEDCT                    INSERT            @OZ32566 R1653000
         MVC   2(8,RW),DCTDEVN-DCTDSECT(R15)  DEVICE                R41 R1654000
         MVI   2+8(RW),C' '                    NAME                 R41 R1655000
         LA    R15,RMSGNJOB        LIST-FORM $WTO      (NOJOB-TYPE) R41 R1656000
         SPACE 1                                                    R41 R1657000
RMSGMID  MVC   0(2,RW),RMSGMSG     USE 'MESSAGE' MSG ID             R41 R1658000
         CLI   2(RPI),C'M'         /*MESSAGE CARD...                R41 R1659000
         BE    RMSGWTO             BR IF YES                        R41 R1660000
         MVC   0(2,RW),RSETMSG      ELSE USE 'SETUP' MSG ID         R41 R1661000
         SPACE 1                                                    R41 R1662000
RMSGWTO $WTO   (R1),(R0),CMB=YES,MF=(E,0(,R15))  ISSUE CONSOLE MSG  R41 R1663000
         SPACE 1                                                    R41 R1664000
RMSGRETN LTR   JCT,JCT             PROCESSING JOB...                R41 R1665000
         BNZ   ROPSHIFT            CONVERT TO //* IF YES            R41 R1666000
         LA    RL2,RNXTCRD          ELSE LOAD EXIT                  R41 R1667000
        $RETURN                      ROUTINE ADDRESS                R41 R1668000
         SPACE 1                                                    R41 R1669000
RMSGMOVE MVC   CMBTEXT+2(*-*),0(RW)  *** EXECUTE ONLY ***           R41 R1670000
         SPACE 1                                                    R41 R1671000
         DROP  R1                  DROP CMB ADDRESSABILITY          R41 R1672000
         SPACE 3                                                    R41 R1673000
RMSGJOB  $WTO  JOB=YES,            LIST-FORM $WTO FOR JOB-TYPE      R41CR1674000
               MF=L,               ---------------------------      R41CR1675000
               CLASS=$ACTION,PRI=$ST,                               R41CR1676000
               ROUTE=$LOG+$TAPE+$MAIN                               R41 R1677000
         SPACE 3                                                    R41 R1678000
RMSGNJOB $WTO  JOB=NO,             LIST-FORM $WTO FOR NOJOB-TYPE    R41CR1679000
               MF=L,               -----------------------------    R41CR1680000
               CLASS=$ACTION,PRI=$ST,                               R41CR1681000
               ROUTE=$LOG+$TAPE+$MAIN                               R41 R1682000
         EJECT                                                          R1690000
*                                                                       R1692000
*                             HASP JOBPARM CARD PROCESSING ROUTINE      R1694000
*                                                                       R1696000
         SPACE 3                                                        R1698000
RJBPCARD NULL                                                           R1700000
         LTR   JCT,JCT             TEST FOR JOB                      R4 R1702000
         BZ    RILLCCRD            IGNORE JOBPARM CARD IF NOT IN JOB    R1704000
         OI    RCARDLRC,LRC1INUL+RDLMSKIP  INDICATE SUPERFLUOUS CARD R4 R1706000
         BAL   RL1,RPUT            ADD JOBPARM CARD TO OUTPUT FILE      R1708000
         TM    RDRSW,RJCLSW        TEST STATUS                          R1710000
         BO    *+12                BRANCH IF JCL FILE                   R1712000
         BAL   RL1,RPUT            TERMINATE DATA SET                   R1714000
         OI    RDRSW,RJCLSW        SET JCL SWITCH                       R1716000
         XC    JCTWORK(1+4*7+3),JCTWORK  CLEAR WORK AREA            R41 R1717000
         LA    R1,RJPTABLE         GET ADDRESS OF JOBPARM SCAN TABLE    R1718000
         LA    RW,8(,RPI)          SET UP                               R1720000
         LA    R14,1                REGISTERS                           R1722000
         LA    R15,70(,RPI)          FOR SCAN SUBROUTINE                R1724000
         BAL   RL1,RKEYSCAN        SCAN PARAMETERS                   R4 R1726000
         B     RILLJOBP            ILLEGAL JOBPARM CARD              R4 R1726100
         CLI   JCTWORK,0           TEST FOR RESTART OPTION           R4 R1727200
         BE    RJBURST             BR IF NO                         R41 R1727300
         CLI   JCTWORK,C'Y'        TEST FOR RESTART=Y                R4 R1727400
         BNE   RJBNRST             BR IF NO                          R4 R1727500
         OI    JCTJOBFL,JCTRSTRT    ELSE ALLOW JOB RESTART           R4 R1727600
         B     RJBURST               AND BR TO CONTINUE             R41 R1727700
         SPACE 1                                                     R4 R1727800
RJBNRST  CLI   JCTWORK,C'N'        TEST FOR RESTART=N                R4 R1727900
         BNE   RILLJOBP            ILLEGAL IF NO                     R4 R1728000
         NI    JCTJOBFL,255-JCTRSTRT  ELSE DISALLOW JOB RESTART      R4 R1728100
         SPACE 1                                                    R41 R1728200
RJBURST  CLI   JCTWORK+31,0        TEST FOR BURST OPTION            R41 R1728300
         BE    RJBSYSAF            BR IF NO                         R41 R1728400
         CLI   JCTWORK+31,C'Y'     TEST FOR BURST=Y                 R41 R1728500
         BNE   RJBNBURS            BR IF NO                         R41 R1728600
         OI    JCTFLAG1,JCTBURST    ELSE SET BURST SYSOUT FLAG      R41 R1728700
         B     RJBSYSAF              AND BR TO CONTINUE             R41 R1728800
         SPACE 1                                                    R41 R1728900
RJBNBURS CLI   JCTWORK+31,C'N'     TEST FOR BURST=N                 R41 R1729000
         BNE   RILLJOBP            ILLEGAL IF NO                    R41 R1729100
         NI    JCTFLAG1,255-JCTBURST  ELSE RESET BURST FLAG         R41 R1729200
         EJECT                                                      R41 R1729300
RJBSYSAF CLI   JCTWORK+1,0         TEST FOR SYSAFF PARAMETERS        R4 R1729400
         BE    ROPSHIFT            BRANCH IF NONE                       R1729500
         MVI   RDRSIAFF,0          CLEAR SYSTEM AFFINITY                R1729600
         LA    R1,JCTWORK+1        GET ADDRESS OF 1ST PARAMETER      R4 R1729700
         SPACE 1                                                     R4 R1729800
RJBPSAF1 CLC   RANY,0(R1)          TEST PARAMETER                       R1729900
         BE    RJBPSAF3            BRANCH IF 'ANY'                      R1730000
         CLC   RIND,0(R1)          TEST PARAMETER AGAIN                 R1730100
         BE    RJBPSAF4            BRANCH IF 'IND'                      R1730200
         CLC   RSTAR,0(R1)         TEST PARAMETER AGAIN                 R1730300
         BE    RJBPSAF5            BRANCH IF '*'                        R1730400
         L     R15,$QSE1           GET ADDRESS OF FIRST QSE          R4 R1730500
         USING QSEDSECT,R15        ESTABLISH QSE ADDRESSABILITY         R1730600
         SPACE 1                                                     R4 R1730700
RJBPSAF2 CLC   QSESID,0(R1)        COMPARE SID WITH PARAMETER           R1730800
         BE    RJBPSAF6            BRANCH IF QSE FOUND                  R1730900
         TM    QSEFLAGS,QSELAST    TEST FOR LAST QSE                    R1731000
         BO    RILLJOBP            ERROR IF QSE NOT FOUND               R1731100
         LA    R15,QSELEN(,R15)    GET ADDRESS OF NEXT QSE     @OZ27300 R1731200
         B     RJBPSAF2            CONTINUE SEARCH                      R1731300
         SPACE 1                                                     R4 R1731400
RJBPSAF3 OI    RDRSIAFF,QUESYSAF   SET GLOBAL AFFINITY                  R1731500
         B     RJBPSAF7            GET NEXT PARAMETER                   R1731600
         SPACE 3                                                     R4 R1731700
RJBPSAF4 OI    RDRSIAFF,QUEINDAF   SET INDEPENDENT AFFINITY             R1731800
         B     RJBPSAF7            GET NEXT PARAMETER                   R1731900
         SPACE 3                                                     R4 R1732000
RJBPSAF5 LA    R15,$SIDAFF-(QSESIAFF-QSEDSECT)  SET INPUT AFFINITY      R1732100
         SPACE 1                                                     R4 R1732200
RJBPSAF6 OC    RDRSIAFF,QSESIAFF   ADD SYSTEM'S AFFINITY BIT            R1732300
         SPACE 1                                                     R4 R1732400
RJBPSAF7 LA    R1,4(,R1)           STEP TO NEXT PARAMETER               R1732500
         CLI   0(R1),0             TEST                                 R1732600
         BNE   RJBPSAF1            SCAN NEXT PARAMETER IF NOT DONE      R1732700
         TM    RDRSIAFF,QUESYSAF   TEST FINAL AFFINITY                  R1732800
         BNZ   ROPSHIFT            BRANCH IF LEGITIMATE AFFINITY        R1732900
         DROP  R15                 DROP QSE ADDRESSABILITY              R1733000
         EJECT                                                       R4 R1733100
RILLJOBP OI    RCARDLRC,LRC1ONUL+RDLMSKIP SET INTERNAL GEN     @OZ30530 R1734000
         BAL   RL1,RPUT            ADD MESSAGE TO OUTPUT FILE  @OZ30530 R1734800
         OI    RCARDLRC,LRC1CCTL+LRC1TASA SET ASA CAR CONTROL  @OZ30530 R1735500
         MVI   RDRCCTL,C'0'        FORCE DOUBLE SPACE                R4 R1736000
         MVI   0(RPI),C'*'         FILL OUT CARD IMAGE               R4 R1738000
         MVC   1(78,RPI),0(RPI)     WITH ASTERISKS                   R4 R1740000
         MVI   79(RPI),C' '        ADD TRAILING BLANK                R4 R1741000
         MVC   (79-24)/2(24,RPI),RJINVLID+4  MOVE IN ERROR MESSAGE   R4 R1742000
         BAL   RL1,RPUT            ADD ERROR MESSAGE TO OUTPUT FILE     R1744000
        $WTO   RJINVLID,L'RJINVLID,JOB=YES,               ISSUE ERROR  CR1746000
               ROUTE=$LOG+$UR,CLASS=$TRIVIA,PRI=$ST         MESSAGE     R1748000
         BAL   RL1,RJOBKILL        KILL JOB                             R1750000
         LA    RL2,RFLTEST         LOAD ADDRESS OF EXIT                 R1752000
        $RETURN                     AND RETURN                          R1754000
         EJECT                                                          R1756000
*                                                                       R1758000
*                             HASP JOBPARM SCAN TABLE                   R1760000
*                                                                       R1762000
         SPACE 3                                                        R1764000
RJPTABLE DS    0F                                                       R1766000
         DC    CL7'  BURST',C'B'   JOB OUTPUT BURST OPTION          R41 R1767000
         DC    AL1(RSCFLEFT+RSCFLBLK+1,1)                           R41 R1767200
         DC    AL2(JCTWORK+31-JCTDSECT)                             R41 R1767300
         DS    0F                                                   R41 R1767400
         DC    CL7'  CARDS',C'C'   ESTIMATED CARD COUNT                 R1768000
         DC    AL1(RSCFLBIN+1,4),AL2(JCTESTPU-JCTDSECT)        @OZ42746 R1770000
         DS    0F                                                       R1772000
         DC    CL7' COPIES',C'N'   JOB COPY COUNT                       R1774000
         DC    AL1(RSCFLBIN+1,1),AL2(JCTCPYCT-JCTDSECT)                 R1776000
         DS    0F                                                       R1778000
         DC    CL7'  FORMS',C'F'   JOB OUTPUT FORMS                     R1780000
         DC    AL1(RSCFLEFT+RSCFLBLK+1,4),AL2(JCTFORMS-JCTDSECT)        R1782000
         DS    0F                                                       R1784000
         DC    CL7' LINECT',C'K'   LINES PER PAGE SPECIFICATION         R1786000
         DC    AL1(RSCFLBIN+1,1),AL2(JCTLINCT-JCTDSECT)                 R1788000
         DS    0F                                                       R1790000
         DC    CL7'  LINES',C'L'   ESTIMATED LINE COUNT (THOUSANDS)     R1792000
         DC    AL1(RSCFLBIN+1,4),AL2(JCTESTLN-JCTDSECT)                 R1794000
         DS    0F                                                       R1796000
         DC    CL7'  NOLOG',C'J'   NO HASP JOB LOG OPTION               R1798000
         DC    AL1(0,JCTNOLOG),AL2(JCTJBOPT-JCTDSECT)                   R1800000
         DS    0F                                                       R1802000
         DC    CL7'PROCLIB',C'P'   PROCEDURE LIBRARY SPECIFICATION      R1804000
         DC    AL1(RSCFLEFT+RSCFLBLK+1,8),AL2(JCTPROCN-JCTDSECT)        R1806000
         DS    0F                                                       R1808000
         DC    CL7'   ROOM',C'R'   ROOM NUMBER                          R1810000
         DC    AL1(RSCFLEFT+RSCFLBLK+1,4),AL2(JCTROOMN-JCTDSECT)        R1812000
         DS    0F                                                       R1812500
         DC    CL7' SYSAFF',C'S'   SYSTEM AFFINITY                      R1813000
         DC    AL1(RSCFLEFT+RSCFLBLK+7,4),AL2(JCTWORK+1-JCTDSECT)    R4 R1813500
         DS    0F                                                       R1814000
         DC    CL7'   TIME',C'T'   ESTIMATED TIME (MINUTES)             R1816000
         DC    AL1(RSCFLBIN+1,4),AL2(JCTETIME-JCTDSECT)                 R1818000
         DS    0F                                                       R1820000
         DC    CL7'RESTART',C'E'   JOB RESTART OPTION                R4 R1820500
         DC    AL1(RSCFLEFT+RSCFLBLK+1,1),AL2(JCTWORK-JCTDSECT)      R4 R1821000
         DS    0F                                                    R4 R1821500
         DC    X'FF'               END OF JOBPARM SCAN TABLE            R1822000
         EJECT                                                          R1824000
*                                                                       R1826000
*                             HASP OUTPUT CARD PROCESSING ROUTINE       R1828000
*                                                                       R1830000
*                              (FORMS CODE '*' FOR CONTINUATION)     R4 R1831000
*                                                                    R4 R1831100
ROTPCARD NULL                                                           R1834000
         LTR   JCT,JCT             TEST FOR JOB                      R4 R1836000
         BZ    RILLCCRD            IGNORE OUTPUT CARD IF NOT IN JOB     R1838000
         OI    RCARDLRC,LRC1INUL+RDLMSKIP  INDICATE SUPERFLUOUS CARD R4 R1840000
         BAL   RL1,RPUT            ADD OUTPUT CARD TO OUTPUT FILE       R1842000
         TM    RDRSW,RJCLSW        TEST STATUS                          R1844000
         BO    *+12                BRANCH IF JCL FILE                   R1846000
         BAL   RL1,RPUT            TERMINATE DATA SET                   R1848000
         OI    RDRSW,RJCLSW        SET JCL SWITCH                       R1850000
         LA    RW,7(,RPI)          SET UP                               R1852000
         LA    R14,1                REGISTERS                           R1854000
         LA    R15,70(,RPI)          FOR CARD SCAN                      R1856000
         BXH   RW,R14,RILLOUPT     SEARCH FOR                           R1858000
         CLI   1(RW),C' '           START OF                            R1860000
         BE    *-8                   FORMS CODE                         R1862000
         MVC   JCTWORK(5),1(RW)    SET UP FORMS CODE                    R1864000
         MVI   JCTWORK+5,X'BF'     ADD TERMINATOR                       R1866000
         LA    R1,JCTWORK          SEARCH                               R1868000
ROPSCAN  BXH   RW,R14,RILLOUPT      FOR                                 R1870000
         LA    R1,1(,R1)             FIRST                              R1872000
         TM    0(R1),X'BF'            BLANK                             R1874000
         BM    ROPSCAN             BRANCH IF NOT BLANK                  R1876000
         BO    RILLOUPT            BRANCH IF MORE THAN FOUR CHARACTERS  R1878000
         MVC   1(2,R1),0(R1)       BLANK FILL                           R1880000
         SLR   RL1,RL1             SET DEFAULT LEFT INDEX            R4 R1882000
         SPACE 1                                                     R4 R1882100
         CLC   RSTAR,JCTWORK       TEST FOR CONTINUATION ('* ')      R4 R1882200
         BNE   ROPCLEAR            BR IF NOT                         R4 R1882300
         L     R1,RDROCT           GET OCR ADDRESS                   R4 R1882400
         LTR   R1,R1               CONTINUATION ILLEGAL IF           R4 R1882500
         BZ    RILLOUPT             FIRST /*OUTPUT CARD              R4 R1882600
         SPACE 1                                                     R4 R1882700
         L     RL2,OCTOCROF-OCTDSECT(,R1)  BACK-UP                   R4 R1882900
         LA    R0,OCRLENG                   OCR OFFSET               R4 R1883000
         SLR   RL2,R0                        FOR LATER UPDATE        R4 R1883100
         ST    RL2,OCTOCROF-OCTDSECT(,R1)     AT ROPTADD             R4 R1883200
         ALR   RL2,R1                      REFRESH                   R4 R1883300
         MVC   JCTWORK(OCRLENG),0(RL2)      OCR AREA                 R4 R1883400
         SPACE 1                                                     R4 R1883500
         USING OCRDSECT,RL2        PROVIDE OCR ADDRESSABILITY        R4 R1883600
         LA    RL2,JCTWORK         ADDRESS OCR AREA                  R4 R1883700
         SPACE 1                                                     R4 R1883800
         TM    OCRINDEX,X'40'      REFRESH                           R4 R1883900
         BZ    ROPKSCAN             LEFT-                           R41 R1884000
         IC    RL1,OCRINDEX          INDEX                           R4 R1884100
         MVI   OCRINDEX,0             VALUE                          R4 R1884200
         B     ROPKSCAN            BYPASS CLEAR                     R41 R1884300
         EJECT                                                      R41 R1884400
ROPCLEAR LA    RL2,JCTWORK         ADDRESS OCR AREA                 R41 R1884500
         XC    OCRCODE+4(OCRLENG-4),OCRCODE+4  CLEAR OCR AREA       R41 R1884600
         MVI   OCRCPTN,X'FF'       SET DEFAULT COMPACTION NUMBER    R41 R1884700
         MVC   OCRCKPTP,=X'FFFF'   SET CKPTPGS NOT SPECIFIED   @OZ19494 R1884720
         MVC   OCRCKPTL,=X'FFFF'   SET CKPTLNS NOT SPECIFIED   @OZ19494 R1884740
         SPACE 1                                                    R41 R1884800
ROPKSCAN XC    ROWAREA,ROWAREA     CLEAR SCANNER WORK AREA          R41 R1884900
         STC   RL1,ROWLINDX        SET INITIAL LEFT INDEX VALUE      R4 R1885000
         LA    R1,ROPTABLE         GET ADDRESS OF OUTPUT SCAN TABLE     R1886000
         BAL   RL1,RKEYSCAN        SCAN PARAMETERS                      R1888000
         B     RILLOUPT            ILLEGAL OUTPUT CARD       (+0)   R41 R1888400
         SPACE 1                                                    R41 R1888800
         LA    RL2,JCTWORK         SET OCR ADDRESS REGISTER  (+4)   R41 R1889000
         CLI   OCRCPTN,X'FF'       DEFAULT COMPACTION NUMBER...     R41 R1889400
         BE    ROPCKPTP            BRANCH IF YES               @OZ19494 R1889800
         CLI   OCRCPTN,99          VALID COMPACTION NUMBER          R41 R1890000
         BH    RILLOUPT             RANGE IS 0-99              @OZ19494 R1890020
         SPACE 1                                               @OZ19494 R1890040
ROPCKPTP CLC   OCRCKPTP,=X'FFFF'   TEST FOR CKPTPGS            @OZ19494 R1890060
         BE    ROPCKPTL            BRANCH IF NOT SPECIFIED     @OZ19494 R1890080
         CLC   OCRCKPTP,=H'32767'  TEST CKPTPGS VALUE          @OZ19494 R1890100
         BH    RILLOUPT            ILLEGAL IF GREATER THAN MAX @OZ19494 R1890120
         CLC   OCRCKPTP,=H'0'      TEST CKPTPGS VALUE          @OZ19494 R1890125
         BE    RILLOUPT            ILLEGAL IF ZERO             @OZ19494 R1890130
ROPCKPTL CLC   OCRCKPTL,=X'FFFF'   TEST FOR CKPTLNS            @OZ19494 R1890140
         BE    ROPBURST            BRANCH IF NOT SPECIFIED     @OZ19494 R1890160
         CLC   OCRCKPTL,=H'32767'  TEST CKPTLNS VALUE          @OZ19494 R1890180
         BH    RILLOUPT            ILLEGAL IF GREATER THAN MAX @OZ19494 R1890200
         SPACE 1                                               @OZ19494 R1890220
         SPACE 1                                                    R41 R1890400
ROPBURST CLI   ROWBURST,0          TEST FOR BURST OPTION            R41 R1890600
         BE    ROPDEX              BR IF NOT                        R41 R1890800
         NI    OCRFLAGS,255-OCRBRSTY-OCRBRSTN  RESET BURST FLAGS    R41 R1891000
         CLI   ROWBURST,C'Y'       TEST FOR BURST=Y                 R41 R1891200
         BNE   ROPNBURS            BR IF NOT                        R41 R1891400
         OI    OCRFLAGS,OCRBRSTY    ELSE SET BURST=Y FLAG           R41 R1891600
         B     ROPDEX                AND CONTINUE                   R41 R1891800
         SPACE 1                                                    R41 R1892000
ROPNBURS CLI   ROWBURST,C'N'       TEST FOR BURST=N                 R41 R1892200
         BNE   RILLOUPT            ILLEGAL IF NOT                   R41 R1892400
         OI    OCRFLAGS,OCRBRSTN    ELSE SET BURST=N FLAG           R41 R1892600
         SPACE 1                                                    R41 R1892800
ROPDEX   NI    OCRINDEX,X'3F'      RESET                            R41 R1893000
         NI    ROWLINDX,X'3F'       HI-ORDER BITS                    R4 R1896000
         CLI   ROWLINDX,0          TEST FOR LEFT INDEX               R4 R1898000
         BE    ROPINDEX            BRANCH IF NO LEFT INDEX              R1900000
         CLI   OCRINDEX,0          TEST FOR RIGHT INDEX              R4 R1902000
         BNE   RILLOUPT            ILLEGAL IF BOTH ARE SPECIFIED        R1904000
         MVC   OCRINDEX,ROWLINDX   RESET INDEX                       R4 R1906000
         OI    OCRINDEX,X'C0'      INDICATE LEFT INDEX               R4 R1908000
         EJECT                                                       R4 R1910000
ROPINDEX TM    OCRINDEX,X'20'      TEST INDEXING BYTE                R4 R1912000
         BO    RILLOUPT            BRANCH IF ILLEGAL INDEX              R1914000
         TM    OCRINDEX,X'1F'      TEST INDEXING BYTE                R4 R1916000
         BZ    *+8                 BRANCH IF NO INDEX SPECIFIED         R1918000
         XI    OCRINDEX,X'80'      INVERT HI-ORDER BIT               R4 R1920000
         SPACE 1                                                     R4 R1922000
         CLI   ROWDESTS,0          BYPASS DEST CONVERSIONS           R4 R1922100
         BE    ROCTEST              IF NONE SPECIFIED                R4 R1922200
         LA    R0,4                CONVERT DESTINATIONS TO ROUTE CODES  R1924000
         LA    R1,ROWDESTS         GET ADDRESS OF DESTINATION VALUES R4 R1926000
         LA    RW,OCRDEST1-OCRDSECT+JCTWORK  AND ROUTE CODES         R4 R1928000
         XC    0(4*2,RW),0(RW)     CLEAR ROUTE CODES                 R4 R1928100
         SPACE 1                                                     R4 R1929000
         DROP  RL2                 KILL OCR ADDRESSABILITY           R4 R1929500
         SPACE 1                                                     R4 R1930000
ROPDEST1 CLI   0(R1),0             TEST NEXT FIELD                      R1932000
         BE    ROCTEST             BR IF NO DESTINATION              R4 R1934000
         BAL   RL1,RDESTSCN        CONVERT DESTINATION TO ROUTE CODE    R1936000
         B     RILLOUPT            BRANCH IF INVALID DESTINATION        R1938000
         LA    R1,8(,R1)           GET ADDRESS OF NEXT DESTINATION      R1940000
         LA    RW,2(,RW)           GET ADDRESS OF NEXT ROUTE CODE       R1942000
         BCT   R0,ROPDEST1         PROCESS NEXT DESTINATION             R1944000
         SPACE 2                                                        R1946000
ROPDEST2 L     R1,RDROCT           GET ADDR OF OUTPUT CONTROL TABLE  R4 R1950000
ROCTEST  L     R1,RDROCT           GET OCT ADDRESS                   R4 R1951000
         USING OCTDSECT,R1         ESTABLISH OCT ADDRESSABILITY         R1952000
         LTR   R1,R1               TEST                                 R1954000
         BNZ   ROPTADD             BRANCH IF OCT IS ALREADY ESTABLISHED R1956000
         SPACE 2                                                        R1958000
ROPCHAIN BAL   RL2,RTRACK          GET TRACK ADDRESS FOR NEXT OCT       R1964000
         LR    RW,R1               SAVE TRACK ADDRESS                   R1966000
         L     R1,RDROCT           RESTORE OCT ADDRESS                  R1968000
         LTR   R1,R1               TEST                                 R1970000
         BNZ   ROPWRITE            BRANCH IF NOT FIRST OCT              R1972000
         ST    RW,JCTOCTTR         SET TRACK ADDRESS OF FIRST OCT       R1974000
         B     ROPGETB             GET BUFFER FOR FIRST OCT             R1976000
         SPACE 1                                                     R4 R1978000
ROPWRITE ST    RW,OCTOCTTR         SET TRACK ADDRESS OF NEXT OCT        R1980000
         ST    R1,PCEBUFAD         SET OCT ADDRESS IN DCT               R1982000
         MVC   PCESEEK,OCTTRACK    SET TRACK ADDRESS IN DCT             R1984000
         LA    R1,PCEDADCT         GET ADDRESS OF DIRECT-ACCESS DCT     R1986000
        $EXCP  (R1)                INITIATE WRITE OF PREVIOUS OCT       R1988000
         SPACE 1                                                     R4 R1990000
ROPGETB $GETBUF WAIT=YES           GET BUFFER FOR NEXT OCT           R4 R1992000
         EJECT                                                       R4 R2000000
         ST    R1,RDROCT           SAVE ADDRESS OF OCT               R4 R2002000
         XC    OCTSTART(OCTOCR-OCTSTART),OCTSTART  CLEAR OCT HEADER     R2004000
         MVC   OCTID,ROCTID        SET OCT NAME                         R2006000
         LH    R0,$BUFLENG         SET BLOCK                         R4 R2008000
         STH   R0,OCTLENG           LENGTH                              R2010000
         MVC   OCTJBKEY,JCTJBKEY   SET JOB KEY                          R2012000
         ST    RW,OCTTRACK         SET TRACK ADDRESS                    R2014000
         LA    RW,OCTOCR-OCTDSECT  SET INITIAL                          R2016000
         ST    RW,OCTOCROF          OCR OFFSET                          R2018000
         SPACE 2                                                        R2020000
ROPTADD  L     RW,OCTOCROF         GET CURRENT OCR OFFSET               R2022000
         LA    R0,OCRLENG(,RW)     INCREMENT                         R4 R2024000
         CH    R0,OCTLENG          COMPARE WITH MAXIMUM LENGTH          R2026000
         BH    ROPCHAIN            BRANCH IF OCR EXCEEDS SPACE IN OCT   R2028000
         ALR   RW,R1               GET ADDRESS OF NEXT OCR ENTRY        R2030000
         MVC   0(OCRLENG,RW),JCTWORK  MOVE OCR TO OCT                R4 R2032000
         ST    R0,OCTOCROF         UPDATE OCR OFFSET                    R2034000
         DROP  R1                  DROP OCT ADDRESSABILITY              R2036000
         SPACE 1                                                    R41 R2037000
*        ROPSHIFT - ENTRY POINT TO CONVERT CONTROL CARDS TO COMMENTS    R2038000
         SPACE 1                                                    R41 R2039000
ROPSHIFT MVC   JCTWORK(79),0(RPI)  CONVERT /* CARD                      R2040000
         MVC   1(79,RPI),JCTWORK    TO //* CARD                     R41 R2042000
         OI    RCARDLRC,LRC1ONUL   INDICATE INTERNALLY GENERATED     R4 R2044000
         LA    RL2,RJCLCARD        LOAD ADDRESS OF EXIT                 R2046000
        $RETURN                     AND RETURN                          R2048000
         SPACE 5                                                        R2050000
RILLOUPT OI    RCARDLRC,LRC1ONUL+RDLMSKIP SET INTERNAL GEN     @OZ30530 R2052000
         BAL   RL1,RPUT            ADD MESSAGE TO OUTPUT FILE  @OZ30530 R2052800
         OI    RCARDLRC,LRC1CCTL+LRC1TASA SET ASA CAR CONTROL  @OZ30530 R2053000
         MVI   RDRCCTL,C'0'        FORCE DOUBLE SPACE                R4 R2054000
         MVI   0(RPI),C'*'         FILL OUT CARD IMAGE               R4 R2056000
         MVC   1(78,RPI),0(RPI)     WITH ASTERISKS                   R4 R2058000
         MVI   79(RPI),C' '        ADD TRAILING BLANK                R4 R2059000
         MVC   (79-23)/2(23,RPI),ROINVLID+4  MOVE IN ERROR MESSAGE   R4 R2060000
         BAL   RL1,RPUT            ADD ERROR MESSAGE TO OUTPUT FILE     R2062000
        $WTO   ROINVLID,L'ROINVLID,JOB=YES,               ISSUE ERROR  CR2064000
               ROUTE=$LOG+$UR,CLASS=$TRIVIA,PRI=$ST         MESSAGE     R2066000
         BAL   RL1,RJOBKILL        KILL JOB                             R2068000
         LA    RL2,RFLTEST         LOAD ADDRESS OF EXIT                 R2070000
        $RETURN                     AND RETURN                          R2072000
         EJECT                                                          R2074000
*                                                                       R2076000
*                             HASP OUTPUT SCAN TABLE                    R2078000
*                                                                       R2080000
         SPACE 3                                                        R2082000
ROPTABLE DS    0F                                                       R2084000
         DC    CL7'  BURST',C'B'   DATA SET BURST SPECIFICATION      R4 R2084100
         DC    AL1(RSCFLEFT+1,1)                                     R4 R2084200
         DC    AL2(ROWBURST-JCTDSECT)                                R4 R2084300
         DS    0F                                                    R4 R2084400
         DC    CL7'  CHARS',C'X'   DATA SET CHARS SPECIFICATION      R4 R2084500
         DC    AL1(RSCFLEFT+RSCFLBLK+4,4)                            R4 R2084600
         DC    AL2(OCRCHAR1-OCRDSECT+JCTWORK-JCTDSECT)               R4 R2084700
         DS    0F                                                    R4 R2084800
         DC    CL7'CKPTLNS',C'E'   DATASET LINES/LOG PAGE SPEC @OZ19494 R2085250
         DC    AL1(RSCFLBIN+1,2)                               @OZ19494 R2085300
         DC    AL2(OCRCKPTL-OCRDSECT+JCTWORK-JCTDSECT)         @OZ19494 R2085400
         DS    0F                                              @OZ19494 R2085500
         DC    CL7'CKPTPGS',C'P'   DATASET LOG PAGES/CKPT SPEC @OZ19494 R2085600
         DC    AL1(RSCFLBIN+1,2)                               @OZ19494 R2085700
         DC    AL2(OCRCKPTP-OCRDSECT+JCTWORK-JCTDSECT)         @OZ19494 R2085800
         DS    0F                                              @OZ19494 R2085900
         DC    CL7' COPIES',C'N'   DATA SET COPY COUNT                  R2086000
         DC    AL1(RSCFLBIN+1,1)                                        R2088000
         DC    AL2(OCRCOPY-OCRDSECT+JCTWORK-JCTDSECT)                   R2090000
         DS    0F                                                       R2092000
         DC    CL7'  COPYG',C'G'   DATA SET CPY GROUPS SPECIFICATION R4 R2092100
         DC    AL1(RSCFLBIN+8,1)                                     R4 R2092200
         DC    AL2(OCRCOPYG-OCRDSECT+JCTWORK-JCTDSECT)               R4 R2092300
         DS    0F                                                    R4 R2092400
         DC    CL7'   DEST',C'D'   DATA SET DESTINATION(S)              R2094000
         DC    AL1(RSCFLEFT+RSCFLBLK+4,8)                               R2096000
         DC    AL2(ROWDESTS-JCTDSECT)                                R4 R2098000
         DS    0F                                                       R2100000
         DC    CL7'    FCB',C'C'   DATA SET FCB SPECIFICATION           R2102000
         DC    AL1(RSCFLEFT+RSCFLBLK+1,4)                               R2104000
         DC    AL2(OCRFCB-OCRDSECT+JCTWORK-JCTDSECT)                    R2106000
         DS    0F                                                       R2108000
         DC    CL7'  FLASH',C'O'   FLASH (FORMS OVERLAY) SPECIF.     R4 R2108100
         DC    AL1(RSCFLEFT+RSCFLBLK+1,4)                            R4 R2108200
         DC    AL2(OCRFLASH-OCRDSECT+JCTWORK-JCTDSECT)               R4 R2108300
         DS    0F                                                    R4 R2108400
         DC    CL7' FLASHC',C'Q'   FLASH COUNT (QUANTITY) SPECIF.    R4 R2108500
         DC    AL1(RSCFLBIN+1,1)                                     R4 R2108600
         DC    AL2(OCRFLSHC-OCRDSECT+JCTWORK-JCTDSECT)               R4 R2108700
         DS    0F                                                    R4 R2108800
         DC    CL7'  FORMS',C'F'   DATA SET FORMS SPECIFICATION         R2110000
         DC    AL1(RSCFLEFT+RSCFLBLK+1,4)                               R2112000
         DC    AL2(OCRFORMS-OCRDSECT+JCTWORK-JCTDSECT)                  R2114000
         DS    0F                                                       R2116000
         DC    CL7'  INDEX',C'I'   DATA SET INDEX SPECIFICATION         R2118000
         DC    AL1(RSCFLBIN+1,1)                                        R2120000
         DC    AL2(OCRINDEX-OCRDSECT+JCTWORK-JCTDSECT)                  R2122000
         DS    0F                                                       R2124000
         DC    CL7' LINDEX',C'L'   DATA SET LEFT INDEX SPECIFICATION    R2126000
         DC    AL1(RSCFLBIN+1,1)                                        R2128000
         DC    AL2(ROWLINDX-JCTDSECT)                                R4 R2130000
         SPACE 1                   THIS LINE DELETED BY APAR   @OZ19494 R2130100
         SPACE 1                   THIS LINE DELETED BY APAR   @OZ19494 R2130200
         SPACE 1                   THIS LINE DELETED BY APAR   @OZ19494 R2131000
         DS    0F                                                       R2132000
         DC    CL7' MODIFY',C'Y'   DATA SET MODIFY SPECIFICATION     R4 R2132100
         DC    AL1(RSCFLEFT+RSCFLBLK+1,4)                            R4 R2132200
         DC    AL2(OCRMODF-OCRDSECT+JCTWORK-JCTDSECT)                R4 R2132300
         DS    0F                                                    R4 R2132400
         DC    CL7' MODTRC',C'M'   MODIFY TRC SPECIFICATION          R4 R2132500
         DC    AL1(RSCFLBIN+1,1)                                     R4 R2132600
         DC    AL2(OCRMODFT-OCRDSECT+JCTWORK-JCTDSECT)               R4 R2132700
         DS    0F                                                    R4 R2132800
         DC    CL7'  RECNT',C'R'   DATA SET ESTIMATED RECORD COUNT      R2134000
         DC    AL1(RSCFLBIN+1,4)                                        R2136000
         DC    AL2(OCRRECNT-OCRDSECT+JCTWORK-JCTDSECT)                  R2138000
         DS    0F                                                       R2140000
         DC    CL7'    UCS',C'T'   DATA SET UCS SPECIFICATION           R2142000
         DC    AL1(RSCFLEFT+RSCFLBLK+1,4)                               R2144000
         DC    AL2(OCRUCS-OCRDSECT+JCTWORK-JCTDSECT)                    R2146000
         DS    0F                                                       R2148000
         DC    CL7'COMPACT',C'Z'   DATASET COMPACTION TABLE NUMBER  R41 R2148500
         DC    AL1(RSCFLBIN+1,1)                                    R41 R2148600
         DC    AL2(OCRCPTN-OCRDSECT+JCTWORK-JCTDSECT)               R41 R2148700
         DS    0F                                                   R41 R2148800
         DC    X'FF'               END OF OUTPUT SCAN TABLE             R2150000
         SPACE 4                                                     R4 R2150100
*                             OUTPUT SCAN WORK AREA DEFINITIONS      R4 R2150200
         SPACE 3                                                     R4 R2150300
JCTDSECT DSECT                                                       R4 R2150400
         ORG   JCTWORK+OCRLENG     DEFINE SCAN WORK AREA             R4 R2150500
ROWDESTS DS    0CL32                   DESTINATION VALUES            R4 R2150600
ROWDEST1 DS    CL8                 1ST DESTINATION VALUE             R4 R2150700
ROWDEST2 DS    CL8                 2ND DESTINATION VALUE             R4 R2150800
ROWDEST3 DS    CL8                 3RD DESTINATION VALUE             R4 R2150900
ROWDEST4 DS    CL8                 4TH DESTINATION VALUE             R4 R2151000
ROWBURST DS    CL1                 BURST VALUE                       R4 R2151100
ROWLINDX DS    XL1                 LEFT INDEX VALUE                  R4 R2151200
ROWAREA  EQU   ROWDESTS,*-ROWDESTS WORK AREA EQUATE AND LENGTH       R4 R2151300
         SPACE 1                                                     R4 R2151400
HASPRDRO CSECT                                                       R4 R2151500
         EJECT                                                          R2152000
*********************************************************************** R2152100
*                                                                     * R2152200
*              RDESTSCN  -  DESTINATION CONVERSION SUBROUTINE         * R2152300
*                                                                     * R2152400
*                  OUTPUT  --  RW = ADDRESS OF BINARY DESTINATION     * R2152500
*                                                                     * R2152600
*                  INPUTS  --  R1 = ADDRESS OF DESTINATION            * R2152700
*                                                                     * R2152800
*                  FUNCTION  --  CONVERT DESTINATION TO ITS BINARY    * R2153000
*                                EQUIVALENT                           * R2153100
*                                                                     * R2153200
*                  RETURNS  --  RL1+0 = ERROR RETURN                  * R2153300
*                               RL1+4 = NORMAL RETURN                 * R2153400
*                                                                     * R2153500
*                  EXTERNAL ROUTINE  --  $SVDEST                      * R2153600
*                                                                     * R2153700
*********************************************************************** R2153800
         SPACE 3                                                     R4 R2153900
RDESTSCN NULL                                                        R4 R2154000
         TM    0(R1),X'BF'         TEST FIRST BYTE OF DESTINATION    R4 R2154100
         BZR   RL1                 ERROR IF ZERO OR BLANK            R4 R2154200
         MVC   RDEST,0(R1)         MOVE DESTINATION TO WORK AREA     R4 R2154300
         MVI   RDEST+8,C' '        SET SCAN TERMINATOR               R4 R2154600
         LA    R15,RDEST           SCAN                              R4 R2154700
SKIP80   LA    R15,1(,R15)          FOR                              R4 R2154800
         CLI   0(R15),C' '           FIRST                           R4 R2154900
         BNE   SKIP80                 BLANK                          R4 R2155000
         MVC   1(6,R15),0(R15)     BLANK OUT REST OF DESTINATION     R4 R2155100
         STM   R0,R11,PCER0        SAVE REGISTERS                    R4 R2155200
         L     R1,PCEDCT           GET ADDRESS OF DCT          @OZ32566 R2155300
         SLR   R2,R2                   SET UP                        R4 R2155400
         IC    R2,DCTSYS-DCTDSECT(,R1)  SYSTEM ID                    R4 R2155600
         LA    R1,RDEST            GET ADDRESS OF DESTINATION        R4 R2156000
         L     R11,$SSVT           GET ADDRESS OF SSVT               R4 R2156100
         L     R15,$SVDEST-SSVT(,R11)  GET ADDRESS OF ROUTINE        R4 R2156200
         BALR  R14,R15             CONVERT NAME TO ROUTE CODE        R4 R2156300
         B     RDESTERR            ERROR RETURN                      R4 R2156400
         LR    R15,R2              NORMAL RETURN, MOVE CODE TO R15   R4 R2156500
         LM    R0,R11,PCER0        RESTORE REGISTERS                 R4 R2156600
         STH   R15,0(,RW)          SET ROUTE CODE                    R4 R2156700
         B     4(,RL1)              AND RETURN                       R4 R2156800
         SPACE 3                                                     R4 R2156900
RDESTERR LM    R0,R11,PCER0        RESTORE REGISTERS                 R4 R2157000
         BR    RL1                 ERROR RETURN                      R4 R2157100
         EJECT                                                       R4 R2157200
RILLCCRD LA    RL2,RNOTCCRD        LOAD ADDRESS OF EXIT                 R2290000
        $RETURN                     AND RETURN                          R2292000
         SPACE 10                                                       R2292100
*                                                                       R2292200
*                             CONTROL CARD SCAN CONSTANTS               R2292300
*                                                                       R2292400
         SPACE 3                                                        R2292500
RH10     DC    H'10'               CONSTANT                             R2292800
ROCTID   DC    CL4'OCT'            OCT IDENTIFIER                       R2293000
RANY     DC    CL4'ANY'            SYSTEM AFFINITY CONSTANTS            R2293100
RIND     DC    CL4'IND'            *                                    R2293200
RSTAR    DC    CL2'*'              *                                    R2293300
RPRINT   DC    CL6'PRINT'          ROUTE CONSTANTS                      R2293400
RPUNCH   DC    CL6'PUNCH'          *                                    R2293500
RRMT     DC    CL3'RMT'            *                                 R4 R2294000
         SPACE 3                                                     R4 R2294200
RCOMASK  $WTO  ,69,MF=LX,TYPE=SVC34,JOB=NO,ROUTE=B'1100000000000000' R4 R2294300
         EJECT                                                       R4 R2295000
*                                                                       R2296000
*                             OPERATOR AND ERROR MESSAGES               R2298000
*                                                                       R2300000
         SPACE 3                                                        R2302000
RCOMMSG  $MSG  120                 COMMAND MESSAGE NUMBER               R2304000
RRILEGAL $MSG  111,'-- INVALID /*ROUTE CARD '                           R2306000
ROUTCODE EQU   *-13,7              /*ROUTE EBCDIC CONSTANT              R2308000
RSETHMSG $MSG  102,'HELD FOR THE FOLLOWING VOLUME(S) --'                R2310000
RSETMSG  $MSG  103                 SETUP MESSAGE NUMBER                 R2312000
RMSGMSG  $MSG  104                 MESSAGE MESSAGE NUMBER            R4 R2312100
RJINVLID $MSG  112,'-- INVALID /*JOBPARM CARD '                      R4 R2312200
ROINVLID $MSG  113,'-- INVALID /*OUTPUT CARD '                       R4 R2312300
         SPACE 5                                                     R4 R2312800
         DROP  BASE3               DROP SEGMENT ADDRESSABILITY       R4 R2312900
         TITLE 'HASP INPUT SERVICE -- DD * AND DD DATA SCAN ROUTINE' R4 R2313000
HASPRDRO CSECT                     DEFINE SUBROUTINE CSECT           R4 R2313100
HASPRDDS $ENTRY                    DEFINE DD*/DATA SCAN OVERLAY      R4 R2313200
         CLI   5(RW),C' '          TEST NEXT COLUMN                  R4 R2313300
         BE    RDDSCN14            BRANCH IF NO KEYWORD PARAMETERS   R4 R2313400
         CLI   5(RW),C','          TEST AGAIN                        R4 R2313500
         BNE   RDDSCER             BRANCH IF NOT BLANK OR COMMA      R4 R2313600
         LA    R14,1               RESTORE SCAN INCREMENT            R4 R2313700
         BCTR  RW,0                PREPARE TO SCAN REST OF DD CARD   R4 R2313800
         SPACE 2                                                     R4 R2313900
RDDSCAN1 LA    R15,64(,RPI)        SET LIMIT FOR DD CARD SCAN        R4 R2314000
         SPACE 1                                                     R4 R2314100
RDDSCAN2 CLI   6(RW),C' '          SEARCH FOR END OF CARD            R4 R2314200
         BE    RDDSCN12            BRANCH IF BLANK ENCOUNTERED       R4 R2314300
         BXH   RW,R14,RDDSCN12     ADVANCE TO NEXT COLUMN            R4 R2314400
         CLC   RDDSCDLM,1(RW)      TEST FOR DLM KEYWORD              R4 R2314500
         BNE   RDDSCAN2            BRANCH IF NOT DLM KEYWORD         R4 R2314600
         CLI   5(RW),C','          TEST FIRST CHARACTER              R4 R2314700
         BE    RDDSCAN2            IGNORE DLM IF COMMA               R4 R2314800
         LA    RW,1(,RW)           ADVANCE TO NEXT COLUMN            R4 R2314900
         CLI   4(RW),C''''         TEST FOR APOSTROPHE               R4 R2315000
         BNE   RDDSCAN9            BRANCH IF NOT APOSTROPHE          R4 R2315100
         BXH   RW,R14,RDDSCN15     ADVANCE TO NEXT COLUMN            R4 R2315200
         LH    R0,4(,RW)           GET TENATIVE DELIMITER            R4 R2315300
         CLI   4(RW),C'&&'         TEST FIRST CHARACTER              R4 R2315400
         BNE   RDDSCAN3            BRANCH IF NOT AMPERSAND           R4 R2315500
         CLI   5(RW),C'&&'         TEST NEXT CHARACTER               R4 R2315600
         BNE   RDDSCAN6            BRANCH IF NOT DOUBLE AMPERSAND    R4 R2315700
         CLI   6(RW),C''''         TEST NEXT CHARACTER               R4 R2315800
         BNE   RDDSCAN4            BRANCH IF NOT APOSTROPHE          R4 R2315900
         CLI   7(RW),C''''         TEST NEXT CHARACTER               R4 R2316000
         BE    RDDSCAN4            BRANCH IF DOUBLE APOSTROPHE       R4 R2316100
         SPACE 1                                                     R4 R2316200
RDDSCAN3 CLI   4(RW),C''''         TEST FIRST CHARACTER              R4 R2316300
         BNE   RDDSCAN5            BRANCH IF NOT APOSTROPHE          R4 R2316400
         CLI   5(RW),C''''         TEST NEXT CHARACTER               R4 R2316500
         BNE   RDDSCN15            ILLEGAL IF NOT APOSTROPHE         R4 R2316600
         SPACE 1                                                     R4 R2316700
RDDSCAN4 BXH   RW,R14,RDDSCN15     SKIP OVER REDUNDANT CHARACTER     R4 R2316800
         IC    R0,5(,RW)           REPLACE 2ND CHARACTER OF DLM      R4 R2316900
RDDSCAN5 CLI   5(RW),C'&&'         TEST SECOND CHARACTER             R4 R2317000
         BNE   RDDSCAN6            BRANCH IF NOT AMPERSAND           R4 R2317100
         CLI   6(RW),C'&&'         TEST NEXT CHARACTER               R4 R2317200
         BE    RDDSCAN7            BRANCH IF SECOND AMPERSAND        R4 R2317300
         SPACE 1                                                     R4 R2317400
RDDSCAN6 CLI   5(RW),C''''         TEST SECOND CHARACTER             R4 R2317500
         BNE   RDDSCAN8            BRANCH IF NOT APOSTROPHE          R4 R2317600
         CLI   6(RW),C''''         TEST NEXT CHARACTER               R4 R2317700
         BNE   RDDSCN15            ILLEGAL IF NOT APOSTROPHE         R4 R2317800
         SPACE 1                                                     R4 R2317900
RDDSCAN7 BXH   RW,R14,RDDSCN15     SKIP OVER REDUNDANT CHARACTER     R4 R2318000
         SPACE 1                                                     R4 R2318100
RDDSCAN8 CLI   6(RW),C''''         TEST FOR TERMINATING APOSTROPHE   R4 R2318200
         BNE   RDDSCN15            IGNORE IF INVALID SYNTAX          R4 R2318300
         LA    RW,1(,RW)           ADVANCE TO NEXT COLUMN            R4 R2318400
         B     RDDSCN10            TEST NEXT CHARACTER               R4 R2318500
         SPACE 3                                                     R4 R2318600
RDDSCAN9 CLI   5(RW),C' '          TEST SECOND CHARACTER             R4 R2318700
         BE    RDDSCN15            ILLEGAL IF BLANK                  R4 R2318800
         CLI   5(RW),C','           OR                               R4 R2318900
         BE    RDDSCN15              COMMA                           R4 R2319000
         LH    R0,4(,RW)           GET DELIMITER                     R4 R2319100
RDDSCN10 CLI   6(RW),C' '          TEST NEXT CHARACTER               R4 R2319200
         BE    RDDSCN11            ILLEGAL IF NOT BLANK              R4 R2319300
         CLI   6(RW),C','           OR                               R4 R2319400
         BNE   RDDSCN15              COMMA                           R4 R2319500
         SPACE 1                                                     R4 R2319600
RDDSCN11 STH   R0,RDRDLM           SET DELIMITER SPECIFIED           R4 R2319700
         OI    RCARDLRC,RDLMSKIP   BYPASS DLM TEST                   R4 R2319800
         B     RDDSCAN2            CONTINUE SCAN                     R4 R2319900
         SPACE 3                                                     R4 R2320000
RDDSCN12 CLI   5(RW),C','          TEST LAST CHARACTER               R4 R2320100
         BNE   RDDSCN14            BRANCH IF NOT A COMMA             R4 R2320200
         BAL   RL1,RCONTNUE        GET CONTINUATION CARD             R4 R2320300
         B     RDDSCN15            BRANCH IF ILLEGAL CONTINUATION    R4 R2320400
         B     RDDSCAN1            SCAN NEXT CARD                    R4 R2320500
         SPACE 3                                                     R4 R2320600
RDDSCN13 BAL   RL1,RCONTNUE        GET CONTINUATION CARD             R4 R2320700
         B     RDDSCN15            BRANCH IF ILLEGAL CONTINUATION    R4 R2320800
         SPACE 2                                                     R4 R2320900
RDDSCN14 CLI   71(RPI),C' '        TEST COLUMN 72                    R4 R2321000
         BNE   RDDSCN13            BRANCH IF CONTINUATION INDICATED  R4 R2321100
         B     RDDSCEND            PROCESS DD CARD                   R4 R2321200
         SPACE 3                                                     R4 R2321300
RDDSCN15 NI    RDRSW,255-RNOSCAN   RESET EFFECT OF DD DATA           R4 R2321400
         SPACE 2                                                     R4 R2321500
RDDSCEND LTR   JCT,JCT             TEST FOR JOB                      R4 R2321600
         BZ    RDDRESET            BRANCH IF FLUSHING                R4 R2321700
         TM    RDRSW,RSYSINSW      TEST FOR GENERATED DD *           R4 R2321800
         BZ    SKIP130             BRANCH IF NOT                     R4 R2321900
         OI    RCARDLRC,LRC1ONUL   INDICATE INTERNALLY GENERATED     R4 R2322000
SKIP130  BAL   RL1,RPUT            ADD CARD TO OUTPUT FILE           R4 R2322100
         TM    RDRSW2,RTPCPY       TEST TYPRUN=COPY FLAG.      @OZ48524 R2322120
         BO    RPDBNXEQ            PROCESS DD AS DATA CARD.    @OZ48524 R2322140
         NI    RDRSW,255-RJCLSW    RESET JCL SWITCH                  R4 R2322200
         SPACE 2                                                     R4 R2322300
         USING SCRTEXT,RPI         SET ADDRESSABILITY TO SCR         R4 R2322400
         ST    RPI,RSAVE2          SAVE ADDRESS OF CURRENT CARD      R4 R2322500
         LA    RPI,RMESSAGE        GET ADDRESS OF CONTROL RECORD     R4 R2322600
         MVI   SCRIRCFM,DCBRECF    SET UP CONTROL RECORD             R4 R2322700
         MVC   SCRILRCL,RCARDLRL   SET RECORD LENGTH                 R4 R2322800
         TM    RINFLAG1,LRC1CCTL   TEST RECORD CHARACTERISTICS       R4 R2322900
         BZ    RCRNOCTL            BRANCH IF NO CARRIAGE CONTROL     R4 R2323000
         OI    SCRIRCFM,DCBRECCA   ASSUME ASA CARRIAGE CONTROL       R4 R2323100
         TM    RINFLAG1,LRC1TASA   TEST CARRIAGE CONTROL TYPE        R4 R2323200
         BO    SKIP140             BRANCH IF ASA                     R4 R2323300
         XI    SCRIRCFM,DCBRECCA+DCBRECCM  NO, MUST BE MACHINE       R4 R2323400
SKIP140  SLR   R1,R1               ZERO FOR NEXT INSTRUCTION         R4 R2323500
         IC    R1,SCRILRCL         INCREMENT                         R4 R2323600
         LA    R1,1(,R1)            LOGICAL RECORD LENGTH            R4 R2323700
         STC   R1,SCRILRCL           TO INCLUDE CARRIAGE CONTROL     R4 R2323800
         SPACE 1                                                     R4 R2323900
RCRNOCTL LH    R1,JCTPDDBK         GET DATA SET NUMBER               R4 R2324000
         LA    R1,1(,R1)           INCREMENT                         R4 R2324100
         STH   R1,JCTPDDBK         UPDATE DATA SET NUMBER            R4 R2324200
         STCM  R1,3,SCRIDSKY       SET IN CONTROL RECORD             R4 R2324300
         BAL   RL2,RTRACK          GET TRACK ADDR FOR 1ST DATA BLOCK R4 R2324400
         STCM  R1,15,SCRIMTTR      SAVE TRACK ADDR IN CONTROL RECORD R4 R2324500
         MVI   SCRITERM,X'FF'      TERMINATE                         R4 R2324600
         MVC   SCRIBLNK,RKBLANKS     CONTROL RECORD                  R4 R2324700
         OI    RCARDLRC,LRC1INUL+LRC1ONUL+RDLMSKIP  INDICATE CONTROL R4 R2324800
         MVC   SCRISAVE,RCARDLRL   SAVE RECORD LENGTH                R4 R2324900
         MVI   RCARDLRL,9          SET CONTROL RECORD LENGTH         R4 R2325000
         BAL   RL1,RPUT            ADD CONTROL RECORD TO OUTPUT FILE R4 R2325100
         MVC   RCARDLRL,SCRISAVE   RESTORE RECORD LENGTH             R4 R2325200
         SPACE 1                                                     R4 R2325300
         OI    RCARDLRC,RDLMSKIP   FORCE SYSIN COUNT BYPASS          R4 R2325400
         MVC   RBOEND,RBONEXT      FORCE END-OR-BUFFER               R4 R2325500
         DROP  RPI                                                   R4 R2325600
         L     RPI,RSAVE2          RESTORE ADDR OF CURRENT CARD      R4 R2325700
         BAL   RL1,RPUT            TERMINATE BUFFER                  R4 R2325800
         L     R1,RDROBUF          RESET                             R4 R2325900
         LA    RW,ROBUFST(,R1)      OUTPUT                           R4 R2326000
         ST    RW,RBONEXT            POINTER                         R4 R2326100
         MVC   RJCLTRAK,RBUFTRK(R1)  SAVE NEXT JCL TRACK ADDRESS     R4 R2326200
         USING SCRTEXT,RL1         SET ADDRESSIBILITY FOR SCR        R4 R2326300
         LA    RL1,RMESSAGE        GET ADDRESS OF SCR RECORD         R4 R2326400
         MVC   RBUFTRK(,R1),SCRIMTTR   SET DATA BLOCK TRACK ADDRESS  R4 R2326500
         SPACE 1                                                     R4 R2326600
         L     RW,RDRIOT           GET ADDRESS OF FIRST IOT          R4 R2326700
         USING IOTDSECT,RW         ESTABLISH IOT ADDRESSABILITY      R4 R2326800
SKIP160  ICM   R1,15,IOTIOT        FIND                              R4 R2326900
         BZ    SKIP150              END OF                           R4 R2327000
         LR    RW,R1                 IOT                             R4 R2327100
         B     SKIP160                CHAIN                          R4 R2327200
SKIP150  L     R1,IOTPDDBP         GET PDDB DISPLACEMENT             R4 R2327300
         LA    RL2,PDBLENG(,R1)    COMPARE NEW DISPLACEMENT          R4 R2327400
         CH    RL2,IOTLENG          WITH MAXIMUM                     R4 R2327500
         BNH   RPDDBBLD            BRANCH IF ROOM FOR PDDB IN IOT    R4 R2327600
         SPACE 1                                                     R4 R2327700
         BAL   RL2,RTRACK          GET TRACK ADDRESS FOR NEW IOT     R4 R2327800
         ST    R1,IOTIOTTR         SET IOT CHAIN TRACK ADDRESS       R4 R2327900
        $GETBUF WAIT=YES           GET BUFFER FOR NEW IOT            R4 R2328000
         ST    R1,IOTIOT           SET IOT CHAIN ADDRESS             R4 R2328500
         LA    R0,IOTSTART-IOTDSECT(,R1)  GET ADDRESS                R4 R2328600
         LH    R1,$BUFSIZE                 AND LENGTH OF IOT FIELDS  R4 R2328700
         SLR   R15,R15             SET TO ZERO FOR CLEARING          R4 R2328800
         MVCL  R0,R14               AND CLEAR THE IOT                R4 R2328900
         LR    R1,RW               SAVE ADDRESS OF PREVIOUS IOT      R4 R2329000
         L     RW,IOTIOT           GET ADDRESS OF NEW IOT            R4 R2329100
         MVC   IOTID(IOTTRACK-IOTID),IOTID-IOTDSECT(R1)  INITIALIZE  R4 R2329200
         MVI   IOTFLAG1,0                                 NEW IOT    R4 R2329300
         MVC   IOTTRACK,IOTIOTTR-IOTDSECT(R1)              FROM OLD  R4 R2329400
         L     R1,$IOTPDDB         SET DISPLACEMENT                  R4 R2329500
         ST    R1,IOTPDDBP           OF FIRST AVAILABLE PDDB         R4 R2329600
         SPACE 1                                                     R4 R2329700
RPDDBBLD ALR   RW,R1               GET ADDRESS OF PDDB               R4 R2329800
         USING PDBDSECT,RW         ESTABLISH PDDB ADDRESSABILITY     R4 R2329900
         MVC   0(PDBLENG,RW),RPDBMODL  CONSTRUCT                     R4 R2330000
         MVI   PDBFLAG1,PDB1NSOT        PDDB                         R4 R2330100
         MVC   PDBRECFM,SCRIRCFM         FOR EACH                    R4 R2330200
         MVC   PDBLRECL+1(1),SCRILRCL     INPUT                      R4 R2330300
         MVC   PDBMTTR,SCRIMTTR            DATA SET                  R4 R2330400
         DROP  RL1                                                   R4 R2330500
         LH    R1,JCTPDDBK         GET DATA SET NUMBER               R4 R2330600
         STH   R1,PDBDSKEY         SET DATA SET NUMBER IN PDDB       R4 R2330700
         MVC   PDBCLASS,JCTMCLAS   SET CLASS TO MSGCLASS             R4 R2330800
         MVC   PDBRECCT,JCTJOBIN   INITIALIZE CARD COUNT             R4 R2330900
         MVC   PDBFORMS,JCTFORMS   INITIALIZE FORMS TO JOB FORMS     R4 R2331000
         DROP  RW                  DROP PDDB ADDRESSABILITY          R4 R2331100
         TM    PCEID,PCERJEID      TEST PROCESSOR TYPE         @OZ43908 R2331120
         BZ    RPDBNRJE            BR IF NOT REMOTE TERMINAL   @OZ43908 R2331140
         ST    RW,RDPDBSV          SAVE PDDB ADDR FOR LRECL    @OZ43908 R2331160
RPDBNRJE DS    0H                                              @OZ43908 R2331180
         STH   R1,RDRDSKEY         SET DATA SET KEY                  R4 R2331200
         L     RW,RDROBUF          GET ADDRESS OF OUTPUT BUFFER      R4 R2331300
         STH   R1,HDBPDDBK-BUFDSECT(,RW)  CORRECT FIRST DATA BUFFER  R4 R2331400
RPDBNXEQ DS    0H                                              @OZ48524 R2331450
         LA    RL2,RNXTCRD         SET UP EXIT                       R4 R2331500
         B     RDDRETN              TO GET NEXT CARD                 R4 R2331600
         SPACE 2                                                     R4 R2331700
RDDSCER  NI    RDRSW,255-RNOSCAN   TURN ON CARD SCAN                 R4 R2331800
         B     RDDFLTST             AND IGNORE STATEMENT             R4 R2331900
         SPACE 2                                                     R4 R2332000
RDDRESET NI    RDRSW,255-RJCLSW    RESET JCL SWITCH                  R4 R2332100
RDDFLTST LA    RL2,RFLTEST         SET UP FLUSH EXIT                 R4 R2332200
         SPACE 2                                                     R4 R2332300
RDDRETN $RETURN                    RETURN TO MAIN PROCESSOR          R4 R2332400
         EJECT                                                       R4 R2332500
*                                                                    R4 R2332600
*                             DD * AND DD DATA SCAN CONSTANTS        R4 R2332700
*                                                                    R4 R2332800
         SPACE 3                                                     R4 R2332900
RDDSCDLM DC    CL4'DLM='           DLM KEYWORD                       R4 R2333000
         SPACE 5                                                     R4 R2333100
         DROP  BASE3               DROP SEGMENT ADDRESSABILITY       R4 R2333200
         TITLE 'HASP INPUT SERVICE -- JOB CARD SCAN ROUTINE'         R4 R2333300
HASPRDRO CSECT                     DEFINE SUBROUTINE CSECT           R4 R2333400
HASPRJCS $ENTRY                    DEFINE JOB CARD SCAN OVERLAY      R4 R2333500
         ST    RW,RSAVE1           SAVE POINTER FOR JOB CARD SCAN    R4 R2333600
         BAL   RL1,RJOBEND         TERMINATE PREVIOUS JOB            R4 R2333700
         MVI   RDRSW2,0            ZERO JOB CARD SCAN SWITCHES       R4 R2333800
         BAL   RL2,RGETBUF         GET A BUFFER FOR THE JCT             R2334000
         L     JCT,RDROBUF         SET UP JCT ADDRESSABILITY         R4 R2336000
         LA    R14,JCTSTART        GET ADDR OF START OF JCT FIELDS      R2338000
         LH    R15,$BUFSIZE         AND LENGTH OF JCT FIELDS         R4 R2340000
         SLR   R1,R1               SET TO ZERO FOR CLEARING             R2342000
         MVCL  R14,R0               AND CLEAR THE JCT                   R2344000
         BAL   RL2,RGETBUF         GET A BUFFER FOR THE IOT             R2351200
         L     RL1,RDROBUF         RL1 = ADDRESS OF IOT              R4 R2351300
         ST    RL1,RDRIOT          SAVE ADDRESS OF IOT               R4 R2351400
         USING IOTDSECT,RL1        ESTABLISH IOT ADDRESSABILITY         R2352000
         LA    R14,IOTSTART        GET ADDR OF START OF IOT FIELDS      R2354000
         LH    R15,$BUFSIZE         AND LENGTH OF IOT FIELDS         R4 R2356000
         SLR   R1,R1               SET TO ZERO FOR CLEARING             R2358000
         MVCL  R14,R0               AND CLEAR THE IOT                   R2360000
         OI    IOTMSTAB+(TABFLAG-TABDSECT),TABMASTR SHOW MASTER TAB  R4 R2360100
        $TIME                      GET CURRENT TIME                     R2362000
         STM   R0,R1,JCTRDRON      SET JOB ENTRY TIME AND DATE          R2364000
         SPACE 2                                                        R2366000
         MVC   JCTJNAME,2(RPI)     MOVE JOB NAME TO JCT                 R2368000
         MVI   JCTJNAME+8,C' '     ADD BLANK TO TERMINATE SCAN          R2370000
         LA    RW,JCTJNAME-1       SET UP FOR SCAN                      R2372000
RJSETJN  LA    RW,1(,RW)           SCAN JOB NAME                        R2374000
         CLI   0(RW),C' '           FOR FIRST BLANK                     R2376000
         BNE   RJSETJN             BRANCH IF NOT BLANK                  R2378000
         MVC   1(7,RW),0(RW)       BLANK OUT REST OF JOB NAME           R2380000
         XC    JCTJNAME+8(8),JCTJNAME+8 CLEAR SUPERFLUOUS BLANKS        R2382000
         SPACE 2                                                        R2384000
        $QSUSE                     REQUEST ACCESS TO CHECKPOINT DATA    R2385000
         L     R1,PCEDCT           GET ADDRESS OF READER DCT   @OZ32566 R2386000
         USING DCTDSECT,R1         ESTABLISH DCT ADDRESSABILITY         R2388000
         CLI   DCTJCLAS,CATSTCCL   TEST DEFAULT JOB CLASS               R2390000
         BNE   RNOTSTC             BRANCH IF NOT STARTED TASK           R2392000
         LH    RW,$STCNO           GET CURRENT STC NUMBER               R2394000
         EJECT                                                       R4 R2396000
RINCSTCN LA    RW,1(,RW)           INCREMENT                            R2398000
         CL    RW,R20000           COMPARE WITH MAXIMUM NUMBER          R2400000
         BL    *+8                 BRANCH IF MAXIMUM NOT REACHED        R2402000
         L     RW,R10001           OVERFLOW, RESET TO 10001             R2404000
        $QLOC  (RW)                TEST FOR DUPLICATE NUMBER            R2406000
         BNZ   RINCSTCN            BRANCH IF DUPLICATE                  R2408000
         STH   RW,$STCNO           UPDATE MASTER STC NUMBER             R2410000
         MVC   RJOBVAR,RSTC        PRESET JOBID HEADER                  R2412000
         B     RCRJOBID            CREATE JOBID                         R2414000
         SPACE 1                                                        R2416000
RNOTSTC  CLI   DCTJCLAS,CATTSUCL   TEST DEFAULT JOB CLASS               R2418000
         BNE   RNOTTSU             BRANCH IF NOT LOGON               R4 R2418100
         LH    RW,$TSUNO           GET CURRENT LOGON NUMBER             R2422000
         SPACE 1                                                        R2424000
RINCTSUN LA    RW,1(,RW)           INCREMENT                            R2426000
         CL    RW,R30000           COMPARE WITH MAXIMUM NUMBER          R2428000
         BL    *+8                 BRANCH IF MAXIMUM NOT REACHED        R2430000
         L     RW,R20001           OVERFLOW, RESET TO 20001             R2432000
        $QLOC  (RW)                TEST FOR DUPLICATE NUMBER            R2434000
         BNZ   RINCTSUN            BRANCH IF DUPLICATE                  R2436000
         STH   RW,$TSUNO           UPDATE MASTER LOGON NUMBER           R2438000
         MVC   RJOBVAR,RTSU        PRESET JOBID HEADER                  R2440000
         B     RCRJOBID            CREATE JOBID                         R2442000
         SPACE 1                                                        R2444000
RNOTTSU  LH    RW,$JOBNO           GET CURRENT USER JOB NUMBER       R4 R2444200
         SPACE 1                                                        R2448000
RINCJOBN LA    RW,1(,RW)           INCREMENT                            R2450000
         CL    RW,R10000           COMPARE WITH MAXIMUM NUMBER          R2452000
         BL    *+8                 BRANCH IF MAXIMUM NOT REACHED        R2454000
         LA    RW,1                OVERFLOW, RESET TO 1                 R2456000
        $QLOC  (RW)                TEST FOR DUPLICATE NUMBER            R2458000
         BNZ   RINCJOBN            BRANCH IF DUPLICATE                  R2460000
         STH   RW,$JOBNO           UPDATE MASTER JOB NUMBER             R2462000
         MVC   RJOBVAR,=CL4'JOB'   PRESET JOBID HEADER               R4 R2462200
         DROP  R1                  DROP DCT ADDRESSABILITY              R2465000
         SPACE 1                                                        R2466000
RCRJOBID CVD   RW,RTEMP            CONVERT JOB NUMBER TO DECIMAL     R4 R2466200
         NI    RTEMP+5,X'0F'       FORCE JOB NUMBER MODULO 10000        R2470000
         MVC   JCTJOBID,RMASK      SET EDIT MASK                        R2472000
         ED    JCTJOBID,RTEMP+4    CONVERT JOB NUMBER TO EBCDIC         R2474000
         MVC   JCTJOBID(4),RJOBVAR SET JOBID HEADER                     R2476000
         EJECT                                                       R4 R2484000
         XC    JCTWORK(JQELNGTH),JCTWORK  CLEAR JOB QUEUE ENTRY         R2484100
         MVI   QUEPRIO+JCTWORK,X'FF'   SET FLUSH PRIORITY               R2484200
         STH   RW,QUEJOBNO+JCTWORK     SET JOB NUMBER                   R2484300
         MVC   QUEFLAGS+JCTWORK,$SIDBUSY  SET BUSY INDICATION           R2485000
         L     RW,PCEDCT           RW = ADDRESS OF INPUT DCT   @OZ32566 R2485500
         MVC   RDRSIAFF,DCTSIAFF-DCTDSECT(RW)  INITIALIZE AFFINITY   R4 R2486000
         CLI   JCTJOBID,C'J'       TEST JOBID                        R4 R2486500
         BE    RNOIND              BRANCH IF NOT STC OR TSU          R4 R2487000
         TM    $STATUS,$INDMODE    TEST SYSTEM STATUS                R4 R2487500
         BZ    RNOIND              BRANCH IF NOT INDEPENDENT MODE    R4 R2488000
         OI    RDRSIAFF,QUEINDAF   SET INDEPENDENT AFFINITY          R4 R2488500
         SPACE 1                                                     R4 R2489000
RNOIND   MVC   QUEFLAG2+JCTWORK,RDRSIAFF  INITIALIZE AFFINITY        R4 R2489500
        $TRACK IOTMSTAB            GET TRACK ADDRESS FOR JCT         R4 R2489900
         ST    R1,QUETRAK+JCTWORK  SET JCT TRACK ADDRESS                R2492000
         MVC   QUEDEVID+JCTWORK,DCTDEVID-DCTDSECT(RW)  SET DEVICE ID    R2494000
         MVC   QUEJNAME+JCTWORK,JCTJNAME  MOVE JOB NAME TO JQE          R2496000
         MVC   QUEPUNRT+JCTWORK,DCTNO-DCTDSECT(RW) SET INPUT RT     R41 R2496100
         SPACE 2                                                        R2498000
RJOBQUE $QADD  JCTWORK,$INPUT      ADD JOB QUEUE ENTRY                  R2500000
         BNZ   RJCTINIT            BRANCH IF QUEUE IS NOT FULL          R2502000
        $WAIT  JOB                 WAIT FOR A JOB QUEUE ELEMENT         R2504000
         B     RJOBQUE             TRY AGAIN                            R2506000
         SPACE 2                                                        R2508000
RJCTINIT ST    R1,PCEJQE           SAVE JQE ADDRESS            @OZ32566 R2510000
         SPACE 1                                                     R4 R2511000
RJCTINT1 MVC   JCTID,RJCTID        SET JCT NAME                      R4 R2512000
         LH    R1,$BUFLENG         SET BLOCK                         R4 R2514000
         STH   R1,JCTLENG           LENGTH                              R2516000
         SPACE 2                                                        R2518000
         L     R1,$DATAKEY         GET MASTER PERIPHERAL DATA SET KEY   R2520000
         AL    R1,RONE             INCREMENT                            R2522000
         STCK  RTEMP               STORE CLOCK                          R2524000
         BC    7,RSETKEY           BRANCH IF CLOCK IS NOT VALID         R2526000
         CL    R1,RTEMP            COMPARE CLOCK WITH KEY               R2528000
         BNL   RSETKEY             BRANCH IF CLOCK IS NOT GREATER       R2530000
         L     R1,RTEMP            USE CLOCK AS DATA SET KEY            R2532000
RSETKEY  ST    R1,$DATAKEY         UPDATE MASTER DATA SET KEY           R2534000
         ST    R1,JCTJBKEY         STORE AS JOB KEY IN JCT              R2536000
         MVI   JCTCNVRC+3,JCTCABND PRESET CONVERTER RETURN CODE         R2538000
         EJECT                                                       R4 R2540000
        $TRACK IOTMSTAB            GET TRACK ADDRESS FOR IOT         R4 R2540100
         ST    R1,JCTIOT           SET TRACK ADDRESS OF 1ST IOT         R2544000
         L     R1,PCEJQE           GET JQE ADDRESS             @OZ32566 R2546000
         SL    R1,$JOBQPTR         GENERATE RELATIVE ADDRESS            R2548000
         ST    R1,JCTJQE           SET OFFSET OF JOB QUEUE ENTRY        R2550000
         LA    R1,100              INITIALIZE                           R2552000
         STH   R1,JCTPDDBK          PDDB KEY                            R2554000
         CLI   RPRIORTY+1,C' '     TEST FOR PRIORITY CARD            R4 R2558000
         BE    *+8                 BRANCH IF NOT                        R2560000
         OI    JCTJBOPT,JCTPRICD   INDICATE PRIORITY CARD               R2562000
         MVC   JCTPRTY,RPRIORTY    MOVE PRIORITY OR BLANKS TO JCT    R4 R2563000
         L     R1,PCEDCT           R1 = ADDRESS OF INPUT DCT   @OZ32566 R2564000
         USING DCTDSECT,R1         ESTABLISH DCT ADDRESSABILITY         R2566000
         MVI   JCTPNAME,C' '                     SET PGMR NAME       R4 R2567000
         MVC   JCTPNAME+1(L'JCTPNAME-1),JCTPNAME  FLD TO BLANKS      R4 R2567200
         MVC   JCTMCLAS,DCTMCLAS   SET DEFAULT MESSAGE CLASS            R2568000
         MVC   JCTJCLAS,DCTJCLAS   SET DEFAULT JOB CLASS                R2570000
         MVC   JCTCLASS,JCTJCLAS   SET DEFAULT CLASS IN JMR             R2571000
         MVI   JCTIPRIO,C'*'       SET PRIORITY CHARACTER            R4 R2572000
         MVC   JCTROUTE,DCTNO      SET INPUT ROUTE CODE                 R2574000
         MVC   JCTINDEV,DCTDEVN    SET INPUT DEVICE NAME                R2576000
         LH    RW,$ESTIME          SET                               R4 R2580000
         ST    RW,JCTETIME          DEFAULT                          R4 R2581000
         LH    RW,$ESTLNCT           ESTIMATED                       R4 R2582000
         ST    RW,JCTESTLN            EXECUTION TIME,                R4 R2583000
         L     RW,$ESTPUN              LINE AND                      R4 R2584000
         ST    RW,JCTESTPU              PUNCH OUTPUTS                R4 R2585000
         CLI   JCTJOBID,C'J'       TEST JOB TYPE                     R4 R2586000
         BE    SKIP200             BRANCH IF NOT STC OR TSU LOGON    R4 R2587000
         MVC   JCTETIME(12),RSTUETIM  SET STC/TSU ESTIMATES          R4 R2588000
         CLC   JCTJNAME,RLOGNAME   IS THIS STC 'SYSLOG'        @OZ43877 R2588200
         BNE   SKIP200             BR IF NOT                   @OZ43877 R2588400
         MVC   JCTETIME(12),RLOGETIM  SET SYSLOG ESTIMATES     @OZ43877 R2588600
SKIP200  MVC   JCTFORMS,$STDFORM   SET STANDARD FORMS                R4 R2589000
         MVI   JCTCPYCT,1          SET DEFAULT COPY COUNT            R4 R2590000
         MVC   JCTLINCT,$LINECT    SET DEFAULT PAGE LINE COUNT       R4 R2591000
         MVC   JCTPROUT,DCTPRINT   SET PRINT AND                        R2596000
         MVC   JCTPUOUT,DCTPUNCH    PUNCH ROUTE CODES                   R2598000
*              THIS LINE DELETED BY APAR                       @OZ38058 R2602000
         MVC   JCTJMRJN,JCTJNAME   SET JMR JOB NAME                     R2606000
         MVC   JCTRDSID,$SID       SAVE SYSTEM ID FOR SMF TYPE 26       R2608000
         MVC   JCTCPUID,$SID       SET JMR CPU ID FOR SMF EXITS         R2610000
********************************************************************
*  INSERTED BY GP.  - SUBMITTER USERID PROPAGATION
********************************************************************
         CLI   JCTJOBID,C'J'       TEST JOB TYPE
         BNE   SKIP200_NOT_JOB
         CLC   JCTINDEV(6),=CL6'INTRDR'     INTERNAL READER ?
         BNE   SKIP200_NOT_JOB
         MVC   JCTUSEID(7),RIDUSER       MOVE SUBBMITTER USERID
*                                        FROM DCT TO JCT
         MVI   JCTUSEID+7,C'%'
         B     SKIP200_USERID_PROCESSED
SKIP200_NOT_JOB DS 0H
         MVC   JCTUSEID,RKBLANKS   BLANK OUT JMR USER IDENTIFICATION    R2614000
SKIP200_USERID_PROCESSED DS 0H
********************************************************************
*   NEXT LINE DELETED BY GP
********************************************************************
*        MVC   JCTUSEID,RKBLANKS   BLANK OUT JMR USER IDENTIFICATION    R2614000
********************************************************************
         MVC   JCTINDC,DCTINDC     SET JMR SMF OPTIONS FROM DCT         R2616000
         TM    PCEID,PCEINRID      TEST PROCESSOR TYPE                  R2618000
         BO    RSETINDC            BRANCH IF INTERNAL READER            R2620000
         CLI   PCEID+1,PCEXEQID    TEST PROCESSOR TYPE                  R2622000
         BE    RSETINDC            BRANCH IF EXECUTION PROCESSOR        R2624000
         TM    PCEID,PCERJEID      TEST PROCESSOR TYPE               R4 R2624800
         BZ    RSETDVTP            BRANCH IF NOT REMOTE TERMINAL     R4 R2625200
         TM    MDCTTYPE,DCTPSNA    CHECK FOR SNA REMOTE              R4 R2629100
         BO    RSETINDC            BRANCH IF SNA REMOTE              R4 R2629400
         L     R1,DCTDCB-DCTDSECT(,R1)  GET ADDRESS OF LINE DCT         R2630000
RSETDVTP L     R15,DCTDCB          GET ADDRESS OF DCB                R4 R2632000
         L     R15,DCBDEBAD-DCBDSECT(,R15)   GET ADDRESS OF DEB         R2634000
         L     R15,DEBSUCBA-DEBDSECT(,R15)   GET ADDRESS OF UCB         R2636000
         MVC   JCTRDR,UCBTYP+2-UCBDSECT(R15) SET READER DEVICE TYPE     R2638000
         EJECT                                                       R4 R2639000
RSETINDC MVC   JCTJMOPT,JCTINDC    SET SMF OPTIONS IN JMR               R2640000
         MVC   IOTID,RIOTID        SET IOT NAME                         R2642000
         LH    RW,$BUFLENG         GET LENGTH OF IOT                 R4 R2644000
         STH   RW,IOTLENG           AND STORE IN IOT                    R2646000
         MVI   IOTFLAG1,IOT1ALOC   SET UP IOT FLAGS                     R2648000
         MVC   IOTJBKEY,JCTJBKEY   MOVE JOB KEY FROM JCT TO IOT         R2650000
         MVC   IOTTRACK,JCTIOT     MOVE IOT TRACK ADDRESS TO IOT        R2652000
         L     R1,$IOTPDDB         GET OFFSET OF 1ST PDDB            R4 R2653000
         LA    RW,IOTPDBOD(,R1)    SET DISPLACEMENT                  R4 R2654000
         ST    RW,IOTPDDBP          OF FIRST AVAILABLE PDDB          R4 R2656000
         ALR   R1,RL1              POINT TO 1ST PDDB IN IOT          R4 R2657000
         MVC   0*PDBLENG(1*PDBLENG,R1),RPDBMODL  INITIALIZE          R4 R2658000
         MVC   1*PDBLENG(2*PDBLENG,R1),0(R1)      FIRST              R4 R2658100
         MVC   3*PDBLENG(2*PDBLENG,R1),0(R1)       SIX               R4 R2658200
         MVC   5*PDBLENG(1*PDBLENG,R1),0(R1)        PDDB'S           R4 R2658300
         MVI   PDBFLAG1+0-PDBDSECT+IOTPDBOJ(R1),PDB1LOG  SET         R4 R2664000
         MVI   PDBRECFM+0-PDBDSECT+IOTPDBOJ(R1),DCBRECF   UP         R4 R2666000
         MVI   PDBLRECL+1-PDBDSECT+IOTPDBOJ(R1),80         JCL       R4 R2668000
         MVI   PDBDSKEY+1-PDBDSECT+IOTPDBOJ(R1),PDBINJCL    PDDB     R4 R2670000
         OI    PDBFLAG1+0-PDBDSECT+IOTPDBOL(R1),PDB1LOG        SET   R4 R2672000
         MVI   PDBRECFM+0-PDBDSECT+IOTPDBOL(R1),DCBRECU+DCBRECCM UP  R4 R2674000
         MVI   PDBLRECL+1-PDBDSECT+IOTPDBOL(R1),133         JOB LOG  R4 R2676000
         MVI   PDBDSKEY+1-PDBDSECT+IOTPDBOL(R1),PDBOUHJL        PDDB R4 R2678000
         MVI   PDBRECFM+0-PDBDSECT+IOTPDBOI(R1),DCBRECF  SET UP      R4 R2680000
         MVI   PDBLRECL+1-PDBDSECT+IOTPDBOI(R1),90        JCL IMAGES R4 R2682000
         MVI   PDBDSKEY+1-PDBDSECT+IOTPDBOI(R1),PDBOUJCI   PDDB      R4 R2684000
         MVI   PDBRECFM+0-PDBDSECT+IOTPDBOM(R1),DCBRECV+DCBRECCA SET R4 R2686000
         MVI   PDBLRECL+1-PDBDSECT+IOTPDBOM(R1),164        UP SYSTEM R4 R2688000
         MVI   PDBDSKEY+1-PDBDSECT+IOTPDBOM(R1),PDBOUMSG   MSGS PDDB R4 R2690000
         OI    PDBFLAG1+0-PDBDSECT+IOTPDBOT(R1),PDB1NSOT  SET UP INT R4 R2692000
         MVI   PDBDSKEY+1-PDBDSECT+IOTPDBOT(R1),PDBINTXT   TEXT PDDB R4 R2694000
         OI    PDBFLAG1+0-PDBDSECT+IOTPDBON(R1),PDB1NSOT  SET UP JOB R4 R2696000
         MVI   PDBDSKEY+1-PDBDSECT+IOTPDBON(R1),PDBINJNL   JNL PDDB  R4 R2698000
         CLI   PCEID+1,PCEXEQID    TEST PROCESSOR TYPE                  R2700000
         BE    RJOBRET             BRANCH IF EXECUTION PROCESSOR        R2702000
         MVC   RDRDSKEY,RONE+2     SET JCL DATA KEY                     R2704000
        $TRACK IOTMSTAB            GET TRACK ADDR FOR 1ST JCL BLOCK  R4 R2704100
         LR    RW,R1               RW = FIRST TRACK ADDRESS             R2708000
         BAL   RL2,RGETBUF         GET FIRST OUTPUT BUFFER              R2710000
         L     R1,$IOTPDDB         GET OFFSET OF 1ST PDDB            R4 R2711000
         ST    RW,PDBMTTR-PDBDSECT+IOTPDBOJ(R1,RL1)  SET JCL TRACK   R4 R2712000
         SPACE 2                                                        R2712800
         ST    JCT,PCEBUFAD        SET JCT BUFFER ADDRESS               R2713000
         MVC   PCESEEK,QUETRAK+JCTWORK  SET JCT TRACK ADDRESS           R2713200
         ST    SAVE,PCEIOEWF       PREVENT BUFFER RELEASE               R2713400
         LA    R1,PCEDADCT         GET ADDRESS OF DIRECT-ACCESS DCT     R2713600
        $EXCP  (R1)                INITIATE WRITE OF JCT                R2713800
         ST    RL1,PCEBUFAD        SET IOT BUFFER ADDRESS               R2714000
         MVC   PCESEEK,IOTTRACK    SET IOT TRACK ADDRESS                R2714200
         LA    R1,PCEDADCT         GET ADDRESS OF DIRECT-ACCESS DCT     R2714400
        $EXCP  (R1)                INITIATE WRITE OF IOT                R2714600
         SLR   R1,R1               RESET DIRECT-ACCESS                  R2714800
         ST    R1,PCEIOEWF          EVENT WAIT FIELD                    R2715000
         DROP  RL1                 DROP IOT ADDRESSABILITY              R2715200
         SPACE 2                                                        R2716000
         MVC   72(8,RPI),JCTJOBID  SET HASP JOB ID IN COLS 73-80        R2718000
         TM    PCEID,PCEINRID      IS THIS AN INTERNAL READER           R2720000
         BZ    RJOBSCAN            BRANCH IF NOT                        R2722000
         OI    JCTJBOPT,JCTINRDR   INDICATE INTERNAL READER             R2724000
         L     R1,PCEDCT           R1 = ADDRESS OF INPUT DCT   @OZ32566 R2726000
         MVC   RIDJOBID(3),72(RPI)      SET JOB NUMBER IN DCT           R2728000
         PACK  RTEMP(3),75(5,RPI)        CHANGING                       R2730000
         UNPK  RIDJOBID+3(5),RTEMP(3)     BLANKS TO ZEROS               R2732000
         DROP  R1                  DROP DCT ADDRESSABILITY              R2734000
         SPACE 2                                                        R2736000
RJOBSCAN L     RW,RSAVE1           RESTORE POINTER FOR JOB CARD SCAN    R2738000
         NI    RPASPROC,255-$RPASFND-$RJOBERR-$RJOBECD-$RJOBFND        *R2738010
                                   SET PASSWORD PROCESS FIELD  @OZ38384 R2738020
         OI    RPASPROC,$RJOBFND   JOB CARD BEING PROCESSED    @OZ38384 R2738030
         LA    R14,1               SET INCREMENT                        R2740000
         LA    R15,65(,RPI)         AND LIMIT FOR SCAN                  R2742000
         LA    R1,JCTWORK-1        ASSUME                               R2744000
         ST    R1,RSAVE1            NO ACCOUNTING FIELD                 R2746000
         BXH   RW,R14,RJOBCEND     FIND                                 R2748000
         CLI   6(RW),C' '           START OF                            R2750000
         BE    *-8                   ACCOUNTING FIELD                   R2752000
         SPACE 2                                                        R2754000
         LA    R0,L'JCTWORK        GET LENGTH OF ACCOUNTING FIELD AREA  R2756000
         LA    R1,JCTWORK          GET ADDRESS OF ACCOUNTING FIELD AREA R2758000
         BAL   RL1,RJSCAN          SCAN ACCOUNTING FIELD                R2760000
         BCT   R1,RJOBACCT         LEGITIMATE ACCOUNTING FIELD          R2762000
         BCT   RW,RJOBSRCH         SCAN KEYWORDS                        R2764000
         SPACE 2                                                        R2766000
RJOBACCT ST    R1,RSAVE1           SAVE END ADDRESS FOR LATER SCAN      R2768000
         LA    R0,L'JCTPNAME       GET LENGTH OF PROGRAMMER NAME AREA   R2770000
         LA    R1,JCTPNAME         GET ADDRESS OF PROGRAMMER NAME AREA  R2772000
         LA    RL1,RJSCAN          SCAN PROGRAMMER NAME                 R2774000
         BALR  RL1,RL1              INDICATING APOSTROPHE COMPRESSION   R2776000
         B     RJOBKYWD            BR IF VALID PROGRAMMER NAME FIELD R4 R2778000
         MVI   JCTPNAME,C' '                     RESET PGMR NAME     R4 R2780000
         MVC   JCTPNAME+1(L'JCTPNAME-1),JCTPNAME  FLD TO BLANKS      R4 R2780200
         SPACE 1                                                     R4 R2781000
RJOBKYWD BCTR  RW,0                BACK UP ONE CHARACTER             R4 R2782000
         SPACE 2                                                        R2784000
RJOBSRCH BCTR  RW,0                BACK UP                              R2786000
         BCTR  RW,0                 TWO CHARACTERS                      R2788000
         LA    R15,62(,RPI)        SET NEW END-OF-CARD LIMIT         R4 R2788100
         SPACE 1                                                     R4 R2791000
RJOBKEY  CLI   8(RW),C' '          TEST CURRENT CHARACTER               R2792000
         BE    RJOBLANK            BRANCH IF BLANK                      R2794000
         CLI   8(RW),C'='          TEST CURRENT CHARACTER               R2796000
         BNE   RJOBINCR            BRANCH IF NOT EQUAL                  R2798000
         SPACE 2                                                        R2804000
         CLC   3(5,RW),RCLASS      TEST KEYWORD                         R2806000
         BNE   RJOBTYPR            BRANCH IF NOT 'CLASS'                R2808000
         CLI   9(RW),C'A'          TEST NEXT CHARACTER               R4 R2808500
         BL    RJOBINCR            IGNORE IF NOT LEGAL CLASS         R4 R2809000
         SR    R1,R1               CLEAR REGISTER              @OZ48782 R2809100
         IC    R1,9(,RW)           GET JOB CLASS               @OZ48782 R2809200
         AL    R1,=A(RDCAT)        GET ADDRESS OF CLASS TABLE  @OZ48782 R2809300
         ICM   R1,1,0(R1)          IS CLASS VALID...           @OZ48782 R2809400
         BZ    RJOBINCR            BRANCH IF INVALID CLASS     @OZ48782 R2809500
         CLC   0(3,RW),RMSG        TEST KEYWORD                         R2810000
         BE    RJOBMSGC            BRANCH IF 'MSGCLASS'                 R2812000
         CLI   JCTJCLAS,CATSTCCL   IF STARTED TASK,            @OZ44737 R2812100
         BE    RJOBINCR             OR                         @OZ44737 R2812200
         CLI   JCTJCLAS,CATTSUCL     TSU LOGON,                @OZ44737 R2812300
         BE    RJOBINCR               IGNORE CLASS PARAMETER   @OZ44737 R2812400
         MVC   JCTJCLAS,9(RW)      SET JOB CLASS IN JCT                 R2814000
         MVC   JCTCLASS,JCTJCLAS   SET CLASS IN JMR                     R2815000
         B     RJOBINCR            FIND NEXT KEYWORD                    R2816000
         SPACE 2                                                        R2818000
RJOBMSGC MVC   JCTMCLAS,9(RW)      SET MSGCLASS IN JCT                  R2820000
         SPACE 1                                                     R4 R2822000
RJOBTYPR CLC   2(6,RW),RTYPRUN     TEST KEYWORD                         R2824000
         BNE   RJOBNOTI            BRANCH IF NOT 'TYPRUN'               R2826000
         CLC   9(4,RW),RHOLD       TEST VALUE                           R2828000
         BNE   RJOBTRJH            BRANCH IF NOT 'TYPRUN=HOLD'       R4 R2830000
         OI    JCTJBOPT,JCTTHOLD   INDICATE 'TYPRUN=HOLD' IN JCT        R2832000
         B     RJOBINCR            ADVANCE TO NEXT PARAMETER   @OZ24801 R2832050
         SPACE 1                                                     R4 R2832100
RJOBTRJH CLC   9(7,RW),RJCLHOLD    TEST VALUE                        R4 R2832200
         BNE   RJOBTRSC            BRANCH IF NOT 'TYPRUN=JCLHOLD'    R4 R2832300
         OI    RDRSW2,RJCLH        INDICATE 'TYPRUN=JCLHOLD'         R4 R2832400
         B     RJOBINCR            ADVANCE TO NEXT PARAMETER   @OZ24801 R2833000
         SPACE 1                                                     R4 R2834000
RJOBTRSC CLC   9(4,RW),RSCAN       TEST VALUE                           R2836000
         BNE   RJOBTRCP            BRANCH IF NOT 'TYPRUN=SCAN'          R2838000
         OI    JCTJOBFL,JCTTSCAN   INDICATE 'TYPRUN=SCAN' IN JCT        R2840000
         B     RJOBINCR            ADVANCE TO NEXT PARAMETER   @OZ24801 R2840100
         SPACE 1                                                     R4 R2840200
RJOBTRCP CLC   9(4,RW),RCOPY       TEST VALUE                           R2840300
         BNE   RILLJOBC            TYPRUN='XXXX' MISPELLED     @OZ24801 R2840400
         MVI   JCTCNVRC+3,JCTCOK   CLEAR CONVERTER RTN CODE    @OZ25420 R2840500
         OI    JCTJOBFL,JCTTCOPY   INDICATE 'TYPRUN=COPY' IN JCT        R2840600
         B     RJOBINCR            ADVANCE TO NEXT PARAMETER   @OZ33013 R2840650
         SPACE 1                                                     R4 R2840700
RJOBNOTI CLC   2(6,RW),RNOTIFY     TEST KEYWORD                         R2840800
         BNE   RJOBPRTY            BRANCH IF NOT 'NOTIFY'            R4 R2840900
         CLI   9(RW),C'$'          CHECK FOR $                       R4 R2841000
         BE    RJBNOTFY            VALID USERID, CONTINUE            R4 R2841100
         CLI   9(RW),C'@'          CHECK FOR @                       R4 R2841200
         BE    RJBNOTFY            VALID USERID, CONTINUE            R4 R2841300
         CLI   9(RW),C'#'          CHECK FOR #                       R4 R2841400
         BE    RJBNOTFY            VALID USERID, CONTINUE            R4 R2841500
         CLI   9(RW),C'A'          CHECK FOR ALPHAMERIC              R4 R2841600
         BL    RJOBINCR            IGNORE IF NO                      R4 R2841700
         CLI   9(RW),C'Z'          TEST NEXT CHARACTER                  R2841800
         BH    RJOBINCR            BRANCH IF ILLEGAL USERID             R2841900
         SPACE 1                                                     R4 R2842000
RJBNOTFY MVC   RUSERID(8),9(RW)    MOVE USERID TO WORK AREA          R4 R2842100
         MVI   RUSERID+8,X'BF'     ADD TERMINATOR CHARACTER             R2842200
         LA    R1,RUSERID+1        PREPARE TO SCAN USERID               R2842300
         SPACE 1                                                     R4 R2842400
RJOBNOTS CLI   0(R1),C','          TEST NEXT CHARACTER                  R2842500
         BE    RJOBNOTC            BRANCH IF COMMA                      R2842600
         TM    0(R1),X'BF'         TEST AGAIN                           R2842700
         BO    RJOBINCR            ILLEGAL IF TERMINATOR CHARACTER      R2842800
         LA    R1,1(,R1)           STEP TO NEXT CHARACTER               R2842900
         BNZ   RJOBNOTS            SCAN NEXT CHARACTER                  R2843000
         SPACE 1                                                     R4 R2843100
RJOBNOTC MVI   0(R1),C' '          BLANK OUT                            R2843200
         MVC   1(5,R1),0(R1)        REST OF USERID                      R2843300
         MVC   JCTTSUID,RUSERID    MOVE USERID TO JCT                   R2843400
         MVC   JCTTSUAF,$SIDAFF    MOVE INPUT AFFINITY TO JCT           R2843500
         SPACE 1                                                     R4 R2843600
RJOBPRTY CLC   4(4,RW),RPRTY       TEST KEYWORD                      R4 R2843700
         BNE   RJOBPASS            BRANCH IF NOT 'PRTY'              R4 R2843800
         LA    R1,RJOBINCR         SET IGNORE/EXIT ADDRESS           R4 R2843900
         TM    $RUNOPTS,$PRTYOPT   IGNORE PRTY FIELD IF              R4 R2844000
         BZR   R1                    INIT OPTION NOT SELECTED        R4 R2844100
         TM    JCTJBOPT,JCTPRICD   IGNORE JOB CARD PRTY IF           R4 R2844200
         BNZR  R1                    /*PRIORITY CARD PRESENT         R4 R2844300
         CLI   9(RW),C'0'          IGNORE IF                         R4 R2844400
         BLR   R1                    FIRST DIGIT                     R4 R2844500
         CLI   9(RW),C'9'            NOT ZERO                        R4 R2844600
         BHR   R1                    THRU NINE                       R4 R2844700
         CLI   10(RW),C' '         HANDLE 2-DIGIT                    R4 R2844800
         BE    SKIP210               FIELD IF NEXT                   R4 R2844900
         CLI   10(RW),C','           CHAR IS NOT                     R4 R2845000
         BNE   RJOBPRT2              BLANK OR COMMA                  R4 R2845100
SKIP210  MVC   RPRIORTY+1(1),9(RW) SAVE 1-DIGIT PRIORITY             R4 R2845200
         B     RSETP               MOVE DATA TO JCT                  R4 R2845300
         SPACE 1                                                     R4 R2845400
RJOBPRT2 CLI   11(RW),C' '         2-DIGIT PRTY                      R4 R2845500
         BE    SKIP220               MUST BE                         R4 R2845600
         CLI   11(RW),C','           FOLLOWED BY                     R4 R2845700
         BNER  R1                    BLANK OR COMMA                  R4 R2845800
SKIP220  CLI   10(RW),C'0'         IGNORE IF                         R4 R2845900
         BLR   R1                    SECOND DIGIT                    R4 R2846000
         CLI   10(RW),C'9'           NOT ZERO                        R4 R2846100
         BHR   R1                    THRU NINE                       R4 R2846200
         CLC   =C'15',9(RW)        IGNORE IF PRTY                    R4 R2846300
         BL    RILLJOBC            IF OVER 15, KILL JOB        @OZ27970 R2846400
         MVC   RPRIORTY(2),9(RW)   SAVE 2-DIGIT PRIORITY             R4 R2846500
         SPACE 1                                                     R4 R2846600
RSETP    MVC   JCTPRTY,RPRIORTY    MOVE EBCDIC PRTY TO JCT,          R4 R2846700
         OI    JCTJBOPT,JCTPRICD     SET 'FORCE PRTY' FLAG           R4 R2846800
         BR    R1                  CONTINUE SCAN                     R4 R2846900
         EJECT                                                       R4 R2847000
*********************************************************************** R2847100
*                                                                     * R2847200
*        PASSWORD PROCESSING                                          * R2847300
*              JCT FIELDS TO BE ZERO IF NO PASSWORD                   * R2847400
*              PASSWORDS X'ED OUT IN OUTPUT                           * R2847500
*                                                                     * R2847600
*********************************************************************** R2847700
         SPACE   2                                                   R4 R2847800
RJOBPASS CLC   0(8,RW),=CL8'PASSWORD'   IF PARAMETER PASSWORD        R4 R2847900
         BNE   RJOBINCR            BRANCH IF NOT PASSWORD            R4 R2848000
         SPACE 1                                                     R4 R2848100
RPASSWRD LA    RL1,9(,RW)          SAVE RW POINTER                   R4 R2848200
         MVI   RLSAVE1,RPASINTM    ZERO PASSWORD FLAG BYTE           R4 R2848300
         LA    R1,JCTPASS          GET ADDRESS OF PASSWORD FIELD     R4 R2848400
         LA    RL2,L'JCTPASS       GET THE LENGTH FOR PASSWORD       R4 R2848500
         SPACE 1                                                     R4 R2848600
         LR    R0,RL2              SAVE SIZE                         R4 R2848700
         OI    RPASPROC,$RPASFND   PASSWORD BEING PROCESSED    @OZ38384 R2848710
*              THIS LINE DELETED BY APAR NUMBER                @OZ50169 R2848720
*              THIS LINE DELETED BY APAR NUMBER                @OZ50169 R2848730
         SPACE 1                                                     R4 R2848800
RPASBYTE CLI   0(RL1),C'('         IF BYTE IS LEFT PAREN             R4 R2848900
         BE    RPLPAREN            BRANCH IF LEFT PAREN              R4 R2849000
         CLI   0(RL1),C','         IF BYTE IS A COMMA                R4 R2849100
         BE    RPCOMMA             BRANCH IF BYTE A COMMA            R4 R2849200
         CLI   0(RL1),C' '         IF BYTE A BLANK                   R4 R2849300
         BE    RPBLANK             BRANCH IF BYTE IS A BLANK         R4 R2849400
         CLI   0(RL1),C')'         IF BYTE A RIGHT PAREN             R4 R2849500
         BE    RPRPAREN            BRANCH IF RIGHT PAREN             R4 R2849600
         CLI   0(RL1),C''''        IF BYTE AN APOSTROPHE             R4 R2849700
         BE    RPASSERR            BRANCH TO ERROR CONDITION         R4 R2849800
         MVC   0(1,R1),0(RL1)      MOVE BYTE TO JCT                  R4 R2849900
         MVI   0(RL1),C'X'         SET OUTPUT TO X'S                 R4 R2850000
         ST    RBI,RTEMP           SAVE REG                    @OZ30155 R2850020
         LA    RBI,70(RPI)         POINT TO LAST OPERAND COL   @OZ30155 R2850040
         SR    RBI,RL1             SWAP REGS                   @OZ30155 R2850060
         BM    RBADPASS            BR IF IT STARTS IN COL 72   @OZ50169 R2850072
*              THIS LINE DELETED BY APAR NUMBER                @OZ50169 R2850074
*              THIS LINE DELETED BY APAR NUMBER                @OZ50169 R2850076
         EX    RBI,RXOUTMVC       SHIFT OUT THE X              @OZ30155 R2850080
         L     RBI,RTEMP           RESTORE THE REG             @OZ30155 R2850100
         MVI   70(RPI),X'40'       MOVE A BLANK TO THE END     @OZ30155 R2850120
         LA    R1,1(R1)            INCREMENT JCT FIELD PTR           R4 R2850200
         PRINT OFF       THIS SECTION DELETED BY APAR NUMBER   @OZ50169 R2850210
*              THIS LINE DELETED BY APAR NUMBER                @OZ50169 R2850220
*              THIS LINE DELETED BY APAR NUMBER                @OZ50169 R2850230
*              THIS LINE DELETED BY APAR NUMBER                @OZ50169 R2850240
*              THIS LINE DELETED BY APAR NUMBER                @OZ50169 R2850250
*              THIS LINE DELETED BY APAR NUMBER                @OZ50169 R2850260
*              THIS LINE DELETED BY APAR NUMBER                @OZ50169 R2850270
         PRINT ON        THIS SECTION DELETED BY APAR NUMBER   @OZ50169 R2850280
         BCT   RL2,RPASBYTE        BRANCH TO NEXT BYTE               R4 R2850300
         B     RPASSCH1            BR TO ERROR PROCESSING            R4 R2850400
RBADPASS DS    0H                                              @OZ50169 R2850402
         MVI   0(RL1),X'40'        SET OUTPUT TO BLANK         @OZ50169 R2850404
         L     RBI,RTEMP           RESTORE THE REG             @OZ50169 R2850406
         B     RILLJOBC            CANCEL THE JOB FROM READER  @OZ50169 R2850408
         PRINT OFF       THIS SECTION DELETED BY APAR NUMBER   @OZ50169 R2850410
*              THIS LINE DELETED BY APAR NUMBER                @OZ50169 R2850412
*              THIS LINE DELETED BY APAR NUMBER                @OZ50169 R2850414
*              THIS LINE DELETED BY APAR NUMBER                @OZ50169 R2850416
*              THIS LINE DELETED BY APAR NUMBER                @OZ50169 R2850418
*              THIS LINE DELETED BY APAR NUMBER                @OZ50169 R2850420
*              THIS LINE DELETED BY APAR NUMBER                @OZ50169 R2850422
*              THIS LINE DELETED BY APAR NUMBER                @OZ50169 R2850424
         PRINT ON        THIS SECTION DELETED BY APAR NUMBER   @OZ50169 R2850426
         SPACE 1                                               @OZ50169 R2850428
RXOUTMVC MVC   0(*-*,RL1),1(RL1)  **EXECUTE ONLY**             @OZ30155 R2850450
         SPACE 1                                                     R4 R2850500
RPLPAREN TM    RLSAVE1,RPASLPRM    IF LEFT PAREN FLAG ON             R4 R2850600
         BO    RPASSCHK            BRANCH TO ERROR PROCESSING        R4 R2850700
         CR    RL2,R0              IF LPAREN THE FIRST BYTE          R4 R2850800
         BNE   RPASSCHK            ERROR IF NOT FIRST FIELD          R4 R2850900
         LA    RL2,1(RL2)          INCREMENT FOR PAREN               R4 R2851000
         OI    RLSAVE1,RPASLPRM    TURN ON LEFT PAREN FLAG           R4 R2851100
         LA    RL1,1(RL1)          INCREMENT PAST LEFT PAREN         R4 R2851200
         B     RPASBYTE            BRANCH TO GET NEXT BYTE           R4 R2851300
         SPACE 1                                                     R4 R2851400
RPCOMMA  TM    RLSAVE1,RPASLPRM+RPASCOMM   IF LEFT PAREN AND COMMA   R4 R2851500
         BZ    RPASSEND            BRANCH TO END PASSWORD PROC       R4 R2851600
         BNM   RPASSCHK            BR IF LPAREN ON AND COMMA ON      R4 R2851700
         OI    RLSAVE1,RPASCOMM    TURN ON COMMA FLAG                R4 R2851900
         LA    RL1,1(RL1)          POINT TO NEXT BYTE                R4 R2852000
         LA    R0,71(RPI)          POINT TO CONTINUATION COLUMN      R4 R2852100
         CR    RL1,R0              IF NEXT COLUMN CONTINUATION       R4 R2852200
         BNE   RPASNPAS            BR NOT CONTINUATION COLUMN        R4 R2852300
RPASCONT ST    R1,RLSAVE2          SAVE JCT PRT                      R4 R2852400
         BAL   RL1,RCONTNUE        BR TO GET CONTINUATION CARD       R4 R2852500
         B     RILLJOBC            +0, ERROR RETURN TO TERMINATE     R4 R2852600
*                                  +4, NO ERROR RETURN               R4 R2852700
         NI    RLSAVE1,X'FF'-RPASCOMM  TURN OFF CONTINUE FLAG        R4 R2852800
         L     R1,RLSAVE2          GET JCT PRT                       R4 R2852900
         LA    R15,65(,RPI)        SET END OF CARD PRT               R4 R2853000
         LA    RL1,6(,RW)          SET SCAN ADDRESS                  R4 R2853100
RPASNPAS LA    R1,JCTNUPAS         GET ADDRESS OF NEW PASS FIELD     R4 R2853200
         LA    RL2,L'JCTNUPAS      GET LENGTH OF NEW PASS FIELDS     R4 R2853300
         B     RPASBYTE            RETURN TO SEARCH LOOP             R4 R2853400
         SPACE 1                                                     R4 R2853500
RPBLANK  TM    RLSAVE1,RPASLPRM+RPASCOMM   IF LEFT PAREN OR COMMA    R4 R2853600
         BNO   RPASSEND            BRANCH TO END PASSWORD PRCESSING  R4 R2853700
         BO    RPASCONT            BR TO GET CONTINUE                R4 R2853800
         BM    RPASSCHK            BRANCH TO DETERMINE END OF CARD   R4 R2853900
         SPACE 1                                                     R4 R2854000
RPASSERR OI    RLSAVE1,RPASERRM    SET ERROR FLAG ON                 R4 R2854100
         SPACE 1                                                     R4 R2854200
RPASSCHK LA    RL1,1(RL1)          STEP TO NEXT CHARACTER            R4 R2854300
         NI    RLSAVE1,X'FF'-(RPASLPRM+RPASCOMM) TURN OFF PAREN,COMMAR4 R2854400
RPASSCH1 CR    RL1,R15             IF END OF CARD                    R4 R2854500
         BNL   RPASSEND            BRANCH TO END PROCESSING          R4 R2854600
         LA    R1,JCTWORK          GET DUMMY FOR PASSWORD OVERFLOW   R4 R2854700
         LA    RL2,8               GET NEW SCAN COUNT                R4 R2854800
         B     RPASBYTE            BR TO CONTINUE PASSWORD CHECK     R4 R2854900
         SPACE 1                                                     R4 R2855000
RPRPAREN TM    RLSAVE1,RPASLPRM    IF LEFT PAREN FLAG ON             R4 R2855100
         BNO   RPASSCHK            BRANCH TO ASSURE END OF PASSWORD  R4 R2855200
         SPACE 1                                                     R4 R2855300
RPASSEND TM    RLSAVE1,RPASERRM    IF ERROR FOUND IN PROCESS   @OZ50169 R2855400
*              THIS LINE DELETED BY APAR NUMBER                @OZ50169 R2855450
         BO    RILLJOBC            CANCEL FOR BAD JOB CARD           R4 R2855500
         CLI   JCTPASS,X'00'       IF CURRENT PASSWORD NOT PRESENT   R4 R2855600
         BE    RPASCNEW            BR ON NO CURRENT PASSWORD         R4 R2855700
         OC    JCTPASS,=8X'40'     SET ALL ZEROES EQUAL TO BLANKS    R4 R2855800
RPASCNEW CLI   JCTNUPAS,X'00'      IF FIELD NOT SPECIFIED            R4 R2855900
         BE    RJOBINCR            LEAVE UNSPECIFIED FIELD ZERO      R4 R2856000
         OC    JCTNUPAS,=8X'40'    SET ZEROES TO BLANKS              R4 R2856100
RPASLPRM EQU   X'80'               LEFT PAREN MASK                   R4 R2856200
RPASCOMM EQU   X'40'               COMMA MASK                        R4 R2856300
RPASINTM EQU   X'00'               INITIALIZATION MASK               R4 R2856400
RPASERRM EQU   X'01'               PASSWORD ERROR MASK               R4 R2856500
         SPACE 2                                                     R4 R2856600
RJOBINCR BXLE  RW,R14,RJOBKEY      ADVANCE TO NEXT COLUMN               R2856700
         SPACE 1                                                     R4 R2856800
RJOBLANK CLI   7(RW),C','          TEST LAST COLUMN                     R2856900
         BE    RPASECNM            BRANCH IF CONT. INDICATED   @OZ38384 R2856910
         OI    RPASPROC,$RJOBECD   END OF CARD MET             @OZ38384 R2856920
         NI    RPASPROC,255-$RJOBFND END OF JOB CARD PROC.     @OZ38384 R2856930
         TM    RPASPROC,$RJOBERR   IF JOB CARD ILLEGAL         @OZ38384 R2856940
         BO    RILLJOBC            CONTINUE OUTPUT PROCESSING  @OZ38384 R2856950
         B     RJOBCEND            DONE IF NO CONT. INDICATED  @OZ38384 R2857000
RPASECNM BAL   RL1,RCONTNUE        GET CONTINUATION CARD       @OZ38384 R2857100
         B     RILLJOBC            BRANCH IF ILLEGAL CONTINUATION       R2857200
         B     RJOBSRCH            NORMAL RETURN, CONTINUE SCAN         R2857300
         EJECT                                                       R4 R2857400
RJOBCEND L     RW,PCEDCT           RW = ADDRESS OF INPUT DCT   @OZ32566 R2858000
         USING DCTDSECT,RW         ESTABLISH DCT ADDRESSABILITY         R2860000
         MVC   RMESSAGE(L'RONMSG),RONMSG     SET UP SIGN-ON MESSAGE     R2862000
         MVC   RMESSAGE+5(8),DCTDEVN         ADD DEVICE NAME            R2864000
         MVC   RMESSAGE+17(20),JCTPNAME      ADD PROGRAMMER NAME        R2866000
         TM    PCEID,PCERJEID      TEST PROCESSOR TYPE                  R2870000
         BZ    RNOTRJE3            BRANCH IF NOT REMOTE TERMINAL        R2872000
         ICM   R1,7,DCTDCB+1       GET LINE DCT PTR            @OZ31782 R2874000
         BZ    RDREND              NO LINE DCT PTR, FREE RDR   @OZ31782 R2874100
         L     R1,MDCTRAT-DCTDSECT(,R1)  GET ADDRESS OF RAT             R2876000
         SLR   LINK,LINK                     CLEAR AND INSERT           R2878000
         ICM   LINK,2,RATCONRT+1-RATDSECT(R1) REMOTE CONSOLE ROUTE CODE R2880000
         LA    R0,L'RONMSG+20(,LINK)  ADD MESSAGE LENGTH                R2882000
        $WTO   RMESSAGE,(R0),JOB=YES,               ISSUE MESSAGE TO   CR2884000
               RMT=YES,CLASS=$ACTION,PRI=$ST         REMOTE TERMINAL R4 R2886000
         SPACE 1                                                     R4 R2888000
RNOTRJE3 NULL                      *                                 R4 R2890000
        $WTO   RMESSAGE,L'RONMSG+20,JOB=YES,                ISSUE      CR2892000
               ROUTE=$LOG+$UR,CLASS=$ACTION,PRI=$ST          MESSAGE    R2894000
         SPACE 2                                                        R2896000
         IC    R1,JCTJCLAS         GET JOB CLASS                        R2898000
         N     R1,RJCIMASK         CONVERT TO JOB CLASS INDEX           R2900000
         SLL   R1,5                MULTIPLY BY 32                       R2902000
         AL    R1,$CATABLE         GET ADDRESS OF CAT ELEMENT           R2904000
         USING CATDSECT,R1         ESTABLISH CAT ADDRESSABILITY         R2906000
         MVC   JCTSMFLG,CATSMFLG   SET HASP SMF FLAGS                   R2908000
         OC    JCTJOBFL(2),CATJOBFL  SET JOB FLAGS AND OPTIONS          R2910000
         NI    JCTJBOPT,255-JCTQHELD  RESET QUEUE HELD INDICATOR        R2912000
*              THIS LINE DELETED BY APAR                       @OZ38058 R2914000
         DROP  R1                  DROP CAT ADDRESSABILITY              R2916000
         SPACE 2                                                        R2918000
         TM    JCTJOBFL,JCTTCOPY   TEST JOB FLAGS                       R2918500
         BZ    *+8                 BRANCH IF NOT 'TYPRUN=COPY'          R2919000
         OI    RDRSW2,RTPCPY       SET TYPRUN=COPY FLAG.       @OZ48524 R2919500
         TM    DCTFLAGS,DCTHOLDJ   TEST DEVICE COMMANDS              R4 R2920000
         BZ    RNOTHELD            BRANCH IF DEVICE IS NOT 'HELD'    R4 R2922000
         OI    JCTJBOPT,JCTTHOLD   SIMULATE 'TYPRUN=HOLD'            R4 R2924000
         DROP  RW                  DROP DCT ADDRESSABILITY           R4 R2926000
         EJECT                                                       R4 R2928000
RNOTHELD TM    $RUNOPTS,$XBATCH    IF NO EXECUTION BATCHING,         R4 R2946000
         BZ    RXBCTEST             DON'T TEST JOB NAME              R4 R2948000
         CLC   $XBATCHN,JCTJNAME   TEST JOB NAME                     R4 R2950000
         BNE   RXBCTEST            BRANCH IF NOT RESERVED NAME          R2952000
         CLI   JCTJOBID,C'J'       ALLOW RESERVED NAME               R4 R2952100
         BNE   RXBCTEST             IF STARTED TASK OR TSU LOGON     R4 R2952200
         BAL   RL1,RPUT            ADD JOB CARD TO OUTPUT FILE          R2958000
         OI    RCARDLRC,LRC1CCTL+LRC1TASA  SET ASA CARRIAGE CONTROL  R4 R2960000
         MVI   RDRCCTL,C'0'        FORCE DOUBLE SPACE                R4 R2962000
         MVI   0(RPI),C'*'         FILL OUT CARD IMAGE               R4 R2964000
         MVC   1(78,RPI),0(RPI)     WITH ASTERISKS                   R4 R2966000
         MVI   79(RPI),C' '        ADD TRAILING BLANK                R4 R2967000
         MVC   (79-L'RXBERMSG)/2(L'RXBERMSG,RPI),RXBERMSG  SET MSG   R4 R2968000
         BAL   RL1,RPUT            ADD ERROR MESSAGE TO OUTPUT FILE     R2970000
         BAL   RL1,RJOBKILL        KILL JOB                             R2972000
        $RETURN                    RETURN TO MAIN PROCESSOR             R2974000
         SPACE 1                                                     R4 R2974100
RXBCTEST TM    JCTJBOPT,JCTXBACH   TEST JOB OPTIONS                     R2978000
         BZ    RNOTXBC             BRANCH IF NOT XBATCH JOB          R4 R2980000
         OI    RDRSW,RXBJOBSW      SET EXECUTION BATCHING SWITCH        R2982000
         MVI   JCTCNVRC+3,JCTCOK   CLEAR CONVERTER RTN CODE    @OZ25420 R2984000
         TM    JCTJBOPT,JCTTHOLD   CHECK FOR 'TYPRUN=HOLD',          R4 R2988000
         BZ    RNOTXBC               BRANCH IF NOT                   R4 R2988100
         XI    JCTJBOPT,JCTTHOLD   FORCE 'TYPRUN=HOLD' TO BE         R4 R2988200
         OI    RDRSW2,RJCLH          'TYPRUN=JCLHOLD' FOR XBATCH     R4 R2988300
         SPACE 1                                                     R4 R2988400
RNOTXBC  NI    RDRSW,255-RJFLUSH   TURN OFF FLUSH SWITCH             R4 R2988500
         CLI   $RJOBOPT,4          TEST JOB CARD SCAN OPTION         R4 R2990000
         BNL   RJOBRET             BR IF 4 OR GREATER                R4 R2991000
         CLI   JCTJOBID,C'J'       DO NOT SCAN ACCOUNTING PARAMETERS    R2992000
         BNE   RJOBRET              IF STARTED TASK OR TSU LOGON        R2994000
         LA    R0,JCTWORK-1        COMPUTE LENGTH                       R2996000
         SL    R0,RSAVE1            OF ACCOUNTING FIELD                 R2998000
*              THIS LINE DELETED BY APAR NUMBER                @OZ41201 R2998010
         LA    R1,JCTWORK          GET ADDRESS OF ACCOUNTING FIELD      R3000000
         LA    RW,JCTJMR           GET ADDRESS OF JMR                   R3002000
        $XCTL  HASPRSCN            SCAN ACCOUNTING FIELD PARAMETERS     R3004000
         EJECT                                                          R3014000
RILLJOBC NULL                      ILLEGAL JOB CARD                     R3016000
         TM    RPASPROC,$RPASFND   IF PASSWORD PROCESSED       @OZ38384 R3016010
         BO    RILLJBCA            CONTINUE OUTPUT PROCESSING  @OZ38384 R3016020
         TM    RPASPROC,$RJOBECD   HAS END OF CARD BEEN MET..  @OZ38384 R3016030
         BO    RILLJBCA            IF SO, CONT. OUTPUT PROC.   @OZ38384 R3016040
         LTR   JCT,JCT             HAS JOB BEEN DELETED...     @OZ38384 R3016043
         BZ    RILLJBCA            IF SO, CONT. OUTPUT PROC.   @OZ38384 R3016046
         OI    RPASPROC,$RJOBERR   INDICATE JOB CARD ILLEGAL   @OZ38384 R3016050
         B     RJOBINCR            ADVANCE TO NEXT COLUMN      @OZ38384 R3016060
RILLJBCA EQU   *                   CONTINUE OUTPUT PROCESSING  @OZ38384 R3016070
         LTR   JCT,JCT             TEST ADDRESS OF JCT                  R3018000
         BZ    RJOBRET             BRANCH IF JOB HAS BEEN DELETED       R3020000
         TM    $RJOBOPT,1          TEST JOB CARD SCAN OPTION         R4 R3022000
         BO    RJOBCEND            BRANCH IF ODD (1, 3, OR 5)        R4 R3024000
         BAL   RL1,RPUT            ADD JOB CARD TO OUTPUT FILE          R3026000
         OI    RCARDLRC,LRC1CCTL+LRC1TASA  SET ASA CARRIAGE CONTROL  R4 R3028000
         MVI   RDRCCTL,C'0'        FORCE DOUBLE SPACE                R4 R3030000
         MVI   0(RPI),C'*'         FILL OUT CARD IMAGE               R4 R3032000
         MVC   1(78,RPI),0(RPI)     WITH ASTERISKS                   R4 R3034000
         MVI   79(RPI),C' '        ADD TRAILING BLANK                R4 R3035000
         MVC   (79-18)/2(18,RPI),RJERRMSG+4  MOVE IN ERROR MESSAGE   R4 R3036000
         BAL   RL1,RPUT            ADD ERROR MESSAGE TO OUTPUT FILE     R3038000
         SPACE 2                                                        R3040000
        $WTO   RJERRMSG,L'RJERRMSG,JOB=YES,              NOTIFY        CR3042000
               ROUTE=$LOG+$UR,CLASS=$TRIVIA,PRI=$ST       OPERATOR      R3044000
         SPACE 1                                                     R4 R3045500
RJOBRETK BAL   RL1,RJOBKILL        KILL JOB                          R4 R3046000
         SPACE 2                                                     R4 R3048000
RJOBRET $RETURN                    RETURN TO MAIN PROCESSOR             R3060000
         EJECT                                                          R3062000
*********************************************************************** R3064000
*                                                                     * R3066000
*        RJSCAN -- SUBROUTINE TO EXTRACT FIELDS FROM JOB STATEMENT    * R3068000
*                                                                     * R3070000
*              FUNCTION -- EXTRACT NEXT FIELD FROM JOB STATEMENT      * R3072000
*                                                                     * R3074000
*              INPUTS -- R0  = LENGTH OF OUTPUT AREA                  * R3076000
*                        R1  = ADDRESS OF OUTPUT AREA                 * R3078000
*                        RL1 = POSITIVE FOR APOSTROPHE COMPRESSION    * R3080000
*                                                                     * R3082000
*              OUTPUT -- EXTRACTED FIELD IN OUTPUT AREA               * R3084000
*                                                                     * R3086000
*              LINK REGISTER -- RL1                                   * R3088000
*                                                                     * R3090000
*              RETURNS -- RL1+0 - NORMAL RETURN                       * R3092000
*                         RL1+4 - KEYWORD PARAMETER ENCOUNTERED       * R3094000
*                                                                     * R3096000
*              EXTERNAL ROUTINE -- RCONTNUE                           * R3098000
*                                                                     * R3100000
*********************************************************************** R3102000
         SPACE 5                                                        R3104000
RJSCAN   MVC   RJOBPRSW(8),RJOBSWS INITIALIZE RJSCAN SWITCHES        R4 R3106000
         SPACE 1                                                     R4 R3110000
RJOBNEXT BXH   RW,R14,RJOBCON1     ADVANCE TO NEXT CHARACTER            R3112000
         CLI   5(RW),C''''         TEST CURRENT CHARACTER               R3114000
         BNE   RJOBPR              BRANCH IF NOT APOSTROPHE          R4 R3116000
         XI    RJOBPRSW+1,X'F0'    INVERT APOSTROPHE SWITCH             R3118000
         LTR   RL1,RL1             TEST COMPRESSION OPTION              R3120000
         BM    RJOBMOVE            BRANCH IF NO COMPRESSION             R3122000
         CLI   4(RW),C''''         TEST LAST CHARACTER                  R3124000
         BNE   RJOBNEXT            BRANCH IF NOT APOSTROPHE             R3126000
         EX    0,RJOBPRSW          MOVE ODD APOSTROPHES ONLY            R3128000
         B     RJOBNEXT            IGNORE EVEN APOSTROPHES              R3130000
         SPACE 3                                                     R4 R3132000
RJOBPR   EX    R0,RJOBPRSW         BRANCH IF IN LITERAL FIELD        R4 R3134000
         CLI   5(RW),C' '          TEST CURRENT CHARACTER               R3136000
         BE    RJOBCON2            BRANCH IF BLANK                      R3138000
         CLI   5(RW),C')'          TEST CURRENT CHARACTER               R3140000
         EX    R0,RJOBPASW         BR IF NOT MATCHING RIGHT PAREN    R4 R3142000
         NI    RJOBPASW+1,X'0F'    RESET PARENTHESIS SWITCH             R3144000
         CLI   5(RW),C','          TEST CURRENT CHARACTER               R3146000
         BER   RL1                 RETURN IF COMMA                      R3148000
         CLI   5(RW),C'='          TEST CURRENT CHARACTER               R3150000
         BE    4(,RL1)             INDICATE KEYWORD PARAMETER IF '='    R3152000
         CLI   5(RW),C'('          TEST CURRENT CHARACTER               R3154000
         BNE   RJOBMOVE            BRANCH IF NOT LEFT PARENTHESIS       R3156000
         OI    RJOBPASW+1,16*NE    SET PARENTHESIS SWITCH               R3158000
         EJECT                                                       R4 R3160000
RJOBMOVE LTR   R0,R0               TEST REMAINING OUTPUT AREA LENGTH    R3162000
         BZ    RILLJOBC            BRANCH IF FIELD IS TOO LONG          R3164000
         MVC   0(1,R1),5(RW)       MOVE CHARACTER TO OUTPUT AREA        R3166000
         BCTR  R0,0                REDUCE OUTPUT AREA LENGTH            R3168000
         LA    R1,1(,R1)           ADVANCE OUTPUT AREA ADDRESS          R3170000
         B     RJOBNEXT            GET NEXT CHARACTER                   R3172000
         SPACE 3                                                     R4 R3174000
RJOBCON1 TM    RJOBPRSW+1,X'F0'    TEST APOSTROPHE SWITCH               R3176000
         BNZ   RILLJOBC            ILLEGAL IF LITERAL FIELD             R3178000
         SPACE 2                                                     R4 R3179000
RJOBCON2 BCTR  RW,0                BACK UP ONE CHARACTER                R3180000
         CLI   5(RW),C','          TEST LAST CHARACTER                  R3182000
         BE    RJOBCON3            GET CONTINUATION IF COMMA            R3184000
         TM    RJOBPASW+1,X'F0'    TEST PARENTHESIS SWITCH              R3186000
         BNZ   RILLJOBC            ILLEGAL IF PARENTHESIS FIELD         R3188000
         BR    RL1                 RETURN IF NOT PARENTHESIS FIELD      R3190000
         SPACE 3                                                     R4 R3192000
RJOBCON3 STM   R0,R1,RLSAVE1       SAVE                                 R3194000
         ST    RL1,RLSAVE3          REGISTERS                           R3196000
         MVC   RLSAVE2(1),RJOBPASW+1 AND PARENTHESIS SWITCH             R3198000
         BAL   RL1,RCONTNUE        GET NEXT CARD                        R3200000
         B     RILLJOBC            BRANCH IF ILLEGAL CONTINUATION       R3202000
         LM    R0,R1,RLSAVE1       RESTORE                              R3204000
         L     RL1,RLSAVE3          REGISTERS                           R3206000
         LA    R15,65(,RPI)        SET LIMIT FOR END OF CARD            R3208000
         MVC   RJOBPRSW(8),RJOBSWS RESET                             R4 R3210000
         MVC   RJOBPASW+1(1),RLSAVE2 SWITCHES                           R3212000
         B     RJOBNEXT            GET NEXT CHARACTER                   R3214000
         SPACE 5                                                     R4 R3214400
RJOBSWS  NOP   RJOBMOVE            *** MODEL EXECUTE STATEMENT ***   R4 R3214600
         NOP   RJOBMOVE            *** MODEL EXECUTE STATEMENT ***   R4 R3214800
         SPACE 2                                                     R4 R3215000
RJOBPRSW EQU   $POSTSAV,4          RJSCAN APOSTROPHE SWITCH          R4 R3215200
RJOBPASW EQU   $POSTSAV+4,4        RJSCAN PARENTHESIS SWITCH         R4 R3215400
         EJECT                                                          R3216000
*                                                                       R3218000
*                             JOB CARD SCAN CONSTANTS AND VARIABLES     R3220000
*                                                                       R3222000
         SPACE 3                                                        R3222600
RONE     DC    F'1'                CONSTANT                             R3222700
R10000   DC    F'10000'            *                                    R3222800
R10001   DC    F'10001'            *                                    R3223000
R20000   DC    F'20000'            *                                    R3223100
R20001   DC    F'20001'            *                                    R3223200
R30000   DC    F'30000'            *                                    R3223300
RSTC     DC    CL4'STC'            *                                    R3223400
RTSU     DC    CL4'TSU'            *                                    R3223500
RJCIMASK DC    A(X'3F')            CLASS INDEX MASK                     R3223900
RJCTID   DC    CL4'JCT'            JCT NAME                             R3224000
RIOTID   DC    CL4'IOT'            IOT NAME                             R3224100
RSTUETIM DC    AL4(1440,999999,999999)  STC/TSU ESTIMATES               R3224200
*              THIS LINE DELETED BY APAR                       @OZ38058 R3224400
RMASK    DC    XL8'4020202020202120'  EDIT MASK                         R3224500
RCLASS   DC    CL5'CLASS'          JOB CARD KEYWORD CONSTANTS           R3225100
RMSG     DC    CL3'MSG'            *                                    R3225200
RTYPRUN  DC    CL6'TYPRUN'         *                                    R3225300
RHOLD    DC    CL4'HOLD'           *                                    R3225400
RJCLHOLD DC    CL7'JCLHOLD'        *                                 R4 R3225500
RSCAN    DC    CL4'SCAN'           *                                    R3225600
RCOPY    DC    CL4'COPY'           *                                    R3225700
RNOTIFY  DC    CL6'NOTIFY'         *                                    R3225800
RPRTY    DC    CL4'PRTY'           *                                 R4 R3225900
RLOGNAME DC    CL8'SYSLOG  '       SYSLOG STC JOBNAME          @OZ43877 R3225950
RLOGETIM DC    AL4(1440,X'7FFFFFFF',X'7FFFFFFF') SYSLOG ESTIM  @OZ43877 R3225975
         SPACE 3                                                        R3226000
RJOBVAR  EQU   $POSTSAV,4          VARIABLE JOBID HEADER             R4 R3226100
RONMSG   $MSG  100,'ON DEV NAME    '  JOB SIGN-ON MESSAGE               R3228000
RXBERMSG DC    C' RESERVED JOB NAME - CHANGE 1 OF 1ST 5 CHARACTERS '    R3234000
         SPACE 5                                                        R3238000
         DROP  BASE3               DROP SEGMENT ADDRESSABILITY          R3240000
         TITLE 'HASPRDR      -- CLASS CHARACTERISTICS TABLE'   @OZ48782 R3242000
         SPACE 5                                               @OZ48782 R3242100
         ORG   *-3*64              ORG OVER UNUSED SPACE       @OZ48782 R3242200
RDCAT    DS    0D                  CLASS ATTRIBUTE TABLE       @OZ48782 R3242300
         ORG   *+3*64              INVALID CLASSES             @OZ48782 R3242400
         SPACE 1                                               @OZ48782 R3242500
         DC    01AL1(0)            INVALID CLASS               @OZ48782 R3242600
         DC    01AL1(CATBATCH)     CLASS A                     @OZ48782 R3242700
         DC    01AL1(CATBATCH)     CLASS B                     @OZ48782 R3242800
         DC    07AL1(CATBATCH)     CLASSES C-I                 @OZ48782 R3242900
         DC    07AL1(0)            INVALID CLASSES             @OZ48782 R3243000
         DC    01AL1(CATBATCH)     CLASS J                     @OZ48782 R3243100
         DC    01AL1(CATBATCH)     CLASS K                     @OZ48782 R3243200
         DC    07AL1(CATBATCH)     CLASSES L-R                 @OZ48782 R3243300
         DC    08AL1(0)            INVALID CLASSES             @OZ48782 R3243400
         DC    08AL1(CATBATCH)     CLASSES S-Z                 @OZ48782 R3243500
         DC    06AL1(0)            INVALID CLASSES             @OZ48782 R3243600
         DC    10AL1(CATBATCH)     CLASSES 0-9                 @OZ48782 R3243700
         DC    06AL1(0)            INVALID CLASSES             @OZ48782 R3243800
         TITLE 'HASP INPUT SERVICE -- ACCOUNTING FIELD SCAN ROUTINE'    R3244000
HASPRSCN $ENTRY CSECT=YES          DEFINE ACCOUNTING FIELD SCAN SEGMENT R3246000
         SPACE 2                                                        R3248000
*********************************************************************** R3250000
*                                                                     * R3252000
*        HASPRSCN -- SUBROUTINE TO PROCESS JOB CARD ACCOUNTING FIELD  * R3254000
*                                                                     * R3256000
*              INPUT -- JCTWORK CONTAINS ENTIRE ACCOUNTING FIELD      * R3258000
*                       RSAVE1 CONTAINS ADDRESS OF LAST CHARACTER     * R3260000
*                       (OR DELIMITER) OF ACCOUNTING FIELD, OR THE    * R3262000
*                       ADDRESS OF JCTWORK-1 IF NO ACCOUNTING FIELD   * R3264000
*                       WAS PROVIDED.                                 * R3266000
*                                                                     * R3268000
*              REGISTERS AVAILABLE FOR USE -- R0-R2,RL1,RL2,R14,R15   * R3270000
*                                                                     * R3272000
*              REGISTER USAGE --                                      * R3274000
*                                                                     * R3276000
*                   R0  -- USED TO RETURN EXTRACTED SUB-FIELD         * R3278000
*                   R1  -- CURRENT LOCATION WITHIN ACCOUNTING FIELD   * R3280000
*                   R2  -- WORK REGISTER                              * R3282000
*                   RL1 -- LINK REGISTER                              * R3284000
*                   RL2 -- WORK REGISTER                              * R3286000
*                   R14 -- WORK REGISTER                              * R3288000
*                   R15 -- POINTER TO END OF ACCOUNTING FIELD         * R3290000
*                                                                     * R3292000
*              EXTERNAL ROUTINES -- 1) RPUT                           * R3294000
*                                   2) RNOCMB                         * R3296000
*                                   3) RJOBKILL                       * R3298000
*                                                                     * R3300000
*********************************************************************** R3302000
         EJECT                                                          R3328000
         SR    R2,R2               INITIALIZE WORK REG TO ZERO          R3330000
         LA    R1,JCTWORK+1        ASSUME ACCT FIELD STARTS WITH '('    R3332000
         L     R15,RSAVE1          LOAD ADDR OF LAST CHAR OF ACCT FLD   R3334000
         CR    R15,R1              TEST ACCOUNTING FIELD                R3336000
         BL    *+12                BR IF NULL OR ONE CHAR UNBOUNDED     R3338000
         CLI   JCTWORK,C'('        TEST FIRST CHAR OF ACCT FIELD        R3340000
         BE    *+10                BR IF ACCT FLD ENCLOSED IN PARENDS   R3342000
         BCTR  R1,0                 ELSE ADJUST START OF SCAN           R3344000
         LA    R15,1(,R15)          AND END OF SCAN                     R3346000
         MVI   0(R15),255          SET SCAN DELIMITER                   R3348000
         CLI   $RJOBOPT,1          TEST JOB CARD SCAN OPTION         R4 R3350000
         BH    SKIP230             BR IF 2 OR GREATER                R4 R3351000
         MVI   RSAVE1,X'80'        INDICATE NO ACCT OR RM NUMBER        R3352000
SKIP230  BAL   RL1,RSCNFLD1        EXTRACT PGM'RS ACCT'G NUMBER         R3356000
         B     *+8                 BR IF PROVIDED                       R3358000
         B     RSCNTGT1            BR IF FIELD NOT PROVIDED          R4 R3360000
         ST    R0,JCTACCTN          ELSE STORE                          R3362000
         BAL   RL1,RSCNFLD3        EXTRACT PGM'RS ROOM NUMBER           R3364000
         B     *+8                 BR IF PROVIDED                       R3366000
         B     RSCNTGT1            BR IF FIELD NOT PROVIDED          R4 R3368000
         ST    R0,JCTROOMN          ELSE STORE                          R3370000
         CLI   $RJOBOPT,1          TEST JOB CARD SCAN OPTION         R4 R3372000
         BH    SKIP240             BR IF 2 OR GREATER                R4 R3373000
         MVI   RSAVE1,0            INDICATE ACCT AND RM NUMBER          R3374000
SKIP240  BAL   RL1,RSCNFLD2        EXTRACT ESTIMATED EXECUTION TIME     R3378000
         ST    R0,JCTETIME          STORE IF PROVIDED                   R3380000
         BAL   RL1,RSCNFLD3        EXTRACT ESTIMATED LINE COUNT         R3382000
         ST    R0,JCTESTLN          STORE IF PROVIDED                   R3384000
         BAL   RL1,RSCNFLD3        EXTRACT ESTIMATED PUNCHED CARD COUNT R3386000
         ST    R0,JCTESTPU          STORE IF PROVIDED                   R3388000
         BAL   RL1,RSCNFLD1        EXTRACT SPECIAL FORMS NUMBER         R3390000
         ST    R0,JCTFORMS          STORE IF PROVIDED                   R3392000
SKIP250  BAL   RL1,RSCNFLD2        EXTRACT JOB OUTPUT COPY COUNT        R3394000
         B     RSCNCPY             BR IF FIELD PRESENT                  R3396000
         BAL   RL1,RSCNFLD1         OPTION (IF ANY)                     R3398000
         B     RSCNLOG             BR IF FIELD PRESENT                  R3400000
         BAL   RL1,RSCNFLD2        EXTRACT OUTPUT LIMIT                 R3402000
         B     RSCNLIM             BR IF FIELD PRESENT                  R3404000
         B     RSCNRET              AND TERMINATE ACCT FIELD SCAN       R3406000
         SPACE 3                                                     R4 R3406400
RSCNTGT1 CLI   $RJOBOPT,2          TEST JOB CARD SCAN OPTION         R4 R3406800
         BL    RBADACCT            BR IF LESS THAN 2                 R4 R3407200
         B     12(,RL1)             ELSE CONTINUE                    R4 R3407600
         EJECT                                                       R4 R3408000
RSCNLIM  LA    RL2,JCTLINCT        INITIALIZE STORE ADDRESS             R3410000
         B     RSCNCKDG             AND GO TO CHECK FIELD LENGTH        R3412000
         SPACE 1                                                     R4 R3413000
RSCNCPY  LA    RL2,JCTCPYCT        INITIALIZE STORE ADDRESS             R3414000
RSCNCKDG LR    RW,R0               SAVE VALUE PROVIDED                  R3416000
         SRA   RW,8                TEST VALUE                           R3418000
         BNZ   RSCNTGT3            BR IF VALUE GREATER THAN 255      R4 R3420000
         STC   R0,0(,RL2)          STORE VALUE PROVIDED                 R3422000
         B     4(,RL1)              AND RESUME ACCT FIELD SCAN          R3424000
         SPACE 1                                                     R4 R3426000
RSCNLOG  LTR   R2,R2               TEST FIELD LENGTH                    R3428000
         BNZ   RSCNTGT3            BR IF MORE THAN ONE CHARACTER     R4 R3430000
         CLI   RTEMP,C'N'          TEST FOR NOLOG OPTION                R3432000
         BNE   4(,RL1)             RESUME ACCT FIELD SCAN IF NO         R3434000
         OI    JCTJBOPT,JCTNOLOG   INDICATE NOLOG OPTION SPECIFIED      R3436000
         B     4(,RL1)              AND RESUME ACCT FIELD SCAN          R3438000
         SPACE 1                                                     R4 R3440000
RSCNFLD1 LA    RL2,4               SET BR SW FOR CHARACTER FIELDS       R3442000
         B     RSCNFLD3             AND BEGIN SCAN                      R3444000
         SPACE 1                                                     R4 R3445000
RSCNFLD2 SLR   RL2,RL2             SET BR SW FOR NUMERIC FIELDS         R3446000
RSCNFLD3 CLI   0(R1),255           TEST FOR END OF ACCOUNTING FIELD     R3448000
         BE    RSCNRET             IF SO, TERMINATE SCAN                R3450000
         CLI   0(R1),C''''         TEST FIRST CHAR OF FIELD             R3452000
         BE    RSCNSPEC            BR IF FIELD ENCLOSED IN QUOTES       R3454000
         LR    R14,R1              SAVE POINTER TO START OF FIELD       R3456000
         TRT   0(144,R1),RALFATBL  SCAN TO FIRST NON-ALPHAMERIC CHAR    R3458000
         LR    R0,R1               SAVE ADDRESS OF DELIMETER            R3460000
         B     *(R2)               USE FUNCTION BYTE AS INDEX VALUE     R3462000
         B     RSCNTGT2            BR IF INVALID CHARACTER IN FIELD  R4 R3464000
         B     RSCNSIZE            DON'T INCREMENT IF AT END OF ACCT    R3466000
         SPACE 1                                                        R3468000
RSCNNEXT LA    R1,1(,R1)           STEP PAST FIELD DELIMITER            R3470000
RSCNSIZE SR    R0,R14              DETERMINE SIZE OF FIELD              R3472000
         BZ    4(,RL1)             RETURN IF NULL FIELD                 R3474000
         BCTR  R0,0                DECREMENT FOR MACHINE LENGTH         R3476000
         C     R0,RFOUR            TEST FIELD SIZE                      R3478000
         BL    *+8(RL2)            BR TO PROCESS IF VALID FLD SIZE      R3480000
         B     RSCNTGT3             ELSE BR TO IGNORE FIELD          R4 R3482000
         B     RSCNDIG             BR IF FIELD SHOULD BE NUMERIC        R3484000
         MVC   RTEMP+1(3),RKBLANKS INSURE FIELD PADDED TO RIGHT         R3486000
         LR    R2,R0               USE R2 FOR EXECUTE                   R3488000
         EX    R2,RMVCHAR          MOVE CHARACTERS FROM SUB-FIELD       R3490000
         L     R0,RTEMP            GET FIELD TO R0                      R3492000
         BR    RL1                  AND RETURN                          R3494000
         SPACE 1                                                        R3496000
RSCNDIG  MVC   RTEMP(4),RZEROES    MOVE ZEROES TO WORK AREA             R3498000
         MVZ   RTEMP(4),0(R14)     MOVE ZONES FROM SUB-FIELD            R3500000
         LR    R2,R0               USE R2 FOR EXECUTES                  R3502000
         EX    R2,RTSTZNS          TEST FOR VALID DIGITS                R3504000
         BNE   RSCNTGT3            BR IF NON-DIGIT CHARACTER IN FLD  R4 R3506000
         EX    R2,RPACKNUM         CONVERT FIELD TO PACKED DECIMAL      R3508000
         CVB   R0,RTEMP             AND THEN TO BINARY                  R3510000
         BR    RL1                 THEN RETURN TO CALLER                R3512000
         EJECT                                                       R4 R3514000
RSCNSPEC LA    R14,1(,R1)          SAVE ADDR OF FIRST CHAR AFTER QUOTE  R3516000
         LA    R1,1(,R1)           POINT TO FIRST CHAR AFTER QUOTE      R3518000
         TRT   0(144,R1),RSPECTBL  SCAN TO NEXT QUOTE OR DELIMITER      R3520000
         B     *(R2)               USE FUNCTION BYTE AS INDEX VALUE     R3522000
         B     RSCNTGT2            BR IF ILLEGAL CHARACTER           R4 R3524000
         CLI   1(R1),C''''         TEST FOR DOUBLE QUOTES               R3526000
         BNE   RSPECFLD            BR IF NO TO EXTRACT DATA             R3528000
         BCTR  R15,0               SHIFT                                R3530000
         LR    R2,R15               REMAINING                           R3532000
         SLR   R2,R1                 CHARACTERS                         R3534000
         EX    R2,RSCNSHFT            LEFT                              R3536000
         B     RSCNSPEC+4          RESUME SCAN                          R3538000
         SPACE 1                                                        R3540000
RSPECFLD LR    R0,R1               SAVE END-OF-FIELD ADDRESS            R3542000
         LA    R1,1(,R1)           STEP PAST CLOSING QUOTE              R3544000
         CLI   0(R1),C','          TEST DELIMITER                       R3546000
         BE    RSCNNEXT            BR IF COMMA                          R3548000
         CLI   0(R1),255           TEST DELIMITER                       R3550000
         BE    RSCNSIZE            BR IF END OF ACCOUNTING FIELD        R3552000
         SPACE 1                                                     R4 R3553000
RSCNTGT2 CLI   $RJOBOPT,2          TEST JOB CARD SCAN OPTION         R4 R3554000
         BNH   RBADACCT            BR IF 2 OR LESS TO ISSUE MSG      R4 R3555000
         B     RSCNRET              ELSE JUST RETURN                 R4 R3556000
         SPACE 1                                                     R4 R3557000
RSCNTGT3 CLI   $RJOBOPT,2          TEST JOB CARD SCAN OPTION         R4 R3558000
         BNL   4(,RL1)             BR IF 2 OR GREATER                R4 R3559000
         SPACE 1                                                     R4 R3559500
RBADACCT CLI   JCTJOBID,C'J'       TEST JOBID                           R3560000
         BNE   RSCNRET             IGNORE ERROR IF STC OR TSU           R3562000
         BAL   RL1,RPUT            ADD JOB CARD TO OUTPUT FILE          R3566000
         OI    RCARDLRC,LRC1CCTL+LRC1TASA  SET ASA CARRIAGE CONTROL  R4 R3568000
         MVI   RDRCCTL,C'0'        FORCE DOUBLE SPACE                R4 R3570000
         MVI   0(RPI),C'*'         FILL OUT CARD IMAGE               R4 R3572000
         MVC   1(78,RPI),0(RPI)     WITH ASTERISKS                   R4 R3574000
         MVI   79(RPI),C' '        ADD TRAILING BLANK                R4 R3575000
         MVC   (79-18)/2(18,RPI),RJERRMSG+4  MOVE IN ERROR MESSAGE   R4 R3576000
         BAL   RL1,RPUT            ADD ERROR MSG TO OUTPUT FILE         R3578000
        $WTO   RJERRMSG,L'RJERRMSG,JOB=YES,              NOTIFY        CR3580000
               ROUTE=$LOG+$UR,CLASS=$TRIVIA,PRI=$ST       OPERATOR      R3582000
         BAL   RL1,RJOBKILL        KILL JOB                             R3584000
         SPACE 1                                                     R4 R3586000
RSCNRET  CLI   $RJOBOPT,1          TEST JOB CARD SCAN OPTION         R4 R3590000
         BH    *+16                BR IF 2 OR MORE TO RETURN         R4 R3592000
         CLI   RSAVE1,X'80'        TEST FOR ACCT AND RM NUMBERS         R3594000
         MVI   RSAVE1,0            RESET IN ANY CASE                    R3596000
         BE    RBADACCT            BR IF EITHER FIELD MISSING           R3598000
        $RETURN                    RETURN TO MAIN PROCESSOR             R3602000
         EJECT                                                       R4 R3604000
RALFATBL DC    91AL1(4),AL1(0,4,4,4,4,0),10AL1(4),AL1(12)               R3606000
         DC    15AL1(4),AL1(0,0),68AL1(4),9AL1(0),7AL1(4),9AL1(0)       R3608000
         DC    8AL1(4),8AL1(0),6AL1(4),10AL1(0),5AL1(4),AL1(8)          R3610000
         SPACE 1                                                        R3612000
RSPECTBL DC    64AL1(4),AL1(0),10AL1(4),AL1(0,4,0,0,4,0),10AL1(4)       R3614000
         DC    AL1(0,0,0,4,4,0,0),9AL1(4),AL1(0),15AL1(4)               R3616000
         DC    AL1(0,0,8,0),66AL1(4),9AL1(0),7AL1(4),9AL1(0)            R3618000
         DC    8AL1(4),8AL1(0),6AL1(4),10AL1(0),6AL1(4)                 R3620000
         SPACE 1                                                        R3622000
         SPACE 1                                                        R3624000
RMVCHAR  MVC   RTEMP(*-*),0(R14)       *** EXECUTE ONLY ***             R3626000
RTSTZNS  CLC   RTEMP(*-*),RZEROES      *** EXECUTE ONLY ***             R3628000
RSCNSHFT MVC   0(*-*,R1),1(R1)         *** EXECUTE ONLY ***             R3630000
RPACKNUM PACK  RTEMP,0(*-*,R14)        *** EXECUTE ONLY ***             R3632000
         SPACE 2                                                        R3632500
RFOUR    DC    F'4'                CONSTANT                             R3633000
RZEROES  DC    CL4'0000'           *                                    R3633500
         SPACE 5                                                        R3634000
         DROP  BASE3               DROP SEGMENT ADDRESSABILITY          R3636000
HASPRDR  CSECT                     DEFINE SUBROUTINES RESIDENT          R3640000
         TITLE 'HASP INPUT SERVICE -- FIRST LEVEL SUBROUTINES'          R3642000
*********************************************************************** R3644000
*                                                                     * R3646000
*        RCONTNUE -- SUBROUTINE TO READ CONTINUATION CARDS            * R3648000
*                                                                     * R3650000
*              FUNCTIONS -- 1) ADD PREVIOUS CARD TO JCL FILE          * R3652000
*                           2) GET NEXT CARD                          * R3654000
*                           3) VALIDATE COLUMNS 1-3 OF NEXT CARD      * R3656000
*                           4) LOCATE START OF VARIABLE FIELD         * R3658000
*                                                                     * R3660000
*              OUTPUT -- RW = POINTER TO VARIABLE FIELD               * R3662000
*                                                                     * R3664000
*              LINK REGISTER -- RL1                                   * R3666000
*                                                                     * R3668000
*              RETURNS -- RL1+0 - ERROR RETURN                        * R3670000
*                         RL1+4 - NORMAL REUTRN                       * R3672000
*                                                                     * R3674000
*              EXTERNAL ROUTINES -- 1) RPUT                           * R3676000
*                                   2) RGET                           * R3678000
*                                                                     * R3680000
*********************************************************************** R3682000
         SPACE 5                                                        R3684000
RCONTNUE ST    RL1,RMESSAGE+36     SAVE LINK REGISTER                   R3686000
         BAL   RL1,RPUT            ADD PREVIOUS CARD TO JCL FILE        R3688000
         BAL   RL1,RGET            GET NEXT CARD                        R3690000
         MVI   2(RPI),0            FORCE ILLEGAL IF END OF FILE         R3692000
*              THIS LINE DELETED BY APAR NUMBER                @OZ56465 R3692100
*              THIS LINE DELETED BY APAR NUMBER                @OZ56465 R3692200
*              THIS LINE DELETED BY APAR NUMBER                @OZ56465 R3692300
*              THIS LINE DELETED BY APAR NUMBER                @OZ56465 R3692400
*              THIS LINE DELETED BY APAR NUMBER                @OZ56465 R3692500
*              THIS LINE DELETED BY APAR NUMBER                @OZ56465 R3692600
*              THIS LINE DELETED BY APAR NUMBER                @OZ56465 R3692700
*              THIS LINE DELETED BY APAR NUMBER                @OZ56465 R3692800
*              THIS LINE DELETED BY APAR NUMBER                @OZ56465 R3692900
*              THIS LINE DELETED BY APAR NUMBER                @OZ56465 R3693000
         L     RL1,RMESSAGE+36     RESTORE LINK REGISTER                R3694000
         OI    RCARDLRC,RDLMSKIP   BYPASS DLM TEST                   R4 R3695000
         LTR   JCT,JCT             TEST ADDRESS OF JCT                  R3696000
         BZR   RL1                 BRANCH IF JOB HAS BEEN DELETED       R3698000
         CLI   2(RPI),0            WAS THIS END OF FILE...     @OZ56465 R3698100
         BE    RCONTNU5            YES, DON'T UPDATE COUNT     @OZ56465 R3698200
         TM    RDRSW,RJCLSW        TEST CURRENT MODE           @OZ56465 R3698300
         BNO   RCONTNU5            BR IF NOT JCL FILE          @OZ56465 R3698400
         L     RW,RDRIOT           ADDR OF 1ST IOT             @OZ56465 R3698500
         AL    RW,$IOTPDDB         ADDR OF 1ST PDDB            @OZ56465 R3698600
         L     R15,PDBRECCT-PDBDSECT+IOTPDBOJ(,RW) INCREMENT   @OZ56465 R3698700
         LA    R15,1(,R15)                          JCL FILE   @OZ56465 R3698800
         ST    R15,PDBRECCT-PDBDSECT+IOTPDBOJ(,RW)   REC CNT   @OZ56465 R3698900
         EJECT                                                 @OZ56465 R3700000
RCONTNU5 DS    0H                                              @OZ56465 R3700100
         CLC   0(3,RPI),=CL3'//*'  CHECK COLUMNS 1-3                    R3701000
         BE    RCONTNUE            IGNORE JCL COMMENT                   R3701500
         CLC   0(3,RPI),=CL3'//'   CHECK COLUMNS 1-3                    R3702000
         BE    RCONTNU2            CONT. IF VALID CONT.        @OZ38384 R3702500
*                                                              @OZ38384 R3702600
*        IF THE ILLEGAL CONTINUATION IS ON A JOB CARD,         @OZ38384 R3702700
*        INDICATE END OF JOB CARD PROCESSING.                  @OZ38384 R3702800
*                                                              @OZ38384 R3702900
         TM    RPASPROC,$RJOBFND   IS THIS A JOB CARD...       @OZ38384 R3703000
         BZR   RL1                 EXIT IF NOT JOB CARD        @OZ38384 R3703500
         OI    RPASPROC,$RJOBECD   INDICATE END OF CARD PROC.  @OZ38384 R3704000
         BR    RL1                 AND GO TO OUTPUT PROC.      @OZ38384 R3704500
         SPACE 2                                                        R3706000
RCONTNU2 LA    R1,12               GET LNG OF VARIABLE START   @OZ38384 R3708000
         LA    RW,9(,RPI)          SET UP POINTER                       R3710000
         SR    RW,R1                TO COLUMN 4                         R3712000
         LA    R14,1               SET INCREMENT FOR SCAN               R3714000
         SPACE 2                                                        R3716000
RCONTNU1 CLI   6(RW),C' '          SCAN COLUMNS 4-15                    R3718000
         BNE   4(,RL1)              TO DETERMINE                        R3720000
         LA    RW,1(,RW)             START OF                           R3722000
         BCT   R1,RCONTNU1            VARIABLE FIELD                    R3724000
         B     4(,RL1)             NOT FOUND, ASSUME COLUMN 16          R3726000
         EJECT                                                          R3728000
*********************************************************************** R3730000
*                                                                     * R3732000
*        RJOBEND -- SUBROUTINE TO COMPLETE JOB INPUT PROCESSING       * R3734000
*                                                                     * R3736000
*              FUNCTIONS -- 1) TEST FOR ACTIVE JOB                    * R3738000
*                           2) TERMINATE JOB                          * R3740000
*                           3) PLACE JOB IN EXECUTION QUEUE           * R3742000
*                                                                     * R3744000
*              LINK REGISTER -- RL1                                   * R3746000
*                                                                     * R3748000
*              EXTERNAL ROUTINES -- 1) RJCTTERM                       * R3750000
*                                   2) RJOBTERM                       * R3752000
*                                                                     * R3754000
*********************************************************************** R3756000
         SPACE 5                                                        R3758000
RJOBEND  LTR   JCT,JCT             TEST FOR ACTIVE JOB                  R3760000
         BZR   RL1                 RETURN IF NO JCT                     R3762000
         SPACE 1                                                     R4 R3763500
RJOBENDT BAL   RL2,RJCTTERM        PERFORM FINAL UPDATE OF JCT       R4 R3764000
         IC    RW,JCTIPRIO         SET INITIAL PRIORITY        @OZ29304 R3764010
         CLI   JCTIPRIO,C'*'       DEFAULT PRIORITY CHANGED..  @OZ29304 R3764020
         BNE   RPRISET             DO NOT UPDATE               @OZ29304 R3764030
         SPACE 2                                                        R3766000
         TM    JCTJBOPT,JCTPRICD   BRANCH IF NEITHER /*PRIO CARD     R4 R3768000
         BZ    RPRISCH0              NOR JOB CARD PRTY FIELD         R4 R3769000
         PACK  RTEMP,RPRIORTY      CONVERT EBCDIC PRIROITY           R4 R3770000
         CVB   RW,RTEMP              TO BINARY                       R4 R3771000
         B     RPRISET             PROCESS INCR AND LIMIT            R4 R3772000
         SPACE 2                                                        R3774000
RPRISCH0 L     R1,$RTIMTAB         PREPARE TO SEARCH                 R4 R3776000
         B     SKIP260              TIME PRIORITY TABLE              R4 R3777000
RPRISCH1 LA    R1,4(,R1)           ADVANCE TO NEXT ENTRY                R3778000
SKIP260  CLC   JCTETIME+1(3),1(R1) COMPARE ESTIMATED EXECUTION TIME     R3780000
         BH    RPRISCH1            BRANCH IF GREATER THAN TABLE ENTRY   R3782000
         SR    R0,R0               NO                                   R3784000
         IC    R0,0(,R1)           USE ASSOCIATED PRIORITY              R3786000
         SPACE 2                                                        R3788000
         L     R1,$SSVT               PREPARE TO SEARCH              R4 R3790000
         LA    R1,$SVXPRI-SSVT-4(,R1)  OUTPUT PRIORITY TABLE         R4 R3791000
RPRISCH2 LA    R1,4(,R1)           ADVANCE TO NEXT ENTRY                R3792000
         CLC   JCTESOUT+1(3),1(R1) COMPARE ESTIMATED OUTPUT             R3794000
         BH    RPRISCH2            BRANCH IF GREATER THAN TABLE ENTRY   R3796000
         SR    RW,RW               NO                                   R3798000
         IC    RW,0(,R1)           USE ASSOCIATED PRIORITY              R3800000
         SRL   RW,4                 IN 'PURE' FORM                   R4 R3801000
         ALR   RW,R0               COMPUTE AVERAGE OF                   R3802000
         SRL   RW,1                 THE TWO PRIORITIES                  R3804000
         EJECT                                                          R3806000
RPRISET  N     RW,=F'15'           CLEAR EXTRANEOUS BITS                R3808000
         L     R1,PCEDCT           R1 = ADDRESS OF INPUT DCT   @OZ32566 R3810000
         USING DCTDSECT,R1         ESTABLISH DCT ADDRESSABILITY         R3812000
         IC    R0,DCTPRINC         R0 = INPUT DEVICE PRIORITY INCREMENT R3814000
         ALR   RW,R0               INCREMENT PRIORITY                   R3816000
         CLM   RW,1,DCTPRLIM       COMPARE PRIORITY WITH LIMIT          R3818000
         BNH   *+8                 BR IF PRIORITY NOT GREATER           R3820000
         IC    RW,DCTPRLIM         SET PRIORITY TO LIMIT                R3822000
         DROP  R1                  DROP DCT ADDRESSABILITY              R3824000
         SPACE 2                                                        R3826000
         SLL   RW,4                USE FOUR LOW-ORDER BITS              R3828000
         STC   RW,JCTIPRIO         SAVE INITIAL EXECUTION PRIORITY      R3830000
         STC   RW,RMESSAGE         SAVE FOR LATER USE                   R3832000
         SPACE 2                                                        R3834000
         MVI   RMESSAGE+1,$XEQ     PRESET CONVERTER CLASS               R3836000
         TM    RDRSW,RXBJOBSW      TEST JOB TYPE                        R3840000
         BZ    RNOXBACH            BRANCH IF NOT EXECUTION BATCHING     R3842000
         OC    RMESSAGE+1(1),JCTJCLAS  SET JOB QUEUE TYPE               R3844000
         NI    RMESSAGE+1,QUECLASS RESET HIGH-ORDER BYTE                R3846000
         SPACE 2                                                        R3848000
RNOXBACH NULL                      *                                 R4 R3848200
SKIP270  TM    JCTJOBFL,JCTTCOPY   TEST JOB FLAGS                    R4 R3851000
         BZ    *+12                BRANCH IF NOT 'TYPRUN=COPY'          R3851500
         NI    RDRSW2,255-RTPCPY   RESET TYPRUN=COPY FLAG.     @OZ48524 R3852000
         MVI   RMESSAGE+1,$OUTPUT  RESET QUEUE TYPE TO OUTPUT           R3852500
         BAL   RL2,RJOBTERM        TERMINATE JOB                        R3853000
         SPACE 2                                                     R4 R3854000
        $QSUSE                     REQUEST ACCESS TO CHECKPOINT DATA    R3856000
         L     R1,PCEJQE           GET JQE ADDRESS             @OZ32566 R3864000
         USING JQEDSECT,R1         ESTABLISH JQE ADDRESSABILITY         R3866000
         MVC   JQEPRIO,RMESSAGE    SET NEW PRIORITY                     R3868000
         MVC   JQEFLAG2,RDRSIAFF   RESET SYSTEM AFFINITY                R3869000
         SR    R0,R0               GET NEXT                             R3870000
         IC    R0,RMESSAGE+1        JOB QUEUE TYPE                      R3872000
        $QMOD  (R1),(R0)           QUEUE JOB FOR EXECUTION SERVICES     R3874000
         DROP  R1                  DROP JQE ADDRESSABILITY              R3876000
         SR    R0,R0               CLEAR ADDRESS                        R3878000
         ST    R0,PCEJQE            OF JOB QUEUE ELEMENT       @OZ32566 R3880000
         BR    RL1                   AND RETURN                         R3882000
         EJECT                                                          R3905600
*********************************************************************** R3905700
*                                                                     * R3905800
*        RGET -- SUBROUTINE TO GET NEXT CARD FROM INPUT BUFFER        * R3905900
*                                                                     * R3906000
*              FUNCTION -- SET INPUT POINTER TO NEXT CARD             * R3906100
*                                                                     * R3906200
*              OUTPUT -- RPI = ADDRESS OF NEXT CARD IMAGE             * R3906300
*                                                                     * R3906400
*              LINK REGISTER -- RL1                                   * R3906500
*                                                                     * R3906600
*              RETURNS -- RL1+0 - END OF FILE RETURN                  * R3906700
*                         RL1+4 - NORMAL RETURN                       * R3908000
*                                                                     * R3910000
*              EXTERNAL ROUTINE -- RJOBKILL                           * R3912000
*                                                                     * R3916000
*********************************************************************** R3918000
         SPACE 5                                                        R3920000
RGET     TM    RDRSW,RSYSINSW      TEST FOR GENERATED DD *              R3922000
         BZ    RGET1               BRANCH IF NOT                        R3924000
         L     RPI,RSAVE1          YES, RESTORE ORIGINAL POINTER        R3926000
         NI    RDRSW,255-RSYSINSW  RESET INDICATION                     R3928000
         B     4(,RL1)              AND RETURN                          R3930000
         SPACE 3                                                     R4 R3931000
RGET1    LTR   JCT,JCT             TEST FOR ACTIVE JOB                  R3932000
         BZ    RGETNOCT            DO NOT COUNT IF NO JCT               R3934000
         L     RW,JCTCARDS         INCREMENT                            R3936000
         LA    RW,1(,RW)            CARD                                R3938000
         ST    RW,JCTCARDS           COUNT                              R3940000
         SPACE 1                                                     R4 R3941000
RGETNOCT MVI   RCARDLRL,80         PRESET CARD LENGTH TO 80          R4 R3942000
         TM    PCEID,PCERJEID      TEST DEVICE TYPE                  R4 R3942400
         BO    RJEGET              BRANCH IF REMOTE READER           R4 R3942600
         TM    PCEID,PCEINRID      NO, TEST AGAIN                    R4 R3945000
         BZ    RDRGET              BRANCH IF NOT INTERNAL READER     R4 R3946000
         EJECT                                                       R4 R3947000
*                                                                    R4 R3948000
*                             INTERNAL READER PROCESSING             R4 R3950000
*                                                                    R4 R3952000
         L     RW,PCEDCT           RW = ADDRESS OF INTRDR DCT  @OZ32566 R3954000
         USING DCTDSECT,RW         ESTABLISH DCT ADDRESSABILITY      R4 R3956000
         SPACE 1                                                     R4 R3956500
RINRLOOP DS    0H                                                       R3957000
         L     R1,PCEJQE           GET JQE ADDRESS             @OZ32566 R3957500
         LTR   R1,R1               TEST                                 R3958000
         BZ    RINRTEST            BRANCH IF NO ACTIVE JOB              R3958500
         USING JQEDSECT,R1         ESTABLISH JQE ADDRESSABILITY         R3959000
         TM    JQEFLAGS,QUEOPCAN   TEST JOB QUEUE FLAGS                 R3959500
         BO    RINRDEL             BRANCH IF JOB CANCEL                 R3960000
         DROP  R1                  DROP JQE ADDRESSABILITY              R3960500
         SPACE 2                                                     R4 R3960800
RINRTEST TM    DCTFLAGS,DCTDELET+DCTRSTRT TEST FOR OPERATOR COMMANDS    R3961000
         BNZ   RINRDEL             BRANCH IF OPERATOR CANCEL            R3962000
         TM    RDRSW,RDREOFSW      TEST END-OF-FILE SWITCH              R3964000
         BOR   RL1                 RETURN IF ON                         R3966000
         L     RL2,RIDPBFO         GET NEXT RECORD POINTER              R3968000
         LTR   RL2,RL2             TEST                                 R3970000
         BZ    RINRWAIT            BRANCH IF ZERO                       R3972000
         USING LRCDSECT,RL2        ESTABLISH LOGICAL RECORD ADDR.       R3974000
         CLI   LRCTLENG,LRCBFEND   TEST RECORD LENGTH                   R3976000
         BE    RINRWAIT            BRANCH IF END-OF-BLOCK               R3978000
         MVC   RINFLAG1,LRCFLAG1   SAVE RECORD CHARACTERISTICS       R4 R3979000
         NI    RINFLAG1,LRC1CCTL+LRC1CTYP  ISOLATE CARRIAGE CONTROL  R4 R3979500
         MVC   RCARDLRL,LRCLRECL   SAVE LOGICAL RECORD LENGTH           R3980000
         LR    R0,RPI              R0 = ADDRESS OF INTRDR WORK AREA     R3982000
         LA    R1,254              R1 = LENGTH OF INTRDR WORK AREA      R3984000
         LA    R14,LRCTEXT         R14 = ADDRESS OF BLOCKED RECORD      R3986000
         TM    LRCFLAG1,LRC1CCTL   TEST RECORD CONTROL BYTE             R3988000
         BZ    RINRNOCC            BRANCH IF NO CARRIAGE CONTROL     R4 R3990000
         MVC   RDRCCTL,0(R14)      SAVE CARRIAGE CONTROL CHARACTER   R4 R3991000
         LA    R14,1(,R14)         SPACE OVER CARRIAGE CONTROL CHAR.    R3992000
RINRNOCC CLR   R14,RPI             TEST ADDRESS                      R4 R3994000
         BNL   RINRWAIT            BRANCH IF INVALID                    R3996000
         L     R15,=XL4'40000000'  R15 = BLANK PAD CHARACTER            R3998000
         IC    R15,LRCTLENG        ADD LOGICAL RECORD LENGTH            R4000000
         MVCL  R0,R14              MOVE RECORD TO INTRDR WORK AREA      R4002000
         ST    R14,RIDPBFO         UPDATE RECORD POINTER                R4004000
         DROP  RL2                 DROP LOGICAL RECORD ADDRESSABILITY   R4006000
         CLC   0(6,RPI),=CL6'/*EOF'  TEST FOR INTERNAL READER EOF       R4008000
         BE    RINREOF             BRANCH IF YES                        R4010000
         CLC   0(7,RPI),=CL7'/*SCAN'  TEST FOR INTERNAL READER SCAN     R4012000
         BE    RINRSCAN            BRANCH IF NOT                        R4014000
         CLC   0(6,RPI),=CL6'/*DEL'  TEST FOR INTERNAL READER DELETE    R4016000
         BE    RINRDELP            BRANCH IF YES                    R41 R4017000
         CLC   0(8,RPI),=CL8'/*PURGE' TEST FOR INTERNAL RDR PURGE   R41 R4017100
         BNE   4(,RL1)             TAKE NORMAL RETURN IF NOT            R4018000
         OI    RDRSW,RJNABORT      SET PURGE FLAG                   R41 R4019000
         SPACE 1                                                    R41 R4019100
RINRDELP NI    RDRSW,255-RNOSCAN   TURN ON CARD SCAN                R41 R4020000
         EJECT                                                       R4 R4021000
*                                                                       R4022000
*                             DELETE JOB ON INTERNAL READER             R4024000
*                                                                       R4026000
RINRDEL  DS    0H                                                       R4028000
         ST    RL1,RLSAVE1         SAVE RETURN REGISTER                 R4030000
         BAL   RL1,RJOBKILL        DELETE JOB                           R4032000
         L     RL1,RLSAVE1         RESTORE RETURN REGISTER              R4033000
         L     RW,PCEDCT           RESTORE ADDRESS OF DCT      @OZ32566 R4034000
         NI    DCTFLAGS,255-DCTDELET-DCTRSTRT  RESET OPERATOR FLAGS     R4035000
         B     RINRTEST            GET NEXT RECORD                      R4036000
*                                                                       R4037000
*                             SCAN JOB ON INTERNAL READER               R4038000
*                                                                       R4040000
RINRSCAN DS    0H                                                       R4042000
         LTR   JCT,JCT             TEST FOR ACTIVE JOB                  R4044000
         BZ    RINRTEST            BRANCH IF NO JCT                     R4046000
         OI    JCTJOBFL,JCTTSCAN   FORCE 'TYPRUN=SCAN'                  R4048000
         B     RINRLOOP            GET NEXT RECORD                      R4060000
*                                                                       R4062000
*                             WAIT FOR DIRECTION FROM SSSM              R4064000
*                                                                       R4066000
RINRWAIT DS    0H                                                       R4068000
         TM    RIDFLAGS,RIDEOM     IF SSSM IN MEMORY TERM.     @OZ37382 R4068500
         BO    RINREOF             GO TO CLEAN UP              @OZ37382 R4069000
         OI    RIDFLAGS,RIDBUSY    PERMIT SSSM TO OPERATE               R4070000
         $XMPOST RIDECBP           POST SSSM                            R4072000
RINRW1   $WAIT IO                  $WAIT FOR INPUT FROM SSSM            R4074000
         TM    RIDFLAGS,RIDEND     DID SSSM TERMINATE INTRDR            R4076000
         BO    RINREOF             BRANCH IF YES                        R4078000
         TM    RIDFLAGS,RIDBUSY    HAS SSSM COMPLETED ITS WORK          R4080000
         BZ    RINRLOOP            GET NEXT RECORD IF SO                R4082000
         B     RINRW1              OTHERWISE WAIT AGAIN                 R4084000
*                                                                       R4086000
*                             END-OF-FILE ON INTERNAL READER            R4088000
*                                                                       R4090000
RINREOF  OI    RDRSW,RDREOFSW      SET END-OF-FILE SWITCH               R4092000
         B     RINRTEST            GO CHECK FOR CANCEL         @OZ29612 R4094000
         DROP  RW                  DROP DCT ADDRESSABILITY           R4 R4096000
         EJECT                                                       R4 R4098000
RJEGET   TM    RDRSW,RDREOFSW      TEST END-OF-FILE SWITCH           R4 R4100000
         BNZR  RL1                 RETURN IF ON                      R4 R4102000
         MVI   RTPCARD,C' '        BLANK OUT INPUT AREA        @OZ43908 R4102010
         MVC   RTPCARD+1(255),RTPCARD                          @OZ43908 R4102030
        $EXTP  GET,PCEDCT,RTPCARD  GET CARD IMAGE FROM RTAM    @OZ32566 R4104000
         BP    RDCKCOM             BRANCH IF SUCCESSFUL              R4 R4106000
         OI    RDRSW,RDREOFSW      SET END-OF-FILE SWITCH            R4 R4106100
         B     RDCKCOM             CHECK FOR OPERATOR COMMANDS       R4 R4106200
         SPACE 1                                                     R4 R4111400
RDRGET   LA    RPI,80(,RPI)        ADVANCE INPUT PTR TO NEXT CARD    R4 R4114000
         SPACE 1                                                     R4 R4116000
RGETEST  CL    RPI,RBIEND          TEST FOR END OF BUFFER               R4118000
         BNH   4(,RL1)             BRANCH IF NOT END OF BUFFER          R4120000
         TM    RDRSW,RDREOFSW      TEST FOR READER EOF                  R4122000
         BNZR  RL1                 RETURN IF READER EOF                 R4124000
         CLI   BUFECBCC,X'7F'      TEST FOR CARD READER ERROR           R4126000
         BE    READ                BRANCH IF NO ERROR                   R4128000
         ST    RL1,RLSAVE1         SAVE LINK REGISTER                   R4130000
         BAL   RL1,RJOBKILL        KILL JOB IN ERROR                    R4132000
         L     RL1,RLSAVE1         RESTORE LINK REGISTER                R4134000
         TM    IOBCSW+4,X'3F'      CHANNEL ERRORS...           @OZ48423 R4134500
         BNZ   RDABORT             BR IF YES...STOP READER     @OZ48423 R4135000
         L     R1,PCEDCT           GET ADDRESS OF INPUT DCT    @OZ32566 R4136000
         L     R1,DCTDCB-DCTDSECT(,R1)  GET ADDRESS OF DCB              R4138000
         L     R1,DCBDEBAD-DCBDSECT(,R1)  GET ADDRESS OF DEB            R4140000
         L     R1,DEBSUCBA-DEBDSECT(,R1)  GET ADDRESS OF UCB            R4142000
         TM    UCBFLB-UCBDSECT(R1),UCBIORST  TEST UCB STATUS            R4144000
         BZ    READ                BR IF DEVICE STILL ACCESSIBLE     R4 R4144100
         CLC   $RELSE,=C'02'       TEST OS/VS2 RELEASE NUMBER  @OZ35278 R4144200
         BE    RDABORT             BR IF RELEASE 2                   R4 R4144300
         L     R15,CVTPTR          GET ADDRESS OF CVT                R4 R4144400
         CLC   CVTCRCA-CVT(,R15),=XL4'0'  TEST RECOVERY MODE         R4 R4144500
         BE    RDABORT             BR IF DEVICE NOT ACCESSIBLE       R4 R4144600
         SPACE 1                                                     R4 R4147000
READ    $EXCP  PCEDCT              INITIATE CARD READ PROGRAM  @OZ32566 R4148000
         SPACE 1                                                     R4 R4149000
RWAIT   $WAIT  IO                  WAIT FOR COMPLETION OF READ          R4150000
         SPACE 1                                                     R4 R4150100
RDCKCOM  L     R1,PCEDCT           R1 = READER DCT ADDRESS     @OZ32566 R4154000
         USING DCTDSECT,R1         ESTABLISH DCT ADDRESSABILITY         R4156000
         TM    DCTFLAGS,DCTSTOP    TEST FOR STOP COMMAND                R4158000
         BO    RWAIT               BRANCH IF STOP COMMAND               R4160000
         TM    DCTFLAGS,DCTDELET+DCTRSTRT    TEST FOR DELETE            R4162000
         BNZ   RDELETE             BRANCH IF DELETE OR RESTART          R4163000
         TM    PCEID,PCERJEID      IF LOCAL READER...          @OZ31782 R4163010
         BZ    RAROUND1            ...THIS IS VALID            @OZ31782 R4163020
         TM    MDCTSTAT,DCTABORT   IS REMOTE DISCONNECTED...   @OZ31782 R4163030
         BO    RDELETE             YES, THIS IS NOT VALID      @OZ31782 R4163040
RAROUND1 DS    0H                                              @OZ31782 R4163150
         L     R15,PCEJQE          GET JQE ADDRESS             @OZ32566 R4163500
         LTR   R15,R15             TEST                                 R4164000
         BZ    RDNOCOM             BRANCH IF NO ACTIVE JOB              R4164500
         USING JQEDSECT,R15        ESTABLISH JQE ADDRESSABILITY         R4165000
         TM    JQEFLAGS,QUEOPCAN   TEST JOB QUEUE FLAGS                 R4165500
         BZ    RDNOCOM             BRANCH IF NO JOB CANCEL              R4166000
         DROP  R15                 DROP JQE ADDRESSABILITY              R4166500
         SPACE 2                                                     R4 R4166600
RDELETE  DS    0H                                                    R4 R4166700
SKIP310  NI    DCTFLAGS,255-DCTDELET-DCTRSTRT    TURN OFF FLAGS      R4 R4167300
*                                  THIS LINE DELETED BY APAR   @OZ29180 R4168000
         ST    RL1,RLSAVE1         SAVE LINK REGISTER                   R4170000
         BAL   RL1,RJOBKILL        DELETE JOB                           R4172000
         L     RL1,RLSAVE1         RESTORE LINK REGISTER                R4174000
         SPACE 1                                                     R4 R4176000
RDNOCOM  TM    PCEID,PCERJEID      IS THIS A REMOTE TERMINAL         R4 R4180800
         BZ    RNOTRJE4            BRANCH IF NOT                     R4 R4181200
         MVC   RCARDLRL,MDCTRECL   SET RECORD LENGTH           @OZ29180 R4181210
         ST    RL1,RLSAVE4         SAVE LINK REG               @OZ43908 R4182000
         ICM   RL1,15,RDPDBSV      GET SAVED PDDB ADDRESS      @OZ43908 R4182500
         BZ    RDNOPDB             NO PDDB, DON'T UPDATE IT    @OZ43908 R4183000
         MVC   PDBLRECL+1-PDBDSECT(1,RL1),RCARDLRL FIX LRECL   @OZ43908 R4183500
         XC    RDPDBSV,RDPDBSV     CLEAN UP PDDB SAVE AREA     @OZ43908 R4184000
RDNOPDB  L     RL1,RLSAVE4         RESTORE LINK REG            @OZ43908 R4184500
         TM    RDRSW,RDREOFSW      TEST END-OF-FILE SWITCH           R4 R4186000
         BZ    4(,RL1)             NORMAL RETURN IF NO END-OF-FILE   R4 R4188000
         BR    RL1                 OTHERWISE, TAKE END OF FILE RETURN   R4192000
         SPACE 1                                               @OZ29180 R4192010
         DROP  R1                  KILL DCT BASE               @OZ29180 R4192020
         SPACE 3                                                     R4 R4194000
RNOTRJE4 TM    BUFECBCC,X'7F'      TEST FOR READ COMPLETE            R4 R4198000
         BZ    RWAIT               BRANCH IF READ NOT COMPLETE          R4200000
         TM    IOBCSW+4,X'3F'      CHANNEL ERRORS...           @OZ48423 R4200100
         BZ    RNTCHERR            BR IF NOT                   @OZ48423 R4200200
         MVI   IOBCSW+3,X'00'      ENSURE I/O ERROR MSG        @OZ48423 R4200300
         B     RCHERR              ENSURE BUFFER READ STOPS    @OZ48423 R4200400
RNTCHERR DS    0H                                              @OZ48423 R4200500
         XI    IOBSIOCC,RSIOCSWS   TEST FOR                             R4202000
         TM    IOBSIOCC,RSIOCC     SUCCESSFUL SIO                       R4204000
         BNZ   RDTEST              BRANCH IF NO CSW STORED              R4206000
RCHERR   DS    0H                                              @OZ48423 R4206500
         XC    IOBCSW(3),IOBCSW    INSURE COMMAND ADDRESS IS ZERO       R4208000
         MVI   BUFECBCC,X'41'      INSURE UNSUCCESSFUL READ COMPLETION  R4210000
         SPACE 1                                                     R4 R4211000
RDTEST   CLI   BUFECBCC,X'7F'      TEST COMPLETION CODE                 R4212000
         BE    RCOMP               BRANCH IF SUCCESSFUL READ COMPLETION R4214000
         TM    IOBCSW+3,RUNIEXCP   TEST CSW IN IOB FOR UNIT EXCEPTION   R4216000
         BZ    RDERR               BR IF READ ERROR                 R41 R4218000
         SPACE 1                                                     R4 R4219000
RDABORT  OI    RDRSW,RDREOFSW      SET READER END-OF-FILE SWITCH        R4220000
         B     RCOMP               CONTINUE PROCESSING              R41 R4221000
         SPACE 1                                                     R4 R4222000
RDERR   $IOERROR (R3)              LOG I/O ERROR                    R41 R4223000
         SPACE 1                                               @OZ48423 R4223500
RCOMP    L     RW,IOBCSW-1         GET CSW CMD ADDR FROM IOB CSW        R4224000
         LA    RW,0(,RW)           CLEAR HIGH-ORDER BYTE                R4226000
         LTR   RW,RW               TEST COMMAND ADDRESS                 R4228000
         BZ    RCOMPZ              BRANCH IF ZERO                       R4230000
         AL    RW,=F'-8'           ADJUST TO POINT TO LAST COMMAND      R4232000
         L     R1,0(,RW)           GET COMMAND DATA ADDRESS             R4234000
         AH    R1,6(RW)            ADD COMMAND BYTE COUNT               R4236000
         SH    R1,IOBCSW+5         SUBTRACT BYTE COUNT RESIDUE          R4238000
         SL    R1,=F'80'           COMPUTE ADDRESS OF LAST CARD         R4240000
         LA    RW,0(,R1)           CLEAR HIGH-ORDER BYTE                R4242000
         SPACE 1                                                     R4 R4243000
RCOMPZ   ST    RW,RBIEND           SAVE FOR COMPARE                     R4244000
         L     RPI,RIBUFST         SET INPUT POINTER                 R4 R4246000
         ALR   RPI,RBI              TO FIRST CARD                    R4 R4247000
         B     RGETEST             GO BACK AND TEST                     R4248000
         EJECT                                                          R4250000
*********************************************************************** R4252000
*                                                                     * R4254000
*        RPUT -- SUBROUTINE TO ADD CARD TO OUTPUT BUFFER              * R4256000
*                                                                     * R4258000
*              FUNCTIONS -- 1) IF OUTPUT BUFFER IS FULL, TERMINATE    * R4260000
*                              WRITE, AND START NEXT OUTPUT BUFFER    * R4262000
*                           2) ADD CARD TO OUTPUT BUFFER              * R4264000
*                                                                     * R4266000
*              LINK REGISTER -- RL1                                   * R4268000
*                                                                     * R4270000
*              EXTERNAL ROUTINE -- RGETBUF                            * R4272000
*                                                                     * R4274000
*********************************************************************** R4276000
         SPACE 3                                                    R41 R4278000
RPUT     LTR   JCT,JCT             TEST FOR JOB                      R4 R4280000
         BZ    RESETYPE            BRANCH IF FLUSHING                   R4282000
         L     R1,RBONEXT          GET OUTPUT POINTER                   R4284000
         TM    RCARDLRC,RDLMSKIP   TEST DELIMITER BYPASS SWITCH      R4 R4286000
         BO    RPUTNOCT            IGNORE DELIMITER IF SET           R4 R4288000
         CLC   0(2,RPI),RDRDLM     TEST FOR DELIMITER CARD           R4 R4290000
         BNE   RPUTEST             BRANCH IF NOT                     R4 R4292000
         TM    RDRSW2,RTPCPY       IF TYPRUN=COPY, BYPASS      @OZ53356 R4292100
         BO    RPUTNOCT             COUNT UPDATE               @OZ53356 R4292200
         TM    RDRSW,RXBJOBSW      TEST FOR EXECUTION BATCHING          R4294000
         BZ    RPUTERM             BRANCH IF NOT                        R4296000
         SPACE 2                                                        R4298000
RPUTEST  TM    RDRSW,RJCLSW        TEST CURRENT MODE                    R4300000
         BNO   RPUTINCR            BR IF NOT JCL FILE               R41 R4302000
         L     RW,RDRIOT           ADDR OF 1ST IOT                  R41 R4302100
         AL    RW,$IOTPDDB         ADDR OF 1ST PDDB                 R41 R4302200
         L     R15,PDBRECCT-PDBDSECT+IOTPDBOJ(,RW)  INCREMENT       R41 R4302300
         LA    R15,1(,R15)                           JCL FILE       R41 R4302400
         ST    R15,PDBRECCT-PDBDSECT+IOTPDBOJ(,RW)    RECORD COUNT  R41 R4302500
         B     RPUTNOCT            BR TO CONTINUE                   R41 R4302600
         SPACE 1                                                    R41 R4302700
RPUTINCR L     RW,JCTJOBIN         INCREMENT                        R41 R4304000
         LA    RW,1(,RW)            SYSIN                               R4306000
         ST    RW,JCTJOBIN           COUNT                              R4308000
         SPACE 2                                                        R4310000
RPUTNOCT NI    RCARDLRC,255-RDLMSKIP  RESET DLM BYPASS SWITCH        R4 R4311000
         LA    R15,0(,RPI)         ELIMINATE TRAILING BLANKS         R4 R4312000
         BCTR  R15,0               SET SCAN LIMIT                       R4314000
         L     R14,=F'-8'          SET SCAN DECREMENT TO -8             R4316000
         LA    RW,80               ASSUME JCL FILE                      R4318000
         TM    RDRSW,RJCLSW        TEST CURRENT MODE                    R4320000
         BO    RPUTJCL             FORCE JCL LRECL TO 80                R4322000
         IC    RW,RCARDLRL         GET LOGICAL RECORD LENGTH            R4324000
         LA    RW,7(,RW)            AND                                 R4326000
         NR    RW,R14                ROUND TO DOUBLE WORD               R4328000
         TM    RCARDLRC,LRC1INUL+LRC1ONUL  TEST RECORD CONTROL BYTE  R4 R4328300
         BO    RPUTJCL             BRANCH IF CONTROL RECORD          R4 R4328500
         OC    RCARDLRC,RINFLAG1   ADD INPUT FLAGS TO LRC            R4 R4328800
         EJECT                                                       R4 R4329000
RPUTJCL  LA    RW,0(RW,RPI)        SET SCAN POINTER TO END OF RECORD    R4330000
         BXLE  RW,R14,RPUTBLNK     DECREMENT POINTER BY EIGHT           R4332000
         CLC   0(8,RW),RKBLANKS    CHECK FOR DOUBLE WORD OF BLANKS      R4334000
         BE    *-10                IF EIGHT BLANKS, KEEP GOING          R4336000
         SLR   RW,R14              NO, INCREMENT POINTER BY EIGHT       R4338000
         L     R14,=F'-1'          RESET SCAN DECREMENT TO -1           R4340000
         BXLE  RW,R14,RPUTBLNK     DECREMENT POINTER BY ONE             R4342000
         CLI   0(RW),C' '          CHECK FOR BLANK                      R4344000
         BE    *-8                 IF BLANK, KEEP GOING                 R4346000
         SR    RW,R15              GENERATE TRUNCATED LENGTH            R4348000
         BP    *+8                 BYPASS SPECIAL PROCESSING            R4350000
RPUTBLNK LA    RW,1                FORCE ALL-BLANK CARD TO ONE BLANK    R4352000
         STC   RW,RCARDLEN         SET CARD LENGTH                      R4354000
         TM    RCARDLRC,LRC1CCTL   TEST RECORD CONTROL BYTE          R4 R4354500
         BZ    SKIP320             BRANCH IF NO CARRIAGE CONTROL     R4 R4355000
         LA    RW,1(,RW)           BUMP LENGTH FOR CARRIAGE CONTROL  R4 R4355500
SKIP320  ALR   RW,R1               ADD CURRENT POINTER                  R4356000
         CL    RW,RBOEND           TEST FOR END OF OUTPUT BUFFER        R4358000
         BL    RPUTCOPY            BRANCH IF NOT END OF BUFFER          R4360000
         MVI   0(R1),X'FF'         SET LAST RCB                         R4362000
         BAL   RL2,RTRACK          GET NEXT TRACK ADDRESS               R4363000
         L     RW,RDROBUF          GET ADDRESS OF BUFFER             R4 R4364000
         ST    RW,PCEBUFAD         SET BUFFER ADDRESS FOR $EXCP      R4 R4366000
         MVC   PCESEEK,RBUFTRK(RW)  SET TRACK ADDRESS FOR $EXCP      R4 R4368000
         ST    R1,RBUFTRK(,RW)     SET CHAIN TRACK                   R4 R4374000
         LR    RW,R1               SAVE NEXT TRACK                      R4376000
         LA    R1,PCEDADCT         GET ADDRESS OF DIRECT-ACCESS DCT     R4378000
        $EXCP  (R1)                INITIATE WRITE                       R4380000
         BAL   RL2,RGETBUF         GET NEXT BUFFER                      R4382000
         SPACE 2                                                     R4 R4384000
RPUTCOPY MVC   0(3,R1),RCARDLEN    SET RECORD LENGTH, LRC, AND LRECL R4 R4386000
         TM    RDRSW,RJCLSW        TEST CURRENT MODE                 R4 R4388000
         BZ    RPUTNJCL            BRANCH IF NOT JCL FILE            R4 R4390000
         MVI   LRCLRECL-LRCDSECT(R1),80  FORCE JCL LRECL TO 80       R4 R4392000
         TM    RCARDLRC,LRC1CCTL   TEST RECORD CONTROL BYTE          R4 R4393000
         BZ    RPUTNOCC            BRANCH IF NO CARRIAGE CONTROL     R4 R4394000
         MVI   LRCLRECL-LRCDSECT(R1),80  FORCE LRECL TO 80.    @OZ26206 R4395000
         SPACE 1                                                     R4 R4396000
RPUTNJCL TM    RCARDLRC,LRC1CCTL   TEST RECORD CONTROL BYTE          R4 R4397000
         BZ    RPUTNOCC            BRANCH IF NO CARRIAGE CONTROL     R4 R4398000
         MVC   LRCCCTL-LRCDSECT(,R1),RDRCCTL  SET CARRIAGE CONTROL   R4 R4399000
         LA    R1,1(,R1)           INCREMENT TEXT ADDRESS            R4 R4400000
         SPACE 1                                                     R4 R4401000
RPUTNOCC SLR   R15,R15             CLEAR REGISTER                    R4 R4402000
         IC    R15,RCARDLEN        GET CARD LENGTH                   R4 R4404000
         EX    R15,RPUTMOVE        MOVE TEXT                         R4 R4406000
         LA    R1,3(R1,R15)        ADVANCE                           R4 R4408000
         ST    R1,RBONEXT           OUTPUT POINTER                   R4 R4410000
         SPACE 1                                                     R4 R4411000
RESETYPE MVI   RCARDLRC,0          RESET CARD TYPE                      R4412000
         BR    RL1                 RETURN                               R4414000
         EJECT                                                          R4420000
RPUTERM  MVI   0(R1),X'FF'         SET LAST RCB                         R4422000
         L     R1,RDROBUF          GET BUFFER ADDRESS                R4 R4423000
         ST    R1,PCEBUFAD         SET BUFFER ADDRESS FOR $EXCP      R4 R4424000
         MVC   PCESEEK,RBUFTRK(R1)  SET TRACK ADDRESS FOR $EXCP      R4 R4426000
         SR    RW,RW               TERMINATE                            R4428000
         ST    RW,RBUFTRK(,R1)      TRACK CHAIN                      R4 R4430000
         LA    R1,PCEDADCT         GET ADDRESS OF DIRECT-ACCESS DCT     R4432000
        $EXCP  (R1)                INITIATE WRITE                       R4434000
         L     R1,RDRIOT           GET ADDRESS OF FIRST IOT             R4436000
         ICM   RW,15,IOTIOT-IOTDSECT(R1)  FIND                          R4438000
         BZ    *+10                        END OF                       R4440000
         LR    R1,RW                        IOT                         R4442000
         B     *-10                          CHAIN                      R4444000
         L     RW,IOTPDDBP-IOTDSECT(,R1)  RW = ADDRESS OF               R4446000
         ALR   RW,R1                       CURRENT PDDB                 R4448000
         L     R0,JCTJOBIN         GET CURRENT CARD COUNT               R4450000
         S     R0,PDBRECCT-PDBDSECT(,RW)  COMPUTE DATA SET CARD COUNT   R4452000
         ST    R0,PDBRECCT-PDBDSECT(,RW)   AND STORE IN PDDB            R4454000
         LA    RW,PDBLENG(,RW)     ADVANCE TO NEXT PDDB                 R4456000
         SLR   RW,R1               GET DISPLACEMENT                     R4458000
         ST    RW,IOTPDDBP-IOTDSECT(,R1)  SAVE PDDB DISPLACEMENT        R4460000
         MVC   RDRDSKEY,=H'1'      SET JCL DATA KEY                     R4462000
         L     RW,RJCLTRAK         RW = NEXT JCL TRACK                  R4464000
         BAL   RL2,RGETBUF         GET NEXT JCL BUFFER                  R4466000
         BR    RL1                 RETURN                               R4468000
         SPACE 3                                                     R4 R4468500
*        EXECUTE  ONLY                                               R4 R4469000
RPUTMOVE MVC   3(*-*,R1),0(RPI)    INSTRUCTION TO MOVE TEXT          R4 R4469100
         EJECT                                                          R4470000
*********************************************************************** R4472000
*                                                                     * R4474000
*        RKEYSCAN -- SUBROUTINE TO SCAN AND PROCESS KEYWORD VALUES    * R4476000
*                                                                     * R4478000
*              FUNCTIONS -- 1) SCAN AND IDENTIFY KEYWORD FROM CALLER  * R4480000
*                              PROVIDED CONTROL CARD SCAN TABLE       * R4482000
*                           2) SCAN KEYWORD VALUE AND CONVERT         * R4484000
*                              ACCORDING TO CONTROL CARD SCAN ENTRY   * R4486000
*                           3) STORE CONVERTED VALUE IN CALLER        * R4488000
*                              PROVIDED OUTPUT TABLE                  * R4490000
*                                                                     * R4492000
*              INPUTS -- R1  = ADDRESS OF CONTROL CARD SCAN TABLE     * R4494000
*                        RW  = POINTER TO PARAMETER FIELD             * R4496000
*                        R14 = BINARY 1                               * R4498000
*                        R15 = ADDRESS OF END OF INPUT FIELD          * R4500000
*                                                                     * R4502000
*              LINK REGISTER -- RL1                                   * R4504000
*                                                                     * R4506000
*              RETURNS -- RL1+0 - ERROR RETURN                        * R4508000
*                         RL1+4 - NORMAL RETURN                       * R4510000
*                                                                     * R4512000
*********************************************************************** R4514000
         SPACE 5                                                        R4516000
RKEYSCAN NULL                      TABLE DIRECTED KEYWORD SCAN ROUTINE  R4518000
         ST    R1,PCER1            SAVE INPUT REGISTER                  R4520000
         ST    RL1,PCEWA           SAVE LINK REGISTER                   R4522000
         BXH   RW,R14,4(RL1)       SEARCH FOR                           R4524000
         CLI   1(RW),C' '           START OF                            R4526000
         BE    *-8                   PARAMETERS                         R4528000
         MVC   RKEYMASK(20),RKEYSWS  INITIALIZE RKEYSCAN SWITCHES    R4 R4529000
         SPACE 3                                                        R4530000
RKEYNEXT LM    R0,R1,RKBLANKS      INITIALIZE SCAN REGISTERS            R4532000
         MVI   RKSCANSW+1,X'4A'    SET FOR ALPHAMERIC SCAN              R4534000
         BAL   RL1,RKSCAN          SCAN KEYWORD                         R4536000
         B     RKEYEXIT            EXIT IF END OF CARD                  R4538000
         STM   R0,R1,RTEMP         SAVE KEYWORD                         R4540000
         CLI   RTEMP+7,C' '        TEST FOR NULL KEYWORD                R4542000
         BE    RKEYNEXT            IGNORE NULL KEYWORDS                 R4544000
         CLI   RTEMP,C' '          TEST FOR OVERFLOW                    R4546000
         BNE   RKERROR             BRANCH IF MORE THAN 7 CHARACTERS     R4548000
         L     RL2,PCER1           RL2 = ADDRESS OF SCAN TABLE          R4550000
         USING RSCANTBL,RL2        ESTABLISH SCAN TABLE ADDRESSABILITY  R4552000
         EJECT                                                       R4 R4554000
RKSERCH1 CLI   RSCANAME,X'FF'      TEST FOR END OF SCAN TABLE           R4556000
         BE    RKERROR             BRANCH IF KEYWORD NOT FOUND          R4558000
         CLC   RSCANAME,RTEMP+1    COMPARE TABLE KEYWORD                R4560000
         BE    RKFOUND             BRANCH IF KEYWORD MATCHES            R4562000
         CLI   RTEMP+6,C' '        TEST KEYWORD LENGTH                  R4564000
         BNE   RKSERCH2            BRANCH IF NOT SINGLE CHARACTER       R4566000
         CLC   RSCANABR,RTEMP+7    COMPARE TABLE ABBREVIATION           R4568000
         BE    RKFOUND             BRANCH IF ABBREVIATION MATCHES       R4570000
         SPACE 1                                                        R4572000
RKSERCH2 LA    RL2,RSCANEXT        GET ADDRESS OF NEXT ENTRY            R4574000
         B     RKSERCH1             AND CONTINUE SEARCHING              R4576000
         SPACE 2                                                        R4578000
RKFOUND  LH    R1,RSCANDSP         GET DISPLACEMENT FROM SCAN TABLE     R4580000
         ALR   R1,JCT              ADD ADDRESS OF OUTPUT TABLE          R4582000
         IC    RL1,RSCANFLG        ISOLATE                              R4584000
         N     RL1,=A(RSCFLPCT)     MAXIMUM NUMBER OF VALUES            R4586000
         BNZ   RKVALUE             BRANCH IF VALUES EXPECTED            R4588000
         MVI   RKEYMASK,X'96'      PRESET OPERATION CODE TO 'OI'        R4590000
         TM    RSCANFLG,RSCFLCOM   TEST OPTION BYTE                     R4592000
         BZ    *+8                 BRANCH IF NO COMPLEMENTATION         R4594000
         MVI   RKEYMASK,X'94'      SET OPERATION CODE TO 'NI'           R4596000
         MVC   RKEYMASK+1(1),RSCANMSK   SET MASK                        R4598000
         EX    R0,RKEYMASK         SET KEYWORD INDICATION            R4 R4600000
         B     RKEYNEXT            PROCESS NEXT KEYWORD                 R4602000
         SPACE 2                                                        R4604000
RKVALUE  CLI   0(RW),C'='          TEST CURRENT CHARACTER               R4606000
         BNE   RKERROR             ILLEGAL IF NOT EQUAL SIGN            R4608000
         CLI   1(RW),C' '          TEST NEXT CHARACTER         @OZ29274 R4609000
         BE    RKERROR             ILLEGAL IF BLANK            @OZ29274 R4609500
         CLI   1(RW),C'('          TEST NEXT CHARACTER                  R4610000
         BNE   *+8                 BRANCH IF NOT LEFT PAREN             R4612000
         ALR   RW,R14              ADVANCE TO NEXT COLUMN               R4614000
         LCR   RL1,RL1             NEGATE FOLLOWING INSTRUCTION         R4616000
         LCR   RL1,RL1             SET COUNT NEGATIVE IF NO PAREN       R4618000
         SPACE 1                                                     R4 R4620000
RKNXTVAL ST    R1,PCEWB            SAVE ADDRESS OF OUTPUT VALUE         R4622000
         ST    RL1,PCEWC           SAVE VALUE COUNT                     R4624000
         SR    R0,R0               CLEAR                                R4626000
         LR    R1,R0                REGISTERS                           R4628000
         TM    RSCANFLG,RSCFLBLK   TEST OPTION BYTE                     R4630000
         BZ    *+8                 BRANCH IF NO BLANK FILL              R4632000
         LM    R0,R1,RKBLANKS      INITIALIZE SCAN REGISTERS            R4634000
         TM    RSCANFLG,RSCFLNUM+RSCFLBIN    TEST OPTION BYTE           R4636000
         BZ    *+8                 BRANCH IF ALPHAMERIC SCAN            R4638000
         MVI   RKSCANSW+1,C'0'     SET FOR NUMERIC SCAN                 R4640000
         BAL   RL1,RKSCAN          SCAN NEXT VALUE                      R4642000
         B     RKERROR             BRANCH IF END OF CARD                R4644000
         TM    RSCANFLG,RSCFLBIN   TEST OPTION BYTE                     R4646000
         BZ    RKEBCDIC            BRANCH IF NO BINARY CONVERSION       R4648000
         STM   R0,R1,RTEMP         STORE VALUE                 @OZ42746 R4650000
         CLC   RSCANAME,=CL7'  CARDS' CARDS PARAMETER USED...  @OZ42746 R4650100
         BNE   RKCKLNE             NO, CHECK FOR 'LINES'       @OZ42746 R4650200
         LA    R0,7                SETUP INPUT LENGTH          @OZ42746 R4650240
         B     RKCKLEN             GO CHECK INPUT LENGTH       @OZ42746 R4650260
RKCKLNE  DS    0H                                              @OZ42746 R4650280
         CLC   RSCANAME,=CL7'  LINES' LINES PARAMETER USED...  @OZ42746 R4650300
         BNE   RKNTLNE             IF NOT, CONTINUE            @OZ42746 R4650400
         SR    R0,R0               CLEAR WORK REG              @OZ42746 R4650500
         IC    R0,RSCANLEN         PICK UP LENGTH VALUE        @OZ42746 R4650600
RKCKLEN  DS    0H                                              @OZ42746 R4650700
         LA    RL1,RTEMP+7         COMPUTE ADDRESS OF          @OZ42746 R4650900
         SLR   RL1,R0               FIRST BYTE TO BE ZERO      @OZ42746 R4651200
         CLI   0(RL1),X'00'        SHOULD BE A ZERO.......     @OZ42746 R4651500
         BNE   RKERROR               IF NOT INPUT TOO LARGE    @OZ42746 R4651800
RKNTLNE  OI    RTEMP+7,X'F0'       CONVERT EBCDIC              @OZ42746 R4652000
         PACK  RTEMP,RTEMP           VALUE                              R4654000
         SR    R0,R0                  TO                                R4656000
         CVB   R1,RTEMP                BINARY                           R4658000
         EJECT                                                       R4 R4659000
RKEBCDIC STM   R0,R1,RTEMP         SAVE VALUE                           R4660000
         SR    R0,R0               GET                                  R4662000
         IC    R0,RSCANLEN          VALUE LENGTH                        R4664000
         BCTR  R0,0                DECREMENT LENGTH                     R4666000
         STC   R0,RKSETMVC+1       SET MOVE LENGTH                      R4668000
         LA    RL1,RTEMP+6         COMPUTE ADDRESS OF                   R4670000
         SLR   RL1,R0               FIRST BYTE OF VALUE - 1             R4672000
         CLI   RSCANLEN,8          IF MAX LENGTH IS EIGHT,           R4 R4672100
         BE    SKIP330              SKIP OVERFLOW TEST               R4 R4672400
         TM    0(RL1),X'BF'        TEST FOR OVERFLOW                    R4674000
         BNZ   RKERROR             BRANCH IF VALUE IS TOO LARGE         R4676000
SKIP330  TM    RSCANFLG,RSCFLEFT   TEST OPTION BYTE                     R4678000
         BZ    RKSETVAL            BRANCH IF NO LEFT JUSTIFICATION      R4680000
         TM    RTEMP+7,X'BF'       TEST LOW-ORDER BYTE                  R4682000
         BZ    RKSETVAL            BRANCH IF NULL VALUE                 R4684000
         STC   R0,RKLFSHFT+1       SET SHIFT LENGTH                     R4686000
         IC    R1,RTEMP            GET FILL CHARACTER                   R4688000
         SPACE 1                                                        R4690000
RKLFTADJ TM    1(RL1),X'BF'        TEST FIRST CHARACTER                 R4692000
         BNZ   RKSETVAL            BRANCH IF NOT NULL VALUE             R4694000
         EX    R0,RKLFSHFT         SHIFT LEFT ONE CHARACTER          R4 R4696000
         STC   R1,RTEMP+7          ADD FILL CHARACTER                   R4698000
         B     RKLFTADJ            TRY AGAIN                            R4700000
         SPACE 2                                                        R4702000
RKSETVAL L     R1,PCEWB            GET ADDRESS OF OUTPUT VALUE          R4704000
         EX    R0,RKSETMVC         SET OUTPUT VALUE                  R4 R4706000
         L     RL1,PCEWC           GET VALUE COUNT                      R4708000
         LTR   RL1,RL1             TEST                                 R4710000
         BNP   RKEYNEXT            BRANCH IF SINGLE VALUE               R4712000
         CLI   0(RW),C')'          TEST NEXT CHARACTER                  R4714000
         BE    RKEYNEXT            BRANCH IF LAST VALUE                 R4716000
         ALR   R1,R0               ADVANCE                              R4718000
         ALR   R1,R14               VALUE ADDRESS                       R4720000
         BCT   RL1,RKNXTVAL        DECREMENT VALUE COUNT AND CONTINUE   R4722000
         SPACE 3                                                        R4724000
RKERROR  L     RL1,PCEWA           RESTORE LINK REGISTER                R4726000
         BR    RL1                 INDICATE SCAN ERROR                  R4728000
         SPACE 3                                                        R4730000
RKEYEXIT L     RL1,PCEWA           RESTORE LINK REGISTER                R4732000
         B     4(,RL1)             INDICATE NORMAL END OF CONTROL CARD  R4734000
         DROP  RL2                 DROP SCAN TABLE ADDRESSABILITY       R4736000
         EJECT                                                          R4738000
RKSCAN   NULL                      CONTROL CARD FIELD SCAN SUBROUTINE   R4740000
         BXH   RW,R14,0(RL1)       GET NEXT CHARACTER                   R4742000
         SPACE 3                                                        R4744000
RKSCAN1  CLI   0(RW),C','          TEST NEXT CHARACTER                  R4746000
         BE    4(,RL1)             BRANCH IF COMMA                      R4748000
         CLI   0(RW),C'='          *                                    R4750000
         BE    4(,RL1)             BRANCH IF EQUAL SIGN                 R4752000
         CLI   0(RW),C')'          *                                    R4754000
         BE    4(,RL1)             BRANCH IF RIGHT PAREN                R4756000
         CLI   0(RW),C' '          *                                    R4758000
         BNE   RKSCNTST            BRANCH IF NOT BLANK               R4 R4760000
         LR    R15,RW              RE-DEFINE END OF CARD                R4762000
         B     4(,RL1)             INDICATE END OF FIELD                R4764000
         SPACE 3                                                     R4 R4765000
RKSCNTST EX    R0,RKSCANSW         COMPARE WITH LOWER LIMIT          R4 R4766000
         BL    RKERROR             ILLEGAL IF LESS                      R4768000
         CLI   0(RW),C'9'          COMPARE WITH UPPER LIMIT             R4770000
         BH    RKERROR             ILLEGAL IF GREATER                   R4772000
         ST    R0,RTEMP            TEST                                 R4774000
         TM    RTEMP,X'BF'          HIGH-ORDER CHARACTER                R4776000
         BNZ   RKERROR             BRANCH IF OVERFLOW                   R4778000
         SLDL  R0,8                SHIFT PARAMETER                      R4780000
         IC    R1,0(,RW)           ADD CURRENT CHARACTER                R4782000
         BXLE  RW,R14,RKSCAN1      GET NEXT CHARACTER                   R4784000
         B     4(,RL1)             END OF CONTROL CARD                  R4786000
         SPACE 5                                                     R4 R4786500
RKEYMASK EQU   $POSTSAV,4          *** MODEL EXECUTE STATEMENT ***   R4 R4786600
RKLFSHFT EQU   $POSTSAV+4,6        *** MODEL EXECUTE STATEMENT ***   R4 R4786700
RKSETMVC EQU   $POSTSAV+10,6       *** MODEL EXECUTE STATEMENT ***   R4 R4786800
RKSCANSW EQU   $POSTSAV+16,4       *** MODEL EXECUTE STATEMENT ***   R4 R4786900
         SPACE 2                                                     R4 R4787000
RKEYSWS  OI    0(R1),*-*           SET KEYWORD INDICATION            R4 R4787100
         MVC   1(*-*,RL1),2(RL1)   SHIFT LEFT ONE CHARACTER          R4 R4787200
         MVC   0(*-*,R1),1(RL1)    SET OUTPUT VALUE                  R4 R4787300
         CLI   0(RW),*-*           COMPARE WITH LOWER LIMIT          R4 R4787400
         EJECT                                                          R4788000
*********************************************************************** R4790000
*                                                                     * R4792000
*        RJOBKILL -- SUBROUTINE TO DELETE CURRENT JOB                 * R4794000
*                                                                     * R4796000
*              FUNCTIONS -- 1) TEST FOR ACTIVE JOB                    * R4798000
*                           2) NOTIFY OPERATOR OF DELETION            * R4800000
*                           3) TERMINATE JOB                          * R4802000
*                           4) PLACE JOB IN PRINT QUEUE               * R4804000
*                                                                     * R4806000
*              LINK REGISTER -- RL1                                   * R4808000
*                                                                     * R4810000
*              EXTERNAL ROUTINES -- 1) RJCTTERM                       * R4812000
*                                   2) RJOBTERM                       * R4814000
*                                                                     * R4816000
*********************************************************************** R4818000
         SPACE 3                                                        R4820000
RJOBKILL LTR   JCT,JCT             KILL JOB NOW BEING READ              R4822000
         BZR   RL1                 RETURN IF NO JCT                     R4824000
        $WTO   RDELMSG,L'RDELMSG,JOB=YES,           NOTIFY OPERATOR    CR4826000
               ROUTE=$LOG+$UR,CLASS=$ALWAYS,PRI=$ST OF JOB KILL     R41 R4828000
         MVI   JCTOPRIO,X'FF'      SET OUTPUT PRIORITY IN JCT           R4830000
         CLC   RDRIOT,=XL4'0'      IS IOT THERE...             @OZ24650 R4831100
         BZ    RJOBNIOT            BR IF NO                    @OZ24650 R4831200
         BAL   RL2,RJCTTERM        PERFORM FINAL UPDATE OF JCT          R4832000
         OI    RDRSW,RJKILL        INDICATE KILLED HERE        @OZ19495 R4833000
         BAL   RL2,RJOBTERM        TERMINATE JOB                        R4834000
         NI    RDRSW,X'FF'-RJKILL  RESET SW                    @OZ19495 R4835000
RJOBNIOT OI    RDRSW,RJFLUSH       TURN ON FLUSH SWITCH        @OZ24650 R4836000
        $QSUSE                     REQUEST ACCESS TO CHECKPOINT DATA    R4837000
         L     R1,PCEJQE           GET JQE ADDRESS             @OZ32566 R4838000
         USING JQEDSECT,R1         ESTABLISH JQE ADDRESSABILITY         R4840000
         NI    JQEFLAGS,255-QUEHOLD1  RESET JOB HOLD STATUS             R4842000
         LA    R0,$OUTPUT          SET UP FOR QUEUE TO $OUTPUT      R41 R4842200
         TM    RDRSW,RJNABORT      PURGE INSTEAD...                 R41 R4842300
         BZ    RJOBKQ              BR IF NO                         R41 R4842400
         LA    R0,$PURGE            ELSE SET UP FOR QUEUE TO $PURGE R41 R4842500
         SPACE 1                                                    R41 R4842600
RJOBKQ  $QMOD  (R1),(R0)           PLACE JOB IN OUTPUT OR PURGE Q   R41 R4842700
         MVC   PCEJQE,$ZEROS       CLEAR JQE ADDRESS           @OZ32566 R4846000
         DROP  R1                  DROP JQE ADDRESSABILITY              R4848000
         BR    RL1                 RETURN                               R4850000
         TITLE 'HASP INPUT SERVICE -- SECOND LEVEL SUBROUTINES'         R4852000
*********************************************************************** R4854000
*                                                                     * R4856000
*        RJCTTERM -- SUBROUTINE TO PERFORM FINAL UPDATE OF JCT        * R4858000
*                                                                     * R4860000
*              FUNCTIONS -- 1) CONVERT TIME ESTIMATE TO SECONDS       * R4862000
*                           2) COMPUTE OUTPUT ESTIMATE FROM LINE      * R4864000
*                              AND CARD ESTIMATES                     * R4866000
*                           3) MOVE NJE-RELATED INFO FOR SMF          * R4867000
*                                                                     * R4868000
*              LINK REGISTER -- RL2                                   * R4870000
*                                                                     * R4872000
*********************************************************************** R4874000
         SPACE 5                                                        R4876000
RJCTTERM L     R1,JCTETIME         CONVERT TIME ESTIMATE                R4878000
         M     R0,=F'60'            FROM MINUTES                        R4880000
         ST    R1,JCTETIME           TO SECONDS                         R4882000
         SPACE 2                                                        R4884000
         L     R1,JCTESTLN         MULTIPLY                             R4886000
         M     R0,=F'1000'          ESTIMATED LINE COUNT                R4888000
         ST    R1,JCTESTLN           BY 1000                            R4890000
         AL    R1,JCTESTPU            AND ADD ESTIMATED CARD COUNT      R4892000
         ST    R1,JCTESOUT             FOR ESTIMATED OUTPUT             R4894000
         BR    RL2                 RETURN                               R4896600
         EJECT                                                          R4898000
*********************************************************************** R4900000
*                                                                     * R4902000
*        RJOBTERM -- SUBROUTINE TO TERMINATE JOB                      * R4904000
*                                                                     * R4906000
*              FUNCTIONS -- 1) ADD TERMINATION MESSAGE                * R4908000
*                           2) TERMINATE AND WRITE LAST OUTPUT BUFFER * R4910000
*                           3) COMPLETE JOB CONTROL TABLE             * R4912000
*                           4) WRITE JCT                              * R4914000
*                           5) WRITE IOT                              * R4916000
*                                                                     * R4918000
*              LINK REGISTER -- RL2                                   * R4920000
*                                                                     * R4922000
*              EXTERNAL ROUTINE -- RPUT                               * R4924000
*                                                                     * R4926000
*********************************************************************** R4928000
         SPACE 5                                                        R4930000
RJOBTERM ST    RL1,RLSAVE2         SAVE                                 R4932000
         ST    RL2,RLSAVE3          RETURN REGISTERS                    R4934000
         ICM   RPI,8,RCARDLRL      SAVE CURRENT CARD LENGTH             R4936000
         ST    RPI,RSAVE2           AND ADDRESS                         R4938000
         TM    JCTJOBFL,JCTTCOPY   TEST JOB FLAGS                       R4939000
         BO    RTRCOPY             BRANCH IF 'TYPRUN=COPY'              R4939500
         LA    RPI,RDRDLM          GET ADDRESS OF DELIMITER CARD        R4940000
         TM    RDRSW,RJCLSW        TEST JCL SWITCH                      R4942000
         BO    *+8                 BRANCH IF PROCESSING JCL             R4944000
         BAL   RL1,RPUT            ADD DELIMITER CARD TO OUTPUT FILE    R4946000
         TM    RDRSW,RXBJOBSW      TEST FOR EXECUTION BATCHING       R4 R4950000
         BZ    RNOBATCH            BRANCH IF NOT EXECUTION BATCHING  R4 R4952000
         OI    RCARDLRC,LRC1ONUL   INDICATE INTERNALLY GENERATED     R4 R4954000
         LA    RPI,=CL80'//'       GET ADDRESS OF NULL CARD          R4 R4956000
         BAL   RL1,RPUT            ADD NULL CARD TO OUTPUT FILE         R4958000
         OI    JCTJOBFL,JCTNOJNL   FORCE NO JOURNAL                     R4960000
         SPACE 1                                                     R4 R4962000
RNOBATCH LA    RPI,RJOBDOC         GET ADDRESS OF MESSAGE            R4 R4964000
         OI    RCARDLRC,LRC1CCTL+LRC1TASA+LRC1INUL+RDLMSKIP SET TYPE R4 R4966000
         MVI   RDRCCTL,C'-'        FORCE TRIPLE SPACE                R4 R4967000
         MVI   RCARDLRL,80         SET CARD LENGTH TO 80                R4968000
         MVI   RINFLAG1,0          CLEAR 'INPUT' FLAG                R4 R4969000
         BAL   RL1,RPUT            ADD JOB DELETED OR CANCELLED MESSAGE R4970000
         SPACE 2                                                        R4972000
RTRCOPY  L     R1,RBONEXT          SET                                  R4974000
         MVI   0(R1),X'FF'          LAST RCB                            R4976000
         L     RW,RDROBUF          GET BUFFER ADDRESS                R4 R4977000
         ST    RW,PCEBUFAD         SET BUFFER ADDRESS FOR $EXCP      R4 R4978000
         MVC   PCESEEK,RBUFTRK(RW)  SET TRACK ADDRESS FOR $EXCP      R4 R4980000
         XC    RBUFTRK(,RW),RBUFTRK(RW)  ZERO CHAIN TRACK            R4 R4982000
         LA    R1,PCEDADCT         GET ADDRESS OF DIRECT-ACCESS DCT     R4984000
        $EXCP  (R1)                INITIATE WRITE                       R4986000
         EJECT                                                       R4 R4990000
         L     R1,RDROCT           GET ADDRESS OF OCT                   R4992000
         LTR   R1,R1               TEST                                 R4994000
         BZ    RNOOCT              BRANCH IF NO OCT                     R4996000
         ST    R1,PCEBUFAD         SET BUFFER ADDRESS                   R4998000
         MVC   PCESEEK,OCTTRACK-OCTDSECT(R1)  SET TRACK ADDRESS         R5000000
         LA    R1,PCEDADCT         SET ADDRESS OF DIRECT-ACCESS DCT     R5002000
        $EXCP  (R1)                INITIATE WRITE OF OCT                R5004000
         SR    R1,R1               INDICATE                             R5006000
         ST    R1,RDROCT            NO OUTPUT CONTROL TABLE             R5008000
         SPACE 1                                                    R41 R5010000
RNOOCT   L     R1,RDRIOT           GET ADDRESS OF FIRST IOT             R5012000
         AL    R1,$IOTPDDB         GET ADDRESS OF FIRST PDDB         R4 R5014000
         SR    R15,R15             GET                                  R5016000
         IC    R15,JCTMCLAS         MESSAGE CLASS                       R5018000
         STC   R15,PDBCLASS-PDBDSECT+IOTPDBOJ(,R1)  SET IN JCL PDDB, R4 R5020000
         STC   R15,PDBCLASS-PDBDSECT+IOTPDBOL(,R1)   JOB LOG PDDB,   R4 R5022000
         STC   R15,PDBCLASS-PDBDSECT+IOTPDBOI(,R1)    JCL IMGS PDDB, R4 R5024000
         STC   R15,PDBCLASS-PDBDSECT+IOTPDBOM(,R1)     AND MSGS PDDB R4 R5026000
         L     R14,$SSVT           GET ADDRESS OF SSVT                  R5028000
         LA    R15,$SVSCAT-SSVT(R14,R15)  GET ADDRESS OF SCAT ENTRY     R5030000
         TM    RDRSW,RJKILL        JOB BEING KILLED...         @OZ19495 R5030100
         BO    *+12                BR IF YES                   @OZ19495 R5030200
         TM    JCTJOBFL,JCTTCOPY   TYPRUN=COPY SPECIFIED...         R41 R5030500
         BZ    RNOCOPY1            BR IF NO                         R41 R5031000
         TM    SCATFLAG-SCADSECT(R15),SCATHOLD  TEST MSGCLASS       R41 R5031500
         BZ    RNOCOPY1            BR IF NOT HELD CLASS             R41 R5032000
         OI    PDBFLAG1-PDBDSECT+IOTPDBOJ(R1),PDB1HOLD HOLD JCL     R41 R5032500
         SPACE 1                                                    R41 R5033000
RNOCOPY1 TM    SCATFLAG-SCADSECT(R15),SCATDUMM  TEST MSGCLASS       R41 R5033500
         BO    RMCLDUMM            BRANCH IF MESSAGE CLASS IS DUMMY     R5034000
         TM    SCATFLAG-SCADSECT(R15),SCATTCEL  TEST FOR TRACK-CELL  R4 R5034100
         BNO   RNOOCT1             BR IF NOT                         R4 R5034200
         OI    PDBFLAG2-PDBDSECT+IOTPDBOI(R1),PDB2TCEL  TRACK-CELL   R4 R5034300
         OI    PDBFLAG2-PDBDSECT+IOTPDBOM(R1),PDB2TCEL   SYSTEM      R4 R5034400
         OI    PDBFLAG2-PDBDSECT+IOTPDBOL(R1),PDB2TCEL    PDDB'S     R4 R5034500
RNOOCT1  DS    0H                                                    R4 R5034600
         TM    JCTJOBFL,JCTNOUPT   TEST JOB FLAGS                       R5036000
         BO    RMCLDUMM            BRANCH IF NO OUTPUT OPTION           R5038000
         TM    JCTJBOPT,JCTNOLOG   TEST JOB OPTIONS                     R5040000
         BO    RNOLOG              BRANCH IF NOLOG OPTION               R5042000
         B     RFORMS              SET JOB FORMS                        R5044000
         EJECT                                                      R41 R5045000
RMCLDUMM OI    PDBFLAG1-PDBDSECT+IOTPDBOJ(R1),PDB1NSOT PRINT NO JCL, R4 R5046000
         OI    PDBFLAG1-PDBDSECT+IOTPDBOI(R1),PDB1NSOT  JCL IMAGES,  R4 R5048000
         OI    PDBFLAG1-PDBDSECT+IOTPDBOM(R1),PDB1NSOT   OR SYS MSGS R4 R5050000
         SPACE 1                                                     R4 R5051000
RNOLOG   OI    PDBFLAG1-PDBDSECT+IOTPDBOL(R1),PDB1NSOT  NO JOB LOG   R4 R5052000
         SPACE 1                                                     R4 R5053000
RFORMS   L     R15,JCTFORMS        GET JOB FORMS                        R5054000
         ST    R15,PDBFORMS-PDBDSECT+IOTPDBOJ(,R1)  SET IN JCL PDDB, R4 R5056000
         ST    R15,PDBFORMS-PDBDSECT+IOTPDBOL(,R1)   JOB LOG PDDB,   R4 R5058000
         ST    R15,PDBFORMS-PDBDSECT+IOTPDBOI(,R1)    JCL IMAGES,    R4 R5060000
         ST    R15,PDBFORMS-PDBDSECT+IOTPDBOM(,R1)     AND SYS MSGS  R4 R5062000
         SPACE 1                                                    R41 R5062100
         OI    PDBFLAG2-PDBDSECT+IOTPDBOJ(R1),PDB2JFMS  SHOW FORMS  R41 R5062200
         OI    PDBFLAG2-PDBDSECT+IOTPDBOL(R1),PDB2JFMS   SET        R41 R5062300
         OI    PDBFLAG2-PDBDSECT+IOTPDBOI(R1),PDB2JFMS    FROM      R41 R5062400
         OI    PDBFLAG2-PDBDSECT+IOTPDBOM(R1),PDB2JFMS     JCT      R41 R5062500
         SPACE 1                                                    R41 R5062600
         TM    JCTFLAG1,JCTBURST   GET DEFAULT BURST OPTION         R41 R5063000
         BZ    RJQECKP             BR IF NO, ELSE SET B=Y IN        R41 R5063500
         OI    PDBFLAG2-PDBDSECT+IOTPDBOJ(R1),PDB2BRST  JCL PDDB    R41 R5064000
         OI    PDBFLAG2-PDBDSECT+IOTPDBOL(R1),PDB2BRST  JOB LOG     R41 R5064500
         OI    PDBFLAG2-PDBDSECT+IOTPDBOI(R1),PDB2BRST  JCL IMG     R41 R5065000
         OI    PDBFLAG2-PDBDSECT+IOTPDBOM(R1),PDB2BRST  AND SMB     R41 R5065500
         SPACE 1                                                    R41 R5066000
RJQECKP $QSUSE                     REQUEST ACCESS TO CKPT DATA      R41 R5067000
         L     R1,PCEJQE           GET JQE ADDRESS             @OZ32566 R5068000
         USING JQEDSECT,R1         ESTABLISH JQE ADDRESSABILITY         R5070000
        $QCKPT (R1)                FORCE CKPT OF JQE                 R4 R5070100
         TM    RDRSW,RXBJOBSW      TEST FOR XBM                @OZ33423 R5070500
         BZ    RNOTXBM             BRANCH IF NOT               @OZ33423 R5070600
         TM    JCTJBOPT,JCTSETUP   TEST FOR XBM WITH SETUP     @OZ33423 R5070700
         BZ    RNOTXBM             BRANCH IF NOT               @OZ33423 R5070800
         OI    JQEFLAGS,QUEHOLD1   ELSE SET JQE HOLD           @OZ33423 R5071000
RNOTXBM  DS    0H                                              @OZ33423 R5071500
         MVC   JQEPRTRT,JCTPROUT   SET PRINT AND                        R5072000
         MVC   JQEPUNRT,JCTPUOUT    PUNCH ROUTE CODES                   R5074000
         TM    RDRSW2,RJCLH        IF IMMEDIATE HOLD                 R4 R5074500
         BZ    RNOHOLD               SPECIFIED, TURN ON JQE          R4 R5074600
         OI    JQEFLAGS,QUEHOLD1     HOLD BIT & ISSUE $WTO           R4 R5074700
        $WTO   RJOBHELD,L'RJOBHELD,JOB=YES, ISSUE 'JOB HELD' MSG     R4CR5074800
               ROUTE=$LOG+$UR+$MAIN,CLASS=$NORMAL,PRI=$ST            R4 R5074900
         DROP  R1                  KILL JQE ADDRESSABILITY          R41 R5075000
         EJECT                                                      R41 R5075100
RNOHOLD  TM    RDRSW,RJKILL        JOB BEING KILLED...         @OZ19495 R5075200
         BO    *+12                BR IF YES                   @OZ19495 R5075210
         TM    JCTJOBFL,JCTTCOPY   TYPRUN=COPY SPECIFIED...    @OZ19495 R5075220
         BZ    RNOCOPY2            BR IF NO                         R41 R5075300
         TM    RDRSW,RJNABORT      ARE WE PURGING...           @OZ19495 R5075310
         BO    RNOCOPY2            IF YES SKIP HOLD ROUTINE    @OZ19495 R5075320
         L     RL2,RDRIOT          GET ADDR OF 1ST IOT              R41 R5075400
         USING IOTDSECT,RL2        PROVIDE IOT ADDRESSABILITY       R41 R5075500
         LA    RW,IOTPDBOJ(,RL2)   GET IOT ADDR + PDDB DISPL        R41 R5075600
         AL    RW,$IOTPDDB         GET ADDR OF JCL PDDB             R41 R5075700
         USING PDBDSECT,RW         PROVIDE PDDB ADDRESSABILITY      R41 R5075800
         TM    PDBFLAG1,PDB1HOLD   DATA SET TO BE HELD...           R41 R5075900
         BZ    RNOCOPY2            BR IF NO                         R41 R5076000
         TM    PDBFLAG1,PDB1NSOT   DATA SET PRINTABLE...            R41 R5076100
         BO    RNOCOPY2            BR IF NO                         R41 R5076200
         NI    PDBFLAG1,255-PDB1HOLD  RESET HOLD INDICATOR          R41 R5076300
         LH    R0,IOTLENG          GET CSA                          R41 R5076400
*              THIS LINE DELETED BY APAR NUMBER              * @OZ20045 R5076500
         GETMAIN RC,LV=(R0),SP=231   NEW (SPIN) IOT            @OZ20045 R5076600
         LTR   R15,R15             GETMAIN SUCCESSFUL...            R41 R5076700
         BNZ   RNOCOPY2            BR IF NO                         R41 R5076800
         LR    RL1,R1              RELOAD NEW IOT ADDRESS           R41 R5076900
         LR    R0,RL1              COPY 1ST IOT                     R41 R5077000
         LH    R1,IOTLENG           (UP TO TRACK                    R41 R5077100
         LR    R14,RL2               GROUP MAP)                     R41 R5077200
         LA    R15,IOTTGMAP-IOTDSECT  TO NEW                        R41 R5077300
         MVCL  R0,R14                  (SPIN) IOT                   R41 R5077400
        $BFRBLD  (RL1)             REFRESH IOB                 @OZ20045 R5077450
        $TRACK IOTMSTAB            GET TRACK ADDR FOR HQT           R41 R5077500
         ST    R1,JCTHQT           SET HQT TRACK ADDR IN JCT        R41 R5077600
         DROP  RL2                 RE-SET IOT ADDRESSABILITY        R41 R5077700
         USING IOTDSECT,RL1         FOR NEW IOT                     R41 R5077800
         XI    IOTFLAG1,IOT1ALOC+IOT1SPIN  SHOW SPIN/NON-ALLOC      R41 R5077900
         LR    R1,RL1                MOVE JCL                       R41 R5078000
         AL    R1,$IOTPDDB            DATA SET PDDB                 R41 R5078100
         MVC   0(PDBLENG,R1),PDBDSECT  TO NEW IOT                   R41 R5078200
         OI    PDBFLAG1-PDBDSECT(R1),PDB1SPIN+PDB1HOLD+PDB1PSO      R41 R5078300
         OI    PDBFLAG1,PDB1NSOT   NULLIFY PDDB IN OLD IOT          R41 R5078400
         L     R0,JCTHQT           GET HQT TRACK ADDRESS            R41 R5078500
         ST    R0,IOTHQT1          SET HQT TRK ADDR IN IOT          R41 R5078600
         ST    R0,IOTHQT           INDICATE 1ST HQT                 R41 R5078700
         LA    R1,PDBLENG(,R1)     SET POINTER                      R41 R5078800
         SLR   R1,RL1               TO NEXT                         R41 R5078900
         ST    R1,IOTPDDBP           AVAILABLE PDDB                 R41 R5079000
         LA    R1,1                INITIALIZE HQR                   R41 R5079100
         STH   R1,JCTHQRCT          COUNT IN JCT                    R41 R5079200
         STH   R1,IOTHQRCT           AND IN IOT                     R41 R5079300
         MVC   IOTJQOFF,JCTJQE     SET OFFSET OF JQE IN IOT FOR XEQ R41 R5079400
         SPACE 1                                                    R41 R5079500
RIOTTRK  LA    R1,IOTMSTAB-IOTDSECT(,RL2)  GET ADDR OF 1ST IOT      R41 R5079600
        $TRACK (R1)                GET TRACK ADDR FOR NEW IOT       R41 R5079700
         ST    R1,JCTSPIOT         SET SPIN IOT TRK ADDR IN JCT     R41 R5079800
         ST    R1,IOTTRACK          AND IN OWN IOT                  R41 R5079900
         ST    R1,PCESEEK          SET TRACK ADDRESS FOR $EXCP      R41 R5080000
         ST    RL1,PCEBUFAD        SET BUFFER ADDRESS FOR $EXCP     R41 R5080100
         LA    R1,PCEDADCT         GET DIRECT ACCESS DCT ADDRESS    R41 R5080200
         ST    R13,PCEIOEWF        TELL CHANNEL END NOT TO FREE@OZ20045 R5080240
        $EXCP  (R1),WAIT=YES       WRITE SPIN IOT                   R41 R5080300
         BM    RIOTTRK             BR IF I/O ERROR TO GET NEW TRACK R41 R5080400
         XC    PCEIOEWF(4),PCEIOEWF  CLEAR EWF                 @OZ20045 R5080420
         L     RW,$SSVT            GET SSVT ADDRESS                 R41 R5080500
         USING SSVT,RW             PROVIDE SSVT ADDRESSABILITY      R41 R5080600
         L     R0,$SVSPIOT         GET SPIN/HOLD IOT QUEUE HEAD     R41 R5080700
         SPACE 1                                                    R41 R5080800
RQUEHOLD ST    R0,IOTIOT           QUEUE NEW                        R41 R5080900
         CS    R0,RL1,$SVSPIOT      IOT TO                          R41 R5081000
         BNE   RQUEHOLD              SPIN/HOLD QUEUE                R41 R5081100
         SPACE 1                                                    R41 R5081200
         OI    $SVJOB,X'80'        SIMULATE                         R41 R5081300
         L     R1,$EXECPCE          HASPXEQ                         R41 R5081400
        $POST  (R1),JOB              $$POST                         R41 R5081500
         EJECT                                                 @OZ36864 R5081510
***************************************************************@OZ36864 R5081520
*                                                              @OZ36864 R5081530
*        WAIT FOR SPIN/HOLD PROCESSING TO COMPLETE.  THIS      @OZ36864 R5081540
*        ENSURES THAT THE JOB CANNOT PURGE DURING SPIN/HOLD    @OZ36864 R5081550
*        PROCESSING.                                           @OZ36864 R5081560
*                                                              @OZ36864 R5081570
***************************************************************@OZ36864 R5081580
         SPACE 1                                               @OZ36864 R5081590
RQTEST   LA    R15,$SVSPIOT-(IOTIOT-IOTDSECT) SCAN $SVSPIOT    @OZ36864 R5081600
RQTEST1  ICM   R15,15,IOTIOT-IOTDSECT(R15) IF QUEUE EMPTY...   @OZ36864 R5081610
         BZ    RQTEST2             ...BR TO TEST $SVFIFOQ      @OZ36864 R5081620
         CLC   JCTJQE,IOTJQOFF-IOTDSECT(R15) IOT FOR THIS JOB  @OZ36864 R5081630
         BE    RQWAIT              YES, BR TO WAIT             @OZ36864 R5081640
         B     RQTEST1             NO, CHECK REMAINING IOTS    @OZ36864 R5081650
         SPACE 1                                               @OZ36864 R5081660
RQTEST2  LA    R15,$SVFIFOQ-(IOTIOT-IOTDSECT) SCAN $SVFIFOQ    @OZ36864 R5081670
RQTEST3  ICM   R15,15,IOTIOT-IOTDSECT(R15)  IF QUEUE EMPTY...  @OZ36864 R5081680
         BZ    RNOCOPY2            GO QUEUE JOB FOR OUTPUT     @OZ36864 R5081690
         CLC   JCTJQE,IOTJQOFF-IOTDSECT(R15) IOT FOR THIS JOB  @OZ36864 R5081700
         BNE   RQTEST3             NO, CHECK REMAINING IOTS    @OZ36864 R5081710
         SPACE 1                                               @OZ36864 R5081720
RQWAIT  $WAIT  ABIT                WAIT A BIT                  @OZ36864 R5081730
         B     RQTEST              BR TO TRY AGAIN             @OZ36864 R5081740
         SPACE 1                                               @OZ36864 R5081750
         DROP  RL1,RW              KILL IOT/SSVT ADDRESSABILITY@OZ36864 R5081760
         SPACE 1                                               @OZ36864 R5081770
RNOCOPY2 XC    JCTJOBIN,JCTJOBIN   CLEAR JCTJOBIN                   R41 R5081800
        $TIME                      GET CURRENT TIME                     R5090300
         STM   R0,R1,JCTRDROF      SET READER END TIME AND DATE         R5090400
         SPACE 2                                                        R5090500
RJCTCK   CLI   BUFECBCC-BUFDSECT(JCT),0  TEST I/O STATUS OF JCT         R5090600
         BNE   RJCTWR              BRANCH IF I/O IS NOT ACTIVE          R5090700
        $WAIT  IO                  WAIT FOR I/O TO COMPLETE             R5090800
         B     RJCTCK              GO BACK AND TRY AGAIN                R5090900
         SPACE 2                                                     R4 R5091000
RJCTWR   ST    JCT,PCEBUFAD        SET BUFFER ADDRESS FOR $EXCP         R5091100
         L     R1,PCEJQE           GET JQE ADDRESS             @OZ32566 R5091200
         USING JQEDSECT,R1         ESTABLISH JQE ADDRESSABILITY         R5091300
         MVC   PCESEEK,JQETRAK     SET TRACK ADDRESS FOR $EXCP          R5091400
         DROP  R1                  DROP JQE ADDRESSABILITY              R5092000
         LA    R1,PCEDADCT         GET ADDRESS OF DIRECT-ACCESS DCT     R5094000
        $EXCP  (R1)                INITIATE WRITE OF JCT                R5096000
         SLR   JCT,JCT             INDICATE NO JCT                      R5098000
         L     R1,RDRIOT           GET ADDRESS OF IOT                R4 R5100000
         SPACE 2                                                     R4 R5100500
RIOTCK   CLI   BUFECBCC-BUFDSECT(R1),0  TEST I/O STATUS                 R5100800
         BNE   RIOTWR              BRANCH IF I/O IS NOT ACTIVE          R5101000
        $WAIT  IO                  WAIF FOR I/O TO COMPLETE             R5101300
         B     RIOTCK              GO BACK AND TRY AGAIN                R5101500
         SPACE 2                                                     R4 R5101800
RIOTWR   ICM   R1,15,RDRIOT        GET ADDRESS OF NEXT IOT              R5102000
         BZ    RSYNCH              BRANCH IF DONE                       R5104000
         MVC   RDRIOT,IOTIOT-IOTDSECT(R1)  REMOVE IOT FROM CHAIN        R5106000
         ST    JCT,IOTIOT-IOTDSECT(,R1)  CLEAR CHAIN FIELD              R5108000
         ST    R1,PCEBUFAD         SET BUFFER ADDRESS                   R5110000
         MVC   PCESEEK,IOTTRACK-IOTDSECT(R1)  SET TRACK ADDRESS         R5112000
         LA    R1,PCEDADCT         GET ADDRESS OF DIRECT-ACCESS DCT     R5114000
        $EXCP  (R1)                INITIATE WRITE OF IOT                R5116000
RIOTWTR  CLI   PCEBUFCT,20         IS BUF COUNT UP TO 20...    @OZ39976 R5116500
         BNH   RIOTWR              NO, WRITE ANOTHER(IF ANY)   @OZ39976 R5117000
         $WAIT BUF                 WAIT IF 20 BUFFS THIS D/T   @OZ39976 R5117500
         B     RIOTWTR             TRY AGAIN                   @OZ39976 R5118000
         SPACE 2                                                     R4 R5118100
RSYNCH   CLI   PCEBUFCT,0          TEST ACTIVE BUFFER COUNT             R5122000
         BE    RTERMJOB            BRANCH IF ZERO                       R5124000
        $WAIT  BUF                 WAIT FOR COMPLETION OF ALL I/O       R5126000
         B     RSYNCH              TRY AGAIN                            R5128000
         SPACE 2                                                        R5130000
RTERMJOB MVC   RPRIORTY,=CL2' '    RESET PRIORITY                    R4 R5132000
         NI    RDRSW,255-RXBJOBSW  RESET XEQ BATCH JOB SWITCH           R5136000
         L     RPI,RSAVE2          RESTORE INPUT POINTER                R5138000
         STCM  RPI,8,RCARDLRL       AND CARD LENGTH                     R5140000
         LA    RPI,0(,RPI)         CLEAR HIGH-ORDER BYTE                R5142000
         L     RL1,RLSAVE2         RESTORE                              R5144000
         L     RL2,RLSAVE3          RETURN REGISTERS                    R5146000
         BR    RL2                   AND RETURN                         R5148000
         DROP  RBI                 KILL IOB ADDRESSABILITY              R5150000
         EJECT                                                          R5153200
*********************************************************************** R5153300
*                                                                     * R5153400
*        RTRACK -- SUBROUTINE TO ACQUIRE TRACK ADDRESS                * R5153500
*                                                                     * R5153600
*              FUNCTION -- TO ACQUIRE TRACK ADDRESS AND CHECKPOINT    * R5153700
*                          ALLOCATION IOT WHEN NECESSARY              * R5153800
*                                                                     * R5153900
*              OUTPUT -- R1 = TRACK ADDRESS                           * R5154000
*                                                                     * R5154100
*              LINK REGISTER -- RL2                                   * R5154200
*                                                                     * R5154300
*********************************************************************** R5154400
         SPACE 5                                                        R5154500
RTRACK   L     R1,RDRIOT           GET ADDRESS OF ALLOCATION IOT        R5154600
         LA    R1,IOTMSTAB-IOTDSECT(,R1) GET ADDR OF MASTER TAB      R4 R5154700
        $TRACK (R1)                GET NEXT TRACK ADDRESS               R5154800
         BNZR  RL2                 RETURN IF NOT NEW TRACK GROUP        R5154900
         SPACE 2                                                        R5155000
         L     R1,RDRIOT           GET ADDRESS OF ALLOCATION IOT        R5155100
RTRACKCK CLI   BUFECBCC-BUFDSECT(R1),0  TEST I/O STATUS                 R5155200
         BNE   RTRACKWR            BRANCH IF I/O IS NOT ACTIVE          R5155300
        $WAIT  IO                  WAIT FOR I/O TO COMPLETE             R5155400
         B     RTRACKCK            GO BACK AND TRY AGAIN                R5155500
         SPACE 3                                                     R4 R5155600
RTRACKWR ST    R1,PCEBUFAD         SET IOT BUFFER ADDRESS               R5155700
         MVC   PCESEEK,IOTTRACK-IOTDSECT(R1)  SET TRACK ADDRESS         R5155800
         ST    SAVE,PCEIOEWF       PREVENT BUFFER RELEASE               R5155900
         LA    R1,PCEDADCT         GET ADDRESS OF DIRECT-ACCESS DCT     R5156000
        $EXCP  (R1)                INITIATE WRITE OF IOT                R5156100
         SLR   R1,R1               RESET DIRECT-ACCESS                  R5156200
         ST    R1,PCEIOEWF          EVENT WAIT FIELD                    R5156300
         L     R1,RDRIOT           RESTORE TRACK ADDRESS TO OUTPUT      R5156400
         L     R1,TABMTTR-TABDSECT+IOTMSTAB-IOTDSECT(,R1)  REGISTER  R4 R5156500
         BR    RL2                 RETURN                               R5156600
         EJECT                                                          R5156700
*********************************************************************** R5156800
*                                                                     * R5156900
*        RGETBUF -- SUBROUTINE TO INITIALIZE OUTPUT BUFFERS           * R5158000
*                                                                     * R5160000
*              FUNCTION -- ACQUIRE AND INITIALIZE OUTPUT BUFFER       * R5162000
*                                                                     * R5164000
*              INPUT -- RW = TRACK ADDRESS                            * R5166000
*                                                                     * R5168000
*              OUTPUT -- RBO = ADDRESS OF OUTPUT BUFFER               * R5170000
*                                                                     * R5172000
*              LINK REGISTER -- RL2                                   * R5174000
*                                                                     * R5176000
*********************************************************************** R5178000
         SPACE 5                                               @OZ36957 R5179000
RGETBUF  CLI   PCEBUFCT,20         IS BUF COUNT UP TO 20...    @OZ36957 R5180000
         BNH   RGETOK              BR IF NO TO GET BUFFER      @OZ36957 R5180500
        $WAIT  BUF                 WAIT IF 20 BUFFS THIS D/T   @OZ36957 R5181000
         B     RGETBUF             TRY AGAIN                   @OZ36957 R5181500
RGETOK  $GETBUF WAIT=YES           GET OUTPUT BUFFER           @OZ36957 R5182000
         ST    R1,RDROBUF          SAVE BUFFER ADDRESS               R4 R5184000
         LA    R14,IOTSTART-IOTDSECT(,R1) SET CLEAR REG        @OZ41701 R5184100
         LH    R15,$BUFSIZE        SET BUFFER LENGTH           @OZ41701 R5184200
         SR    R1,R1               CLEAR WORK REG              @OZ41701 R5184300
         MVCL  R14,R0              CLEAR OUTPUT BUFFER         @OZ41701 R5184400
         L     R1,RDROBUF          RESTORE REG1                @OZ41701 R5184500
         ST    RW,RBUFTRK(,R1)     SET TRACK ADDRESS IN BUFFER       R4 R5186000
         LTR   JCT,JCT             TEST FOR JCT                         R5188000
         BZ    *+10                BRANCH IF NO JCT                     R5190000
         MVC   HDBJBKEY-BUFDSECT(,R1),JCTJBKEY  SET JOB KEY          R4 R5192000
         MVC   HDBPDDBK-BUFDSECT(,R1),RDRDSKEY   AND DATA SET KEY    R4 R5194000
         LA    R15,BUFSTART-BUFDSECT-3(,R1)  COMPUTE END             R4 R5196000
         AH    R15,$BUFSIZE                   OF BUFFER              R4 R5197000
         ST    R15,RBOEND          SAVE FOR TEST                     R4 R5198000
         LA    R1,ROBUFST(,R1)     SET UP                            R4 R5200000
         ST    R1,RBONEXT           OUTPUT POINTER                      R5202000
         BR    RL2                 RETURN                               R5204000
         TITLE 'HASP INPUT SERVICE -- CONSTANTS AND OPERATOR MESSAGES'  R5262000
*                                                                       R5264000
*                             READER CONSTANTS AND OPERATOR MESSAGES    R5266000
*                                                                       R5268000
         SPACE 3                                                        R5270000
RUSERID  EQU   $POSTSAV,9          TSU USERID WORK AREA              R4 R5272000
RDEST    EQU   $POSTSAV,8          DESTINATION WORK AREA             R4 R5274000
         DS    0D                                                    R4 R5276000
RKBLANKS DC    CL8' '              BLANK CONSTANT                    R4 R5278000
RSYSINCD DC    CL80'//SYSIN     DD *               GENERATED STATEMENT' R5280000
RJOBHELD $MSG  101,'HELD'          JOB HELD MSG                      R4 R5281000
RFLMSG   $MSG  125,'DEV NAME SKIPPING FOR JOB CARD'                     R5282000
RJERRMSG $MSG  110,'-- ILLEGAL JOB CARD '                               R5284000
RDELMSG  $MSG  119,'DELETED'                                            R5286000
RJOBDOC  DC    C'******** JOB DELETED BY JES2 OR CANCELLED'          R4 R5288000
         DC    C' BY OPERATOR BEFORE EXECUTION ******** '            R4 R5290000
         EJECT                                                 @OZ19494 R5290500
*                                                                       R5294000
*                             MODEL FOR PDDB                            R5296000
*                                                                       R5298000
         SPACE 3                                                        R5300000
RPDBMODL DS    0D                                                       R5302000
         DC    AL1(PDB1NULL)       FLAG BYTE                            R5304000
         DC    AL1(0)              RECORD FORMAT                        R5306000
         DC    H'0'                MAXIMUM LOGICAL RECORD LENGTH        R5308000
         DC    F'0'                STARTING TRACK ADDRESS               R5310000
         DC    H'0'                DATA SET KEY                         R5312000
         DC    C'A'                DEFAULT SYSOUT CLASS              R4 R5314000
         DC    AL1(1)              DEFAULT COPY COUNT                   R5316000
         DC    AL1(0,0)            DESTINATION                       R4 R5318000
         DC    AL1(0,0,0)          CPU ID, SECURITY, 3211 INDEX         R5320000
         DC    AL1(DCBFNCBI)       3525 FUNCTION BYTE                   R5322000
         DC    AL1(0)              FLAG BYTE 2                       R4 R5322100
         DC    X'00'               DEFAULT COMPACTION TABLE NUMBER  R41 R5322200
         DC    F'0'                RECORD COUNT                         R5326000
         DC    XL4'00'             FORMS NUMBER                         R5328000
         DC    C'****'             FCB ID                               R5330000
         DC    C'****'             UCS ID                               R5332000
         DC    CL8' '              USER WRITER NAME                     R5334000
         DC    XL8'00'             CHECKPOINT RBA                       R5336000
         DC    6CL4'****'          N/I PRINT CHAR1-4, FLASH, MODF    R4 R5336100
         DC    X'FF'               N/I PRINT FLASHC            @OZ39629 R5336200
         DC    AL1(0)              MODFT                       @OZ39629 R5336250
         DC    8AL1(0)             N/I PRINT COPY GROUPS             R4 R5336300
         DC    X'FFFF'             LOGICAL PAGES/CHECKPOINT    @OZ19494 R5336400
         DC    X'FFFF'             LINES/LOGICAL PAGE          @OZ19494 R5336500
         DC    XL14'0'             RESERVED                    @OZ19494 R5336600
         DS    0F                  FORCE TO FULLWORD BOUNDARY  @OZ19494 R5336700
         EJECT                                                          R5338000
         DS    0D                  INPUT PROCESSOR LITERAL POOL         R5340000
         LTORG                                                          R5342000
         SPACE 3                                                        R5348100
$RDREND  DS    0D                  DEFINE END OF CSECT                  R5348200
$DLENGTH $DLENGTH                  COMPUTE CONTROL SECTION LENGTH       R5348300
HASPRDRO CSECT                     DEFINE SUBROUTINE CSECT              R5350000
$RDROEND DS    0D                  DEFINE END OF CSECT                  R5352000
$OLENGTH $DLENGTH HEADER=O         COMPUTE CONTROL SECTION LENGTH       R5354000
HASPRSCN CSECT                     DEFINE ACCOUNTING FIELD SCAN CSECT   R5356000
$SLENGTH $DLENGTH HEADER=S         COMPUTE CONTROL SECTION LENGTH       R5358000
APARNUM  DC    CL5'53442'          APAR NUMBER                          R5359998
         END                                                            R5360000
