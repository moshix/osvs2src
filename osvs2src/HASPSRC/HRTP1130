               TITLE 'RTP1130 PROLOGUE'                                 Y0001000
*********************************************************************** Y0002000
*                                                                     * Y0003000
* MODULE NAME = HRTP1130                                              * Y0004000
*                                                                     * Y0005000
* DESCRIPTIVE NAME = RTP1130 (1130 MULTILEAVING RJE PROGRAM)          * Y0006000
*                                                                     * Y0007000
* COPYRIGHT = NONE                                                    * Y0008000
*                                                                     * Y0009000
* STATUS = OS/VS2 RELEASE 2, LEVEL 0                                  * Y0010000
*                                                                     * Y0011000
* FUNCTION = TO PROVIDE THE 1130 WORK STATION COMPONENT FOR RJE       * Y0012000
*            IMPLEMENTATION USING THE MULTILEAVING DISCIPLINE OF      * Y0013000
*            RTAM. THIS PROGRAM EXTENDS TO THE REMOTE LOCATION THE    * Y0014000
*            FACILITIES OF LOCAL DEVICES SUCH AS OPERATOR CONSOLE     * Y0015000
*            TYPEWITER, CARD READER(S), CARD PUNCH(ES), HIGH SPEED    * Y0016000
*            LINE PRINTER(S). THIS MODULE OPERATES IN A STAND-ALONE   * Y0017000
*            ENVIRONMENT AND REQUIRES NO EXTERNAL SUPPORT PROGRAM.    * Y0018000
*            THE SOURCE CODE IS ASSEMBLED USING THE OS/VS2 ASSEMBLER  * Y0019000
*            F PROGRAM IN ORDER TO SHARE THE GENERATION PARAMETERS    * Y0020000
*            USED TO QUALIFY THE HOST SYSTEM. FOR AN EXPLANATION OF   * Y0021000
*            THE INTERNAL PROGRAM OPERATION SEE OS/VS2 JES2 LOGIC     * Y0022000
*            MANUALS.                                                 * Y0023000
*                                                                     * Y0024000
* NOTES = SEE BELOW                                                   * Y0025000
*                                                                     * Y0026000
* DEPENDENCIES = RTAM MULTILEAVING PROTOCOL                           * Y0027000
*                                                                     * Y0028000
* RESTRICTIONS = NONE                                                 * Y0029000
*                                                                     * Y0030000
* REGISTER CONVENTIONS = SEE SYMBOLIC REGISTERS UNDER EQUATES         * Y0031000
*                                                                     * Y0032000
* PATCH LABEL = NONE                                                  * Y0033000
*                                                                     * Y0034000
* MODULE TYPE = STAND-ALONE PROGRAM                                   * Y0035000
*                                                                     * Y0036000
* PROCESSOR = ASSEMBLER F                                             * Y0037000
*                                                                     * Y0038000
* MODULE SIZE = AS SPECIFIED BY RMTGEN PARAMETER &MACHSIZ             * Y0039000
*                                                                     * Y0040000
* ATTRIBUTES = STAND-ALONE PROGRAM                                    * Y0041000
*                                                                     * Y0042000
* ENTRY POINT = RTPETNI                                               * Y0043000
*                                                                     * Y0044000
* PURPOSE = SEE FUNCTION                                              * Y0045000
*                                                                     * Y0046000
* LINKAGE = ENTERED FROM LOADER (RTPLOAD) VIA END CARD LABEL          * Y0047000
*                                                                     * Y0048000
* INPUT =  (1) OS/VS2 JOBSTREAM VIA 1442 AND/OR 2501 CARD READER      * Y0049000
*          (2) OPERATOR COMMANDS VIA CONSOLE KEYBOARD OR CARD READER  * Y0050000
*          (3) MULTILEAVING BLOCKS VIA T/P LINE FROM HOST PROCESSOR   * Y0051000
*                                                                     * Y0052000
* OUTPUT = (1) SYSTEM DIRECTED OUTPUT FROM HOST PROCESSOR VIA LINE    * Y0053000
*              PRINTER(S) (1132 AND/OR 1403), CONSOLE TYPEWRITER,     * Y0054000
*              AND CARD PUNCH (1442)                                  * Y0055000
*          (2) RESPONSES TO OPERATOR COMMANDS VIA TYPEWRITER OR       * Y0056000
*              LINE PRINTER(S)                                        * Y0057000
*          (3) MULTILEAVING BLOCKS VIA T/P LINE TO HOST PROCESSOR     * Y0058000
*          (4) LOCALLY GENERATED OPERATOR MESSAGES                    * Y0059000
*                                                                     * Y0060000
* EXIT-NORMAL = WAIT AT LOCATION X'10' WITH AC SET TO X'FFFF' WHEN    * Y0061000
*               A 'DISCONNECT' CONTROL RECORD RECEIVED FROM RTAM      * Y0062000
*                                                                     * Y0063000
* EXIT-ERROR  = WAIT AT LOCATION X'10' WITH AC SET TO X'0000' WHEN    * Y0064000
*               NO CONSOLE BUFFERS AVAILABLE AT INITIALIZATION TIME   * Y0065000
*                                                                     * Y0066000
* EXTERNAL REFERNCES = NONE                                           * Y0067000
*                                                                     * Y0068000
* TABLES = SEE LISTING                                                * Y0069000
*                                                                     * Y0070000
* MACROS = SEE LISTING                                                * Y0071000
*                                                                     * Y0072000
* CHANGE ACTIVITY = OZ13222                                           * Y0073000
*                                                                     * Y0074000
*********************************************************************** Y0075000
         TITLE '1130 MACRO DEFINITIONS (11/7/70)'                       Y0076000
*********************************************************************** Y0077000
*                                                                     * Y0078000
* TITLE - OS/360 MACRO DEFINTIONS FOR 1130 INSTRUCTIONS               * Y0079000
*                                                                     * Y0080000
* GENERAL DESCRIPTION -                                               * Y0081000
*                                                                     * Y0082000
*  THE MACROS DEFINED BELOW ATTEMPT TO ALLOW 1130 PROGRAMS TO BE      * Y0083000
*  ASSEMBLED ON AN IBM 360 USING THE OS/360 ASSEMBLER OR IT'S         * Y0084000
*  EQUIVALENT UNDER OTHER OPERATING SYSTEMS.                          * Y0085000
*                                                                     * Y0086000
*  THE OBJECT DECK PRODUCED BY THE ASSEMBLER IS INCOMPATIBLE WITH     * Y0087000
*  NORMAL 1130 LOADER AND THEREFORE MUST BE PROCESSED BY A SPECIAL    * Y0088000
*  1130 LOADER COGNIZANT OF THE 360 FORMAT.                           * Y0089000
*                                                                     * Y0090000
* MACRO INSTRUCTION FORMAT                                            * Y0091000
*                                                                     * Y0092000
*  THE GENERAL FORMAT OF 1130 INSTRUCTIONS TO BE ASSEMBLED WITH       * Y0093000
*  THE MACRO SET IS...                                                * Y0094000
*                                                                     * Y0095000
*                                                                     * Y0096000
*                        LABEL $OP ADDR,TAG,FMT,MOD                   * Y0097000
*                                                                     * Y0098000
*  WHERE                                                              * Y0099000
*              LABEL = THE STATEMENT LABEL SUBJECT TO OS/360          * Y0100000
*                      ASSEMBLER RESTRICTIONS AND RULES               * Y0101000
*                                                                     * Y0102000
*              $OP   = MACRO FROM THE SET DEFINED BELOW               * Y0103000
*                                                                     * Y0104000
*              ADDR  = THE ADDRESS FIELD OF THE 1130 INSTRUCTION      * Y0105000
*                                                                     * Y0106000
*              TAG   = THE INDEX REGISTER (TAG) FIELD OF THE          * Y0107000
*                      1130 INSTRUCTION                               * Y0108000
*                                                                     * Y0109000
*              FMT   = THE FORMAT OF THE 1130 INSTRUCTION.            * Y0110000
*                    = L FOR LONG FORM                                * Y0111000
*                                                                     * Y0112000
*                    = I FOR LONG FORM INDIRECT ADDRESSING            * Y0113000
*                                                                     * Y0114000
*                    = X FOR SHORT FORM ABSOLUTE ADDRESS              * Y0115000
*                                                                     * Y0116000
*                    = 'BLANK' FOR SHORT FORM RELATIVE ADDRESS        * Y0117000
*                                                                     * Y0118000
*              MOD   = MODIFIER BITS REQUIRED FOR SOME 1130           * Y0119000
*                      INSTRUCTIONS                                   * Y0120000
*                                                                     * Y0121000
*********************************************************************** Y0122000
         EJECT                                                          Y0123000
*********************************************************************** Y0124000
*              GENERAL 1130 INSTRUCTION DEFINITION MACRO              * Y0125000
*********************************************************************** Y0126000
         MACRO                                                          Y0127000
&NAME    $DEF  &OP,&ADD,&TAG,&FMT,&MOD                                  Y0128000
         LCLA  &I                  DEFINED FOR INDIRECT ADDRESSING BIT  Y0129000
         LCLC  &T,&M               DEFINED FOR INTERNAL MANIPULATION    Y0130000
&T       SETC  '&TAG'              EQUATE TAG AND MOD FIELDS TO         Y0131000
&M       SETC  '&MOD'               INTERNAL PARAMETERS                 Y0132000
         AIF   ('&T' NE '').A      TEST FOR NULL TAG FIELD              Y0133000
&T       SETC  '0'                  AVOID ASSEMBLY ERROR IF NULL        Y0134000
.A       AIF   ('&M' NE '').B      TEST FOR NULL MOD FIELD              Y0135000
&M       SETC  '0'                  AVOID ASSEMBLY ERROR IF NULL        Y0136000
.B       AIF   ('&FMT' NE 'L' AND '&FMT' NE 'I').H BRA IF SHORT FORM    Y0137000
         AIF   ('&FMT' EQ 'L').C   DETERMINE IF LONG ONLY OR INDIRECT   Y0138000
&I       SETA  X'80'               TURN ON INDIRECT ADDRESS BIT         Y0139000
.C       AIF   (T'&ADD EQ 'N' OR '&ADD'(1,1) EQ '$').G BR IF $ OR NUMR  Y0140000
         AIF   ('&ADD'(1,1) EQ 'W').E TEST FOR SYMBOL BEGINNING WITH W  Y0141000
         AIF   ('&ADD'(1,1) EQ '*').F TEST FOR RELATIVE EXPRESSION      Y0142000
.D       ANOP                                                           Y0143000
&NAME    DC    AL1(&OP+&T+4,&I+&M),AL2((&ADD-$Z)/2)                     Y0144000
         MEXIT                                                          Y0145000
.E       AIF   ('&ADD'(2,1) EQ 'A' OR '&ADD'(2,1) EQ 'B' OR '&ADD'(2,1)CY0146000
                EQ 'C').G          BRANCH IF WA, WB OR WC               Y0147000
         AGO   .D                   WHICH ARE DEFINED AS ABSOLUTE       Y0148000
.F       AIF   (K'&ADD LT 3).D     ELIMINATE ILLEGAL EXPRESSION         Y0149000
         AIF   ('&ADD'(2,2) NE '-*').D   BRANCH IF NOT *-*              Y0150000
.G       ANOP                                                           Y0151000
&NAME    DC    AL1(&OP+&T+4,&I+&M),AL2(&ADD)                            Y0152000
         MEXIT                                                          Y0153000
.H       AIF   ('&FMT' EQ 'X' OR '&ADD'(1,1) EQ '-' OR T'&ADD EQ 'N').I Y0154000
&NAME    DC 0SL2(*+D-&ADD,&ADD-*+D),AL1(&OP+&T,(&ADD-*-1)/2)            Y0155000
         MEXIT                                                          Y0156000
.I       AIF   ('&ADD'(1,1) EQ '-').J  BRANCH IF MINUS ABSOLUTE         Y0157000
&NAME    DC    0SL2(A-&ADD),AL1(&OP+&T,&ADD+&M)                         Y0158000
         MEXIT                                                          Y0159000
.J       ANOP                                                           Y0160000
&NAME    DC    0SL2(B&ADD),AL1(&OP+&T,0&ADD)                            Y0161000
         MEND                                                           Y0162000
*********************************************************************** Y0163000
*              GENERAL LONG FORM DEFINITION MACRO                     * Y0164000
*********************************************************************** Y0165000
         MACRO                                                          Y0166000
&NAME    $DEFL &OP,&ADD,&TAG,&FMT,&MOD                                  Y0167000
         AIF   ('&FMT' EQ 'I').A                                        Y0168000
&NAME    $DEF  &OP,&ADD,&TAG,L,&MOD                                     Y0169000
         MEXIT                                                          Y0170000
.A       ANOP                                                           Y0171000
&NAME    $DEF  &OP,&ADD,&TAG,I,&MOD                                     Y0172000
         MEND                                                           Y0173000
         EJECT                                                          Y0174000
*********************************************************************** Y0175000
*              1130 INSTRUCTIONS                                      * Y0176000
*********************************************************************** Y0177000
         SPACE 2                                                        Y0178000
*                                  $LD    LOAD ACC                      Y0179000
         MACRO                                                          Y0180000
&NAME    $LD   &ADD,&TAG,&FMT                                           Y0181000
&NAME    $DEF  192,&ADD,&TAG,&FMT                                       Y0182000
         MEND                                                           Y0183000
*                                  $LDD   LOAD DOUBLE                   Y0184000
         MACRO                                                          Y0185000
&NAME    $LDD  &ADD,&TAG,&FMT                                           Y0186000
&NAME    $DEF  200,&ADD,&TAG,&FMT                                       Y0187000
         MEND                                                           Y0188000
*                                  $STO   STORE ACC                     Y0189000
         MACRO                                                          Y0190000
&NAME    $STO  &ADD,&TAG,&FMT                                           Y0191000
&NAME    $DEF  208,&ADD,&TAG,&FMT                                       Y0192000
         MEND                                                           Y0193000
*                                  $STD   STORE DOUBLE                  Y0194000
         MACRO                                                          Y0195000
&NAME    $STD  &ADD,&TAG,&FMT                                           Y0196000
&NAME    $DEF  216,&ADD,&TAG,&FMT                                       Y0197000
         MEND                                                           Y0198000
*                                  $LDX   LOAD INDEX                    Y0199000
         MACRO                                                          Y0200000
&NAME    $LDX  &ADD,&TAG,&FMT                                           Y0201000
&NAME    $DEF  96,&ADD,&TAG,&FMT                                        Y0202000
         MEND                                                           Y0203000
*                                  $LXA   LOAD INDEX FROM ADD (LONG)    Y0204000
         MACRO                                                          Y0205000
&NAME    $LXA  &ADD,&TAG                                                Y0206000
&NAME    $LDX  &ADD,&TAG,I                                              Y0207000
         MEND                                                           Y0208000
*                                  $AXT   ADDRESS TO INDEX TRUE         Y0209000
         MACRO                                                          Y0210000
&NAME    $AXT  &ADD,&TAG,&FMT                                           Y0211000
&NAME    $LDX  &ADD,&TAG,&FMT                                           Y0212000
         MEND                                                           Y0213000
*                                  $STX   STORE INDEX                   Y0214000
         MACRO                                                          Y0215000
&NAME    $STX  &ADD,&TAG,&FMT                                           Y0216000
&NAME    $DEF  104,&ADD,&TAG,&FMT                                       Y0217000
         MEND                                                           Y0218000
*                                  $STS   STORE STATUS                  Y0219000
         MACRO                                                          Y0220000
&NAME    $STS  &ADD,&TAG,&FMT                                           Y0221000
&NAME    $DEF  40,&ADD,&TAG,&FMT                                        Y0222000
         MEND                                                           Y0223000
*                                  $LDS   LOAD STATUS                   Y0224000
         MACRO                                                          Y0225000
&NAME    $LDS  &ADD,&TAG                                                Y0226000
&NAME    $DEF  32,&ADD,&TAG,X                                           Y0227000
         MEND                                                           Y0228000
*                                  $A     ADD                           Y0229000
         MACRO                                                          Y0230000
&NAME    $A    &ADD,&TAG,&FMT                                           Y0231000
&NAME    $DEF  128,&ADD,&TAG,&FMT                                       Y0232000
         MEND                                                           Y0233000
*                                  $AD    ADD DOUBLE                    Y0234000
         MACRO                                                          Y0235000
&NAME    $AD   &ADD,&TAG,&FMT                                           Y0236000
&NAME    $DEF  136,&ADD,&TAG,&FMT                                       Y0237000
         MEND                                                           Y0238000
*                                  $S     SUBTRACT                      Y0239000
         MACRO                                                          Y0240000
&NAME    $S    &ADD,&TAG,&FMT                                           Y0241000
&NAME    $DEF  144,&ADD,&TAG,&FMT                                       Y0242000
         MEND                                                           Y0243000
*                                  $SD    SUBTRACT DOUBLE               Y0244000
         MACRO                                                          Y0245000
&NAME    $SD   &ADD,&TAG,&FMT                                           Y0246000
&NAME    $DEF  152,&ADD,&TAG,&FMT                                       Y0247000
         MEND                                                           Y0248000
*                                  $M     MULTIPLY                      Y0249000
         MACRO                                                          Y0250000
&NAME    $M    &ADD,&TAG,&FMT                                           Y0251000
&NAME    $DEF  160,&ADD,&TAG,&FMT                                       Y0252000
         MEND                                                           Y0253000
*                                  $D     DIVIDE                        Y0254000
         MACRO                                                          Y0255000
&NAME    $D    &ADD,&TAG,&FMT                                           Y0256000
&NAME    $DEF  168,&ADD,&TAG,&FMT                                       Y0257000
         MEND                                                           Y0258000
*                                  $AND   LOGICAL AND                   Y0259000
         MACRO                                                          Y0260000
&NAME    $AND  &ADD,&TAG,&FMT                                           Y0261000
&NAME    $DEF  224,&ADD,&TAG,&FMT                                       Y0262000
         MEND                                                           Y0263000
*                                  $OR    LOGICAL OR                    Y0264000
         MACRO                                                          Y0265000
&NAME    $OR   &ADD,&TAG,&FMT                                           Y0266000
&NAME    $DEF  232,&ADD,&TAG,&FMT                                       Y0267000
         MEND                                                           Y0268000
*                                  $EOR   LOGICAL EXCLUSIVE OR          Y0269000
         MACRO                                                          Y0270000
&NAME    $EOR  &ADD,&TAG,&FMT                                           Y0271000
&NAME    $DEF  240,&ADD,&TAG,&FMT                                       Y0272000
         MEND                                                           Y0273000
*                                  $SLA   SHIFT LEFT ACC                Y0274000
         MACRO                                                          Y0275000
&NAME    $SLA  &ADD,&TAG                                                Y0276000
&NAME    $DEF  16,&ADD,&TAG,X,0                                         Y0277000
         MEND                                                           Y0278000
*                                  $SLT   SHIFT LEFT ACC AND EXT        Y0279000
         MACRO                                                          Y0280000
&NAME    $SLT  &ADD,&TAG                                                Y0281000
&NAME    $DEF  16,&ADD,&TAG,X,128                                       Y0282000
         MEND                                                           Y0283000
*                                  $SLCA  SHIFT LEFT AND COUNT ACC      Y0284000
         MACRO                                                          Y0285000
&NAME    $SLCA &ADD,&TAG                                                Y0286000
&NAME    $DEF  16,&ADD,&TAG,X,64                                        Y0287000
         MEND                                                           Y0288000
*                                  $SLC   SHIFT LEFT AND COUNT ACC+EXT  Y0289000
         MACRO                                                          Y0290000
&NAME    $SLC  &ADD,&TAG                                                Y0291000
&NAME    $DEF  16,&ADD,&TAG,X,192                                       Y0292000
         MEND                                                           Y0293000
*                                  $SRA   SHIFT RIGHT ACC               Y0294000
         MACRO                                                          Y0295000
&NAME    $SRA  &ADD,&TAG                                                Y0296000
&NAME    $DEF  24,&ADD,&TAG,X,0                                         Y0297000
         MEND                                                           Y0298000
*                                  $SRT   SHIFT RIGHT ACC+EXT           Y0299000
         MACRO                                                          Y0300000
&NAME    $SRT  &ADD,&TAG                                                Y0301000
&NAME    $DEF  24,&ADD,&TAG,X,128                                       Y0302000
         MEND                                                           Y0303000
*                                  $RTE   ROTATE RIGHT ACC+EXT          Y0304000
         MACRO                                                          Y0305000
&NAME    $RTE  &ADD,&TAG                                                Y0306000
&NAME    $DEF  24,&ADD,&TAG,X,192                                       Y0307000
         MEND                                                           Y0308000
*                                  $BSC   BRANCH/SKIP ON CONDITION      Y0309000
         MACRO                                                          Y0310000
&NAME    $BSC  &ADD,&TAG,&FMT,&MOD                                      Y0311000
         AIF   ('&FMT' EQ 'L' OR '&FMT' EQ 'I').A                       Y0312000
&NAME    DC    AL1(72,&ADD)                                             Y0313000
         MEXIT                                                          Y0314000
.A       ANOP                                                           Y0315000
&NAME    $DEF  72,&ADD,&TAG,&FMT,&MOD                                   Y0316000
         MEND                                                           Y0317000
*                                  $BOSC  BRANCH/SKIP RESET INTERRUPT   Y0318000
         MACRO                                                          Y0319000
&NAME    $BOSC &ADD,&TAG,&FMT,&MOD                                      Y0320000
         LCLC  &M                                                       Y0321000
         AIF   ('&FMT' EQ '' OR '&FMT' EQ 'X').A                        Y0322000
&M       SETC  '64'                                                     Y0323000
         AIF   ('&MOD' EQ '').B                                         Y0324000
&M       SETC  '&M+64'                                                  Y0325000
.B       ANOP                                                           Y0326000
&NAME    $DEF  72,&ADD,&TAG,&FMT,&M                                     Y0327000
         MEXIT                                                          Y0328000
.A       ANOP                                                           Y0329000
&NAME    DC    AL1(72,&ADD+64)                                          Y0330000
         MEND                                                           Y0331000
*                                  $BP    BRANCH ACC POSITIVE (LONG)    Y0332000
         MACRO                                                          Y0333000
&NAME    $BP   &ADD,&TAG,&FMT                                           Y0334000
&NAME    $DEFL 72,&ADD,&TAG,&FMT,48                                     Y0335000
         MEND                                                           Y0336000
*                                  $BNP   BRANCH ACC NOT POSITIVE(LONG) Y0337000
         MACRO                                                          Y0338000
&NAME    $BNP  &ADD,&TAG,&FMT                                           Y0339000
&NAME    $DEFL 72,&ADD,&TAG,&FMT,8                                      Y0340000
         MEND                                                           Y0341000
*                                  $BN    BRANCH ACC NEGATIVE (LONG)    Y0342000
         MACRO                                                          Y0343000
&NAME    $BN   &ADD,&TAG,&FMT                                           Y0344000
&NAME    $DEFL 72,&ADD,&TAG,&FMT,40                                     Y0345000
         MEND                                                           Y0346000
*                                  $BNN   BRANCH ACC NOT NEG. (LONG)    Y0347000
         MACRO                                                          Y0348000
&NAME    $BNN  &ADD,&TAG,&FMT                                           Y0349000
&NAME    $DEFL 72,&ADD,&TAG,&FMT,16                                     Y0350000
         MEND                                                           Y0351000
*                                  $BZ    BRANCH ACC ZERO (LONG)        Y0352000
         MACRO                                                          Y0353000
&NAME    $BZ   &ADD,&TAG,&FMT                                           Y0354000
&NAME    $DEFL 72,&ADD,&TAG,&FMT,24                                     Y0355000
         MEND                                                           Y0356000
*                                  $BNZ   BRANCH ACC NOT ZERO (LONG)    Y0357000
         MACRO                                                          Y0358000
&NAME    $BNZ  &ADD,&TAG,&FMT                                           Y0359000
&NAME    $DEFL 72,&ADD,&TAG,&FMT,32                                     Y0360000
         MEND                                                           Y0361000
*                                  $BC    BRANCH ON CARRY (LONG)        Y0362000
         MACRO                                                          Y0363000
&NAME    $BC   &ADD,&TAG,&FMT                                           Y0364000
&NAME    $DEFL 72,&ADD,&TAG,&FMT,2                                      Y0365000
         MEND                                                           Y0366000
*                                  $BO    BRANCH ON OVERFLOW (LONG)     Y0367000
         MACRO                                                          Y0368000
&NAME    $BO   &ADD,&TAG,&FMT                                           Y0369000
&NAME    $DEFL 72,&ADD,&TAG,&FMT,1                                      Y0370000
         MEND                                                           Y0371000
*                                  $BOD   BRANCH ACC ODD (LONG)         Y0372000
         MACRO                                                          Y0373000
&NAME    $BOD  &ADD,&TAG,&FMT                                           Y0374000
&NAME    $DEFL 72,&ADD,&TAG,&FMT,4                                      Y0375000
         MEND                                                           Y0376000
*                                  $SKPP  SKIP IF ACC POSITIVE (SHORT)  Y0377000
         MACRO                                                          Y0378000
&NAME    $SKPP                                                          Y0379000
&NAME    $DEF  72,0,,X,8                                                Y0380000
         MEND                                                           Y0381000
*                                  $SKPN  SKIP IF ACC NON-ZERO (SHORT)  Y0382000
         MACRO                                                          Y0383000
&NAME    $SKPN                                                          Y0384000
&NAME    $DEF  72,0,,X,24                                               Y0385000
         MEND                                                           Y0386000
*                                  $SKPZ  SKIP IF ACC IS ZERO (SHORT)   Y0387000
         MACRO                                                          Y0388000
&NAME    $SKPZ                                                          Y0389000
&NAME    $DEF  72,0,,X,32                                               Y0390000
         MEND                                                           Y0391000
*                                  $SKPO  SKIP IF OVERFLOW OFF (SHORT)  Y0392000
         MACRO                                                          Y0393000
&NAME    $SKPO                                                          Y0394000
&NAME    $DEF  72,0,,X,1                                                Y0395000
         MEND                                                           Y0396000
*                                  $SKPC  SKIP IF CARRY IS OFF (SHORT)  Y0397000
         MACRO                                                          Y0398000
&NAME    $SKPC                                                          Y0399000
&NAME    $DEF  72,0,,X,2                                                Y0400000
         MEND                                                           Y0401000
*                                  $SKPX  SKIP ACC NE 0, CARRY OFF      Y0402000
         MACRO                                                          Y0403000
&NAME    $SKPX                                                          Y0404000
&NAME    $DEF  72,0,,X,26                                               Y0405000
         MEND                                                           Y0406000
*                                  $B     BRANCH UNCONDITIONALLY        Y0407000
         MACRO                                                          Y0408000
&NAME    $B    &ADD,&TAG,&FMT                                           Y0409000
         AIF   ('&FMT' EQ 'L' OR '&FMT' EQ 'I').A                       Y0410000
&NAME    $MDX  &ADD,&TAG,&FMT                                           Y0411000
         MEXIT                                                          Y0412000
.A       ANOP                                                           Y0413000
&NAME    $BSC  &ADD,&TAG,&FMT                                           Y0414000
         MEND                                                           Y0415000
*                                  $BSI   BRANCH AND STORE IAR          Y0416000
         MACRO                                                          Y0417000
&NAME    $BSI  &ADD,&TAG,&FMT,&MOD                                      Y0418000
&NAME    $DEF  64,&ADD,&TAG,&FMT,&MOD                                   Y0419000
         MEND                                                           Y0420000
*                                  $TSL   BRANCH AND STORE IAR (LONG)   Y0421000
         MACRO                                                          Y0422000
&NAME    $TSL  &ADD,&TAG,&FMT                                           Y0423000
&NAME    $DEFL 64,&ADD,&TAG,&FMT,0                                      Y0424000
         MEND                                                           Y0425000
*                                  $MDX   MODIFY INDEX AND SKIP         Y0426000
         MACRO                                                          Y0427000
&NAME    $MDX  &ADD,&TAG,&FMT                                           Y0428000
&NAME    $DEF  112,&ADD,&TAG,&FMT                                       Y0429000
         MEND                                                           Y0430000
*                                  $STL   STORE LOCATION COUNTER        Y0431000
         MACRO                                                          Y0432000
&NAME    $STL  &ADD,&FMT                                                Y0433000
&NAME    $STX  &ADD,0,&FMT                                              Y0434000
         MEND                                                           Y0435000
*                                  $MDM   MODIFY MEMORY                 Y0436000
         MACRO                                                          Y0437000
&NAME    $MDM  &ADD,&VALUE                                              Y0438000
         AIF   ('&VALUE'(1,1) EQ '-').B                                 Y0439000
         AIF   ('&ADD'(1,1) EQ '$').A                                   Y0440000
&NAME    DC    0SL2(A-&VALUE),AL1(116,&VALUE),AL2((&ADD-$Z)/2)          Y0441000
         MEXIT                                                          Y0442000
.A       ANOP                                                           Y0443000
&NAME    DC    0SL2(A-&VALUE),AL1(116,&VALUE),AL2(&ADD)                 Y0444000
         MEXIT                                                          Y0445000
.B       AIF   ('&ADD'(1,1) EQ '$').C                                   Y0446000
&NAME    DC    0SL2(B&VALUE),AL1(116,0&VALUE),AL2((&ADD-$Z)/2)          Y0447000
         MEXIT                                                          Y0448000
.C       ANOP                                                           Y0449000
&NAME    DC    0SL2(B&VALUE),AL1(116,0&VALUE),AL2(&ADD)                 Y0450000
         MEND                                                           Y0451000
*                                  $WAIT  WAIT FOR INTERRUPT            Y0452000
         MACRO                                                          Y0453000
&NAME    $WAIT                                                          Y0454000
&NAME    DC    X'3000'                                                  Y0455000
         MEND                                                           Y0456000
*                                  $XIO   EXECUTE I/O                   Y0457000
         MACRO                                                          Y0458000
&NAME    $XIO  &ADD,&TAG,&FMT                                           Y0459000
&NAME    $DEF  8,&ADD,&TAG,&FMT                                         Y0460000
         MEND                                                           Y0461000
*                                  $BSS   BLOCK STARTED BY SYMBOL       Y0462000
         MACRO                                                          Y0463000
&NAME    $BSS  &NWRDS,&EVEN                                             Y0464000
         AIF   ('&EVEN' EQ '').B                                        Y0465000
         AIF   ('&EVEN' EQ 'E').A                                       Y0466000
         MNOTE 'ILLEGAL ALIGNMENT PARAMETER. ''E'' ASSUMED.'            Y0467000
.A       ANOP                                                           Y0468000
&NAME    DS    0F,(&NWRDS)H                                             Y0469000
         MEXIT                                                          Y0470000
.B       ANOP                                                           Y0471000
&NAME    DS    (&NWRDS)H                                                Y0472000
         MEND                                                           Y0473000
*                                  $BES   BLOCK ENDED BY SYSMBOL        Y0474000
         MACRO                                                          Y0475000
&NAME    $BES  &NWRDS,&EVEN                                             Y0476000
         AIF   ('&EVEN' EQ '').B                                        Y0477000
         AIF   ('&EVEN' EQ 'E').A                                       Y0478000
         MNOTE 'ILLEGAL ALIGNMENT PARAMETER. ''E'' ASSUMED.'            Y0479000
.A       DS    0F,(&NWRDS)H                                             Y0480000
&NAME    DS    0H                                                       Y0481000
         MEXIT                                                          Y0482000
.B       DS    (&NWRDS)H                                                Y0483000
&NAME    DS    0H                                                       Y0484000
         MEND                                                           Y0485000
*                                  NULL OPERATION FOR DEFINING S        Y0486000
         MACRO                                                          Y0487000
&NAME    $NULL                                                          Y0488000
&NAME    DS    0H                                                       Y0489000
         MEND                                                           Y0490000
*                                  $ADCON    1130 ADCON EQUIVALENT      Y0491000
         MACRO                                                          Y0492000
&NAME    $ADCON &ADDR                                                   Y0493000
&NAME    DC    AL2((&ADDR-$Z)/2)                                        Y0494000
         MEND                                                           Y0495000
*                                  $NOP  NO OPERATION                   Y0496000
         MACRO                                                          Y0497000
&NAME    $NOP                                                           Y0498000
&NAME    $SLA  0                                                        Y0499000
         MEND                                                           Y0500000
*                                  $ZAC  CLEAR AC                       Y0501000
         MACRO                                                          Y0502000
&NAME    $ZAC                                                           Y0503000
&NAME    $SRA  16                                                       Y0504000
         MEND                                                           Y0505000
         SPACE 1                                                        Y0506000
         TITLE 'RTP1130 (SYSTEM MACRO DEFINITIONS)'                     Y0507000
*********************************************************************** Y0508000
*                                  TRACE ROUTINE LINKAGE              * Y0509000
*********************************************************************** Y0510000
         MACRO                                                          Y0511000
         $TRACE                                                         Y0512000
         GBLA  &TRACE              TRACE INDICATOR AND TABLE SIZE       Y0513000
         AIF   (&TRACE EQ 0).NOTRACE                                    Y0514000
         $TSL  STRACE              $TRACE LINKAGE                       Y0515000
         DC    H'0'                ENTRY COUNTER                        Y0516000
.NOTRACE MEND                                                           Y0517000
*                                                                       Y0518000
*********************************************************************** Y0519000
*                                  $DEQUE - DEQUEUE AN ELEMENT        * Y0520000
*********************************************************************** Y0521000
*                                                                     * Y0522000
         MACRO                                                          Y0523000
&NAME    $DEQUE &QP                &QP=QUEUE POINTER                    Y0524000
&NAME    $NULL                                                          Y0525000
         AIF   ('&QP' EQ '').A                                          Y0526000
         $AXT  &QP,WC,L            GET QUEUE POINTER                    Y0527000
.A       $TSL  SGETQEL             GO TO DEQUEUE ROUTINE                Y0528000
         MEND                                                           Y0529000
*                                                                       Y0530000
*********************************************************************** Y0531000
*                                  $QACTL - QUEUE AN ACTIVE ELEMENT   * Y0532000
*********************************************************************** Y0533000
*                                                                     * Y0534000
         MACRO                                                          Y0535000
&NAME    $QACTL &QP,&QE            &QP=QUEUE POINTER, &QE=QUEUE ELEMENT Y0536000
&NAME    $NULL                                                          Y0537000
         AIF   ('&QE' EQ '').A                                          Y0538000
         $LD   &QE,,L              GET QUEUE ELEMENT ADDRESS            Y0539000
.A       AIF   ('&QP' EQ '').B                                          Y0540000
         $AXT  &QP,WC,L            GET QUEUE POINTER ADDRESS            Y0541000
.B       $TSL  SPUTAQL             GO TO ENQUEUE ROUTINE                Y0542000
         MEND                                                           Y0543000
*                                                                       Y0544000
*********************************************************************** Y0545000
*                                  $QFREL - QUEUE A FREE ELEMENT      * Y0546000
*********************************************************************** Y0547000
*                                                                     * Y0548000
         MACRO                                                          Y0549000
&NAME    $QFREL &QP,&QE            QP=QUEUE POINTER                     Y0550000
&NAME    $NULL                                                          Y0551000
         AIF   ('&QE' EQ '').A                                          Y0552000
         $LD   &QE,,L              GET ELEMENT ADDRESS                  Y0553000
.A       AIF   ('&QP' EQ '').B                                          Y0554000
         $AXT  &QP,WC,L            GET QUEUE POINTER ADDRESS            Y0555000
.B       $TSL  SPUTFQL             GO TO ENQUEUE ROUTINE                Y0556000
         MEND                                                           Y0557000
*                                                                       Y0558000
         EJECT                                                          Y0559000
*********************************************************************** Y0560000
*                                  $GENQ - GENERATE CHAINED QUEUE     * Y0561000
*********************************************************************** Y0562000
*                                                                     * Y0563000
         MACRO                                                          Y0564000
         $GENQ &ID=,&SIZE=,&NUM=                                        Y0565000
         LCLA  &CNT                                                     Y0566000
&ID.AQP  DC    AL2(*-*)            ACTIVE ELEMENT QUEUE POINTER         Y0567000
&ID.BGN  $BSS  0,E                 START OF QUEUE                       Y0568000
.A       $ADCON (*+4*D1+2*&SIZE)   CHAIN WORD                           Y0569000
         DC    AL2(0)              ROOM FOR FIRST  CONTROL WORD         Y0570000
         DC    AL2(0)              ROOM FOR SECOND CONTROL WORD         Y0571000
         DC    AL2(0)              SPARE WORD                           Y0572000
         DC    (&SIZE)AL2(0)       DATA AREA                            Y0573000
&CNT     SETA  &CNT+1              INCREMENT COUNTER                    Y0574000
         AIF   (&CNT LT &NUM-1).A  GENERATE &NUM-1 ENTRIES              Y0575000
         DC    AL2(0)              LAST ENTRY                           Y0576000
         DC    AL2(0)              ROOM FOR FIRST  CONTROL WORD         Y0577000
         DC    AL2(0)              ROOM FOR SECOND CONTROL WORD         Y0578000
         DC    AL2(0)              SPARE WORD                           Y0579000
         DC    (&SIZE)AL2(0)                                            Y0580000
         MEND                                                           Y0581000
*********************************************************************** Y0582000
*                                  $WTO - TYPE SPECIFIED MESSAGE      * Y0583000
*********************************************************************** Y0584000
         MACRO                                                          Y0585000
&NAME    $WTO  &MESS,&NONE                                              Y0586000
&NAME    $NULL                                                          Y0587000
         $TSL  SWTOPR              LINKAGE TO CONSOLE QUEUEING ROUTINE  Y0588000
         $ADCON (&NONE)            EXIT ADDRESS IF NO BUFFER AVAILABLE  Y0589000
         $ADCON (&MESS)            ADDRESS OF MESSAGE TO BE TYPED       Y0590000
         MEND                                                           Y0591000
         TITLE 'RTP1130 (GLOBAL SET DEFINITIONS)'                       Y0592000
         SPACE 3                                                        Y0593000
*********************************************************************** Y0594000
*              GLOBAL DEFINITIONS                                     * Y0595000
*********************************************************************** Y0596000
         GBLA  &RMTID              REMOTE IDENTIFICATION NUMBER         Y0597000
         GBLA  &MACHSIZ            1130 CORE SIZE IN WORDS              Y0598000
         GBLA  &RTPLORG            RTPLOAD ORIGIN IN 1130               Y0599000
         GBLA  &DEBUG              DEBUG MODE INDICATOR                 Y0600000
         GBLA  &REP                PATCH MODE SWITCH                    Y0601000
         GBLA  &TRACE              TRACE INDICATOR AND TABLE SIZE       Y0602000
         GBLA  &RD2501             CARD READER (2501-A1,A2)             Y0603000
         GBLB  &RD1442             CARD READER (1442-6,7)               Y0604000
         GBLB  &PN1442             CARD PUNCH (1442-5 OR 6,7)           Y0605000
         GBLB  &RP1442             CARD READER/PUNCH (1442-6,7)         Y0606000
         GBLB  &XX1442             DEFINE EXISTENCE OF 1442             Y0607000
         GBLA  &PR1132             PRINTER (1132)                       Y0608000
         GBLA  &PR1403             PRINTER (1403-6,7)                   Y0609000
         GBLA  &BSCALO             BSCA (STANDARD)                      Y0610000
         GBLA  &BSCAHI             BSCA (SPECIAL)                       Y0611000
         GBLA  &CNPSIZE            CONSOLE MESSAGE SIZE IN BYTES        Y0612000
         GBLA  &CONINSZ            CONSOLE INPUT TANK SIZE              Y0613000
         GBLA  &PRFOTLW            1403 PRINTER LINE WIDTH IN BYTES     Y0614000
         GBLA  &TRANPRN            TRANSPARENCY MODE INDICATOR          Y0615000
         GBLA  &TPBFSIZ            DEFAULT HASP TP BUFFER SIZE          Y0616000
         GBLA  &MLBFSIZ            MULTI-LEAVING BUFFER SIZE            Y0617000
         GBLA  &TPBFSZE            RTP1130 TP BUFFER SIZE               Y0618000
         GBLA  &LINESPD            LINE BAUD RATE                       Y0619000
         GBLA  &CLOCK              DATA SET OR INTERNAL CLOCKING        Y0620000
         GBLA  &PRTSTRV            PRINT STREAM INITIAL VALUE           Y0621000
         GBLA  &PUNSTRV            PUNCH STREAM INITIAL VALUE           Y0622000
         GBLA  &RDRSTRV            READER STREAM INITIAL VALUE          Y0623000
         GBLA  &CNSKSTR            CONSOLE INPUT STREAM VALUE           Y0624000
         GBLA  &CNSPSTR            CONSOLE PRINT STREAM VALUE           Y0625000
         GBLA  &PRTFCSV            PRINT STREAM INITIAL FCS VALUE       Y0626000
         GBLA  &PUNFCSV            PUNCH STREAM INITIAL FCS VALUE       Y0627000
         GBLA  &RDRFCSV            READER STREAM INITIAL FCS VALUE      Y0628000
         GBLA  &CNSKFCS            CONSOLE INPUT FCS VALUE              Y0629000
         GBLA  &CNSPFCS            CONSOLE PRINT FCS VALUE              Y0630000
         GBLA  &PRFOTKL            NUMBER OF 1403 TANKS                 Y0631000
         GBLA  &PRETTKL            NUMBER OF 1132 TANKS                 Y0632000
         GBLA  &PUNFTKL            NUMBER OF 1442 (PUNCH) TANKS         Y0633000
         GBLA  &CONSTKL            NUMBER OF CONSOLE TANKS              Y0634000
         GBLA  &PRFOBFL            NUMBER OF 1403 TP BUFFERS            Y0635000
         GBLA  &PRETBFL            NUMBER OF 1132 TP BUFFERS            Y0636000
         GBLA  &PUNFBFL            NUMBER OF 1442 (PUNCH) TP BUFFERS    Y0637000
         GBLA  &CNSPBFL            NUMBER OF CONSOLE (PRINT) TP BUFFERS Y0638000
         GBLA  &NPTFBFL            NUMBER OF INPUT DEVICE TP BUFFERS    Y0639000
         GBLA  &CMPTYPE            COMPRESSION TECHNIQUE                Y0640000
         GBLB  &DOCUMNT            DETAILED INTERNAL DOCUMENTATION      Y0641000
         GBLA  &FULLIST            FULL LISTING OPTION                  Y0642000
         GBLA  &DELAY              DELAY COUNT FOR PROGRAM TIMER        Y0643000
         TITLE 'RTP1130 (HASPGEN VARIABLES)'                            Y0644000
         SPACE 3                                                        Y0645000
*********************************************************************** Y0646000
*              REMOTE TERMINAL GENERATION VARIABLES                   * Y0647000
*********************************************************************** Y0648000
         SPACE 2                                                        Y0649000
&MACHSIZ SETA  8*1024              1130 CORE SIZE IN WORDS              Y0650000
&RTPLORG SETA  2*(&MACHSIZ-1024)   RTPLOAD ORIGIN (-1K)                 Y0651000
         SPACE 2                                                        Y0652000
$Z       START 0                   DEFINE RELOCATABLE LOCATION 0        Y0653000
$RTPLORG EQU   &RTPLORG            DEFINE ABSOLUTE VALUE FOR &RTPLORG   Y0654000
$MACHSIZ EQU   &MACHSIZ            DEFINE ABSOLUTE VALUE FOR &MACHSIZ   Y0655000
         ORG   *+80                ORIGIN AT 1130 LOCATION (40)10       Y0656000
START    EQU   *                   DEFINE START SYMBOL                  Y0657000
         SPACE 2                                                        Y0658000
&RMTID   SETA  1                   DEFINE REMOTE IDENTIFICATION         Y0659000
&DEBUG   SETA  1                   TURN ON DEBUG                        Y0660000
&TRACE   SETA  0                   TRACE INDICATOR AND TABLE SIZE       Y0661000
&REP     SETA  1                   SET TO 1 FOR REP OPTION              Y0662000
&DOCUMNT SETB  0                   SET TO 1 IF DETAILED DOCUMENTATION   Y0663000
&FULLIST SETA  1                   SET TO 0 FOR NO MACRO EXPANSION      Y0664000
         SPACE 2                                                        Y0665000
&RD2501  SETA  0                   SET TO 1 IF 2501 READER              Y0666000
&RD1442  SETB  1                   SET TO 0 IF NO 1442 READER FUNCTION  Y0667000
&PN1442  SETB  1                   SET TO 0 IF NO 1442 PUNCH FUNCTION   Y0668000
&RP1442  SETB  (&RD1442 AND &PN1442)  SET 0 IF NO 1442 READER/PUNCH     Y0669000
&XX1442  SETB  (&RD1442  OR &PN1442)  SET 0 IF NO 1442                  Y0670000
&PR1403  SETA  1                   SET TO 0 IF NO 1403 PRINTER          Y0671000
&PR1132  SETA  0                   SET TO 1 IF 1132 PRINTER             Y0672000
&BSCALO  SETA  1                   SET TO 1 IF STANDARD BSCA            Y0673000
&BSCAHI  SETA  0                   SET TO 1 IF SPECIAL BSCA             Y0674000
         SPACE 2                                                        Y0675000
&CNPSIZE SETA  120                 CONSOLE PRINTER SIZE IN BYTES        Y0676000
&CONINSZ SETA  120                 CONSOLE INPUT TANK SIZE              Y0677000
&PRFOTLW SETA  120                 1403 PRINTER LINE WIDTH              Y0678000
         SPACE 1                                                        Y0679000
&TRANPRN SETA  1                   SET TO 0 IF NO TRANSPARENCY          Y0680000
&TPBFSIZ SETA  400                 DEFAULT HASP TP BUFFER SIZE          Y0681000
&MLBFSIZ SETA  400                 MULTI-LEAVING TP BUFFER SIZE         Y0682000
&TPBFSZE SETA  &MLBFSIZ            RTP1130 TP BUFFER SIZE               Y0683000
&LINESPD SETA  2000                LINE BAUD RATE                       Y0684000
&CLOCK   SETA  0                   SET TO 1 IF INTERNAL CLOCKING        Y0685000
&DELAY   SETA  3                   DELAY COUNT FOR PROGRAM TIMER        Y0686000
         EJECT                                                          Y0687000
&PRTSTRV SETA  X'94'               PRINT STREAM INITIAL VALUE           Y0688000
&PUNSTRV SETA  X'95'               PUNCH STREAM INITIAL VALUE           Y0689000
&RDRSTRV SETA  X'93'               READER STREAM INITIAL VALUE          Y0690000
&CNSPSTR SETA  X'91'               CONSOLE PRINT STREAM VALUE           Y0691000
&CNSKSTR SETA  X'92'               CONSOLE INPUT STREAM VALUE           Y0692000
&PRTFCSV SETA  X'08'               PRINT STREAM INITIAL FCS VALUE       Y0693000
&PUNFCSV SETA  X'01'               PUNCH STREAM INITIAL FCS VALUE       Y0694000
&RDRFCSV SETA  X'08'               READER STREAM INITIAL FCS VALUE      Y0695000
&CNSPFCS SETA  X'40'               CONSOLE PRINT FCS VALUE              Y0696000
&CNSKFCS SETA  X'40'               CONSOLE INPUT FCS VALUE              Y0697000
&PRFOTKL SETA  2                   NUMBER OF 1403 TANKS                 Y0698000
&PRETTKL SETA  2                   NUMBER OF 1132 TANKS                 Y0699000
&PUNFTKL SETA  2                   NUMBER OF 1442 TANKS (PUNCH)         Y0700000
&CONSTKL SETA  5                   NUMBER OF CONSOLE PRINT TANKS        Y0701000
&PRFOBFL SETA  2                   NUMBER OF 1403 TP BUFFERS            Y0702000
&PRETBFL SETA  2                   NUMBER OF 1132 TP BUFFERS            Y0703000
&PUNFBFL SETA  2                   NUMBER OF 1442 (PUNCH) TP BUFFERS    Y0704000
&CNSPBFL SETA  255                 NUMBER OF CONSOLE (PRINT) TP BUFFERS Y0705000
&NPTFBFL SETA  (&RD2501+&RD1442+1) NUMBER OF INPUT DEVICE TP BUFFERS    Y0706000
         SPACE 3                                                        Y0707000
&CMPTYPE SETA  2                   COMPRESSION TECHNIQUE                Y0708000
*                                                                       Y0709000
*                                  SET = 0 IF NO COMPRESSION            Y0710000
*                                                                       Y0711000
*                                  SET = 1 IF TRAILING BLANK            Y0712000
*                                          ELIMINATION ONLY             Y0713000
*                                                                       Y0714000
*                                  SET = 2 IF COMPRESSION OF ALL        Y0715000
*                                          IDENTICAL CHARACTERS         Y0716000
*                                          AND TRAILING BLANK           Y0717000
*                                          ELIMINATION                  Y0718000
         TITLE 'RTP1130 (SYSTEM COMMUNICATION LOCATIONS)'               Y0719000
         SPACE 3                                                        Y0720000
*********************************************************************** Y0721000
*              SYMBOLIC DEFINITIONS OF SYSTEM COMMUNICATION LOCATIONS * Y0722000
*********************************************************************** Y0723000
         SPACE 3                                                        Y0724000
$DUMPPTR EQU   0                   LOCATION OF SHORT FORM BRANCH        Y0725000
*                                  ($B $DUMP) TO SYSTEM DUMP LINKAGE    Y0726000
$WAIT    EQU   14                  LOCATION OF GENERAL 'WAIT' ROUTINE   Y0727000
*                                  ENTERED VIA $TSL $WAIT               Y0728000
*        EQU   15                  LOCATION OF WAIT INSTRUCTION         Y0729000
*        EQU   16                  LOCATION OF $B $WAIT,,I INSTRUCTION  Y0730000
$DUMP    EQU   18                  LOCATION OF $TSL $SDUMP              Y0731000
$LLIMIT  EQU   $DUMP+2             LOWER LIMIT OF TERMINAL DUMP         Y0732000
$ULIMIT  EQU   $LLIMIT+1           UPPER LIMIT OF TERMINAL DUMP         Y0733000
$CORESIZ EQU   $ULIMIT             CELL CONTAINING 1130 CORE SIZE       Y0734000
$ERRLOG  EQU   $CORESIZ+1          START OF LOG AREA                    Y0735000
$ERRFFWT EQU   $ERRLOG             1403 WRITE ERROR COUNTER             Y0736000
$ERRETSC EQU   $ERRLOG+1           1132 SCAN CHECK COUNTER              Y0737000
$ERRSCRT EQU   $ERRLOG+2           SCA (LOW) RECEIVE TIMEOUT            Y0738000
$ERRSCWC EQU   $ERRLOG+3           SCA (LOW) TRANSMIT CHECK             Y0739000
$ERRSCTT EQU   $ERRLOG+4           SCA (LOW) TRANSMIT TIMEOUT           Y0740000
$ERRSCXX EQU   $ERRLOG+5           SCA (LOW) UNIDENTIFIED INTERRUPT     Y0741000
$PRTSCAN EQU   32                  1132 PRINTER SCAN AREA               Y0742000
         TITLE 'RTP1130 (UNIQUE KEYWORD DEFINITIONS)'                   Y0743000
*********************************************************************** Y0744000
*              DEVICE CODES FOR I/O UNITS ALA IOCC                    * Y0745000
*********************************************************************** Y0746000
         SPACE 3                                                        Y0747000
$SWITCH  EQU   X'3800'             CONSOLE SWITCHES                     Y0748000
$CONSOLE EQU   X'0800'             CONSOLE/KEYBOARD PRINTER             Y0749000
$1442    EQU   X'1000'             1442 CARD READER/PUNCH               Y0750000
$1132    EQU   X'3000'             1132 PRINTER                         Y0751000
$ENTRY   EQU   X'3800'             CONSOLE ENTRY SWITCHES               Y0752000
$2501    EQU   X'4800'             2501 READER                          Y0753000
$SCALOW  EQU   X'5000'             LOW SPEED BSCA                       Y0754000
$1403    EQU   X'A800'             1403 PRINTER                         Y0755000
         SPACE 2                                                        Y0756000
*********************************************************************** Y0757000
*              I/O FUNCTIONS ALA IOCC                                 * Y0758000
*********************************************************************** Y0759000
         SPACE 3                                                        Y0760000
$WRITE   EQU   X'0100'             WRITE                                Y0761000
$READ    EQU   X'0200'             READ                                 Y0762000
$SENSEI  EQU   X'0300'             SENSE INTERRUPT                      Y0763000
$CONTROL EQU   X'0400'             CONTROL                              Y0764000
$IWRITE  EQU   X'0500'             INITIATE WRITE                       Y0765000
$IREAD   EQU   X'0600'             INITIATE READ                        Y0766000
$SENSED  EQU   X'0700'             SENSE DEVICE                         Y0767000
         SPACE 3                                                        Y0768000
*********************************************************************** Y0769000
*              CONDITION CODE TEST BITS                               * Y0770000
*********************************************************************** Y0771000
         SPACE 3                                                        Y0772000
O        EQU   1                   OVERFLOW INDICATOR OFF               Y0773000
C        EQU   2                   CARRY INDICATOR OFF                  Y0774000
E        EQU   4                   AC CONTENTS EVEN                     Y0775000
P        EQU   8                   AC POSITIVE, NOT ZERO                Y0776000
N        EQU   16                  AC NEGATIVE                          Y0777000
Z        EQU   32                  AC ZERO                              Y0778000
         EJECT                                                          Y0779000
         SPACE 3                                                        Y0780000
*********************************************************************** Y0781000
*              MISCELLANEOUS UNIQUE SYMBOL DEFINITIONS                * Y0782000
*********************************************************************** Y0783000
         SPACE 2                                                        Y0784000
D1       EQU   2                   DISPLACEMENT OF 1 1130 WORD          Y0785000
A        EQU   127                 DEFINED TO                           Y0786000
B        EQU   128                  SHORTEN MACRO                       Y0787000
D        EQU   256                   EXPANSION LINE                     Y0788000
         SPACE 1                                                        Y0789000
*********************************************************************** Y0790000
*              BINARY SYNCHRONOUS CONTROL CHARACTERS                  * Y0791000
*********************************************************************** Y0792000
         SPACE 1                                                        Y0793000
$SOH     EQU   X'01'               START OF HEADING                     Y0794000
$STX     EQU   X'02'               START OF TEXT                        Y0795000
$ETX     EQU   X'03'               END OF TEXT                          Y0796000
$DLE     EQU   X'10'               DATA LINK ESCAPE                     Y0797000
$ETB     EQU   X'26'               END OF BLOCK                         Y0798000
$ENQ     EQU   X'2D'               ENQUIRY                              Y0799000
$SYN     EQU   X'32'               SYNCHRONOUS IDLE                     Y0800000
$EOT     EQU   X'37'               END OF TRANSMISSION                  Y0801000
$NAK     EQU   X'3D'               NEGATIVE ACKNOWLEDGEMENT             Y0802000
$ACK0    EQU   X'70'               POSITIVE ACKNOWLEDGEMENT             Y0803000
$PAD     EQU   X'FF'               PAD CHARACTER                        Y0804000
         EJECT                                                          Y0805000
*********************************************************************** Y0806000
*              SCA FUNCTION INDICATORS FOR BSXIOS INTERPRETATION      * Y0807000
*********************************************************************** Y0808000
         SPACE 2                                                        Y0809000
$BSXRDX  EQU   0                   READ (RECEIVE) FUNCTION              Y0810000
$BSXTMR  EQU   1                   PROGRAM TIMER FUNCTION               Y0811000
$BSXTNT  EQU   2                   TRANSMIT NORMAL TEXT                 Y0812000
$BSXTTT  EQU   3                   TRANSMIT TRANSPARENT TEXT            Y0813000
$BSXTAK  EQU   4                   TRANSMIT DLE-ACK0                    Y0814000
$BSXTNK  EQU   5                   TRANSMIT NAK                         Y0815000
$BSXTSQ  EQU   6                   TRANSMIT SOH-ENQ                     Y0816000
         SPACE 3                                                        Y0817000
*********************************************************************** Y0818000
*              CONTROL RECORD TYPE IDENTIFICATION DEFINITIONS         * Y0819000
*********************************************************************** Y0820000
         SPACE 2                                                        Y0821000
$CRREQT  EQU   X'90'               REQUEST TO START                     Y0822000
$CRPERM  EQU   X'A0'               PERMISSION TO START                  Y0823000
         SPACE 3                                                        Y0824000
*********************************************************************** Y0825000
*              INPUT (LOCAL DEVICES) CHARACTER CODE DEFINITIONS       * Y0826000
*********************************************************************** Y0827000
         SPACE 2                                                        Y0828000
$CRDCODE EQU   0                   IBM CARD CODE                        Y0829000
$PTTCODE EQU   1                   PAPER TAPE CODE                      Y0830000
$EBCCODE EQU   2                   EBCDIC CODE                          Y0831000
         SPACE 3                                                        Y0832000
*********************************************************************** Y0833000
*              CONSOLE MESSAGE LIST LEVEL SYMBOLICS                   * Y0834000
*********************************************************************** Y0835000
         SPACE 2                                                        Y0836000
$LIST15  EQU   15                  HIGHEST LEVEL                        Y0837000
         SPACE 3                                                        Y0838000
*********************************************************************** Y0839000
*              CONSOLE RIBBON COLOR AND PRINT CODE SYMBOLICS          * Y0840000
*********************************************************************** Y0841000
         SPACE 2                                                        Y0842000
$RED     EQU   X'80'               RED RIBBON CODE                      Y0843000
$BLACK   EQU   X'00'               BLACK RIBBON CODE                    Y0844000
$EBCD    EQU   X'00'               EBCDIC CODE                          Y0845000
$TILT    EQU   X'01'               TILT-ROTATE CODE                     Y0846000
         TITLE 'RTP1130 (CONSOLE ENTRY KEY DEFINITIONS)'                Y0847000
*********************************************************************** Y0848000
*              CONSOLE ENTRY KEY DEFINITIONS                          * Y0849000
*********************************************************************** Y0850000
*                                                                     * Y0851000
*                                  KEY  DESCRIPTION                   * Y0852000
*                                  ---  -----------                   * Y0853000
$KEY00   EQU   X'8000'               0  SET ON TO UPDATE $ENTKEYS WITH  Y0854000
*                                       VALUE OF ENTRY KEYS READ EACH   Y0855000
*                                       COMMUTATOR CYCLE                Y0856000
*                                                                     * Y0857000
$KEY01   EQU   X'4000'               1  SET ON TO INHIBIT SCA TRACE     Y0858000
*                                                                       Y0859000
*                                    -  KEYS 2 THRU 7 ARE RESERVED FOR  Y0860000
*                                       SYSTEM PROGRAMMER WHIMS         Y0861000
*                                                                     * Y0862000
*                                    -  KEYS 8 THRU 15 ARE AVAILABLE    Y0863000
*                                       FOR SENSIBLE OPERATIONAL USE    Y0864000
*                                                                     * Y0865000
         TITLE 'RTP1130 (INDEX REGISTER DEFINITIONS)'                   Y0866000
*********************************************************************** Y0867000
*              ABSOLUTE DEFINITION FOR INDEX REGISTERS                * Y0868000
*********************************************************************** Y0869000
         SPACE 3                                                        Y0870000
XR1      EQU   1                   INDEX REGISTER 1                     Y0871000
XR2      EQU   2                   INDEX REGISTER 2                     Y0872000
XR3      EQU   3                   INDEX REGISTER 3                     Y0873000
         SPACE 3                                                        Y0874000
*********************************************************************** Y0875000
*              STANDARD SYMBOLICS FOR WORK REGISTERS                  * Y0876000
*********************************************************************** Y0877000
         SPACE 3                                                        Y0878000
WA       EQU   XR1                 WORK REGISTER 1                      Y0879000
WB       EQU   XR2                 WORK REGISTER 2                      Y0880000
WC       EQU   XR3                 WORK REGISTER 3                      Y0881000
         TITLE 'RTP1130 (UFCB DESCRIPTION)'                             Y0882000
*********************************************************************** Y0883000
*              UNIT-FUNCTION CONTROL BLOCK DESCRIPTION                * Y0884000
*********************************************************************** Y0885000
UFCBCNW  EQU   0                   CHAIN WORD                           Y0886000
*                                                                       Y0887000
UFCBNFO  EQU   1                   INFORMATION WORD                     Y0888000
*                                   BYTE 0 = RESERVED                   Y0889000
*                                   BYTE 1 = INPUT CHARACTER CODE       Y0890000
*                                          = 0 FOR IBM CARD CODE        Y0891000
*                                          = 1 FOR PTTC/8 CODE          Y0892000
*                                          = 2 FOR EBCDIC CODE          Y0893000
*                                                                       Y0894000
UFCBSAR  EQU   2                   STATUS AND RCB                       Y0895000
*                                   BYTE 0 = STATUS OF UNIT-FUNCTION    Y0896000
*                                          = X'90' IF REQUEST TO START  Y0897000
*                                            SENT FROM INPUT UNIT-      Y0898000
*                                            FUNCTION OR IF REQUEST     Y0899000
*                                            TO START RECEIVED FOR      Y0900000
*                                            OUTPUT UNIT-FUNCTION       Y0901000
*                                          = X'A0' IF PERMISSION TO     Y0902000
*                                            START RECEIVED FOR INPUT   Y0903000
*                                            UNIT-FUNCTION OR IF        Y0904000
*                                            PERMISSION TO START SENT   Y0905000
*                                            FOR OUTPUT UNIT-FUNCTION   Y0906000
*                                   BYTE 1 = RCB IDENTIFYING UFCB       Y0907000
*                                                                       Y0908000
UFCBFCS  EQU   3                   FCS (FUNCTION IDENTIFIER BIT)        Y0909000
*                                                                       Y0910000
UFCBCOM  EQU   4                   COMMUTATOR GATE ADDRESS              Y0911000
*                                                                       Y0912000
UFCBFQP  EQU   5                   TANK FREE QUEUE POINTER OR           Y0913000
*                                  ADDRESS OF INPUT ELEMENT             Y0914000
*                                  FOR TPCOMPR                          Y0915000
*                                                                       Y0916000
UFCBBFP  EQU   6                   QUEUE POINTER FOR ACTIVE BUFFERS     Y0917000
*                                  OR END-OF-FILE FLAG FOR INPUT        Y0918000
*                                  DEVICES                              Y0919000
*                                                                       Y0920000
UFCBBFC  EQU   7                   COUNT OF ACTIVE BUFFERS              Y0921000
*                                                                       Y0922000
UFCBBFL  EQU   8                   LIMIT OF ACTIVE BUFFERS              Y0923000
*                                                                       Y0924000
UFCBPBP  EQU   9                   BUFFER ADDRESS OF CURRENT            Y0925000
*                                  BUFFER BEING PROCESSED BY            Y0926000
*                                  TPGET. SET TO ZERO IF NONE           Y0927000
*                                  BEING PROCESSED                      Y0928000
*                                                                       Y0929000
UFCBPBA  EQU   10                  ADDRESS OF NEXT RCB IN               Y0930000
*                                  PARTIALLY PROCESSED BUFFER           Y0931000
*                                                                       Y0932000
UFCBPBS  EQU   11                  LEFT/RIGHT POSITION INDICATOR        Y0933000
*                                  FOR NEXT RCB IN PARTIAL BUFFER       Y0934000
*                                                                       Y0935000
UFCBPWD  EQU   12                  OUTPUT DEVICE WIDTH = 2*W/P WHERE    Y0936000
*                                  W IS THE ACTUAL WIDTH IN CHARACTERS  Y0937000
*                                  AND P IS 2 FOR PACKED OUTPUT OR IS   Y0938000
*                                  1 FOR UNPACKED OUTPUT TANKS          Y0939000
*                                                                       Y0940000
UFCBPRO  EQU   13                  ENTRY POINT OF DATA ROUTINE          Y0941000
*                                  FOR EACH CHARACTER PROCESSED         Y0942000
*                                  BY $DBLOCK                           Y0943000
*                                                                       Y0944000
UFCBSTO  EQU   14                  ENTRY POINT OF STORE ROUTINE         Y0945000
*                                  FOR COMPANION DATA PROCESSOR         Y0946000
         SPACE 2                                                        Y0947000
*********************************************************************** Y0948000
*              ALTERNATE UFCB FIELD DEFINITIONS                       * Y0949000
*********************************************************************** Y0950000
         SPACE 2                                                        Y0951000
$FCBCOM  EQU   UFCBCOM             FACILITATES                          Y0952000
$FCBPRO  EQU   UFCBPRO              LONG FORM                           Y0953000
$FCBSTO  EQU   UFCBSTO               ABSOLUTE                           Y0954000
         TITLE 'RTP1130 (COMMUNICATION LINE BUFFER DESCRIPTION)'        Y0955000
*********************************************************************** Y0956000
*              TPBUF ELEMENT DESCRIPTION                              * Y0957000
*********************************************************************** Y0958000
TPBUFCW  EQU   0                   BUFFER CHAIN WORD                    Y0959000
*                                                                       Y0960000
TPBUFST  EQU   1                   BUFFER STATUS WORD                   Y0961000
*                                                                       Y0962000
TPBUFCB  EQU   2                   BUFFER CONTROL WORD                  Y0963000
*                                   BYTE 0=0 (RESERVED)                 Y0964000
*                                   TRANSMIT FUNCTION...                Y0965000
*                                   BYTE 1=NUMBER OF BYTES TO BE        Y0966000
*                                   TRANSMITTED (MINUS TWO FOR          Y0967000
*                                   END SEQUENCE WHICH IS INSERTED      Y0968000
*                                   BY BSXIOS)                          Y0969000
*                                   RECEIVE FUNCTION...                 Y0970000
*                                   BYTE 1=NUMBER OF BYTES RECEIVED     Y0971000
*                                   INCLUDING END SEQUENCE              Y0972000
*                                   TIMER FUNCTION...                   Y0973000
*                                   BYTE 1=NUMBER OF PROGRAM TIMER      Y0974000
*                                   INTERRUPTS PROCESSED BEFORE         Y0975000
*                                   ENDING TIMER OPERATION              Y0976000
*                                                                       Y0977000
TPBUFDT  EQU   3                   START OF DATA AREA OF LENGTH         Y0978000
*                                  DEFINED BY '&TPBFSZE'                Y0979000
*                                                                       Y0980000
TPBUFHD  EQU   3                   BSC HEADER WORD                      Y0981000
*                                   SET TO VALUE OF DESIRED SCA         Y0982000
*                                   FUNCTION (READ, WRITE OR TIMER)     Y0983000
*                                   AS DEFINED BY 'SCA FUNCTION         Y0984000
*                                   INDICATORS'                         Y0985000
*                                                                       Y0986000
TPBUFBF  EQU   4                   CONTROL SEQUENCE                     Y0987000
*                                   BYTE 0=BCB                          Y0988000
*                                   BYTE 1=FIRST HALF OF FCS            Y0989000
*                                                                       Y0990000
TPBUFFR  EQU   5                   CONTROL SEQUENCE                     Y0991000
*                                   BYTE 0=SECOND HALF OF FCS           Y0992000
*                                   BYTE 1=RCB                          Y0993000
*                                                                       Y0994000
TPBUFSR  EQU   6                   CONTROL SEQUENCE                     Y0995000
*                                   BYTE 0=SRCB                         Y0996000
*                                   BYTE 1=SCB                          Y0997000
*                                                                       Y0998000
         TITLE 'RTP1130 (QUEUE ELEMENT (TANK ENTRY) DEFINITIONS)'       Y0999000
         SPACE 3                                                        Y1000000
*********************************************************************** Y1001000
*              GENERAL DESCRIPTION OF ALL TANK ELEMENTS               * Y1002000
*********************************************************************** Y1003000
*                                                                     * Y1004000
TANKWRDA EQU   0                   ELEMENT CHAIN WORD  (EVEN)           Y1005000
*                                                                       Y1006000
TANKWRDB EQU   1                   SPARE WORD          (ODD)            Y1007000
*                                                                       Y1008000
TANKWRDC EQU   2                   CONTROL WORD        (EVEN)           Y1009000
*                                                                       Y1010000
TANKWRDD EQU   3                   CONTROL WORD        (ODD)            Y1011000
*                                                                       Y1012000
TANKWRDE EQU   4                   DATA AREA START     (EVEN)           Y1013000
*                                  LENGTH OF AREA MUST BE EVEN          Y1014000
*                                  IN TERMS OF 1130 WORDS               Y1015000
         EJECT                                                          Y1016000
*********************************************************************** Y1017000
*              1442 PUNCH ACTIVE ELEMENT DEFINITION                   * Y1018000
*********************************************************************** Y1019000
PN1442CW EQU   TANKWRDA            ELEMENT CHAIN WORD                   Y1020000
*                                                                       Y1021000
PN1442SP EQU   TANKWRDB            SPARE WORD                           Y1022000
*                                                                       Y1023000
PN1442CB EQU   TANKWRDC            CONTROL WORD                         Y1024000
*                                   BYTE 0 = RESERVED                   Y1025000
*                                   BYTE 1 = SRCB                       Y1026000
*                                                                       Y1027000
PN1442DL EQU   TANKWRDD            CONTROL WORD                         Y1028000
*                                   BYTE 0 = RESERVED                   Y1029000
*                                   BYTE 1 = ACTUAL DATA COUNT          Y1030000
*                                                                       Y1031000
PN1442DT EQU   TANKWRDE            START OF 80 WORD DATA AREA           Y1032000
*                                  IN UNCOMPRESSED CARD CODE            Y1033000
*                                  FORMAT. THE LAST COLUMN TO           Y1034000
*                                  BE PUNCHED CONTAINS A 12 BIT.        Y1035000
*                                                                       Y1036000
         EJECT                                                          Y1037000
*********************************************************************** Y1038000
*              1403 PRINTER ACTIVE ELEMENT DEFINITION                 * Y1039000
*********************************************************************** Y1040000
*                                                                     * Y1041000
PR1403CW EQU   TANKWRDA            ELEMENT CHAIN WORD                   Y1042000
*                                                                       Y1043000
PR1403SP EQU   TANKWRDB            SPARE WORD                           Y1044000
*                                                                       Y1045000
PR1403CB EQU   TANKWRDC            CONTROL WORD                         Y1046000
*                                   BYTE 0 = RESERVED                   Y1047000
*                                   BYTE 1 = SRCB                       Y1048000
*                                                                       Y1049000
PR1403DL EQU   TANKWRDD            CONTROL WORD                         Y1050000
*                                   BYTE 0 = RESERVED                   Y1051000
*                                   BYTE 1 = ACTUAL DATA COUNT          Y1052000
*                                                                       Y1053000
PR1403DT EQU   TANKWRDE            START OF '&PRFOTLW/2' WORD           Y1054000
*                                  DATA FIELD CONTAINING 6 BIT          Y1055000
*                                  PRINTER CODE (2 PER WORD) OF         Y1056000
*                                  DATA TO BE PRINTED.                  Y1057000
*                                                                       Y1058000
PRTFOTLW EQU   &PRFOTLW/2          NUMBER OF WORDS PER 1403 PRINT LINE  Y1059000
         EJECT                                                          Y1060000
*********************************************************************** Y1061000
*              1132 PRINTER ACTIVE ELEMENT DEFINITION                 * Y1062000
*********************************************************************** Y1063000
PR1132CW EQU   TANKWRDA            ELEMENT CHAIN WORD                   Y1064000
*                                                                       Y1065000
PR1132SP EQU   TANKWRDB            SPARE WORD                           Y1066000
*                                                                       Y1067000
PR1132CB EQU   TANKWRDC            CONTROL WORD                         Y1068000
*                                   BYTE 0 = RESERVED                   Y1069000
*                                   BYTE 1 = SRCB                       Y1070000
*                                                                       Y1071000
PR1132LC EQU   TANKWRDD            LINE CONTROL WORD                    Y1072000
*                                  BYTE 0 = 0 FOR ALPHANUMERIC          Y1073000
*                                       0 = 1 FOR NUMERIC ONLY          Y1074000
*                                  BYTE 1 = NUMBER OF BYTES TO          Y1075000
*                                  TO BE PRINTED. MUST BE EVEN.         Y1076000
*                                                                       Y1077000
PR1132DT EQU   TANKWRDE            START OF DATA IN PACKED              Y1078000
*                                  EBCDIC FORM                          Y1079000
*                                                                       Y1080000
         EJECT                                                          Y1081000
*********************************************************************** Y1082000
*              CONSOLE MESSAGE GENERAL ACTIVE ELEMENT DEFINITION      * Y1083000
*********************************************************************** Y1084000
CONMSGCW EQU   TANKWRDA            ELEMENT CHAIN WORD                   Y1085000
*                                                                       Y1086000
CONMSGSP EQU   TANKWRDB            SPARE WORD                           Y1087000
*                                                                       Y1088000
CONMSGCB EQU   TANKWRDC            CONTROL WORD                         Y1089000
*                                   BYTE 0 = X'00' FOR BLACK EBCDIC     Y1090000
*                                          = X'01' FOR BLACK PRINT CODE Y1091000
*                                          = X'80' FOR RED EBCDIC       Y1092000
*                                          = X'81' FOR RED PRINT CODE   Y1093000
*                                   BYTE 1 = SRCB                       Y1094000
*                                                                       Y1095000
CONMSGDL EQU   TANKWRDD            CONTROL WORD                         Y1096000
*                                   BYTE 0 = RESERVED                   Y1097000
*                                   BYTE 1 = NUMBER OF BYTES            Y1098000
*                                   IN DATA FIELD DEFINED BY            Y1099000
*                                   CONMSGDT                            Y1100000
*                                                                       Y1101000
*                                                                       Y1102000
CONMSGDT EQU   TANKWRDE            START OF DATA IN PACKED              Y1103000
*                                  EBCDIC OR CONSOLE PRINTER FORMAT     Y1104000
*                                                                       Y1105000
*                                  CONSOLE MESSAGE QUEUE SIZE IN WORDS  Y1106000
CONQSIZE EQU   &CNPSIZE/2                                               Y1107000
*                                                                       Y1108000
         AIF   (&FULLIST EQ 1).XPANDOK                                  Y1109000
         PRINT NOGEN               DELETE MACRO EXPANSIONS              Y1110000
.XPANDOK ANOP                                                           Y1111000
         TITLE 'RTP1130 (DEFINE UFCB''S FOR SPECIFIED CONFIGURATION)'   Y1112000
SUFCBLKS $NULL                     START OF UFCB'S                      Y1113000
         AIF   (&RD2501 EQ 0).NO25010                                   Y1114000
*********************************************************************** Y1115000
*              UFCB FOR 2501 CARD READER                              * Y1116000
*********************************************************************** Y1117000
RDTFEQUA EQU   &RDRSTRV                                                 Y1118000
RDTFEQUB EQU   &RDRFCSV                                                 Y1119000
RDTFUFCB $ADCON (RDTFUFCX)         POINTER TO NEXT UFCB                 Y1120000
         DC    AL1(0,$CRDCODE)     INFORMATION WORD (CARD CODE INPUT)   Y1121000
         DC    AL1(0,RDTFEQUA)     STATUS BYTE AND ASSOCIATED RCB       Y1122000
         DC    AL1(RDTFEQUB,0)     FCS (FUNCTION IDENTIFICATION BIT)    Y1123000
         $ADCON (RDTFOGT)          COMMUTATOR GATE ADDRESS              Y1124000
SRDTTANK DC    AL2(*-*)            ADDRESS OF 2501 INPUT TANK           Y1125000
RDTFUFLG DC    AL2(*-*)            END-OF-FILE FLAG                     Y1126000
RDTFUFCX $NULL                     ADDRESS OF NEXT UFCB                 Y1127000
&RDRSTRV SETA  &RDRSTRV+X'10'      INCREMENT INPUT STREAM VALUE         Y1128000
&RDRFCSV SETA  &RDRFCSV/2          CALCULATE FCS FOR NEXT STREAM        Y1129000
         SPACE 2                                                        Y1130000
.NO25010 ANOP                                                           Y1131000
         AIF   (NOT &RD1442).NO14420                                    Y1132000
         EJECT                                                          Y1133000
*********************************************************************** Y1134000
*              UFCB FOR 1442 READER                                   * Y1135000
*********************************************************************** Y1136000
RDFFEQUA EQU   &RDRSTRV                                                 Y1137000
RDFFEQUB EQU   &RDRFCSV                                                 Y1138000
RDFFUFCB $ADCON (RDFFUFCX)         POINTER TO NEXT UFCB                 Y1139000
         DC    AL1(0,$CRDCODE)     INFORMATION WORD (CARD CODE INPUT)   Y1140000
RDFFUSTR DC    AL1(*-*,RDFFEQUA)   STATUS BYTE & ASSOCIATED RCB         Y1141000
         DC    AL1(RDFFEQUB,0)     FCS (FUNCTION IDENTIFICATION BIT)    Y1142000
         $ADCON (RPFFTGT)          COMMUTATOR GATE ADDRESS              Y1143000
SRPFTANK DC    AL2(*-*)            ADDRESS OF 1442 INPUT TANK           Y1144000
RDFFUFLG DC    AL2(*-*)            END-OF-FILE FLAG                     Y1145000
RDFFUFCX $NULL                     ADDRESS OF NEXT UFCB                 Y1146000
&RDRSTRV SETA  &RDRSTRV+X'10'      INCREMENT INPUT STREAM VALUE         Y1147000
&RDRFCSV SETA  &RDRFCSV/2          CALCULATE FCS FOR NEXT STREAM        Y1148000
         SPACE 2                                                        Y1149000
.NO14420 ANOP                                                           Y1150000
         EJECT                                                          Y1151000
*********************************************************************** Y1152000
*              UFCB FOR CONSOLE INPUT (KEYBOARD)                      * Y1153000
*********************************************************************** Y1154000
CNSKEQUA EQU   &CNSKSTR                                                 Y1155000
CNSKEQUB EQU   &CNSKFCS                                                 Y1156000
CNSKUFCB $ADCON (CNSKUFCX)         POINTER TO NEXT UFCB                 Y1157000
         DC    AL1(0,$CRDCODE)     INFORMATION WORD (CARD CODE INPUT)   Y1158000
         DC    AL1(0,CNSKEQUA)     STATUS BYTE AND ASSOCIATED RCB       Y1159000
         DC    AL1(0,CNSKEQUB)     FCS (FUNCTION IDENTIFIER BIT)        Y1160000
         $ADCON (CONSLGT)          COMMUTATOR GATE ADDRESS              Y1161000
SCONTANK DC    AL2(*-*)            ADDRESS OF CONSOLE INPUT TANK        Y1162000
CNSKUFLG DC    AL2(*-*)            END-OF-FILE FLAG                     Y1163000
CNSKUFCX $NULL                     ADDRESS OF NEXT UFCB                 Y1164000
         SPACE 3                                                        Y1165000
         AIF   (NOT &PN1442).NO14421                                    Y1166000
         EJECT                                                          Y1167000
*********************************************************************** Y1168000
*              UFCB FOR 1442 PUNCH                                    * Y1169000
*********************************************************************** Y1170000
PNFFEQUA EQU   &PUNSTRV                                                 Y1171000
PNFFEQUB EQU   &PUNFCSV                                                 Y1172000
PNFFEQUC EQU   &PUNFBFL                                                 Y1173000
PNFFUFCB $ADCON (PNFFUFCX)         POINTER TO NEXT UFCB                 Y1174000
         DC    AL2(*-*)            INFORMATION WORD                     Y1175000
         DC    AL1(0,PNFFEQUA)     STATUS BYTE AND ASSOCIATED RCB       Y1176000
         DC    AL1(0,PNFFEQUB)     FCS (FUNCTION IDENTIFIER BIT)        Y1177000
         AIF   (NOT &RP1442).NO14428                                    Y1178000
         $ADCON (RPCNTGT)          COMMUTATOR ROUTINE GATE ADDRESS      Y1179000
         AGO   .NO14429                                                 Y1180000
.NO14428 ANOP                                                           Y1181000
         $ADCON (RPFFTGT)          COMMUTATOR ROUTINE GATE ADDRESS      Y1182000
.NO14429 ANOP                                                           Y1183000
PNFF2FQP $ADCON (PNFF2BGN)         TANK FREE QUEUE POINTER              Y1184000
PNFFUBFP DC    AL2(*-*)            QUEUE POINTER FOR ACTIVE BUFFERS     Y1185000
         DC    AL2(*-*)            ACTIVE BUFFER COUNT                  Y1186000
         DC    AL2(PNFFEQUC)       ACTIVE BUFFER LIMIT                  Y1187000
         DC    AL2(*-*)            ADDRESS OF BUFFER BEING PROCESSED    Y1188000
         DC    AL2(*-*)            RCB ADDRESS IN BUFFER                Y1189000
         DC    AL2(*-*)            RCB POSITION INDICATOR               Y1190000
         DC    AL2(2*80)           WIDTH OF PUNCH                       Y1191000
         $ADCON (SXCPNCH)          ADDRESS OF EBCDIC TO CARD CODE PGM   Y1192000
         $ADCON (DBLKSTF)          COMPANION ROUTINE TO FILL TANK       Y1193000
PNFFUFCX $NULL                     ADDRESS OF NEXT UFCB                 Y1194000
&PUNSTRV SETA  &PUNSTRV+X'10'      INCREMENT PUNCH STREAM VALUE         Y1195000
&PUNFCSV SETA  &PUNFCSV*2          CALCULATE FCS FOR NEXT STREAM        Y1196000
         SPACE 2                                                        Y1197000
.NO14421 ANOP                                                           Y1198000
         AIF   (&PR1403 EQ 0).NO14030                                   Y1199000
         EJECT                                                          Y1200000
*********************************************************************** Y1201000
*              UFCB FOR 1403 PRINTER                                  * Y1202000
*********************************************************************** Y1203000
PRFOEQUA EQU   &PRTSTRV                                                 Y1204000
PRFOEQUB EQU   &PRTFCSV                                                 Y1205000
PRFOEQUC EQU   &PRFOBFL                                                 Y1206000
PRFOEQUD EQU   &PRFOTLW                                                 Y1207000
PRFOUFCB $ADCON (PRFOUFCX)         POINTER TO NEXT UFCB                 Y1208000
         DC    AL2(*-*)            INFORMATION WORD                     Y1209000
         DC    AL1(0,PRFOEQUA)     STATUS BYTE AND ASSOCIATED RCB       Y1210000
         DC    AL1(PRFOEQUB,0)     FCS (FUNCTION IDENTIFICATION BIT)    Y1211000
         $ADCON (PRFOTGT)          COMMUTATOR GATE ADDRESS              Y1212000
PRFO3FQP $ADCON (PRFO3BGN)         TANK FREE QUEUE POINTER              Y1213000
PRFOUBFP DC    AL2(*-*)            QUEUE POINTER FOR ACTIVE BUFFERS     Y1214000
         DC    AL2(*-*)            ACTIVE BUFFER COUNT                  Y1215000
         DC    AL2(PRFOEQUC)       ACTIVE BUFFER LIMIT                  Y1216000
         DC    AL2(*-*)            ADDRESS OF BUFFER BEING PROCESSED    Y1217000
         DC    AL2(*-*)            RCB ADDRESS IN BUFFER                Y1218000
         DC    AL2(*-*)            RCB POSITION INDICATOR               Y1219000
         DC    AL2(PRFOEQUD)       WIDTH OF PRINTER                     Y1220000
         $ADCON (SXPPRNT)          ADDRESS OF 1403 CODE CONVERSION PGM  Y1221000
         $ADCON (DBLKPUT)          COMPANION ROUTINE TO FILL TANK       Y1222000
PRFOUFCX $NULL                     ADDRESS OF NEXT UFCB                 Y1223000
&PRTSTRV SETA  &PRTSTRV+X'10'      INCREMENT PRINT STREAM VALUE         Y1224000
&PRTFCSV SETA  &PRTFCSV/2          CALCULATE FCS FOR NEXT STREAM        Y1225000
         SPACE 2                                                        Y1226000
.NO14030 ANOP                                                           Y1227000
         AIF   (&PR1132 EQ 0).NO11320                                   Y1228000
         EJECT                                                          Y1229000
*********************************************************************** Y1230000
*              UFCB FOR 1132 PRINTER                                  * Y1231000
*********************************************************************** Y1232000
PRETEQUA EQU   &PRTSTRV                                                 Y1233000
PRETEQUB EQU   &PRTFCSV                                                 Y1234000
PRETEQUC EQU   &PRETBFL                                                 Y1235000
PRETUFCB $ADCON (PRETUFCX)         POINTER TO NEXT UFCB                 Y1236000
         DC    AL2(*-*)            INFORMATION WORD                     Y1237000
         DC    AL1(0,PRETEQUA)     STATUS BYTE AND ASSOCIATED RCB       Y1238000
         DC    AL1(PRETEQUB,0)     FCS (FUNCTION IDENTIFICATION BIT)    Y1239000
         $ADCON (PRETTGT)          COMMUTATOR GATE ADDRESS              Y1240000
PRET2FQP $ADCON (PRET2BGN)         TANK FREE QUEUE POINTER              Y1241000
PRETUBFP DC    AL2(*-*)            QUEUE POINTER FOR ACTIVE BUFFERS     Y1242000
         DC    AL2(*-*)            ACTIVE BUFFER COUNT                  Y1243000
         DC    AL2(PRETEQUC)       ACTIVE BUFFER LIMIT                  Y1244000
         DC    AL2(*-*)            ADDRESS OF BUFFER BEING PROCESSED    Y1245000
         DC    AL2(*-*)            RCB ADDRESS IN BUFFER                Y1246000
         DC    AL2(*-*)            RCB POSITION INDICATOR               Y1247000
PRETULWD DC    AL2(120)            LINE WIDTH OF 1132                   Y1248000
PRETUPRO $ADCON (DBLKNCK)          ADDRESS OF NUMERIC DATA CHECKER      Y1249000
         $ADCON (DBLKPUT)          COMPANION ROUTINE TO FILL TANK       Y1250000
PRETUFCX $NULL                     ADDRESS OF NEXT UFCB                 Y1251000
&PRTSTRV SETA  &PRTSTRV+X'10'      INCREMENT PRINT STREAM VALUE         Y1252000
&PRTFCSV SETA  &PRTFCSV/2          CALCULATE FCS FOR NEXT STREAM        Y1253000
         SPACE 2                                                        Y1254000
.NO11320 ANOP                                                           Y1255000
         EJECT                                                          Y1256000
*********************************************************************** Y1257000
*              UFCB FOR CONSOLE OUTPUT (PRINT)                        * Y1258000
*********************************************************************** Y1259000
CNSPEQUA EQU   &CNSPSTR                                                 Y1260000
CNSPEQUB EQU   &CNSPFCS                                                 Y1261000
CNSPEQUC EQU   &CNSPBFL                                                 Y1262000
CNSPEQUD EQU   &CNPSIZE                                                 Y1263000
CNSPUFCB $ADCON (CNSPUFCX)         POINTER OF NEXT UFCB                 Y1264000
         DC    AL2(*-*)            INFORMATION WORD                     Y1265000
         DC    AL1(0,CNSPEQUA)     STATUS BYTE AND ASSOCIATED RCB       Y1266000
         DC    AL1(0,CNSPEQUB)     FCS (FUNCTION IDENTIFIER BIT)        Y1267000
         $ADCON (CONSLGT)          COMMUTATOR GATE ADDRESS              Y1268000
CONSLFQP $ADCON (CONSLBGN)         TANK FREE QUEUE POINTER              Y1269000
CNSPUBFP DC    AL2(*-*)            QUEUE POINTER FOR ACTIVE BUFFERS     Y1270000
         DC    AL2(*-*)            ACTIVE BUFFER COUNT                  Y1271000
         DC    AL2(CNSPEQUC)       ACTIVE BUFFER LIMIT                  Y1272000
         DC    AL2(*-*)            ADDRESS OF BUFFER BEING PROCESSED    Y1273000
         DC    AL2(*-*)            RCB ADDRESS IN BUFFER                Y1274000
         DC    AL2(*-*)            RCB POSITION INDICATOR               Y1275000
         DC    AL2(CNSPEQUD)       CONSOLE PRINTER WIDTH                Y1276000
         $ADCON (SXCPRNT)          ADDRESS OF PRINT CONVERSION PGM      Y1277000
         $ADCON (DBLKPUT)          COMPANION ROUTINE TO FILL TANK       Y1278000
CNSPUFCX $NULL                     ADDRESS OF NEXT UFCB                 Y1279000
         SPACE 3                                                        Y1280000
SUFCBEND DC    AL2(0)              ZERO CHAIN WORD FOR END OF UFCB'S    Y1281000
         TITLE 'RTP1130 (SYSTEM SUBROUTINES)'                           Y1282000
         SPACE 3                                                        Y1283000
*********************************************************************** Y1284000
*                                                                     * Y1285000
* TITLE - $GETQEL (DEQUEUE AN ELEMENT FROM A CHAINED LIST)            * Y1286000
*                                                                     * Y1287000
* FUNCTION/DESCRIPTION                                                * Y1288000
*                                                                     * Y1289000
*  TO RETURN THE ADDRESS OF THE FIRST ELEMENT AVAILABLE ON A LIST OF  * Y1290000
*  CHAINED ELEMENTS.                                                  * Y1291000
*                                                                     * Y1292000
* CALLING SEQUENCE                                                    * Y1293000
*                                                                     * Y1294000
*                             $TSL   $GETQEL                          * Y1295000
*                                                                     * Y1296000
*              WHERE-- WC CONTAINS THE ADDRESS OF THE QUEUE ELEMENT   * Y1297000
*                      POINTER ON ENTRY.                              * Y1298000
*                                                                     * Y1299000
*                      AC CONTAINS THE ADDRESS OF THE DEQUEUED        * Y1300000
*                      ELEMENT ON EXIT. IF THE QUEUE IS NULL,         * Y1301000
*                      THE AC IS SET TO ZERO ON EXIT                  * Y1302000
*                                                                     * Y1303000
*                      THE CHAIN FIELD OF THE DEQUEUED ELEMENT        * Y1304000
*                      IS SET TO ZERO BEFORE RETURNING                * Y1305000
*                                                                     * Y1306000
*********************************************************************** Y1307000
         SPACE 3                                                        Y1308000
SGETQEL  DC    H'0'                ENTRY VIA $TSL $GETQEL               Y1309000
         $LD   0,WC                GET THE QUEUE ELEMENT POINTER        Y1310000
         $BZ   SGETQEL,,I          RETURN IF NO ELEMENTS AVAILABLE      Y1311000
         $STO  GETQTEMP            SAVE ELEMENT ADDRESS FOR EXIT        Y1312000
         $LD   GETQTEMP,,I         GET ADDRESS OF NEXT ELEMENT          Y1313000
         $STO  0,WC                STORE IN QUEUE ELEMENT POINTER       Y1314000
         $ZAC                      CLEAR AC AND SET CHAIN               Y1315000
         $STO  GETQTEMP,,I         FIELD ZERO IN ELEMENT DEQUEUED       Y1316000
         $LD   GETQTEMP            ELEMENT ADDRESS TO AC                Y1317000
         $B    SGETQEL,,I          EXIT                                 Y1318000
GETQTEMP DC    H'0'                STORAGE FOR ELEMENT ADDRESS          Y1319000
         EJECT                                                          Y1320000
*********************************************************************** Y1321000
*                                                                     * Y1322000
* TITLE - $PUTFQL (ENQUEUE AN ELEMENT IN A FREE ELEMENT CHAIN)        * Y1323000
*                                                                     * Y1324000
* FUNCTION PURPOSE                                                    * Y1325000
*                                                                     * Y1326000
*  TO ENQUEUE AN ELEMENT IN A FREE ELEMENT CHAIN.                     * Y1327000
*                                                                     * Y1328000
* CALLING SEQUENCE                                                    * Y1329000
*                                                                     * Y1330000
*                             $TSL  $PUTFQL                           * Y1331000
*                                                                     * Y1332000
*              WHERE-- WC CONTAINS THE ADDRESS OF THE FREE ELEMENT    * Y1333000
*                      QUEUE POINTER ON ENTRY.                        * Y1334000
*                                                                     * Y1335000
*                      AC CONTAINS THE ADDRESS OF THE ELEMENT TO      * Y1336000
*                      BE CHAINED (ENQUEUED).                         * Y1337000
*                                                                     * Y1338000
*********************************************************************** Y1339000
         SPACE 3                                                        Y1340000
SPUTFQL  DC    H'0'                ENTRY VIA $TSL $PUTFQL               Y1341000
         $STO  PUTFTEMP            SAVE RETURNING ELEMENT ADDRESS       Y1342000
         $LD   0,WC                GET FREE ELEMENT QUEUE POINTER       Y1343000
         $STO  PUTFTEMP,,I         CHAIN CURRENT ELEMENT TO NEW         Y1344000
         $LD   PUTFTEMP            PUT NEW ELEMENT                      Y1345000
         $STO  0,WC                IN QUEUE POINTER                     Y1346000
         $B    SPUTFQL,,I          EXIT                                 Y1347000
PUTFTEMP DC    H'0'                NEW ELEMENT ADDRESS                  Y1348000
         EJECT                                                          Y1349000
*********************************************************************** Y1350000
*                                                                     * Y1351000
* TITLE - $PUTAQL (ENQUEUE AN ELEMENT IN AN ACTIVE ELEMENT CHAIN)     * Y1352000
*                                                                     * Y1353000
* FUNCTION/PURPOSE                                                    * Y1354000
*                                                                     * Y1355000
*  TO ENQUEUE AN ELEMENT IN AN ACTIVE (FIFO) CHAIN.                   * Y1356000
*                                                                     * Y1357000
* CALLING SEQUENCE                                                    * Y1358000
*                                                                     * Y1359000
*                             $TSL  $PUTAQL                           * Y1360000
*                                                                     * Y1361000
*              WHERE-- WC CONTAINS THE ADDRESS OF THE QUEUE ELEMENT   * Y1362000
*                      POINTER ON ENTRY.                              * Y1363000
*                                                                     * Y1364000
*                      AC CONTAINS THE ADDRESS OF THE ELEMENT TO BE   * Y1365000
*                      ENQUEUED (CHAINED) AT THE END OF A FIFO        * Y1366000
*                      QUEUE.                                         * Y1367000
*                                                                     * Y1368000
*********************************************************************** Y1369000
         SPACE 3                                                        Y1370000
SPUTAQL  DC    H'0'                ENTRY VIA $TSL $PUTAQL               Y1371000
         $STX  PUTAQSVC+D1,WC      SAVE WC                              Y1372000
         $STO  PUTATEMP            SAVE ELEMENT ADDRESS                 Y1373000
         $LD   0,WC                GET ACTIVE ELEMENT POINTER           Y1374000
         $BNZ  PUTAQADD            BRANCH IF CHAIN EXISTS               Y1375000
         $LD   PUTATEMP            START A NEW CHAIN                    Y1376000
         $STO  0,WC                STORE NEW ADDRESS IN QUEUE POINTER   Y1377000
         $B    PUTAQSVC            GO TO EXIT                           Y1378000
PUTAQADD $STO  WC,,L               CHAIN POINTER TO WC                  Y1379000
         $LD   0,WC                GET NEXT ELEMENT                     Y1380000
         $BNZ  PUTAQADD            SEARCH FOR LAST                      Y1381000
         $LD   PUTATEMP            GET NEW ENTRY                        Y1382000
         $STO  0,WC                ADD TO LIST                          Y1383000
PUTAQSVC $AXT  *-*,WC,L            RESTORE WC                           Y1384000
         $B    SPUTAQL,,I          EXIT                                 Y1385000
PUTATEMP DC    H'0'                NEW ELEMENT ADDRESS                  Y1386000
         EJECT                                                          Y1387000
*********************************************************************** Y1388000
*                                                                     * Y1389000
* TITLE - $TPOPEN (INITIATE CONTROL RECORD TRANSMISSION TO HASP)      * Y1390000
*                                                                     * Y1391000
* FUNCTION/PURPOSE -                                                  * Y1392000
*                                                                     * Y1393000
*  TO INITIATE CONTROL RECORD TRANSMISSION TO HASP FOR DEFINED        * Y1394000
*  CONTROL RECORD TYPES (REQUEST TO START, PERMISSION TO SEND...,     * Y1395000
*  ETC.) THE PROCESSING OF THE CONTROL RECORDS IS BY THE TPPUT        * Y1396000
*  COMMUTATOR ROUTINE FOR BUILDING OUTPUT BUFFERS.                    * Y1397000
*                                                                     * Y1398000
* CALLING SEQUENCE -                                                  * Y1399000
*                                                                     * Y1400000
*                             $TSL  $TPOPEN  LINKAGE                  * Y1401000
*                             ....           EXIT POINT               * Y1402000
*                                                                     * Y1403000
*                             (ENTRY) WC CONTAINS ADDRESS OF          * Y1404000
*                             UFCB FOR FUNCTION ASSOCIATED            * Y1405000
*                             WITH CONTROL RECORD PROCESS             * Y1406000
*                                                                     * Y1407000
*                             (ENTRY) AC CONTAINS CONTROL             * Y1408000
*                             TYPE LEFT JUSTIFIED WITH LOW            * Y1409000
*                             ORDER BYTE ZERO. THIS VALUE             * Y1410000
*                             IS STORED IN THE STATUS FIELD           * Y1411000
*                             OF THE UFCB SUPPLIED                    * Y1412000
*                                                                     * Y1413000
*                             (EXIT) AC SET TO NON-ZERO IF REQUEST    * Y1414000
*                             CANNOT BE PROCESSED IMMEDIATELY         * Y1415000
*                                                                     * Y1416000
*                             AC SET TO ZERO IF REQUEST PROCESSED     * Y1417000
*                                                                     * Y1418000
*********************************************************************** Y1419000
         SPACE 3                                                        Y1420000
STPOPEN  DC    AL2(*-*)            ENTRY VIA $TSL $TPOPEN               Y1421000
         $STO  TPOPSVT             STORE CONTROL TYPE                   Y1422000
         $LD   SCRQUEUE            GET CONTROL RECORD QUEUE             Y1423000
         $BNZ  STPOPEN,,I          EXIT IF PREVIOUS REQUEST             Y1424000
         $STX  SCRQUEUE,WC         SET UFCB ADDRESS FOR REQUEST         Y1425000
         $LD   UFCBSAR,WC,X        GET STATUS AND RCB WORD              Y1426000
         $AND  TPOPLHM             CLEAR STATUS BYTE                    Y1427000
         $OR   TPOPSVT              SET TO TYPE                         Y1428000
         $STO  UFCBSAR,WC,X          SUPPLIED BY CALLER                 Y1429000
         $ZAC                      SUCCESS FLAG                         Y1430000
         $B    STPOPEN,,I          RETURN TO CALLER                     Y1431000
TPOPSVT  DC    AL2(*-*)            CONTROL TYPE STORAGE                 Y1432000
TPOPLHM  DC    AL2(X'00FF')        STATUS BYTE MASK                     Y1433000
SCRQUEUE DC    AL2(*-*)            SET TO ADDRESS OF UFCB               Y1434000
*                                  BY $TPOPEN                           Y1435000
*                                  SET TO ZERO BY TPPUT WHEN            Y1436000
*                                  CONTROL RECORD PROCESSED             Y1437000
         EJECT                                                          Y1438000
*********************************************************************** Y1439000
*                                                                     * Y1440000
* TITLE - $SRCHB (SEARCH UFCB'S FOR MATCHING RCB CODE)                * Y1441000
*                                                                     * Y1442000
* FUNCTION/PURPOSE -                                                  * Y1443000
*                                                                     * Y1444000
*  SEARCHES UFCB CHAIN FOR MATCHING RCB AS SUPPLIED BY USER.          * Y1445000
*  ADDRESS OF MATCHING UFCB IS RETURNED IF SUCCESSFUL SEARCH.         * Y1446000
*                                                                     * Y1447000
* CALLING SEQUENCE -                                                  * Y1448000
*                                                                     * Y1449000
*                             $TSL $SRCHCB   LINKAGE                  * Y1450000
*                             ....           RETURN                   * Y1451000
*                                                                     * Y1452000
*                             ENTRY...AC CONTAINS RCB CODE            * Y1453000
*                             IN LOW ORDER BYTE (HIGH IGNORED)        * Y1454000
*                             TO BE COMPARED WITH RCB FIELD           * Y1455000
*                             (UFCBSAR) OF UFCB'S                     * Y1456000
*                                                                     * Y1457000
*                             (EXIT)....AC ZERO FOR SUCCESSFUL        * Y1458000
*                             SEARCH. WC CONTAINS ADDRESS OF          * Y1459000
*                             MATCHING UFCB CHAIN WORD                * Y1460000
*                                                                     * Y1461000
*                             AC SET TO SEARCH RCB IF NO MATCH        * Y1462000
*                             WC CONTAINS ZERO                        * Y1463000
*                                                                     * Y1464000
*********************************************************************** Y1465000
         SPACE 3                                                        Y1466000
SSRCHCB  DC    AL2(*-*)            ENTRY VIA $TSL $SRCHCB               Y1467000
         $AND  SRCHMSK             CLEAR HIGH ORDER BYTE                Y1468000
         $STO  SRCHRCB             SAVE RCB CODE FOR COMPARE            Y1469000
         $AXT  SUFCBLKS,WC,L       START OF UFCB CHAIN TO WC            Y1470000
SRCHALL  $LD   UFCBSAR,WC,X        GET STATUS/RCB ENTRY                 Y1471000
         $AND  SRCHMSK             MASK STATUS BYTE                     Y1472000
         $EOR  SRCHRCB             TEST FOR RCB MATCH                   Y1473000
         $BZ   SSRCHCB,,I          RETURN IF MATCH                      Y1474000
         $LD   UFCBCNW,WC,X        GET NEXT UFCB CHAIN WORD             Y1475000
         $STO  WC,,L               SET WC FOR SEARCH                    Y1476000
         $BNZ  SRCHALL             RUN THE CHAIN                        Y1477000
         $LD   SRCHRCB             END OF CHAIN AND                     Y1478000
         $B    SSRCHCB,,I           NO RCB MATCH                        Y1479000
SRCHRCB  DC    AL2(*-*)            INPUT RCB                            Y1480000
SRCHMSK  DC    AL2(X'00FF')        STATUS MASK                          Y1481000
         EJECT                                                          Y1482000
*********************************************************************** Y1483000
*                                                                     * Y1484000
* TITLE - $WTOPR (TYPE SPECIFIED MESSAGE ON CONSOLE TYPEWRITER)       * Y1485000
*                                                                     * Y1486000
* FUNCTION/PURPOSE -                                                  * Y1487000
*                                                                     * Y1488000
*  TO QUEUE SPECIFIED MESSAGE FOR PRINTING ON THE CONSOLE             * Y1489000
*  TYPEWRITER BY THE CONSOLE PRINTER COMMUTATOR ROUTINE               * Y1490000
*                                                                     * Y1491000
* CALLING SEQUENCE -                                                  * Y1492000
*                                                                     * Y1493000
*                        $TSL   $WTOPR       LINKAGE                  * Y1494000
*                        $ADCON (NONE)       NO ELEMENT EXIT ADDRESS  * Y1495000
*                        $ADCON (MESS)       ADDRESS OF MESSAGE       * Y1496000
*                        ...                 NORMAL EXIT              * Y1497000
*                                                                     * Y1498000
*                WHERE.. 'NONE' IS THE EXIT ADDRESS USED IF           * Y1499000
*                        NO ELEMENT IS AVAILABLE FOR THE              * Y1500000
*                        MESSAGE.                                     * Y1501000
*                                                                     * Y1502000
*                        'MESS' IS THE ADDRESS OF THE MESSAGE TO      * Y1503000
*                        BE PRINTED AND IS OF THE FORM...             * Y1504000
*                                                                     * Y1505000
*                        WORD 1 = CONTROL WORD INDICATING PRINT       * Y1506000
*                        COLOR AND LIST LEVEL                         * Y1507000
*                                                                     * Y1508000
*                        WORD 2 = NUMBER (N) OF EBCDIC BYTES          * Y1509000
*                        FOLLOWING (MUST BE EVEN)                     * Y1510000
*                                                                     * Y1511000
*                        WORD 3 = FIRST 2 BYTES                       * Y1512000
*                                                                     * Y1513000
*                                                                     * Y1514000
*                        WORD (N/2)-1 = LAST 2 BYTES                  * Y1515000
*                                                                     * Y1516000
*********************************************************************** Y1517000
         SPACE 3                                                        Y1518000
SWTOPR   DC    AL2(*-*)            ENTRY VIA $TSL $WTOPR                Y1519000
         $LXA  SWTOPR,WC           ADDRESS OF ADDRESS OF 'NONE' EXIT    Y1520000
         $LD   0,WC                ADDRESS OF 'NONE' EXIT               Y1521000
         $STO  WTOPRNO+D1          SET NO ELEMENT EXIT                  Y1522000
         $LD   1,WC                ADDRESS OF MESSAGE                   Y1523000
         $STO  WTOPRTM             SAVE IT                              Y1524000
         $MDX  2,WC                SETUP                                Y1525000
         $STX  WTOPRXT+D1,WC        EXIT                                Y1526000
         $DEQUE CONSLFQP           GET A FREE QUEUE ELEMENT             Y1527000
WTOPRNO  $BZ   *-*                 EXIT IF NONE AVAILABLE               Y1528000
         $STO  WTOPREL             SAVE ADDRESS OF ELEMENT              Y1529000
         $STX  WTOPRSA+D1,WA       SAVE WA                              Y1530000
         $STX  WTOPRSB+D1,WB       SAVE WB                              Y1531000
         $LXA  WTOPRTM,WB          MESSAGE ADDRESS                      Y1532000
         $LXA  WTOPREL,WA          ELEMENT ADDRESS                      Y1533000
         $MDX  CONMSGCB,WA,X       POINT TO FIRST CONTROL WORD          Y1534000
         $LD   1,WB                GET LENGTH OF MESSAGE                Y1535000
         $SRA  1                   MAKE IT NUMBER OF WORDS              Y1536000
         $A    WTOPRCX             INCLUDE CONTROL WORDS                Y1537000
         $TSL  SMOVE               MOVE MESSAGE TO ELEMENT              Y1538000
         $LD   WTOPREL             ELEMENT ADDRESS                      Y1539000
         $QACTL CONSLAQP           QUEUE IT FOR TYPING                  Y1540000
         $LD   UNLATCH,,L          OPEN CONSOLE                         Y1541000
         $STO  CONSLGT,,L           GATE                                Y1542000
WTOPRSA  $AXT  *-*,WA,L            RESTORE WA                           Y1543000
WTOPRSB  $AXT  *-*,WB,L            RESTORE WB                           Y1544000
WTOPRXT  $B    *-*,,L              NORMAL EXIT                          Y1545000
WTOPRTM  DC    AL2(*-*)            MESSAGE ADDRESS                      Y1546000
WTOPREL  DC    AL2(*-*)            ELEMENT ADDRESS                      Y1547000
WTOPRCX  DC    AL2(2)              CONTROL WORD COUNT                   Y1548000
         EJECT                                                          Y1549000
*********************************************************************** Y1550000
*                                                                     * Y1551000
* TITLE - $LOGSCA (LOG SCA MESSAGES FOR ERROR MONITORING OR DEBUGGING)* Y1552000
*                                                                     * Y1553000
* FUNCTION/PURPOSE -                                                  * Y1554000
*                                                                     * Y1555000
*  TO QUEUE A MESSAGE FOR PRINTING ON THE CONSOLE TYPEWRITER WHICH    * Y1556000
*  CONTAINS INFORMATION PERTINENT TO THE SCA OPERATION. THE FORMAT    * Y1557000
*  OF THE MESSAGE IS FIXED BUT THE CONTENT IS DICTATED BY THE USER.   * Y1558000
*                                                                     * Y1559000
* CALLING SEQUENCE -                                                  * Y1560000
*                                                                     * Y1561000
*                             $TSL  $LOGSCA  LINKAGE                  * Y1562000
*                             ....           RETURN                   * Y1563000
*                                                                     * Y1564000
*                   WHERE --- (ENTRY) AC AND EXT CONTAIN DATA TO BE   * Y1565000
*                             CONVERTED TO HEX-EBCDIC FOR INSERTION   * Y1566000
*                             IN THE MESSAGE QUEUED...THE FORMAT OF   * Y1567000
*                             THE MESSAGE IS...                       * Y1568000
*                                                                     * Y1569000
*                             SCA LOG XXXXXXXX                        * Y1570000
*                                                                     * Y1571000
*                              WHERE 'XXXXXXXX' IS THE CONVERTED DATA * Y1572000
*                                                                     * Y1573000
*                             (EXIT) AC IS SET NON-ZERO IF MESSAGE    * Y1574000
*                             SUCCESSFULLY QUEUED.                    * Y1575000
*                                                                     * Y1576000
*                             AC SET ZERO IF MESSAGE CANNOT BE        * Y1577000
*                             PROCESSED IMMEDIATELY.                  * Y1578000
*                                                                     * Y1579000
*                             ALL INDEX REGISTERS ARE PRESERVED.      * Y1580000
*                                                                     * Y1581000
*********************************************************************** Y1582000
         SPACE 3                                                        Y1583000
SLOGSCA  DC    AL2(*-*)            ENTRY VIA $TSL $LOGSCA               Y1584000
         $STD  LOGSINP             SAVE INPUT DATA                      Y1585000
         $LD   CONSLFQP,,L         GET CONSOLE FREE QUEUE POINTER       Y1586000
         $BZ   SLOGSCA,,I          EXIT IF NO ELEMENT AVAILABLE         Y1587000
         $STX  LOGSVWA+D1,WA       SAVE                                 Y1588000
         $STX  LOGSVWB+D1,WB        ALL                                 Y1589000
         $STX  LOGSVWC+D1,WC         REGISTERS                          Y1590000
         $AXT  -2,WA               INPUT WORD INDEX                     Y1591000
LOGSOTL  $LD   LOGSOPT+2*D1,WA,L   GET OUTPUT AREA POINTER              Y1592000
         $STO  LOGSPUT+D1          SETUP STORE INSTRUCTION              Y1593000
         $LD   LOGSINP+2*D1,WA,L   GET INPUT DATA WORD                  Y1594000
         $RTE  16                   TO EXTENSION OF AC (MQ)             Y1595000
         $AXT  -4,WB               INITIALIZE HEX DIGIT COUNTER         Y1596000
LOGSINL  $SLT  4                   GET A HEX DIGIT                      Y1597000
         $AND  LOGSMSK             CLEAR BITS 0-11                      Y1598000
         $STO  WC,,L               SET TABLE INDEX                      Y1599000
         $LD   XXEBCTB,WC,L        GET EBCDIC VALUE                     Y1600000
LOGSPUT  $STO  *-*,WB,L            STORE IN UNPACKED FORM               Y1601000
         $MDX  1,WB                STEP TO NEXT DIGIT                   Y1602000
         $B    LOGSINL             CONVERT ALL FOUR                     Y1603000
         $MDX  1,WA                STEP TO NEXT WORD                    Y1604000
         $B    LOGSOTL             DO TWO WORDS                         Y1605000
         $AXT  0,WA                INPUT INDEX                          Y1606000
         $AXT  -4,WB               OUTPUT INDEX                         Y1607000
LOGSPAK  $LDD  LOGSOUT,WA,L        GET TWO UNPACKED WORDS               Y1608000
         $SRA  8                   PACK                                 Y1609000
         $SLT  8                    AND                                 Y1610000
         $STO  LOGSOUT+4*D1,WB,L     STORE                              Y1611000
         $MDX  2,WA                STEP TO NEXT PAIR                    Y1612000
         $MDX  1,WB                INCREMENT AND TEST STORE INDEX       Y1613000
         $B    LOGSPAK             PACK 8 INTO 4                        Y1614000
         $WTO  LOGSMSG,LOGSZAP     QUEUE MESSAGE                        Y1615000
LOGSZAP  $LD   *                   FLAG SUCCESS                         Y1616000
LOGSVWA  $AXT  *-*,WA,L            RESTORE                              Y1617000
LOGSVWB  $AXT  *-*,WB,L             ALL                                 Y1618000
LOGSVWC  $AXT  *-*,WC,L              REGISTERS                          Y1619000
         $B    SLOGSCA,,I          RETURN TO CALLER                     Y1620000
*********************************************************************** Y1621000
*              CONSTANTS AND STORAGE                                  * Y1622000
*********************************************************************** Y1623000
         $BSS  0,E                 EVEN STORAGE REQUIRED                Y1624000
LOGSOPT  $ADCON (LOGSOUT+4*D1)     FIRST WORD OUTPUT POINTER            Y1625000
         $ADCON (LOGSOUT+8*D1)     SECOND WORD OUTPUT POINTER           Y1626000
LOGSINP  $BSS  2                   STORAGE FOR INPUT                    Y1627000
LOGSMSG  DC    AL1($BLACK+$EBCD,$LIST15) MESSAGE CONTROL WORD           Y1628000
         DC    AL2(16)             DATA COUNT                           Y1629000
         DC    C'SCA LOG '         MUST BE EVEN NUMBER OF WORDS         Y1630000
LOGSOUT  $BSS  8                   OUTPUT AREA                          Y1631000
LOGSMSK  DC    AL2(X'000F')        TO CLEAR BITS 0-11                   Y1632000
*********************************************************************** Y1633000
*              HEXADECIMAL TO EBCDIC CONVERSION TABLE                 * Y1634000
*********************************************************************** Y1635000
XXEBCTB  DC    X'F000'             0                                    Y1636000
         DC    X'F100'             1                                    Y1637000
         DC    X'F200'             2                                    Y1638000
         DC    X'F300'             3                                    Y1639000
         DC    X'F400'             4                                    Y1640000
         DC    X'F500'             5                                    Y1641000
         DC    X'F600'             6                                    Y1642000
         DC    X'F700'             7                                    Y1643000
         DC    X'F800'             8                                    Y1644000
         DC    X'F900'             9                                    Y1645000
         DC    X'C100'             A                                    Y1646000
         DC    X'C200'             B                                    Y1647000
         DC    X'C300'             C                                    Y1648000
         DC    X'C400'             D                                    Y1649000
         DC    X'C500'             E                                    Y1650000
         DC    X'C600'             F                                    Y1651000
         EJECT                                                          Y1652000
*********************************************************************** Y1653000
*                                                                     * Y1654000
* TITLE - $MOVE (MOVE VARIABLE NUMBER OF WORDS)                       * Y1655000
*                                                                     * Y1656000
* FUNCTION/PURPOSE                                                    * Y1657000
*                                                                     * Y1658000
*  TO MOVE A SPECIFIED NUMBER OF WORDS FROM A SOURCE BLOCK TO         * Y1659000
*  A TARGET BLOCK.                                                    * Y1660000
*                                                                     * Y1661000
* CALLING SEQUENCE                                                    * Y1662000
*                                                                     * Y1663000
*                             $TSL  $MOVE    LINKAGE                  * Y1664000
*                             ....           RETURN                   * Y1665000
*                                                                     * Y1666000
*              WHERE--WA CONTAINS THE ADDRESS OF THE FIRST            * Y1667000
*                     WORD OF THE TARGET BLOCK ON ENTRY               * Y1668000
*                                                                     * Y1669000
*                   --WB CONTAINS THE ADDRESS OF THE FIRST            * Y1670000
*                     WORD OF THE SOURCE BLOCK ON ENTRY               * Y1671000
*                                                                     * Y1672000
*                   --AC CONTAINS THE NUMBER OF WORDS TO              * Y1673000
*                     MOVE ON ENTRY                                   * Y1674000
*                                                                     * Y1675000
*                   WA AND WB ARE SAVED AND RESTORED.                 * Y1676000
*                   AC IS DESTROYED.                                  * Y1677000
*                                                                     * Y1678000
*********************************************************************** Y1679000
         SPACE 3                                                        Y1680000
SMOVE    DC    AL2(*-*)            ENTRY VIA $TSL $MOVE                 Y1681000
         $STO  MOVECONT            STORE WORD COUNT                     Y1682000
         $STX  MOVESVWA+D1,WA      SAVE WA                              Y1683000
         $STX  MOVESVWB+D1,WB      SAVE WB                              Y1684000
MOVELOOP $LD   0,WB                GET SOURCE DATA                      Y1685000
         $STO  0,WA                STORE IN TARGET                      Y1686000
         $MDX  1,WB                INCREMENT TO NEXT                    Y1687000
         $MDX  1,WA                SOURCE AND TARGET                    Y1688000
         $MDM  MOVECONT,-1         DECREMENT AND TEST COUNT             Y1689000
         $B    MOVELOOP            BRANCH IF MORE                       Y1690000
MOVESVWA $AXT  *-*,WA,L            RESTORE WA                           Y1691000
MOVESVWB $AXT  *-*,WB,L            RESTORE WB                           Y1692000
         $B    SMOVE,,I            RETURN                               Y1693000
MOVECONT DC    AL2(*-*)            NUMBER OF WORDS TO MOVE              Y1694000
         EJECT                                                          Y1695000
*********************************************************************** Y1696000
*                                                                     * Y1697000
* TITLE - $XPRESS (CONVERT 12 BIT CARD CODE TO EBCIDC)                * Y1698000
*                                                                     * Y1699000
* FUNCTION/PURPOSE -                                                  * Y1700000
*                                                                     * Y1701000
* TO  CONVERT 12 BIT 'IBM' CARD CODE TO EBCDIC 8 BIT CHARACTERS       * Y1702000
*                                                                     * Y1703000
* CALLING SEQUENCE -                                                  * Y1704000
*                                                                     * Y1705000
*                             $TSL  $XPRESS  LINKAGE                  * Y1706000
*                             ....           RETURN                   * Y1707000
*                                                                     * Y1708000
*                   WHERE--AC CONTAINS CARD CODE IN BITS 0-11 ON      * Y1709000
*                          ENTRY TO $XPRESS                           * Y1710000
*                                                                     * Y1711000
*                        --AC CONTAINS EBCDIC CHARACTER IN BITS 7-15  * Y1712000
*                          ON RETURN FROM $XPRESS                     * Y1713000
*                                                                     * Y1714000
*                        --AC IS SET TO ZERO IF NON-TRANSPARENT       * Y1715000
*                          TRANSMISSION IS SELECTED (&TRANPRN=0)      * Y1716000
*                          AND THE RESULTING EBCDIC CHARACTER         * Y1717000
*                          VALUE IS .LT. X'40' (EBCDIC BLANK)         * Y1718000
*                                                                     * Y1719000
* NOTE---           EXT, WB AND WC ARE DESTROYED BY $XPRESS           * Y1720000
*                                                                     * Y1721000
*********************************************************************** Y1722000
SXPRESS  DC    AL2(*-*)            ENTRY VIA $TSL $XPRESS               Y1723000
         $BZ   XPRSBLNK            BRANCH IF CARD CODE BLANK            Y1724000
         $SRA  4                   RIGHT JUSTIFY DATA                   Y1725000
         $SRT  2                   COLUMNS 8,9 TO EXT                   Y1726000
         $STO  XPRSTEMP            SAVE REST TEMPORARILY                Y1727000
         $SRA  6                   DROP COLUMNS 2-7                     Y1728000
         $SLT  2                   RESTORE COLUMNS 8,9                  Y1729000
         $STO  WB,,L               TO REGISTER WB                       Y1730000
         $LD   XPRSTEMP            GET RESIDUAL COLUMNS                 Y1731000
         $AND  XPRSMASK            LEAVES COLUMNS 2-7                   Y1732000
         $AXT  16,WC               START COUNTER                        Y1733000
         $SLCA 0,WC                SET WC WITH ZONE                     Y1734000
         $LD   XPRSZNTB,WB,L       GET ZONE BIT CONBINATION             Y1735000
         $MDX  0,WC                TEST FOR NUMERIC PUNCHES             Y1736000
         $SRA  8                   YES. POSITION ZONE WITH NUMERIC CODE Y1737000
         $OR   XPRSNUMT,WC,L       ADD NUMERIC, IF ANY                  Y1738000
         $AND  XPRSCLHF            CLEAR HIGH ORDER BYTE                Y1739000
         AIF   (&TRANPRN EQ 1).XPARENA                                  Y1740000
         $STO  WB,,L               SET WB TO EBCDIC VALUE               Y1741000
         $MDX  -63,WB              SUBTRACT AND TEST LIMIT              Y1742000
         $SLA  8                   NOT IN BSC CONTROL CODE RANGE        Y1743000
         $SRA  8                   RESTORE ORIGINAL OR SET TO 0         Y1744000
.XPARENA ANOP                                                           Y1745000
         $MDX  -5,WC               TEST FOR POSSIBLE SPECIAL CASE       Y1746000
         $B    XPRSPECL            BRANCH FOR ADDITIONAL TESTING        Y1747000
         $B    SXPRESS,,I          RETURN TO CALLER                     Y1748000
XPRSPECL $EOR  XPRSXV6A            TEST FOR CONVERSION VALUE='6A'       Y1749000
         $SKPN                     SKIP AND RESTORE VALUE IF NOT        Y1750000
         $LD   XPRSCDE0            GET CODED 'E0'                       Y1751000
         $EOR  XPRSXV6A            RESTORE OR CONVERT                   Y1752000
         $B    SXPRESS,,I          RETURN TO CALLER                     Y1753000
XPRSBLNK $LD   XPRSBLKC            GET EBCDIC BLANK                     Y1754000
         $B    SXPRESS,,I          AND RETURN TO CALLER                 Y1755000
XPRSCLHF DC    AL2(X'00FF')        CLEAR LEFT HALF                      Y1756000
XPRSBLKC DC    AL2(X'0040')        EBCDIC BLANK                         Y1757000
XPRSXV6A DC    X'006A'             TEST VALUE FOR POSSIBLE 'E0'         Y1758000
XPRSCDE0 DC    X'008A'             CODED VALUE FOR 'E0'                 Y1759000
XPRSTEMP DC    AL2(*-*)            TEMPORARY STORAGE                    Y1760000
XPRSMASK DC    X'003F'             MASK WORD                            Y1761000
         EJECT                                                          Y1762000
*********************************************************************** Y1763000
*              $XPRESS CONVERSION TABLE                               * Y1764000
*********************************************************************** Y1765000
XPRSZNTB DC    X'F040'             00= NO PUNCHES                       Y1766000
         DC    X'30F9'             01 = 9                               Y1767000
         DC    X'78F8'             02 = 8                               Y1768000
         DC    X'3838'             03 = 8-9                             Y1769000
         DC    X'00F1'             04 = 1                               Y1770000
         DC    X'0031'             05 = 1-9                             Y1771000
         DC    X'0079'             06 = 1-8                             Y1772000
         DC    X'0039'             07 = 1-8-9                           Y1773000
         DC    X'E0F0'             08 = 0                               Y1774000
         DC    X'20E9'             09 = 0-9                             Y1775000
         DC    X'68E8'             0A = 0-8            * 0-8-2 = E0     Y1776000
         DC    X'2828'             0B = 0-8-9                           Y1777000
         DC    X'6161'             0C = 0-1                             Y1778000
         DC    X'2121'             0D = 0-1-9                           Y1779000
         DC    X'6969'             0E = 0-1-8                           Y1780000
         DC    X'2929'             0F   0-1-8-9                         Y1781000
         DC    X'D060'             10 = 11             *                Y1782000
         DC    X'10D9'             11   11-9                            Y1783000
         DC    X'58D8'             12 = 11-8                            Y1784000
         DC    X'1818'             13 = 11-8-9                          Y1785000
         DC    X'D1D1'             14 = 11-1                            Y1786000
         DC    X'0011'             15 = 11-1-9                          Y1787000
         DC    X'0059'             16 = 11-1-8                          Y1788000
         DC    X'0019'             17 = 11-1-8-9                        Y1789000
         DC    X'A0D0'             18 = 11-0           *                Y1790000
         DC    X'60A9'             19 = 11-0-9                          Y1791000
         DC    X'A8A8'             1A = 11-0-8                          Y1792000
         DC    X'E868'             1B = 11-0-8-9                        Y1793000
         DC    X'00A1'             1C = 11-0-1                          Y1794000
         DC    X'00E1'             1D = 11-0-1-9       *                Y1795000
         DC    X'00A0'             1E = 11-0-1-8                        Y1796000
         DC    X'0020'             1F = 11-0-1-8-9                      Y1797000
         DC    X'C050'             20 = 12                              Y1798000
         DC    X'00C9'             21 = 12-9           * REAL 00        Y1799000
         DC    X'48C8'             22 = 12-8                            Y1800000
         DC    X'0808'             23 = 12-8-9                          Y1801000
         DC    X'00C1'             24 = 12-1                            Y1802000
         DC    X'0001'             25 = 12-1-9                          Y1803000
         DC    X'0049'             26 = 12-1-8                          Y1804000
         DC    X'0009'             27 = 12-1-8-9                        Y1805000
         DC    X'80C0'             28 = 12-0                            Y1806000
         DC    X'4089'             29 = 12-0-9                          Y1807000
         DC    X'8888'             2A = 12-0-8                          Y1808000
         DC    X'C848'             2B = 12-0-8-9                        Y1809000
         DC    X'0081'             2C = 12-0-1                          Y1810000
         DC    X'0041'             2D = 12-0-1-9                        Y1811000
         DC    X'0080'             2E = 12-0-1-8                        Y1812000
         DC    X'0000'             2F = 12-0-1-8-9     * VALID 00       Y1813000
         DC    X'906A'             30 = 12-11                           Y1814000
         DC    X'5099'             31 = 12-11-9                         Y1815000
         DC    X'9898'             32 = 12-11-8                         Y1816000
         DC    X'D858'             33 = 12-11-8-9                       Y1817000
         DC    X'0091'             34 = 12-11-1                         Y1818000
         DC    X'0051'             35 = 12-11-1-9                       Y1819000
         DC    X'0090'             36 = 12-11-1-8                       Y1820000
         DC    X'0010'             37 = 12-11-1-8-9                     Y1821000
         DC    X'B070'             38 = 12-11-0                         Y1822000
         DC    X'70B9'             39 = 12-11-0-9                       Y1823000
         DC    X'B8B8'             3A = 12-11-0-8                       Y1824000
         DC    X'F878'             3B = 12-11-0-8-9                     Y1825000
         DC    X'00B1'             3C = 12-11-0-1                       Y1826000
         DC    X'0071'             3D = 12-11-0-1-9                     Y1827000
         DC    X'00B0'             3E = 12-11-0-1-8                     Y1828000
         DC    X'0030'             3F = 12-11-0-1-8-9                   Y1829000
*********************************************************************** Y1830000
*              $XPRESS CONVERSION TABLE                               * Y1831000
*********************************************************************** Y1832000
XPRSNUMT DC    X'0000'             NO NUMERIC                           Y1833000
         DC    X'0007'             7 PUNCH                              Y1834000
         DC    X'0006'             6 PUNCH                              Y1835000
         DC    X'0005'             5 PUNCH                              Y1836000
         DC    X'0004'             4 PUNCH                              Y1837000
         DC    X'0003'             3 PUNCH                              Y1838000
         DC    X'0002'             2 PUNCH                              Y1839000
         EJECT                                                          Y1840000
*********************************************************************** Y1841000
*                                                                     * Y1842000
* TITLE - $XCPRNT (EBCDIC TO CONSOLE PRINTER CODE CONVERSION)         * Y1843000
*                                                                     * Y1844000
* FUNCTION/PURPOSE                                                    * Y1845000
*                                                                     * Y1846000
*  CONVERTS THE EBCDIC CHARACTER IN THE LOW ORDER AC TO CONSOLE       * Y1847000
*  PRINTER FORMAT CONTAINED IN THE HIGH ORDER AC ON COMPLETION        * Y1848000
*                                                                     * Y1849000
* CALLING SEQUENCE                                                    * Y1850000
*                                                                     * Y1851000
*                             $TSL  $XCPRNT    LINKAGE                * Y1852000
*                             ....             RETURN                 * Y1853000
*                                                                     * Y1854000
*                   WHERE..AC CONTAINS EBCDIC CHARACTER TO BE         * Y1855000
*                          CONVERTED IN BITS 8-15 ON INPUT            * Y1856000
*                                                                     * Y1857000
*                          AC CONTAINS CONSOLE PRINTER CODE           * Y1858000
*                          IN BITS 0-7 ON EXIT                        * Y1859000
*                                                                     * Y1860000
*                                                                     * Y1861000
*********************************************************************** Y1862000
         SPACE 2                                                        Y1863000
SXCPRNT  DC    AL2(*-*)            ENTRY VIA $TSL $XCPRNT               Y1864000
         $SRT  8                   EBCDIC CHARACTER TO EXT              Y1865000
         $ZAC                      CLEAR AC                             Y1866000
         $SLT  1                   HIGH ORDER BIT TO AC                 Y1867000
         $STO  XCPRLRTS            SET LEFT/RIGHT SWITCH                Y1868000
         $SRA  1                   CLEAR AC                             Y1869000
         $SLT  7                   GET REMAINDER OF CHARACTER           Y1870000
         $A    XCPRTBAD            COMPUTE TABLE ADDRESS                Y1871000
         $STO  XCPRTGET+D1          CORRESPONDING TO DATA               Y1872000
XCPRTGET $LD   *-*,,L              FETCH TABLE ENTRY                    Y1873000
         $MDM  XCPRLRTS,0          TEST LEFT/RIGHT SWITCH               Y1874000
         $SLA  8                   MOVE TO BITS 0-7                     Y1875000
         $B    SXCPRNT,,I          RETURN TO CALLER                     Y1876000
XCPRLRTS DC    AL2(*-*)            LEFT/RIGHT SWITCH                    Y1877000
XCPRTBAD $ADCON (XCPRTBLE-64*D1)   ADJUSTED TABLE ADDRESS               Y1878000
         EJECT                                                          Y1879000
         AIF   (&PR1403 EQ 0).NO1403E                                   Y1880000
*********************************************************************** Y1881000
*                                                                     * Y1882000
* TITLE - $XPPRNT (EBCDIC TO 1403 PRINTER CODE CONVERSION)            * Y1883000
*                                                                     * Y1884000
* FUNCTION/PURPOSE                                                    * Y1885000
*                                                                     * Y1886000
*  CONVERTS THE EBCDIC CHARACTER IN THE LOW ORDER AC TO 1403          * Y1887000
*  PRINTER CODE FORMAT CONTAINED IN THE HIGH ORDER AC ON EXIT         * Y1888000
*                                                                     * Y1889000
* CALLING SEQUENCE -                                                  * Y1890000
*                                                                     * Y1891000
*                             $TSL $XPPRNT   LINKAGE                  * Y1892000
*                             ....           RETURN                   * Y1893000
*                                                                     * Y1894000
*                             AC CONTAINS EBCDIC CHARACTER TO BE      * Y1895000
*                             CONVERTED IN BITS 8-15 ON ENTRY         * Y1896000
*                                                                     * Y1897000
*                             AC CONTAINS 1403 PRINTER CODE IN        * Y1898000
*                             BITS 0-7 ON EXIT                        * Y1899000
*                                                                     * Y1900000
*                                                                     * Y1901000
*********************************************************************** Y1902000
         SPACE 2                                                        Y1903000
SXPPRNT  DC    AL2(*-*)            ENTRY VIA $TSL $XPPRNT               Y1904000
         $AND  XPPRTCLH            CLEAR HIGH ORDER BYTE                Y1905000
         $SRT  7                   INPUT SANS HIGH BIT TO EXT           Y1906000
         $STO  XCPRLRTS            SET LEFT/RIGHT INDICATOR             Y1907000
         $SRA  1                   CLEAR AC                             Y1908000
         $SLT  7                   GET REST OF EBCDIC CHARACTER         Y1909000
         $A    XPPRTBAD            COMPUTE TABLE ADDRESS                Y1910000
         $STO  XPPRTGET+D1          CORRESPONDING TO DATA               Y1911000
XPPRTGET $LD   *-*,,L              FETCH TABLE ENTRY                    Y1912000
         $MDM  XCPRLRTS,0          TEST LEFT/RIGHT INDICATOR            Y1913000
         $SLA  8                   MOVE RIGHT TO LEFT                   Y1914000
         $B    SXPPRNT,,I          RETURN TO CALLER                     Y1915000
XPPRTCLH DC    AL2(X'00FF')        CLEAR LEFT HALF                      Y1916000
XPPRTBAD $ADCON (XPPRTBLE-64*D1)   ADJUSTED TABLE ADDRESS               Y1917000
         EJECT                                                          Y1918000
*********************************************************************** Y1919000
*              EBCDIC TO 1403 PRINTER CODE CONVERSION TABLE           * Y1920000
*********************************************************************** Y1921000
XPPRTBLE DC    X'7F7F'             BLANK          NO GRAPHIC            Y1922000
         DC    X'7F64'             NO GRAPHIC     A                     Y1923000
         DC    X'7F25'             NO GRAPHIC     B                     Y1924000
         DC    X'7F26'             NO GRAPHIC     C                     Y1925000
         DC    X'7F67'             NO GRAPHIC     D                     Y1926000
         DC    X'7F68'             NO GRAPHIC     E                     Y1927000
         DC    X'7F29'             NO GRAPHIC     F                     Y1928000
         DC    X'7F2A'             NO GRAPHIC     G                     Y1929000
         DC    X'7F6B'             NO GRAPHIC     H                     Y1930000
         DC    X'7F2C'             NO GRAPHIC     I                     Y1931000
         DC    X'7F7F'             NO GRAPHIC     NO GRAPHIC            Y1932000
         DC    X'6E7F'             PERIOD         NO GRAPHIC            Y1933000
         DC    X'7F7F'             NO GRAPHIC     NO GRAPHIC            Y1934000
         DC    X'577F'             LEFT PAREN     NO GRAPHIC            Y1935000
         DC    X'6D7F'             PLUS           NO GRAPHIC            Y1936000
         DC    X'7F7F'             NO GRAPHIC     NO GRAPHIC            Y1937000
         DC    X'157F'             AMPERSAND      NO GRAPHIC            Y1938000
         DC    X'7F58'             NO GRAPHIC     J                     Y1939000
         DC    X'7F19'             NO GRAPHIC     K                     Y1940000
         DC    X'7F1A'             NO GRAPHIC     L                     Y1941000
         DC    X'7F5B'             NO GRAPHIC     M                     Y1942000
         DC    X'7F1C'             NO GRAPHIC     N                     Y1943000
         DC    X'7F5D'             NO GRAPHIC     O                     Y1944000
         DC    X'7F5E'             NO GRAPHIC     P                     Y1945000
         DC    X'7F1F'             NO GRAPHIC     Q                     Y1946000
         DC    X'7F20'             NO GRAPHIC     R                     Y1947000
         DC    X'7F7F'             NO GRAPHIC     NO GRAPHIC            Y1948000
         DC    X'627F'             DOLLAR SIGN    NO GRAPHIC            Y1949000
         DC    X'237F'             ASTERISK       NO GRAPHIC            Y1950000
         DC    X'2F7F'             RIGHT PAREN    NO GRAPHIC            Y1951000
         DC    X'7F7F'             NO GRAPHIC     NO GRAPHIC            Y1952000
         DC    X'7F7F'             NO GRAPHIC     NO GRAPHIC            Y1953000
         DC    X'617F'             DASH           NO GRAPHIC            Y1954000
         DC    X'4C7F'             SLASH          NO GRAPHIC            Y1955000
         DC    X'7F0D'             NO GRAPHIC     S                     Y1956000
         DC    X'7F0E'             NO GRAPHIC     T                     Y1957000
         DC    X'7F4F'             NO GRAPHIC     U                     Y1958000
         DC    X'7F10'             NO GRAPHIC     V                     Y1959000
         DC    X'7F51'             NO GRAPHIC     W                     Y1960000
         DC    X'7F52'             NO GRAPHIC     X                     Y1961000
         DC    X'7F13'             NO GRAPHIC     Y                     Y1962000
         DC    X'7F54'             NO GRAPHIC     Z                     Y1963000
         DC    X'7F7F'             NO GRAPHIC     NO GRAPHIC            Y1964000
         DC    X'167F'             COMMA          NO GRAPHIC            Y1965000
         DC    X'7F7F'             NO GRAPHIC     NO GRAPHIC            Y1966000
         DC    X'7F7F'             NO GRAPHIC     NO GRAPHIC            Y1967000
         DC    X'7F7F'             NO GRAPHIC     NO GRAPHIC            Y1968000
         DC    X'7F7F'             NO GRAPHIC     NO GRAPHIC            Y1969000
         DC    X'7F49'             NO GRAPHIC     0                     Y1970000
         DC    X'7F40'             NO GRAPHIC     1                     Y1971000
         DC    X'7F01'             NO GRAPHIC     2                     Y1972000
         DC    X'7F02'             NO GRAPHIC     3                     Y1973000
         DC    X'7F43'             NO GRAPHIC     4                     Y1974000
         DC    X'7F04'             NO GRAPHIC     5                     Y1975000
         DC    X'7F45'             NO GRAPHIC     6                     Y1976000
         DC    X'7F46'             NO GRAPHIC     7                     Y1977000
         DC    X'7F07'             NO GRAPHIC     8                     Y1978000
         DC    X'7F08'             NO GRAPHIC     9                     Y1979000
         DC    X'7F7F'             NO GRAPHIC     NO GRAPHIC            Y1980000
         DC    X'7F7F'             NO GRAPHIC     NO GRAPHIC            Y1981000
         DC    X'7F7F'             NO GRAPHIC     NO GRAPHIC            Y1982000
         DC    X'0B7F'             APOSTROPHE     NO GRAPHIC            Y1983000
         DC    X'4A7F'             EQUAL          NO GRAPHIC            Y1984000
         DC    X'7F7F'             NO GRAPHIC     NO GRAPHIC            Y1985000
         EJECT                                                          Y1986000
.NO1403E ANOP                                                           Y1987000
*********************************************************************** Y1988000
*        $XCPRNT EBCDIC TO CONSOLE PRINTER CODE TABLE                 * Y1989000
*********************************************************************** Y1990000
XCPRTBLE DC    X'2121'             BLANK          NO GRAPHIC            Y1991000
         DC    X'213C'             NO GRAPHIC     A                     Y1992000
         DC    X'2118'             NO GRAPHIC     B                     Y1993000
         DC    X'211C'             NO GRAPHIC     C                     Y1994000
         DC    X'2130'             NO GRAPHIC     D                     Y1995000
         DC    X'2134'             NO GRAPHIC     E                     Y1996000
         DC    X'2110'             NO GRAPHIC     F                     Y1997000
         DC    X'2114'             NO GRAPHIC     G                     Y1998000
         DC    X'2124'             NO GRAPHIC     H                     Y1999000
         DC    X'2120'             NO GRAPHIC     I                     Y2000000
         DC    X'0221'             CENT SIGN      NO GRAPHIC            Y2001000
         DC    X'0021'             PERIOD         NO GRAPHIC            Y2002000
         DC    X'DE21'             LESS THAN      NO GRAPHIC            Y2003000
         DC    X'FE21'             LEFT PAREN     NO GRAPHIC            Y2004000
         DC    X'DA21'             PLUS           NO GRAPHIC            Y2005000
         DC    X'C621'             LOGICAL OR     NO GRAPHIC            Y2006000
         DC    X'4421'             AMPERSNAD      NO GRAPHIC            Y2007000
         DC    X'217C'             NO GRAPHIC     J                     Y2008000
         DC    X'2158'             NO GRAPHIC     K                     Y2009000
         DC    X'215C'             NO GRAPHIC     L                     Y2010000
         DC    X'2170'             NO GRAPHIC     M                     Y2011000
         DC    X'2174'             NO GRAPHIC     N                     Y2012000
         DC    X'2150'             NO GRAPHIC     O                     Y2013000
         DC    X'2154'             NO GRAPHIC     P                     Y2014000
         DC    X'2164'             NO GRAPHIC     Q                     Y2015000
         DC    X'2160'             NO GRAPHIC     R                     Y2016000
         DC    X'4221'             EXCLAMATION    NO GRAPHIC            Y2017000
         DC    X'4021'             DOLLAR SIGN    NO GRAPHIC            Y2018000
         DC    X'D621'             ASTERICK       NO GRAPHIC            Y2019000
         DC    X'F621'             RIGHT PAREN    NO GRAPHIC            Y2020000
         DC    X'D221'             SEMI-COLON     NO GRAPHIC            Y2021000
         DC    X'F221'             LOGICAL NOT    NO GRAPHIC            Y2022000
         DC    X'8421'             DASH           NO GRAPHIC            Y2023000
         DC    X'BC21'             SLASH          NO GRAPHIC            Y2024000
         DC    X'2198'             NO GRAPHIC     S                     Y2025000
         DC    X'219C'             NO GRAPHIC     T                     Y2026000
         DC    X'21B0'             NO GRAPHIC     U                     Y2027000
         DC    X'21B4'             NO GRAPHIC     V                     Y2028000
         DC    X'2190'             NO GRAPHIC     W                     Y2029000
         DC    X'2194'             NO GRAPHIC     X                     Y2030000
         DC    X'21A4'             NO GRAPHIC     Y                     Y2031000
         DC    X'21A0'             NO GRAPHIC     Z                     Y2032000
         DC    X'2121'             NO GRAPHIC     NO GRAPHIC            Y2033000
         DC    X'8021'             COMMA          NO GRAPHIC            Y2034000
         DC    X'0621'             PERCENT        NO GRAPHIC            Y2035000
         DC    X'BE21'             UNDERSCORE     NO GRAPHIC            Y2036000
         DC    X'4621'             GREATER THAN   NO GRAPHIC            Y2037000
         DC    X'8621'             QUESTION MARK  NO GRAPHIC            Y2038000
         DC    X'21C4'             NO GRAPHIC     0                     Y2039000
         DC    X'21FC'             NO GRAPHIC     1                     Y2040000
         DC    X'21D8'             NO GRAPHIC     2                     Y2041000
         DC    X'21DC'             NO GRAPHIC     3                     Y2042000
         DC    X'21F0'             NO GRAPHIC     4                     Y2043000
         DC    X'21F4'             NO GRAPHIC     5                     Y2044000
         DC    X'21D0'             NO GRAPHIC     6                     Y2045000
         DC    X'21D4'             NO GRAPHIC     7                     Y2046000
         DC    X'21E4'             NO GRAPHIC     8                     Y2047000
         DC    X'21E0'             NO GRAPHIC     9                     Y2048000
         DC    X'8221'             COLON          NO GRAPHIC            Y2049000
         DC    X'C021'             POUND SIGN     NO GRAPHIC            Y2050000
         DC    X'0421'             AT SIGN        NO GRAPHIC            Y2051000
         DC    X'E621'             APOSTROPHE     NO GRAPHIC            Y2052000
         DC    X'C221'             EQUAL SIGN     NO GRAPHIC            Y2053000
         DC    X'E221'             QUOTE SIGN     NO GRAPHIC            Y2054000
         AIF   (NOT &PN1442).NO1442N                                    Y2055000
         EJECT                                                          Y2056000
*********************************************************************** Y2057000
*                                                                     * Y2058000
* TITLE - $XCPNCH (EBCDIC TO CARD CODE CONVERSION)                    * Y2059000
*                                                                     * Y2060000
* FUNCTION/PURPOSE -                                                  * Y2061000
*                                                                     * Y2062000
*  CONVERTS THE EBCDIC CHARACTER IN THE LOW ORDER AC TO 12 BIT        * Y2063000
*  IBM CARD CODE FOR OUTPUT TO THE 1442 PUNCH                         * Y2064000
*                                                                     * Y2065000
* CALLING SEQUENCE -                                                  * Y2066000
*                                                                     * Y2067000
*                             $TSL  $XCPNCH  LINKAGE                  * Y2068000
*                             ....           RETURN                   * Y2069000
*                                                                     * Y2070000
*                   WHERE --- (ENTRY) AC CONTAINS EBCDIC CHARACTER    * Y2071000
*                             TO BE CONVERTED IN BITS 8-15            * Y2072000
*                                                                     * Y2073000
*                           (EXIT) AC CONTAINS CARD CODE VALUE        * Y2074000
*                             IN BITS 0-11 (BITS 12-15 ARE ZERO)      * Y2075000
*                                                                     * Y2076000
*********************************************************************** Y2077000
         SPACE 3                                                        Y2078000
SXCPNCH  DC    AL2(*-*)            ENTRY VIA $TSL $XCPNCH               Y2079000
         $STX  XCPNSVA+D1,WA       SAVE WA                              Y2080000
         $AND  XCPNMSK             CLEAR HIGH ORDER BYTE                Y2081000
         $SRT  7                   INPUT SANS HIGH BIT TO EXT           Y2082000
         $STO  XCPNLRS             SAVE HIGH BIT FOR POSITION FLAG      Y2083000
         $SRA  1                   CLEAR POSSIBLE HIGH BIT              Y2084000
         $SLT  7                   TABLE INDEX TO AC                    Y2085000
         $A    XCPNTBA             COMPUTE ENTRY ADDRESS                Y2086000
         $STO  XCPNGET+D1           CORRESPONDING TO DATA               Y2087000
XCPNGET  $LD   *-*,,L              FETCH TABLE ENTRY                    Y2088000
         $MDM  XCPNLRS,0           TEST LEFT/RIGHT FLAG                 Y2089000
         $SRA  8                    AND RIGHT JUSTIFY IF NECESSARY      Y2090000
         $SRT  8                     MOVE PACKED VALUE TO EXT           Y2091000
         $SLT  3                   ISOLATE 12,11 AND 0 PUNCHES          Y2092000
         $SLA  13                   TO HIGH ORDER AC                    Y2093000
         $STO  XCPNTMO               SAVE FOR CONSTRUCTION              Y2094000
         $SLT  3                   GET 1-7 PUNCHES                      Y2095000
         $BZ   XCPNFRM             BRANCH IF NONE                       Y2096000
         $S    XCPNC13             REDUCE BY MAGIC NUMBER               Y2097000
         $STO  XCPNTMT             SAVE FOR CALCULATIONS                Y2098000
         $ZAC                      CLEAR AC AND                         Y2099000
         $S    XCPNTMT              COMPLEMENT COUNT                    Y2100000
         $STO  WA,,L                 TO WA                              Y2101000
         $LD   XCPNCNO             CONSTANT ONE                         Y2102000
         $SLA  0,WA                 TO COMPUTED POSITION                Y2103000
XCPNFRM  $OR   XCPNTMO             COMBINE WITH 12,11 AND 0 PUNCHES     Y2104000
         $SRA  6                   GET                                  Y2105000
         $SLT  6                    8-9                                 Y2106000
XCPNSVA  $AXT  *-*,WA,L            RESTORE WA                           Y2107000
         $B    SXCPNCH,,I          RETURN TO CALLER                     Y2108000
XCPNMSK  DC    AL2(X'00FF')        TO CLEAR BITS 0-7                    Y2109000
XCPNLRS  DC    AL2(*-*)            LEFT/RIGHT FLAG                      Y2110000
XCPNTBA  $ADCON (XCPNPCC)          PACKED CARD CODE TABLE ADDRESS       Y2111000
XCPNTMO  DC    AL2(*-*)            STORAGE FOR 11,12 AND 0 PUNCHES      Y2112000
XCPNC13  DC    AL2(13)             MAGIC NUMBER                         Y2113000
XCPNTMT  DC    AL2(*-*)            STORAGE FOR COMPLEMENTED COUNT       Y2114000
XCPNCNO  DC    AL2(1)              ANOTHER CONSTANT ONE                 Y2115000
         EJECT                                                          Y2116000
*********************************************************************** Y2117000
*              PACKED EBCDIC TO CARD CODE CONVERSION TABLE            * Y2118000
*********************************************************************** Y2119000
XCPNPCC  $NULL                                                          Y2120000
         DC    X'A6A7'             NO GRAPHIC     NO GRAPHIC            Y2121000
         DC    X'A485'             NO GRAPHIC     NO GRAPHIC            Y2122000
         DC    X'A889'             NO GRAPHIC     NO GRAPHIC            Y2123000
         DC    X'AC8D'             NO GRAPHIC     NO GRAPHIC            Y2124000
         DC    X'B091'             NO GRAPHIC     PUNCH OFF             Y2125000
         DC    X'B495'             NO GRAPHIC     HORIZ TAB             Y2126000
         DC    X'B899'             NO GRAPHIC     LOWER CASE            Y2127000
         DC    X'BC9D'             NO GRAPHIC     DELETE                Y2128000
         DC    X'A283'             NO GRAPHIC     NO GRAPHIC            Y2129000
         DC    X'A187'             NO GRAPHIC     NO GRAPHIC            Y2130000
         DC    X'AA8B'             NO GRAPHIC     NO GRAPHIC            Y2131000
         DC    X'AE8F'             NO GRAPHIC     NO GRAPHIC            Y2132000
         DC    X'B293'             NO GRAPHIC     NO GRAPHIC            Y2133000
         DC    X'B697'             NO GRAPHIC     NO GRAPHIC            Y2134000
         DC    X'BA9B'             NO GRAPHIC     NO GRAPHIC            Y2135000
         DC    X'BE9F'             NO GRAPHIC     NO GRAPHIC            Y2136000
         DC    X'C6C7'             NO GRAPHIC     NO GRAPHIC            Y2137000
         DC    X'C445'             NO GRAPHIC     NO GRAPHIC            Y2138000
         DC    X'C849'             NO GRAPHIC     NO GRAPHIC            Y2139000
         DC    X'CC4D'             NO GRAPHIC     RESTORE               Y2140000
         DC    X'D051'             NO GRAPHIC     NEW LINE              Y2141000
         DC    X'D455'             NO GRAPHIC     BACKSPACE             Y2142000
         DC    X'D859'             NO GRAPHIC     IDLE                  Y2143000
         DC    X'DC5D'             NO GRAPHIC     NO GRAPHIC            Y2144000
         DC    X'C243'             NO GRAPHIC     NO GRAPHIC            Y2145000
         DC    X'C147'             NO GRAPHIC     NO GRAPHIC            Y2146000
         DC    X'CA4B'             NO GRAPHIC     NO GRAPHIC            Y2147000
         DC    X'CE4F'             NO GRAPHIC     NO GRAPHIC            Y2148000
         DC    X'D253'             NO GRAPHIC     NO GRAPHIC            Y2149000
         DC    X'D657'             NO GRAPHIC     NO GRAPHIC            Y2150000
         DC    X'DA5B'             NO GRAPHIC     NO GRAPHIC            Y2151000
         DC    X'DE5F'             NO GRAPHIC     DS                    Y2152000
         DC    X'6667'             NO GRAPHIC     SOS                   Y2153000
         DC    X'6425'             NO GRAPHIC     FS                    Y2154000
         DC    X'6829'             NO GRAPHIC     NO GRAPHIC            Y2155000
         DC    X'6C2D'             NO GRAPHIC     BYPASS                Y2156000
         DC    X'7031'             NO GRAPHIC     LINE FEED             Y2157000
         DC    X'7435'             NO GRAPHIC     EOB                   Y2158000
         DC    X'7839'             NO GRAPHIC     PREFIX                Y2159000
         DC    X'7C3D'             NO GRAPHIC     NO GRAPHIC            Y2160000
         DC    X'6223'             NO GRAPHIC     NO GRAPHIC            Y2161000
         DC    X'6127'             NO GRAPHIC     SET MODE              Y2162000
         DC    X'6A2B'             NO GRAPHIC     NO GRAPHIC            Y2163000
         DC    X'6E2F'             NO GRAPHIC     NO GRAPHIC            Y2164000
         DC    X'7233'             NO GRAPHIC     NO GRAPHIC            Y2165000
         DC    X'7637'             NO GRAPHIC     NO GRAPHIC            Y2166000
         DC    X'7A3B'             NO GRAPHIC     NO GRAPHIC            Y2167000
         DC    X'7E3F'             NO GRAPHIC     NO GRAPHIC            Y2168000
         DC    X'E6E7'             NO GRAPHIC     NO GRAPHIC            Y2169000
         DC    X'E405'             NO GRAPHIC     NO GRAPHIC            Y2170000
         DC    X'E809'             NO GRAPHIC     NO GRAPHIC            Y2171000
         DC    X'EC0D'             NO GRAPHIC     NO GRAPHIC            Y2172000
         DC    X'F011'             NO GRAPHIC     PUNCH ON              Y2173000
         DC    X'F415'             NO GRAPHIC     READER STOP           Y2174000
         DC    X'F819'             NO GRAPHIC     UPPER CASE            Y2175000
         DC    X'FC1D'             NO GRAPHIC     EOT                   Y2176000
         DC    X'E203'             NO GRAPHIC     NO GRAPHIC            Y2177000
         DC    X'E107'             NO GRAPHIC     NO GRAPHIC            Y2178000
         DC    X'EA0B'             NO GRAPHIC     NO GRAPHIC            Y2179000
         DC    X'EE0F'             NO GRAPHIC     NO GRAPHIC            Y2180000
         DC    X'F213'             NO GRAPHIC     NO GRAPHIC            Y2181000
         DC    X'F617'             NO GRAPHIC     NO GRAPHIC            Y2182000
         DC    X'FA1B'             NO GRAPHIC     NO GRAPHIC            Y2183000
         DC    X'FE1F'             NO GRAPHIC     NO GRAPHIC            Y2184000
         DC    X'A000'             PLUS ZERO      SPACE                 Y2185000
         DC    X'84A5'             A              NO GRAPHIC            Y2186000
         DC    X'88A9'             B              NO GRAPHIC            Y2187000
         DC    X'8CAD'             C              NO GRAPHIC            Y2188000
         DC    X'90B1'             D              NO GRAPHIC            Y2189000
         DC    X'94B5'             E              NO GRAPHIC            Y2190000
         DC    X'98B9'             F              NO GRAPHIC            Y2191000
         DC    X'9CBD'             G              NO GRAPHIC            Y2192000
         DC    X'82A3'             H              NO GRAPHIC            Y2193000
         DC    X'8186'             I              NO GRAPHIC            Y2194000
         DC    X'AB8A'             NO GRAPHIC     CENT                  Y2195000
         DC    X'AF8E'             NO GRAPHIC     PERIOD                Y2196000
         DC    X'B392'             NO GRAPHIC     LESS THAN             Y2197000
         DC    X'B796'             NO GRAPHIC     LEFT PAREN            Y2198000
         DC    X'BB9A'             NO GRAPHIC     PLUS                  Y2199000
         DC    X'BF9E'             NO GRAPHIC     LOGICAL OR            Y2200000
         DC    X'6080'             MINUS ZERO     AMPERSAND             Y2201000
         DC    X'44C5'             J              NO GRAPHIC            Y2202000
         DC    X'48C9'             K              NO GRAPHIC            Y2203000
         DC    X'4CCD'             L              NO GRAPHIC            Y2204000
         DC    X'50D1'             M              NO GRAPHIC            Y2205000
         DC    X'54D5'             N              NO GRAPHIC            Y2206000
         DC    X'58D9'             O              NO GRAPHIC            Y2207000
         DC    X'5CDD'             P              NO GRAPHIC            Y2208000
         DC    X'42C3'             Q              NO GRAPHIC            Y2209000
         DC    X'4146'             R              NO GRAPHIC            Y2210000
         DC    X'CB4A'             NO GRAPHIC     EXCLAMATION           Y2211000
         DC    X'CF4E'             NO GRAPHIC     DOLLAR                Y2212000
         DC    X'D352'             NO GRAPHIC     ASTERISK              Y2213000
         DC    X'D756'             NO GRAPHIC     RIGHT PAREN           Y2214000
         DC    X'DB5A'             NO GRAPHIC     SEMI COLON            Y2215000
         DC    X'DF5E'             NO GRAPHIC     LOGICAL NOT           Y2216000
         DC    X'2A40'             NO GRAPHIC     DASH, MINUS           Y2217000
         DC    X'6524'             NO GRAPHIC     SLASH                 Y2218000
         DC    X'2869'             S              NO GRAPHIC            Y2219000
         DC    X'2C6D'             T              NO GRAPHIC            Y2220000
         DC    X'3071'             U              NO GRAPHIC            Y2221000
         DC    X'3475'             V              NO GRAPHIC            Y2222000
         DC    X'3879'             W              NO GRAPHIC            Y2223000
         DC    X'3C7D'             X              NO GRAPHIC            Y2224000
         DC    X'2263'             Y              NO GRAPHIC            Y2225000
         DC    X'2126'             Z              NO GRAPHIC            Y2226000
         DC    X'6BC0'             NO GRAPHIC     NO GRAPHIC            Y2227000
         DC    X'6F2E'             NO GRAPHIC     COMMA                 Y2228000
         DC    X'7332'             NO GRAPHIC     PERCENT               Y2229000
         DC    X'7736'             NO GRAPHIC     UNDERSCORE            Y2230000
         DC    X'7B3A'             NO GRAPHIC     GRATER THAN           Y2231000
         DC    X'7F3E'             NO GRAPHIC     QUESTION MARK         Y2232000
         DC    X'20E0'             0              NO GRAPHIC            Y2233000
         DC    X'04E5'             1              NO GRAPHIC            Y2234000
         DC    X'08E9'             2              NO GRAPHIC            Y2235000
         DC    X'0CED'             3              NO GRAPHIC            Y2236000
         DC    X'10F1'             4              NO GRAPHIC            Y2237000
         DC    X'14F5'             5              NO GRAPHIC            Y2238000
         DC    X'18F9'             6              NO GRAPHIC            Y2239000
         DC    X'1CFD'             7              NO GRAPHIC            Y2240000
         DC    X'02E3'             8              NO GRAPHIC            Y2241000
         DC    X'0106'             9              NO GRAPHIC            Y2242000
         DC    X'EB0A'             NO GRAPHIC     COLON                 Y2243000
         DC    X'EF0E'             NO GRAPHIC     NUMBER                Y2244000
         DC    X'F312'             NO GRAPHIC     AT                    Y2245000
         DC    X'F716'             NO GRAPHIC     APOSTROPHE            Y2246000
         DC    X'FB1A'             NO GRAPHIC     EQUAL                 Y2247000
         DC    X'FF1E'             NO GRAPHIC     QUOTATION             Y2248000
.NO1442N ANOP                                                           Y2249000
         TITLE 'RTP1130 (SCA I/O SUPERVISOR-LOW SPEED)'                 Y2250000
*********************************************************************** Y2251000
*                                                                     * Y2252000
* TITLE - BSXIOS (LOW SPEED BSCA INPUT/OUTPUT SUPERVISOR)             * Y2253000
*                                                                     * Y2254000
* FUNCTION/DESCRIPTION                                                * Y2255000
*                                                                     * Y2256000
*  PROCESSES REQUEST FOR TRANSMIT, RECEIVE OR PROGRAM TIMER           * Y2257000
*  FUNCTIONS ON THE LOW SPEED BINARY SYNCHRONOUS COMMUNICATIONS       * Y2258000
*  ADAPTER. BSXIOS INITIATES THE REQUESTED FUNCTION AND PREPARES      * Y2259000
*  THE INTERRUPT ROUTINE FOR THE ENSUING ONSLAUGHT OF INTERRUPTS      * Y2260000
*                                                                     * Y2261000
* CALLING SEQUENCE...                                                 * Y2262000
*                        $TSL  BSXIOS   LINKAGE                       * Y2263000
*                        ...            REJECT EXIT                   * Y2264000
*                        ...            NORMAL EXIT                   * Y2265000
*                                                                     * Y2266000
*              WHERE...  ON ENTRY...                                  * Y2267000
*                                                                     * Y2268000
*                        WA CONTAINS THE ADDRESS OF A CONTROL         * Y2269000
*                        AND DATA AREA WITH THE FORMAT AS             * Y2270000
*                        DESCRIBED UNDER 'TPBUF ELEMENT               * Y2271000
*                        DESCRIPTION'. THE FUNCTION TO BE             * Y2272000
*                        PERFORMED IS INDICATED BY THE VALUE          * Y2273000
*                        OF THE 'TPBUFCB' FIELD OF THE ELEMENT.       * Y2274000
*                                                                     * Y2275000
*                        DATA TO BE TRANSMITTED MUST BE IN            * Y2276000
*                        PACKED (2 BYTES PER WORD) EBCDIC FORM.       * Y2277000
*                                                                     * Y2278000
*                        DATA RECEIVED IS STORED IN PACKED FORM.      * Y2279000
*                                                                     * Y2280000
*                        ON EXIT...                                   * Y2281000
*                                                                     * Y2282000
*                        AC DESTROYED                                 * Y2283000
*                        WA IS RESTORED                               * Y2284000
*                                                                     * Y2285000
*                        REJECT EXIT OCCURS IF DATA SET NOT           * Y2286000
*                        READY                                        * Y2287000
*                                                                     * Y2288000
*                        LOCATION 'BSXOPF' IS SET TO THE              * Y2289000
*                        ADDRESS OF A STATUS WORD WHICH               * Y2290000
*                        CONTAINS ONE OF THE VALUES DEFINED           * Y2291000
*                        BELOW. A SEPARATE STATUS WORD IS             * Y2292000
*                        MAINTAINED FOR READ (BSXOPFR)                * Y2293000
*                        AND WRITE (BSXOPFW) OPERATIONS.              * Y2294000
*                                                                     * Y2295000
*********************************************************************** Y2296000
         EJECT                                                          Y2297000
*********************************************************************** Y2298000
*              OPERATION STATUS VALUES FOR BSXOPFR                    * Y2299000
*********************************************************************** Y2300000
*                                  * RECEIVE FUNCTION *               * Y2301000
*                                  ********************               * Y2302000
*                                                                     * Y2303000
BSXORF0  EQU   0                   READ FUNCTION IS INCOMPLETE          Y2304000
*                                                                       Y2305000
BSXORF1  EQU   1                   NORMAL READ COMPLETE...              Y2306000
*                                  END SEQUENCE (SYN-ETB OR DLE-ETB)    Y2307000
*                                  DETECTED AND NUMBER OF BYTES         Y2308000
*                                  REQUESTED OR LESS THAN THE           Y2309000
*                                  NUMBER REQUESTED HAVE BEEN           Y2310000
*                                  TRANSMITTED. THE ACTUAL COUNT        Y2311000
*                                  IS STORED IN THE FIRST WORD          Y2312000
*                                  OF THE I/O AREA SUPPLIED             Y2313000
*                                                                       Y2314000
BSXORF2  EQU   2                   ABNORMAL READ COMPLETE...            Y2315000
*                                  NUMBER OF BYTES REQUESTED HAVE       Y2316000
*                                  BEEN TRANSMITTED BUT THE END         Y2317000
*                                  SEQUENCE WAS NOT DETECTED. NO        Y2318000
*                                  BCC COMPARISON PERFORMED.            Y2319000
*                                                                       Y2320000
BSXORF3  EQU   3                   RECEIVE TIMEOUT...                   Y2321000
*                                  DETECTED ON INITIAL SEQUENCE         Y2322000
*                                  WHILE ADAPTER IS ATTEMPTING          Y2323000
*                                  TO SYNCHRONIZE.                      Y2324000
*                                                                       Y2325000
BSXORF4  EQU   4                   RECEIVE TIMEOUT...                   Y2326000
*                                  DETECTED WHILE DATA BEING            Y2327000
*                                  READ AFTER INITIAL SYNCH-            Y2328000
*                                  RONIZATION ESTABLISHED.              Y2329000
*                                                                       Y2330000
BSXORF5  EQU   5                   BCC COMPARE ERROR...                 Y2331000
*                                  CONDITIONS DESCRIBED BY              Y2332000
*                                  BSXORF1 ARE SATISFIED.               Y2333000
*                                                                       Y2334000
BSXORF6  EQU   6                   DATA OVERRUN ERROR...                Y2335000
*                                  PROGRAM DID NOT READ DATA            Y2336000
*                                  BEFORE NEXT CHARACTER                Y2337000
*                                  RECEIVED FROM LINE.                  Y2338000
*                                                                       Y2339000
BSXORF7  EQU   7                   DATA SET NOT READY...                Y2340000
*                                  DISCOVERED AT INTERRUPT TIME         Y2341000
*                                                                       Y2342000
BSXORF8  EQU   8                   ERROR ON INITIAL READ...             Y2343000
*                                  FIRST CHARACTER NOT SOH, DLE,        Y2344000
*                                  ENQ OR NAK...OR...SOH-STX,           Y2345000
*                                  DLE-STX, DLE-ACK0 PAIR               Y2346000
*                                  NOT FOUND.                           Y2347000
*                                                                       Y2348000
BSXORF9  EQU   9                   NAK RECEIVED                         Y2349000
*                                                                       Y2350000
BSXORFA  EQU   10                  DLE-ACK0 RECEIVED                    Y2351000
*                                                                       Y2352000
BSXORFB  EQU   11                  SINGLE DLE FOUND IN                  Y2353000
*                                  TRANSPARENT TEXT                     Y2354000
*                                                                       Y2355000
BSXORFC  EQU   12                  ENQ RECEIVED                         Y2356000
*                                                                       Y2357000
BSXORFD  EQU   13                  ERROR ON SUSPECTED NAK OR ENQ...     Y2358000
*                                  NO PAD CHARACTER FOLLOWING NAK/ENQ.  Y2359000
*                                                                       Y2360000
*********************************************************************** Y2361000
*              OPERATION VALUES FOR BSXOPFW                           * Y2362000
*********************************************************************** Y2363000
*                                  * TRANSMIT FUNCTION *              * Y2364000
*                                  *********************              * Y2365000
*                                                                     * Y2366000
BSXOWF0  EQU   0                   WRITE FUNCTION IS INCOMPLETE.        Y2367000
*                                                                       Y2368000
BSXOWF1  EQU   1                   WRITE FUNCTION COMPLETED             Y2369000
*                                  NORMALLY.                            Y2370000
*                                                                       Y2371000
*                                                                       Y2372000
BSXOWF2  EQU   2                   DATA SET NOT READY...                Y2373000
*                                  DISCOVERED AT INTERRUPT TIME         Y2374000
*                                                                       Y2375000
BSXOWF3  EQU   3                   TIMEOUT IN TRANSMIT MODE...          Y2376000
*                                  'CLEAR TO SEND' NOT RECEIVED         Y2377000
*                                  FROM DATA SET WITHIN 3 SEC.          Y2378000
*                                                                       Y2379000
*                                  THE VALUE OF BSXOWF3 IS ALSO USED    Y2380000
*                                  TO INDICATE NORMAL COMPLETION        Y2381000
*                                  OF REQUESTED PROGRAM TIMER           Y2382000
*                                  FUNCTION                             Y2383000
*                                                                       Y2384000
         EJECT                                                          Y2385000
         SPACE 3                                                        Y2386000
*********************************************************************** Y2387000
*              LOW SPEED BSCA PROGRAM VARIABLES                       * Y2388000
*********************************************************************** Y2389000
BSXLSPD  EQU   &LINESPD            LINE BAUD RATE                       Y2390000
*                                                                       Y2391000
BSXNSIR  EQU   BSXLSPD/8           CHARACTER COUNT BEFORE INSERTING     Y2392000
*                                  SYNCHRONOUS IDLE SEQUENCE (SYN-SYN)  Y2393000
*                                  IN NORMAL TEXT MODE...               Y2394000
*                                  BSXNSIR=(BSXLSPD/8)*1.00             Y2395000
*                                  WHERE 1.00 IS THE NORMAL             Y2396000
*                                  2701 TIMER INTERVAL                  Y2397000
*                                                                       Y2398000
         AIF   (&CLOCK EQ 0).CLOCK1                                     Y2399000
BSXTSIR  EQU   (84+56)/2           CHARACTER COUNT BEFORE INSERT-       Y2400000
*                                  ING SYNCHRONOUS IDLE SEQUENCE        Y2401000
*                                  IN TRANSPARENT TEXT WHEN             Y2402000
*                                  INTERNAL CLOCKING IS USED.           Y2403000
         AGO   .CLOCK2                                                  Y2404000
.CLOCK1  ANOP                                                           Y2405000
BSXTSIR  EQU   BSXNSIR             CHARACTER COUNT BEFORE INSERTING     Y2406000
*                                  SYNCHRONOUS IDLE SEQUENCE (DLE-SYN)  Y2407000
*                                  IN TRANSPARENT TEXT WHEN             Y2408000
*                                  EXTERNAL  (DATA SET) CLOCKING        Y2409000
*                                  IS USED.                             Y2410000
.CLOCK2  ANOP                                                           Y2411000
*                                                                       Y2412000
BSXNSYN  EQU   5                   NUMBER OF SYN CHARACTERS TO          Y2413000
*                                  TRANSMIT PRECEDING EACH MESSAGE      Y2414000
*********************************************************************** Y2415000
*              WRITE PROCESS MONITOR TRANSFER VECTOR TABLE            * Y2416000
*********************************************************************** Y2417000
BSXNWPR  $NULL                     REFERENCE POINT                      Y2418000
*                                                                       Y2419000
BSXWPR0  EQU   0                   PROCESS 0 INDEX                      Y2420000
         $ADCON (BSXNINS)          WRITE INITIAL SYN CHARACTERS         Y2421000
*                                                                       Y2422000
BSXWPR1  EQU   1                   PROCESS 1 INDEX                      Y2423000
         $ADCON (BSXNWHN)          WRITE NORMAL TEXT HEADER             Y2424000
*                                                                       Y2425000
BSXWPR2  EQU   2                   PROCESS 2 INDEX                      Y2426000
         $ADCON (BSXNWHT)          WRITE TRANSPARENT TEXT HEADER        Y2427000
*                                                                       Y2428000
BSXWPR3  EQU   3                   PROCESS 3 INDEX                      Y2429000
         $ADCON (BSXNWDA)          WRITE DLE-ACK0                       Y2430000
*                                                                       Y2431000
BSXWPR4  EQU   4                   PROCESS 4 INDEX                      Y2432000
         $ADCON (BSXNNAK)          WRITE NAK                            Y2433000
*                                                                       Y2434000
BSXWPR5  EQU   5                   PROCESS 5 INDEX                      Y2435000
         $ADCON (BSXNWSQ)          WRITE SOH-ENQ                        Y2436000
*                                                                       Y2437000
BSXWPR6  EQU   6                   PROCESS 6 INDEX                      Y2438000
         $ADCON (BSXNPDO)          TERMINATION PROCEDURE                Y2439000
*                                                                       Y2440000
BSXWPR7  EQU   7                   PROCESS 7 INDEX                      Y2441000
         $ADCON (BSXWMON)          DATA MONITORING                      Y2442000
         EJECT                                                          Y2443000
*********************************************************************** Y2444000
*              READ PROCESS MONITOR TRANSFER VECTOR TABLE             * Y2445000
*********************************************************************** Y2446000
BSXRSSQ  $NULL                     REFERENCE POINT                      Y2447000
*                                                                       Y2448000
BSXRPR0  EQU   0                   PROCESS 0 INDEX                      Y2449000
         $ADCON (BSXRMON)          MONITOR INITIAL INPUT FOR            Y2450000
*                                  NAK, SOH, DLE OR ENQ                 Y2451000
*                                                                       Y2452000
BSXRPR1  EQU   1                   PROCESS 1 INDEX                      Y2453000
         $ADCON (BSXRSHS)          SOH FOUND, NOW LOOK FOR STX          Y2454000
*                                                                       Y2455000
BSXRPR2  EQU   2                   PROCESS 2 INDEX                      Y2456000
         $ADCON (BSXRDHS)          DLE FOUND, NOW LOOK FOR STX          Y2457000
*                                  OR ACK0                              Y2458000
*                                                                       Y2459000
BSXRPR3  EQU   3                   PROCESS 3 INDEX                      Y2460000
         $ADCON (BSXRNRM)          NORMAL TEXT...LOOK FOR SYN           Y2461000
*                                                                       Y2462000
BSXRPR4  EQU   4                   PROCESS 4 INDEX                      Y2463000
         $ADCON (BSXRTRN)          TRANSPARENT TEXT, LOOK FOR DLE       Y2464000
*                                                                       Y2465000
BSXRPR5  EQU   5                   PROCESS 5 INDEX                      Y2466000
         $ADCON (BSXRNET)          SYN FOUND (NORMAL) LOOK FOR          Y2467000
*                                  ETB OF SYN-ETB PAIR                  Y2468000
*                                                                       Y2469000
BSXRPR6  EQU   6                   PROCESS 6 INDEX                      Y2470000
         $ADCON (BSXRTET)          DLE FOUND (TRANSPARENCY) LOOK        Y2471000
*                                  FOR ETB OF DLE-ETB PAIR              Y2472000
*                                                                       Y2473000
BSXRPR7  EQU   7                   PROCESS 7 INDEX                      Y2474000
         $ADCON (BSXRBBO)          PROCESS FIRST BCC CHARACTER          Y2475000
*                                                                       Y2476000
BSXRPR8  EQU   8                   PROCESS 8 INDEX                      Y2477000
         $ADCON (BSXRBBT)          PROCESS SECOND BCC CHARACTER         Y2478000
*                                                                       Y2479000
BSXRPR9  EQU   9                   PROCESS 9 INDEX                      Y2480000
         $ADCON (BSXRPCK)          CHECK FOR PAD FOLLOWING NAK OR ENQ   Y2481000
         EJECT                                                          Y2482000
*********************************************************************** Y2483000
*              READ - WRITE STATUS VARIABLES                          * Y2484000
*********************************************************************** Y2485000
BSXOPFW  DC    AL2(*-*)            SCA WRITE OPERATION STATUS           Y2486000
BSXOPFR  DC    AL2(*-*)            SCA READ OPERATION STATUS            Y2487000
BSXOPF   DC    AL2(*-*)            POINTER TO CURRENT OP STATUS         Y2488000
BSXOPFWP $ADCON (BSXOPFW)          ADDRESS OF WRITE OP STATUS           Y2489000
BSXOPFRP $ADCON (BSXOPFR)          ADDRESS OF READ OP STATUS            Y2490000
*********************************************************************** Y2491000
*              SPECIAL PROCESSOR TO STOP SCA OPERATION                * Y2492000
*********************************************************************** Y2493000
BSXHALT  DC    AL2(*-*)            ENTRY VIA $TSL BSXHALT               Y2494000
         $XIO  BSXIRST             ISSUE SCA RESET COMMAND              Y2495000
         $B    BSXHALT,,I          RETURN TO CALLER                     Y2496000
*********************************************************************** Y2497000
*              PROGRAM TIMER FUNCTION PREPARATION                     * Y2498000
*********************************************************************** Y2499000
BSXITMR  $NULL                                                          Y2500000
         $XIO  BSXIRST             ISSUE SCA RESET COMMAND              Y2501000
         $XIO  BSXISPT-D1          START THE PROGRAM TIMER              Y2502000
BSXISVA  $AXT  *-*,WA,L            RESTORE ORIGINAL WA VALUE            Y2503000
         $MDM  BSXIOS,1            SET BSXIOS FOR NORMAL EXIT           Y2504000
         $ZAC                      CLEAR AC AND RESET                   Y2505000
         $STO  BSXOPF,,I            APPROPRIATE STATUS                  Y2506000
         $B    BSXIOS,,I           RETURN TO CALLER                     Y2507000
         $BSS  0,E                                                      Y2508000
BSXICN1  DC    AL2(1)              CONSTANT 1                           Y2509000
BSXISPT  DC    AL2($SCALOW+$CONTROL+32) PROGRAM TIMER START             Y2510000
BSXIRST  DC    AL2(0)              AVAILABLE SPACE                      Y2511000
         DC    AL2($SCALOW+$IWRITE+64) RESET SCA COMMAND                Y2512000
*********************************************************************** Y2513000
*              ENTRY POINT TO BSXIOS                                  * Y2514000
*********************************************************************** Y2515000
BSXIOS   DC    AL2(*-*)            ENTRY POINT VIA $TSL BSXIOS          Y2516000
         $XIO  BSXISNR-D1          SENSE SCA WITHOUT RESET              Y2517000
         $SLA  7                   GET DATA SET READY BIT               Y2518000
         $BNN  BSXIOS,,I           REJECT REQUEST IF NOT READY          Y2519000
         $XIO  BSXILDS             LOAD SYNC/IDLE REGISTER (SYN)        Y2520000
         $STX  BSXISVA+D1,WA       SAVE WA FOR EXIT RESTORATION         Y2521000
         $MDX  TPBUFCB,WA,X        POINT TO DATA COUNT FIELD            Y2522000
         $STX  BSXIOAR+D1,WA,L     AND SAVE POINTER                     Y2523000
         $LD   0,WA                GET DATA COUNT FROM I/O AREA         Y2524000
         $STO  BSXICNT             SAVE FOR INTERRUPT ROUTINE           Y2525000
         $MDX  1,WA                POINT TO DATA START                  Y2526000
         $ZAC                      CLEAR AC AND RESET...                Y2527000
         $STO  BSXNWOK+D1,,L       WRITE PROCESS MONITOR INDEX          Y2528000
         $STO  BSXNLRT,,L          WRITE FETCH LEFT/RIGHT SWITCH        Y2529000
         $STO  BSXBCCA,,L          BCC (CRC-16) ACCUMULATION            Y2530000
         $STO  BSXNXXT+D1,,L       WRITE TERMINATION INDEX              Y2531000
         $LD   BSXOPFWP            ASSUME WRITE OPERATION               Y2532000
         $STO  BSXOPF               AND SET STATUS WORD POINTER         Y2533000
         $LD   0,WA                GET FUNCTION TYPE                    Y2534000
         $STO  BSXIOPT             AND SAVE IT                          Y2535000
         $BZ   BSXIREC             BRANCH IF RECEIVE                    Y2536000
         EJECT                                                          Y2537000
*********************************************************************** Y2538000
*              WRITE SELECT (TRANSMIT) PREPARATION                    * Y2539000
*********************************************************************** Y2540000
         $S    BSXICN1             DECREMENT FUNCTION TYPE              Y2541000
         $STO  BSXWHAT+D1,,L       AND FORM PROCESS INDEX               Y2542000
         $BZ   BSXITMR             BRANCH IF TIMER REQUEST              Y2543000
         $EOR  BSXIXPS             TEST FOR TRANSPARENT WRITE           Y2544000
         $STO  BSXITXT             SET ZERO IF TRANSPARENCY             Y2545000
         $LDD  BSXTRTX             ASSUME TRANSPARENT TEXT              Y2546000
         $MDM  BSXITXT,0           TEST MODE INDICATOR                  Y2547000
         $LDD  BSXNRTX             GET NORMAL TEXT VALUES               Y2548000
         $STO  BSXTRL1,,L          SET FIRST TRAILER CHARACTER          Y2549000
         $STO  BSXISIX,,L          SET FIRST SYNC/IDLE CHARACTER        Y2550000
         $SLT  16                  GET SYNC/IDLE FREQUENCY CONSTANT     Y2551000
         $STO  BSXSTCN,,L          AND SET SYNC/IDLE INSERT             Y2552000
         $STO  BSXSTCT,,L          COUNTER VARIABLES                    Y2553000
         $LD   BSXNCN2             SET DATE WRITE COUNT TO              Y2554000
         $STO  BSXXCNT,,L          INCLUDE HEADER CHARACTERS            Y2555000
         $MDX  1,WA                POINT TO DATA WORD FOLLOWING         Y2556000
         $STX  BSXDTAD,WA          HEADER AND SAVE ADDRESS              Y2557000
         $AXT  BSXNSYN,WA,X        SET INITIAL SEQUENCE FLAG            Y2558000
         $STX  BSXISCT,WA          TO NUMBER OF PRECEDING SYN'S         Y2559000
         $XIO  BSXITMM             SET TRANSMIT MODE                    Y2560000
         $B    BSXISVA             GO TO EXIT PROCEDURE                 Y2561000
*********************************************************************** Y2562000
*              READ SELECT (RECEIVE) PREPARATION                      * Y2563000
*********************************************************************** Y2564000
BSXIREC  $STO  BSXRSEQ+D1,,L       RESET READ PROCESS INDEX             Y2565000
         $STO  BSXRCNT,,L          AND RECEIVE DATA COUNTER             Y2566000
         $STO  BSXRPLR,,L          AND LEFT/RIGHT SWITCH                Y2567000
         $STX  BSXDTAD,WA          SAVE POINTER TO DATA AREA            Y2568000
         $LD   BSXOPFRP            SET STATUS WORD POINTER              Y2569000
         $STO  BSXOPF               TO READ OPERATION                   Y2570000
         $XIO  BSXISRD-D1          INITIATE SCA READ OPERATION          Y2571000
         $XIO  BSXITME-D1          START READ TIMER                     Y2572000
         $B    BSXISVA             GO TO EXIT PROCEDURE                 Y2573000
         EJECT                                                          Y2574000
*********************************************************************** Y2575000
*              COMMANDS, CONSTANTS, VARIABLES, STORAGE                * Y2576000
*********************************************************************** Y2577000
         $BSS  0,E                                                      Y2578000
BSXIOPT  DC    AL2(*-*)            OPERATION TYPE FLAG           E      Y2579000
*                                   ZERO IF RECEIVE                     Y2580000
*                                   NON-ZERO IF TRANSMIT                Y2581000
BSXISNR  DC    AL2($SCALOW+$SENSED) SENSE SCA WITHOUT RESET      O      Y2582000
*                                                                       Y2583000
BSXILDS  $ADCON (BSXISYN)          LOAD SYNC/IDLE WITH SYN       E      Y2584000
         DC    AL2($SCALOW+$WRITE+4)                             O      Y2585000
*                                                                       Y2586000
BSXICNT  DC    AL2(*-*)            BYTE COUNT FROM I/O AREA      E      Y2587000
BSXIRDS  DC    AL2($SCALOW+$IREAD) START READ                    O      Y2588000
*                                                                       Y2589000
BSXIXPS  DC    AL2($BSXTTT-1)      TEST FOR TRANSPARENT TEXT     E      Y2590000
BSXITME  DC    AL2($SCALOW+$SENSED+2) START TIMER                O      Y2591000
*                                                                       Y2592000
BSXITMM  DC    X'FF00'             INITIATE WRITE TO SET         E      Y2593000
         DC    AL2($SCALOW+$IWRITE) TRANSMIT MODE                O      Y2594000
*                                                                       Y2595000
BSXNRTX  DC    AL1($SYN,0)         INITIALIZATION VALUES FOR     E      Y2596000
         DC    AL2(BSXNSIR)        NORMAL TEXT MODE              O      Y2597000
*                                                                       Y2598000
BSXNDSW  DC    AL2(*-*)            STORAGE FOR SCA DSW           E      Y2599000
BSXNSWR  DC    AL2($SCALOW+$SENSED+1) SENSE SCA DSW WITH RESET   O      Y2600000
*                                                                       Y2601000
BSXTRTX  DC    AL1($DLE,0)         INITIALIZATION VALUES FOR     E      Y2602000
         DC    AL2(BSXTSIR)        TRANSPARENT TEXT MODE         O      Y2603000
*                                                                       Y2604000
BSXDTAD  DC    AL2(*-*)            VARIABLE DATA WORD POINTER    E      Y2605000
BSXISRD  DC    AL2($SCALOW+$IREAD) START SCA READ                O      Y2606000
*                                                                       Y2607000
BSXITXT  DC    AL2(*-*)            TRANSMIT MODE FLAG                   Y2608000
*                                   ZERO IF TRANSPARENCY                Y2609000
*                                   NON-ZERO IF NORMAL                  Y2610000
*                                                                       Y2611000
BSXNCN2  DC    AL2(2)              INITIAL WRITE DATA COUNT             Y2612000
BSXISCT  DC    AL2(*-*)            INITIAL SEQUENCE SYN COUNT           Y2613000
         EJECT                                                          Y2614000
*********************************************************************** Y2615000
*              SCA (LOW SPEED) INTERRUPT PROCESSOR -SLIP 1            * Y2616000
*********************************************************************** Y2617000
BSCLOINT $NULL                     ENTRY FROM FLIP 1                    Y2618000
         $STX  BSXSVWA+D1,WA,L     SAVE WA IN EXIT ROUTINE              Y2619000
         $XIO  BSXNSWR-D1          SENSE SCA WITH RESET                 Y2620000
         $STO  BSXNDSW             SAVE DSW FOR LATER USE               Y2621000
         $SLA  7                   GET SCA READY BIT                    Y2622000
         $BNN  BSXNRDY             BRANCH IF SCA NOT READY              Y2623000
         $LD   BSXNDSW             RESTORE DSW AND                      Y2624000
         $BN   BSXNRDR             BRANCH IF READ RESPONSE              Y2625000
         $SLA  1                   GET POSSIBLE WRITE RESPONSE          Y2626000
         $BNN  BSXNTMO             BRANCH IF NOT WRITE RESPONSE         Y2627000
*********************************************************************** Y2628000
*              WRITE RESPONSE PROCESSOR                               * Y2629000
*********************************************************************** Y2630000
         $SLA  1                   GET POSSIBLE CHECK BIT               Y2631000
         $BNN  BSXNWOK             BRANCH IF CHECK BIT OFF              Y2632000
         $MDM  $ERRSCWC,1          INCREMENT TRANSMIT CHECK COUNT       Y2633000
         $LD   BSXISYN             GET A SYN CHARACTER                  Y2634000
         $TSL  BSXWRXC             GO WRITE IT                          Y2635000
         $B    BSXFLPX,,L          EXIT TO FLIP 1                       Y2636000
*********************************************************************** Y2637000
*              DATA MONITORING PROCESS                                * Y2638000
*********************************************************************** Y2639000
BSXWMON  $NULL                                                          Y2640000
         $LD   BSXXCNT             GET DATA TRANSFERED COUNT            Y2641000
         $EOR  BSXICNT             COMPARE WITH REQUEST                 Y2642000
         $BZ   BSXNXXT             BRANCH IF TERMINATION TIME           Y2643000
         $LD   BSXXCNT             GET DATA COUNT                       Y2644000
         $EOR  BSXSTCT             COMPARE WITH SYNC/IDLE MARKER        Y2645000
         $BZ   BSXNSKT             BRANCH IF TIME TO INSERT SYNC/IDLE   Y2646000
         AIF   (&TRANPRN EQ 0).NOXPRNA                                  Y2647000
         $LD   BSXNDLI             WAS LAST CHARACTER A DLE             Y2648000
         $BNZ  BSXNRSD             BRANCH IF IT WAS                     Y2649000
.NOXPRNA ANOP                                                           Y2650000
         $LD   BSXDTAD,,I          GET NEXT DATA WORD                   Y2651000
         $MDM  BSXNLRT,0           TEST LEFT/RIGHT SWITCH               Y2652000
         $SLA  8                   MOVE RIGHT TO LEFT                   Y2653000
         $AND  BSXNMSK             CLEAR RIGHT CHARACTER                Y2654000
         $STO  BSXNTMP             SAVE DATA TO BE TRANSMITTED          Y2655000
         AIF   (&TRANPRN EQ 0).NOXPRNB                                  Y2656000
         $EOR  BSXNDLE             TEST FOR DLE IN DATA                 Y2657000
         $BZ   BSXNDLP             BRANCH IF DLE FOUND                  Y2658000
.NOXPRNB ANOP                                                           Y2659000
BSXNORM  $LD   BSXDTAD             GET DATA WORD POINTER                Y2660000
         $A    BSXNLRT             POINT TO NEXT, IF TIME               Y2661000
         $STO  BSXDTAD             RESET DATA WORD POINTER              Y2662000
         $LD   BSXNLRT             GET LEFT/RIGHT SWITCH                Y2663000
         $EOR  BSXNCN1             REVERSE CURRENT SETTING              Y2664000
         $STO  BSXNLRT             FOR NEXT TIME AROUND                 Y2665000
         $MDM  BSXXCNT,1           INCREMENT DATA COUNTER               Y2666000
         $LD   BSXNTMP             GET DATA CHARACTER                   Y2667000
         $TSL  BSXWRXC             GO WRITE IT AND THEN                 Y2668000
         $TSL  BSXNBCC             CALCULATE BCC                        Y2669000
         $B    BSXFLPX,,L          GO TO EXIT                           Y2670000
         AIF   (&TRANPRN EQ 0).NOXPRNC                                  Y2671000
BSXNDLP  $STL  BSXNDLI             TURN ON DLE FLAG                     Y2672000
         $LD   BSXNDLE             GET DLE CHARACTER                    Y2673000
         $TSL  BSXWRXC             GO WRITE IT                          Y2674000
         $B    BSXFLPX,,L          GO TO EXIT                           Y2675000
BSXNRSD  $ZAC                      CLEAR AC AND                         Y2676000
         $STO  BSXNDLI             LOWER DLE FLAG                       Y2677000
         $B    BSXNORM             GO TO NORMAL FLOW                    Y2678000
*********************************************************************** Y2679000
*              LOCAL CONSTANTS,ETC.                                   * Y2680000
*********************************************************************** Y2681000
BSXNDLI  DC    AL2(*-*)            DLE FLAG                             Y2682000
BSXNDLE  DC    AL1($DLE,0)         DLE                                  Y2683000
.NOXPRNC ANOP                                                           Y2684000
BSXXCNT  DC    AL2(*-*)            DATA TRANSFER COUNT                  Y2685000
BSXNMSK  EQU   BSXITMM             RIGHT HALF MASK                      Y2686000
BSXNLRT  DC    AL2(*-*)            LEFT/RIGHT SWITCH                    Y2687000
BSXNTMP  DC    AL2(*-*)            TEMPORARY DATA STORAGE               Y2688000
BSXNSTI  DC    AL2(*-*)            TRIP INDICATOR                       Y2689000
*********************************************************************** Y2690000
*              SYNCHRONOUS/IDLE INSERT TIME                           * Y2691000
*********************************************************************** Y2692000
BSXNSKT  $LDD  BSXISIX             GET SYNC SEQUENCE SET BY BSXIOS      Y2693000
         $TSL  BSXWRXC             GO WRITE SELECTED SYNC CHARACTER     Y2694000
         $RTE  16                  GET NEXT SYNC CHARACTER AND          Y2695000
         $STD  BSXISIX             SET UP FOR NEXT TRIP                 Y2696000
         $LD   BSXNSTI             GET TRIP INDICATOR                   Y2697000
         $EOR  BSXNCN1             REVERSE IT'S SETTING                 Y2698000
         $STO  BSXNSTI             SAVE IT FOR NEXT TRIP                Y2699000
         $BNZ  BSXFLPX             EXIT TO FLIP 1 FIRST TIME            Y2700000
         $LD   BSXXCNT             GET DATA TRANSFER COUNT              Y2701000
         $A    BSXSTCN             ADD SYNC TIME CONSTANT               Y2702000
         $STO  BSXSTCT             SET FOR NEXT SYNC TIME               Y2703000
         $B    BSXFLPX,,L          GO TO EXIT                           Y2704000
*********************************************************************** Y2705000
*              LOCAL COMMANDS,STORAGE,FLAGS AND WHAT ELSE...          * Y2706000
*********************************************************************** Y2707000
         $BSS  0,E                                                      Y2708000
BSXISIX  DC    AL1($SYN,0)         SYNC/IDLE SEQUENCE...DLE OR SYN      Y2709000
         DC    AL1($SYN,0)         SECOND HALF OF SYNC/IDLE SEQUENCE    Y2710000
BSXTRL1  DC    AL1($SYN,0)         TRAILER SEQUENCE...DLE OR SYN        Y2711000
BSXTRL2  DC    AL1($ETB,0)         SECOND HALF OF TRAILER SEQUENCE      Y2712000
BSXWSAQ  DC    AL1($SOH,0,$ENQ,0)  SOH-ENQ SEQUENCE                     Y2713000
BSXNENQ  DC    AL1($ENQ,0)         ENQ CONSTANT                         Y2714000
BSXNCN1  DC    AL2(1)              CONSTANT 1                           Y2715000
BSXSTCN  DC    AL2(*-*)            SYNC TIME CONSTANT                   Y2716000
BSXSTCT  DC    AL2(*-*)            SYNC TIME COUNTER                    Y2717000
*********************************************************************** Y2718000
*              WRITE SOH-ENQ AND TERMINATE                            * Y2719000
*********************************************************************** Y2720000
BSXNWSQ  $NULL                                                          Y2721000
         $LDD  BSXWSAQ             GET SOH-ENQ SEQUENCE                 Y2722000
         $BSI  BSXWRXC             WRITE SOH, THEN ENQ                  Y2723000
         $RTE  16                  REVERSE SOH-ENQ                      Y2724000
         $STD  BSXWSAQ             STORE FOR NEXT PASS                  Y2725000
         $EOR  BSXNENQ             TEST FOR ENQ NEXT                    Y2726000
         $BZ   BSXFLPX             YES. EXIT FOR NEXT PASS              Y2727000
         $B    BSXWSPF             GO TERMINATE OPERATION               Y2728000
*********************************************************************** Y2729000
*              WRITE PROCESS MONITOR                                  * Y2730000
*********************************************************************** Y2731000
BSXNWOK  $AXT  *-*,WA,L            GET SELECTED PROCESS INDEX           Y2732000
         $B    BSXNWPR,WA,I        GO TO SELECTED PROCESS               Y2733000
*********************************************************************** Y2734000
*              WRITE INITIAL SYN SEQUENCE                             * Y2735000
*********************************************************************** Y2736000
BSXNINS  $NULL                                                          Y2737000
         $LD   BSXISYN             GET A SYN CHARACTER                  Y2738000
         $BSI  BSXWRXC             GO WRITE IT                          Y2739000
BSXWHAT  $AXT  *-*,WA,L            PROCESS SELECTED BY BSXIOS           Y2740000
         $MDM  BSXISCT,-1          DECREMENT AND TEST SYN COUNT         Y2741000
         $AXT  BSXWPR0,WA,X        NOT DONE. RESET PROCESS TO 0         Y2742000
BSXWXIT  $STX  BSXNWOK+D1,WA       STORE PROCESS INDEX                  Y2743000
         $B    BSXFLPX             GO TO EXIT                           Y2744000
BSXISYN  DC    AL1($SYN,0)         SYN CHARACTER                        Y2745000
*********************************************************************** Y2746000
*              WRITE NORMAL TEXT HEADER                               * Y2747000
*********************************************************************** Y2748000
BSXNWHN  $NULL                                                          Y2749000
         $LDD  BSXIHIX             GET HEADER SEQUENCE (SOH-STX)        Y2750000
         $BSI  BSXWRXC             WRITE SOH, THEN STX                  Y2751000
         $RTE  16                  REVERSE SOH-STX                      Y2752000
         $STD  BSXIHIX             STORE FOR NEXT PASS                  Y2753000
         $EOR  BSXNSTX             TEST FOR STX NEXT                    Y2754000
         $BZ   BSXFLPX             YES. EXIT FOR NEXT PASS              Y2755000
         $LD   BSXNSTX             NO. ALL DONE. GET STX                Y2756000
         $TSL  BSXNBCC             CALCULATE BCC                        Y2757000
         $XIO  BSXNLDS             LOAD SYNC/IDLE REGISTER WITH SYN     Y2758000
BSXNWSI  $AXT  BSXWPR7,WA,X        GET DATA MONITORING INDEX            Y2759000
         $B    BSXWXIT             GO TO EXIT PROCEDURE                 Y2760000
         $BSS  0,E                                                      Y2761000
BSXNLDS  $ADCON (BSXISYN)          LOAD SYNC/IDLE WITH SYN              Y2762000
         DC    AL2($SCALOW+$WRITE+4)                                    Y2763000
BSXIHIX  DC    AL1($SOH,0,$STX,0)  SOH-STX SEQUENCE                     Y2764000
BSXNSTX  DC    AL1($STX,0)         STX CONSTANT                         Y2765000
         EJECT                                                          Y2766000
*********************************************************************** Y2767000
*              WRITE TRANSPARENT TEXT HEADER (DLE-STX)                * Y2768000
*********************************************************************** Y2769000
BSXNWHT  $NULL                                                          Y2770000
         $LDD  BSXWTHD             GET HEADER SEQUENCE (DLE-STX)        Y2771000
         $BSI  BSXWRXC             WRITE DLE, THEN STX                  Y2772000
         $RTE  16                  REVERSE DLE-STX                      Y2773000
         $STD  BSXWTHD             STORE FOR NEXT PASS                  Y2774000
         $EOR  BSXNSTX             TEST FOR STX NEXT                    Y2775000
         $BZ   BSXFLPX             YES. EXIT FOR NEXT PASS              Y2776000
         $XIO  BSXPSID             NO. LOAD SYNC/IDLE WITH DLE          Y2777000
         $B    BSXNWSI             EXIT                                 Y2778000
         $BSS  0,E                                                      Y2779000
BSXWTHD  DC    AL1($DLE,0,$STX,0)  DLE-STX SEQUENCE                     Y2780000
BSXPSID  $ADCON (BSXWTHD)          LOAD SYNC/IDLE WITH DLE              Y2781000
         DC    AL2($SCALOW+$WRITE+4)                                    Y2782000
BSXWDAK  DC    AL1($DLE,0,$ACK0,0) DLE-ACK0 SEQUENCE                    Y2783000
BSXNAKO  DC    AL1($ACK0,0)        ACK0 CONSTANT                        Y2784000
*********************************************************************** Y2785000
*              WRITE DLE-ACK0 AND TERMINATE                           * Y2786000
*********************************************************************** Y2787000
BSXNWDA  $NULL                                                          Y2788000
         $LDD  BSXWDAK             GET DLE-ACK0 SEQUENCE                Y2789000
         $BSI  BSXWRXC             WRITE DLE, THEN ACK0                 Y2790000
         $RTE  16                  REVERSE DLE-ACK0                     Y2791000
         $STD  BSXWDAK             STORE FOR NEXT PASS                  Y2792000
         $EOR  BSXNAKO             TEST FOR ACK0 NEXT                   Y2793000
         $BZ   BSXFLPX             YES. EXIT FOR NEXT PASS              Y2794000
BSXWSPF  $AXT  BSXWPR6,WA,X        GET TERMINATION INDEX                Y2795000
         $B    BSXWXIT             GO TO EXIT                           Y2796000
*********************************************************************** Y2797000
*              WRITE NAK AND TERMINATE                                * Y2798000
*********************************************************************** Y2799000
BSXNNAK  $NULL                                                          Y2800000
         $LD   BSXWNAK             GET A NAK                            Y2801000
         $BSI  BSXWRXC             GO WRITE IT                          Y2802000
         $B    BSXWSPF             GO TERMINATE OPERATION               Y2803000
BSXWNAK  DC    AL1($NAK,0)         NAK CONSTANT                         Y2804000
*********************************************************************** Y2805000
*              WRITE TERMINATION MACHINATIONS                         * Y2806000
*********************************************************************** Y2807000
BSXNXXT  $AXT  *-*,WA,L            SET WA TO PROCESS INDEX              Y2808000
         $B    BSXCNTL,WA,L        GO TO SELECTED PROCESS         0     Y2809000
BSXCNTL  $B    BSXNTR1             WRITE FIRST TRAILER CHARACTER  1     Y2810000
         $B    BSXNTR2             WRITE SECOND TRAILER CHARACTER 2     Y2811000
         $B    BSXNBC1             WRITE FIRST BCC CHARACTER      3     Y2812000
         $B    BSXNBC2             WRITE SECOND BCC CHARACTER     4     Y2813000
         $B    BSXNPDO             WRITE PAD CHARACTER-TERMINATE  5     Y2814000
         EJECT                                                          Y2815000
*********************************************************************** Y2816000
*              WRITE FIRST TRAILER BSC CHARACTER                      * Y2817000
*********************************************************************** Y2818000
BSXNTR1  $LD   BSXTRL1             GET FIRST TRAILER CHARACTER          Y2819000
         $BSI  BSXWRXC             GO TO WRITE ROUTINE                  Y2820000
         $B    BSXNSEQ             SET SEQUENCE FOR 2ND TRAILER         Y2821000
*********************************************************************** Y2822000
*              WRITE SECOND TRAILER BSC CHARACTER                     * Y2823000
*********************************************************************** Y2824000
BSXNTR2  $LD   BSXTRL2             GET SECOND TRAILER CHARACTER         Y2825000
         $BSI  BSXWRXC             GO TO WRITE ROUTINE                  Y2826000
         $TSL  BSXNBCC             GO CALCULATE BCC                     Y2827000
BSXNSEQ  $MDX  1,WA                STEP TO NEXT SEQUENCE                Y2828000
         $STX  BSXNXXT+D1,WA       STORE SEQUENCE INDEX                 Y2829000
         $B    BSXFLPX             GO TO EXIT                           Y2830000
*********************************************************************** Y2831000
*              WRITE FIRST BCC (CRC-16) CHARACTER                     * Y2832000
*********************************************************************** Y2833000
BSXNBC1  $LD   BSXBCCA,,L          GET BCC WORD ACCUMULATED             Y2834000
BSXNBSQ  $SLA  8                   REVERSE ORDER                        Y2835000
         $BSI  BSXWRXC             GO WRITE CHARACTER                   Y2836000
         $B    BSXNSEQ             SET SEQUENCE FOR 2ND BCC             Y2837000
*********************************************************************** Y2838000
*              WRITE SECOND BCC(CRC-16) CHARACTER                     * Y2839000
*********************************************************************** Y2840000
BSXNBC2  $LD   BSXBCCA,,L          GET BCC WORD ACCUMULATED             Y2841000
         $SRA  8                   CLEAR LOW ORDER BYTE                 Y2842000
         $B    BSXNBSQ             GO WRITE IT                          Y2843000
*********************************************************************** Y2844000
*              WRITE TERMINATION PROCESS                              * Y2845000
*********************************************************************** Y2846000
BSXNPDO  $LD   BSXNPCN             GET PAD CHARACTER                    Y2847000
         $BSI  BSXWRXC             GO WRITE IT                          Y2848000
         $AXT  BSXOWF1,WA,X        FLAG WRITE COMPLETED                 Y2849000
         $B    BSXREND,,L          GO TERMINATE SCA OPERATION           Y2850000
BSXNPCN  DC    AL1($PAD,0)         PAD CHARACTER                        Y2851000
*********************************************************************** Y2852000
*              WRITE SPECIFIED DATA TO SCA                            * Y2853000
*********************************************************************** Y2854000
BSXWRXC  DC    AL2(*-*)            ENTRY VIA $BSI BSXWRXC               Y2855000
         $STO  BSXWTMP             STORE DATA CHARACTER                 Y2856000
         $XIO  BSXWWRS             WRITE IT                             Y2857000
         $LD   BSXWTMP             RESTORE INPUT                        Y2858000
         $B    BSXWRXC,,I          RETURN TO CALLER                     Y2859000
         $BSS  0,E                                                      Y2860000
BSXWWRS  $ADCON BSXWTMP            DATA POINTER                         Y2861000
         DC    AL2($SCALOW+$WRITE) WRITE COMMAND                        Y2862000
BSXWTMP  DC    AL2(*-*)            DATA STORAGE                         Y2863000
         EJECT                                                          Y2864000
*********************************************************************** Y2865000
*              COMMON EXIT FOR INTERRUPT PROCESSORS                   * Y2866000
*********************************************************************** Y2867000
BSXFLPX  $NULL                                                          Y2868000
         AIF   (&DEBUG EQ 0).NODBUGB                                    Y2869000
         $TSL  DBUGSCAL            GO TRACE THIS INTERRUPT              Y2870000
.NODBUGB ANOP                                                           Y2871000
BSXSVWA  $AXT  *-*,WA,L            RESTORE WA                           Y2872000
         $B    RTPL1RTN,,L         EXIT TO FLIP 1                       Y2873000
         EJECT                                                          Y2874000
*********************************************************************** Y2875000
*              PUT DATA INTO USER BUFFER                              * Y2876000
*********************************************************************** Y2877000
BSXRCN1  DC    AL2(1)              CONSTANT 1                           Y2878000
BSXRCNT  DC    AL2(*-*)            DATA READ COUNT                      Y2879000
BSXRPLR  DC    AL2(*-*)            LEFT/RIGHT INDICATOR                 Y2880000
BSXRPUT  DC    AL2(*-*)            ENTRY POINT                          Y2881000
         $LD   BSXICNT,,L          GET REQUESTED INPUT COUNT            Y2882000
         $EOR  BSXRCNT             COMPARE WITH CURRENT                 Y2883000
         $BZ   BSXRPXT             BRANCH IF EQUAL                      Y2884000
         $STX  BSXRPSA+D1,WA       SAVE CONTENTS OF WA                  Y2885000
         $LXA  BSXDTAD,WA,L        ADDRESS OF TARGET WORD               Y2886000
         $LD   BSXRPLR             GET LEFT/RIGHT INDICATOR             Y2887000
         $SKPN                     SKIP IF CONSTRUCTION UNDERWAY        Y2888000
         $STO  0,WA                OTHERWISE, CLEAR TARGET WORD         Y2889000
         $LD   BSXRNPT             GET DATA TO BE INSERTED              Y2890000
         $MDM  BSXRPLR,0           TEST LEFT/RIGHT SWITCH               Y2891000
         $SRA  8                   MOVE LEFT TO RIGHT                   Y2892000
         $OR   0,WA                FORM DATA WORD                       Y2893000
         $STO  0,WA                STORE IN TARGET WORD                 Y2894000
         $LD   BSXRPLR             GET LEFT/RIGHT INDICATOR             Y2895000
         $SKPZ                     SKIP IF WORD UNDER CONSTRUCTION      Y2896000
         $MDX  1,WA                POINT TO NEXT WORD                   Y2897000
         $STX  BSXDTAD,WA,L        SAVE POINTER FOR NEXT TRIP           Y2898000
         $EOR  BSXRCN1             REVERSE LEFT/RIGHT SWITCH            Y2899000
         $STO  BSXRPLR             PUT IT BACK                          Y2900000
         $MDM  BSXRCNT,1           INCREMENT DATA COUNT                 Y2901000
         $LD   BSXRNPT             GET DATA VALUE                       Y2902000
BSXRPSA  $AXT  *-*,WA,L            RESTORE REGISTER WA                  Y2903000
         $B    BSXRPUT,,I          RETURN TO CALLER                     Y2904000
BSXRPXT  $AXT  BSXORF2,WA,X        GET COMPLETION CODE                  Y2905000
         $B    BSXREND             END READ OPERATION                   Y2906000
*********************************************************************** Y2907000
*              PROCESS FIRST BCC CHARACTER                            * Y2908000
*********************************************************************** Y2909000
BSXRBBO  $NULL                                                          Y2910000
         $LD   BSXRNPT             GET FIRST BCC CHARACTER              Y2911000
         $SRA  8                   REVERSE ORDER FOR COMPARE            Y2912000
         $STO  BSXBCCS             SAVE IT                              Y2913000
         $AXT  BSXRPR8,WA,X        SET PROCESS 8 INDEX                  Y2914000
         $B    BSXRINX             EXIT FOR SECOND BCC                  Y2915000
*********************************************************************** Y2916000
*              PROCESS SECOND BCC CHARACTER                           * Y2917000
*********************************************************************** Y2918000
BSXRBBT  $NULL                                                          Y2919000
         $LD   BSXRNPT             GET SECOND BCC CHARACTER             Y2920000
         $OR   BSXBCCS             FORM COMPLETE BCC VALUE              Y2921000
         $EOR  BSXBCCA             COMPARE WITH CALCULATED BCC          Y2922000
         $AXT  BSXORF1,WA,X        ASSUME NO ERROR                      Y2923000
         $SKPZ                     SKIP IF NO ERROR                     Y2924000
         $AXT  BSXORF5,WA,X        GET ERROR COMPLETION CODE            Y2925000
         $LD   BSXRCNT             GET COUNT OF DATA READ               Y2926000
BSXIOAR  $STO  *-*,,L              STORE IT IN BUFFER COUNT WORD        Y2927000
         $B    BSXREND             TERMINATE                            Y2928000
BSXBCCS  DC    AL2(*-*)                                                 Y2929000
         EJECT                                                          Y2930000
*********************************************************************** Y2931000
*              READ RESPONSE PROCESSOR                                * Y2932000
*********************************************************************** Y2933000
BSXNRDR  $NULL                                                          Y2934000
         $SLA  3                   GET TIMEOUT BIT AND                  Y2935000
         $BN   BSXNTMR             BRANCH IF TIMEOUT                    Y2936000
         $XIO  BSXREAD             READ DATA INTO BSXRNPT               Y2937000
BSXRSEQ  $AXT  *-*,WA,L            SEQUENCE INDEX TO WA                 Y2938000
         $LD   BSXRNPT             GET INPUT CHARACTER                  Y2939000
         $B    BSXRSSQ,WA,I        GO TO SELECTED PROCESS               Y2940000
*********************************************************************** Y2941000
*              LOCAL CONSTANTS,COMMANDS,ETC.                          * Y2942000
*********************************************************************** Y2943000
         $BSS  0,E                                                      Y2944000
BSXREAD  $ADCON BSXRNPT            ADDRESS OF INPUT STORAGE             Y2945000
         DC    AL2($SCALOW+$READ)  READ COMMAND                         Y2946000
BSXRNPT  DC    AL2(*-*)            INPUT DATA STORAGE                   Y2947000
BSXIEND  DC    AL2($SCALOW+$CONTROL+4) END SCA OPERATION                Y2948000
*********************************************************************** Y2949000
*              CHECK FOR PAD CHARACTER FOLLOWING NAK OR ENQ           * Y2950000
*********************************************************************** Y2951000
BSXRPCK  $EOR  BSXRPAD             TEST FOR PAD CHARACTER               Y2952000
BSXRXVX  $AXT  *-*,WA,L            SET BY NAK OR ENQ PROCESSOR          Y2953000
         $SKPZ                     SKIP IF PAD CHARACTER FOUND          Y2954000
         $NOP                      CHANGE TO '$AXT BSXORFD,WA,X'        Y2955000
*                                  IF PAD CHECKING DESIRED              Y2956000
         $B    BSXREND             GO TO FINAL EXIT PROCESS             Y2957000
BSXRPAD  DC    AL1($PAD,0)         A PAD CHARACTER                      Y2958000
         EJECT                                                          Y2959000
*********************************************************************** Y2960000
*              TEST INITIAL DATA RECEIVED                             * Y2961000
*********************************************************************** Y2962000
BSXRMON  $BSI  BSXRPUT             GO PUT INPUT IN I/O AREA             Y2963000
         $S    BSXRCNS             TEST FOR SOH                         Y2964000
         $BZ   BSXRSOH             BRANCH IF SOH                        Y2965000
         $S    BSXRCND             TEST FOR DLE                         Y2966000
         $BZ   BSXRDLE             BRANCH IF DLE                        Y2967000
         $S    BSXRCNQ             TEST FOR ENQ                         Y2968000
         $BZ   BSXRENQ             BRANCH IF ENQ                        Y2969000
         $EOR  BSXRCNN             TEST FOR NAK                         Y2970000
BSXRBAD  $AXT  BSXORF8,WA,X        ASSUME IT IS NOT NAK                 Y2971000
         $BNZ  BSXREND             BRANCH IF NOT NAK                    Y2972000
*********************************************************************** Y2973000
*              NAK RECEIVED FROM BIG BROTHER                          * Y2974000
*********************************************************************** Y2975000
         $AXT  BSXORF9,WA,X        GET NAK COMPLETION CODE              Y2976000
         $B    BSXRPSS             GO SETUP FOR PAD CHECKER             Y2977000
*********************************************************************** Y2978000
*              TERMINATE SCA OPERATION...SET COMPLETION CODE          * Y2979000
*********************************************************************** Y2980000
BSXREND  $XIO  BSXIEND-D1          STOP SCA OPERATION                   Y2981000
         $STX  BSXOPF,WA,I         SET APPROPRIATE STATUS WORD          Y2982000
         AIF   (&DEBUG EQ 0).NOSCDBA                                    Y2983000
         $TSL  DBUGSCAL            GO TRACE SCA INTERRUPT               Y2984000
.NOSCDBA ANOP                                                           Y2985000
         $LD   BSXIOPT,,L          GET OPERATION TYPE AND               Y2986000
BSXWRAP  $BSI  *-*,,L,Z             ENTER APPENDAGE IF WRITE            Y2987000
         $B    BSXSVWA               OTHERWISE, GO TO EXIT...           Y2988000
BSXRCNS  DC    AL1($SOH,0)         SOH TEST VALUE                       Y2989000
BSXRCND  DC    AL1($DLE-$SOH,0)    DLE TEST VALUE                       Y2990000
BSXRCNQ  DC    AL1($ENQ-$SOH-($DLE-$SOH),0) ENQ TEST VALUE              Y2991000
BSXRCNN  DC    AL1($NAK-$SOH-($DLE-$SOH)-($ENQ-$SOH-($DLE-$SOH)),0) NAK Y2992000
BSXBCCA  DC    AL2(*-*)            ACCUMULATED BCC (CRC-16)             Y2993000
*********************************************************************** Y2994000
*              SOH FOUND AS FIRST CHARACTER                           * Y2995000
*********************************************************************** Y2996000
BSXRSOH  $NULL                                                          Y2997000
         $AXT  BSXRPR1,WA,X        GET SEQUENCE INDEX                   Y2998000
BSXRINX  $STX  BSXRSEQ+D1,WA       TO GO TO SELECTED PROCESS            Y2999000
         $B    BSXFLPX             GO TO EXIT PROCEDURE                 Y3000000
*********************************************************************** Y3001000
*              DLE FOUND AS FIRST CHARACTER                           * Y3002000
*********************************************************************** Y3003000
BSXRDLE  $NULL                                                          Y3004000
         $AXT  BSXRPR2,WA,X        SET FOR PROCESS 2                    Y3005000
         $B    BSXRINX             EXIT                                 Y3006000
*********************************************************************** Y3007000
*              ENQ FOUND AS FIRST CHARACTER                           * Y3008000
*********************************************************************** Y3009000
BSXRENQ  $NULL                                                          Y3010000
         $AXT  BSXORFC,WA,X        GET ENQ COMPLETION CODE              Y3011000
BSXRPSS  $STX  BSXRXVX+D1,WA       STORE IT FOR PAD CHECKER             Y3012000
         $AXT  BSXRPR9,WA,X        PAD CHECKER SEQUENCE INDEX           Y3013000
         $B    BSXRINX             GO SET SEQUENCE AND EXIT             Y3014000
         EJECT                                                          Y3015000
*********************************************************************** Y3016000
*              LOOK FOR STX FOLLOWING SOH                             * Y3017000
*********************************************************************** Y3018000
BSXRSHS  $EOR  BSXRSTX             TEST FOR STX                         Y3019000
         $BNZ  BSXRBAD             STX NOT FOUND                        Y3020000
         $STO  BSXTFLG             SET NORMAL TEXT INDICATOR            Y3021000
         $AXT  BSXRPR3,WA,X        GET PROCESS 3 INDEX                  Y3022000
BSXRCMP  $BSI  BSXRPUT             PUT INPUT IN BUFFER                  Y3023000
         $TSL  BSXNBCC             GO CALCULATE BCC                     Y3024000
         $B    BSXRINX             EXIT                                 Y3025000
BSXRSTX  DC    AL1($STX,0)         STX CONSTANT                         Y3026000
BSXTFLG  DC    AL2(*-*)            READ TEXT MODE FLAG                  Y3027000
*********************************************************************** Y3028000
*              LOOK FOR STX OR ACK0 FOLLOWING DLE                     * Y3029000
*********************************************************************** Y3030000
BSXRDHS  $S    BSXRSTX             TEST FOR STX                         Y3031000
         $BZ   BSXRSXI             BRANCH IF STX                        Y3032000
         $S    BSXRCAO             TEST FOR ACK0                        Y3033000
         $BNZ  BSXRBAD             BRANCH IF NOT ACK0                   Y3034000
         $TSL  BSXRPUT             PUT ACK0 IN BUFFER                   Y3035000
         $AXT  BSXORFA,WA,X        GET DLE-ACK0 CODE                    Y3036000
         $B    BSXREND             EXIT                                 Y3037000
BSXRSXI  $STL  BSXTFLG             FLAG TRANSPARENT DATA                Y3038000
         $AXT  BSXRPR4,WA,X        GET PROCESS 4 INDEX                  Y3039000
         $TSL  BSXRPUT             PUT STX IN BUFFER                    Y3040000
         $B    BSXRINX             GO SETUP TEXT MONITOR                Y3041000
BSXRCAO  DC    AL1($ACK0-$STX,0)   ACK0 TEST VALUE                      Y3042000
*********************************************************************** Y3043000
*              NORMAL TEXT PROCESSOR..MONITOR SYN'S                   * Y3044000
*********************************************************************** Y3045000
BSXRNRM  $NULL                                                          Y3046000
         $EOR  BSXRSYN             TEST FOR SYN                         Y3047000
         $BZ   BSXRSHV             BRANCH IF SYN                        Y3048000
BSXRDTX  $TSL  BSXRPUT             GO PUT DATA IN BUFFER                Y3049000
         $BSI  BSXNBCC             GO CALCULATE BCC                     Y3050000
         $B    BSXFLPX,,L          EXIT TO FLIP 1                       Y3051000
BSXRSHV  $AXT  BSXRPR5,WA,X        GET PROCESS 5 INDEX                  Y3052000
         $B    BSXRINX             GO TO EXIT                           Y3053000
BSXRSYN  DC    AL1($SYN,0)         SYN TEST VALUE                       Y3054000
         EJECT                                                          Y3055000
*********************************************************************** Y3056000
*              TRANSPARENT TEXT PROCESSOR..MONITOR DLE'S              * Y3057000
*********************************************************************** Y3058000
BSXRTRN  $EOR  BSXRDLL             TEST FOR DLE                         Y3059000
         $BNZ  BSXRDTX             BRANCH IF NOT DLE                    Y3060000
         $AXT  BSXRPR6,WA,X        GET PROCESS 6 INDEX                  Y3061000
         $B    BSXRINX             GO TO EXIT                           Y3062000
*********************************************************************** Y3063000
*              SYN FOUND. LOOK FOR ETB NEXT                           * Y3064000
*********************************************************************** Y3065000
BSXRNET  $S    BSXRSYN             TEST FOR ANOTHER SYN FIRST           Y3066000
         $BZ   BSXRSNK             GO RESTART READ TIMER IF SYN         Y3067000
         $EOR  BSXRSEB             TEST FOR ETB                         Y3068000
         $AXT  BSXRPR3,WA,X        ASSUME NOT ETB                       Y3069000
         $SKPN                     SKIP IF NOT ETB                      Y3070000
         $AXT  BSXRPR7,WA,X        SET FOR BCC PROCESS                  Y3071000
         $B    BSXRCMP             GO PUT AND CALCULATE,ETC.            Y3072000
BSXRDLL  DC    AL1($DLE,0)         DLE TEST VALUE                       Y3073000
BSXREMD  DC    AL1($ETB-$DLE,0)    ETB TEST VALUE                       Y3074000
BSXREDS  DC    AL1($SYN-$DLE-($ETB-$DLE),0) SYN TEST VALUE              Y3075000
BSXRSEB  DC    AL1($ETB-$SYN,0)    ETB TEST VALUE                       Y3076000
*********************************************************************** Y3077000
*              DLE FOUND..LOOK FOR ETB NEXT                           * Y3078000
*********************************************************************** Y3079000
BSXRTET  $AXT  BSXRPR4,WA,X        ASSUME INPUT IS ANOTHER DLE          Y3080000
         $S    BSXRDLL             TEST FOR DLE                         Y3081000
         $BZ   BSXRCMP             BRANCH IF DLE TO DATA PROCEDURE      Y3082000
         $AXT  BSXRPR7,WA,X        ASSUME INPUT IS AN ETB               Y3083000
         $S    BSXREMD             TEST FOR ETB                         Y3084000
         $BZ   BSXRCMP             BRANCH IF ETB TO DATA PROCEDURE      Y3085000
         $AXT  BSXRPR4,WA,X        ASSUME INPUT IS A SYN                Y3086000
         $EOR  BSXREDS             TEST FOR SYN                         Y3087000
         $BZ   BSXRSNK             GO RESTART READ TIMER IF SYN         Y3088000
         $AXT  BSXORFB,WA,X        GET COMPLETION CODE                  Y3089000
         $B    BSXREND             TERMINATE                            Y3090000
*********************************************************************** Y3091000
*              RESTART READ TIMER AFTER SYNC/IDLE SEQUENCE            * Y3092000
*********************************************************************** Y3093000
BSXRSNK  $XIO  BSXITME-D1,,L       ISSUE START TIMER COMMAND            Y3094000
         $B    BSXRINX             GO TO EXIT                           Y3095000
         EJECT                                                          Y3096000
*********************************************************************** Y3097000
*              CALCULATE BLOCK CHECK CHARACTER ALIAS CRC-16           * Y3098000
*********************************************************************** Y3099000
BSXNBCC  DC    AL2(*-*)            ENTRY WITH CHARACTER IN HIGH AC      Y3100000
         $SRA  8                   PUT IT IN LOW AC BYTE                Y3101000
         $EOR  BSXBCCA             ADD IN REMAINDER                     Y3102000
         $BOD  BSXEOR1             BRANCH IF ONE                        Y3103000
         $SRA  1                                                        Y3104000
BSXNB2   $BOD  BSXEOR2             BRANCH IF ONE                        Y3105000
         $SRA  1                                                        Y3106000
BSXNB3   $BOD  BSXEOR3             ETC                                  Y3107000
         $SRA  1                                                        Y3108000
BSXNB4   $BOD  BSXEOR4             ETC                                  Y3109000
         $SRA  1                                                        Y3110000
BSXNB5   $BOD  BSXEOR5             ETC                                  Y3111000
         $SRA  1                                                        Y3112000
BSXNB6   $BOD  BSXEOR6             ETC                                  Y3113000
         $SRA  1                                                        Y3114000
BSXNB7   $BOD  BSXEOR7             ETC                                  Y3115000
         $SRA  1                                                        Y3116000
BSXNB8   $BOD  BSXEOR8             ETC                                  Y3117000
         $SRA  1                                                        Y3118000
BSXNB9   $STO  BSXBCCA             STORE NEW REMAINDER                  Y3119000
         $B    BSXNBCC,,I          EXIT                                 Y3120000
BSXEOR1  $SRA  1                                                        Y3121000
         $EOR  BSXPOLY             ADD POLYNOMIAL                       Y3122000
         $B    BSXNB2              TEST NEXT BIT                        Y3123000
BSXEOR2  $SRA  1                                                        Y3124000
         $EOR  BSXPOLY             ETC                                  Y3125000
         $B    BSXNB3                                                   Y3126000
BSXEOR3  $SRA  1                                                        Y3127000
         $EOR  BSXPOLY             ETC                                  Y3128000
         $B    BSXNB4                                                   Y3129000
BSXEOR4  $SRA  1                                                        Y3130000
         $EOR  BSXPOLY             ETC                                  Y3131000
         $B    BSXNB5                                                   Y3132000
BSXEOR5  $SRA  1                                                        Y3133000
         $EOR  BSXPOLY             ETC                                  Y3134000
         $B    BSXNB6                                                   Y3135000
BSXEOR6  $SRA  1                                                        Y3136000
         $EOR  BSXPOLY             ETC                                  Y3137000
         $B    BSXNB7                                                   Y3138000
BSXEOR7  $SRA  1                                                        Y3139000
         $EOR  BSXPOLY             ETC                                  Y3140000
         $B    BSXNB8                                                   Y3141000
BSXEOR8  $SRA  1                                                        Y3142000
         $EOR  BSXPOLY             ETC                                  Y3143000
         $B    BSXNB9                                                   Y3144000
BSXPOLY  DC    X'A001'             POLYNOMIAL FOR CRC-16                Y3145000
         EJECT                                                          Y3146000
*********************************************************************** Y3147000
*              TIMEOUT PROCESSOR                                      * Y3148000
*********************************************************************** Y3149000
BSXNTMO  $NULL                                                          Y3150000
         $SLA  2                   GET DSW TIMEOUT BIT                  Y3151000
         $BNN  BSXNTXX             BRANCH IF NOT TIMEOUT                Y3152000
         $MDM  BSXIOPT,0           TEST OPERATION TYPE                  Y3153000
         $B    BSXNTWT             BRANCH IF WRITE OR TIMER FUNCTION    Y3154000
BSXNTMR  $MDM  $ERRSCRT,1          INCREMENT TIMEOUT COUNTER            Y3155000
         $AXT  BSXORF3,WA,X        ASSUME INITIAL READ SEQUENCE         Y3156000
         $MDM  BSXRSEQ+D1,0        TEST FOR INITIAL READ PROCESS        Y3157000
         $AXT  BSXORF4,WA,X        NOT INITIAL READ PROCESS             Y3158000
BSXNTGO  $B    BSXREND,,L          GO TERMINATE SCA OPERATION           Y3159000
BSXNTXX  $MDM  $ERRSCXX,1          COUNT UNIDENTIFIED INTERRUPTS        Y3160000
BSXNTXF  $B    BSXFLPX,,L          EXIT TO FLIP 1                       Y3161000
BSXNTWT  $AXT  BSXOWF3,WA,X        WRITE TIMEOUT OR TIMER CODE          Y3162000
         $MDM  BSXWHAT+D1,0        TEST FOR TIMER FUNCTION              Y3163000
         $B    BSXNTOW             BRANCH IF WRITE TIMEOUT              Y3164000
         $XIO  BSXISPT-D1,,L       START THE PROGRAM TIMER              Y3165000
         $MDM  BSXICNT,-1          DECREMENT AND TEST INTERVAL          Y3166000
         $B    BSXNTXF             BRANCH IF MORE INTERVALS             Y3167000
         $B    BSXNTGO             OR TERMINATE SCA OPERATION           Y3168000
BSXNTOW  $MDM  $ERRSCTT,1          COUNT WRITE TIMEOUTS                 Y3169000
         $B    BSXNTGO             AND TERMINATE SCA OPERATION          Y3170000
*********************************************************************** Y3171000
*              DATA SET NOT READY AT INTERRUPT TIME                   * Y3172000
*********************************************************************** Y3173000
BSXNRDY  $NULL                                                          Y3174000
         $AXT  BSXORF7,WA,X        ASSUME RECEIVE (READ) MODE           Y3175000
         $MDM  BSXIOPT,0           TEST OPERATION MODE                  Y3176000
         $AXT  BSXOWF2,WA,X        TRANSMIT (WRITE) MODE                Y3177000
         $B    BSXNTGO             START EXODUS                         Y3178000
         TITLE 'RTP1130 (COMMUTATOR)'                                   Y3179000
*********************************************************************** Y3180000
*              COMMANDS AND STORAGE FOR CONSOLE KEY INPUT             * Y3181000
*********************************************************************** Y3182000
         $BSS  0,E                                                      Y3183000
CONKREAD $ADCON (CONKDATA)         IOCC TO READ CONSOLE SWITCHES        Y3184000
         DC    AL2($SWITCH+$READ)                                       Y3185000
CONKDATA DC    AL2(*-*)            STORAGE FOR SWITCHES                 Y3186000
SENTKEYS DC    AL2($KEY01)         SYMBOLIC KEY SETTING                 Y3187000
*********************************************************************** Y3188000
*              COMMUTATOR START                                       * Y3189000
*********************************************************************** Y3190000
UNLATCH  $NOP                      INSTRUCTION TO OPEN GATES            Y3191000
SCOMSTRT $NULL                                                          Y3192000
         $XIO  CONKREAD            READ CONSOLE SWITCHES                Y3193000
         $LD   CONKDATA            GET VALUE READ                       Y3194000
         $BSC  P+Z                 SKIP IF KEY 0 OFF                    Y3195000
         $STO  SENTKEYS            SET SYMBOLIC KEYS                    Y3196000
         SPACE 1                                                        Y3197000
*********************************************************************** Y3198000
*              COMMUTATOR DEFINITION FOR SCA I/O PROCESSOR            * Y3199000
*********************************************************************** Y3200000
TPIOXGT  $B    TPIOXEC             COMMUTATOR GATE                      Y3201000
TPIOXWA  $AXT  *-*,WA,L            RESTORE WA                           Y3202000
         $B    TPIOXEP,,L          GO TO ROUTINE ENTRY                  Y3203000
TPIOXRT  $STX  TPIOXWA+D1,WA       SAVE WA                              Y3204000
TPIOXEC  $NULL                     END OF COMMUTATOR ENTRY              Y3205000
         SPACE 3                                                        Y3206000
*********************************************************************** Y3207000
*              COMMUTATOR DEFINITION FOR INPUT BUFFER PROCESSOR       * Y3208000
*********************************************************************** Y3209000
TPGETGT  $B    TPGETEC             COMMUTATOR GATE                      Y3210000
TPGETWA  $AXT  *-*,WA,L            RESTORE WA                           Y3211000
TPGETWC  $AXT  *-*,WC,L            RESTORE WC                           Y3212000
         $B    TPGETEP,,L          GO TO ROUTINE ENTRY                  Y3213000
TPGETRT  $STX  TPGETWA+D1,WA       SAVE WA                              Y3214000
         $STX  TPGETWC+D1,WC       SAVE WC                              Y3215000
TPGETEC  $NULL                     END OF TPGET COMMUTATOR ENTRY        Y3216000
         SPACE 3                                                        Y3217000
*********************************************************************** Y3218000
*              COMMUTATOR DEFINITION FOR OUTPUT BUFFER PROCESSOR      * Y3219000
*********************************************************************** Y3220000
TPPUTGT  $B    TPPUTEC             COMMUTATOR GATE                      Y3221000
TPPUTWA  $AXT  *-*,WA,L            RESTORE WA                           Y3222000
TPPUTWB  $AXT  *-*,WB,L            RESTORE WB                           Y3223000
TPPUTWC  $AXT  *-*,WC,L            RESTORE WC                           Y3224000
         $B    TPPUTEP,,L          GO TO ROUTINE ENTRY                  Y3225000
TPPUTRT  $STX  TPPUTWA+D1,WA       SAVE WA                              Y3226000
         $STX  TPPUTWB+D1,WB       SAVE WB                              Y3227000
         $STX  TPPUTWC+D1,WC       SAVE WC                              Y3228000
TPPUTEC  $NULL                     END OF TPPUT COMMUTATOR ENTRY        Y3229000
         EJECT                                                          Y3230000
         AIF   (&PR1132 EQ 0).NO1132A                                   Y3231000
*********************************************************************** Y3232000
*              COMMUTATOR DEFINITION FOR 1132 PRINTER                 * Y3233000
*********************************************************************** Y3234000
PRETTGT  $B    PRETTEC             COMMUTATOR GATE                      Y3235000
PRETTWA  $AXT  *-*,WA,L            RESTORE WA                           Y3236000
PRETTWB  $AXT  *-*,WB,L            RESTORE WB                           Y3237000
         $B    PRETTEP,,L          GO TO MAIN ROUTINE ENTRY             Y3238000
PRETTRT  $STX  PRETTWA+D1,WA       SAVE WA                              Y3239000
         $STX  PRETTWB+D1,WB       SAVE WB                              Y3240000
PRETTEC  $NULL                     END OF 1132 COMMUTATOR ENTRY         Y3241000
.NO1132A ANOP                                                           Y3242000
         SPACE 3                                                        Y3243000
         AIF   (NOT &XX1442).NO1442A                                    Y3244000
*********************************************************************** Y3245000
*              COMMUTATOR DEFINITION FOR 1442 READ/PUNCH              * Y3246000
*********************************************************************** Y3247000
RPFFTGT  $B    RPFFTEC             COMMUTATOR GATE                      Y3248000
         $B    RPFFTEP,,L          GO TO MAIN ROUTINE                   Y3249000
RPFFTRT  $NULL                     RETURN FROM MAIN ROUTINE             Y3250000
RPFFTEC  $NULL                     END OF 1442 COMMUTATOR ENTRY         Y3251000
.NO1442A ANOP                                                           Y3252000
         SPACE 3                                                        Y3253000
         AIF   (&PR1403 EQ 0).NO1403B                                   Y3254000
*********************************************************************** Y3255000
*              COMMUTATOR DEFINITION FOR 1403 PRINTER                 * Y3256000
*********************************************************************** Y3257000
PRFOTGT  $B    PRFOTEC             COMMUTATOR GATE                      Y3258000
PRFOTWA  $AXT  *-*,WA,L            RESTORE WA                           Y3259000
         $B    PRFOTEP,,L          GO TO MAIN ROUTINE ENTRY             Y3260000
PRFOTRT  $STX  PRFOTWA+D1,WA       SAVE WA                              Y3261000
PRFOTEC  $NULL                     END OF 1403 COMMUTATOR ENTRY         Y3262000
.NO1403B ANOP                                                           Y3263000
         SPACE 3                                                        Y3264000
         EJECT                                                          Y3265000
         AIF   (&RD2501 EQ 0).NO2501A                                   Y3266000
*********************************************************************** Y3267000
*              COMMUTATOR DEFINITION FOR 2501 CARD READER             * Y3268000
*********************************************************************** Y3269000
RDTFOGT  $B    RDTFOEC             COMMUTATOR GATE                      Y3270000
         $B    RDTFOEP,,L          GO TO ROUTINE MAIN ENTRY             Y3271000
RDTFORT  $NULL                     RETURN POINT FROM ROUTINE            Y3272000
RDTFOEC  $NULL                     END OF 2501 COMMUTATOR ENTRY         Y3273000
.NO2501A ANOP                                                           Y3274000
         SPACE 3                                                        Y3275000
*********************************************************************** Y3276000
*              COMMUTATOR DEFINITION FOR CONSOLE KB/PRINTER           * Y3277000
*********************************************************************** Y3278000
CONSLGT  $B    CONSLEC             COMMUTATOR GATE                      Y3279000
CONSLWA  $AXT  *-*,WA,L            RESTORE WA                           Y3280000
         $B    CONSLEP,,L          GO TO MAIN ROUTINE ENTRY             Y3281000
CONSLRT  $STX  CONSLWA+D1,WA       SAVE WA                              Y3282000
CONSLEC  $NULL                     END OF CONSOLE COMMUTATOR ENTRY      Y3283000
         AIF   (NOT &RP1442).NO1442P                                    Y3284000
         SPACE 3                                                        Y3285000
*********************************************************************** Y3286000
*              COMMUTATOR DEFINITION FOR READER/PUNCH CONTROL         * Y3287000
*********************************************************************** Y3288000
RPCNTGT  $B    RPCNTEC             COMMUTATOR GATE                      Y3289000
         $B    RPCNTEP,,L          BRANCH TO MAIN ROUTINE               Y3290000
RPCNTRT  $NULL                     RETURN FROM MAIN ROUTINE             Y3291000
RPCNTEC  $NULL                     END OF COMMUTATOR ENTRY              Y3292000
.NO1442P ANOP                                                           Y3293000
         SPACE 3                                                        Y3294000
SCOMSTOP $B    RTPETIN,,L          CHANGED TO '$B $COMSTRT' BY          Y3295000
*                                  INITIALIZATION PROCESS               Y3296000
         TITLE 'RTP1130 (FIRST LEVEL INTERRUPT PROCESSORS)'             Y3297000
         SPACE 3                                                        Y3298000
*********************************************************************** Y3299000
*              LEVEL 0 - 1442 CARD READ/PUNCH                         * Y3300000
*********************************************************************** Y3301000
         AIF   (NOT &XX1442).NO1442F                                    Y3302000
*********************************************************************** Y3303000
*                                                                     * Y3304000
*              FLIP 0 (FIRST LEVEL INTERRUPT PROCESSOR - LEVEL 0      * Y3305000
*                                                                     * Y3306000
*              SAVES AND RESTORES AC, STATUS ONLY.                    * Y3307000
*              PASSES CONTROL TO 1442 SECOND LEVEL INTERRUPT          * Y3308000
*              PROCESSOR DIRECTLY SINCE NO OTHER DEVICES CAUSE        * Y3309000
*              LEVEL 0 INTERRUPTS.                                    * Y3310000
*                                                                     * Y3311000
*********************************************************************** Y3312000
.NO1442F ANOP                                                           Y3313000
RTPLLVL0 DC    H'0'                ENTRY VIA HARDWARE $BSI 8,,I         Y3314000
         AIF   (NOT &XX1442).NO1442G                                    Y3315000
         $STO  RTPL0SVA            SAVE AC                              Y3316000
         $STS  RTPL0STS            SAVE STATUS                          Y3317000
         $B    RPCOLINT,,L         GO TO COLUMN INTERRUPT ROUTINE       Y3318000
RTPL0SVA DC    H'0'                AC SAVE AREA                         Y3319000
RTPL0RTN $NULL                     RETURN FROM COLUMN INTERRUPT ROUTINE Y3320000
RTPL0STS $LDS  0                   RESTORE STATUS                       Y3321000
         $LD   RTPL0SVA            RESTORE AC                           Y3322000
.NO1442G ANOP                                                           Y3323000
         $BOSC RTPLLVL0,,I         RETURN                               Y3324000
         EJECT                                                          Y3325000
*********************************************************************** Y3326000
*              LEVEL 1 - SCA AND 1132 PRINTER                         * Y3327000
*********************************************************************** Y3328000
RTPLLVL1 DC    H'0'                ENTRY VIA HARDWARE $BSI 9,,I         Y3329000
*********************************************************************** Y3330000
*                                                                     * Y3331000
*              FLIP 1 (FIRST LEVEL INTERRUPT PROCESSOR - LEVEL 1)     * Y3332000
*                                                                     * Y3333000
*              SAVES AND RESTORES AC/EXT AND STATUS.  ADDITIONAL      * Y3334000
*              SAVE/RESTORE PROCEDURES ARE THE RESPONSIBILITY OF      * Y3335000
*              THE INDIVIDUAL SECOND LEVEL INTERRUPT PROCESSORS       * Y3336000
*                                                                     * Y3337000
*              CONTROL IS PASSED TO THE SCA OR 1132 SLIP (IF THE      * Y3338000
*              1132 EXISTS) DEPENDING ON THE ILSW.                    * Y3339000
*                                                                     * Y3340000
*********************************************************************** Y3341000
         $STD  RTPL1SVA            SAVE AC AND EXT                      Y3342000
         $STS  RTPL1STS            AND STATUS                           Y3343000
         AIF   (&PR1132 EQ 0).NO1132E                                   Y3344000
         $XIO  RTPL1SIL-D1         GET ILSW                             Y3345000
         $BN   PRETTINT            BRANCH IF 1132 INTERRUPT             Y3346000
.NO1132E ANOP                                                           Y3347000
         $B    BSCLOINT,,L         BRANCH TO SCA (LOW) SLIP             Y3348000
RTPL1SVA $BSS  2,E                 AC AND EXT SAVE                      Y3349000
         AIF   (&PR1132 EQ 0).NO1132F                                   Y3350000
         DC    AL2(0)              FILLER                               Y3351000
RTPL1SIL DC    AL2($SENSEI)        SENSE ILSW                           Y3352000
.NO1132F ANOP                                                           Y3353000
RTPL1RTN $NULL                     RETURN POINT FROM SLIP               Y3354000
RTPL1STS $LDS  0                   RESTORE STATUS                       Y3355000
         $LDD  RTPL1SVA            AND AC AND EXT                       Y3356000
         $BOSC RTPLLVL1,,I         RETURN                               Y3357000
         SPACE 1                                                        Y3358000
*********************************************************************** Y3359000
*              LEVEL 2 - DISK AND SAC                                 * Y3360000
*********************************************************************** Y3361000
RTPLLVL2 DC    H'0'                ENTRY VIA HARDWARE $BSI 10,,I      * Y3362000
         $BOSC RTPLLVL2,,I         IGNORE LEVEL 2 INTERRUPT             Y3363000
         SPACE 1                                                        Y3364000
*********************************************************************** Y3365000
*              LEVEL 3 - 1627,2250 AND SAC                            * Y3366000
*********************************************************************** Y3367000
RTPLLVL3 DC    H'0'                ENTRY VIA HARDWARE $BSI 11,,I        Y3368000
         $BOSC RTPLLVL3,,I         IGNORE LEVEL 3 INTERRUPT             Y3369000
         EJECT                                                          Y3370000
*********************************************************************** Y3371000
*              LEVEL 4 - 1442,KB PRINTER,1134,1055,2501,1403,1231,SAC * Y3372000
*********************************************************************** Y3373000
*                                                                     * Y3374000
*              FLIP 4 (FIRST LEVEL INTERRUPT PROCESSOR - LEVEL 4)     * Y3375000
*                                                                     * Y3376000
*              SAVES AND RESTORES AC, STATUS AND WA ONLY              * Y3377000
*              DETERMINES INTERRUPTING DEVICE AND PASSES              * Y3378000
*              CONTROL TO THE SLIP DEFINED IN THE ATTACHED            * Y3379000
*              SLIP LIST. NOTE...ADDITIONAL SAVE/RESTORE              * Y3380000
*              PROCESSING IS THE RESPONSIBILITY OF THE SLIP.          * Y3381000
*                                                                     * Y3382000
*********************************************************************** Y3383000
         SPACE 3                                                        Y3384000
RTPLLVL4 DC    H'0'                ENTRY VIA HARDWARE $BSI 12,,I        Y3385000
         $STO  RTPL4SVA            SAVE AC                              Y3386000
         $STS  RTPL4STS            AND STATUS                           Y3387000
         $STX  RTPL4SWA+D1,WA      AND WA                               Y3388000
         $AXT  (RTPL4END-RTPL4SLV)/2,WA,X GET NUMBER OF SLIPS           Y3389000
         $XIO  RTPL4SIL-D1         SENSE ILSW                           Y3390000
         $SLCA 0,WA                SET WA TO INDEX SLIP LIST            Y3391000
         $B    RTPL4SLV-D1,WA,I    GO TO PROPER SLIP                    Y3392000
RTPL4RTN $NULL                     RETURN POINT FROM SLIP               Y3393000
RTPL4STS $LDS  0                   RESTORE STATUS                       Y3394000
         $LD   RTPL4SVA            AND AC                               Y3395000
RTPL4SWA $AXT  *-*,WA,L            AND WA                               Y3396000
         $BOSC RTPLLVL4,,I         RETURN                               Y3397000
*********************************************************************** Y3398000
*              FLIP 4 SAVE AREA AND COMMANDS                          * Y3399000
*********************************************************************** Y3400000
         $BSS  0,E                 EVEN STORAGE ASSIGNMENT              Y3401000
RTPL4SVA $BSS  1                   AC SAVE                              Y3402000
RTPL4SIL DC    AL2($SENSEI)        SENSE ILSW COMMAND                   Y3403000
*********************************************************************** Y3404000
*              SECOND LEVEL INTERRUPT PROCESSOR (SLIP) LIST           * Y3405000
*********************************************************************** Y3406000
         AIF   (&RD2501 NE 0).NO2501C                                   Y3407000
RDTFOINT EQU   RTPL4RTN                                                 Y3408000
.NO2501C ANOP                                                           Y3409000
         AIF   (&XX1442 EQ 1).NO1442J                                   Y3410000
RPFFTINT EQU   RTPL4RTN                                                 Y3411000
.NO1442J ANOP                                                           Y3412000
RTPL4SLV $NULL                     START OF SLIP LIST                   Y3413000
         $ADCON RTPL4RTN           1231 OMPR SLIP ADDRESS               Y3414000
         AIF   (&PR1403 EQ 0).NO14O3A                                   Y3415000
         $ADCON (PRFOTINT)         1403 PRINTER SLIP ADDRESS            Y3416000
         AGO   .NO14O3B                                                 Y3417000
.NO14O3A ANOP                                                           Y3418000
         $ADCON (RTPL4RTN)         FILLER FOR 1403 SLIP                 Y3419000
.NO14O3B ANOP                                                           Y3420000
         AIF   (&RD2501 EQ 0).NO25O1A                                   Y3421000
         $ADCON (RDTFOINT)         2501 SLIP ADDRESS                    Y3422000
         AGO   .NO25O1B                                                 Y3423000
.NO25O1A ANOP                                                           Y3424000
         $ADCON (RTPL4RTN)         FILLER FOR 2501 SLIP                 Y3425000
.NO25O1B ANOP                                                           Y3426000
         AIF   (NOT &XX1442).NT1442A                                    Y3427000
         $ADCON (RPFFTINT)         1442 SLIP ADDRESS                    Y3428000
         AGO   .NT1442B                                                 Y3429000
.NT1442A ANOP                                                           Y3430000
         $ADCON (RTPL4RTN)         FILLER FOR 1442 SLIP                 Y3431000
.NT1442B ANOP                                                           Y3432000
         $ADCON CONSLINT           CONSOLE SLIP ADDRESS                 Y3433000
         $ADCON RTPL4RTN           1134 PTR, 1055 PTP SLIP ADDRESS      Y3434000
RTPL4END $NULL                     END OF SLIP LIST                     Y3435000
         EJECT                                                          Y3436000
*********************************************************************** Y3437000
*              LEVEL 5 - CONSOLE STOP AND SAC                         * Y3438000
*********************************************************************** Y3439000
RTPLLVL5 DC    H'0'                ENTRY VIA HARDWARE $BSI 13,,I        Y3440000
         $TSL  $WAIT               GO TO COMMON WAIT ROUTINE            Y3441000
         $BOSC RTPLLVL5,,I         RETURN                               Y3442000
         TITLE 'RTP1130 (TPIOX-SCA I/O BUFFER PROCESSOR)'               Y3443000
*********************************************************************** Y3444000
*                                                                     * Y3445000
* TITLE - TPIOX (SCA READ/WRITE COMMUTATOR CONTROL PROCESSOR)         * Y3446000
*                                                                     * Y3447000
* FUNCTION/PURPOSE                                                    * Y3448000
*                                                                     * Y3449000
*  CONTROLS THE TRANSMISSION OF DATA AND/OR CONTROL INFORMATION       * Y3450000
*  BETWEEN HASP AND RTP1130 VIA THE SYNCHRONOUS COMMUNICATIONS        * Y3451000
*  ADAPTER. ALL I/O IS INITIATED THRU AND PROCESSED BY THE SCA        * Y3452000
*  SUBROUTINE BSXIOS.                                                 * Y3453000
*                                                                     * Y3454000
*********************************************************************** Y3455000
         SPACE 3                                                        Y3456000
*********************************************************************** Y3457000
*              TRANSFER VECTOR TABLE FOR SCA READ COMPLETION CODES    * Y3458000
*********************************************************************** Y3459000
TPIOXRV  $NULL                     TABLE REFERENCE POINT    CODE        Y3460000
         $ADCON (TPIOXRT)          READ NOT COMPLETED         00        Y3461000
         $ADCON (TPIONRC)          NORMAL READ COMPLETE       01        Y3462000
         $ADCON (TPIONAK)          ABNORMAL READ COMPLETE     02        Y3463000
         $ADCON (TPIORTO)          RECEIVE TIMEOUT (INITIAL)  03        Y3464000
         $ADCON (TPIORTO)          RECEIVE TIMEOUT (DATA)     04        Y3465000
         $ADCON (TPIONAK)          BCC COMPARE ERROR          05        Y3466000
         $ADCON (TPIONAK)          DATA OVERRUN               06        Y3467000
         $ADCON (TPIORNR)          DATA SET NOT READY         07        Y3468000
         $ADCON (TPIONAK)          HEADER ERROR               08        Y3469000
         $ADCON (TPIOXDT)          NAK RECEIVED               09        Y3470000
         $ADCON (TPIOIWB)          ACKO RECEIVED              10        Y3471000
         $ADCON (TPIONAK)          SINGLE DLE RECEIVED        11        Y3472000
         $ADCON (TPIONAK)          ENQ RECEIVED               12        Y3473000
         $ADCON (TPIONAK)          PAD ERROR                  13        Y3474000
*********************************************************************** Y3475000
*              TRANSFER VECTOR TABLE FOR WRITE COMPLETION CODES       * Y3476000
*********************************************************************** Y3477000
TPIOXWV  $NULL                     TABLE REFERENCE POINT    CODE        Y3478000
         $ADCON (TPIOXRT)          WRITE NOT COMPLETE         00        Y3479000
         $ADCON (TPIOLOG)          NORMAL WRITE COMPLETE      01        Y3480000
         $ADCON (TPIOWNR)          DATA SET NOT READY         02        Y3481000
         $ADCON (TPIOWND)          TIMEOUT ON WRITE           03        Y3482000
         EJECT                                                          Y3483000
*********************************************************************** Y3484000
*              HASP WAIT-A-BIT REQUEST                                * Y3485000
*********************************************************************** Y3486000
TPIOHWA  $NULL                                                          Y3487000
         $LD   TPBUFFQP,,L         GET TP BUFFER FREE QUEUE POINTER     Y3488000
         $BZ   TPIONOB             GO SET RTP1130 WAIT-A-BIT IF NONE    Y3489000
         $B    TPIOCHG              OR HANDSHAKE WITH NULL BUFFER       Y3490000
         SPACE 3                                                        Y3491000
*********************************************************************** Y3492000
*              LOCAL CONSTANTS,STORAGE, ETC.                          * Y3493000
*********************************************************************** Y3494000
TPIOTBF  DC    AL2(&DELAY)                                              Y3495000
         DC    AL2($BSXTMR)        PROGRAM TIMER INDICATOR              Y3496000
TPIOTOC  DC    AL2(BSXOWF3)        TIMER COMPLETION CODE                Y3497000
TPIOAK0  DC    AL2($BSXTAK)        TRANSMIT ACK0 INDICATOR              Y3498000
TPIORWB  $ADCON (TPIORWB)          DUMMY BUFFER POINTER                 Y3499000
         DC    AL2(0)              DUMMY STATUS                         Y3500000
TPIODXC  DC    AL2(*-*)            TRANSMIT COUNT WORD                  Y3501000
TPIODHD  DC    AL2(*-*)            HEADER                               Y3502000
         DC    AL2(0,0,0)          SPACE FOR BCB,FCS,RCB AND RESPONSE   Y3503000
TPIODMO  DC    AL2(6)              INITIALIZATION VALUE FOR WAIT-A-BIT  Y3504000
TPIOTMT  DC    AL2($BSXTNT)         SEQUENCE VIA DUMMY BUFFER           Y3505000
TPIOWBX  DC    AL2(X'4000')        WAIT-A-BIT BIT                       Y3506000
         EJECT                                                          Y3507000
*********************************************************************** Y3508000
*              PROCEDURE FOR NO OUTPUT BUFFER READY                   * Y3509000
*********************************************************************** Y3510000
TPIOSTM  $NULL                                                          Y3511000
         $AXT  (TPIOTBF-2*D1),WA,L DUMMY BUFFER POINTER TO WA           Y3512000
         $TSL  BSXIOS              START PROGRAM TIMER                  Y3513000
         $B    TPIOTDX             DATA SET NOT READY EXIT              Y3514000
         $STL  TPIOXVE+D1          RESET VARIABLE ENTRY                 Y3515000
         $DEQUE TPBUFOQP           TRY FOR AN OUTPUT BUFFER             Y3516000
         $BZ   TPIOTRF             BRANCH IF NONE READY                 Y3517000
TPIONIT  $STO  TPIOWBP             SET WRITE BUFFER POINTER             Y3518000
         $TSL  BSXHALT             STOP SCA TIMER                       Y3519000
         $B    TPIORXW,,L          GO INITIATE DATA WRITE               Y3520000
TPIOTRF  $LD   TPBUFFQP,,L         TEST FOR FREE TP BUFFER              Y3521000
         $BZ   TPIONOB             BRANCH IF NONE AVAILABLE             Y3522000
         $LD   SFCSXMT             GET CURRENT TRANSMIT FCS             Y3523000
         $EOR  SFCSPRV             COMPARE WITH PREVIOUS                Y3524000
         $BNZ  TPIOCHG             BRANCH IF ACTION REQUIRED            Y3525000
         $LD   TPIOLSR,,L          TEST LAST RESPONSE FROM HASP         Y3526000
         $BNZ  TPIOZAP             DELAY ONLY IF ACK0                   Y3527000
         $LD   BSXOPFW,,L          GET COMPLETION CODE                  Y3528000
         $BZ   TPIOXRT             EXIT IF TIMER NOT DONE               Y3529000
         $S    TPIOTOC             TEST FOR NORMAL COMPLETION           Y3530000
         $BZ   TPIOTUP             BRANCH IF NORMAL COMPLETION          Y3531000
*********************************************************************** Y3532000
*              DATA SET NOT READY ON TIMER OPERATION                  * Y3533000
*********************************************************************** Y3534000
TPIOTDX  $TSL  TPIODSM             TELL OPERATOR DATA SET NOT READY     Y3535000
         $B    TPIOSTM             TRY AGAIN WHEN READY                 Y3536000
*********************************************************************** Y3537000
*              INITIATE ACK0 RESPONSE TO HASP                         * Y3538000
*********************************************************************** Y3539000
TPIOTUP  $DEQUE TPBUFFQP           GET AVAILABLE FREE BUFFER            Y3540000
         $STO  TPIOWBP             STORE BUFFER POINTER                 Y3541000
         $LXA  TPIOWBP,WA           AND SET WA                          Y3542000
         $LD   TPIOAK0             GET ACK0 SEQUENCE INDICATOR          Y3543000
         $STO  TPBUFHD,WA,X         STORE IN BUFFER                     Y3544000
         $LD   SFCSXMT             RESET                                Y3545000
         $AND  TPIOWBR              RTP1130                             Y3546000
         $STO  SFCSXMT               WAIT-A-BIT                         Y3547000
         $B    TPIOWPO             GO INITIATE ACK0 WRITE               Y3548000
*********************************************************************** Y3549000
*              RTP1130 WAIT-A-BIT TIME                                * Y3550000
*********************************************************************** Y3551000
TPIONOB  $LD   SFCSXMT             TURN ON                              Y3552000
         $OR   TPIOWBX              RTP1130                             Y3553000
         $STO  SFCSXMT               WAIT-A-BIT                         Y3554000
         $LD   TPIORWB             DUMMY BUFFER POINTER                 Y3555000
         $STO  TPIOWBP              FOR WAIT-A-BIT WRITE                Y3556000
         $LD   TPIODMO             INITIALIZE                           Y3557000
         $STO  TPIODXC              DUMMY                               Y3558000
         $LD   TPIOTMT               BUFFER                             Y3559000
         $STO  TPIODHD                VALUES                            Y3560000
TPIOSTT  $TSL  BSXHALT             STOP PROGRAM TIMER                   Y3561000
         $B    TPIOSBO,,L          GO INITIATE WRITE                    Y3562000
*********************************************************************** Y3563000
*              FCS CHANGED ... TELL HASP WITH NULL BUFFER             * Y3564000
*********************************************************************** Y3565000
TPIOCHG  $LD   SFCSXMT             SET 'PREVIOUS' FCS TO                Y3566000
         $STO  SFCSPRV              CURRENT VALUE                       Y3567000
TPIOZAP  $DEQUE TPBUFFQP           GET AVAILABLE FREE TP BUFFER         Y3568000
         $STO  TPIOWBP             STORE POINTER FOR WRITE              Y3569000
         $LXA  TPIOWBP,WA           AND SET WA                          Y3570000
         $LD   TPIODMO             INITIALIZE                           Y3571000
         $STO  TPBUFCB,WA,X         BUFFER                              Y3572000
         $LD   TPIOTMT               FOR                                Y3573000
         $STO  TPBUFHD,WA,X           NULL                              Y3574000
         $ZAC                          DATA                             Y3575000
         $STO  TPBUFFR,WA,X             TRANSMISSION                    Y3576000
         $B    TPIOSTT             GO WRITE NULL BUFFER                 Y3577000
         EJECT                                                          Y3578000
*********************************************************************** Y3579000
*              ENTRY POINT FROM COMMUTATOR                            * Y3580000
*********************************************************************** Y3581000
TPIOXEP  $NULL                                                          Y3582000
TPIOXVE  $B    TPIOXNI,,L          VARIABLE ENTRY VECTOR                Y3583000
TPIOXNP  $B    TPIOXRT,,L          NON-PROCESS EXIT POINT               Y3584000
TPIOXNI  $NULL                     INITIAL ENTRY POINT                  Y3585000
*********************************************************************** Y3586000
*              TPIOX WRITE (TRANSMIT) BUFFER PROCESSOR                * Y3587000
*********************************************************************** Y3588000
TPIOWRS  $LXA  TPIOWBP,WA          WRITE BUFFER POINTER                 Y3589000
TPIOWPO  $LD   TPBUFHD,WA,X        GET SEQUENCE INDICATOR               Y3590000
         $EOR  TPIOACN             TEST FOR ACK0 SEQUENCE               Y3591000
         $BZ   TPIOSVG             BYPASS SETTING BCB/FCS IF ACK0       Y3592000
*********************************************************************** Y3593000
*              SET BCB AND FCS ON NORMAL WRITE                        * Y3594000
*********************************************************************** Y3595000
         $LD   SBCBXMT             GET TRANSMIT BCB                     Y3596000
         $SLA  8                   TO HIGH ORDER AC                     Y3597000
         $OR   TPIOXHO             SET HIGH ORDER BIT ON                Y3598000
         $STO  TPBUFBF,WA,X        STORE BCB IN BUFFER                  Y3599000
TPIONXB  $LD   SFCSXMT             GET TRANSMIT FCS                     Y3600000
         $SRA  8                   FIRST HALF-FCS(1)                    Y3601000
         $OR   TPBUFBF,WA,X        FORM BCB/FCS(1)                      Y3602000
         $STO  TPBUFBF,WA,X        STORE IN BUFFER                      Y3603000
         $LD   TPBUFFR,WA,X        GET FCS(2) SLOT AND RCB              Y3604000
         $SRT  8                   MOVE RCB TO EXT                      Y3605000
         $LD   SFCSXMT             GET TRANSMIT FCS                     Y3606000
         $SLT  8                   FORM FCS(2)/RCB                      Y3607000
         $STO  TPBUFFR,WA,X        STORE IN BUFFER                      Y3608000
*********************************************************************** Y3609000
*              SAVE SEQUENCE AND TRANSMIT COUNT                       * Y3610000
*********************************************************************** Y3611000
TPIOSVG  $LD   TPBUFCB,WA,X        GET TRANSMIT COUNT                   Y3612000
         $STO  TPIOWXX             SAVE IN CASE OF NAK                  Y3613000
         $LD   TPBUFHD,WA,X        GET SEQUENCE INDICATOR               Y3614000
         $STO  TPIOWHD             SAVE IN CASE OF NAK                  Y3615000
         $LD   TPBUFBF,WA,X        GET BCB AND FCS1                     Y3616000
         $STO  TPIOWBF             SAVE IN CASE OF NAK                  Y3617000
*********************************************************************** Y3618000
*              INITIATE WRITE OPERATION                               * Y3619000
*********************************************************************** Y3620000
TPIOWND  $TSL  BSXIOS              INITIATE WRITE THRU BSXIOS           Y3621000
         $B    TPIOWNR             DATA SET NOT READY EXIT              Y3622000
         $STL  TPIOXVE+D1          RESET VARIABLE ENTRY                 Y3623000
         $LXA  BSXOPFW,WB          COMPLETION CODE TO WB                Y3624000
         $B    TPIOXWV,WB,I        BRANCH TO INDICATED PROCESS          Y3625000
*********************************************************************** Y3626000
*              DATA SET NOT READY ON WRITE OPERATION                  * Y3627000
*********************************************************************** Y3628000
TPIOWNR  $TSL  TPIODSM             TELL OPERATOR DS NOT READY           Y3629000
         $B    TPIOWND             INITIATE WRITE WHEN READY            Y3630000
         EJECT                                                          Y3631000
*********************************************************************** Y3632000
*              TPIOX CONSTANTS,STORAGE,FLAGS,ETC.                     * Y3633000
*********************************************************************** Y3634000
TPIOWBF  DC    AL2(*-*)            LAST BCB AND FCS1                    Y3635000
TPIOWXX  DC    AL2(*-*)            LAST DATA WRITE COUNT                Y3636000
TPIOACN  DC    AL2($BSXTAK)        ACK0 SEQUENCE INDICATOR              Y3637000
TPIOWHD  DC    AL2(*-*)            LAST DATA WRITE HEADER               Y3638000
TPIOXHO  DC    AL2(X'8000')        HIGH ORDER BIT FOR CONTROL           Y3639000
TPIOWBP  DC    AL2(*-*)            TRANSMIT BUFFER ADDRESS              Y3640000
TPIOWBR  DC    AL2(X'BFFF')        RESET WAIT-A-BIT BIT                 Y3641000
TPIORMX  DC    AL2(&TPBFSZE)       MAXIMUM READ COUNT                   Y3642000
TPIORMN  DC    AL2(8)              MINIMUM READ COUNT                   Y3643000
TPIORRQ  DC    AL2($BSXRDX)        READ SEQUENCE INDICATOR              Y3644000
*                                                                       Y3645000
SFCSREC  DC    AL2(*-*)            LAST FCS RECEIVED                    Y3646000
SFCSXMT  DC    AL1(X'8F',X'CF')    LAST FCS TRANSMITTED                 Y3647000
SFCSPRV  DC    AL1(X'8F',X'CF')    PREVIOUS FCS TRANSMITTED             Y3648000
SBCBREC  DC    AL2(*-*)            BCB EXPECTED FROM HASP               Y3649000
SBCBXMT  DC    AL2(*-*)            BCB TRANSMITTED TO HASP              Y3650000
         EJECT                                                          Y3651000
*********************************************************************** Y3652000
*              READ PROCESS ENTERED FROM BSXIOS WRITE APPENDAGE       * Y3653000
*********************************************************************** Y3654000
TPIORDS  DC    AL2(*-*)            ENTERED AT INTERRUPT TIME            Y3655000
         $LD   BSXWHAT+D1,,L       EXCLUDE TIMER FUNCTION               Y3656000
         $BZ   TPIORDS,,I           FROM APPENDAGE PROCESSING           Y3657000
         $MDX  -BSXOWF1,WA,X       TEST WRITE COMPLETION CODE           Y3658000
         $B    TPIOXRX             USE COMMUTATOR IF ABNORMAL           Y3659000
         $LXA  BSXISVA+D1,WA       GET BUFFER ADDRESS FROM BSXIOS       Y3660000
         $LD   SFCSXMT             TRANSMIT FCS                         Y3661000
         $AND  TPIOWBM             ISOLATE WAIT-A-BIT                   Y3662000
         $BZ   TPIORNO             BRANCH IF OFF                        Y3663000
         $LD   TPIORMN             MINIMUM READ COUNT                   Y3664000
         $B    TPIORSC             GO STORE IN BUFFER                   Y3665000
TPIORNO  $LD   TPIORMX             MAXIMUM READ COUNT                   Y3666000
TPIORSC  $STO  TPBUFCB,WA,X        STORE IN BUFFER                      Y3667000
         $LD   TPIORRQ             SET READ SEQUENCE INDICATOR          Y3668000
         $STO  TPBUFHD,WA,X         IN BUFFER HEADER                    Y3669000
TPIORIP  $TSL  BSXIOS              INITIATE READ AT WRITE END-OP        Y3670000
         $B    TPIORIP             PERSIST IF DATA SET NOT READY        Y3671000
TPIOXRX  $B    TPIORDS,,I          RETURN TO BSXIOS INTERRUPT RTN       Y3672000
*********************************************************************** Y3673000
*              DATA SET NOT READY ON READ OPERATION                   * Y3674000
*********************************************************************** Y3675000
TPIORNR  $TSL  TPIODSM             TELL OPERATOR DS NOT READY           Y3676000
*                                  SEND NAK WHEN DS READY               Y3677000
*********************************************************************** Y3678000
*              SETUP AND TRANSMIT NAK TO HASP                         * Y3679000
*********************************************************************** Y3680000
TPIONAK  $LD   TPIONCN             NAK INDICATOR                        Y3681000
         $STO  TPBUFHD,WA,X        TO BUFFER                            Y3682000
         $B    TPIOWND             GO WRITE NAK                         Y3683000
TPIONCN  DC    AL2($BSXTNK)        NAK INDICATOR                        Y3684000
*********************************************************************** Y3685000
*              NAK FROM HASP...RE-TRANSMIT LAST NON-NAK               * Y3686000
*********************************************************************** Y3687000
TPIOXDT  $LD   TPIOWXX             LAST DATA WRITE COUNT                Y3688000
         $STO  TPBUFCB,WA,X        TO BUFFER                            Y3689000
         $LD   TPIOWHD             LAST DATA SEQUENCE INDICATOR         Y3690000
         $STO  TPBUFHD,WA,X        TO BUFFER                            Y3691000
         $LD   TPIOWBF             LAST BCB AND FCS1                    Y3692000
         $STO  TPBUFBF,WA,X        TO BUFFER                            Y3693000
         $B    TPIOWND             INITIATE WRITE                       Y3694000
*********************************************************************** Y3695000
*              ACK0 FROM HASP...RESET WAIT-A-BIT                      * Y3696000
*********************************************************************** Y3697000
TPIOIWB  $STO  TPIOLSR             RUN UP ACK0 FLAG                     Y3698000
         $LD   SFCSREC             RESET                                Y3699000
         $AND  TPIOWBR              HASP                                Y3700000
         $STO  SFCSREC               WAIT-A-BIT                         Y3701000
         $B    TPIOTBT             GO TEST BUFFER TYPE                  Y3702000
         EJECT                                                          Y3703000
*********************************************************************** Y3704000
*              NORMAL READ COMPLETE PROCESSOR                         * Y3705000
*********************************************************************** Y3706000
TPIONRC  $NULL                                                          Y3707000
         $LD   TPBUFBF,WA,X        GET RECEIVED BCB/FCS(1)              Y3708000
         $SRT  15                  TO EXT (EXCEPT SIGN)                 Y3709000
         $ZAC                      CLEAR AC                             Y3710000
         $SLT  3                   ISOLATE BCB CONTROL BITS             Y3711000
         $STO  TPIOBCI             SAVE FOR INVESTIGATION               Y3712000
         $SRA  3                   CLEAR AC                             Y3713000
         $SLT  4                   GET ACTUAL BCB COUNT                 Y3714000
         $STO  TPIORBC             SAVE FOR COMPARE                     Y3715000
         $RTE  16                  FCS(1) TO HIGH ORDER AC              Y3716000
         $STO  TPIORFC             FORM FCS (FIRST BYTE)                Y3717000
         $LD   TPBUFFR,WA,X        GET FCS(2) AND RCB                   Y3718000
         $SRA  8                   FORM                                 Y3719000
         $OR   TPIORFC              COMPLETE                            Y3720000
         $STO  TPIORFC               FCS                                Y3721000
*********************************************************************** Y3722000
*              TEST BCB CONTROL BITS                                  * Y3723000
*********************************************************************** Y3724000
         $LD   TPIOBCI             GET BCB CONTROL BITS                 Y3725000
         $BZ   TPIOVRB             BRANCH IF VERIFICATION               Y3726000
         $BOD  TPIOBDN             BRANCH IF NO VERIFICATION            Y3727000
*********************************************************************** Y3728000
*              RESET EXPECTED BCB TO VALUE OF RECEIVED                * Y3729000
*********************************************************************** Y3730000
         $LD   TPIORBC             GET RECEIVED BCB                     Y3731000
         $STO  SBCBREC             SET EXPECTED BCB ALA HASP            Y3732000
         $B    TPIOBDN             BYPASS FURTHER PROCESSING            Y3733000
*********************************************************************** Y3734000
*              MORE CONSTANTS,STORAGE,ETC.                            * Y3735000
*********************************************************************** Y3736000
TPIORBC  DC    AL2(*-*)            BCB RECEIVED                         Y3737000
TPIORFC  DC    AL2(*-*)            FCS RECEIVED                         Y3738000
TPIOBCI  DC    AL2(*-*)            BCB CONTROL BITS                     Y3739000
TPIODIG  DC    AL2(16)             OVERFLOW CORRECTION                  Y3740000
TPIOMXE  DC    AL2(2)              MAXIMUM BCB ERROR                    Y3741000
TPIOMOD  DC    AL2(15)             MODULO 16 MASK                       Y3742000
TPIOCNO  DC    AL2(1)              CONSTANT 1                           Y3743000
TPIOWBM  DC    AL2(X'4000')        WAIT-A-BIT BIT                       Y3744000
TPIOLHM  DC    AL2(X'00FF')        LEFT HALF MASK                       Y3745000
         EJECT                                                          Y3746000
*********************************************************************** Y3747000
*              VERIFY RECEIVED BCB                                    * Y3748000
*********************************************************************** Y3749000
TPIOVRB  $LD   SBCBREC             GET EXPECTED BCB                     Y3750000
         $S    TPIORBC             MINUS RECEIVED                       Y3751000
         $BZ   TPIOSTP             BRANCH IF NO ERROR                   Y3752000
         $SKPP                     SKIP IF NO OVERFLOW                  Y3753000
         $A    TPIODIG             OR CORRECT OVERFLOW                  Y3754000
         $S    TPIOMXE             COMPARE WITH MAXIMUM ERROR           Y3755000
         $BP   TPIOBER             BRANCH IF MISSING DATA               Y3756000
*********************************************************************** Y3757000
*              DUPLICATE RECORD PROCESSING                            * Y3758000
*********************************************************************** Y3759000
TPIOTBT  $LD   TPBUFCW,WA,X        GET BUFFER CHAIN WORD                Y3760000
         $BNZ  TPIOTHW             BRANCH IF DUMMY BUFFER               Y3761000
TPIORTN  $LD   TPIOWBP,,L          GET BUFFER POINTER                   Y3762000
         $QFREL TPBUFFQP           RETURN TO FREE CHAIN                 Y3763000
         $B    TPIOTHW             TEST HASP WAIT-A-BIT                 Y3764000
*********************************************************************** Y3765000
*              STEP EXPECTED BCB COUNT                                * Y3766000
*********************************************************************** Y3767000
TPIOSTP  $LD   SBCBREC,,L          GET EXPECTED BCB                     Y3768000
         $A    TPIOCNO             INCREASE BY ONE                      Y3769000
         $AND  TPIOMOD             MODULO 16                            Y3770000
         $STO  SBCBREC,,L          RESET EXPECTED BCB                   Y3771000
*********************************************************************** Y3772000
*              STORE RECEIVED FCS AND QUEUE BUFFER                    * Y3773000
*********************************************************************** Y3774000
TPIOBDN  $LD   TPIORFC             SET RECEIVE FCS                      Y3775000
         $STO  SFCSREC,,L          TO CURRENT VALUE                     Y3776000
         $LD   TPBUFCW,WA,X        GET CHAIN WORD                       Y3777000
         $BNZ  TPIOTHW             BRANCH IF DUMMY BUFFER               Y3778000
         $LD   TPBUFFR,WA,X        GET RCB FROM BUFFER                  Y3779000
         $AND  TPIOLHM             TEST FOR RCB = 0                     Y3780000
         $BZ   TPIORTN             BRANCH IF NULL RECORD                Y3781000
         $TSL  SSRCHCB             FIND MATCHING UFCB                   Y3782000
         $BNZ  TPIOCRC             CHECK FOR CONTROL RECORD IF NO MATCH Y3783000
         $LD   UFCBBFC,WC,X        INCREMENT                            Y3784000
         $A    TPIOCNO              FUNCTION                            Y3785000
         $STO  UFCBBFC,WC,X          COUNT                              Y3786000
         $S    UFCBBFL,WC,X        TEST FOR BUFFER LIMIT                Y3787000
         $BNZ  TPIOQAC             BRANCH IF LIMIT NOT REACHED          Y3788000
         $S    TPIOCNO             CALCULATE                            Y3789000
         $S    UFCBFCS,WC,X         SUSPENSION                          Y3790000
         $STO  TPIOTSV               MASK                               Y3791000
         $LD   SFCSXMT                AND                               Y3792000
         $AND  TPIOTSV                 SUSPEND                          Y3793000
         $STO  SFCSXMT                  FUNCTION                        Y3794000
TPIOQAC  $MDX  UFCBBFP,WC,X        SET WC TO BUFFER QUEUE POINTER       Y3795000
         $LD   TPIOWBP,,L          GET BUFFER POINTER                   Y3796000
         $QACTL ,                  QUEUE FOR TPGET                      Y3797000
         EJECT                                                          Y3798000
*********************************************************************** Y3799000
*              TEST HASP WAIT-A-BIT CONDITION                         * Y3800000
*********************************************************************** Y3801000
TPIOTHW  $LD   SFCSREC,,L          GET RECEIVED FCS                     Y3802000
         $AND  TPIOWBM             ISOLATE WAIT-A-BIT                   Y3803000
         $BNZ  TPIOHWA             BRANCH IF ON                         Y3804000
*********************************************************************** Y3805000
*              PREPARE FOR TRANSMISSION TO HASP                       * Y3806000
*********************************************************************** Y3807000
TPIODQO  $DEQUE TPBUFOQP           TRY FOR AN OUTPUT BUFFER             Y3808000
         $BZ   TPIOSTM             BRANCH IF NO BUFFER READY            Y3809000
         $STO  TPIOWBP,,L          SET BUFFER POINTER                   Y3810000
TPIORXW  $LD   SFCSXMT,,L          GET TRANSMIT FCS                     Y3811000
         $AND  TPIOWBR,,L          RESET WAIT-A-BIT                     Y3812000
         $STO  SFCSXMT,,L          ON GENERAL PRINCIPLES                Y3813000
         $STO  SFCSPRV,,L          RESET PREVIOUS FOR NEXT TRIP         Y3814000
         $LD   SPUTBFCT            DECREMENT PUT                        Y3815000
         $S    TPIOCNO              ACTIVE BUFFER                       Y3816000
         $STO  SPUTBFCT              COUNT FOR TPPUT                    Y3817000
TPIOSBO  $LD   SBCBXMT,,L          CALCULATE                            Y3818000
         $A    TPIOCNO              AND                                 Y3819000
         $AND  TPIOMOD               SET                                Y3820000
         $STO  SBCBXMT,,L             BCB                               Y3821000
         $B    TPIOWRS,,L          INITITATE WRITE                      Y3822000
TPIOLSR  DC    AL2(*-*)            SET TO ZERO IF ACK0 RECEIVED         Y3823000
*********************************************************************** Y3824000
*              CHECK FOR CONTROL RECORD BUFFER                        * Y3825000
*********************************************************************** Y3826000
TPIOCRC  $NULL                                                          Y3827000
         $AND  TPIOCRM             TEST RCB FOR CONTROL RECORD          Y3828000
         $BNZ  TPIORTN             IGNORE BUFFER IF UNKNOWN TYPE        Y3829000
         $LD   TPBUFSR,WA,X        GET CONTROL RECORD SRCB/SCB          Y3830000
         $RTE  16                  TO EXT                               Y3831000
         $LD   TPBUFFR,WA,X        GET CONTROL RECORD FCS(2)/RCB        Y3832000
         $SLT  8                   FORM RCB/SRCB                        Y3833000
         $STO  TPIOTSV             SAVE IT                              Y3834000
         $EOR  TPIODIS             TEST FOR 'DISCONNECT' CON REC        Y3835000
         $BZ   TPIOHLT             BRANCH IF DISCONNECT TIME            Y3836000
         $STL  TPIOXVE+D1,L        RESET VARIABLE ENTRY POINT           Y3837000
         $LD   SHCRQUE             GET HASP CONTROL RECORD QUEUE        Y3838000
         $BNZ  TPIOXRT             EXIT UNTIL PREVIOUS ENTRY PROCESSED  Y3839000
         $LD   TPIOTSV             GET RCB/SRCB                         Y3840000
         $STO  SHCRQUE             TO CONTROL RECORD QUEUE              Y3841000
         $B    TPIORTN             RETURN BUFFER TO FREE CHAIN          Y3842000
TPIOCRM  DC    AL2(X'000F')        CONTROL RECORD RCB MASK              Y3843000
TPIOTSV  DC    AL2(*-*)            SAVE AREA FOR RCB/SRCB               Y3844000
SHCRQUE  DC    AL2(*-*)            HASP CONTROL RECORD QUEUE            Y3845000
SPUTBFCT DC    AL2(*-*)            ACTIVE BUFFER COUNT (INPUT)          Y3846000
TPIODIS  DC    AL2(X'F0C2')        DISCONNECT CR (RCB/SRCB)             Y3847000
         EJECT                                                          Y3848000
*********************************************************************** Y3849000
*              DISASTROUS BCB ERROR PROCESSING                        * Y3850000
*********************************************************************** Y3851000
TPIOBER  $STL  TPIOXVE+D1,L        RESET VARIABLE ENTRY                 Y3852000
         $LD   SBCBREC,,L          GET EXPECTED BCB                     Y3853000
         $RTE  16                  TO EXT                               Y3854000
         $SLT  8                   CLEAR LOW ORDER BYTE                 Y3855000
         $LD   TPIOLEC             GET BCB ERROR CODE                   Y3856000
         $OR   TPIORBC,,L          COMBINE WITH BCB RECEIVED            Y3857000
         $TSL  SLOGSCA             GO LOG ERROR MESSAGE                 Y3858000
         $BZ   TPIOXRT             EXIT UNTIL MESSAGE ACCEPED           Y3859000
         $LD   TPIODBC             SET WRITE COUNT FOR                  Y3860000
         $STO  TPBUFCB,WA,X        DISASTROUS BCB CONTROL RECORD        Y3861000
         $LD   TPIODHX             SET HEADER FOR                       Y3862000
         $STO  TPBUFHD,WA,X        NORMAL TEXT WRITE                    Y3863000
         $LD   TPIORBC,,L          GET RECEIVED BCB                     Y3864000
         $SLA  8                   TO HIGH ORDER AC                     Y3865000
         $OR   TPIODRB             FORM FUNNY BCB                       Y3866000
         $STO  TPBUFBF,WA,X        FOR HASP TO PONDER                   Y3867000
         $LD   TPIODRC             GET RECORD TYPE                      Y3868000
         $STO  TPBUFFR,WA,X        TO BUFFER                            Y3869000
         $LD   SBCBREC,,L          GET EXPECTED BCB                     Y3870000
         $SLA  8                   TO HIGH ORDER AC                     Y3871000
         $OR   TPIODEB             FORM SRCB,SCB=0                      Y3872000
         $STO  TPBUFSR,WA,X        TO BUFFER                            Y3873000
         $ZAC                      CLEAR AC AND                         Y3874000
         $STO  TPBUFSR+1,WA,X      SET END OF BLOCK                     Y3875000
         $B    TPIONXB,,L          SET FCS AND INITIATE WRITE           Y3876000
TPIOLEC  DC    AL2(X'FF00')        BCB ERROR CODE=FF                    Y3877000
*********************************************************************** Y3878000
*              DISASTROUS BCB BUFFER SKELETON VALUES                  * Y3879000
*********************************************************************** Y3880000
TPIODBC  DC    AL2(9)              BYTE COUNT FOR WRITE                 Y3881000
TPIODHX  DC    AL2($BSXTNT)        NORMAL TEXT HEADER                   Y3882000
TPIODRB  DC    AL2(X'A0',0)        BCB SKELETON,FCS(1) SLOT             Y3883000
TPIODRC  DC    AL1(0,X'E0')        FCS(2),RCB=E0                        Y3884000
TPIODEB  DC    AL2(X'80',0)        SRCB,SCB                             Y3885000
         EJECT                                                          Y3886000
*********************************************************************** Y3887000
*              ISSUE DATA SET NOT READY MESSAGE AND WAIT FOR READY    * Y3888000
*********************************************************************** Y3889000
TPIODSM  DC    AL2(*-*)                                                 Y3890000
         $STL  TPIOXVE+D1,L        RESET VARIABLE ENTRY                 Y3891000
         $WTO  TPIOMS1,TPIOXRT     ISSUE NOT READY MESSAGE              Y3892000
         $STL  TPIOXVE+D1,L        RESET VARIABLE ENTRY                 Y3893000
         $XIO  BSXISNR-D1,,L       SENSE SCA WITHOUT RESET              Y3894000
         $SLA  7                   GET DATA SET READY BIT               Y3895000
         $BNN  TPIOXRT             NON-PROCESS EXIT UNTIL READY         Y3896000
         $B    TPIODSM,,I          RETURN TO CALLER                     Y3897000
TPIOMS1  DC    AL1($BLACK+$EBCD,$LIST15) CONTROL WORD                   Y3898000
         DC    AL2(22)             DATA COUNT                           Y3899000
         DC    C'DATA SET NOT READY....'                                Y3900000
         $NULL                                                          Y3901000
         EJECT                                                          Y3902000
*********************************************************************** Y3903000
*              TEST READ RESPONSE AND CYCLE COMMUTATOR UNTIL COMPLETE * Y3904000
*********************************************************************** Y3905000
TPIOLOG  $NULL                                                          Y3906000
         $STL  TPIOXVE+D1,L        RESET VARIABLE ENTRY POINT           Y3907000
         $LD   BSXOPFR,,L          GET BSXIOS COMPLETION CODE           Y3908000
         $BZ   TPIOXRT             CYCLE COMMUTATOR UNTIL READ DONE     Y3909000
         $STO  WB,,L               COMPLETION CODE TO WB                Y3910000
         $STO  TPIOLSR             RESET ACK0 INDICATOR                 Y3911000
         $S    TPIOLTO             TEST FOR NORMAL COMPLETION           Y3912000
         $BZ   TPIOXRV,WB,I        BRANCH IF NORMAL COMPLETION          Y3913000
         $S    TPIOLTT             TEST FOR ACK0 READ CODE              Y3914000
         $BZ   TPIOXRV,WB,I        BRANCH IF ACK0 READ                  Y3915000
*********************************************************************** Y3916000
*              LOG ALL UNUSUAL READ RESPONSES                         * Y3917000
*********************************************************************** Y3918000
         $STX  TPIOLSB+D1,WB       SAVE WB IN CASE OF NPXT              Y3919000
         $STL  TPIOXVE+D1,L        RESET VARIABLE ENTRY                 Y3920000
         $LD   BSXNDSW,,L          GET LAST DSW FROM TPIOX              Y3921000
         $RTE  16                  TO EXT                               Y3922000
         $LD   BSXOPFR,,L          GET COMPLETION CODE                  Y3923000
         $SLT  8                   LEFT JUSTIFY AND CLEAR LOW BYTE      Y3924000
         $TSL  SLOGSCA             GO LOG COMPLETION CODE, DSW          Y3925000
TPIOLSB  $AXT  *-*,WB,L            RESTORE WB                           Y3926000
         $B    TPIOXRV,WB,I        OFF TO APPROPRIATE PROCESSOR         Y3927000
TPIOLTO  DC    AL2(BSXORF1)        NORMAL READ COMPLETION TEST VALUE    Y3928000
TPIOLTT  DC    AL2(BSXORFA-BSXORF1) ACK0 RECEIVED TEST VALUE            Y3929000
*********************************************************************** Y3930000
*              ISSUE TERM MESS AND HALT WHEN DISCONNECT CR READ       * Y3931000
*********************************************************************** Y3932000
TPIOHLT  $TSL  BSXHALT             STOP THE COM ADAPTER                 Y3933000
         $STL  TPIOXVE+D1,L        RESET TPIOX COMMUTATOR ENTRY         Y3934000
         $WTO  TPIOTEM,TPIOXRT     QUEUE TERMINATION MESSAGE            Y3935000
         $TSL  TPIOXVE+D1          RESET TPIOX ENTRY & TOUR COMM        Y3936000
         $LD   TPIODSA             SET AC TO SHOW COMPLETION            Y3937000
         $TSL  $WAIT               USE GENERAL WAIT ROUTINE             Y3938000
         $B    TPIOXRT,,L           WHEN CONSOLE PRINTER QUITS          Y3939000
TPIOTEM  DC    AL1($BLACK+$EBCD,$LIST15) MESSAGE CONTROL WORD           Y3940000
         DC    AL2(28)             BYTE COUNT OF MESSAGE                Y3941000
         DC    C'REMOTE PROCESSING TERMINATED' TERM MESSAGE             Y3942000
         $NULL                     1130 WORD BOUNDARY                   Y3943000
TPIODSA  DC    AL2(X'FFFF')        CONSTANT TO DISPLAY IN AC            Y3944000
*********************************************************************** Y3945000
*              RE-ISSUE READ IF TIMEOUT ON PREVIOUS READ              * Y3946000
*********************************************************************** Y3947000
TPIORTO  $LXA  BSXISVA+D1,WA       WA = ADDRESS OF READ BUFFER          Y3948000
         $LD   TPIORRQ,,L          READ SEQUENCE INDICATOR          R41 Y3948100
         $STO  TPBUFHD,WA,X        STORE IN BUFFER HEADER           R41 Y3948200
TPIORDR  $TSL  BSXIOS              INITIATE READ THRU BSXIOS            Y3949000
         $B    TPIORDR             PERSIST IF DATA SET NOT READY        Y3950000
         $B    TPIOLOG             GO WAIT FOR READ TO COMPLETE         Y3951000
         TITLE 'RTP1130 (TPGET - PROCESS TP BUFFERS FROM HASP)'         Y3952000
*********************************************************************** Y3953000
*                                                                     * Y3954000
* TITLE - TPGET (PROCESSOR FOR BUFFERS RECEIVED FROM HASP)            * Y3955000
*                                                                     * Y3956000
* FUNCTION/PURPOSE -                                                  * Y3957000
*                                                                     * Y3958000
*  PROCESSES DATA RECEIVED FROM HASP IN THE FORM OF TP DATA BUFFERS   * Y3959000
*  OR CONTROL RECORDS PREPROCESSED BY TPIOX...                        * Y3960000
*                                                                     * Y3961000
*  CONTROL RECORD PROCESSING IS IN THE FORM OF 'REQUEST TO START'     * Y3962000
*  OR 'PERMISSION TO SEND' FUNCTIONS.                                 * Y3963000
*                                                                     * Y3964000
*  DATA BUFFERS ARE DEBLOCKED, DECOMPRESSED, CONVERTED TO APPROPRIATE * Y3965000
*  CODE (1403 PRINT, 1442 PUNCH, CONSOLE TILT-ROTATE, ETC.) AND QUEUED* Y3966000
*  FOR THE SPECIFIED COMMUTATOR I/O PROCESSOR.                        * Y3967000
*                                                                     * Y3968000
*  CONTROL INFORMATION PERTINENT TO THE UNIQUE REQUIREMENTS OF EACH   * Y3969000
*  DATA TYPE IS PROVIDED THRU THE ASSOCIATED UFCB.                    * Y3970000
*                                                                     * Y3971000
*********************************************************************** Y3972000
         SPACE 3                                                        Y3973000
TPGTCLH  DC    AL2(X'00FF')        CLEAR LEFT-HALF MASK                 Y3974000
*********************************************************************** Y3975000
*              ENTRY POINT FROM COMMUTATOR                            * Y3976000
*********************************************************************** Y3977000
TPGETEP  $NULL                                                          Y3978000
TPGETVE  $B    TPGETNI,,L          VARIABLE ENTRY POINT                 Y3979000
TPGETNP  $B    TPGETRT,,L          NON-PROCESS EXIT POINT               Y3980000
TPGETXT  $BSI  TPGETVE+D1          RESET ENTRY AND LEAVE                Y3981000
TPGETNI  $NULL                     INITIAL ENTRY POINT                  Y3982000
*********************************************************************** Y3983000
*              PROCESS CONTROL RECORD FROM HASP                       * Y3984000
*********************************************************************** Y3985000
         $LD   SHCRQUE,,L          GET CONTROL RECORD ENTRY             Y3986000
         $BZ   TPGTCRX             BRANCH IF NO CONTROL RECORD          Y3987000
         $STO  TPGTCRS             SAVE RCB/SRCB                        Y3988000
         $ZAC                      CLEAR AC AND                         Y3989000
         $STO  SHCRQUE,,L           FREE QUEUE                          Y3990000
         $LD   TPGTCRS             GET FUNCTION SRCB=RCB                Y3991000
         $TSL  SSRCHCB             SEARCH UFCB'S                        Y3992000
         $BNZ  TPGTCRX             IGNORE IF NO MATCH                   Y3993000
         $LD   TPGTCRS             GET RCB/SRCB                         Y3994000
         $SLA  1                   ELIMINATE SIGN                       Y3995000
         $SRA  13                  ISOLATE CONTROL TYPE BITS            Y3996000
         $S    TPGTCN1             TEST FOR REQUEST TO START            Y3997000
         $BZ   TPGTREQ              FROM HASP                           Y3998000
         $S    TPGTCN1             TEST FOR PERMISSION TO SEND          Y3999000
         $BNZ  TPGTCRX             IGNORE ALL OTHERS                    Y4000000
         EJECT                                                          Y4001000
*********************************************************************** Y4002000
*              PROCESS PERMISSION TO SEND FROM HASP                   * Y4003000
*********************************************************************** Y4004000
         $LD   UFCBSAR,WC,X        GET STATUS/RCB WORD                  Y4005000
         $AND  TPGTCLH             CLEAR STATUS BYTE                    Y4006000
         $OR   TPGTCRS             SET STATUS TO                        Y4007000
         $STO  UFCBSAR,WC,X        PERMISSION TO SEND                   Y4008000
TPGTPMS  $LD   UNLATCH,,L          UNLATCH SPECIFIED                    Y4009000
         $STO  $FCBCOM,WC,I        COMMUTATOR GATE                      Y4010000
         $B    TPGTCRX             GO TO NEXT PROCESS                   Y4011000
*********************************************************************** Y4012000
*              SOME TPGET CONSTANTS                                   * Y4013000
*********************************************************************** Y4014000
TPGTCRS  DC    AL2(*-*)            CONTROL RECORD RCB/SRCB              Y4015000
TPGTCN1  DC    AL2(1)              CONSTANT 1                           Y4016000
TPGTPTS  DC    AL1($CRPERM,0)      PERMISSION TO START IDENTIFICATION   Y4017000
TPGTSCC  DC    AL2(X'008E')        SPECIAL PRINT SRCB FOR FORMS         Y4018000
*********************************************************************** Y4019000
*              PROCESS REQUEST TO START FROM HASP                     * Y4020000
*********************************************************************** Y4021000
TPGTREQ  $STL  TPGETVE+D1          RESET VARIABLE ENTRY POINT           Y4022000
         $LD   TPGTPTS             GET PERMISSION IDENTIFICATION        Y4023000
         $TSL  STPOPEN             GO INITIATE CONTROL RECORD TO HASP   Y4024000
         $BNZ  TPGETRT             CYCLE UNTIL ACCEPTED                 Y4025000
         $B    TPGTPMS             GO UNLATCH APPROPRIATE GATE          Y4026000
TPGTCRX  $NULL                     END OF CONTROL RECORD PROCESSOR      Y4027000
         AIF   (&PR1403 EQ 0).NO1403F                                   Y4028000
         EJECT                                                          Y4029000
*********************************************************************** Y4030000
*              PROCESS DATA DESTINED FOR 1403 PRINTER                 * Y4031000
*********************************************************************** Y4032000
TPGTFOP  $AXT  PRFOUFCB,WB,L       1403 UFCB ADDRESS TO WB              Y4033000
         $LD   UFCBPBP,WB,X        BUFFER POINTER FROM UFCB             Y4034000
         $BNZ  TPGTFOL             BRANCH IF PARTIAL BUFFER             Y4035000
         $DEQUE PRFOUBFP           GET A 1403 TP BUFFER                 Y4036000
         $BZ   TPGTFND             GO TO NEXT PROCESS IF NONE           Y4037000
         $TSL  TPGTINT             GO TO INITIALIZATION ROUTINE         Y4038000
TPGTFOL  $DEQUE PRFO3FQP           GET A 1403 TANK                      Y4039000
         $BZ   TPGTFND             TO NEXT PROCESS IF NONE              Y4040000
         $STO  TPGTFTK             SAVE TANK ADDRESS                    Y4041000
         $LXA  TPGTFTK,WA          TO WA                                Y4042000
         $LD   TPGTFBV             1403 PRINTER BLANKS                  Y4043000
         $TSL  TPGTFIL             GO FILL TANK WITH BLANKS             Y4044000
         $TSL  SDBLOCK             OFF TO DEBLOCKER                     Y4045000
         $BZ   TPGTEOB             BRANCH IF END OF BUFFER              Y4046000
         $LD   DBLKSRC,,L          GET SRCB CODE FROM DBLOCK            Y4047000
         $EOR  TPGTSCC              AND TEST FOR FORMS LINE             Y4048000
         $BZ   TPGTNUL             IGNORE FORMS PRINT LINE              Y4049000
         $LD   TPGTFTK             GET PROCESSED TANK ADDRESS           Y4050000
         $QACTL PRFO3AQP           QUEUE IT FOR PRINT ROUTINE           Y4051000
         $BSI  TPGETVE+D1          CYCLE COMMUTATOR                     Y4052000
         $B    TPGTFND             GO NEXT PROCESS                      Y4053000
TPGTFTK  DC    AL2(*-*)            1403 TANK ADDRESS                    Y4054000
TPGTFBV  DC    AL2(X'7F7F')        1403 PRINTER CODE BLANK              Y4055000
TPGTFND  $NULL                     END OF PROCESSOR                     Y4056000
.NO1403F ANOP                                                           Y4057000
         AIF   (&PR1132 EQ 0).NO1132G                                   Y4058000
         EJECT                                                          Y4059000
*********************************************************************** Y4060000
*              PROCESS DATA DESTINED FOR 1132 PRINTER                 * Y4061000
*********************************************************************** Y4062000
TPGTEOP  $AXT  PRETUFCB,WB,L       1132 UFCB ADDRESS TO WB              Y4063000
         $LD   UFCBPBP,WB,X        BUFFER POINTER FROM UFCB             Y4064000
         $BNZ  TPGTEOL             BRANCH IF PARTIAL BUFFER             Y4065000
         $DEQUE PRETUBFP           GET 1132 TP BUFFER                   Y4066000
         $BZ   TPGTEND             TO NEXT PROCESS IF NONE              Y4067000
         $TSL  TPGTINT             GO TO INITIALIZATION ROUTINE         Y4068000
TPGTEOL  $DEQUE PRET2FQP           GET 1132 TANK                        Y4069000
         $BZ   TPGTEND             TO NEXT PROCESS IF NONE              Y4070000
         $STO  TPGTETK             SAVE TANK ADDRESS                    Y4071000
         $LXA  TPGTETK,WA          TO WA                                Y4072000
         $LD   TPGTEBV             1132 PRINTER BLANKS                  Y4073000
         $TSL  TPGTFIL             GO FILL TANK WITH BLANKS             Y4074000
         $TSL  SDBLOCK             OFF TO DEBLOCK ROUTINE               Y4075000
         $BZ   TPGTEOB             BRANCH IF END OF BUFFER              Y4076000
         $LD   DBLKSRC,,L          GET SRCB CODE FROM DBLOCK            Y4077000
         $EOR  TPGTSCC              AND TEST FOR FORMS LINE             Y4078000
         $BZ   TPGTNUL             IGNORE FORMS PRINT LINE              Y4079000
         $LD   PR1132LC,WA,X       GET TANK CONTROL WORD                Y4080000
         $BSC  E                   SKIP IF EVEN PRINT COUNT             Y4081000
         $A    TPGTCN1             FORCE COUNT TO BE EVEN               Y4082000
         $S    TPGTLIM             TEST FOR EXCESSIVE COUNT             Y4083000
         $BSC  N+Z                 SKIP IF LT OR EQ TO LIMIT            Y4084000
         $ZAC                      TRUNCATE EXCESSIVE COUNT             Y4085000
         $A    TPGTLIM             SET TO ORIGINAL OR LIMIT             Y4086000
         $STO  PR1132LC,WA,X       RESET TANK CONTROL WORD              Y4087000
         $LD   TPGTETK             TANK ADDRESS                         Y4088000
         $QACTL PRET2AQP           QUEUE IT FOR PRINT ROUTINE           Y4089000
         $TSL  TPGETVE+D1          CYCLE COMMUTATOR                     Y4090000
         $B    TPGTEND             GO TO NEXT PROCESS                   Y4091000
TPGTETK  DC    AL2(*-*)            1132 TANK ADDRESS                    Y4092000
TPGTEBV  DC    AL2(X'4040')        1132 BLANK VALUE                     Y4093000
TPGTLIM  DC    AL2(120)            1132 LINE LENGTH LIMIT               Y4094000
TPGTEND  $NULL                     END OF PROCESSOR                     Y4095000
.NO1132G ANOP                                                           Y4096000
         AIF   (NOT &PN1442).NO1442O                                    Y4097000
         EJECT                                                          Y4098000
*********************************************************************** Y4099000
*              PROCESS DATA DESTINED FOR THE 1442 PUNCH               * Y4100000
*********************************************************************** Y4101000
         $AXT  PNFFUFCB,WB,L       1442 PUNCH UFCB ADDRESS              Y4102000
         $LD   UFCBPBP,WB,X        PUNCH BUFFER POINTER FROM UFCB       Y4103000
         $BNZ  TPGTFFF             BRANCH IF PARTIAL BUFFER             Y4104000
         $DEQUE PNFFUBFP           GET 1442 PUNCH BUFFER                Y4105000
         $BZ   TPGTPND             BRANCH IF NO BUFFER                  Y4106000
         $TSL  TPGTINT             GO TO INITIALIZATION                 Y4107000
TPGTFFF  $DEQUE PNFF2FQP           GET 1442 PUNCH TANK                  Y4108000
         $BZ   TPGTPND             BRANCH IF NO TANK AVAILABLE          Y4109000
         $STO  TPGTPNT             SAVE TANK ADDRESS                    Y4110000
         $LXA  TPGTPNT,WA          TO WA                                Y4111000
         $ZAC                      CLEAR AC (PUNCH BLANK=0)             Y4112000
         $TSL  TPGTFIL             GO FILL TANK WITH BLANKS             Y4113000
         $TSL  SDBLOCK             GET A PUNCH RECORD                   Y4114000
         $BZ   TPGTEOB             BRANCH IF END OF BUFFER              Y4115000
         $BN   TPGTFFP             BRANCH IF END-OF-FILE AND EOB        Y4116000
         $A    WA,,L               COMPUTE ADDRESS                      Y4117000
         $STO  WA,,L                OF LAST COLUMN                      Y4118000
         $LD   (PN1442DT-PN1442SP),WA,X GET LAST COLUMN                 Y4119000
         $OR   TPGTCLP                   SET LAST COLUMN BIT            Y4120000
         $STO  (PN1442DT-PN1442SP),WA,X   FOR 1442 PUNCH ROUTINE        Y4121000
TPGTFFP  $LD   TPGTPNT             GET TANK ADDRESS                     Y4122000
         $QACTL PNFF2AQP           QUEUE IT FOR PUNCH ROUTINE           Y4123000
         $TSL  TPGETVE+D1          CYCLE COMMUTATOR                     Y4124000
         $B    TPGTPND             GO TO NEXT PROCESS                   Y4125000
TPGTPNT  DC    AL2(*-*)            TANK ADDRESS                         Y4126000
TPGTCLP  DC    AL2(X'0008')        LAST COLUMN BIT FOR 1442             Y4127000
TPGTPND  $NULL                                                          Y4128000
.NO1442O ANOP                                                           Y4129000
         EJECT                                                          Y4130000
*********************************************************************** Y4131000
*              PROCESS MESSAGES FOR CONSOLE PRINTER                   * Y4132000
*********************************************************************** Y4133000
         $AXT  CNSPUFCB,WB,L       CONSOLE PRINTER UFCB ADDRESS         Y4134000
         $LD   UFCBPBP,WB,X        MESSAGE BUFFER POINTER               Y4135000
         $BNZ  TPGTCCC             BRANCH IF PARTIAL BUFFER             Y4136000
         $DEQUE CNSPUBFP           GET NEXT MESSAGE BUFFER              Y4137000
         $BZ   TPGTCND             BRANCH IF NO BUFFER                  Y4138000
         $TSL  TPGTINT             GO TO INITIALIZATION                 Y4139000
TPGTCCC  $DEQUE CONSLFQP           GET A CONSOLE PRINT TANK             Y4140000
         $BZ   TPGTCND             TO NEXT PROCESS IF NONE              Y4141000
         $STO  TPGTCAN             SAVE TANK ADDRESS                    Y4142000
         $LXA  TPGTCAN,WA          TO WA....                            Y4143000
         $LD   TPGTCBK             TILT-ROTATE CODE BLANK               Y4144000
         $TSL  TPGTFIL             GO FILL TANK WITH BLANKS             Y4145000
         $TSL  SDBLOCK             GET A MESSAGE                        Y4146000
         $BZ   TPGTEOB             BRANCH IF END OF BUFFER              Y4147000
         $LD   CONMSGCB,WA,X       GET CONTROL WORD                     Y4148000
         $OR   TPGTRTR             SET RED TILT-ROTATE CODE             Y4149000
         $STO  CONMSGCB,WA,X        FOR CONSOLE PRINT ROUTINE           Y4150000
         $LD   UNLATCH,,L               OPEN CONSOLE                    Y4151000
         $STO  $FCBCOM,WB,I             ROUTINE GATE                    Y4152000
         $LD   TPGTCAN             GET TANK ADDRESS                     Y4153000
         $QACTL CONSLAQP           QUEUE FOR CONSOLE PRINT              Y4154000
         $B    TPGTCND             GO TO NEXT PROCESS                   Y4155000
TPGTCAN  DC    AL2(*-*)            PRINT TANK ADDRESS                   Y4156000
TPGTCBK  DC    AL2(X'2121')        CONSOLE PRINTER BLANK                Y4157000
TPGTRTR  DC    AL1($RED+$TILT,0)   RED RIBBON WITH TILT-ROTATE CODE     Y4158000
TPGTCND  $NULL                     END OF PROCESSOR                     Y4159000
*********************************************************************** Y4160000
*              END OF ALL TPGET PROCESSORS OF INPUT BUFFERS           * Y4161000
*********************************************************************** Y4162000
         $B    TPGETXT,,L          CYCLE COMMUTATOR                     Y4163000
         EJECT                                                          Y4164000
*********************************************************************** Y4165000
*              END OF BUFFER ROUTINE                                  * Y4166000
*********************************************************************** Y4167000
TPGTEOB  $NULL                     ENTERED FROM ANY PROCESSOR           Y4168000
         $LD   UFCBPBP,WB,X        TP BUFFER POINTER                    Y4169000
         $QFREL TPBUFFQP           RETURN TO FREE CHAIN                 Y4170000
         $ZAC                      RESET                                Y4171000
         $STO  UFCBPBP,WB,X         POINTER                             Y4172000
         $LD   UFCBBFC,WB,X        DECREMENT                            Y4173000
         $S    TPGTEC1              FUNCTION                            Y4174000
         $STO  UFCBBFC,WB,X          COUNT                              Y4175000
         $S    UFCBBFL,WB,X        COMPARE COUNT WITH LIMIT             Y4176000
         $BNN  TPGTNUL             BRANCH IF NOT UNDER LIMIT            Y4177000
         $LD   UFCBFCS,WB,X        TURN-OFF                             Y4178000
         $OR   SFCSXMT,,L           POSSIBLE                            Y4179000
         $STO  SFCSXMT,,L            SUSPEND                            Y4180000
TPGTNUL  $LD   WA,,L               GET TANK ADDRESS                     Y4181000
         $MDX  UFCBFQP,WB,X        POINT WB TO FQP                      Y4182000
         $STX  WC,WB,L              AND SET WC TO SAME                  Y4183000
         $QFREL ,                  RETURN TO FREE CHAIN                 Y4184000
         $B    TPGETXT,,L          CYCLE COMMUTATOR                     Y4185000
TPGTEC1  DC    AL2(1)              CONSTANT 1                           Y4186000
*********************************************************************** Y4187000
*              INITIALIZE UFCB FOR OUTPUT PROCESSORS                  * Y4188000
*********************************************************************** Y4189000
TPGTINT  DC    AL2(*-*)                                                 Y4190000
         $STO  UFCBPBP,WB,X        STORE BUFFER POINTER IN UFCB         Y4191000
         $A    TPGTFRP             CALCULATE FIRST RCB POSITION         Y4192000
         $STO  UFCBPBA,WB,X        STORE IN UFCB FOR $DBLOCK            Y4193000
         $ZAC                      CLEAR AC AND                         Y4194000
         $STO  UFCBPBS,WB,X         RESET POSITION SWITCH               Y4195000
         $B    TPGTINT,,I          RETURN TO CALLER                     Y4196000
TPGTFRP  DC    AL2(TPBUFFR)        RCB OFFSET                           Y4197000
         EJECT                                                          Y4198000
*********************************************************************** Y4199000
*                                                                     * Y4200000
* TITLE - $DBLOCK (DEBLOCK AND DECOMPRESS DATA FROM HASP TP BUFFERS)  * Y4201000
*                                                                     * Y4202000
* FUNCTION/PURPOSE -                                                  * Y4203000
*                                                                     * Y4204000
*  LOCATES A RECORD (DEFINED BY RCB) IN A TP BUFFER AS SPECIFIED      * Y4205000
*  BY GIVEN UFCB, DECOMPRESSES, EDITS AND MOVES DATA TO A SELECTED    * Y4206000
*  TARGET AREA                                                        * Y4207000
*                                                                     * Y4208000
* CALLING SEQUENCE -                                                  * Y4209000
*                                                                     * Y4210000
*                             $TSL  $DBLOCK  LINKAGE                  * Y4211000
*                             ....           RETURN                   * Y4212000
*                                                                     * Y4213000
*                   WHERE --- ON ENTRY--WA CONTAINS ADDRESS OF        * Y4214000
*                             TARGET AREA WITH WORD BOUNDARY          * Y4215000
*                             ASSUMED. THE TARGET AREA MUST HAVE A    * Y4216000
*                             FORMAT AS DESCRIBED UNDER 'GENERAL      * Y4217000
*                             DESCRIPTION OF ALL TANK ELEMENTS'       * Y4218000
*                                                                     * Y4219000
*                             WB CONTAINS ADDRESS OF UFCB FOR         * Y4220000
*                             ASSOCIATED TP BUFFER                    * Y4221000
*                                                                     * Y4222000
*                             AC CONTAINS TANK INITIALIZATION         * Y4223000
*                             VALUE FOR PARTICULAR DEVICE BEING       * Y4224000
*                             PROCESSED                               * Y4225000
*                                                                     * Y4226000
*                             ON EXIT-- WA AND WB ARE RESTORED AND    * Y4227000
*                             APPROPRIATE UFCB FIELDS ARE UPDATED     * Y4228000
*                                                                     * Y4229000
*                             'UFCBPBA' ADDRESS OF NEXT RCB WORD      * Y4230000
*                             'UFCBPBS' RCB POSITION INDICATOR        * Y4231000
*                                                                     * Y4232000
*                              SET TO 0 FOR RIGHT JUSTIFIED RCB       * Y4233000
*                              SET TO 1 FOR LEFT JUSTIFIED RCB        * Y4234000
*                                                                     * Y4235000
*                             'TANKWRDC' IS SET TO SRCB VALUE         * Y4236000
*                             'TANKWRDD' IS SET TO RECORD LENGTH      * Y4237000
*                             BOTH VALUES IN LOW ORDER BYTE WITH      * Y4238000
*                             HIGH ORDER SET ZERO                     * Y4239000
*                                                                     * Y4240000
*                             AC SET TO LENGTH OF RECORD DEBLOCKED,   * Y4241000
*                             OR 0 IF EOB, OR -1 IF EOF,EOB           * Y4242000
*                                                                     * Y4243000
*                             REGISTER WC IS DESTROYED                * Y4244000
*                                                                     * Y4245000
*********************************************************************** Y4246000
         EJECT                                                          Y4247000
*********************************************************************** Y4248000
*              CHARACTER SUBSTRING PROCESSING                         * Y4249000
*********************************************************************** Y4250000
DBLKCSS  $SRA  1                   CLEAR AC                             Y4251000
         $SLT  6                   CHARACTER COUNT TO AC                Y4252000
         $BSI  DBLKACC             GO ACCUMULATE TOTAL                  Y4253000
         $STO  WC,,L               SET COUNT REGISTER                   Y4254000
         $LD   DBLKLRS             GET SCB POSITION FLAG                Y4255000
         $MDX  1,WC                 PLUS ONE FOR DUMMY PASS             Y4256000
         $B    DBLKMDL               EXECUTE DUMMY PASS FOR SET UP      Y4257000
DBLKCLP  $LD   DBLKSPT,,I          GET INPUT DATA WORD                  Y4258000
         $MDM  DBLKINV,0           TEST INVERTED FLAG                   Y4259000
         $SRA  8                   RIGHT JUSTIFY DATA                   Y4260000
         $BSI  $FCBPRO,WB,I        GO TO INDICATED ROUTINE              Y4261000
         $BSI  $FCBSTO,WB,I         AND THEN STORE DATA                 Y4262000
         $LD   DBLKINV             INVERT                               Y4263000
DBLKMDL  $EOR  DBLKCN1              POSITION                            Y4264000
         $STO  DBLKINV             FLAG                                 Y4265000
         $A    DBLKSPT             ADJUST DATA POINTER                  Y4266000
         $STO  DBLKSPT              IF NECESSARY                        Y4267000
         $MDX  -1,WC               DING COUNT REGISTER                  Y4268000
         $B    DBLKCLP             BRANCH IF MORE DATA                  Y4269000
         $LD   DBLKACT             GET CHARACTER COUNT                  Y4270000
         $AND  DBLKCN1             REDUCE TO EVEN/ODD BIT               Y4271000
         $EOR  DBLKLRS             COMBINED WITH ORIGINAL               Y4272000
         $EOR  DBLKCN1              SCB POSITION INDICATOR              Y4273000
         $STO  DBLKLRS               YIELDS NEW POSITION FLAG           Y4274000
         $B    DBLKGET,,L          GET NEXT SUBSTRING                   Y4275000
         EJECT                                                          Y4276000
*********************************************************************** Y4277000
*              CHARACTER PROPAGATION PROCESS                          * Y4278000
*********************************************************************** Y4279000
DBLKCPR  $SRA  2                   CLEAR AC                             Y4280000
         $SLT  5                   PROPAGATION COUNT TO AC              Y4281000
         $BSI  DBLKACC             GO ACCUMULATE TOTAL                  Y4282000
         $STO  WC,,L               SET COUNT REGISTER                   Y4283000
         $LD   DBLKLRS             GET SCB POSITION                     Y4284000
         $EOR  DBLKCN1             INVERT VALUE                         Y4285000
         $STO  DBLKINV              TO CALCULATE                        Y4286000
         $A    DBLKSPT               DATA WORD                          Y4287000
         $STO  DBLKCLC+D1             ADDRESS                           Y4288000
DBLKCLC  $LD   *-*,,L              FETCH DATA WORD                      Y4289000
         $MDM  DBLKINV,0           TEST POSITION FLAG                   Y4290000
         $SRA  8                   LEFT TO RIGHT                        Y4291000
         $BSI  $FCBPRO,WB,I        GO TO INDICATED ROUTINE              Y4292000
         $STO  DBLKCHX             SAVE CONVERTED DATA                  Y4293000
DBLKCPL  $LD   DBLKCHX             FETCH CHARACTER                      Y4294000
         $BSI  $FCBSTO,WB,I        STORE IN TANK                        Y4295000
         $MDX  -1,WC               DECREMENT AND TEST COUNT             Y4296000
         $B    DBLKCPL             BRANCH IF MORE                       Y4297000
         $LD   DBLKCN1             CONSTANT ONE TO                      Y4298000
         $B    DBLKSTO,,L           ADJUST SCB POINTER                  Y4299000
*********************************************************************** Y4300000
*              ACCUMULATE RECORD BYTE COUNT TOTAL                     * Y4301000
*********************************************************************** Y4302000
DBLKACC  DC    AL2(*-*)                                                 Y4303000
         $STO  DBLKACT             SAVE ENTRY COUNT                     Y4304000
         $A    DBLKTOT             ACCUMULATE                           Y4305000
         $STO  DBLKTOT              TOTAL                               Y4306000
         $LD   DBLKACT             RESTORE ENTRY COUNT                  Y4307000
         $B    DBLKACC,,I          RETURN TO CALLER                     Y4308000
*********************************************************************** Y4309000
*              SOME $DBLOCK CONSTANTS AND STORAGE                     * Y4310000
*********************************************************************** Y4311000
DBLKACT  DC    AL2(*-*)            ENTRY COUNT                          Y4312000
DBLKTOT  DC    AL2(*-*)            TOTAL RECORD LENGTH                  Y4313000
DBLKCHX  DC    AL2(*-*)            DATA CHARACTER                       Y4314000
DBLKLRS  DC    AL2(*-*)            RCB AND SCB POSITION FLAG            Y4315000
DBLKINV  DC    AL2(*-*)            INVERSE OF RCB, SCB POSITION FLAG    Y4316000
DBLKSPT  DC    AL2(*-*)            DATA POINTER                         Y4317000
DBLKSRC  DC    AL2(*-*)            EXTRACTED SRCB                       Y4318000
DBLKSCB  DC    AL2(*-*)            EXTRACTED SCB                        Y4319000
DBLKCN1  DC    AL2(1)              CONSTANT 1                           Y4320000
DBLKCLH  DC    AL2(X'00FF')        MASK TO CLEAR LEFT HALF              Y4321000
DBLKBIG  DC    AL2(X'FFFF')        BIG NUMBER                           Y4322000
*********************************************************************** Y4323000
*              $DBLOCK ENTRY POINT                                    * Y4324000
*********************************************************************** Y4325000
SDBLOCK  DC    AL2(*-*)            ENTRY VIA $TSL $DBLOCK               Y4326000
         $AND  DBLKCLH             CLEAR LEFT HALF AND STORE            Y4327000
         $STO  DBLKPDS              PARTIAL DATA WORD SKELETON          Y4328000
         $LD   UFCBPBS,WB,X        GET RCB POSITION FLAG                Y4329000
         $STO  DBLKLRS             SAVE FOR EXTENSIVE MANIPULATION      Y4330000
         $LD   UFCBPBA,WB,X        GET RCB WORD POINTER                 Y4331000
         $A    DBLKCN1             MAKE IT SCB POINTER                  Y4332000
         $STO  DBLKSPT              FOR FETCHING DATA                   Y4333000
         $STO  WC,,L                 AND LOCAL EXTRACTION               Y4334000
         $LD   -1,WC               GET RCB WORD                         Y4335000
         $MDM  DBLKLRS,0           TEST POSITION FLAG                   Y4336000
         $SRA  8                   MOVE LEFT TO RIGHT                   Y4337000
         $SLA  8                   AND/OR RIGHT TO LEFT                 Y4338000
         $BZ   SDBLOCK,,I          EXIT IF END-OF-BUFFER                Y4339000
         $STX  DBLKSVA+D1,WA,L     SAVE WA                              Y4340000
         $ZAC                      CLEAR AC AND                         Y4341000
         $STO  DBLKPLR,,L           RESET POSITION FLAG                 Y4342000
         $STO  DBLKTOT               AND STRING TOTAL                   Y4343000
*********************************************************************** Y4344000
*              ISOLATE AND SAVE SRCB AND SCB                          * Y4345000
*********************************************************************** Y4346000
         $LD   DBLKLRS             GET RCB/SCB POSITION FLAG            Y4347000
         $BOD  DBLKLJF             BRANCH IF RCB LEFT JUSTIFIED         Y4348000
         $LD   0,WC                GET SRCB/RCB WORD                    Y4349000
         $SRA  8                   ISOLATE SRCB                         Y4350000
         $STO  DBLKSRC              AND SAVE IT                         Y4351000
         $LD   0,WC                GET SRCB/SCB WORD                    Y4352000
         $AND  DBLKCLH             CLEAR LEFT HALF                      Y4353000
         $B    DBLKSVS             GO SAVE AND TEST SCB                 Y4354000
DBLKLJF  $LD   -1,WC               GET RCB/SRCB WORD                    Y4355000
         $AND  DBLKCLH             CLEAR LEFT HALF                      Y4356000
         $STO  DBLKSRC              AND SAVE SRCB                       Y4357000
         $LD   0,WC                GET SCB WORD                         Y4358000
         $SRA  8                   CLEAR WHATEVER                       Y4359000
DBLKSVS  $STO  DBLKSCB              AND SAVE SCB                        Y4360000
*********************************************************************** Y4361000
*              TEST FOR END-OF-FILE (FIRST SCB=0)                     * Y4362000
*********************************************************************** Y4363000
         $BNZ  DBLKING             BRANCH IF NOT EOF                    Y4364000
         $LD   DBLKBIG             SET COUNT TO MAXIMUM                 Y4365000
         $STO  DBLKTOT              TO PREVENT EXIT EOB                 Y4366000
         $ZAC                      CLEAR AC AND                         Y4367000
         $STO  DBLKSRC              SETUP FOR EOF                       Y4368000
         $B    DBLKEOR             GO TO EXIT PROCESS                   Y4369000
*********************************************************************** Y4370000
*              COMMENCE DEBLOCKING PROCESS                            * Y4371000
*********************************************************************** Y4372000
DBLKING  $SRT  7                   SCB SANS SIGN TO EXT                 Y4373000
         $ZAC                      CLEAR AC                             Y4374000
         $SLT  1                   GET SUBSTRING ID BIT                 Y4375000
         $BOD  DBLKCSS             BRANCH IF CHARACTER SUBSTRING        Y4376000
         $SLT  1                   GET PROPAGATION BIT                  Y4377000
         $BOD  DBLKCPR             BRANCH IF CHARACTER PROPAGATION      Y4378000
*********************************************************************** Y4379000
*              BLANK PROPAGATION TIME                                 * Y4380000
*********************************************************************** Y4381000
         $SRA  2                   CLEAR AC                             Y4382000
         $SLT  5                   PROPAGATION COUNT                    Y4383000
         $BSI  DBLKACC             GO ACCUMULATE TOTAL                  Y4384000
         $STL  DBLKPOP             SET BLANK PROPAGATION FLAG           Y4385000
         $BSI  $FCBSTO,WB,I        GO ADJUST VARIOUS POINTERS           Y4386000
         $ZAC                      CLEAR AC AND                         Y4387000
         $STO  DBLKPOP              RESET PROPAGATION FLAG              Y4388000
         $LD   DBLKLRS             GET SCB POSITION FLAG                Y4389000
         $EOR  DBLKCN1             INVERT AND SWITCH                    Y4390000
         $STO  DBLKLRS             TO NEW POSITION                      Y4391000
DBLKSTO  $A    DBLKSPT             ADJUST                               Y4392000
         $STO  DBLKSPT              POINTER                             Y4393000
*********************************************************************** Y4394000
*              GET NEXT SCB AND TEST FOR END-OF RECORD                * Y4395000
*********************************************************************** Y4396000
DBLKGET  $LD   DBLKSPT,,I          GET SCB WORD                         Y4397000
         $MDM  DBLKLRS,0           TEST POSITION FLAG                   Y4398000
         $SRA  8                   RIGHT JUSTIFY SCB                    Y4399000
         $AND  DBLKCLH             CLEAR LEFT HALF                      Y4400000
         $STO  DBLKSCB             SAVE SCB                             Y4401000
         $BNZ  DBLKING             BRANCH IF NOT EOR                    Y4402000
*********************************************************************** Y4403000
*              END-OF-RECORD (SCB=0) DETECTED                         * Y4404000
*********************************************************************** Y4405000
DBLKEOR  $LD   DBLKLRS             SET                                  Y4406000
         $EOR  DBLKCN1              NEW                                 Y4407000
         $STO  UFCBPBS,WB,X          POSITION                           Y4408000
         $A    DBLKSPT                AND                               Y4409000
         $STO  UFCBPBA,WB,X            RCB                              Y4410000
DBLKSVA  $AXT  *-*,WA,L            RESTORE WA                           Y4411000
         $LD   DBLKSRC             SET                                  Y4412000
         $STO  TANKWRDC,WA,X        SRCB                                Y4413000
         $LD   DBLKTOT               AND                                Y4414000
         $STO  TANKWRDD,WA,X         COUNT                              Y4415000
         $B    SDBLOCK,,I           AND RETURN TO CALLER                Y4416000
DBLKBPC  DC    AL2(*-*)            PROPAGATION COUNT                    Y4417000
*********************************************************************** Y4418000
*              PUT CHARACTER DATA IN TANK AND/OR ADJUST POINTERS      * Y4419000
*********************************************************************** Y4420000
DBLKPUT  DC    AL2(*-*)            AC CONTAINS CHARACTER OR COUNT       Y4421000
         $MDM  DBLKPOP,0           TEST FOR BLANK PROPAGATION           Y4422000
         $B    DBLKPAP             BRANCH IF BLANK PROPAGATION          Y4423000
         $MDM  DBLKPLR,0           TEST TARGET WORD POSITION FLAG       Y4424000
         $B    DBLKPSR             BRANCH IF DATA TO RIGHT HALF         Y4425000
         $AND  DBLKPCR             CLEAR RIGHT HALF OF INPUT            Y4426000
         $OR   DBLKPDS             FORM PARTIAL DATA WORD               Y4427000
DBLKPXT  $STO  TANKWRDE,WA,X        AND STORE IN SPECIFIED TANK         Y4428000
         $LD   DBLKPLR             GET WORD POSITION FLAG               Y4429000
         $SKPZ                     SKIP IF WORD NOT FULL                Y4430000
         $MDX  1,WA                 OR POINT TO NEXT WORD               Y4431000
         $EOR  DBLKPC1             INVERT                               Y4432000
DBLKPXE  $STO  DBLKPLR              FLAG                                Y4433000
         $B    DBLKPUT,,I          EXIT                                 Y4434000
DBLKPSR  $RTE  16                  DATA TO EXT                          Y4435000
         $LD   TANKWRDE,WA,X       TARGET WORD TO AC                    Y4436000
         $SRA  8                    UPTIGHT TO DATA BYTE                Y4437000
         $SLT  8                     FORM NEW TARGET WORD               Y4438000
         $B    DBLKPXT                GO STORE IN TANK                  Y4439000
DBLKPAP  $SRA  1                   DIVIDE PROPAGATION COUNT             Y4440000
         $STO  DBLKPTO             SAVE COUNT/2                         Y4441000
         $LD   DBLKACT             GET ORIGINAL COUNT                   Y4442000
         $AND  DBLKPC1             REDUCE TO EVEN/ODD BIT               Y4443000
         $STO  DBLKPTT             SAVE EVEN/ODD BIT                    Y4444000
         $LD   DBLKPLR             GET PUT POSITION FLAG                Y4445000
         $AND  DBLKPTT             CALCULATE                            Y4446000
         $A    DBLKPTO              NEW                                 Y4447000
         $A    WA,,L                 WORD                               Y4448000
         $STO  WA,,L                  POINTER                           Y4449000
         $LD   DBLKPTT                 AND                              Y4450000
         $EOR  DBLKPLR                  PUT                             Y4451000
         $B    DBLKPXE                   FLAG                           Y4452000
DBLKPOP  DC    AL2(*-*)            SET NON-ZERO IF BLANK PROPAGATION    Y4453000
DBLKPC1  DC    AL2(1)              CONSTANT ONE                         Y4454000
DBLKPLR  DC    AL2(*-*)            STORE LEFT/RIGHT FLAG                Y4455000
DBLKPCR  DC    AL2(X'FF00')        CLEAR RIGHT HALF                     Y4456000
DBLKPDS  DC    AL2(*-*)            PARTIAL DATA WORD SKELETON           Y4457000
DBLKPTO  DC    AL2(*-*)            PROPAGATION COUNT/2                  Y4458000
DBLKPTT  DC    AL2(*-*)            COUNT EVEN/ODD BIT                   Y4459000
*********************************************************************** Y4460000
*              STORE WORD VALUE IN TANK AND/OR UPDATE POINTER         * Y4461000
*********************************************************************** Y4462000
DBLKSTF  DC    AL2(*-*)            AC CONTAINS WORD OR COUNT            Y4463000
         $MDM  DBLKPOP,0           TEST FOR BLANK PROPAGATION           Y4464000
         $B    DBLKSAP             BRANCH IF BLANK PROPAGATION          Y4465000
         $STO  TANKWRDE,WA,X       STORE INPUT IN TANK                  Y4466000
         $MDX  1,WA                STEP TO NEXT WORD                    Y4467000
         $B    DBLKSTF,,I          EXIT                                 Y4468000
DBLKSAP  $A    WA,,L               INCREMENT                            Y4469000
         $STO  WA,,L                POINTER                             Y4470000
         $B    DBLKSTF,,I          EXIT                                 Y4471000
*********************************************************************** Y4472000
*              FILL OUTPUT TANK WITH SPECIFIED VALUE                  * Y4473000
*********************************************************************** Y4474000
TPGTFIL  DC    AL2(*-*)            FILLER WORD IN AC                    Y4475000
         $STX  TPGTFLS+D1,WA       TANK ADDRESS IN WA                   Y4476000
         $STO  TPGTFWD             SAVE FILLER IN ODD LOCATION          Y4477000
         $LD   UFCBPWD,WB,X        GET WIDTH OF TARGET (EVEN)           Y4478000
         $STO  WC,,L               SET COUNT IN WC                      Y4479000
         $LDD  TPGTFWD             FILLER TO AC AND EXT                 Y4480000
TPGTFLP  $STD  TANKWRDE,WA,X        THEN TO TANK                        Y4481000
         $MDX  2,WA                STEP TO NEXT PAIR                    Y4482000
         $MDX  -4,WC               DECREMENT AND TEST COUNT             Y4483000
         $B    TPGTFLP             BRANCH IF MORE                       Y4484000
TPGTFLS  $AXT  *-*,WA,L            RESTORE WA                           Y4485000
         $B    TPGTFIL,,I          RETURN TO CALLER                     Y4486000
         $BSS  0,E                                                      Y4487000
         DC    AL2(0)              FILLER FILLER                        Y4488000
TPGTFWD  DC    AL2(*-*)            FILLER STORAGE                       Y4489000
         AIF   (&PR1132 EQ 0).NO1132Z                                   Y4490000
*********************************************************************** Y4491000
*              NUMERIC DATA CHECKER FOR 1132 PRINT DATA               * Y4492000
*********************************************************************** Y4493000
DBLKNCK  DC    AL2(*-*)            ENTRY WITH EBCDIC IN 8-15            Y4494000
         $SLA  8                   PROVIDE NUMERIC CHECK                Y4495000
         $B    DBLKNCK,,I           AT A LATER DATE...                  Y4496000
.NO1132Z ANOP                                                           Y4497000
         TITLE 'RTP1130 (TPPUT - PROCESS TP BUFFERS DESTINED FOR HASP)' Y4498000
*********************************************************************** Y4499000
* TITLE - TPPUT (PROCESSOR FOR DATA DESTINED FOR HASP)                * Y4500000
*                                                                     * Y4501000
* FUNCTION/PURPOSE -                                                  * Y4502000
*                                                                     * Y4503000
*  ACQUIRES A TP BUFFER FROM THE FREE CHAIN AND COLLECTS DATA         * Y4504000
*  FROM DEFINED SOURCES TO BE PROCESSED (CONVERTED,TRUNCATED,         * Y4505000
*  COMPRESSED OR WHATEVER) AND INSERTED INTO THE BUFFER               * Y4506000
*  WHICH IS QUEUED FOR TPIOX TRANSMISSION TO HASP.                    * Y4507000
*                                                                     * Y4508000
*********************************************************************** Y4509000
         SPACE 3                                                        Y4510000
*********************************************************************** Y4511000
*              TPPUT PROCESSOR TRANSFER VECTOR TABLE                  * Y4512000
*********************************************************************** Y4513000
TPPTVCT  $NULL                     TRANSFER VECTOR REFERENCE POINT      Y4514000
         $ADCON (TPPTCRC)          CONTROL RECORD PROCESSOR             Y4515000
         AIF   (&RD2501 EQ 0).NO25012                                   Y4516000
         $ADCON (TPPTTFO)          2501 INPUT PROCESSOR                 Y4517000
.NO25012 ANOP                                                           Y4518000
         AIF   (NOT &RD1442).NO14423                                    Y4519000
         $ADCON (TPPTFFT)          1442 INPUT PROCESSOR                 Y4520000
.NO14423 ANOP                                                           Y4521000
         $ADCON (TPPTCLX)          CONSOLE INPUT PROCESSOR              Y4522000
         $ADCON (TPPTEND)          END OF PROCESSOR PROCESSOR           Y4523000
         SPACE 3                                                        Y4524000
*********************************************************************** Y4525000
*              TPPUT STORAGE,CONSTANTS,ETC.                           * Y4526000
*********************************************************************** Y4527000
TPPTBFP  DC    AL2(*-*)            BUFFER POINTER                       Y4528000
TPPTHDR  $NULL                     BUFFER HEADER                        Y4529000
         AIF   (&TRANPRN EQ 0).NOXPRN0                                  Y4530000
         DC    AL2($BSXTTT)        TRANSPARENT TEXT HEADER              Y4531000
         AGO   .NOXPRN1                                                 Y4532000
.NOXPRN0 ANOP                                                           Y4533000
         DC    AL2($BSXTNT)        NORMAL TEXT HEADER                   Y4534000
.NOXPRN1 ANOP                                                           Y4535000
TPPTCRL  DC    AL1(X'80',4)        CONTROL RECORD LENGTH                Y4536000
TPPTCRD  DC    AL1(*-*,*-*,0,0)    CONTROL RECORD SKELETON              Y4537000
TPPTCNT  DC    AL2(5)              INITIAL DATA COUNT FOR TPBUILD       Y4538000
TPPTRCN  DC    AL2(&TPBFSZE-11)    INITIAL RESIDUAL BUFFER COUNT        Y4539000
TPPTMAX  DC    AL2(&NPTFBFL)       INPUT BUFFER LIMIT                   Y4540000
TPPTCN1  DC    AL2(1)              CONSTANT ONE                         Y4541000
*********************************************************************** Y4542000
*              TPPUT ENTRY POINT FROM COMMUTATOR                      * Y4543000
*********************************************************************** Y4544000
TPPUTEP  $NULL                                                          Y4545000
TPPUTVE  $B    TPPUTNI,,L          VARIABLE ENTRY POINT                 Y4546000
TPPUTNP  $B    TPPUTRT,,L          NON-PROCESS EXIT POINT               Y4547000
TPPUTXT  $BSI  TPPUTVE+D1          RESET ENTRY AND LEAVE                Y4548000
TPPUTNI  $NULL                     INITIAL ENTRY POINT                  Y4549000
         $LD   SPUTBFCT,,L         GET NUMBER OF ACTIVE BUFFERS         Y4550000
         $S    TPPTMAX             TEST FOR MAXIMUM ALLOWED             Y4551000
         $BZ   TPPUTRT             CYCLE IF MAXIMUM REACHED             Y4552000
         $DEQUE TPBUFFQP           GET A FREE BUFFER FROM CHAIN         Y4553000
         $BZ   TPPUTRT             NON-PROCESS EXIT IF NONE             Y4554000
         $STO  TPPTBFP             SAVE BUFFER ADDRESS                  Y4555000
         $LXA  TPPTBFP,WA          TO WA                                Y4556000
         $LD   TPPTHDR             SET BUFFER HEADER VALUE              Y4557000
         $STO  TPBUFHD,WA,X         TO APPROPRIATE INDICATOR            Y4558000
         $LD   TPPTCNT             SET TPBUILD  VALUES                  Y4559000
         $STO  TPBLCNT,,L           DATA COUNT..                        Y4560000
         $LD   TPPTRCN               RESIDUAL                           Y4561000
         $STO  TPBLRSC,,L             COUNT..                           Y4562000
         $MDX  TPBUFFR,WA,X        SET TPBUILD                          Y4563000
         $STX  TPBLTRG+D1,WA,L      DATA POINTER                        Y4564000
         $LD   SPUTBFCT,,L         INCREMENT                            Y4565000
         $A    TPPTCN1              ACTIVE                              Y4566000
         $STO  SPUTBFCT,,L           COUNT                              Y4567000
*********************************************************************** Y4568000
*              PROCESSOR SELECTION BASED ON ORDER OF TPPTVCT          * Y4569000
*********************************************************************** Y4570000
TPPTSQI  $AXT  *-*,WB,L            LOAD PROCESS SEQUENCE INDEX          Y4571000
         $B    TPPTVCT,WB,I        GO TO SELECTED PROCESS               Y4572000
         EJECT                                                          Y4573000
*********************************************************************** Y4574000
*              CONTROL RECORD CHECKER                                 * Y4575000
*********************************************************************** Y4576000
TPPTCRC  $NULL                                                          Y4577000
         $LD   SCRQUEUE,,L         GET CONTROL RECORD INDICATOR         Y4578000
         $BZ   TPPTSTP             STEP TO NEXT PROCESS IF NONE         Y4579000
         $STO  WC,,L               UFCB ADDRESS TO WC                   Y4580000
         $ZAC                      CLEAR AC AND SHOW                    Y4581000
         $STO  SCRQUEUE,,L          CONTROL RECORD PROCESSED            Y4582000
         $LD   UFCBSAR,WC,X        GET UFCB CONTROL RECORD VALUE        Y4583000
         $STO  TPPTCRD              AND BUILD CONTROL RECORD WITH EOB   Y4584000
         $LD   TPPTCRL             CONTROL RECORD LENGTH                Y4585000
         $AXT  TPPTCRD,WB,L         AND ADDRESS                         Y4586000
         $TSL  TPBUILD             INSERT CONTROL RECORD AND EOB        Y4587000
*********************************************************************** Y4588000
*              QUEUE TP BUFFER FOR TPIOX                              * Y4589000
*********************************************************************** Y4590000
TPPTQBF  $LD   TPBLCNT,,L          GET COUNT OF DATA                    Y4591000
         $LXA  TPPTBFP,WA          ADDRESS OF BUFFER                    Y4592000
         $STO  TPBUFCB,WA,X        STORE COUNT IN BUFFER                Y4593000
         $LD   TPPTBFP             BUFFER POINTER                       Y4594000
         $QACTL TPBUFOQP           QUEUE BUFFER FOR TPIOX               Y4595000
         $B    TPPUTXT,,L          EXIT AND SET ENTRY TO BEGINNING      Y4596000
         EJECT                                                          Y4597000
         AIF   (&RD2501 EQ 0).NO25011                                   Y4598000
*********************************************************************** Y4599000
*              INPUT PROCESSOR FOR 2501 READER                        * Y4600000
*********************************************************************** Y4601000
TPPTTFV  $ADCON (TPPTTFI)          INITIAL ENTRY POINT                  Y4602000
         $ADCON (TPPTTFG)          INSERT RETRY ENTRY POINT             Y4603000
TPPTTFO  $AXT  *-*,WB,L            GET SUBPROCESS INDEX                 Y4604000
         $B    TPPTTFV,WB,I        OFF TO SUBPROCESS                    Y4605000
TPPTTFI  $LD   SRDTTANK,,L         TEST FOR 2501 INPUT                  Y4606000
         $BZ   TPPTSTP             STEP TO NEXT PROCESS IF NO INPUT     Y4607000
         $AXT  RDTFUFCB,WC,L       2501 UFCB ADDRESS TO WC              Y4608000
         $TSL  TPCOMPR             OFF TO CONSTRUCT RECORD              Y4609000
         $STO  TPPTRCL             SAVE LENGTH OF RECORD                Y4610000
         $TSL  TPPUTVE+D1          CYCLE COMMUTATOR                     Y4611000
TPPTTFG  $LD   TPPTRCL             RESTORE LENGTH OF INSERT             Y4612000
         $AXT  RDTFUFCB,WC,L       REFRESH WC IF BUFFER TERMINATED      Y4613000
         $LXA  SRDTTANK,WB         ADDRESS OF RECORD FOR TPBUILD        Y4614000
         $TSL  TPBUILD             INSERT RECORD IN CURRENT BUFFER      Y4615000
         $BNZ  TPPTTFM             BRANCH IF NOT ENOUGH ROOM            Y4616000
         $STO  UFCBFQP,WC,X        RETURN INPUT TANK                    Y4617000
         $STO  TPPTTFO+D1          RESET SUBPROCESS TO BEGINNING        Y4618000
         $LD   UFCBBFP,WC,X        GET END-OF-FILE FLAG FROM UFCB       Y4619000
         $BNZ  TPPTEOF              AND BRANCH IF EOF ON INPUT DEVICE   Y4620000
         $B    TPPTSTP             STEP TO NEXT SEQUENCE                Y4621000
TPPTTFM  $MDM  TPPTTFO+D1,1        STEP TO NEXT SUBPROCESS              Y4622000
         $B    TPPTERM,,L          GO TERMINATE THIS BUFFER             Y4623000
TPPTRCL  DC    AL2(*-*)            RECORD LENGTH STORAGE                Y4624000
.NO25011 ANOP                                                           Y4625000
         EJECT                                                          Y4626000
*********************************************************************** Y4627000
*              WRITE END-OF-FILE AND TERMINATE BUFFER                 * Y4628000
*********************************************************************** Y4629000
TPPTEOF  $NULL                                                          Y4630000
         $LD   UFCBSAR,WC,X        GET RCB CODE FROM UFCB               Y4631000
         $SLA  8                   RCB TO HIGH ORDER AC                 Y4632000
         $OR   TPPTEFX             FORM                                 Y4633000
         $STO  TPPTEFS              EOF                                 Y4634000
         $LD   TPPTEFL             BYTE COUNT                           Y4635000
         $AXT  TPPTEFS,WB,L        EOF SEQUENCE ADDRESS                 Y4636000
         $TSL  TPBUILD             INSERT EOF,EOB SEQUENCE              Y4637000
         $ZAC                      CLEAR DEVICE                         Y4638000
         $STO  UFCBBFP,WC,X         EOF IN UFCB                         Y4639000
         $B    TPPTQBF             QUEUE BUFFER FOR HASP                Y4640000
TPPTEFX  DC    AL1(0,X'80')        SKELETON RCB, SRCB                   Y4641000
TPPTEFL  DC    AL1(X'80',4)        BYTE COUNT OF EOF,EOB SEQUENCE       Y4642000
TPPTEFS  DC    AL1(*-*,X'80',0,0)  RCB(X)-SRCB-SCB(0)-RCB(0)            Y4643000
         EJECT                                                          Y4644000
         AIF   (NOT &RD1442).NO14425                                    Y4645000
*********************************************************************** Y4646000
*              INPUT PROCESSOR FOR 1442 READER                        * Y4647000
*********************************************************************** Y4648000
TPPTFFV  $ADCON (TPPTFFI)          INITIAL ENTRY POINT                  Y4649000
         $ADCON (TPPTFFG)          RETRY INSERT ENTRY POINT             Y4650000
TPPTFFT  $AXT  *-*,WB,L            GET SUBPROCESS INDEX                 Y4651000
         $B    TPPTFFV,WB,I        OFF TO SELECTED SUBPROCESS           Y4652000
TPPTFFI  $LD   SRPFTANK,,L         TEST FOR 1442 INPUT                  Y4653000
         $BZ   TPPTSTP             STEP TO NEXT PROCESS IF NONE         Y4654000
         $AXT  RDFFUFCB,WC,L       1442 READER UFCB ADDRESS             Y4655000
         $LD   TPPTF80             REFRESH                              Y4656000
         $STO  SRPFTANK,,I          COUNT                               Y4657000
         $TSL  TPCOMPR             GO CONSTRUCT A RECORD                Y4658000
         $STO  TPPTRCX             SAVE RECORD LENGTH                   Y4659000
         $TSL  TPPUTVE+D1          CYCLE COMMUTATOR                     Y4660000
TPPTFFG  $LD   TPPTRCX             RESTORE RECORD LENGTH                Y4661000
         $AXT  RDFFUFCB,WC,L       REFRESH WC IF BUFFER TERMINATED      Y4662000
         $LXA  SRPFTANK,WB         ADDRESS OF RECORD FOR TPBUILD        Y4663000
         $TSL  TPBUILD             INSERT RECORD IN CURRENT BUFFER      Y4664000
         $BNZ  TPPTFFM             BRANCH IF NOT ENOUGH ROOM            Y4665000
         $STO  UFCBFQP,WC,X        RETURN INPUT TANK                    Y4666000
         $STO  TPPTFFT+D1          RESET SUBPROCESS TO BEGINNING        Y4667000
         $LD   UFCBBFP,WC,X        GET END-OF-FILE FLAG FROM UFCB       Y4668000
         $BNZ  TPPTEOF              AND BRANCH IF EOF ON INPUT DEVICE   Y4669000
         $B    TPPTSTP             STEP TO NEXT PROCESS                 Y4670000
TPPTFFM  $MDM  TPPTFFT+D1,1        STEP TO NEXT SUBPROCESS              Y4671000
         $B    TPPTERM,,L          GO TERMINATE THIS BUFFER             Y4672000
TPPTF80  DC    AL2(80)             INPUT COUNT                          Y4673000
TPPTRCX  DC    AL2(*-*)            RECORD LENGTH STORAGE                Y4674000
.NO14425 ANOP                                                           Y4675000
         EJECT                                                          Y4676000
*********************************************************************** Y4677000
*              PROCESSOR EXIT PROCEDURE                               * Y4678000
*********************************************************************** Y4679000
TPPTSTP  $NULL                                                          Y4680000
         $MDM  TPPTSQI+D1,1        STEP TO NEXT PROCESSOR               Y4681000
TPPTRXT  $AXT  TPPTSQI,WB,L        RESET VARIABLE ENTRY TO              Y4682000
         $STX  TPPUTVE+D1,WB,L      SEQUENCE SELECTOR                   Y4683000
         $B    TPPUTRT,,L          CYCLE COMMUTATOR                     Y4684000
*********************************************************************** Y4685000
*              LAST PROCESS PROCESSOR                                 * Y4686000
*********************************************************************** Y4687000
TPPTEND  $NULL                                                          Y4688000
         $ZAC                      RESET                                Y4689000
         $STO  TPPTSQI+D1,,L        SELECTOR                            Y4690000
         $B    TPPTRXT             EXIT                                 Y4691000
*********************************************************************** Y4692000
*              TERMINATE CURRENT BUFFER PROCESSING                    * Y4693000
*********************************************************************** Y4694000
TPPTERM  $NULL                                                          Y4695000
         $LD   TPPTNDL             LENGTH OF INSERT                     Y4696000
         $AXT  TPPTNDA,WB,L        ADDRESS OF EOB RCB                   Y4697000
         $TSL  TPBUILD             TRUNCATE BUFFER                      Y4698000
         $B    TPPTQBF,,L          GO QUEUE BUFFER                      Y4699000
TPPTNDL  DC    AL1(X'80',1)        EOB LENGTH                           Y4700000
TPPTNDA  DC    AL2(0)              EOB RCB                              Y4701000
*********************************************************************** Y4702000
*              CONSOLE INPUT PROCESSOR                                * Y4703000
*********************************************************************** Y4704000
TPPTCNP  $NULL                                                          Y4705000
TPPTCTV  $ADCON (TPPTCNI)          INITIAL ENTRY POINT                  Y4706000
         $ADCON (TPPTCRI)          RETRY ENTRY POINT                    Y4707000
TPPTCLX  $AXT  *-*,WB,L            GET SUBPROCESS INDEX                 Y4708000
         $B    TPPTCTV,WB,I        OFF TO SELECTED SUBPROCESS           Y4709000
TPPTCNI  $LD   SCONTANK,,L         TEST FOR KEYBOARD INPUT              Y4710000
         $BZ   TPPTSTP             STEP TO NEXT PROCESS IF NONE         Y4711000
         $AXT  CNSKUFCB,WC,L       CONSOLE KEYBOARD UFCB ADDRESS        Y4712000
         $TSL  TPCOMPR             GO CONSTRUCT A RECORD                Y4713000
         $STO  TPPTCDC             SAVE LENGTH OF INSERT                Y4714000
TPPTCRI  $LD   TPPTCDC             RESTORE IF BUFFER FULL               Y4715000
         $AXT  CNSKUFCB,WC,L       REFRESH FOR SAME REASON              Y4716000
         $LXA  SCONTANK,WB         ADDRESS OF RECORD FOR TPBUILD        Y4717000
         $TSL  TPBUILD             INSERT RECORD IN BUFFER              Y4718000
         $BNZ  TPPTCXT             BRANCH IF NOT ENOUGH ROOM            Y4719000
         $STO  UFCBFQP,WC,X        FREE INPUT TANK                      Y4720000
         $STO  TPPTCLX+D1          RESET SUBPROCESS TO BEGINNING        Y4721000
         $B    TPPTERM             GO TERMINATE BUFFER                  Y4722000
TPPTCXT  $MDM  TPPTCLX+D1,1        STEP TO NEXT SUBPROCESS              Y4723000
         $B    TPPTERM             GO TERMINATE BUFFER                  Y4724000
TPPTCDC  DC    AL2(*-*)            RECORD LENGTH                        Y4725000
         EJECT                                                          Y4726000
*********************************************************************** Y4727000
*                                                                     * Y4728000
* TITLE - TPCOMPR (MULTILEAVING RECORD CONSTRUCTION)                  * Y4729000
*                                                                     * Y4730000
* FUNCTION/PURPOSE -                                                  * Y4731000
*                                                                     * Y4732000
*  CONSTRUCTS A LOGICAL RECORD CONSISTING OF A PHYSICAL INPUT RECORD  * Y4733000
*  WHICH IS TRANSLATED, COMPRESSED, TRUNCATED AND ENRICHED WITH       * Y4734000
*  CONTROL BYTES NECESSARY FOR PROCESSING BY HASP.                    * Y4735000
*                                                                     * Y4736000
* CALLING SEQUENCE -                                                  * Y4737000
*                                                                     * Y4738000
*                             $TSL  TPCOMPR   LINKAGE                 * Y4739000
*                             ....            RETURN                  * Y4740000
*                                                                     * Y4741000
*                   WHERE --- (ON ENTRY) REGISTER WC CONTAINS         * Y4742000
*                             ADDRESS OF UFCB FOR SOURCE DEVICE       * Y4743000
*                                                                     * Y4744000
*                             (ON EXIT) AC CONTAINS LENGTH OF         * Y4745000
*                             PROCESSED RECORD (IN BYTES)             * Y4746000
*                             REGISTERS WA, AND WC ARE SAVED AND      * Y4747000
*                             RESTORED. AC, EXT AND WB ARE USED       * Y4748000
*                             BUT NOT RESTORED.                       * Y4749000
*                                                                     * Y4750000
*                             PROCESSED RECORD IS CONTAINED           * Y4751000
*                             IN ORIGINAL TANK DESIGNATED             * Y4752000
*                             BY INPUT UFCB....                       * Y4753000
*                                                                     * Y4754000
*  NOTE..THIS VERSION OF TPCOMPR ASSUMES CARD CODE INPUT RATHER       * Y4755000
*  THAN INTERROGATING THE INPUT CODE SPECIFIED BY THE UFCBNO          * Y4756000
*  FIELD FOR THE INPUT RECORD AND PROCESSING ACCORDING TO THE         * Y4757000
*  INDICATED VALUE. THE CHANGES REQUIRED TO SUPPORT VARIABLE          * Y4758000
*  INPUT CODES ARE NOT EXTENSIVE.                                     * Y4759000
*                                                                     * Y4760000
*********************************************************************** Y4761000
         EJECT                                                          Y4762000
         AIF   (&CMPTYPE GT 1).CMPT100                                  Y4763000
TPCOMPR  DC    AL2(*-*)                                                 Y4764000
*********************************************************************** Y4765000
*              INITIALIZATION                                         * Y4766000
*********************************************************************** Y4767000
         $STX  TPCO420+D1,WA,L     SAVE INDEX WA.                       Y4768000
         $STX  TPCO410+D1,WC,L     SAVE INDEX WC.                       Y4769000
         $LD   UFCBFQP,WC,X        POINT TO FIRST OF INPUT WDS- COUNT.  Y4770000
         $STO  TPCO110+D1          STORE THE                            Y4771000
         $STO  TPCO120+D1            POINTER IN                         Y4772000
         $STO  TPCO200+D1              ALL OF THE                       Y4773000
         $STO  TPCO220+D1                EXCLUSIVE OR'S.                Y4774000
         AIF   (&CMPTYPE LT 1).CMPT010                                  Y4775000
         $STO  TPCO010+D1          STORE THE POINTER FOR TRUNCATION.    Y4776000
.CMPT010 ANOP                                                           Y4777000
         $A    TPCOC1              UP POINTER TO FIRST TEXT WORD.       Y4778000
         $STO  TPCO100+D1          STORE                                Y4779000
         $STO  TPCO130+D1           THIS                                Y4780000
         $STO  TPCO140+D1            POINTER                            Y4781000
         $STO  TPCO150+D1             IN                                Y4782000
         $STO  TPCO210+D1              LOADS                            Y4783000
         $STO  TPCO250+D1               AND                             Y4784000
         $STO  TPCOP010+D1,,L            STORES.                        Y4785000
         $STO  TPCOFRST            SAVE POINTER TO FIRST TEXT WORD.     Y4786000
         AIF   (&CMPTYPE LT 1).CMPT020                                  Y4787000
         $LXA  TPCO110+D1,WA       GET POINTER TO COUNT WORD.           Y4788000
         $LD   0,WA                GET NUMBER OF WORDS OF TEXT.         Y4789000
         $STO  WB,,L               PUT IT IN WB FOR TRUNCATION.         Y4790000
*********************************************************************** Y4791000
*              TRUNCATE TRAILING BLANKS.  START WITH LAST WORD.       * Y4792000
*********************************************************************** Y4793000
TPCO010  $LD   *-*,WB,L            GET A WORD OF TEXT, AND              Y4794000
         $BNZ  TPCO020             BRANCH IF IT'S NON-BLANK.            Y4795000
         $MDX  -1,WB               OTHERWISE, POINT TO PREVIOUS         Y4796000
         $B    TPCO010             WORD AND LOOP.                       Y4797000
*********************************************************************** Y4798000
*              ALL BLANKS ARE TRUNCATED AND NOTHING'S LEFT.           * Y4799000
*********************************************************************** Y4800000
         $LD   UFCBFQP,WC,X        POINT TO THE FIRST INPUT WORD.       Y4801000
         $STO  WB,,L               RETURN POINTER IN INDEX WB.          Y4802000
         $LD   UFCBSAR,WC,X        NOW GET THE RECORD CONTROL BYTE      Y4803000
         $SLA  8                   AND LEFT-JUSTIFY IT IN THE ACC.      Y4804000
         $OR   TPCOX80             PUT AN SRCB TO ITS RIGHT.            Y4805000
         $STO  0,WB                STORE AS FIRST 2 BYTES OF OUTPUT.    Y4806000
         $LD   TPCOBLNK            THEN GET X'8100', A SINGLE-BLANK SCB Y4807000
         $STO  1,WB                AND AN EOR SCB, FOR 2D 2 BYTES.      Y4808000
         $LD   TPCOC4              LOAD THE ACC WITH COUNT OF 4,        Y4809000
         $B    TPCOMPR,,I          AND RETURN TO THE CALLER.            Y4810000
*********************************************************************** Y4811000
*              HERE AT END OF TRUNCATION.                             * Y4812000
*********************************************************************** Y4813000
TPCO020  $LD   WB,,L               THEN PICK UP TRUNCATED COUNT,        Y4814000
         $A    TPCOC1              UP IT BY 1, AND COMPARE              Y4815000
         $S    0,WA                WITH ORIGINAL COUNT.                 Y4816000
         $BNN  TPCO030             BRANCH IF NO TRUNCATION.             Y4817000
         $A    0,WA                OTHERWISE, RESTORE TRUNCATED         Y4818000
         $STO  0,WA                COUNT AND SET COUNT WORD.            Y4819000
.CMPT020 ANOP                                                           Y4820000
TPCO030  $LD   TPCO110+D1,,I       PICK UP THE COUNT                    Y4821000
         $STO  TPCOCNT             AND SAVE IT.                         Y4822000
         $S    TPCOC1              SUBTRACT 1 FROM IT, AND SET          Y4823000
         $STO  WA,,L               WA TO THE BACKWARD SCAN COUNT.       Y4824000
*********************************************************************** Y4825000
*              TAKE CARE OF RECORD AND SUB-RECORD CONTROL BYTES.      * Y4826000
*********************************************************************** Y4827000
         $LD   UFCBSAR,WC,X        GET THE RECORD CONTROL BYTE.         Y4828000
         $SLA  8                   LEFT-JUSTIFY IT IN THE ACC.          Y4829000
         $OR   TPCOX80             STICK AN SRCB TO ITS RIGHT.          Y4830000
         $STO  TPCO110+D1,,I       CLOBBER COUNT WORD WITH RCB+SRCB.    Y4831000
         $LD   WA,,L               CHECK FOR ONE WORD ONLY OF TEXT.     Y4832000
         $BZ   TPCO390             BRANCH IF SO.                        Y4833000
*********************************************************************** Y4834000
*              NOW PERFORM THE BACKWARD SCAN.                         * Y4835000
*********************************************************************** Y4836000
TPCO100  $LD   *-*,WA,L            GET A WORD OF TEXT, AND SEE IF       Y4837000
TPCO110  $EOR  *-*,WA,L            IT'S EQUAL TO THE PREVIOUS WORD.     Y4838000
         $BZ   TPCO200             BRANCH IF THE TWO WORDS ARE EQUAL.   Y4839000
TPCO120  $EOR  *-*,WA,L            OTHERWISE, RESTORE THE WORD, AND     Y4840000
         $TSL  SXPRESS             GO TRANSLATE IT.                     Y4841000
         $SKPN                     IF TRANSLATED WORD IS ZERO, ADD IN   Y4842000
         $OR   TPCOX100            X'0100' TO MAKE IT NONZERO FOR PACK. Y4843000
TPCO130  $STO  *-*,WA,L            THEN STORE THE RESULT BACK IN WORD.  Y4844000
TPCO135  $MDX  -1,WA               LOWER THE RELATIVE POINTER BY 1,     Y4845000
         $B    TPCO100             AND GO DO THE NEXT-LOWER WORD.       Y4846000
TPCO140  $LD   *-*,,L              WHEN WE FALL THROUGH,                Y4847000
         $TSL  SXPRESS             TRANSLATE THE FIRST WORD OF TEXT.    Y4848000
         $SKPN                     IF THE RESULTANT EBCDIC BYTE IS ZERO Y4849000
         $OR   TPCOX100            THEN FORCE THE WORD TO NON-ZERO.     Y4850000
TPCO150  $STO  *-*,,L              THEN SET THE TRANSLATED FIRST WORD,  Y4851000
         $SLT  16                  ZERO OUT THE EXT,                    Y4852000
         $B    TPCO300             AND GO PACK.                         Y4853000
TPCO200  $EOR  *-*,WA,L            RESTORE THE WORD OF TEXT.            Y4854000
         $TSL  SXPRESS             GO TRANSLATE IT TO EBCDIC.           Y4855000
         $SKPN                     IF RESULTANT BYTE IS ZERO,           Y4856000
         $OR   TPCOX100            FORCE THE WORD TO NONZERO.           Y4857000
         $RTE  16                  SAVE THE RESULT IN THE EXT.          Y4858000
         $LXA  WA,WB               SAVE WA IN WB.                       Y4859000
         $AXT  2,WC                SET INITIAL DUPLICATE COUNT TO 2.    Y4860000
         $B    TPCO230             NOW FIND NUMBER OF DUPLICATES.       Y4861000
TPCO210  $LD   *-*,WA,L            GET THE NEXT-LOWER WORD AND          Y4862000
TPCO220  $EOR  *-*,WA,L            COMPARE WITH WORD BEFORE IT.         Y4863000
         $BNZ  TPCO240             IF UNEQUAL,TO DO THE DUPLICATES.     Y4864000
         $MDX  1,WC                OTHERWISE, UP DUP COUNT BY 1,        Y4865000
TPCO230  $MDX  -1,WA               POINT TO NEXT-LOWER WORD,            Y4866000
         $B    TPCO210             AND GO DO NEXT LOWER WORD.           Y4867000
*********************************************************************** Y4868000
*              STORE EBCDIC IN DUP WORDS, AVOIDING $XPRESS CALLS      * Y4869000
*********************************************************************** Y4870000
TPCO240  $RTE  16                  PUT THE EBCDIC CHAR INTO ACC.        Y4871000
TPCO250  $STO  *-*,WB,L            STORE THE DUPLICATE IN A WORD.       Y4872000
         $MDX  -1,WC               REDUCE DUPLICATE COUNT BY 1.         Y4873000
         $B    TPCO260             BRANCH IF MORE TO GO.                Y4874000
         $B    TPCO135             OTHERWISE RESUME NON-DUPLICATE SCAN. Y4875000
TPCO260  $MDX  -1,WB               POINT TO THE PRECEDING WORD          Y4876000
         $B    TPCO250             AND GO STORE IN IT.                  Y4877000
         $B    TPCO150             OTHERWISE GO DO THE LAST STORE.      Y4878000
*********************************************************************** Y4879000
*              CONSTANTS                                              * Y4880000
*********************************************************************** Y4881000
TPCOCNT  DC    AL2(*-*)                                                 Y4882000
TPCOC1   DC    AL2(1)                                                   Y4883000
TPCOC63  DC    AL2(63)                                                  Y4884000
TPCOFRST DC    AL2(*-*)                                                 Y4885000
TPCOXC0  DC    AL2(X'C0')                                               Y4886000
TPCOX100 DC    AL2(X'100')                                              Y4887000
TPCOX80  DC    AL2(X'80')                                               Y4888000
TPCOBLNK DC    AL2(X'8100')                                             Y4889000
TPCOC4   DC    AL2(4)                                                   Y4890000
TPCOXC1  DC    AL2(X'C1')                                               Y4891000
*********************************************************************** Y4892000
*              NOW INSERT SCB'S AND PACK.                             * Y4893000
*********************************************************************** Y4894000
TPCO300  $LXA  TPCOFRST,WA         INITIALIZE- POINT WA TO 1ST TXT WD.  Y4895000
TPCO310  $LD   TPCOCNT             PICK UP THE REMAINING COUNT.         Y4896000
         $BNP  TPCO400             BRANCH IF ALL DONE TO CLEAN UP.      Y4897000
         $S    TPCOC63             OTHERWISE, COMPARE COUNT WITH 63.    Y4898000
         $STO  TPCOCNT             (SAVE UPDATED COUNT.)                Y4899000
         $BSC  N                   SKIP IF COUNT IS .LT. 63.            Y4900000
         $ZAC                      OTHERWISE, ZERO OUT THE ACC.         Y4901000
         $A    TPCOC63             ADD 63 TO ACC FOR COUNT.             Y4902000
         $STO  WB,,L               STICK THE COUNT IN INDEX WB.         Y4903000
         $OR   TPCOXC0             ADD SCB BITS TO THE COUNT.           Y4904000
         $BSI  TPCOPACK            GO PACK THE SCB.                     Y4905000
TPCO320  $LD   0,WA                THEN PACK EACH CHARACTER             Y4906000
         $BSI  TPCOPACK            OF THE CHARACTER STRING.             Y4907000
         $MDX  1,WA                POINT TO THE NEXT CHARACTER,         Y4908000
         $MDX  -1,WB               LOWER THE COUNT BY ONE,              Y4909000
         $B    TPCO320             AND PACK AGAIN.                      Y4910000
         $B    TPCO310             THEN TRY FOR ANOTHER STRING.         Y4911000
*********************************************************************** Y4912000
*              SINGLE CHARACTER OF TEXT, I.E., TEXT COUNT IS 1.       * Y4913000
*********************************************************************** Y4914000
TPCO390  $LD   TPCOXC1             GET A SINGLE-CHARACTER SCB, AND      Y4915000
         $BSI  TPCOPACK            PACK IT INTO OUTPUT.                 Y4916000
         $LD   TPCOP010,,I         GET THE ONLY TEXT CHARACTER.         Y4917000
         $TSL  SXPRESS             TRANSLATE IT TO EBCDIC.              Y4918000
         $SKPN                     SKIP IF RESULT IS NONZERO.           Y4919000
         $OR   TPCOX100            OTHERWISE ADD A BIT FOR PACK.        Y4920000
         $BSI  TPCOPACK            THEN PACK IT INTO THE OUTPUT.        Y4921000
*********************************************************************** Y4922000
*              CLEAN UP AND RETURN TO CALLER.                         * Y4923000
*********************************************************************** Y4924000
TPCO400  $LD   TPCOX100            GET EOR SCB PLUS A BIT FOR PACK.     Y4925000
         $BSI  TPCOPACK            PACK THE END-OF-RECORD SCB.          Y4926000
         $LD   TPCOC1              GET THE CONSTANT '1' AND PACK        Y4927000
         $BSI  TPCOPACK            IT FOR LENGTH DETERMINATION.         Y4928000
TPCO410  $LDX  *-*,WC,L            RESTORE INDEX WC, THE UFCB POINTER.  Y4929000
         $LD   UFCBFQP,WC,X        POINT TO INPUT AREA AS THE OUTPUT.   Y4930000
         $STO  WB,,L               SET WB TO POINT TO THE OUTPUT.       Y4931000
         $LD   TPCOP010+D1         POINT TO WD AFTER LAST WORD PACKED.  Y4932000
         $S    UFCBFQP,WC,X        SUBTRACT POINTER TO INPUT AREA.      Y4933000
         $SLA  1                   MULTIPLY WORDS BY 2 FOR BYTES.       Y4934000
         $STO  WA,,L               STICK THE COUNT IN WA TEMPORARILY.   Y4935000
         $RTE  16                  PUT THE EXT INTO THE ACC.            Y4936000
         $SKPN                     SKIP IF THE EXT WASN'T ZERO.         Y4937000
         $MDX  -1,WA               THE BYTE COUNT BY ONE.               Y4938000
         $LD   WA,,L               RETURN TRUE BYTE COUNT IN ACC.       Y4939000
TPCO420  $LDX  *-*,WA,L            RESTORE THE CALLER'S WA,             Y4940000
         $LXA  TPCOFRST,WB         POINT TO SECOND WD OF INPUT, AND SUB Y4941000
         $MDX  -1,WB               TRACT 1 TO POINT TO FIRST WORD.      Y4942000
         $B    TPCOMPR,,I          THEN RETURN TO THE CALLER.           Y4943000
         AGO   .CMPT200                                                 Y4944000
.CMPT100 ANOP                                                           Y4945000
         AIF   (NOT &DOCUMNT).NODOC01                                   Y4946000
*                                                                     * Y4947000
*      THIS ROUTINE TRANSLATES, COMPRESSES, AND TRUNCATES A VARIABLE- * Y4948000
* LENGTH 1130-CARD-CODE RECORD INTO VARIOUS CONTROL BYTES AND EBCDIC  * Y4949000
* CHARACTERS, AND PACKS THEM TWO TO A WORD.  THE CONTROL BYTES ARE-   * Y4950000
* ONE RECORD CONTROL BYTE (RCB), THE FIRST BYTE OF THE OUTPUT.  ONE   * Y4951000
* SUB-RECORD CONTROL BYTE (SRCB), THE SECOND BYTE OF THE OUTPUT.      * Y4952000
* SEVERAL STRING CONTROL BYTES (SCB'S), OF WHICH THE FIRST SCB IS THE * Y4953000
* THIRD BYTE OF THE OUTPUT, AND THE LAST SCB IS THE END-OF-RECORD     * Y4954000
* (EOR) SCB.  EACH SCB, EXCEPT THE EOR SCB AND THE SCB DESCRIBING A   * Y4955000
* COMPRESSED STRING OF BLANKS, IS FOLLOWED BY ONE OR MORE CHARACTERS. * Y4956000
* THESE CHARACTERS CONSTITUTE THE STRING DESCRIBED BY THE SCB.        * Y4957000
*                                                                     * Y4958000
*      TRANSLATION IS THE PROCESS OF CONVERTING A CARD-CODE WORD TO   * Y4959000
* AN EBCDIC BYTE.  THIS ROUTINE USES SYSTEM SUBROUTINE $XPRESS TO     * Y4960000
* PERFORM TRANSLATION.  FOR EXAMPLE, A WORD CONTAINING X'9000' (A     * Y4961000
* 12-1 PUNCH IN A CARD COLUMN, THE LETTER A) WOULD BE TRANSLATED TO   * Y4962000
* X'00C1', THE EBCDIC CODE FOR THE LETTER A.                          * Y4963000
*                                                                     * Y4964000
*      COMPRESSION IS THE PROCESS OF FINDING STRINGS OF DUPLICATE     * Y4965000
* BLANK OR NONBLANK CHARACTERS AND REDUCING THE LENGTH OF THE STRINGS * Y4966000
* SO THAT THE TRANSMISSION LINE WILL HAVE FEWER BYTES TO SEND TO THE  * Y4967000
* CENTRAL PROCESSOR.  A SINGLE SCB CAN DO DUTY FOR A STRING OF AS     * Y4968000
* MANY AS 31 BLANKS.  FOR DUPLICATE NONBLANK CHARACTERS, A TWO-BYTE   * Y4969000
* SEQUENCE CONSISTING OF AN SCB AND AN EBCDIC CHARACTER CAN REPLACE   * Y4970000
* AS MANY AS 31 CHARACTERS.                                           * Y4971000
*                                                                     * Y4972000
*      TRUNCATION IS THE PROCESS OF DELETING ALL TRAILING BLANKS BUT  * Y4973000
* ONE, TO FURTHER REDUCE THE LOAD ON THE TRANSMISSION LINE AND TO     * Y4974000
* CONSERVE SPACE ON SPOOL VOLUMES.  FOR EXAMPLE, AN ALL-BLANK CARD    * Y4975000
* WOULD BE TRUNCATED TO A SINGLE BLANK (REQUIRING TRANSMISSION OF 4   * Y4976000
* BYTES- RCB, SRCB, AND TWO SCB'S), WHEREAS A CARD WITH ONLY A NON-   * Y4977000
* BLANK CHARACTER IN COLUMN 80 WOULD REQUIRE TRANSMISSION OF 8 BYTES- * Y4978000
* RCB, SRCB, THREE SCB'S REPRESENTING STRINGS OF 31, 31, AND 17       * Y4979000
* BLANKS, AN SCB DESCRIBING AN UNCOMPRESSED STRING OF ONE CHARACTER,  * Y4980000
* THE CHARACTER ITSELF, AND AN EOR SCB.                               * Y4981000
*                                                                     * Y4982000
*      PACKING IS THE PROCESS OF SQUEEZING TWO 8-BIT BYTES INTO A     * Y4983000
* SINGLE 1130 WORD.  THE TWO BYTES MAY BE BOTH CONTROL BYTES, BOTH    * Y4984000
* EBCDIC CHARACTERS, OR ONE OF EACH.                                  * Y4985000
*                                                                     * Y4986000
*                                                                     * Y4987000
*      THIS ROUTINE PROCEEDS IN TWO PHASES - A BACKWARD SCAN WHICH    * Y4988000
* PROCEEDS SMOOTHLY FROM THE LAST TEXT WORD TO THE FIRST TEXT WORD,   * Y4989000
* AND A FORWARD SCAN WHICH PROCEEDS JERKILY FROM THE FIRST WORD TO    * Y4990000
* THE LAST WORD.                                                      * Y4991000
*                                                                     * Y4992000
*      THE BACKWARD SCAN STARTS WITH CARD-CODE CHARACTERS, ONE PER    * Y4993000
* 1130 WORD, AND LEAVES BEHIND IT THE SAME NUMBER OF WORDS, EACH WORD * Y4994000
* CONTAINING EITHER AN EBCDIC CHARACTER IN BITS 8-15 (WITH THE SIGN   * Y4995000
* BIT ALWAYS OFF) OR A NEGATIVE NUMBER WHICH IS SORT OF A DUPLICATION * Y4996000
* COUNT.  IF THE EBCDIC CHARACTER IS X'00' (CARD PUNCHES 12-0-9-8-1)  * Y4997000
* THEN BIT 7 IS FORCED TO A 1, FOR REASONS HAVING TO DO WITH THE PACK * Y4998000
* SUBROUTINE.                                                         * Y4999000
*                                                                     * Y5000000
*      THE FORWARD SCAN TAKES ALL THIS STUFF AND MAKES SCB'S FOLLOWED * Y5001000
* BY CHARACTER STRINGS, PACKING AS IT GOES.  IT DISCOVERS A STRING OF * Y5002000
* DUPLICATE (BLANK OR NON-BLANK) CHARACTERS AS A POSITIVE WORD        * Y5003000
* FOLLOWED BY A NEGATIVE WORD - THE POSITIVE WORD CONTAINS THE CHAR-  * Y5004000
* ACTER TO BE DUPLICATED, AND THE NEGATIVE WORD CONTAINS THE 2'S      * Y5005000
* COMPLEMENT OF THE NUMBER OF DUPLICATE CHARACTERS.  WHEN IT ENCOUN-  * Y5006000
* TERS A DUPLICATE STRING, THE FORWARD SCAN CREATES AND PACKS ONE OR  * Y5007000
* MORE SCB'S, EACH SCB EXCEPT THE LAST REPRESENTING 31 CHARACTERS.    * Y5008000
* (STRINGS OF TWO NONBLANK DUPLICATE CHARACTERS ARE NOT HANDLED AS    * Y5009000
* DUPLICATE CHARACTERS.  THEY ARE REPAIRED BY MAKING THE SECOND (NEG- * Y5010000
* ATIVE) WORD THE SAME AS THE FIRST (POSITIVE) WORD.)  AFTER SUCH A   * Y5011000
* DUPLICATE STRING HAS BEEN PROCESSED, THE FORWARD SCAN ROUTINE TAKES * Y5012000
* A GREAT LEAP FORWARD TO THE NEXT WORD TO BE PROCESSED.              * Y5013000
*      FORWARD SCAN ASSUMES NON-DUPLICATE CHARACTERS UNTIL IT FINDS   * Y5014000
* OTHERWISE.  THUS IF, UPON SCANNING THE FIRST FEW WORDS, IT DISCO-   * Y5015000
* VERS THAT WORDS 1-6 ARE POSITIVE AND WORD 7 IS NEGATIVE, THEN       * Y5016000
* (UNLESS WORD 6 IS NONBLANK AND WORD 7 EQUALS -2) IT MUST MAKE A 5-  * Y5017000
* BYTE STRING OF NON-DUPLICATE CHARACTERS.  TO DO THIS, IT CREATES    * Y5018000
* AND PACKS THE APPROPRIATE SCB AND THEN TAKES A GREAT LEAP BACKWARD  * Y5019000
* TO WORD 1 TO START PACKING THE EBCDIC CHARACTERS IT HAS FOUND IN    * Y5020000
* THE RIGHT HALVES OF WORDS 1 THROUGH 5.  WHEN IT HAS COMPLETED PACK- * Y5021000
* ING THE 5 BYTES, FORWARD SCAN REDISCOVERS THAT WORD 6 IS FOLLOWED   * Y5022000
* BY A NEGATIVE WORD AND PROCEEDS WITH DUPLICATION, AS ABOVE.         * Y5023000
*                                                                     * Y5024000
*      IF YOU'RE TRYING TO FOLLOW THE CODE, YOU SHOULD KNOW THAT      * Y5025000
* THERE ARE TWO SPECIAL CASES, ONE FOR BACKWARD SCAN AND ONE FOR FOR- * Y5026000
* WARD SCAN.                                                          * Y5027000
*                                                                     * Y5028000
*      FOR BACKWARD SCAN, THE SPECIAL CASE IS THE FIRST WORD OF TEXT. * Y5029000
* ANY OTHER WORD MAY END UP EITHER BEING TRANSLATED TO EBCDIC OR      * Y5030000
* BEING SET TO A NEGATIVE STRING COUNT, BUT THE FIRST WORD WILL AL-   * Y5031000
* WAYS BE TRANSLATED TO EBCDIC.  FURTHERMORE, EVERY WORD BUT THE      * Y5032000
* FIRST IS COMPARED WITH THE WORD PRECEDING IT, TO CHECK FOR DUPLI-   * Y5033000
* CATION.  THUS THE LOOP COUNTER IS SET INITIALLY TO COUNT-1, NOT TO  * Y5034000
* COUNT, AND THE FIRST WORD OF TEXT IS TRANSLATED TO EBCDIC OUTSIDE   * Y5035000
* THE LOOP AND AFTER ALL OTHER WORDS HAVE BEEN PROCESSED.             * Y5036000
*                                                                     * Y5037000
*      FOR FORWARD SCAN, THE LAST WORD OF TEXT WILL SOMETIMES BE A    * Y5038000
* SPECIAL CASE, SINCE HERE, TOO, THE LOOP COUNTER WILL NEVER BE       * Y5039000
* GREATER THAN THE NUMBER OF CHARACTERS REMAINING MINUS ONE.  IF THE  * Y5040000
* LAST WORD IS NEGATIVE (SPECIFICALLY, -2 OR LESS IF THE NEXT-TO-LAST * Y5041000
* WORD IS BLANK, OR -3 OR LESS IF THE NEXT-TO-LAST WORD IS NONBLANK)  * Y5042000
* THE SPECIAL CASE WILL NOT OCCUR.  OTHERWISE, THE LAST WORD MUST BE  * Y5043000
* MADE PART OF A NON-DUPLICATE CHARACTER STRING.  THE 7 LINES OF CODE * Y5044000
* AT TPCO150 ATTEMPT TO UP THE CURRENT (NON-DUPLICATE) STRING LENGTH  * Y5045000
* BY 1 TO ACCOMMODATE THE LAST CHARACTER.  IF THAT CANNOT BE DONE     * Y5046000
* (THE CURRENT LENGTH IS ALREADY 63, THE MAXIMUM) THEN THE EXITING    * Y5047000
* PROCEDURE AT TPCO300 WILL BUILD AND PACK THE NECESSARY SCB AND THE  * Y5048000
* LAST CHARACTER.                                                     * Y5049000
*                                                                     * Y5050000
*                                                                     * Y5051000
*      AS AN EXAMPLE OF THE OPERATION OF BACKWARD SCAN, CONSIDER AN   * Y5052000
* INPUT OF TEN WORDS, CONSISTING OF THE CARD-CODE EQUIVALENTS OF 4    * Y5053000
* BLANKS, 3 A'S, 2 B'S, AND A C.  THIS IS                             * Y5054000
*        DC  XL2'0000,0000,0000,0000,9000,9000,9000,8800,8800,8400'.  * Y5055000
* WHEN BACKWARD SCAN GETS THROUGH, IT LEAVES BEHIND                   * Y5056000
*        DC  XL2'0040,FFFC,FFFD,FFFE,00C1,FFFD,FFFE,00C2,FFFE,00C3'.  * Y5057000
* FORWARD SCAN WILL COMPRESS AND PACK THIS INTO THE BYTE STRING       * Y5058000
*        DC  XL1'84,A3,C1,C3,C2,C2,C3'.                               * Y5059000
*                                                                     * Y5060000
.NODOC01 ANOP                                                           Y5061000
TPCOMPR  DC    AL2(*-*)                                                 Y5062000
         EJECT                                                          Y5063000
*********************************************************************** Y5064000
*              INITIALIZATION.                                        * Y5065000
*********************************************************************** Y5066000
         $STX  TPCO320+D1,WA,L     SAVE INDEX WA.                       Y5067000
         $STX  TPCO330+D1,WC,L     SAVE INDEX WC.                       Y5068000
         $LD   UFCBFQP,WC,X        GET A POINTER TO THE INPUT.          Y5069000
         $STO  WA,,L               PUT IT INTO INDEX WA.                Y5070000
         $LD   0,WA                GET NUMBER OF WORDS TO PROCESS.      Y5071000
         $A    WA,,L               POINT TO LAST WORD TO PROCESS.       Y5072000
         $STO  TPCOLAST            SAVE POINTER.                        Y5073000
         $STX  TPCO020+D1,WA       SET $EOR'S TO POINT TO THE           Y5074000
         $STX  TPCO030+D1,WA       WORD BEFORE 1ST WORD OF TEXT.        Y5075000
         $MDX  1,WA                NOW POINT WA TO 1ST INPUT WORD.      Y5076000
         $STX  TPCO010+D1,WA       SET $LD'S AND $STO'S TO POINT TO     Y5077000
         $STX  TPCO050+D1,WA       THE FIRST WORD OF TEXT.              Y5078000
         $STX  TPCO060+D1,WA       SET $LD TO POINT TO FIRST WORD.      Y5079000
         $STX  TPCOFRST,WA         SAVE POINTER TO FIRST WORD.          Y5080000
         $STX  TPCOP010+D1,WA,L    SET UP THE PACK ROUTINE.             Y5081000
*********************************************************************** Y5082000
*              STORE RCB + SRCB OVER THE COUNT WORD OF INPUT BUFFER.  * Y5083000
*********************************************************************** Y5084000
         $LD   UFCBSAR,WC,X        GET THE RECORD CONTROL BYTE.         Y5085000
         $SLA  8                   SHIFT IT LEFT 8 BITS.                Y5086000
         $OR   TPCOX80             OR IN HEXADECIMAL 80 FOR SRCB.       Y5087000
         $STO  -1,WA               STORE RCB+SRCB OVER THE COUNT.       Y5088000
         EJECT                                                          Y5089000
*********************************************************************** Y5090000
*              SET UP TO SCAN BACKWARDS.  ON BACKWARD SCAN, NON-DUPLI-* Y5091000
*              CATE WORDS WILL BE IMMEDIATELY TRANSLATED. FOR STRINGS * Y5092000
*              OF TWO OR MORE DUPLICATE WORDS, ONLY THE TWO LEFTMOST  * Y5093000
*              WORDS HAVE MEANING. THEY ARE, FROM LEFT TO RIGHT, THE  * Y5094000
*              TRANSLATED WORD AND A NEGATIVE COUNT OF THE NUMBER OF  * Y5095000
*              DUPLICATE WORDS IN THE STRING.                         * Y5096000
*********************************************************************** Y5097000
         $LD   TPCOLAST            POINT TO LAST CHARACTER TO PROCESS.  Y5098000
         $S    TPCOFRST            SUBTRACT POINTER TO FIRST CHARACTER. Y5099000
         $BZ   TPCO060             BR IF ONLY ONE WORD OF INPUT.        Y5100000
         $STO  WA,,L               PUT THIS OVERALL CT IN INDEX WA.     Y5101000
         $AXT  -1,WB               SET DUPLICATE COUNTER TO -1.         Y5102000
TPCO010  $LD   *-*,WA,L            GET A CARD-CODE CHARACTER.           Y5103000
TPCO020  $EOR  *-*,WA,L            IS IT SAME AS PREVIOUS CHARACTER...  Y5104000
         $BZ   TPCO040             BRANCH IF YES TO UP THE DUP COUNTER. Y5105000
TPCO030  $EOR  *-*,WA,L            NO. RESTORE THE CARD-CODE CHARACTER, Y5106000
         $TSL  SXPRESS             AND GO TRANSLATE IT TO EBCDIC.       Y5107000
         $SKPN                     SKIP IF NONZERO. OTHERWISE,          Y5108000
         $OR   TPCOX100            ADD A BIT FOR TPCOPACK.              Y5109000
         $AXT  -1,WB               RESET THE DUPLICATE COUNTER TO -1.   Y5110000
         $B    TPCO050             THEN GO STORE EBCDIC IN WORD.        Y5111000
*********************************************************************** Y5112000
*              CURRENT CHARACTER MATCHES THE ONE ON ITS LEFT.         * Y5113000
*********************************************************************** Y5114000
TPCO040  $MDX  -1,WB               UP THE DUPLICATE COUNTER BY -1.      Y5115000
         $LD   WB,,L               PREPARE TO STORE DUP CTR IN CUR WD.  Y5116000
*                                                                       Y5117000
*                                                                       Y5118000
TPCO050  $STO  *-*,WA,L            STORE ACC IN CURRENT WORD.           Y5119000
         $MDX  -1,WA               NOW POINT TO THE PREVIOUS CARD-CODE  Y5120000
         $B    TPCO010             CHARACTER AND PROCESS IT.            Y5121000
*********************************************************************** Y5122000
*              STORE INTO WORD EITHER EBCD CHAR OR DUP CTR, AND LOOP. * Y5123000
*              IN ALL CASES, TRANSLATE THE FIRST CARD-CODE CHARACTER. * Y5124000
*********************************************************************** Y5125000
TPCO060  $LD   *-*,,L              GET THE FIRST WORD OF INPUT.         Y5126000
         $TSL  SXPRESS             TRANSLATE IT TO EBCDIC.              Y5127000
         $SKPN                     SKIP IF NONZERO. OTHERWISE,          Y5128000
         $OR   TPCOX100            MAKE SURE IT'S NONZERO FOR TPCOPACK, Y5129000
         $STO  TPCO060+D1,,I       AND PUT IT BACK.                     Y5130000
         EJECT                                                          Y5131000
*********************************************************************** Y5132000
*              SET UP TO START THE FORWARD SCAN.                      * Y5133000
*********************************************************************** Y5134000
         $SLT  16                  ZERO OUT THE EXT FOR TPCOPACK.       Y5135000
         $LXA  TPCOFRST,WA         POINT TO FIRST WORD.                 Y5136000
*********************************************************************** Y5137000
*              COMPUTE COUNT TO SCAN - EITHER 63 OR NUMBER OF         * Y5138000
*              CHARACTERS REMAINING MINUS 1, WHICHEVER IS LESS.       * Y5139000
*********************************************************************** Y5140000
TPCO100  $LD   TPCOLAST            POINT TO LAST WORD.                  Y5141000
         $S    WA,,L               SUBTRACT CURRENT WORD.               Y5142000
         $BNP  TPCO300             BRANCH IF DONE.                      Y5143000
         $S    TPCOC63             IS COUNT GREATER THAN 63...          Y5144000
         $BNN  TPCO110             BRANCH IF YES.                       Y5145000
         $A    TPCOC63             NO, .LE. 63.  RESTORE THE COUNT      Y5146000
         $B    TPCO120             AND BRANCH.                          Y5147000
TPCO110  $LD   TPCOC63             COUNT IS .GT. 63. SET COUNTER TO 63. Y5148000
TPCO120  $STO  TPCOCNT             SAVE COUNT FOR USE LATER.            Y5149000
         $STO  WB,,L               SET WB TO THE COUNT FOR LOOP.        Y5150000
         $LXA  WA,WC               SAVE LOC OF FIRST WORD IN INDEX WC.  Y5151000
*********************************************************************** Y5152000
*              ATTEMPT TO FIND A CHARACTER STRING.                    * Y5153000
*********************************************************************** Y5154000
TPCO130  $LD   1,WA                LOAD THE NEXT WORD INTO THE ACC.     Y5155000
         $BN   TPCO200             BRANCH IF IT SHOWS DUPLICATION.      Y5156000
TPCO140  $MDX  1,WA                OTHERWISE POINT TO THE NEXT WORD,    Y5157000
         $MDX  -1,WB               LOWER THE COUNT BY ONE,              Y5158000
         $B    TPCO130             AND EXAMINE THE NEXT WORD.           Y5159000
*********************************************************************** Y5160000
*              A STRING NOW EXISTS THAT'S 63 CHARS OR GOES TO EOR     * Y5161000
*********************************************************************** Y5162000
TPCO150  $LD   WA,,L               LOOK AT POINTER TO CURRENT WORD.     Y5163000
         $S    TPCOLAST            IS CURRENT WORD THE LAST WORD...     Y5164000
         $BNZ  TPCO155             BRANCH IF NOT- COUNT IS CORRECT.     Y5165000
         $LD   TPCOCNT             CURRENT WORD IS LAST WORD.  SEE IF   Y5166000
         $S    TPCOC63             THE COUNT IS THE MAXIMUM (63).       Y5167000
         $BZ   TPCO155             BRANCH IF SO.                        Y5168000
         $MDM  TPCOCNT,1           OTHERWISE INCLUDE LAST WORD IN CT.   Y5169000
*********************************************************************** Y5170000
*              SET A CHARACTER-STRING SCB INTO THE OUTPUT STREAM.     * Y5171000
*********************************************************************** Y5172000
TPCO155  $LXA  TPCOCNT,WB          PICK UP THE STRING COUNT INTO WB     Y5173000
TPCO160  $LD   WB,,L               FORM A STRING CONTROL BLOCK OF       Y5174000
         $OR   TPCOXC0             THE COUNT PLUS X'C0', AND            Y5175000
         $BSI  TPCOPACK,,L         PACK THE SCB INTO THE OUTPUT.        Y5176000
*********************************************************************** Y5177000
*              PACK THE CHARACTERS INTO OUTPUT FOLLOWING THE SCB.     * Y5178000
*********************************************************************** Y5179000
TPCO170  $LD   0,WC                GET A WORD OF EBCDIC.                Y5180000
         $BSI  TPCOPACK            PACK IT INTO THE OUTPUT STREAM.      Y5181000
         $MDX  1,WC                POINT TO THE NEXT WORD.              Y5182000
         $MDX  -1,WB               REDUCE THE COUNT BY ONE.             Y5183000
         $B    TPCO170             BRANCH IF MORE CHARACTERS TO DO.     Y5184000
         $LXA  WC,WA               THEN SET WA TO THE CURRENT           Y5185000
         $B    TPCO100             POINTER AND GET ANOTHER STRING.      Y5186000
*********************************************************************** Y5187000
*              CONSTANTS                                              * Y5188000
*********************************************************************** Y5189000
TPCOFRST DC    AL2(*-*)            POINTER TO FIRST WORD OF TEXT.       Y5190000
TPCOLAST DC    AL2(*-*)            POINTER TO LAST WORD OF TEXT.        Y5191000
TPCOCNT  DC    AL2(*-*)            SCAN COUNT. SEE COMMENTS AT TPCO100. Y5192000
TPCOX80  DC    AL2(X'80')                                               Y5193000
TPCOC1   DC    AL2(1)                                                   Y5194000
TPCOX100 DC    AL2(X'100')                                              Y5195000
TPCOC63  DC    AL2(63)                                                  Y5196000
TPCOXC0  DC    AL2(X'C0')                                               Y5197000
TPCOC2   DC    AL2(2)                                                   Y5198000
TPCOX40  DC    AL2(X'40')                                               Y5199000
TPCOX9F  DC    AL2(X'9F')                                               Y5200000
TPCOC31  DC    AL2(31)                                                  Y5201000
TPCOXBF  DC    AL2(X'BF')                                               Y5202000
TPCOXA0  DC    AL2(X'A0')                                               Y5203000
TPCOX81  DC    AL2(X'81')                                               Y5204000
TPCOXC1  DC    AL2(X'C1')                                               Y5205000
*********************************************************************** Y5206000
*              A POSSIBLE DUPLICATE PLUS A POSSIBLE STRING EXISTS     * Y5207000
*********************************************************************** Y5208000
TPCO200  $A    TPCOC2              ADD TWO TO THE (NEGATIVE) DUP COUNT, Y5209000
         $BN   TPCO210             AND BRANCH IF COUNT WAS .GT. 2.      Y5210000
         $LD   0,WA                OTHERWISE, CHECK THE DUP CHARACTER   Y5211000
         $EOR  TPCOX40             FOR BLANK.  IF CHARACTER IS BLANK,   Y5212000
         $BZ   TPCO210             BRANCH TO DUPLICATE.                 Y5213000
         $LD   0,WA                OTHERWISE, REPEAT THE CHARACTER      Y5214000
         $STO  1,WA                ONCE, AND RETURN TO CONTINUE         Y5215000
         $B    TPCO140             THE CHARACTER-STRING SCAN.           Y5216000
*********************************************************************** Y5217000
*              A DEFINITE DUPLICATE PLUS A POSSIBLE STRING EXISTS     * Y5218000
*********************************************************************** Y5219000
TPCO210  $LD   TPCOCNT             CHECK FOR POSSIBLE STRING- GET ORIG  Y5220000
         $S    WB,,L               COUNT VALUE AND SUBTR CURRENT VALUE. Y5221000
         $BZ   TPCO220             BRANCH IF NO CHARACTER STRING.       Y5222000
         $STO  WB,,L               OTHERWISE SET WB TO STRING COUNT,    Y5223000
         $B    TPCO160             AND GO DO THE STRING.                Y5224000
*********************************************************************** Y5225000
*              DUPLICATE PROCESSING. CHECK FOR BLANK.                 * Y5226000
*********************************************************************** Y5227000
TPCO220  $LD   0,WA                GET THE CHARACTER TO BE DUPED.       Y5228000
         $STO  TPCOTMP             SAVE IN CASE IT IS OVERLAYED         Y5229000
         $EOR  TPCOX40             TEST THE CHARACTER FOR BLANK.        Y5230000
         $BNZ  TPCO250             BRANCH IF NOT BLANK.                 Y5231000
         $S    1,WA                GET TRUE BLANK COUNT.                Y5232000
         $A    WA,,L               TEST FOR REST OF RECORD BLANK, BY    Y5233000
         $S    TPCOLAST            POINTING TO END+1 AND SUBTRACTING    Y5234000
         $BP   TPCO290             END+0. BRANCH IF REMAINDER IS BLANK. Y5235000
         $A    TPCOLAST            OTHERWISE, CALCULATE A PTR TO THE    Y5236000
         $STO  WA,,L               NEXT NON-DUPE AND STORE IT IN WA.    Y5237000
         $S    WC,,L               GET THE TRUE COUNT AGAIN.            Y5238000
         $STO  WB,,L               PUT TRUE DUPLICATE COUNT INTO WB.    Y5239000
         $STL  TPCOPACK            ITERATE 31-COUNT BLANK SCB'S IF NEC. Y5240000
         $LD   TPCOX9F             GET A 31-COUNT BLANK SCB.            Y5241000
         $MDX  -31,WB              SUBTRACT 31 FROM WB.                 Y5242000
         $B    TPCOPACK+D1         IF RESULT POSITIVE, PACK A BLANK SCB Y5243000
         $LD   WB,,L               OTHERWISE CLEAN UP. GET A SKELETOM   Y5244000
         $A    TPCOC31             BLANK SCB AND ADD TO IT THE          Y5245000
         $OR   TPCOX80             REMAINING BLANK COUNT.               Y5246000
         $BSI  TPCOPACK            THEN PACK THE FINAL BLANK SCB.       Y5247000
         $B    TPCO100             NOW BRANCH TO SET UP AGAIN.          Y5248000
*********************************************************************** Y5249000
*              A STRING OF DUPLICATE NONBLANK CHARACTERS EXISTS       * Y5250000
*********************************************************************** Y5251000
TPCO250  $ZAC                      ZERO OUT THE ACCUMULATOR.            Y5252000
         $S    1,WA                GET TRUE COUNT OF NONBLANK DUPLICATE Y5253000
         $STO  WB,,L               CHARS, AND SET WB TO IT.             Y5254000
         $A    WA,,L               ADD TRUE COUNT TO CURRENT POINTER,   Y5255000
         $STO  WA,,L               AND SET WA FOR NEXT TIME.            Y5256000
TPCO260  $MDX  -31,WB              REDUCE THE COUNT BY 31, AND          Y5257000
         $B    TPCO265             SKIP IF IT'S STILL POSITIVE.         Y5258000
         $B    TPCO270             OTHERWISE, BRANCH TO CLEAN UP.       Y5259000
TPCO265  $LD   TPCOXBF             GET MAXIMUM NONBLANK DUPE SCB,       Y5260000
         $BSI  TPCOPACK            AND PACK IT.                         Y5261000
         $LD   TPCOTMP             GET THE DUPLICATE                    Y5262000
         $BSI  TPCOPACK            CHARACTER, AND PACK IT TOO.          Y5263000
         $B    TPCO260             TRY FOR ANOTHER THIRTY-ONE.          Y5264000
TPCO270  $LD   WB,,L               CLEAN UP- GET REMAINING CT MINUS 31  Y5265000
         $A    TPCOC31             AND MAKE IT TRUE REMAINS.            Y5266000
         $OR   TPCOXA0             ADD SKELETON NONBLANK DUPE SCB.      Y5267000
         $BSI  TPCOPACK            PACK THIS FINAL SCB.                 Y5268000
         $LD   TPCOTMP             GET THE DUPLICATE CHARACTER          Y5269000
         $BSI  TPCOPACK            AND PACK IT TOO.                     Y5270000
         $B    TPCO100,,L          NOW GO SET UP AGAIN FOR SCAN.        Y5271000
*********************************************************************** Y5272000
*              THIS ROUTINE EFFECTIVELY TRUNCATES TRAILING BLANKS.    * Y5273000
*********************************************************************** Y5274000
TPCO290  $LD   TPCOX81             GET BLANK SCB WITH COUNT OF ONE      Y5275000
         $BSI  TPCOPACK            GO PACK THE LAST BLANK.              Y5276000
         $B    TPCO310             THEN EXIT.                           Y5277000
*********************************************************************** Y5278000
*              THIS ROUTINE CONCLUDES COMPRESSION AND TRUNCATION.     * Y5279000
*********************************************************************** Y5280000
TPCO300  $BN   TPCO310             BRANCH IF ALL CHARACTERS ARE DONE.   Y5281000
         $LD   TPCOXC1             OTHERWISE A CHARACTER STRING OF      Y5282000
         $BSI  TPCOPACK            LENGTH ONE REMAINS.  PACK THE        Y5283000
         $LD   0,WA                APPROPRIATE SCB (X'C1'), AND PACK    Y5284000
         $BSI  TPCOPACK            THE CHARACTER RIGHT BESIDE IT.       Y5285000
TPCO310  $LD   TPCOX100            GET EOR SCB PLUS A BIT FOR TPCOPACK. Y5286000
         $BSI  TPCOPACK            PACK THE END-OF-RECORD SCB.          Y5287000
         $LD   TPCOC1              GET THE CONSTANT '1' AND PACK        Y5288000
         $BSI  TPCOPACK            IT FOR LENGTH DETERMINATION.         Y5289000
TPCO330  $LDX  *-*,WC,L            RESTORE INDEX WC.                    Y5290000
         $LD   TPCOP010+D1         POINT TO WORD AFTER LAST WORD PACKD. Y5291000
         $S    UFCBFQP,WC,X        SUBTRACT THE INPUT AREA POINTER.     Y5292000
         $SLA  1                   MULTIPLY BY 2 FOR BYTES.             Y5293000
         $STO  WA,,L               SAVE BYTE COUNT TEMPORARILY.         Y5294000
         $LXA  TPCOP010+D1,WB      POINT WB TO WORD AFTER LAST PACKED.  Y5295000
         $LD   -1,WB               GET THE LAST WORD PACKED.            Y5296000
         $BSC  E                   SKIP IF EVEN (RIGHT BYTE IS EOR SCB) Y5297000
         $MDX  -1,WA               OTHERWISE REDUCE BYTE COUNT BY 1.    Y5298000
         $LD   WA,,L               RETURN TRUE BYTE COUNT IN ACC.       Y5299000
TPCO320  $LDX  *-*,WA,L            RESTORE INDEX WA.                    Y5300000
         $LXA  TPCOFRST,WB         POINT WB TO 2D WORD OF INPUT, AND    Y5301000
         $MDX  -1,WB               SUBTRACT 1 TO PT TO 1ST WORD.        Y5302000
         $B    TPCOMPR,,I          RETURN. THE ACC CONTAINS THE BYTE    Y5303000
*                                  COUNT, AND WB POINTS TO THE FIRST    Y5304000
*                                  WORD.                                Y5305000
         EJECT                                                          Y5306000
.CMPT200 ANOP                                                           Y5307000
*********************************************************************** Y5308000
*              TPCOPACK-ROUTINE TO PACK CHARACTERS AND CONTROL BYTES  * Y5309000
*********************************************************************** Y5310000
TPCOPACK DC    AL2(*-*)            CALLED VIA $BSI.                     Y5311000
         $RTE  16                  SWITCH THE ACC WITH THE EXT.         Y5312000
         $BZ   TPCOPACK,,I         RETURN IF THE ACC IS ZERO.           Y5313000
*                                  OTHERWISE, ACC+EXT ARE X'1,B1,1,B2'. Y5314000
         $SLT  8                   ACC+EXT ARE NOW X'B1,1,B2,0'.        Y5315000
         $SRA  8                   ACC+EXT ARE NOW X'0,B1,B2,0'.        Y5316000
         $SLT  8                   ACC+EXT ARE NOW X'B1,B2,0,0'.        Y5317000
TPCOP010 $STO  *-*,,L              STORE BYTE 1 AND BYTE 2 INTO A WORD. Y5318000
         $MDM  TPCOP010+D1,1       POINT TO THE NEXT WORD.              Y5319000
         $B    TPCOPACK,,I         THEN RETURN TO CALLER.               Y5320000
TPCOTMP  DC    AL2(*-*)            TEMPORARY STORAGE                    Y5321000
         EJECT                                                          Y5322000
*********************************************************************** Y5323000
*                                                                     * Y5324000
*TITLE - TPBUILD (CONSTRUCTS TP BUFFERS FOR TPIOX PROCESSING)         * Y5325000
*                                                                     * Y5326000
* FUNCTION/PURPOSE -                                                  * Y5327000
*                                                                     * Y5328000
*  CONSTRUCTS TP BUFFERS FROM INFORMATION PROVIDED THRU CALLING       * Y5329000
*  SEQUENCE.                                                          * Y5330000
*                                                                     * Y5331000
* CALLING SEQUENCE -                                                  * Y5332000
*                                                                     * Y5333000
*                             $TSL TPBUILD   LINKAGE                  * Y5334000
*                             ....           RETURN                   * Y5335000
*                                                                     * Y5336000
*                   WHERE---  ENTRY...AC CONTAINS LENGTH              * Y5337000
*                             OF INSERT IN BYTES                      * Y5338000
*                                                                     * Y5339000
*                             WB CONTAINS ADDRESS OF FIRST            * Y5340000
*                             CHARACTER (LEFT JUSTIFIED IN            * Y5341000
*                             WORD) TO BE INSERTED                    * Y5342000
*                                                                     * Y5343000
*                             EXIT... AC SET TO ZERO IF DATA          * Y5344000
*                             INSERTED. AC SET NON-ZERO IF            * Y5345000
*                             INSUFFICIENT ROOM IN BUFFER             * Y5346000
*                                                                     * Y5347000
*                   NOTE---   REGISTERS WA,WB SAVED AND RESTORED      * Y5348000
*                                                                     * Y5349000
*                             COUNTERS AND POINTERS FOR TPBUILD       * Y5350000
*                             ARE SET EXTERNAL TO THE ROUTINE         * Y5351000
*                                                                     * Y5352000
*********************************************************************** Y5353000
         SPACE 3                                                        Y5354000
*********************************************************************** Y5355000
*              SPECIAL ENTRY WHICH BYPASSES SPACE TEST                * Y5356000
*********************************************************************** Y5357000
TPBLSPE  $SLA  1                   GET RID OF                           Y5358000
         $SRA  1                    SIGN BIT                            Y5359000
         $STO  TPBLSGL             STORE LENGTH                         Y5360000
         $B    TPBLSVR             BYPASS SPACE TEST                    Y5361000
*********************************************************************** Y5362000
*              TPBUILD ENTRY POINT                                    * Y5363000
*********************************************************************** Y5364000
TPBUILD  DC    AL2(*-*)            ENTRY VIA $TSL TPBUILD               Y5365000
         $BNP  TPBLSPE             BRANCH IF SPECIAL ENTRY              Y5366000
         $STO  TPBLSGL             SAVE LENGTH OF INSERT                Y5367000
         $LD   TPBLRSC             GET CURRENT RESIDUAL                 Y5368000
         $S    TPBLSGL             MINUS LENGTH OF INSERT               Y5369000
         $BN   TPBUILD,,I          EXIT IF INSUFFICIENT SPACE           Y5370000
         $STO  TPBLRSC             STORE NEW BUFFER RESIDUAL            Y5371000
TPBLSVR  $STX  TPBLSVA+D1,WA       SAVE                                 Y5372000
         $STX  TPBLSVB+D1,WB        REGISTERS                           Y5373000
TPBLTRG  $AXT  *-*,WA,L            TARGET ADDRESS IN BUFFER             Y5374000
         $LD   TPBLSGL             GET INSERT LENGTH                    Y5375000
         $BSC  E                   SKIP IF EVEN COUNT                   Y5376000
         $A    TPBLCN1             MAKE IT EVEN                         Y5377000
         $SRA  1                    NUMBER OF WORDS                     Y5378000
         $STO  TPBLWDC             SAVE WORD COUNT                      Y5379000
         $LD   TPBLCNT             GET LAST DATA TOTAL                  Y5380000
         $BOD  TPBLHWD             BRANCH IF HALF-WORD TARGET           Y5381000
*********************************************************************** Y5382000
*              FULL-WORD TARGET STORE LOOP                            * Y5383000
*********************************************************************** Y5384000
TPBLFWT  $LD   0,WB                GET SOURCE WORD                      Y5385000
         $STO  0,WA                TO TARGET AREA                       Y5386000
         $MDX  1,WB                INCREMENT                            Y5387000
         $MDX  1,WA                 POINTERS                            Y5388000
         $MDM  TPBLWDC,-1          DECREMENT WORD COUNT                 Y5389000
         $B    TPBLFWT             MOVE SPECIFIED NUMBER                Y5390000
         $LD   TPBLSGL             GET INSERT LENGTH                    Y5391000
         $BSC  E                   SKIP IF EVEN                         Y5392000
TPBLADJ  $MDX  -1,WA               ADJUST TARGET POINTER                Y5393000
TPBLTOT  $A    TPBLCNT             TOTAL                                Y5394000
         $STO  TPBLCNT              INSERT                              Y5395000
         $STX  TPBLTRG+D1,WA       SET NEW TARGET POINTER               Y5396000
         $ZAC                      FLAG SUCCESS                         Y5397000
TPBLSVA  $AXT  *-*,WA,L            RESTORE                              Y5398000
TPBLSVB  $AXT  *-*,WB,L             REGISTERS                           Y5399000
         $B    TPBUILD,,I          RETURN TO CALLER                     Y5400000
*********************************************************************** Y5401000
*              TPBUILD CONSTANTS, STORAGE, ETC.                       * Y5402000
*********************************************************************** Y5403000
TPBLCN1  DC    AL2(1)              CONSTANT 1                           Y5404000
TPBLSGL  DC    AL2(*-*)            LENGTH OF CURRENT SEGEMENT           Y5405000
TPBLRSC  DC    AL2(*-*)            SET TO BUFFER RESIDUAL COUNT         Y5406000
TPBLWDC  DC    AL2(*-*)            DERIVED WORD COUNT                   Y5407000
TPBLCNT  DC    AL2(*-*)            TOTAL BYTES USED                     Y5408000
*********************************************************************** Y5409000
*              HALF-WORD TARGET AREA                                  * Y5410000
*********************************************************************** Y5411000
TPBLHWD  $LD   0,WB                GET SOURCE WORD                      Y5412000
         $RTE  16                  TO EXT                               Y5413000
         $LD   0,WA                GET TARGET WORD                      Y5414000
         $SRA  8                    UPTIGHT TO SOURCE                   Y5415000
         $SLT  8                   FORM NEW TARGET WORD                 Y5416000
         $STO  0,WA                STORE IT AWAY                        Y5417000
         $SLT  16                  PARTIAL NEW TARGET                   Y5418000
         $STO  1,WA                 PRIME IT                            Y5419000
         $MDX  1,WB                INCREMENT                            Y5420000
         $MDX  1,WA                 POINTERS                            Y5421000
         $MDM  TPBLWDC,-1          DECREMENT COUNT                      Y5422000
         $B    TPBLHWD             DO ALL WORDS                         Y5423000
         $LD   TPBLSGL             GET SEGMENT LENGTH                   Y5424000
         $B    TPBLTOT             GO COMPUTE TOTAL                     Y5425000
         AIF   (&RD2501 EQ 0).NO2501B                                   Y5426000
         TITLE 'RTP1130 (COMMUTATOR ROUTINE FOR 2501 READER)'           Y5427000
         SPACE 3                                                        Y5428000
*********************************************************************** Y5429000
*                                                                     * Y5430000
* TITLE - RDTFO (2501 CARD READER COMMUTATOR ROUTINE)                 * Y5431000
*                                                                     * Y5432000
*  READ CARDS FROM THE 2501 WHENEVER COMMUTATOR GATE IS OPENED AND    * Y5433000
*  THE 2501 IS IN READY STATUS. PASSES CARD (IN CARD CODE FORMAT)     * Y5434000
*  TO TPPUT COMMUTATOR ROUTINE FOR COMPRESSION AND INSERTION INTO     * Y5435000
*  THE LINE MANAGER OUTPUT (TO MAIN PROCESSOR) QUEVE. INPUT IS        * Y5436000
*  DOUBLE BUFFERED.                                                   * Y5437000
*                                                                     * Y5438000
*********************************************************************** Y5439000
         SPACE 3                                                        Y5440000
*********************************************************************** Y5441000
*              ISSUE INTERVENTION REQUIRED MESSAGE AND WAIT           * Y5442000
*********************************************************************** Y5443000
RDTFNOT  $STL  RDTFOVE+D1          RESET VARIABLE ENTRY POINT           Y5444000
         $WTO  RDTFMSG,RDTFORT     ISSUE OPERATOR MESSAGE               Y5445000
         $STL  RDTFOVE+D1          RESET VARIABLE ENTRY POINT           Y5446000
         $XIO  RDTFSWR-D1          SENSE 2501 WITHOUT RESET             Y5447000
         $BOD  RDTFORT             CYCLE UNTIL READY                    Y5448000
         $B    RDTFSLC             ISSUE I/O REQUEST                    Y5449000
RDTFMSG  DC    AL1($BLACK+$EBCD,$LIST15) CONTROL WORD                   Y5450000
         DC    AL2(30)             DATA COUNT                           Y5451000
         DC    C'INTERVENTION REQUIRED ON 2501 '                        Y5452000
RDTFOLT  $B    ((RDTFOEC-RDTFOGT)-2)/2,,X 2501 GATE LATCH               Y5453000
RDTFREQ  DC    AL1($CRREQT,0)      REQUEST TO START IDENTIFICATION      Y5454000
RDTFC80  DC    AL2(80)             COLUMN READ COUNT                    Y5455000
*********************************************************************** Y5456000
*              ENTRY POINT FROM COMMUTATOR                            * Y5457000
*********************************************************************** Y5458000
RDTFOEP  $NULL                     ENTRY POINT FROM COMMUTATOR          Y5459000
RDTFOVE  $B    RDTFONI,,L          VARIABLE ENTRY VECTOR                Y5460000
RDTFONP  $B    RDTFORT,,L          NON-PROCESS EXIT POINT               Y5461000
RDTFOXT  $BSI  RDTFOVE+D1          EXIT AND RESET ENTRY POINT           Y5462000
RDTFONI  $XIO  RDTFSWR-D1          SENSE 2501 WITHOUT RESET             Y5463000
         $BOD  RDTFORT             NON-PROCESS EXIT UNTIL READY         Y5464000
         $AXT  RDTFUFCB,WC,L       2501 UFCB ADDRESS                    Y5465000
         $LD   RDTFREQ             GET REQUEST IDENTIFICATION           Y5466000
         $TSL  STPOPEN             GENERATE REQUEST TO SEND             Y5467000
         $BNZ  RDTFORT             CYCLE UNTIL ACCEPTED                 Y5468000
         $LD   RDTFOLT             CLOSE                                Y5469000
         $STO  RDTFOGT,,L           GATE                                Y5470000
         $BSI  RDTFOVE+D1          EXIT AND RESET ENTRY                 Y5471000
RDTFRGO  $NULL                     ENTRY POINT WHEN HASP IS READY       Y5472000
         $LD   RDTFBFP             GET BUFFER ADDRESS                   Y5473000
RDTFGET  $STO  RDTFXAD             SET IOCC FOR CURRENT BUFFER          Y5474000
RDTFSVO  $XIO  RDTFSWR-D1          SENSE 2501 WITHOUT RESET             Y5475000
         $BOD  RDTFNOT             ISSUE MESSAGE IF NOT READY           Y5476000
RDTFSLC  $ZAC                      CLEAR AC AND TURN                    Y5477000
         $STO  RDTFERR             OFF ERROR FLAG                       Y5478000
         $STL  RDTFOPC             SET OPERATION NOT COMPLETE FLAG      Y5479000
         $LD   RDTFC80             REFRESH                              Y5480000
         $STO  RDTFXAD,,I           COUNT                               Y5481000
         $XIO  RDTFXAD             START READING                        Y5482000
         $STL  RDTFOVE+D1          RESET VARIABLE ENTRY POINT           Y5483000
         $MDM  RDTFOPC,0           TEST FOR READ COMPLETE               Y5484000
         $B    RDTFONP             NO. NON-PROCESS EXIT                 Y5485000
         $MDM  RDTFERR,0           TEST FOR ERROR ON READ               Y5486000
         $B    RDTFSVO             YES. TRY AGAIN                       Y5487000
         $MDM  RDTFLSC,0           TEST LAST CARD FLAG                  Y5488000
         $B    RDTFLST             BRANCH IF LAST CARD                  Y5489000
         $STL  RDTFOVE+D1          RESET VARIABLE ENTRY POINT           Y5490000
         $LDD  RDTFBFP             GET BUFFER POINTERS IN AC AND EXT    Y5491000
         $MDM  SRDTTANK,0          TEST FOR AVAILABLE TANK              Y5492000
         $B    RDTFONP             NON-PROCESS EXIT IF NOT AVAILABLE    Y5493000
         $STO  SRDTTANK,,L         QUEUE THE BUFFER                     Y5494000
         $RTE  16                  SWITCH BUFFERS                       Y5495000
         $STD  RDTFBFP             STORE NEW POINTERS                   Y5496000
         $B    RDTFGET             GO READ ANOTHER CARD                 Y5497000
RDTFLST  $NULL                     LAST CARD PROCESS                    Y5498000
         $ZAC                      CLEAR AC AND                         Y5499000
         $STO  RDTFLSC             TURN OFF LAST CARD FLAG              Y5500000
         $STL  RDTFOVE+D1          RESET VARIABLE ENTRY                 Y5501000
         $LD   RDTFBFP             GET DATA BUFFER POINTER              Y5502000
         $MDM  SRDTTANK,0          TEST FOR AVAILABLE TANK              Y5503000
         $B    RDTFONP             NOT AVAILABLE. TRY LATER             Y5504000
         $STO  SRDTTANK,,L         QUEUE THE BUFFER                     Y5505000
         $STO  RDTFUFLG,,L          AND SET EOF IN UFCB                 Y5506000
         $B    RDTFOXT             EXIT                                 Y5507000
*********************************************************************** Y5508000
*              INTERRUPT PROCESSOR FOR 2501                           * Y5509000
*********************************************************************** Y5510000
RDTFOINT $NULL                     ENTRY FROM FLIP 4                    Y5511000
         $XIO  RDTFSRS-D1          SENSE WITH RESET                     Y5512000
         $SLA  3                   CHECK FOR READ/FEED ERROR            Y5513000
         $BC   RDTFRFR             BRANCH IF ERROR                      Y5514000
         $BSC  P+Z                 TEST FOR LAST CARD                   Y5515000
         $B    RDTFLAS             BRANCH IF LAST CARD                  Y5516000
RDTFXIT  $ZAC                      CLEAR AC AND SET                     Y5517000
         $STO  RDTFOPC             OPERATION COMPLETE FLAG              Y5518000
         $B    RTPL4RTN,,L         EXIT TO FLIP 4                       Y5519000
RDTFRFR  $STL  RDTFERR             RUN UP THE ERROR FLAG                Y5520000
         $B    RDTFXIT             GO TO EXIT PROCEDURE                 Y5521000
RDTFLAS  $STL  RDTFLSC             RUN UP THE LAST CARD FLAG            Y5522000
         $B    RDTFXIT             GO TO EXIT PROCEDURE                 Y5523000
*********************************************************************** Y5524000
*              POINTERS, FLAGS, COMMANDS AND BUFFERS                  * Y5525000
*********************************************************************** Y5526000
         $BSS  0,E                 EVEN STORAGE ASSIGNMENT              Y5527000
RDTFBFP  $ADCON RDTFBF1            BUFFER POINTERS WHICH                Y5528000
         $ADCON RDTFBF2            ARE SWITCHED                         Y5529000
RDTFXAD  DC    AL2(*-*)            CURRENT INPUT BUFFER ADDRESS         Y5530000
         DC    AL2($IREAD+$2501)   INITIATE 2501 READ COMMAND           Y5531000
RDTFOPC  DC    H'0'                OPERATION STATUS FLAG...             Y5532000
*                                  SET TO ZERO FOR OPERATION COMPLETE.  Y5533000
*                                  SET NON-ZERO FOR OPERATION NOT       Y5534000
*                                  COMPLETE.                            Y5535000
RDTFSWR  DC    AL2($SENSED+$2501)  SENSE DEVICE WITHOUT RESET           Y5536000
RDTFERR  DC    H'0'                OPERATION ERROR FLAG...              Y5537000
*                                  SET TO ZERO IF NO ERROR              Y5538000
*                                  SET NON-ZERO IF ERROR                Y5539000
RDTFSRS  DC    AL2($SENSED+$2501+1) SENSE DEVICE WITH RESET             Y5540000
RDTFLSC  DC    H'0'                LAST CARD FLAG                       Y5541000
*                                  SET TO ZERO IF NOT LAST CARD         Y5542000
*                                  SET NON-ZERO IF LAST CARD            Y5543000
*                                                                       Y5544000
RDTFBF1  DC    AL2(80)             BUFFER DATA COUNT                    Y5545000
         $BSS  80                  BUFFER 1                             Y5546000
RDTFBF2  DC    AL2(80)             BUFFER DATA COUNT                    Y5547000
         $BSS  80                  BUFFER 2                             Y5548000
.NO2501B ANOP                                                           Y5549000
         AIF   (NOT &XX1442).NO1442B                                    Y5550000
         TITLE 'RTP1130 (COMMUTATOR ROUTINE FOR 1442 READ/PUNCH)'       Y5551000
*********************************************************************** Y5552000
*                                                                     * Y5553000
* TITLE - RPFFT (1442 READ OR PUNCH COMMUTATOR ROUTINE)               * Y5554000
*                                                                     * Y5555000
* FUNCTION/OPERATION-                                                 * Y5556000
*                                                                     * Y5557000
*  READS CARDS FROM THE 1442-6,7 OR PUNCHES CARDS ON THE 1442-5,6,7.  * Y5558000
*  THE FUNCTION TO BE PERFORMED IS CONTROLLED BY THE VALUE OF THE     * Y5559000
*  CONTROL WORD 'RPCNTRL'...                                          * Y5560000
*                                                                     * Y5561000
*                        RPCNTRL = ZERO FOR READ FUNCTION             * Y5562000
*                        RPCNTRL = NON-ZERO FOR PUNCH FUNCTION        * Y5563000
*                                                                     * Y5564000
*  CARD READING IS DOUBLE BUFFERED                                    * Y5565000
*                                                                     * Y5566000
*  CARD PUNCHING IS CONTROLLED BY THE PUNCH QUEUE DEVELOPED           * Y5567000
*  BY THE COMMUNICATIONS ADAPTER SUBROUTINES.                         * Y5568000
*                                                                     * Y5569000
*********************************************************************** Y5570000
         SPACE 3                                                        Y5571000
*********************************************************************** Y5572000
*              ISSUE INTERVENTION REQUIRED MESSAGE AND WAIT           * Y5573000
*********************************************************************** Y5574000
RPFFNOT  $STL  RPFFTVE+D1          RESET VARIABLE ENTRY POINT           Y5575000
         $WTO  RPFFMSG,RPFFTRT     ISSUE INTERVENTION MESSAGE           Y5576000
         $STL  RPFFTVE+D1          RESET VARIABLE ENTRY POINT           Y5577000
         $XIO  RPFFSWR-D1          SENSE WITHOUT RESET                  Y5578000
         $AND  RPFFRBM              AND EXIT IF NOT                     Y5579000
         $BNZ  RPFFTRT               READY OR BUSY...                   Y5580000
         $B    RPFFSET             GO ISSUE I/O REQUEST                 Y5581000
RPFFMSG  DC    AL1($BLACK+$EBCD,$LIST15) CONTROL WORD                   Y5582000
         DC    AL2(30)             DATA COUNT                           Y5583000
         DC    C'INTERVENTION REQUIRED ON 1442 '                        Y5584000
*********************************************************************** Y5585000
*              LOCAL COMMANDS AND CONSTANTS                           * Y5586000
*********************************************************************** Y5587000
         $BSS  0,E                                                      Y5588000
RPFFREQ  DC    AL1($CRREQT,0)      REQUEST TO START              E      Y5589000
RPFFSWR  DC    AL2($SENSED+$1442)  SENSE 1442 WITHOUT RESET      O      Y5590000
RPFFRCN  DC    AL2($CONTROL+$1442+4) START 1442 READ                    Y5591000
RPFFCRD  DC    AL2($READ+$1442)    READ 1442 COMMAND                    Y5592000
RPFFCWR  DC    AL2($WRITE+$1442)   WRITE 1442 COMMAND                   Y5593000
RPFFRBM  DC    X'0003'             NOT READY OR BUSY PRESERVATION MASK  Y5594000
RPFFTLT  $B    ((RPFFTEC-RPFFTGT)-2)/2,,X 1442 GATE LATCH               Y5595000
RPFFPRM  DC    AL2(X'2000')        MASK FOR PERMISSION TO SEND          Y5596000
RPFFACT  DC    AL2(*-*)            1442 ACTIVE/IDLE FLAG                Y5597000
*********************************************************************** Y5598000
*              COMMUTATOR ENTRY POINT                                 * Y5599000
*********************************************************************** Y5600000
RPFFTEP  $NULL                     ENTRY POINT FROM COMMUTATOR          Y5601000
RPFFTVE  $B    RPFFTNI,,L          VARIABLE ENTRY VECTOR                Y5602000
RPFFTNP  $B    RPFFTRT,,L          NON-PROCESS EXIT POINT               Y5603000
RPFFTNE  $NULL                     EXIT POINT TO CLOSE GATE             Y5604000
         AIF   (NOT &RD1442).NO1442X IF 1442 DEFINED AS READER          Y5605000
         $LD   RPFFTLT             GET LATCH AND CLOSE                  Y5606000
         $STO  RPFFTGT,,L          COMMUTATOR GATE                      Y5607000
.NO1442X ANOP                                                           Y5608000
RPFFTXT  $BSI  RPFFTVE+D1          EXIT- RESET TO ENTER RPFFTNI         Y5609000
RPFFTNI  $NULL                     NORMAL ENTRY POINT                   Y5610000
         AIF   (NOT &RD1442).NO1442C                                    Y5611000
         AIF   (NOT &PN1442).NO1442R                                    Y5612000
         $MDM  RPCNTRL,0           TEST FUNCTION INDICATOR              Y5613000
         $B    RPFFPUN             BRANCH IF PUNCH REQUEST              Y5614000
.NO1442R ANOP                                                           Y5615000
*********************************************************************** Y5616000
*              READ 1442 INITIALIZATION                               * Y5617000
*********************************************************************** Y5618000
         $XIO  RPFFSWR-D1          SENSE WITHOUT RESET                  Y5619000
         $AND  RPFFRBM             MASK ALL BUT READY/BUSY              Y5620000
         $BNZ  RPFFTRT             EXIT UNTIL READY                     Y5621000
         $AXT  RDFFUFCB,WC,L       1442 READER UFCB ADDRESS             Y5622000
         $LD   RPFFREQ             GET REQUEST IDENTIFICATION           Y5623000
         $TSL  STPOPEN             GENERATE REQUEST TO SEND             Y5624000
         $BNZ  RPFFTRT             CYCLE UNTIL ACCEPTED                 Y5625000
         $STL  RPFFTVE+D1          RESET VARIABLE ENTRY                 Y5626000
         $LD   RDFFUSTR,,L         GET STATUS AND RCB                   Y5627000
         $AND  RPFFPRM             TEST FOR PERMISSION                  Y5628000
         $BZ   RPFFTRT             BRANCH IF NOT RECEIVED               Y5629000
         $LD   RPFFRCN             SETUP                                Y5630000
         $STO  RPFFCTL              FOR                                 Y5631000
         $LD   RPFFCRD               BUFFERED                           Y5632000
         $STO  RPFFVRC                READ                              Y5633000
         $LD   RPFFBFP                 I/O                              Y5634000
         $STO  RPFFIOAR                 OPERATION                       Y5635000
         $B    RPFFSIO             GO START I/O                         Y5636000
.NO1442C ANOP                                                           Y5637000
         AIF   (NOT &PN1442).NO1442S                                    Y5638000
*********************************************************************** Y5639000
*              1442 PUNCH INITIALIZATION                              * Y5640000
*********************************************************************** Y5641000
RPFFPUN  $NULL                                                          Y5642000
         $DEQUE PNFF2AQP           GET A PUNCH ENTRY                    Y5643000
         $BZ   RPFFTRT             NON-PROCESS EXIT IF NO ENTRY         Y5644000
         $STO  RPFFPNEL            SAVE PUNCH ELEMENT ADDRESS           Y5645000
         $LXA  RPFFPNEL,WA         ADDRESS OF ELEMENT TO WA             Y5646000
         $MDX  PN1442DT,WA,X       POINT WA TO DATA                     Y5647000
         $STX  RPFFIOAR,WA         SAVE POINTER FOR I/O                 Y5648000
         $LD   RPFFWCN             SET IOCC FOR                         Y5649000
         $STO  RPFFCTL             WRITE CONTROL                        Y5650000
         $LD   RPFFCWR             SET COLUMN IOCC                      Y5651000
         $STO  RPFFVRC             TO WRITE                             Y5652000
.NO1442S ANOP                                                           Y5653000
*********************************************************************** Y5654000
*              READ/WRITE 1442 I/O PROCESSOR                          * Y5655000
*********************************************************************** Y5656000
RPFFSIO  $STL  RPFFACT             SET 1442 ACTIVE FLAG                 Y5657000
RPFFSLC  $LD   RPFFIOAR            GET DATA/BUFFER ADDRESS              Y5658000
RPFFSVO  $STO  RPFFXAD             POINTER AND STORE IN IOAR            Y5659000
         $ZAC                      CLEAR AC AND TURN                    Y5660000
         $STO  RPFFERR             OFF ERROR FLAG                       Y5661000
         $STL  RPFFOPC             SET OPERATION NOT COMPLETE           Y5662000
RPFFSET  $XIO  RPFFSWR-D1          SENSE WITHOUT RESET                  Y5663000
         $AND  RPFFRBM             MASK ALL BUT NOT READY AND BUSY      Y5664000
         $BNZ  RPFFNOT             ISSUE MESSAGE IF NOT READY           Y5665000
         $XIO  RPFFCTL-D1          READ/WRITE CONTROL                   Y5666000
         $STL  RPFFTVE+D1          SET VARIABLE ENTRY POINT             Y5667000
         $MDM  RPFFOPC,0           TEST FOR I/O COMPLETED               Y5668000
         $B    RPFFTNP             NO. NON-PROCESS EXIT                 Y5669000
         $MDM  RPFFERR,0           TEST FOR I/O ERROR                   Y5670000
         $B    RPFFSLC             YES...TRY AGAIN                      Y5671000
         $MDM  RPFFLSC,0           TEST LAST CARD FLAG                  Y5672000
         $B    RPFFLST             BRANCH IF WAVING                     Y5673000
         AIF   (NOT &RD1442).NO1442D                                    Y5674000
         AIF   (NOT &PN1442).NO1442T                                    Y5675000
         $MDM  RPCNTRL,0           TEST FUNCTION INDICATOR              Y5676000
         $B    RPPNEXT             BRANCH IF PUNCHING                   Y5677000
.NO1442T ANOP                                                           Y5678000
*********************************************************************** Y5679000
*              HOUSEKEEPING PREPARATORY TO READING NEXT CARD          * Y5680000
*********************************************************************** Y5681000
         $STL  RPFFTVE+D1          SET VARIABLE ENTRY POINT             Y5682000
         $LDD  RPFFBFP             GET BUFFER POINTERS                  Y5683000
         $MDM  SRPFTANK,0          TEST FOR AVAILABLE TANK              Y5684000
         $B    RPFFTNP             NON-PROCESS EXIT IF NOT AVAILABLE    Y5685000
         $STO  SRPFTANK,,L         QUEUE THE ACTUAL DATA POINTER        Y5686000
         $MDM  SRPFTANK,-1          MINUS ONE FOR RCB/SRCB WORD         Y5687000
         $RTE  16                  SWITCH BUFFERS                       Y5688000
         $STD  RPFFBFP             STORE POINTERS                       Y5689000
         $STO  RPFFIOAR            SAVE FOR POSSIBLE RETRY              Y5690000
         $B    RPFFSVO             GO START NEXT READ                   Y5691000
.NO1442D ANOP                                                           Y5692000
         AIF   (NOT &PN1442).NO1442U                                    Y5693000
*********************************************************************** Y5694000
*              HOUSEKEEPING PREPARATORY TO PUNCHING NEXT CARD         * Y5695000
*********************************************************************** Y5696000
RPPNEXT  $NULL                                                          Y5697000
         $LD   RPFFPNEL            GET PUNCH ELEMENT ADDRESS            Y5698000
         $QFREL PNFF2FQP           RETURN ELEMENT TO FREE QUEUE         Y5699000
         $STL  RPFFTVE+D1          SET VARIABLE ENTRY POINT             Y5700000
         $DEQUE PNFF2AQP           GET NEXT PUNCH ELEMENT               Y5701000
         $BZ   RPFFTRT             NON-PROCESS EXIT UNTIL AVAILABLE     Y5702000
         $STO  RPFFPNEL            SAVE PUNCH ELEMENT ADDRESS           Y5703000
         $LXA  RPFFPNEL,WA         ADDRESS OF ELEMENT TO WA             Y5704000
         $LD   PN1442CB,WA,X       GET ELEMENT CONTROL WORD             Y5705000
         $MDX  PN1442DT,WA,X       POINT WA TO DATA                     Y5706000
         $STX  RPFFIOAR,WA         SAVE POINTER FOR I/O                 Y5707000
         $BNZ  RPFFSLC             GO START I/O IF MORE PUNCH           Y5708000
         $STO  RPFFACT             SET 1442 IDLE FLAG                   Y5709000
         $LD   RPFFPNEL            GET PUNCH ELEMENT ADDRESS            Y5710000
         $QFREL PNFF2FQP           RETURN DUMMY ELEMENT TO QUEUE        Y5711000
         $B    RPFFTNE             EXIT                                 Y5712000
.NO1442U ANOP                                                           Y5713000
         EJECT                                                          Y5714000
*********************************************************************** Y5715000
*              LAST CARD PROCESSING                                   * Y5716000
*********************************************************************** Y5717000
RPFFLST  $NULL                                                          Y5718000
         $XIO  RPFFEED-D1          CLEAR THE 1442                       Y5719000
         $ZAC                      CLEAR AC AND LOWER                   Y5720000
         $STO  RPFFLSC             LAST CARD FLAG                       Y5721000
         AIF   (NOT &RD1442).NO1442E                                    Y5722000
         AIF   (NOT &PN1442).NO1442V                                    Y5723000
         $MDM  RPCNTRL,0           TEST FUNCTION INDICATOR              Y5724000
         $B    RPFFPLC             BRANCH IF PUNCHING                   Y5725000
.NO1442V ANOP                                                           Y5726000
         $STO  RPFFACT             SET 1442 IDLE FLAG                   Y5727000
         $STL  RPFFTVE+D1,L        RESET VARIABLE ENTRY POINT           Y5728000
         $LD   SRPFTANK,,L         GET TANK QUEUE AND                   Y5729000
         $BNZ  RPFFTRT             EXIT IF PREVIOUS NOT DONE            Y5730000
         $LD   RPFFBFP             GET INPUT BUFFER POINTER             Y5731000
         $STO  SRPFTANK,,L         QUEUE THE ACTUAL DATA POINTER        Y5732000
         $MDM  SRPFTANK,-1          MINUS ONE FOR FLAG WORD             Y5733000
         $STO  RDFFUFLG,,L          AND SET EOF IN UFCB                 Y5734000
         $B    RPFFTXT,,L          EXIT                                 Y5735000
.NO1442E ANOP                                                           Y5736000
         AIF   (NOT &PN1442).NO1442W                                    Y5737000
RPFFPLC  $NULL                     LAST CARD WHILE PUNCHING             Y5738000
         $LD   RPFFPNEL            GET ELEMENT ADDRESS                  Y5739000
         $QFREL PNFF2FQP           RETURN ELEMENT TO QUEUE              Y5740000
         $B    RPFFTXT,,L          EXIT WITH GATE OPEN                  Y5741000
.NO1442W ANOP                                                           Y5742000
*********************************************************************** Y5743000
*              POINTERS, FLAGS, COMMANDS AND BUFFERS                  * Y5744000
*********************************************************************** Y5745000
         $BSS  0,E                                                      Y5746000
         AIF   (NOT &RD1442).NO1442H                                    Y5747000
RPFFBFP  $ADCON RPFFBF1            BUFFER 1 POINTER                     Y5748000
         $ADCON RPFFBF2            BUFFER 2 POINTER                     Y5749000
.NO1442H ANOP                                                           Y5750000
RPFFXAD  DC    AL2(*-*)            BUFFER PLUS COLUMN ADDRESS    E      Y5751000
RPFFVRC  DC    AL2(*-*)            READ OR WRITE COMMAND         O      Y5752000
RPFFOPC  DC    AL2(*-*)            OPERATION STATUS FLAG         E      Y5753000
RPFFWCN  DC    AL2($CONTROL+$1442+1) START 1442 WRITE            O      Y5754000
RPFFERR  DC    AL2(*-*)            OPERATION ERROR FLAG          E      Y5755000
RPFFSRS  DC    AL2($SENSED+$1442+1) SENSE 1442 WITH RESET        O      Y5756000
RPFFLSC  DC    AL2(*-*)            LAST CARD FLAG                E      Y5757000
RPFFCTL  DC    AL2(*-*)            READ OR WRITE CONTROL         O      Y5758000
RPFFPNEL DC    AL2(*-*)            ADDRESS OF PUNCH ELEMENT      E      Y5759000
RPFFSR4  DC    AL2($SENSED+$1442+2) SENSE-LEVEL 4 RESET          O      Y5760000
RPFFIOAR DC    AL2(*-*)            DATA OR BUFFER POINTER        E      Y5761000
RPFFEED  DC    AL2($CONTROL+$1442+2) FEED CYCLE COMMAND          O      Y5762000
         EJECT                                                          Y5763000
*********************************************************************** Y5764000
*              1442 COLUMN INTERRUPT PROCESSOR - SLIP 0               * Y5765000
*********************************************************************** Y5766000
RPCOLINT $NULL                     ENTRY FROM FLIP 0                    Y5767000
         $XIO  RPFFSRS-D1          SENSE WITH RESET                     Y5768000
         $XIO  RPFFXAD             ISSUE READ OR WRITE COMMAND          Y5769000
         $MDM  RPFFXAD,1           INCREMENT COLUMN POINTER             Y5770000
         $B    RTPL0RTN,,L         RETURN TO FLIP 0                     Y5771000
*********************************************************************** Y5772000
*              1442 OPERATION COMPLETE INTERRUPT PROCESSOR - SLIP 4   * Y5773000
*********************************************************************** Y5774000
RPFFTINT $NULL                     ENTRY FROM FLIP 4                    Y5775000
         $XIO  RPFFSR4-D1          SENSE WITH LEVEL 4 RESET             Y5776000
         $SLA  3                   GET 'ERROR CHECK' BIT                Y5777000
         $BC   RPFFRFR             BRANCH IF ERROR                      Y5778000
         $BSC  P+Z                 TEST LAST CARD                       Y5779000
         $B    RPFFLAS             BRANCH IF LAST CARD                  Y5780000
RPFFXIT  $ZAC                      CLEAR AC AND SET                     Y5781000
         $STO  RPFFOPC             OPERATION COMPLETE FLAG              Y5782000
         $B    RTPL4RTN,,L         EXIT TO FLIP 4                       Y5783000
RPFFRFR  $STL  RPFFERR             RUN UP ERROR FLAG                    Y5784000
         $B    RPFFXIT             EXIT TO FLIP 4                       Y5785000
RPFFLAS  $STL  RPFFLSC             RUN UP LAST CARD FLAG                Y5786000
         $B    RPFFXIT             EXIT TO FLIP 4                       Y5787000
         AIF   (NOT &RD1442).NO1442B                                    Y5788000
         DC    AL2(80)             BUFFER DATA COUNT                    Y5789000
RPFFBF1  $BSS  80                  BUFFER 1                             Y5790000
         DC    AL2(80)             BUFFER DATA COUNT                    Y5791000
RPFFBF2  $BSS  80                  BUFFER 2                             Y5792000
.NO1442B ANOP                                                           Y5793000
         AIF   (&PR1403 EQ 0).NO1403C                                   Y5794000
         TITLE 'RTP1130 (COMMUTATOR ROUTINE FOR 1403 PRINTER)'          Y5795000
         SPACE 3                                                        Y5796000
*********************************************************************** Y5797000
*                                                                     * Y5798000
* TITLE - PRFOT (1403 PRINTER COMMUTATOR ROUTINE)                     * Y5799000
*                                                                     * Y5800000
*********************************************************************** Y5801000
         SPACE 3                                                        Y5802000
*********************************************************************** Y5803000
*              ISSUE INTERVENTION REQUIRED MESSAGE AND WAIT           * Y5804000
*********************************************************************** Y5805000
PRFOINV  $NULL                     ENTRY FROM PRFOWTE SECTION           Y5806000
         $MDM  PRFOMSW,0           TEST MESSAGE ISSUED FLAG             Y5807000
         $B    PRFOTNP             EXIT IF MESSAGE ISSUED               Y5808000
         $WTO  PRFOMSG,PRFOTRT     TELL OPERATOR ABOUT IT               Y5809000
         $STL  PRFOMSW             SET MESSAGE ISSUED FLAG              Y5810000
         $B    PRFOTNP             WAIT FOR OPERATOR ACTION             Y5811000
PRFOMSG  DC    AL1($BLACK+$EBCD,$LIST15) CONTROL WORD                   Y5812000
         DC    AL2(30)             DATA COUNT                           Y5813000
         DC    C'INTERVENTION REQUIRED ON 1403 '                        Y5814000
PRFOMSW  DC    AL2(*-*)            MESSAGE ISSUED FLAG                  Y5815000
*********************************************************************** Y5816000
*              ENTRY POINT FROM COMMUTATOR                            * Y5817000
*********************************************************************** Y5818000
PRFOTEP  $NULL                     ENTRY POINT FROM COMMUTATOR          Y5819000
PRFOTVE  $B    PRFOTNI,,L          VARIABLE ENTRY VECTOR                Y5820000
PRFOTNP  $B    PRFOTRT,,L          NON-PROCESS EXIT POINT               Y5821000
*********************************************************************** Y5822000
*              PROCESS END OF PRINT FILE                              * Y5823000
*********************************************************************** Y5824000
PRFOEOF  $LD   PRFOAQE             GET NULL TANK POINTER                Y5825000
         $QFREL PRFO3FQP           RETURN TANK TO FREE CHAIN            Y5826000
PRFOTNI  $NULL                     NORMAL ENTRY POINT                   Y5827000
PRFOGET  $STL  PRFOTVE+D1          RESET VARIABLE ENTRY POINT           Y5828000
         $DEQUE PRFO3AQP           GET A PRINT ELEMENT                  Y5829000
         $BZ   PRFOTRT             BRANCH IF NOT AVAILABLE              Y5830000
         $STO  PRFOAQE             SAVE ELEMENT ADDRESS                 Y5831000
         $LXA  PRFOAQE,WA          ELEMENT ADDRESS TO WA                Y5832000
         $MDX  PR1403DT,WA,X       POINT WA TO PRINT DATA               Y5833000
         $STX  PRFOIOA,WA          STORE ADDRESS IN IOAR                Y5834000
*                                  GET ELEMENT CONTROL WORD             Y5835000
         $LD   (PR1403CB-PR1403DT),WA,X                                 Y5836000
         $BZ   PRFOEOF             EXIT IF LAST LINE PRINTED            Y5837000
         $SLA  10                  GET SRCB (BIT 2)                     Y5838000
         $STO  PRFOSCC             SAVE FOR LATER USE                   Y5839000
         $BN   PRFOCCN             BRANCH IF SPACE OR SKIP IMMEDIATE    Y5840000
         $LD   PRFOSTM             SET DSW TEST MASK TO CHECK           Y5841000
         $STO  PRFOVMS              PRINTER AND CARRIAGE BUSY           Y5842000
         $BSI  PRFOWTE             BE SURE WRITE CAN BE ISSUED          Y5843000
         $STO  PRFOBFI             SET BUFFER INDICATOR NOT FULL        Y5844000
         $XIO  PRFOIOA             ISSUE INITIATE WRITE COMMAND         Y5845000
         $STL  PRFOTVE+D1          RESET VARIABLE ENTRY POINT           Y5846000
         $LD   PRFOBFI             WAIT FOR 1403 HARDWARE BUFFER        Y5847000
         $BZ   PRFOTRT              TO COMPLETE FILLING...              Y5848000
         $LD   PRFOSCC             GET SHIFTED SRCB FOR CARRIAGE        Y5849000
         $SKPZ                     SKIP IF WRITE-NO SPACE               Y5850000
         $B    PRFOCCN             OTHERWISE, OFF TO CC ROUTINE         Y5851000
PRFOEXT  $LD   PRFOAQE             GET ELEMENT ADDRESS                  Y5852000
         $QFREL PRFO3FQP           RETURN TO FREE ELEMENT QUEUE         Y5853000
         $B    PRFOGET             GO GET MORE PRINT DATA               Y5854000
*********************************************************************** Y5855000
*              SUBROUTINE TO WAIT UNTIL 1403 NOT BUSY AND READY       * Y5856000
*********************************************************************** Y5857000
PRFOWTE  DC    AL2(*-*)            ENTRY VIA $BSI PRFOWTE               Y5858000
         $STL  PRFOTVE+D1          SET VARIABLE ENTRY POINT             Y5859000
         $XIO  PRFOSWR-D1          SENSE 1403 WITHOUT RESET             Y5860000
         $BOD  PRFOINV             BRANCH IF NOT READY                  Y5861000
         $AND  PRFOVMS             CLEAR ALL BUT BUSY BITS              Y5862000
         $BNZ  PRFOTRT             NON-PROCESS EXIT IF BUSY             Y5863000
         $STO  PRFOMSW             RESET MESSAGE ISSUED FLAG            Y5864000
         $B    PRFOWTE,,I          RETURN TO CALLER                     Y5865000
*********************************************************************** Y5866000
*              CONSTANTS, COMMANDS AND STORAGE                        * Y5867000
*********************************************************************** Y5868000
         $BSS  0,E                 EVEN STORAGE REQUIRED                Y5869000
PRFOIOA  DC    AL2(*-*)            SET TO ELEMENT DATA FIELD ADDRESS    Y5870000
         DC    AL2($1403+$IWRITE)  INITIATE WRITE COMMAND               Y5871000
PRFOWCM  $ADCON PRFOSKB            ADDRESS OF CHANNEL SKIP BIT WORD     Y5872000
         DC    AL2($1403+$WRITE)   WRITE COMMAND FOR SKIP               Y5873000
PRFOAQE  DC    AL2(*-*)            ACTIVE QUEUE ELEMENT ADDRESS         Y5874000
PRFOSWR  DC    AL2($1403+$SENSED)  SENSE 1403 WITHOUT RESET             Y5875000
PRFOSCC  DC    AL2(*-*)            STORAGE FOR SHIFTED SRCB             Y5876000
PRFOSRS  DC    AL2($1403+$SENSED+1) SENSE 1403 WITH RESET               Y5877000
PRFOVMS  DC    AL2(*-*)            VARIABLE PRINTER-CARRIAGE MASK       Y5878000
PRFOCNT  DC    AL2($1403+$CONTROL) CONTROL COMMAND TO SPACE 1 LINE      Y5879000
PRFOSTM  DC    X'0006'             MASK FOR DSW BUSY BITS               Y5880000
PRFOSKB  DC    AL2(*-*)            CALCULATED CHANNEL SKIP BIT          Y5881000
PRFODSW  DC    AL2(*-*)            DSW STORAGE FOR FLIP 4               Y5882000
PRFOCNB  DC    X'1000'             MODEL CHANNEL SKIP BIT               Y5883000
PRFODMS  DC    X'8600'             MASK FOR ALL BUT DSW ERROR BITS      Y5884000
PRFOWOC  DC    X'0004'             MASK FOR CARRIAGE BUSY BIT           Y5885000
PRFOBFI  DC    AL2(*-*)            HARDWARE BUFFER FULL INDICATOR       Y5886000
*********************************************************************** Y5887000
*              SUBROUTINE TO PERFORM SPACE AND SKIP FUNCTIONS         * Y5888000
*********************************************************************** Y5889000
PRFOCCN  $NULL                     ENTRY WITH ADJUSTED SRCB IN AC       Y5890000
         $SLA  1                   SHIFT OUT SRCB BIT 2                 Y5891000
         $LDS  0                   TURN OFF CARRY (AND OVERFLOW)        Y5892000
         $SLA  1                   SHIFT OUT SRCB BIT 3                 Y5893000
         $SRA  12                  COUNT FIELD TO LOW ORDER AC          Y5894000
         $STO  WA,,L               STORE IN WA                          Y5895000
         $LD   PRFOWOC             SET DSW MASK TO CHECK                Y5896000
         $STO  PRFOVMS              ONLY FOR CARRIAGE BUSY              Y5897000
         $BC   PRFOCHN             BRANCH IF SKIP TO CHANNEL N          Y5898000
*********************************************************************** Y5899000
*              THIS SECTION SIMULATES SPACE N FUNCTION                * Y5900000
*********************************************************************** Y5901000
PRFOSLP  $BSI  PRFOWTE             WAIT FOR ANY PREVIOUS OPERATION      Y5902000
         $XIO  PRFOCNT-D1          ISSUE SPACE CONTROL COMMAND          Y5903000
         $MDX  -1,WA               DECREMENT SPACE COUNT                Y5904000
         $B    PRFOSLP             ISSUE ANOTHER SPACE                  Y5905000
         $B    PRFOEXT             GO TO EXIT PROCEDURE                 Y5906000
*********************************************************************** Y5907000
*              THIS SECTION ISSUES SKIP TO CHANNEL N COMMANDS         * Y5908000
*********************************************************************** Y5909000
PRFOCHN  $LD   PRFOCNB             GET MODEL CHANNEL SKIP BIT           Y5910000
         $SRA  0,WA                POSITION AND SET                     Y5911000
         $STO  PRFOSKB             FOR SKIP WRITE COMMAND               Y5912000
         $BSI  PRFOWTE             WAIT FOR PREVIOUS OPERATION          Y5913000
         $XIO  PRFOWCM             ISSUE SKIP COMMAND                   Y5914000
         $B    PRFOEXT             GO TO EXIT PROCEDURE                 Y5915000
*********************************************************************** Y5916000
*              1403 INTERRUPT PROCESSOR - SLIP 4                      * Y5917000
*********************************************************************** Y5918000
PRFOTINT $NULL                     ENTRY FROM FLIP 4                    Y5919000
         $XIO  PRFOSRS-D1          SENSE 1403 WITH RESET                Y5920000
         $STO  PRFODSW             SAVE DEVICE STATUS WORD              Y5921000
         $AND  PRFOSVT             CLEAR ALL BUT BUFFER FULL BIT        Y5922000
         $SKPZ                     PREVENT PREMATURE RESET...           Y5923000
         $STO  PRFOBFI             SET BUFFER FULL INDICATOR            Y5924000
         $LD   PRFODSW             GET DEVICE STATUS WORD               Y5925000
         $AND  PRFOPCM             MASK ALL BUT 'PRINT COMPLETE' BIT    Y5926000
         $BZ   RTPL4RTN            IGNORE ALL OTHER INTERRUPTS          Y5927000
         $LD   PRFODSW             GET STATUS WORD                      Y5928000
         $AND  PRFODMS             MASK ALL BUT ERROR BITS              Y5929000
         $BZ   RTPL4RTN            EXIT TO FLIP 4 IF NO ERRORS          Y5930000
         $MDM  $ERRFFWT,1           OTHERWISE, DING ERROR COUNTER       Y5931000
         $B    RTPL4RTN,,L           AND THEN EXIT TO FLIP 4...         Y5932000
PRFOSVT  DC    X'4000'             MASK FOR BUFFER FULL BIT             Y5933000
PRFOPCM  DC    X'2000'             'PRINT COMPLETE' BIT MASK            Y5934000
.NO1403C ANOP                                                           Y5935000
         AIF   (&PR1132 EQ 0).NO1132B                                   Y5936000
         TITLE 'RTP1130 (COMMUTATOR ROUTINE FOR 1132 PRINTER)'          Y5937000
*********************************************************************** Y5938000
*                                                                     * Y5939000
* TITLE - PRETT (1132 PRINTER COMMUTATOR ROUTINE)                     * Y5940000
*                                                                     * Y5941000
*********************************************************************** Y5942000
         SPACE 3                                                        Y5943000
*********************************************************************** Y5944000
*              ISSUE INTERVENTION REQUIRED MESSAGE AND WAIT           * Y5945000
*********************************************************************** Y5946000
PRETINV  $NULL                     ENTRY FROM PRETWTE SECTION           Y5947000
         $MDM  PRETMSW,0           TEST MESSAGE ISSUED FLAG             Y5948000
         $B    PRETTNP             EXIT IF MESSAGE ISSUED               Y5949000
         $WTO  PRETMSG,PRETTRT     TELL OPERATOR ABOUT 1132             Y5950000
         $STL  PRETMSW             SET MESSAGE ISSUED FLAG              Y5951000
         $B    PRETTNP             WAIT FOR OPERATOR ACTION             Y5952000
PRETMSG  DC    AL1($BLACK+$EBCD,$LIST15) CONTROL WORD                   Y5953000
         DC    AL2(30)             DATA COUNT                           Y5954000
         DC    C'INTERVENTION REQUIRED ON 1132 '                        Y5955000
         $BSS  0,E                                                      Y5956000
PRETK48  DC    AL2(48)             CYCLE COUNTER CONSTANT               Y5957000
         DC    AL2(12)             CYCLE COUNTER CONSTANT               Y5958000
PRETAQE  DC    AL2(*-*)            PRINT ELEMENT ADDRESS                Y5959000
PRETCNT  DC    AL2(*-*)            PRINT ELEMENT WORD COUNT             Y5960000
*********************************************************************** Y5961000
*              ENTRY POINT FROM COMMUTATOR                            * Y5962000
*********************************************************************** Y5963000
PRETTEP  $NULL                     ENTRY POINT FROM COMMUTATOR          Y5964000
PRETTVE  $B    PRETTNI,,L          VARIABLE ENTRY VECTOR                Y5965000
PRETTNP  $B    PRETTRT,,L          NON-PROCESS EXIT POINT               Y5966000
*********************************************************************** Y5967000
*              PROCESS END OF PRINT FILE                              * Y5968000
*********************************************************************** Y5969000
PRETDNE  $LD   PRETAQE             GET NULL PRINT ELEMENT               Y5970000
         $QFREL PRET2FQP           RETURN ELEMENT TO FREE CHAIN         Y5971000
PRETTNI  $NULL                     NORMAL ENTRY POINT                   Y5972000
PRETGIT  $STL  PRETTVE+D1          RESET ENTRY POINT                    Y5973000
         $DEQUE PRET2AQP           GET A PRINT ELEMENT                  Y5974000
         $BZ   PRETTRT             NON-PROCESS EXIT IF NONE             Y5975000
         $STO  PRETAQE             SAVE ADDRESS OF ELEMENT              Y5976000
         $LXA  PRETAQE,WA          ELEMENT ADDRESS TO WA                Y5977000
         $MDX  PR1132DT,WA,X       POINT WA TO PRINT DATA               Y5978000
         $STX  PRETDTA,WA,L        SAVE ADDRESS OF PRINT                Y5979000
         $STX  PRETFROM+D1,WA,L    DATA FOR PRESCAN                     Y5980000
         $LD   (PR1132CB-PR1132DT),WA,X GET ELEMENT CONTROL WORD        Y5981000
         $BZ   PRETDNE             BRANCH IF LAST LINE PRINTED          Y5982000
         $SLA  10                  GET SRCB BIT 2                       Y5983000
         $STO  PRETSCC             SAVE ADJUSTED SRCB                   Y5984000
         $BNN  PRETRLD             BRANCH IF NOT IMMEDIATE OPERATION    Y5985000
         $BSI  PRETCCN             GO TO CARRIAGE CONTROL ROUTINE       Y5986000
         $LD   PRETAQE             GET ELEMENT ADDRESS                  Y5987000
         $QFREL PRET2FQP           RETURN TO FREE CHAIN                 Y5988000
         $B    PRETGIT             GET NEXT PRINT LINE                  Y5989000
PRETRLD  $LD   (PR1132LC-PR1132DT),WA,X GET ELEMENT LINE CONTROL WORD   Y5990000
         $SRT  8                   ISOLATE NUMERIC INDICATOR            Y5991000
         $STO  PRETNUM,,L          SAVE FOR LATER INTERROGATION         Y5992000
         $ZAC                      CLEAR POSSIBLE INDICATOR             Y5993000
         $SLT  7                   GET NUMBER OF WORDS TO PRINT         Y5994000
         $STO  PRETCNT             SAVE IT                              Y5995000
         $SRA  8                   CLEAR AC AND                         Y5996000
         $S    PRETCNT             COMPLEMENT WORD COUNT                Y5997000
         $STO  PRENEGWD,,L         SAVE IT IN                           Y5998000
         $STO  PRENEGW2,,L         VARIOUS PLACES                       Y5999000
         $B    PREPRSCN,,L         GO TO PRESCAN ROUTINE                Y6000000
PRETSRTN $NULL                     RETURN FROM PRESCAN                  Y6001000
         $LD   PRETAQE             GET PRINT ELEMENT ADDRESS            Y6002000
         $QFREL PRET2FQP           RETURN TO FREE ELEMENT QUEUE         Y6003000
         $BSI  PRETWTE             BE SURE PRINT CAN START              Y6004000
         $LDD  PRETK48             SET COUNTERS FOR A                   Y6005000
         $STO  PRECTR48,,L         TOTAL OF 66                          Y6006000
         $STD  PRECTR16,,L         PRINTER CYCLES                       Y6007000
         $BSI  PRETCLRS            GO CLEAR SCAN AREA                   Y6008000
         $MDM  $PRTSCAN+7,1        INSERT SCAN COMPLETE BIT             Y6009000
         $XIO  PRESTRTP-D1         START THE PRINTER                    Y6010000
         $STL  PRETTVE+D1          RESET VARIABLE ENTRY POINT           Y6011000
         $LD   PRETCTR2,,L         GET PRINT COMPLETE FLAG              Y6012000
         $BNZ  PRETTRT             NON-PROCESS EXIT IF NOT DONE         Y6013000
         $LD   PRETSCC             GET ADJUSTED SRCB                    Y6014000
         $BSI  PRETCCN,,L,Z        BRANCH IF CARRIAGE CONTROL REQUIRED  Y6015000
         $B    PRETGIT             GO GET MORE DATA                     Y6016000
PRETMSW  DC    AL2(*-*)            MESSAGE ISSUED FLAG                  Y6017000
         EJECT                                                          Y6018000
*********************************************************************** Y6019000
*              ROUTINE TO PROCESS CARRIAGE CONTROL FUNCTIONS          * Y6020000
*********************************************************************** Y6021000
PRETCCN  DC    AL2(*-*)                                                 Y6022000
         $SLA  1                   SHIFT OUT SRCB BIT 2                 Y6023000
         $LDS  0                   TURN OFF CARRY INDICATOR             Y6024000
         $SLA  1                   SHIFT OUT SRCB BIT 3                 Y6025000
         $SRA  12                  COUNT FIELD TO LOW ORDER             Y6026000
         $STO  WA,,L               AC AND WA                            Y6027000
         $BC   PRETSCK             BRANCH IF SKIP OPERATION             Y6028000
*********************************************************************** Y6029000
*              THIS SECTION SIMULATES THE SPACE N FUNCTION            * Y6030000
*********************************************************************** Y6031000
PRETSPC  $NULL                                                          Y6032000
         $BSI  PRETWTE             WAIT FOR PREVIOUS OPERATION          Y6033000
         $XIO  PRETSPA-D1          ISSUE SPACE CONTROL COMMAND          Y6034000
         $MDX  -1,WA               DECREMENT SPACE COUNT                Y6035000
         $B    PRETSPC             ISSUE ANOTHER SPACE                  Y6036000
         $B    PRETCCN,,I          RETURN                               Y6037000
*********************************************************************** Y6038000
*              THIS SECTION INITIATES SKIP TO CHANNEL N FUNCTION      * Y6039000
*********************************************************************** Y6040000
PRETSCK  $NULL                                                          Y6041000
         $LD   PRETMDS             GET MODEL SKIP BIT                   Y6042000
         $SRA  0,WA                SHIFT COUNT=CHANNEL SPECIFIED        Y6043000
         $BOD  PRETSKT             BRANCH IF CHANNEL 12                 Y6044000
         $SRA  3                   TRY CHANNEL 9                        Y6045000
         $BOD  PRETSKN             BRANCH IF CHANNEL 9                  Y6046000
         $SRA  3                   ASSUME CHANNELS 1-6                  Y6047000
         $SLA  1                   POSITION MODEL BIT TO                Y6048000
PRETSKN  $SLA  1                   CORRESPOND TO INTERRUPT              Y6049000
         $SKPN                     SKIP IF LEGAL CHANNEL                Y6050000
         $LD   PRETCN1             OTHER WISE USE CHANNEL 1             Y6051000
PRETSKT  $STO  PRETSKM             SAVE FOR INTERRUPT TIME COMPARE      Y6052000
         $BSI  PRETWTE             WAIT FOR PREVIOUS OPERATION          Y6053000
         $XIO  PRETSCX-D1          ISSUE SKIP COMMAND                   Y6054000
         $B    PRETCCN,,I          RETURN                               Y6055000
         EJECT                                                          Y6056000
*********************************************************************** Y6057000
*              CONSTANTS FOR CARRIAGE CONTROL ROUTINE                 * Y6058000
*********************************************************************** Y6059000
         $BSS  0,E                                                      Y6060000
PRETSCC  DC    AL2(*-*)            ADJUSTED SRCB STORAGE                Y6061000
PRETSPA  DC    AL2($1132+$CONTROL+1) SPACE CONTROL                      Y6062000
PRETSTM  DC    X'0009'             PRINTER AND CARRIAGE BUSY MASK       Y6063000
PRESTRTP DC    AL2($1132+$CONTROL+128) START PRINTER COMMAND            Y6064000
PRETCN1  DC    AL2(X'0080')        CHANNEL 1 SKIP BIT                   Y6065000
PRETSCX  DC    AL2($1132+$CONTROL+4) SKIP CONTROL                       Y6066000
PRETSKM  DC    AL2(*-*)            MASK FOR CHANNEL SKIP CONTROL        Y6067000
PRETSNR  DC    AL2($1132+$SENSED)  SENSE WITHOUT RESET                  Y6068000
PRETMDS  DC    X'1000'             MODEL CHANNEL SKIP BIT               Y6069000
*********************************************************************** Y6070000
*              WAIT FOR PRINTER OR CARRIAGE NOT BUSY                  * Y6071000
*********************************************************************** Y6072000
PRETWTE  DC    AL2(*-*)            ENTRY VIA $BSI PRETWTE               Y6073000
         $STL  PRETTVE+D1          RESET VARIABLE ENTRY POINT           Y6074000
         $XIO  PRETSNR-D1          SENSE 1132 WITHOUT RESET             Y6075000
         $SRT  10                  GET PRINTER NOT READY BIT            Y6076000
         $BOD  PRETINV             BRANCH IF NOT READY...               Y6077000
         $SLT  1                   RESTORE PRINTER BUSY BIT             Y6078000
         $AND  PRETSTM             ISOLATE BUSY INDICATORS              Y6079000
         $BNZ  PRETTRT             NON-PROCESS EXIT IF BUSY             Y6080000
         $STO  PRETMSW             RESET MESSAGE ISSUED FLAG            Y6081000
         $B    PRETWTE,,I          RETURN TO CALLER                     Y6082000
*********************************************************************** Y6083000
*              ROUTINE TO CLEAR PRINT SCAN AREA                       * Y6084000
*********************************************************************** Y6085000
PRETCLRS DC    AL2(*-*)            ENTRY VIA $BSI PRETCLRS              Y6086000
         $AXT  0,WB                CLEAR WB AND                         Y6087000
         $SLT  32                  AC/EXT AND LOCATIONS..               Y6088000
         $STD  $PRTSCAN,WB,X       32-33                                Y6089000
         $STD  $PRTSCAN+2,WB,X     34-35                                Y6090000
         $STD  $PRTSCAN+4,WB,X     36-37                                Y6091000
         $STD  $PRTSCAN+6,WB,X     38-39                                Y6092000
         $B    PRETCLRS,,I         RETURN                               Y6093000
*********************************************************************** Y6094000
*              INTERNAL PRINT BUFFER AND CHARACTER TABLE              * Y6095000
*********************************************************************** Y6096000
PRETTABL $BSS  64,E                CHARACTER TABLE                      Y6097000
PRETBUFR $BSS  120                 PRINT BUFFER                         Y6098000
         EJECT                                                          Y6099000
*********************************************************************** Y6100000
*              INITIALIZATION FOR PRESCAN ROUTINE                     * Y6101000
*********************************************************************** Y6102000
PREPRSCN $NULL                                                          Y6103000
         $AXT  184,WB,L            LENGTH OF TABLE PLUS BUFFER          Y6104000
         $SLT  32                  CLEAR AC AND EXT AND                 Y6105000
PRELOOP1 $STD  PRETTABL-2*D1,WB,L  TABLE PLUS BUFFER                    Y6106000
         $MDX  -2,WB               DECREMENT COUNTER                    Y6107000
         $B    PRELOOP1            KEEP GOING                           Y6108000
         $STO  PRECTRSF            CLEAR PRECTRSF                       Y6109000
*********************************************************************** Y6110000
*                                                                     * Y6111000
*              ROUTINE TO EXAMINE EACH CHARACTER IN PRINT ELEMENT AND * Y6112000
*              BUILD A CHARACTER TABLE INDICATING FOR EACH OF THE 48  * Y6113000
*              PRINTABLE CHARACTERS THE NUMBER OF MASK WORDS REQUIRED * Y6114000
*              AND THEIR RELATIVE LOCATIONS IN THE PRINT SCAN AREA    * Y6115000
*                                                                     * Y6116000
*********************************************************************** Y6117000
PRELOOP2 $AXT  16,WA               SET GROUP INDEX                      Y6118000
PRELOOP3 $BSI  PRETGET             GET CHARACTER TABLE ADDRESS          Y6119000
         $LD   PRETAENT,,I         GET CHARACTER TABLE ENTRY            Y6120000
         $SRT  0,WB                CHECK RELATIVE WORD AND              Y6121000
         $BOD  PRETCHK             TEST FOR ANY OTHER CHARACTERS        Y6122000
         $OR   PRETKN1             IN THIS GROUP OF 16. NO, SET         Y6123000
         $SLT  0,WB                INDICATOR PLUS, ADD ONE TO           Y6124000
         $A    PREK0100            COUNT OF MASK WORDS REQUIRED         Y6125000
         $STO  PRETAENT,,I         FOR CHARACTER. REENTER TABLE         Y6126000
PRETCHK  $LD   PRENEGWD,,L         CHECK FOR SCAN DONE                  Y6127000
         $BZ   PRELOOP8            EXIT IF DONE                         Y6128000
         $MDX  -1,WA               ADJUST COUNTERS                      Y6129000
         $B    PRELOOP3            FOR NEXT PASS                        Y6130000
         $TSL  PRETTVE+D1          CYCLE COMMUTATOR                     Y6131000
         $MDX  1,WB                LOOP                                 Y6132000
         $B    PRELOOP2            AGAIN                                Y6133000
*********************************************************************** Y6134000
*              AFTER SCAN OF USERS PRINT BUFFER, SCAN THE CONSTRUCTED * Y6135000
*              TABLE AND DETERMINE THE STARTING RELATIVE LOCATION FOR * Y6136000
*              THE MASK WORDS TO BE STORED IN THE INTERNAL PRINT      * Y6137000
*              BUFFER                                                 * Y6138000
*********************************************************************** Y6139000
PRELOOP8 $AXT  64,WB               TABLE SIZE TO WB                     Y6140000
PRELOOP4 $LD   PRETTABL-D1,WB,L    GET TABLE ENTRY                      Y6141000
         $SRT  8                   LEFT HALF                            Y6142000
         $STO  PRETTEMP            SAVE IT                              Y6143000
         $A    PRECTRSF            UPDATE RELATIVE ADDRESS              Y6144000
         $STO  PRECTRSF            IN BUFFER FOR THIS                   Y6145000
         $S    PRETTEMP            CHARACTER                            Y6146000
         $SLT  8                                                        Y6147000
         $STO  PRETTABL-D1,WB,L    STORE BACK IN TABLE                  Y6148000
         $MDX  -1,WB               POINT TO NEXT ENTRY                  Y6149000
         $B    PRELOOP4            GET IT                               Y6150000
         EJECT                                                          Y6151000
*********************************************************************** Y6152000
*              SCAN THE PRINT DATA TO CONSTRUCT THE ACTUAL MASK WORDS * Y6153000
*              THAT ARE REQUIRED FOR INSERTING INTO THE SCAN AREA AT  * Y6154000
*              EACH CHARACTER INTERUPT CYCLE                          * Y6155000
*********************************************************************** Y6156000
         $LD   PRENEGW2            SET TO SCAN PRINT LINE               Y6157000
         $STO  PRENEGWD            TO CONSTRUCT MASK WORDS              Y6158000
         $LD   PRETDTA             IN BUFFER                            Y6159000
         $STO  PRETFROM+D1         SETUP GET ROUTINE                    Y6160000
PRELOOP6 $AXT  16,WA               SET GROUP INDEX                      Y6161000
PRELOOP5 $BSI  PRETGET             GET CHARACTER TABLE ADDRESS          Y6162000
         $LD   PRETAENT,,I         GET CHARACTER TABLE ENTRY            Y6163000
         $SRT  8                   RELATIVE BUFFER ADDRESS              Y6164000
         $A    PREBADDR            GET ACTUAL BUFFER ADDRESS            Y6165000
         $STO  PREBUENT            AND STORE IT                         Y6166000
         $S    PREBADDR                                                 Y6167000
         $SRT  8                   ISOLATE PART OF ENTRY THAT           Y6168000
         $RTE  0,WB                HAS RELATIVE MASK WORDS REQUIRED     Y6169000
PRELOOP7 $BNN  PRELOOP9            LOOP TO FIND RELATIVE MASK           Y6170000
         $MDM  PREBUENT,1          WORD IN BUFFER WHICH                 Y6171000
PRELOOP9 $SLA  1                   CORRESPONDS TO THIS CHARACTER        Y6172000
         $BNZ  PRELOOP7            IN THIS PRINT POSITION               Y6173000
         $LDD  PRETKN1             OR IN A BIT INTO THE                 Y6174000
         $SRT  1                   APPROPRIATE MASK WORD                Y6175000
         $SLT  0,WA                AND STORE BACK IN                    Y6176000
         $OR   PREBUENT,,I         THE PROPER SLOT                      Y6177000
         $STO  PREBUENT,,I         IN THE BUFFER                        Y6178000
         $LD   PRENEGWD,,L         ARE WE DONE                          Y6179000
         $BZ   PRETSRTN            BRANCH IF DONE TO START PRINT        Y6180000
         $MDX  -1,WA               NO. ADJUST COUNTERS                  Y6181000
         $B    PRELOOP5            FOR NEXT CHARACTER                   Y6182000
         $TSL  PRETTVE+D1          CYCLE COMMUTATOR                     Y6183000
         $MDX  1,WB                NEXT SCAN                            Y6184000
         $B    PRELOOP6                                                 Y6185000
*********************************************************************** Y6186000
*              CONSTANTS AND POINTERS FOR PRESCAN                     * Y6187000
*********************************************************************** Y6188000
         $BSS  0,E                                                      Y6189000
PRETDTA  DC    AL2(*-*)            PRINT DATA ADDRESS                   Y6190000
PRECTRSF DC    AL2(*-*)            RELATIVE ADDRESS STORAGE             Y6191000
PREK0100 DC    X'0100'             CONSTANT                             Y6192000
PRETKN1  DC    AL2(1)              CONSTANT                             Y6193000
PRELFTRT DC    AL2(*-*)            LEFT/RIGHT INDICATOR                 Y6194000
PRETTEMP DC    AL2(*-*)            TEMPORARY WORK STORAGE               Y6195000
PRETADDR $ADCON PRETTABL           TABLE POINTER                        Y6196000
PRETAENT DC    AL2(*-*)            CHARACTER TABLE ENTRY POINTER        Y6197000
PREBADDR $ADCON PRETBUFR           BUFFER POINTER                       Y6198000
PREBUENT DC    AL2(*-*)            WORK STORAGE                         Y6199000
*********************************************************************** Y6200000
*              SUBROUTINE TO CONVERT PACKED EBCDIC CHARACTER IN TO A  * Y6201000
*              TABLE ADDRESS OF 0-63 PLUS THE ADDRESS OF THE          * Y6202000
*              BEGINNING OF THE TABLE                                 * Y6203000
*********************************************************************** Y6204000
PRETGET  DC    AL2(*-*)            ENTRY VIA $BSI PRETGET               Y6205000
PRETFROM $LD   *-*,,L              GET WORD WITH PACKED EBCDIC          Y6206000
         $MDM  PRELFTRT,0          CHECK LEFT/RIGHT INDICATOR           Y6207000
         $SLA  8                   RIGHT. SHIFT TO LEFT                 Y6208000
         $SLA  2                   FOLD INTO 6 BITS                     Y6209000
         $SRA  10                  AND CREATE TABLE                     Y6210000
         $A    PRETADDR            ENTRY ADDRESS                        Y6211000
         $STO  PRETAENT            STORE IT                             Y6212000
         $LD   PRELFTRT            ADJUST PRINT DATA ADDRESS            Y6213000
         $A    PRETFROM+D1         BY O OR 1 FOR NEXT                   Y6214000
         $STO  PRETFROM+D1         CHARACTER FETCH                      Y6215000
         $LD   PRENEGWD            REDUCE WORD COUNT                    Y6216000
         $A    PRELFTRT            BY ZERO OR ONE                       Y6217000
         $STO  PRENEGWD            AND STORE BACK                       Y6218000
         $LD   PRELFTRT            REVERSE SETTING                      Y6219000
         $EOR  PRETKN1             OF LEFT/RIGHT                        Y6220000
         $STO  PRELFTRT            INDICATOR                            Y6221000
         $B    PRETGET,,I          RETURN TO CALLER                     Y6222000
         EJECT                                                          Y6223000
*********************************************************************** Y6224000
*              1132 INTERRUPT PROCESSOR - SLIP 1                      * Y6225000
*********************************************************************** Y6226000
PRETTINT $NULL                     ENTRY FROM FLIP 1 WITH AC/EXT        Y6227000
*                                  AND STATUS SAVED                     Y6228000
         $XIO  PRESENSR-D1         SENSE WITH RESET                     Y6229000
         $STO  PRETSDSW            SAVE DSW                             Y6230000
         $SRA  14                  IGNORE SPACE RESPONSE INTERRUPT      Y6231000
         $BOD  PRETSKP             BRANCH IF SKIP RESPONSE              Y6232000
         $SRA  1                   GET EMITTER INTERRUPT BIT            Y6233000
         $BZ   RTPL1RTN            EXIT TO FLIP 1 IF NOT EMITTER        Y6234000
         $B    PREMITIN            GO TO EMITTER INTERRUPT ROUTINE      Y6235000
*********************************************************************** Y6236000
*              CONSTANTS, COMMANDS AND STORAGE                        * Y6237000
*********************************************************************** Y6238000
         $BSS  0,E                                                      Y6239000
PRETSDSW DC    AL2(*-*)            DSW STORAGE                          Y6240000
PRESTOPC DC    AL2($1132+$CONTROL+2) STOP CARRIAGE CONTROL              Y6241000
PRECTR46 DC    AL2(*-*)            SCAN CHECK CYCLE DELAY COUNTER       Y6242000
PRESTOPP DC    AL2($1132+$CONTROL+64) PRINTER STOP COMMAND              Y6243000
PRETCK46 DC    AL2(46)             CONSTANT 46                          Y6244000
PRESENSR DC    AL2($1132+$SENSED+1) SENSE 1132 WITH RESET               Y6245000
PRENEGWD DC    AL2(*-*)            NEGATIVE PRINT WORD COUNT            Y6246000
PRENEGW2 DC    AL2(*-*)            NEGATIVE PRINT WORD COUNT            Y6247000
PRETIMSK DC    AL2(X'00FF')        CLEAR ALL BUT CHANNEL SKIP BITS      Y6248000
PRETCN3  DC    AL2(3)              CONSTANT 3                           Y6249000
*********************************************************************** Y6250000
*              SKIP TO CHANNEL N INTERRUPT PROCESSOR                  * Y6251000
*********************************************************************** Y6252000
PRETSKP  $LD   PRETSDSW            GET INTERRUPT DSW                    Y6253000
         $AND  PRETIMSK            CLEAR ALL BUT SKIP BITS              Y6254000
         $EOR  PRETSKM,,L          TEST FOR SELECTED CHANNEL            Y6255000
         $SKPN                     SKIP IF NOT                          Y6256000
         $XIO  PRESTOPC-D1         STOP THE CARRIAGE                    Y6257000
         $LD   PRETSDSW            GET INTERRUPT DSW                    Y6258000
         $BNN  RTPL1RTN            EXIT IF NO EMITTER INTERRUPT         Y6259000
*********************************************************************** Y6260000
*              EMITTER INTERRUPT PROCESSOR                            * Y6261000
*********************************************************************** Y6262000
PREMITIN $NULL                                                          Y6263000
         $STX  PRETXXWA+D1,WA      SAVE WA                              Y6264000
         $STX  PRETXXWB+D1,WB      AND WB                               Y6265000
         $LD   PRECTR46            CHECK FOR RESCAN DELAY LOOP          Y6266000
         $BNZ  PREDNG46            BRANCH IF RESCAN DELAY               Y6267000
         $LD   PRETSDSW            GET DSW AND TEST                     Y6268000
         $SLA  4                   FOR SCAN CHECK                       Y6269000
         $BP   PRETFC70            BRANCH IF NO SCAN CHECK              Y6270000
         $LD   PRETCK46            SET UP FOR 46 CYCLE WAIT             Y6271000
         $STO  PRECTR46            LOOP AND RESUME SCAN FROM            Y6272000
         $TSL  PRETCLRS            LAST GOOD POSITION                   Y6273000
         $MDM  $PRTSCAN+7,1        TURN ON SCAN COMPLETE BIT            Y6274000
         $MDM  $ERRETSC,1          DING 1132 SCAN CHECK COUNTER         Y6275000
         $B    PRETXXIT            EXIT IN LOOP MODE                    Y6276000
PRETFC70 $LD   PRECTR48            TEST END OF SCAN                     Y6277000
         $BNZ  PRETEMIT            BRANCH IF MORE                       Y6278000
         $TSL  PRETCLRS            CLEAR SCAN AREA AND                  Y6279000
         $MDM  $PRTSCAN+7,1        INSERT COMPLETE BIT                  Y6280000
         $LD   PRECTR16            TEST RESTORE COUNTER                 Y6281000
         $BNZ  PRETFC81            BRANCH IF NOT DONE                   Y6282000
         $MDM  PRETCTR2,-6         DECREMENT 2 CYCLE COUNTER            Y6283000
         $B    PRETXXIT            BRANCH IF NOT ZERO                   Y6284000
         $XIO  PRESTOPP            STOP THE PRINTER                     Y6285000
PRETXXIT $NULL                     EXIT PROCEDURE                       Y6286000
PRETXXWA $AXT  *-*,WA,L            RESTORE WA                           Y6287000
PRETXXWB $AXT  *-*,WB,L            AND WB                               Y6288000
         $B    RTPL1RTN,,L         EXIT TO FLIP 1                       Y6289000
PREDNG46 $S    PRETCNO             DECREMENT RESCAN                     Y6290000
         $STO  PRECTR46            WAIT LOOP COUNTER                    Y6291000
         $B    PRETXXIT            EXIT                                 Y6292000
PRETFC81 $S    PRETCN3             DECREMENT RESTORE                    Y6293000
         $STO  PRECTR16            CYCLE COUNTER                        Y6294000
         $B    PRETXXIT            EXIT                                 Y6295000
*********************************************************************** Y6296000
*              READS AND PROCESSES CURRENT EMITTER CHARACTER          * Y6297000
*********************************************************************** Y6298000
PRETEMIT $NULL                                                          Y6299000
         $XIO  PREREADI            READ EMITTER CHARACTER               Y6300000
         $LD   PRETNUM             GET NUMERIC ONLY FLAG                Y6301000
         $BZ   PRETFC75            BRANCH IF ALPHANUMERIC               Y6302000
         $LD   PRETCN22            NUMERIC...SET SCAN                   Y6303000
         $STO  PRECTR48            COUNTER TO 22                        Y6304000
         $LD   PREWHEEL            GET CHARACTER READ                   Y6305000
         $EOR  PREKNUM             COMPARE WITH FIRST NUMERIC           Y6306000
PRETFC74 $BNZ  PRETXXIT            EXIT IF NO MATCH                     Y6307000
         $STO  PRETNUM             TURN NUMERIC FLAG OFF                Y6308000
PRETFC75 $LD   PREWHEEL            GET CHARACTER READ AND               Y6309000
         $SLA  2                   CONVERT TO ADDRESS IN THE            Y6310000
         $SRA  10                  CHARACTER TABLE TO INSERT            Y6311000
         $A    PRETKTBL            APPROPRIATE MASK WORDS               Y6312000
         $STO  PRETGTBL+D1         FROM BUFFER TO SCAN AREA             Y6313000
         $TSL  PRETCLRS            GO CLEAR SCAN AREA                   Y6314000
PRETFC77 $AXT  -8,WA               SET STORE INDEX                      Y6315000
PRETGTBL $LD   *-*,,L              GET TABLE ENTRY AND                  Y6316000
         $SRT  8                   STORE BUFFER ADDRESS                 Y6317000
         $STO  PRETGMSK+D1         TO WB FOR MASK WORDS                 Y6318000
PRETGMSK $AXT  *-*,WB,L            FOR THIS CHARACTER                   Y6319000
         $MDX  PRETBUFR,WB,L                                            Y6320000
         $SRT  8                                                        Y6321000
PRETLOOP $RTE  1                   STORE MASK WORD                      Y6322000
         $BNN  PRETUPIT            IN APPROPRIATE SCAN                  Y6323000
         $LD   0,WB                AREA LOCATIONS                       Y6324000
         $STO  $PRTSCAN+8,WA,X                                          Y6325000
         $MDX  1,WB                POINT TO NEXT CHARACTER              Y6326000
PRETUPIT $MDX  1,WA                DING STORE INDEX                     Y6327000
         $B    PRETLOOP            BRANCH IF MORE                       Y6328000
         $LD   PRECTR48            REDUCE SCAN                          Y6329000
         $S    PRETCNO             COUNTER BY ONE                       Y6330000
         $STO  PRECTR48            FOR EACH PROCESSED CYCLE             Y6331000
         $MDM  $PRTSCAN+7,1        TURN ON SCAN COMPLETE BIT            Y6332000
         $B    PRETXXIT            EXIT                                 Y6333000
         EJECT                                                          Y6334000
*********************************************************************** Y6335000
*              LOCAL CONSTANTS, COMMANDS                              * Y6336000
*********************************************************************** Y6337000
         $BSS  0,E                                                      Y6338000
PREREADI $ADCON PREWHEEL           IOCC TO READ                         Y6339000
         DC    AL2($1132+$READ)    EMITTED CHARACTER                    Y6340000
PRECTR16 DC    AL2(*-*)            CYCLE COUNTER                        Y6341000
PRETCTR2 DC    AL2(*-*)            CYCLE COUNTER                        Y6342000
PRETCNO  DC    AL2(1)              CONSTANT 1                           Y6343000
PRETKTBL $ADCON PRETTABL           TABLE POINTER                        Y6344000
PRETNUM  DC    AL2(*-*)            NUMERIC ONLY INDICATOR               Y6345000
PRECTR48 DC    AL2(*-*)            CYCLE COUNTER                        Y6346000
PREWHEEL DC    AL2(*-*)            RESTING PLACE                        Y6347000
PREKNUM  DC    X'F100'             FIRST NUMERIC                        Y6348000
PRETCN22 DC    AL2(22)             NUMERIC CYCLE COUNT                  Y6349000
.NO1132B ANOP                                                           Y6350000
         TITLE 'RTP1130 (CONSOLE KB/PRINTER COMMUTATOR ROUTINE)'        Y6351000
         SPACE 3                                                        Y6352000
*********************************************************************** Y6353000
*                                                                     * Y6354000
* TITLE - CONSL (CONSOLE KEYBOARD/PRINTER COMMUTATOR ROUTINE)         * Y6355000
*                                                                     * Y6356000
* FUNCTION/PURPOSE -                                                  * Y6357000
*                                                                     * Y6358000
*  TO PROCESS KEYBOARD INPUT AND TO PRINT ON THE CONSOLE TYPEWRITER   * Y6359000
*  MESSAGES ORIGINATING FROM HASP OR INTERNAL SOURCES.                * Y6360000
*                                                                     * Y6361000
*  KEYBOARD INPUT IS INITIATED BY ACTIVATION OF THE 'INT REQ' KEY     * Y6362000
*  AND BY THE INTERRUPT ROUTINE WHICH SETS A FLAG AND OPENS THE       * Y6363000
*  CONSOLE ROUTINE GATE. NOTE...THE POSITION OF THE 'KEYBOARD/CONSOLE'* Y6364000
*  SWITCH IS NOT INTERROGATED AND INPUT IS ASSUMED TO BE FROM THE     * Y6365000
*  KEYBOARD. THE VALUE OF THE CONSOLE ENTRY KEYS IS READ ON EVERY     * Y6366000
*  COMMUTATOR PASS AND, IF KEY 0 IS ON, STORED IN LOCATION $ENTKEYS.  * Y6367000
*  ALL NON-CONTROL CHARACTER INPUT IS PRINTED AND THE CARD CODE VALUE * Y6368000
*  STORED FOR INVESTIGATION AT EOF TIME. IF THE FIRST CHARACTER OF    * Y6369000
*  INPUT IS '.' (PERIOD) THEN THE DATA IS ASSUMED TO BE A LOCAL       * Y6370000
*  COMMAND. ALL OTHER DATA IS TRNSMITTED TO HASP FOR ACTION AS A      * Y6371000
*  HASP OPERATOR COMMAND.                                             * Y6372000
*                                                                     * Y6373000
*   PRINT INPUT IS OBTAINED FROM A QUEUE WHICH ORIGINATES LOCALLY     * Y6374000
*  AND/OR FROM HASP. DATA TO BE PRINTED MAY BE EBCDIC OR TILT-ROTATE  * Y6375000
*  AND RED OR BLACK RIBBON. THE FORMAT OF THE MESSAGE AND CONTROL     * Y6376000
*  DATA IS DESCRIBED UNDER 'CONSOLE MESSAGE GENERAL ACTIVE ELEMENT    * Y6377000
*  DESCRIPTION'.                                                      * Y6378000
*                                                                     * Y6379000
*********************************************************************** Y6380000
         SPACE 3                                                        Y6381000
*********************************************************************** Y6382000
*              DUMMY CONVERSION ROUTINE FOR TILT-ROTATE INPUT         * Y6383000
*********************************************************************** Y6384000
CONPDUM  DC    AL2(*-*)            ENTRY WITH CODE IN BITS 8-15         Y6385000
         $SLA  8                   POSITION FOR PRINTING                Y6386000
         $B    CONPDUM,,I          GO PRINT IT                          Y6387000
CONPRGM  $ADCON (SXCPRNT)          EBCDIC TO TILT-ROTATE CODE           Y6388000
         $ADCON (CONPDUM)          DUMMY ROUTINE                        Y6389000
         DC    AL2(X'0900')        SHIFT TO RED COMMAND                 Y6390000
CONPCLR  DC    AL2(X'0500')        SHIFT TO BLACK COMMAND               Y6391000
*********************************************************************** Y6392000
*              SUBROUTINE TO WAIT FOR PRINTER                         * Y6393000
*********************************************************************** Y6394000
CONWAIT  DC    AL2(*-*)            ENTRY VIA BSI CONWAIT                Y6395000
         $STL  CONSLVE+D1          RESET VARIABLE ENTRY POINT           Y6396000
         $XIO  CONXNOR-D1          SENSE CONSOLE WITHOUT RESET          Y6397000
         $AND  CONPBMK             MASK ALL BUT READY/BUSY BITS         Y6398000
         $BNZ  CONSLRT             CYCLE COMMUTATOR UNTIL AVAILABLE     Y6399000
         $B    CONWAIT,,I          RETURN TO CALLER                     Y6400000
CONSLLT  $B    ((CONSLEC-CONSLGT)-2)/2,,X CONSOLE GATE LATCH            Y6401000
         EJECT                                                          Y6402000
*********************************************************************** Y6403000
*              COMMUTATOR ENTRY POINT                                 * Y6404000
*********************************************************************** Y6405000
CONSLEP  $NULL                     ENTRY POINT FROM COMMUTATOR          Y6406000
CONSLVE  $B    CONSLNI,,L          VARIABLE ENTRY VECTOR                Y6407000
CONSLNP  $B    CONSLRT,,L          NON-PROCESS EXIT POINT               Y6408000
CONSLNE  $NULL                     NORMAL PROCESSING COMPLETE EXIT      Y6409000
         $LD   CONSLLT             CLOSE COMMUTATOR GATE                Y6410000
         $STO  CONSLGT,,L          GATE                                 Y6411000
CONSLXT  $BSI  CONSLVE+D1          EXIT. RESET TO ENTER AT CONSLNI      Y6412000
CONSLNI  $NULL                     NORMAL ENTRY POINT                   Y6413000
CONTEST  $MDM  CONIRQF,0           TEST FOR OPERATOR REQUEST            Y6414000
         $B    CONOPIR             BRANCH IF OPERATOR INTERRUPT         Y6415000
*********************************************************************** Y6416000
*              SECTION TO PRINT QUEUED MESSAGES ON CONSOLE PRINTER    * Y6417000
*********************************************************************** Y6418000
CONPMGO  $NULL                                                          Y6419000
         $DEQUE CONSLAQP           GET PRINT ACTIVE QUEUE ELEMENT       Y6420000
         $BZ   CONSLNE             EXIT AND CLOSE GATE IF NONE          Y6421000
         $STO  CONPAQP             SAVE ADDRESS OF ELEMENT              Y6422000
         $BSI  CONWAIT             WAIT FOR PRINTER                     Y6423000
         $LXA  CONPAQP,WA          TO WA                                Y6424000
         $LD   CONMSGDL,WA,X       GET BYTE COUNT OF MESSAGE            Y6425000
         $STO  CONPCNT             STORE IT FOR LOOP CONTROL            Y6426000
         $LD   CONMSGCB,WA,X       GET ELEMENT CONTROL WORD             Y6427000
         $SRT  15                  PROPAGATE SIGN BIT                   Y6428000
         $STO  WB,,L               SET RIBBON SHIFT INDEX               Y6429000
         $ZAC                      CLEAR AC AND                         Y6430000
         $SLT  7                    GET CONVERSION CODE                 Y6431000
         $STO  WC,,L                AND SET CONVERSION INDEX            Y6432000
         $LD   CONPRGM,WC,L        GET CONVERSION ROUTINE ADDRESS       Y6433000
         $STO  CONPLNK+D1           AND SET LINKAGE                     Y6434000
         $LD   CONPCLR,WB,L        GET SHIFT CODE                       Y6435000
         $STO  CONPDTA             STORE FOR I/O                        Y6436000
         $XIO  CONPIOC-D1          SHIFT TO BLACK OR RED                Y6437000
         $LD   CONPCN1             SET LEFT/RIGHT                       Y6438000
         $STO  CONXLRS             SWITCH TO LEFT                       Y6439000
CONPLUP  $BSI  CONWAIT             WAIT FOR PRINTER                     Y6440000
         $LD   CONMSGDT,WA,X       GET INPUT PRINT DATA                 Y6441000
         $MDM  CONXLRS,0           TEST LEFT/RIGHT SWITCH               Y6442000
         $SRA  8                   SHIFT LEFT TO RIGHT                  Y6443000
CONPLNK  $TSL  *-*                 GO TO SELECTED ROUTINE               Y6444000
         $STO  CONPDTA             STORE RESULTS AND                    Y6445000
         $XIO  CONPIOC-D1          PRINT ON KEYBOARD PRINTER            Y6446000
         $LD   CONXLRS             REVERSE                              Y6447000
         $EOR  CONXCN1              POSITION                            Y6448000
         $STO  CONXLRS               SWITCH                             Y6449000
         $SKPZ                     SKIP IF SAME WORD OK                 Y6450000
         $MDX  1,WA                POINT TO NEXT WORD                   Y6451000
         $MDM  CONPCNT,-1          DECREMENT AND TEST BYTE COUNT        Y6452000
         $B    CONPLUP             BRANCH IF MORE DATA                  Y6453000
         $BSI  CONWAIT             WAIT FOR LAST CHARACTER              Y6454000
         $XIO  CONPCRT-D1          ISSUE CARRIAGE RETURN                Y6455000
CONPNUL  $LD   CONPAQP             GET ELEMENT ADDRESS                  Y6456000
         $QFREL CONSLFQP           RETURN TO FREE QUEUE                 Y6457000
         $B    CONTEST             SEE WHAT'S UP                        Y6458000
*********************************************************************** Y6459000
*              LOCAL CONSTANTS, COMMANDS, ETC.                        * Y6460000
*********************************************************************** Y6461000
         $BSS  0,E                                                      Y6462000
CONPAQP  DC    AL2(*-*)            STORAGE FOR PRINT ELEMENT ADD E      Y6463000
CONXNOR  DC    AL2($CONSOLE+$SENSED) SENSE CONSOLE WITHOUT RESET O      Y6464000
         $ADCON CONPDTA            IOAR FOR FOLLOWING            E      Y6465000
CONPIOC  DC    AL2($CONSOLE+$WRITE) CONSOLE WRITE COMMAND        O      Y6466000
         $ADCON CONPCRC            IOAR OF CARRIAGE COMMAND      E      Y6467000
CONPCRT  DC    AL2($CONSOLE+$WRITE) CONSOLE WRITE COMMAND        O      Y6468000
CONPCRC  DC    X'8100'             CARRIAGE RETURN (NEW LINE)    E      Y6469000
CONPDTA  DC    AL2(*-*)            PRINT DATA STORAGE                   Y6470000
CONPCNT  DC    AL2(*-*)            BYTE COUNT                           Y6471000
CONPBMK  DC    X'0E00'             BUSY/READY MASK                      Y6472000
CONPCN1  DC    AL2(1)              ANOTHER CONSTANT 1                   Y6473000
CONXLRS  DC    AL2(*-*)            LEFT/RIGHT                           Y6474000
         EJECT                                                          Y6475000
*********************************************************************** Y6476000
*              CONSOLE INTERRUPT PROCESSOR - SLIP 4                   * Y6477000
*********************************************************************** Y6478000
CONSLINT $NULL                     ENTRY FROM FLIP 4                    Y6479000
         $XIO  CONISRS-D1          SENSE CONSOLE DSW WITH RESET         Y6480000
         $BN   RTPL4RTN            IGNORE PRINT COMPLETE INTERRUPT      Y6481000
         $SLA  1                   TRY KEYBOARD RESPONSE BIT            Y6482000
         $BN   CONIKBR             BRANCH IF KEYBOARD ENTRY             Y6483000
         $STL  CONIRQF             MUST BE INTERRUPT REQUEST            Y6484000
         $LD   UNLATCH,,L          OPEN CONSOLE COMMUTATOR              Y6485000
         $STO  CONSLGT,,L          GATE TO PROCESS OPERATOR INPUT       Y6486000
         $B    RTPL4RTN,,L         RETURN TO FLIP 4                     Y6487000
CONIKBR  $NULL                     OPERATOR ENTERING DATA               Y6488000
         $STL  CONOPNP             FLAG INPUT AVAILABLE                 Y6489000
         $XIO  CONIRDA-D1          READ INTO CONIKDA                    Y6490000
         $B    RTPL4RTN,,L         RETURN TO FLIP 4                     Y6491000
*********************************************************************** Y6492000
*              CONSOLE INTERRUPT PROCESSOR CONSTANTS,STORAGE,ETC.     * Y6493000
*********************************************************************** Y6494000
         $BSS  0,E                 EVEN STORAGE ASSIGNMENT              Y6495000
         $ADCON CONIKDA            IOAR FOR COMMAND INPUT DATA   E      Y6496000
CONIRDA  DC    AL2($CONSOLE+$READ) READ COMMAND FOR INPUT DATA   O      Y6497000
CONIKDA  DC    AL2(*-*)            INPUT DATA                    E      Y6498000
CONISRS  DC    AL2($CONSOLE+$SENSED+1) SENSE WITH RESET          O      Y6499000
         $ADCON (CONPRCD)          ADDRESS OF INPUT (PRINT)      E      Y6500000
CONIWRS  DC    AL2($CONSOLE+$WRITE) WRITE COMMAND TO PRINT DATA  O      Y6501000
CONPRCD  DC    AL2(*-*)            CONVERTED INPUT FOR PRINTING         Y6502000
CONIRQF  DC    AL2(*-*)            INTERRUPT REQUEST FLAG               Y6503000
CONOPNP  DC    AL2(*-*)            INPUT AVAILABILITY FLAG              Y6504000
         EJECT                                                          Y6505000
*********************************************************************** Y6506000
*              OPERATOR INTERRUPT REQUEST PROCESSOR                   * Y6507000
*********************************************************************** Y6508000
CONOPIR  $NULL                     OPERATOR DESIRES TO COMMUNICATE      Y6509000
         $ZAC                      CLEAR AC AND                         Y6510000
         $STO  CONIRQF             INTERRUPT REQUEST FLAG               Y6511000
         $STL  CONSLVE+D1          RESET VARIABLE ENTRY POINT           Y6512000
         $LD   SCONTANK,,L         TEST FOR PREVIOUS INPUT              Y6513000
         $BNZ  CONSLRT              AND CYCLE UNTIL PROCESSED           Y6514000
         $DEQUE CONSLFQP           GET A FREE ELEMENT                   Y6515000
         $BZ   CONSLRT             NON-PROCESS EXIT IF NONE             Y6516000
         $STO  CONOFQP             SAVE ADDRESS OF ELEMENT              Y6517000
         $TSL  CONWAIT             WAIT FOR CARRIAGE                    Y6518000
         $LD   CONPCLR,,L          GET SHIFT COMMAND                    Y6519000
         $STO  CONPDTA              AND SHIFT RIBBON                    Y6520000
         $XIO  CONPIOC-D1            TO BLACK FOR INPUT                 Y6521000
CONOKST  $AXT  CONTANK,WA,L        ADDRESS OF BUILT-IN TANK             Y6522000
         $ZAC                      RESET INPUT                          Y6523000
         $STO  CONOCNT              DATA COUNT                          Y6524000
CONOCIR  $STO  CONOPNP               AVAILABILITY COUNT                 Y6525000
         $XIO  CONOSLT-D1          SELECT CONSOLE KEYBOARD              Y6526000
         $STL  CONSLVE+D1,L        RESET VARIABLE ENTRY POINT           Y6527000
         $LD   CONOPNP             TEST FOR KEYBOARD INPUT              Y6528000
         $BZ   CONSLRT             BRANCH IF NONE YET                   Y6529000
*********************************************************************** Y6530000
*              SECTION TO PROCESS EACH INPUT CHARACTER FROM KEYBOARD  * Y6531000
*********************************************************************** Y6532000
         $LD   CONIKDA             GET KEYBOARD INPUT CHARACTER         Y6533000
         $SRA  1                   TEST FOR ERASE BIT                   Y6534000
         $BOD  CONOZAP             BRANCH IF ERASE DESIRED              Y6535000
         $SRA  1                   TEST FOR BACKSPACE BIT               Y6536000
         $BOD  CONOBKS             BRANCH IF BACKSPACE                  Y6537000
         $SRA  1                   TEST FOR END OF FILE                 Y6538000
         $BOD  CONOEND             BRANCH IF END OF FILE                Y6539000
*********************************************************************** Y6540000
*              PRINT AND STORE NON-CONTROL DATA                       * Y6541000
*********************************************************************** Y6542000
         $SLA  3                   RESTORE CARD CODE FORMAT             Y6543000
         $STO  1,WA                PUT DATA IN TANK                     Y6544000
         $TSL  SXPRESS             CONVERT TO EBCDIC                    Y6545000
         $TSL  SXCPRNT              THEN TO PRINT CODE                  Y6546000
         $STO  CONPRCD               STORE FOR PRINTING                 Y6547000
         $XIO  CONIWRS-D1          PRINT IT....                         Y6548000
         $TSL  CONWAIT             WAIT FOR PRINTER                     Y6549000
         $LD   CONOCNT             INCREMENT                            Y6550000
         $A    CONXCN1              INPUT                               Y6551000
         $STO  CONOCNT               COUNTER                            Y6552000
         $S    CONOMAX             TEST FOR MAXIMUM                     Y6553000
         $BZ   CONOZAP             BRANCH IF LIMIT REACHED              Y6554000
         $MDX  1,WA                POINT TO NEXT TANK WORD              Y6555000
         $ZAC                      CLEAR AC AND                         Y6556000
         $B    CONOCIR              GET NEXT INPUT VALUE                Y6557000
         EJECT                                                          Y6558000
*********************************************************************** Y6559000
*              LOCAL CONSTANTS,COMMANDS,ETC.                          * Y6560000
*********************************************************************** Y6561000
         $BSS  0,E                                                      Y6562000
CONOCNT  DC    AL2(*-*)            COUNT OF BYTES PROCESSED             Y6563000
CONOSLT  DC    AL2($CONSOLE+$CONTROL) CONSOLE SELECT COMMAND            Y6564000
CONOFQP  DC    AL2(*-*)            FQP ADDRESS                          Y6565000
CONXCN1  DC    AL2(1)              CONSTANT 1                           Y6566000
CONOMAX  DC    AL2(&CONINSZ)       MAXIMUM INPUT MESSAGE                Y6567000
*********************************************************************** Y6568000
*              ERASE INPUT PROCESSOR                                  * Y6569000
*********************************************************************** Y6570000
CONOZAP  $NULL                                                          Y6571000
         $XIO  CONPCRT-D1          ISSUE CARRIAGE RETURN                Y6572000
         $LD   CONOZML             GET LENGTH OF REPLY                  Y6573000
         $AXT  CONOZBC,WB,L        GET SOURCE ADDRESS                   Y6574000
         $B    CONORPL             GO PRINT ERASE MESSAGE               Y6575000
*********************************************************************** Y6576000
*              BACKSPACE KEYBOARD PROCESSOR                           * Y6577000
*********************************************************************** Y6578000
CONOBKS  $NULL                                                          Y6579000
         $B    CONOZAP             TREAT BACKSPACE AS ERASE             Y6580000
*********************************************************************** Y6581000
*              END OF FILE (MESSAGE) PROCESSOR                        * Y6582000
*********************************************************************** Y6583000
CONOEND  $NULL                                                          Y6584000
         $XIO  CONPCRT-D1          ISSUE CARRIAGE RETURN                Y6585000
         $LD   CONOCNT             GET COUNT OF CHARACTERS              Y6586000
         $BZ   CONOKST             TRY AGAIN IF NULL                    Y6587000
         $STO  CONTANK             STORE COUNT IN TANK                  Y6588000
         $LD   CONTANK+D1          GET FIRST CHARACTER                  Y6589000
         $EOR  CONOLCL             TEST FOR LOCAL COMMANDS              Y6590000
         $BNZ  CONOQFH             NO. GO QUEUE IT FOR HASP             Y6591000
*********************************************************************** Y6592000
*              OPERATOR COMMAND PROCESSOR                             * Y6593000
*********************************************************************** Y6594000
         $LD   CONTANK+2*D1        GET 2ND CHARACTER                    Y6595000
         $EOR  CONODCM             TEST FOR 'DEFINE' COMMAND            Y6596000
         $BZ   CONODCP             BRANCH IF 'DEFINE' COMMAND           Y6597000
*********************************************************************** Y6598000
*              UNIDENTIFIED COMMAND PROCESSOR                         * Y6599000
*********************************************************************** Y6600000
CONOHUH  $LD   CONOWML             GET LENGTH OF REPLY                  Y6601000
         $AXT  CONOWTM,WB,L        GET SOURCE ADDRESS                   Y6602000
CONORPL  $LXA  CONOFQP,WA          ADDRESS OF PRINT TANK                Y6603000
         $MDX  CONMSGCB,WA,X       POINT TO CONTROL WORD                Y6604000
         $TSL  SMOVE               MOVE MESSAGE TO ELEMENT              Y6605000
         $LD   CONOFQP             GET ADDRESS OF ELEMENT               Y6606000
         $QACTL CONSLAQP           QUEUE IT FOR PRINT                   Y6607000
         $B    CONPMGO,,L          GO PRINT IT                          Y6608000
         EJECT                                                          Y6609000
*********************************************************************** Y6610000
*              'WHAT' MESSAGE                                         * Y6611000
*********************************************************************** Y6612000
CONOWML  DC    AL2(5)              NUMBER OF WORDS FOLLOWING            Y6613000
CONOWTM  DC    AL1($BLACK+$EBCD,$LIST15) CONTROL WORD                   Y6614000
         DC    AL2(6)              DATA COUNT                           Y6615000
         DC    C'WH'               WH                                   Y6616000
         DC    C'AT'               AT                                   Y6617000
         DC    C'? '               ?                                    Y6618000
*********************************************************************** Y6619000
*              'OK' MESSAGE                                           * Y6620000
*********************************************************************** Y6621000
CONOKML  DC    AL2(4)              NUMBER OF WORDS FOLLOWING            Y6622000
CONOKMS  DC    AL1($BLACK+$EBCD,$LIST15) CONTROL WORD                   Y6623000
         DC    AL2(4)              DATA COUNT                           Y6624000
         DC    C'OK'               OK                                   Y6625000
         DC    C'! '               !                                    Y6626000
*********************************************************************** Y6627000
*              'INPUT ERASED' MESSAGE                                 * Y6628000
*********************************************************************** Y6629000
CONOZML  DC    AL2(8)              NUMBER OF WORDS FOLLOWING            Y6630000
CONOZBC  DC    AL1($BLACK+$EBCD,$LIST15) CONTROL WORD                   Y6631000
         DC    AL2(12)             DATA COUNT                           Y6632000
         DC    C'INPUT ERASED'     MESSAGE                              Y6633000
*********************************************************************** Y6634000
*              QUEUE MESSAGES FOR HASP                                * Y6635000
*********************************************************************** Y6636000
CONOQFH  $NULL                                                          Y6637000
         $AXT  CONTANK,WA,L        ADDRESS OF TANK                      Y6638000
         $STX  SCONTANK,WA,L        QUEUE FOR TPPUT                     Y6639000
         $LD   CONOFQP             RETURN PRINT                         Y6640000
         $QFREL CONSLFQP            ELEMENT TO FREE CHAIN               Y6641000
         $B    CONPMGO,,L          GO TEST FOR PRINT                    Y6642000
*********************************************************************** Y6643000
*              LOCAL CONSTANTS                                        * Y6644000
*********************************************************************** Y6645000
CONOLCL  DC    X'8420'             CARD CODE '.'                        Y6646000
CONODCM  DC    X'8200'             CARD CODE 'D'                        Y6647000
         EJECT                                                          Y6648000
*********************************************************************** Y6649000
*              'DEFINE' COMMAND PROCESSOR                             * Y6650000
*********************************************************************** Y6651000
CONODCP  $NULL                     DEFINE 1442-6,7 AS READER OR PUNCH   Y6652000
         AIF (NOT &RP1442).NO1442L                                      Y6653000
         $LD   CONTANK+3*D1        GET 3RD WORD OF INPUT                Y6654000
         $EOR  CONOPNC             TEST FOR PUNCH COMMAND               Y6655000
         $BZ   CONOPPP             BRANCH IF DEFINE PUNCH               Y6656000
         $LD   CONTANK+3*D1        GET 3RD WORD OF INPUT                Y6657000
         $EOR  CONORDR             TEST FOR READER COMMAND              Y6658000
         $BNZ  CONOHUH             IGNORE IF NONE OF ABOVE              Y6659000
*********************************************************************** Y6660000
*              DEFINE 1442 READER/PUNCH AS READER                     * Y6661000
*********************************************************************** Y6662000
         $LD   RPFFACT,,L          GET 1442 ACTIVE FLAG                 Y6663000
         $BNZ  CONOHUH             IGNORE IF PUNCH ACTIVE               Y6664000
CONOPEN  $STO  RPCNTRL             SET READER FLAG                      Y6665000
         $LD   CONUNLT             OPEN 1442                            Y6666000
         $STO  RPFFTGT,,L           COMMUTATOR GATE                     Y6667000
         $B    CONOKAY             GO TYPE 'OK' MESSAGE                 Y6668000
*********************************************************************** Y6669000
*              DEFINE 1442 READER/PUNCH AS PUNCH                      * Y6670000
*********************************************************************** Y6671000
CONOPPP  $LD   RPFFACT,,L          GET 1442 ACTIVITY FLAG               Y6672000
         $BNZ  CONOHUH             IGNORE REQUEST IF ACTIVE             Y6673000
         $LD   *                   SET PUNCH FLAG                       Y6674000
         $B    CONOPEN              IF NOT ACTIVE                       Y6675000
*********************************************************************** Y6676000
*              CONSTANTS INDIGENOUS TO 1442 READER/PUNCH AND 'DEFINE' * Y6677000
*********************************************************************** Y6678000
CONOPNC  DC    X'4040'             CARD CODE 'P'                        Y6679000
CONORDR  DC    X'4010'             CARD CODE 'R'                        Y6680000
RPCNTRL  DC    AL2(*-*)            1442 READ OR PUNCH FLAG              Y6681000
CONUNLT  $NOP                      LOCAL UNLATCH GATE                   Y6682000
.NO1442L ANOP                                                           Y6683000
         AIF   (&RP1442 EQ 1).NO1442M                                   Y6684000
         $B    CONOHUH             IGNORE DEFINE IF NO 1442 R/P         Y6685000
.NO1442M ANOP                                                           Y6686000
*********************************************************************** Y6687000
*              PRINT 'OK' MESSAGE                                     * Y6688000
*********************************************************************** Y6689000
CONOKAY  $NULL                                                          Y6690000
         $LD   CONOKML             GET LENGTH OF REPLY                  Y6691000
         $AXT  CONOKMS,WB,L        AND MESSAGE ADDRESS                  Y6692000
         $B    CONORPL             GO PRINT IT                          Y6693000
CONTANK  $BSS  &CONINSZ+1          FIXED KEYBOARD INPUT AREA            Y6694000
         AIF   (NOT &RP1442).NO1442Q                                    Y6695000
         TITLE 'RTP1130 (READER/PUNCH CONTROL ROUTINE)'                 Y6696000
*********************************************************************** Y6697000
*              COMMUTATOR ROUTINE TO SYNCHRONIZE 1442 READER/PUNCH    * Y6698000
*********************************************************************** Y6699000
RPCNTLT  $B    ((RPCNTEC-RPCNTGT)-2)/2,,X GATE LATCH                    Y6700000
RPCNTEP  $NULL                     ACTIVATED BY PUNCH REQUEST           Y6701000
         $WTO  RPCNTMG,RPCNTRT     ISSUE PUNCH MESSAGE                  Y6702000
         $LD   RPCNTLT             CLOSE                                Y6703000
         $STO  RPCNTGT,,L           GATE                                Y6704000
         $B    RPCNTRT,,L           EXIT                                Y6705000
RPCNTMG  DC    AL1($BLACK+$EBCD,$LIST15) CONTROL WORD                   Y6706000
         DC    AL2(32)             DATA COUNT                           Y6707000
         DC    C'PUNCH PROCESSOR WAITING FOR 1442'                      Y6708000
.NO1442Q ANOP                                                           Y6709000
         TITLE 'RTP1130 (INITIALIZATION)'                               Y6710000
*********************************************************************** Y6711000
*                                                                     * Y6712000
* TITLE - RTPET (RTP1130 INITIALIZATION PROCESSOR)                    * Y6713000
*                                                                     * Y6714000
* FUNCTION/PURPOSE -                                                  * Y6715000
*                                                                     * Y6716000
* RECEIVES CONTROL FROM RTPLOAD VIA THE SPECIAL COMMUTATOR LINKAGE    * Y6717000
* PROVIDED AS THE LAST ENTRY IN THE COMMUTATOR. THE FOLLOWING MAJOR   * Y6718000
*  FUNCTIONS ARE PERFORMED BY INITIALIZATION...                       * Y6719000
*                                                                     * Y6720000
*                    1. STORES INTERRUPT TRANSFER VECTORS             * Y6721000
*                                                                     * Y6722000
*                    2. ESTABLISHES LINKAGE TO $SDUMP IF              * Y6723000
*                       DEBUG OPTION IS ON                            * Y6724000
*                                                                     * Y6725000
*                    3. SETS LOWER AND UPPER DUMP LIMITS              * Y6726000
*                       FOR $SDUMP                                    * Y6727000
*                                                                     * Y6728000
*                    4. CONSTRUCTS TP BUFFER POOL AS A FUNCTION       * Y6729000
*                       OF DEFINED CORE (&MACHSIZ), THE SIZE OF       * Y6730000
*                       A TP BUFFER (&TPBFSZE) AND THE END OF         * Y6731000
*                       RTP1130 ($BUFPOOL)                            * Y6732000
*                                                                     * Y6733000
*                    5. GETS A TP BUFFER AND MOVES SIGN-ON RECORD     * Y6734000
*                       FROM RTPLOAD RESTING PLACE TO TP BUFFER       * Y6735000
*                       (REGISTER WB CONTAINS ADDRESS OF SIGN-ON      * Y6736000
*                       RECORD AS SET BY RTPLOAD)                     * Y6737000
*                                                                     * Y6738000
*                    6. SETS TP BUFFER TO WRITE SIGN-ON VIA TPIOX     * Y6739000
*                       TO HASP                                       * Y6740000
*                                                                     * Y6741000
*                    7. ESTABLISHES COMMUNICATIONS WITH HASP BY       * Y6742000
*                       INITIALLY WRITING SOH-ENQ TO THE SCA          * Y6743000
*                       AND THEN READING FOR 'ACK0'                   * Y6744000
*                                                                     * Y6745000
*                    8. AFTER THE ABOVE SEQUENCE IS SUCCESSFUL,       * Y6746000
*                       THE COMMUTATOR GATE USED BY INITIALIZATION    * Y6747000
*                       IS CONVERTED TO A '$B COMSTRT', APPROPRIATE   * Y6748000
*                       COMMUTATOR GATES ARE OPENED, INCLUDING        * Y6749000
*                       TPIOX, WHICH WRITES THE SIGN-ON RECORD        * Y6750000
*                       AND CONTROL IS RELINQUISHED TO THE            * Y6751000
*                       COMMUTATOR                                    * Y6752000
*                                                                     * Y6753000
*********************************************************************** Y6754000
RTPETIN  $NULL                     COMMUTATOR REFERENCE POINT           Y6755000
RTPETVE  $B    RTPETNI,,L          VARIABLE ENTRY POINT                 Y6756000
*********************************************************************** Y6757000
*              SET INTERRUPT VECTORS IN LOCATIONS 8 THRU 13           * Y6758000
*********************************************************************** Y6759000
RTPETNI  $NULL                     INITIAL ENTRY POINT                  Y6760000
         $AXT  6,WA                NUMBER OF TRANSFER VECTORS           Y6761000
RTPLIGET $LD   RTPLIVCT-D1,WA,L    GET A VECTOR                         Y6762000
         $STO  7,WA,L              STORE IT                             Y6763000
         $MDX  -1,WA               DECREMENT AND TEST INDEX             Y6764000
         $B    RTPLIGET            GET NEXT VECTOR                      Y6765000
         $LDD  RTPETSL             GET $TSL $SDUMP INSTRUCTION          Y6766000
         $STD  $DUMP,,L            STORE IN SYSTEM DUMP LINKAGE CELL    Y6767000
         $LD   RTPETSB             GET SHORT FORM $B $DUMP              Y6768000
         $STO  0,,L                STORE IN LOCATION 0                  Y6769000
         $ZAC                      CLEAR AC AND SET                     Y6770000
         $STO  $LLIMIT,,L          LOWER DUMP LIMIT TO 0                Y6771000
RTPETLMT $AXT  $MACHSIZ-1,WA,L     DEFINED CORE SIZE-1                  Y6772000
         $STX  $ULIMIT,WA,L        STORE AS UPPER LIMIT                 Y6773000
         $B    RTPETSGO            GO TO SIGN-ON PROCEDURE              Y6774000
         $BSS  0,E                                                      Y6775000
         AIF   (&DEBUG EQ 0).NOBUGZ                                     Y6776000
RTPETSL  $TSL  SSDUMP              LINKAGE TO SYSTEM CORE DUMP          Y6777000
         AGO   .NOBUGY                                                  Y6778000
.NOBUGZ  ANOP                                                           Y6779000
RTPETSL  $B    0,,L                LOOP IF BRANCH TO 0                  Y6780000
.NOBUGY  ANOP                                                           Y6781000
RTPETSB  $B    $DUMP-1,,X          ENTRY TO $DUMP FROM LOCATION 0       Y6782000
*********************************************************************** Y6783000
*              INTERRUPT TRANSFER VECTORS                             * Y6784000
*********************************************************************** Y6785000
         SPACE 1                                                        Y6786000
RTPLIVCT $NULL                     LEVEL     VECTOR                     Y6787000
         $ADCON RTPLLVL0           0           8                        Y6788000
         $ADCON RTPLLVL1           1           9                        Y6789000
         $ADCON RTPLLVL2           2          10                        Y6790000
         $ADCON RTPLLVL3           3          11                        Y6791000
         $ADCON RTPLLVL4           4          12                        Y6792000
         $ADCON RTPLLVL5           5          13                        Y6793000
*********************************************************************** Y6794000
*              CONSTRUCT TP BUFFER CHAIN USING DEFINED CORE           * Y6795000
*********************************************************************** Y6796000
RTPETSGO $NULL                                                          Y6797000
         $LD   RTPETDCS            DEFINED 1130 CORE SIZE               Y6798000
         $S    TPBUFFQP,,L         MINUS BUFFER POOL START              Y6799000
         $SRT  16                  TO EXT (CLEAR AC)                    Y6800000
         $D    RTPETABS            DIVIDED BY BUFFER SIZE               Y6801000
         $STO  WA,,L               YIELDING NUMBER OF BUFFERS           Y6802000
         $LD   TPBUFFQP,,L         GET START OF BUFFER POOL             Y6803000
RTPETBLD $A    RTPETABS            CALCULATE NEXT CHAIN WORD            Y6804000
         $STO  RTPETCNW,,I         STORE IN PRECEDING CHAIN WORD        Y6805000
         $STO  RTPETCNW            SET PRECEDING TO NEXT                Y6806000
         $MDX  -1,WA               DECREMENT AND TEST COUNT             Y6807000
         $B    RTPETBLD            CONSTRUCT CALCULATED NUMBER          Y6808000
         $S    RTPETABS            BACK UP TO LAST CHAIN WORD           Y6809000
         $STO  RTPETCNW            SAVE ADDRESS OF LAST CHAIN WORD      Y6810000
         $ZAC                      CLEAR AC AND                         Y6811000
         $STO  RTPETCNW,,I          TERMINATE CHAIN                     Y6812000
         $DEQUE TPBUFFQP           GET NEXT BUFFER FOR SIGN-ON          Y6813000
         $STO  TPIOWBP,,L          SET POINTER FOR TPIOX WRITE          Y6814000
         $LXA  TPIOWBP,WA          BUFFER POINTER TO WA                 Y6815000
         $LD   RTPETCNT            GET WRITE COUNT FOR SIGN-ON          Y6816000
         $STO  TPBUFCB,WA,X        STORE IN BUFFER                      Y6817000
         $LD   RTPETNTI            GET WRITE INDICATOR                  Y6818000
         $STO  TPBUFHD,WA,X        STORE IN BUFFER                      Y6819000
         $LD   RTPETMVC            GET MOVE COUNT                       Y6820000
         $MDX  TPBUFFR,WA,X        POINT TO FCS(2)/RCB WORD             Y6821000
         $TSL  SMOVE               MOVE SIGN-ON TO REAL BUFFER          Y6822000
         $B    RTPETRNQ            GO SYNCHRONIZE WITH HASP             Y6823000
*********************************************************************** Y6824000
*              CONSTANTS AND STORAGE FOR INITIALIZATION               * Y6825000
*********************************************************************** Y6826000
RTPETABS DC    AL2((&TPBFSZE/2)+TPBUFDT) TP BUFFER SIZE IN WORDS        Y6827000
RTPETDCS DC    AL2($MACHSIZ-1)     DEFINED CORE SIZE-1                  Y6828000
RTPETCNW $ADCON (SBUFPOOL)         CHAIN CONSTRUCTION WORD              Y6829000
RTPETCNT DC    AL2(87)             TRANSMIT COUNT FOR SIGN-ON           Y6830000
RTPETNTI DC    AL2($BSXTNT)        WRITE NORMAL TEXT                    Y6831000
RTPETMVC DC    AL2(42)             COUNT TO MOVE SIGN-ON RECORD         Y6832000
RTPETRNB DC    AL2(2)              READ COUNT FOR FAKE BUFFER           Y6833000
         DC    AL2($BSXRDX)        READ SEQUENCE INDICATOR              Y6834000
RTPETENQ DC    AL2(BSXORFC)        ENQ TEST VALUE                       Y6835000
RTPETWSQ DC    AL2(2)              WRITE COUNT FOR FAKE WRITE BUFFER    Y6836000
         DC    AL2($BSXTSQ)        TRANSMIT SOH-ENQ INDICATOR           Y6837000
RTPETNWC DC    AL2(BSXOWF1)        NORMAL WRITE COMPLETE TEST           Y6838000
RTPETAK0 DC    AL2(BSXORFA)        ACK0 INDICATOR                       Y6839000
RTPETDAP $ADCON (RTPETDUM)         ADDRESS OF DUMMY APPENDAGE           Y6840000
RTPETRAP $ADCON (TPIORDS)          ADDRESS OF NORMAL APPENDAGE          Y6841000
*********************************************************************** Y6842000
*              WRITE SOH-ENQ TO HASP                                  * Y6843000
*********************************************************************** Y6844000
RTPETRNQ $NULL                                                          Y6845000
         $LD   RTPETDAP            SETUP DUMMY WRITE                    Y6846000
         $STO  BSXWRAP+D1,,L        APPENDAGE FOR BSXIOS                Y6847000
         $AXT  RTPETWSQ-2*D1,WA,L  FAKE WRITE BUFFER                    Y6848000
         $TSL  BSXIOS              INITIATE WRITE SOH-ENQ               Y6849000
         $B    RTPETDSK            DATA SET NOT READY                   Y6850000
         $STL  RTPETVE+D1,L        RESET ENTRY POINT                    Y6851000
         $LD   BSXOPFW,,L          GET COMPLETION CODE                  Y6852000
         $BZ   SCOMSTRT,,L         WAIT FOR WRITE COMPLETION            Y6853000
         $EOR  RTPETNWC            TEST FOR NORMAL COMPLETION           Y6854000
         $BNZ  RTPETRNQ            START AGAIN IF NOT                   Y6855000
*********************************************************************** Y6856000
*              NORMAL WRITE COMPLETION...READ FOR ACK0                * Y6857000
*********************************************************************** Y6858000
         $AXT  RTPETRNB-2*D1,WA,L  FAKE READ BUFFER                     Y6859000
         $ZAC                      READ FLAG                            Y6860000
         $STO  TPBUFHD,WA,X         TO BUFFER                           Y6861000
         $TSL  BSXIOS              INITIATE READ                        Y6862000
         $B    RTPETDSK            DATA SET NOT READY EXIT              Y6863000
         $STL  RTPETVE+D1,L        RESET ENTRY POINT                    Y6864000
         $LD   BSXOPFR,,L          GET COMPLETION CODE                  Y6865000
         $BZ   SCOMSTRT,,L         WAIT FOR READ TO COMPLETE            Y6866000
         $EOR  RTPETAK0            TEST FOR ACK0                        Y6867000
         $BNZ  RTPETRNQ            ONE MORE TIME...                     Y6868000
*********************************************************************** Y6869000
*              COMMUNICATIONS ESTABLISHED...PREPARE TO SIGN-ON        * Y6870000
*********************************************************************** Y6871000
         $WTO  RTPETCMS,RTPETGLP   PACIFY THE OPERATOR                  Y6872000
         $LD   RTPETRAP            SETUP NORMAL WRITE                   Y6873000
         $STO  BSXWRAP+D1,,L        APPENDAGE FOR BSXIOS                Y6874000
         $AXT  SCOMSTRT,WB,L       SET $COMSTOP TO                      Y6875000
         $STX  SCOMSTOP+D1,WB,L    '$B $COMSTRT'                        Y6876000
         $LD   UNLATCH,,L          OPEN                                 Y6877000
         $STO  TPGETGT,,L          TPGET                                Y6878000
         $STO  TPIOXGT,,L          TPIOX                                Y6879000
         $STO  TPPUTGT,,L          TPPUT                                Y6880000
         AIF   (NOT &XX1442).N01442                                     Y6881000
         $STO  RPFFTGT,,L          1442                                 Y6882000
.N01442  ANOP                                                           Y6883000
         AIF   (&RD2501 EQ 0).NO2501J                                   Y6884000
         $STO  RDTFOGT,,L          2501                                 Y6885000
.NO2501J ANOP                                                           Y6886000
         $B    SCOMSTOP,,L         STAND BACK...                        Y6887000
*********************************************************************** Y6888000
*              DATA SET NOT READY...TELL OPERATOR AND WAIT FOR READY  * Y6889000
*********************************************************************** Y6890000
RTPETDSK $STL  RTPETVE+D1,L        RESET ENTRY POINT                    Y6891000
         $WTO  RTPETDSM,SCOMSTRT   ISSUE DATA SET NOT READY MESSAGE     Y6892000
         $STL  RTPETVE+D1,L        RESET ENTRY POINT                    Y6893000
         $XIO  BSXISNR-D1,,L       SENSE SCA                            Y6894000
         $SLA  7                   GET SCA READY BIT                    Y6895000
         $BNN  SCOMSTRT            EXIT UNTIL READY                     Y6896000
         $LD   CONSLGT,,L          BE SURE                              Y6897000
         $EOR  UNLATCH,,L           CONSOLE ROUTINE                     Y6898000
         $BZ   SCOMSTRT              IS DONE                            Y6899000
         $B    RTPETRNQ,,L         START PROCESS AGAIN                  Y6900000
RTPETDSM DC    AL1($BLACK+$EBCD,$LIST15) CONTROL WORD                   Y6901000
         DC    AL2(18)             DATA COUNT                           Y6902000
         DC    C'DATA SET NOT READY'                                    Y6903000
RTPETCMS $NULL                                                          Y6904000
         DC    AL1($BLACK+$EBCD,$LIST15) CONTROL WORD                   Y6905000
         DC    AL2(30)             DATA COUNT                           Y6906000
         DC    C'COMMUNICATION LINE ESTABLISHED'                        Y6907000
*********************************************************************** Y6908000
*              DEAD END IF NO CONSOLE TANKS AVAILABLE                 * Y6909000
*********************************************************************** Y6910000
RTPETGLP $NULL                                                          Y6911000
         $TSL  $WAIT               ALL IS LOST IF NO CONSOLE            Y6912000
         $B    RTPETGLP             MESSAGE TANKS EXIST NOW...          Y6913000
*********************************************************************** Y6914000
*              DUMMY WRITE END-OPERATION APPENDAGE FOR INIT           * Y6915000
*********************************************************************** Y6916000
RTPETDUM DC    AL2(*-*)            ENTRY FROM BSXIOS                    Y6917000
         $B    RTPETDUM,,I         USE COMMUTATOR LOGIC                 Y6918000
         TITLE 'RTP1130 (SCA BUFFER DEFINITION)'                        Y6919000
         AIF   (&PR1403 EQ 0 ).NO1403A                                  Y6920000
*********************************************************************** Y6921000
*              DEFINE 1403 PRINTER TANKS                              * Y6922000
*********************************************************************** Y6923000
         $GENQ ID=PRFO3,SIZE=66,NUM=&PRFOTKL                            Y6924000
.NO1403A ANOP                                                           Y6925000
         SPACE 3                                                        Y6926000
         AIF   (NOT &XX1442).NO1442I                                    Y6927000
*********************************************************************** Y6928000
*              DEFINE 1442 PUNCH TANKS                                * Y6929000
*********************************************************************** Y6930000
         $GENQ ID=PNFF2,SIZE=80,NUM=&PUNFTKL                            Y6931000
.NO1442I ANOP                                                           Y6932000
         SPACE 3                                                        Y6933000
         AIF   (&PR1132 EQ 0).NO1132D                                   Y6934000
*********************************************************************** Y6935000
*              DEFINE 1132 PRINTER TANKS                              * Y6936000
*********************************************************************** Y6937000
         $GENQ ID=PRET2,SIZE=66,NUM=&PRETTKL                            Y6938000
.NO1132D ANOP                                                           Y6939000
         SPACE 3                                                        Y6940000
*********************************************************************** Y6941000
*              GENERAL CONSOLE MESSAGE QUEUE (TANK) DEFINITION        * Y6942000
*********************************************************************** Y6943000
         $GENQ ID=CONSL,SIZE=CONQSIZE,NUM=&CONSTKL                      Y6944000
         AIF   (&TRACE EQ 0).NOTRACE                                    Y6945000
         TITLE 'RTP1130 (OPTIONAL TRACE ROUTINE AND TRACE TABLE)'       Y6946000
         SPACE 3                                                        Y6947000
*********************************************************************** Y6948000
*                                                                     * Y6949000
* TITLE - $TRACE                                                      * Y6950000
*                                                                     * Y6951000
* FUNCTION/OPERATION                                                  * Y6952000
*                                                                     * Y6953000
*  STORES THE INFORMATION SHOWN BELOW IN A TABLE OF VARIABLE LENGTH   * Y6954000
*  FOR EACH ENTRY VIA THE $TRACE MACRO. THE TRACE TABLE IS CIRCULAR.  * Y6955000
*                                                                     * Y6956000
*  TRACE TABLE ENTRY                                                  * Y6957000
*                                                                     * Y6958000
*              WORD CONTENTS                                          * Y6959000
*              ---- --------                                          * Y6960000
*                1  ENTRY COUNTER                                     * Y6961000
*                2  LOCATION + 1 OF CALLER TO $TRACE                  * Y6962000
*                3  ACCUMULATOR                                       * Y6963000
*                4  EXTENSION                                         * Y6964000
*                5  XR1                                               * Y6965000
*                6  XR2                                               * Y6966000
*                7  XR3                                               * Y6967000
*                                                                     * Y6968000
* RESTRICTIONS                                                        * Y6969000
*                                                                     * Y6970000
*  THIS VERSION OF $TRACE CAN NOT BE USED AT INTERRUPT TIME           * Y6971000
*                                                                     * Y6972000
*                                                                     * Y6973000
*********************************************************************** Y6974000
         SPACE 3                                                        Y6975000
STRCSIZ  EQU   7                   TRACE TABLE ENTRY SIZE               Y6976000
STRACE   DC    H'0'                ENTRY VIA $TSL $TRACE                Y6977000
         $STX  TRACEX1+D1,XR1      SAVE XR1 AND STATUS                  Y6978000
         $STS  TRACEST             BITS FOR RESTORATION                 Y6979000
         $LXA  TRACENX,XR1         GET ADDRESS OF NEXT SLOT             Y6980000
         $STD  2,XR1               AC AND EXT TO TABLE                  Y6981000
         $LD   STRACE              GET LOCATION+1 OF CALLER             Y6982000
         $STO  1,XR1               STORE IN TABLE                       Y6983000
         $LD   TRACEX1+D1          GET XR1                              Y6984000
         $STO  4,XR1               STORE IN TABLE                       Y6985000
         $LD   2                   GET XR2                              Y6986000
         $STO  5,XR1               STORE IN TABLE                       Y6987000
         $LD   3                   GET XR3                              Y6988000
         $STO  6,XR1               STORE IN TABLE                       Y6989000
         $LD   STRACE,,I           GET TRACE COUNTER                    Y6990000
         $A    TRACEC1             DING BY ONE                          Y6991000
         $SKPO                     TEST FOR COUNTER CYCLE               Y6992000
         $LD   TRACEC1             YES. RESET TO ONE                    Y6993000
         $STO  STRACE,,I           UPDATE COUNTER AND                   Y6994000
         $STO  0,XR1               SAVE IN TABLE                        Y6995000
         $MDM  STRACE,1            SET TO BYPASS COUNTER AT EXIT        Y6996000
         $LD   TRACENX             UPDATE POINTER TO                    Y6997000
         $A    TRACESZ             NEXT TABLE SLOT                      Y6998000
         $STO  TRACENX             DO IT                                Y6999000
         $S    TRACEND             TEST FOR END OF TABLE                Y7000000
         $BNZ  TRACEXT             EXIT IF NOT END                      Y7001000
         $LD   TRACEOR             RESET TO TOP                         Y7002000
         $STO  TRACENX             OF TABLE                             Y7003000
TRACEXT  $LDD  2,XR1               RESTORE AC AND EXT                   Y7004000
TRACEX1  $AXT  *-*,XR1,L           AND XR1                              Y7005000
TRACEST  $LDS  0                   AND STATUS                           Y7006000
         $B    STRACE,,I           RETURN                               Y7007000
TRACEC1  DC    H'1'                COUNTER DINGER                       Y7008000
TRACESZ  DC    AL2(STRCSIZ)        TABLE ENTRY SIZE                     Y7009000
TRACEOR  $ADCON STRCTBL            TRACE TABLE START                    Y7010000
TRACEND  $ADCON STRCTBL+2*(&TRACE*STRCSIZ) TRACE TABLE END              Y7011000
TRACENX  $ADCON STRCTBL            POINTER TO NEXT ENTRY                Y7012000
STRCTBL  $BSS  &TRACE*STRCSIZ,E    YE OLDE TRACE TABLE                  Y7013000
.NOTRACE ANOP                                                           Y7014000
         AIF   (&DEBUG EQ 0).NODBUGC                                    Y7015000
         TITLE 'RTP1130 (SCA INTERRUPT TRACE ROUTINE)'                  Y7016000
*********************************************************************** Y7017000
*                                                                     * Y7018000
* TITLE - DBUGSCAL (TRACE ROUTINE FOR LOW SPEED SCA INTERRUPTS)       * Y7019000
*                                                                     * Y7020000
* FUNCTION/PURPOSE                                                    * Y7021000
*                                                                     * Y7022000
*  TRACES ALL SCA INTERRUPTS IN THE FORM SHOWN BELOW. ENTRY IS        * Y7023000
*  FROM THE SCA INTERRUPT ROUTINE EXIT SECTION..                      * Y7024000
*                                                                     * Y7025000
* NOTE..EXTERNAL CONTROL OF THE TRACE FUNCTION IS PROVIDED            * Y7026000
*  THRU THE CONSOLE ENTRY KEYS..                                      * Y7027000
*                                                                     * Y7028000
*  THIS VERSION OF DBUGSCAL ASSUMES AN 1130 WITH A PHYSICAL CORE      * Y7029000
*  SIZE OF 16K WORDS AND THAT RTP1130 HAS BEEN DEFINED FOR 8K VIA     * Y7030000
*  THE PARAMETER &MACHSIZ. THE SCA TRACE TABLE OCCUPIES THE HIGH      * Y7031000
*  ORDER 8K WORDS OF THE 16K CORE. THE VALUES OF 'DBUGSTRT',          * Y7032000
*  'DBUGSTND' AND 'DBUGSTBL' DETERMINE THE TABLE START, END AND       * Y7033000
*  CURRENT ENTRY, RESPECTIVELY.                                       * Y7034000
*                                                                     * Y7035000
*  TRACE TABLE FORMAT...                                              * Y7036000
*                                                                     * Y7037000
*                        WORD      DESCRIPTION                        * Y7038000
*                        ----      -----------                        * Y7039000
*                          1  OPERATION TYPE (BSXIOPT)                * Y7040000
*                          2  DSW AT INTERRUPT TIME                   * Y7041000
*                          3  COMPLETION CODE (BSXOPF)                * Y7042000
*                          4  INTERRUPT LOCATION                      * Y7043000
*                          5  DATA RECEVIED/TRANSMITTED               * Y7044000
*                            (BSXRNPT OR BSXWTMP)                     * Y7045000
*                          6  DATA TRANSFER COUNT                     * Y7046000
*                            (BSXRCNT OR BSXXCNT)                     * Y7047000
*                          7  READ OR WRITE SEQUENCE INDEX            * Y7048000
*                             (BSXRSEQ OR BSXNWOK)                    * Y7049000
*                          8  SPARE                                   * Y7050000
*                                                                     * Y7051000
*********************************************************************** Y7052000
DBUGSCAL DC    AL2(*-*)            ENTRY POINT                          Y7053000
         $LD   SENTKEYS,,L         GET ENTRY KEYS SETTING               Y7054000
         $AND  DBUGSCKS            TEST FOR TRACE INHIBIT               Y7055000
         $BNZ  DBUGSCAL,,I         EXIT IF INHIBITED                    Y7056000
         $STX  DBUGEXIT+D1,WA      SAVE WA                              Y7057000
         $LXA  DBUGSTBL,WA         GET ADDRESS OF NEXT TABLE ENTRY      Y7058000
         $LD   BSXNDSW,,L          GET SCA DSW                          Y7059000
         $STO  1,WA                TO TABLE                             Y7060000
         $LD   BSXOPF,,I           GET COMPLETION CODE                  Y7061000
         $STO  2,WA                TO TABLE                             Y7062000
         $LD   RTPLLVL1,,L         GET INTERRUPT LOCATION               Y7063000
         $STO  3,WA                TO TABLE                             Y7064000
         $LD   BSXIOPT,,L          GET OPERATION TYPE                   Y7065000
         $STO  0,WA                TO TABLE                             Y7066000
         $BZ   DBUGRSET            BRANCH IF READ                       Y7067000
         $LD   BSXWTMP,,L          GET DATA LAST TRANSMITTED            Y7068000
         $STO  4,WA                TO TABLE                             Y7069000
         $LD   BSXXCNT,,L          GET DATA TRANSMIT COUNT              Y7070000
         $STO  5,WA                TO TABLE                             Y7071000
         $LD   BSXNWOK+D1,,L       GET WRITE SEQUENCE INDEX             Y7072000
         $STO  6,WA                TO TABLE                             Y7073000
         $NOP                      SPARE                                Y7074000
         $NOP                      SPARE                                Y7075000
         $NOP                      SPARE                                Y7076000
         $B    DBUGEXIT            EXIT                                 Y7077000
DBUGRSET $LD   BSXRNPT,,L          GET DATA READ                        Y7078000
         $STO  4,WA                TO TABLE                             Y7079000
         $LD   BSXRCNT,,L          GET DATA READ COUNT                  Y7080000
         $STO  5,WA                TO TABLE                             Y7081000
         $LD   BSXRSEQ+D1,,L       GET READ SEQUENCE INDEX              Y7082000
         $STO  6,WA                TO TABLE                             Y7083000
         $NOP                      SPARE                                Y7084000
         $NOP                      SPARE                                Y7085000
         $NOP                      SPARE                                Y7086000
DBUGEXIT $AXT  *-*,WA,L            RESTORE WA                           Y7087000
         $LD   DBUGSTBL            UPDATE                               Y7088000
         $A    DBUGTSZE             TABLE                               Y7089000
         $STO  DBUGSTBL              POINTER                            Y7090000
         $S    DBUGSTND            TEST FOR TABLE END                   Y7091000
         $BNZ  DBUGSCAL,,I         EXIT IF NOT                          Y7092000
         $LD   DBUGSTRT            RESET                                Y7093000
         $STO  DBUGSTBL             POINTER                             Y7094000
         $MDM  DBUGCRCL,1          INCREMENT CIRCLE COUNTER             Y7095000
         $B    DBUGSCAL,,I         EXIT                                 Y7096000
DBUGSIZE EQU   8                   TABLE ENTRY SIZE                     Y7097000
DBUGTSZE DC    AL2(DBUGSIZE)       CONSTANT                             Y7098000
DBUGSTRT DC    AL2(X'2000')        TABLE START                          Y7099000
DBUGSTND DC    AL2(X'4000')        TABLE END                            Y7100000
DBUGSTBL DC    AL2(X'2000')        CURRENT ENTRY                        Y7101000
DBUGCRCL DC    AL2(*-*)            CIRCLE COUNTER                       Y7102000
DBUGSCKS DC    AL2($KEY01)         GO-NOGO TESTER                       Y7103000
.NODBUGC ANOP                                                           Y7104000
         AIF   (&DEBUG EQ 0).NODBUGA                                    Y7105000
         TITLE 'HASP 1132 REMOTE TERMINAL SYSTEM DUMP ROUTINE'          Y7106000
         SPACE  1                                                       Y7107000
*********************************************************************** Y7108000
*                                                                     * Y7109000
*  FUNCTION/OPERATION -                                               * Y7110000
*                                                                     * Y7111000
*    * THIS IS THE HASP 1130 SYSTEM CORE DUMP ROUTINE. IT MAY BE      * Y7112000
*      USED A A SUBROUTINE BY A SYSTEM PROGRAM OR IT MAY BE ENTERED   * Y7113000
*      FROM THE CONSOLE BY PUSHING THE SYSTEM RESET AND START         * Y7114000
*      BUTTONS. THIS DUMP ROUTINE IS COMPLETELY SELF CONTAINED AND    * Y7115000
*      PERFORMS ITS OWN OUTPUT PROCESSING.                            * Y7116000
*                                                                     * Y7117000
*  ENTRY -                                                            * Y7118000
*    * ENTRY CAN BE MADE FROM THE CONSOLE BY PUSHING SYSTEM RESET     * Y7119000
*      AND PROGRAM START IN THAT RESPECTIVE ORDER.                    * Y7120000
*                                                                     * Y7121000
*    * CALLING SEQUENCE FOR USE AS A SUBROUTINE                       * Y7122000
*                                                                     * Y7123000
*        $BSI    $SDUMP,,L                                            * Y7124000
*        $ADCON  ADDR1             ADDRESS OF DUMP LOWER LIMIT        * Y7125000
*        $ADCON  ADDR2             ADDRESS OF DUMP UPPER LIMIT        * Y7126000
*        $NULL                     RETURN POINT                       * Y7127000
*                                                                     * Y7128000
*  INPUT -                                                            * Y7129000
*    * THE DUMP LIMITS MUST BE PROVIDED TO THE DUMP ROUTINE           * Y7130000
*                                                                     * Y7131000
*      * FOR CONSOLE ENTRY                                            * Y7132000
*                                                                     * Y7133000
*            THE LOWER LIMIT MAY BE INSERTED IN LOCATION '$LLIMIT'    * Y7134000
*            THE UPPER LIMIT MAY BE INSERTED IN LOCATION '$ULIMIT'    * Y7135000
*            DEFAULT LIMITS HAVE ALREADY BEEN ENTERED AT LOCATIONS    * Y7136000
*            '$LLIMIT' AND '$ULIMIT' AND ARE ZERO AND MACHINES        * Y7137000
*            MAXIMUM ADDRESS RESPECTIVELY.                            * Y7138000
*                                                                     * Y7139000
*      * FOR SUBROUTINE USE THE LIMITS MUST BE PROVIDED IN THE        * Y7140000
*        CALLING SEQUENCE.                                            * Y7141000
*  OUTPUT -                                                           * Y7142000
*    * A HEXIDECIMAL CONVERTED DUMP OF CORE BETWEEN THE SPECIFIED     * Y7143000
*      LIMITS AND THE CONTENTS OF THE ACCUMULATOR , EXTENTION, AND    * Y7144000
*      THE THREE INDEX REGISTERS WHICH ARE PRINTED ON THE FIRST LINE. * Y7145000
*                                                                     * Y7146000
*    * THE DUMP CAN BE EITHER ON AN 1132 OR A 1403 PRINTER.           * Y7147000
*      THE PROGRAM DETERMINES WHICH PRINTER IS ON THE SYSTEM          * Y7148000
*      AND PROCEEDS TO USE THAT PRINTER. IF BOTH PRINTERS ARE         * Y7149000
*      ON THE SYSTEM THE 1403 IS USED.                                * Y7150000
*  EXITS -                                                            * Y7151000
*    * IF ENTRY WAS FROM A CALLING PROGRAM THEN CONTROL IS RETURNED   * Y7152000
*      TO THE CALLING PROGRAM AT THE LOCATION 3 WORDS PAST THE $BSI   * Y7153000
*      INSTRUCTION.                                                   * Y7154000
*                                                                     * Y7155000
*    * IF ENTRY WAS FROM THE CONSOLE THEN THE PROGRAM ENTERS A        * Y7156000
*      $MDX  *-2  LOOP UPON COMPLETION OF THE DUMP.                   * Y7157000
*                                                                     * Y7158000
*                                                                     * Y7159000
*********************************************************************** Y7160000
         SPACE  1                                                       Y7161000
         SPACE  1                                                       Y7162000
*********************************************************************** Y7163000
*                                                                     * Y7164000
*     INITIAL POINT OF ENTRY FOR SYSTEM DUMP                          * Y7165000
*                                                                     * Y7166000
*********************************************************************** Y7167000
         SPACE  1                                                       Y7168000
SSDUMP   DS    H                                                        Y7169000
         SPACE  1                                                       Y7170000
*********************************************************************** Y7171000
*                                                                     * Y7172000
*     SAVE ALL REGISTERS AND STATUS                                   * Y7173000
*                                                                     * Y7174000
*********************************************************************** Y7175000
         SPACE  1                                                       Y7176000
         $STD  DMACCSV             SAVE ACC AND EXT                     Y7177000
         $STX  DMR1SV,WA           SAVE INDEX REG 1                     Y7178000
         $STX  DMR2SV,WB           SAVE INDEX REG 2                     Y7179000
         $STX  DMR3SV,WC           SAVE INDEX REG 3                     Y7180000
         $STS  DMSTASV             SAVE STATUS                          Y7181000
         $LD   9,,L                PICK UP LEVEL 1 INT. ADDR            Y7182000
         $STO  DMOLEVL1            SAVE IT, RESTORE AT DUMPS END        Y7183000
         $LD   12,,L               PICK UP LEVEL 4 INT. ADDR            Y7184000
         $STO  DMOLEVL4            SAVE IT, RESTORE AT DUMP END         Y7185000
         SPACE  1                                                       Y7186000
*********************************************************************** Y7187000
*                                                                     * Y7188000
*     PICK UP DUMP LIMITS                                             * Y7189000
*                                                                     * Y7190000
*********************************************************************** Y7191000
         SPACE  1                                                       Y7192000
         $LDX  SSDUMP,WA,I         PICK UP RETURN ADDRESS               Y7193000
         $MDX  -$LLIMIT,WA         IS ENTRY FROM CONSOLE                Y7194000
         $MDX  *+6                 NO,DO NOT MODIFY RETURN              Y7195000
         $MDM  DMLEAVE,(DMWAIT-DMRETURN)/2 WAIT WHEN COMPLETE           Y7196000
*                                  IF ENTRY IS FROM CONSOLE             Y7197000
         $LD   $LLIMIT,WA,X        LOAD LOWER LIMIT                     Y7198000
         $STO  DMLOW               STORE IT IN DUMP LOWER LIMIT         Y7199000
         $LD   $ULIMIT,WA,X        LOAD UPPER LIMIT                     Y7200000
         $S    $LLIMIT,WA,X        SUBTRACT LOWER LIMIT                 Y7201000
         $STO  DMHIGH              STORE DIFF IN UPPER LIMIT            Y7202000
         $BSC  DMWAIT,,L,P+Z       BR TO HARD WAITIF LOW GT HIGH        Y7203000
         AIF   (&PR1132 NE 1 OR &PR1403 NE 1 ).DMASM01                  Y7204000
DMPRINT  $BSC  DMCHKPRT,,L         THIS ADDR WILL BE CHANGED TO         Y7205000
*                                  BR TO THE CORRECT PRINT RTN.         Y7206000
*                                  AFTER DETERMINATION OF WHICH         Y7207000
*                                  PRINTER IS ON SYSTEM                 Y7208000
         AGO   .DMASM03                                                 Y7209000
.DMASM01 AIF   (&PR1132 NE 1 ).DMASM02                                  Y7210000
DMPRINT  $MDX  DMCHK2              BRANCH TO 1132 PRINT ROUTINE         Y7211000
         AGO   .DMASM03                                                 Y7212000
.DMASM02 ANOP                                                           Y7213000
DMPRINT  $MDX  DMCHK3              BRANCH TO 1403 PRINT ROUTINE         Y7214000
.DMASM03 ANOP                                                           Y7215000
DMLEAVE  $MDX  DMRETURN            THIS INSTR BRANCHES TO A             Y7216000
*                                  RETURN TO THE CALLING PROG.          Y7217000
*                                  OR IF CONSOLE ENTRY IT IS            Y7218000
*                                  MODIFIED TO BRANCH TO A              Y7219000
*                                  WAIT                                 Y7220000
         SPACE  1                                                       Y7221000
*********************************************************************** Y7222000
*                                                                     * Y7223000
*      RETURN ROUTINE                                                 * Y7224000
*              RESTORES REGS. AND RETURNS TO CALLING PROG.            * Y7225000
*********************************************************************** Y7226000
         SPACE  1                                                       Y7227000
DMRETURN $LD   DMOLEVL4            LOAD OLD LEVEL 4 INT. RTN ADDR       Y7228000
         $STO  12,,L               RESTORE IT                           Y7229000
         $LD   DMOLEVL1            LOAD OLD LEVEL 1 INT. RTN. ADDR      Y7230000
         $STO  9,,L                RESTORE IT                           Y7231000
         $LDD  DMACCSV             RESTORE ACC AND EXT                  Y7232000
         $LDX  DMR1SV,WA,I         RESTORE XR1                          Y7233000
         $LDX  DMR2SV,WB,I         RESTORE XR2                          Y7234000
         $LDX  DMR3SV,WC,I         RESTORE XR3                          Y7235000
DMSTASV  $LDS  0                   RESTORE STATUS                       Y7236000
         $MDM  SSDUMP,2            INCRE. RETURN ADDR PAST PARAMETERS   Y7237000
         $BSC  SSDUMP,,I           RETURN                               Y7238000
DMWAIT   $MDX  *-2                 HARD WAIT                            Y7239000
*                                  ENTERED ON COMPLETION IF             Y7240000
*                                  CONSOLE ENTRY                        Y7241000
DMOLEVL4 DS    H                   OLD LEVEL 4 INT. ADDR STORAGE        Y7242000
DMOLEVL1 DS    H                   OLD LEVEL 1 INT. ADDR STORAGE        Y7243000
*                                                                       Y7244000
DMLOW    DS    H                   LOWER LIMIT OF DUMP                  Y7245000
DMHIGH   DS    H                   NO. OF WORDS TO BE DUMPED            Y7246000
DMACCSV  DC    F'0'                ACC AND EXT STORAGE AT ENTRY         Y7247000
         DC    H'1'                CONSTANT FOR FORMATTING DUMP         Y7248000
DMR1SV   DC    H'0'                XR1 STORAGE                          Y7249000
         DC    H'2'                CONSTANT FOR FORMATTING DUMP         Y7250000
DMR2SV   DC    H'0'                XR2 STORAGE                          Y7251000
         DC    H'3'                CONSTANT FOR FORMATTING DUMP         Y7252000
DMR3SV   DC    H'0'                XR3 STORAGE                          Y7253000
DMACCSVA $ADCON  DMACCSV           ADDRESS OF ACC STORAGE               Y7254000
         AIF   (&PR1132 NE 1 OR &PR1403 NE 1 ).DMASM21                  Y7255000
         SPACE  1                                                       Y7256000
*********************************************************************** Y7257000
*      PRINTER DETERMINATION ROUTINE                                  * Y7258000
*                                                                     * Y7259000
*                                  THE FOLLOWING ROUTINE DETERMINES   * Y7260000
*                                  WHETHER A 1403 OR AN 1132 IS ON    * Y7261000
*                                  THE SYSTEM. IT THEN SELECTS THE    * Y7262000
*                                  APPROPRIATE ROUTINE TO  DO THE     * Y7263000
*                                  DUMP. IF BOTH AN 1132 AND A 1403   * Y7264000
*                                  ARE ON THE SYSTEM , THEN THE       * Y7265000
*                                  1403 IS USED FOR THE DUMP.         * Y7266000
*********************************************************************** Y7267000
         SPACE  1                                                       Y7268000
DMCHKPRT $XIO  DMSENS3,,L          CHECK IF 1403 PRINTER READY          Y7269000
         $BSC  E                   SKIP IF READY TO HOME 1403           Y7270000
         $MDX  DMCHK132            NOT READY, GO CHECK 1132             Y7271000
         $XIO  DMSKP3,,L           SKIP TO TOP OF PAGE                  Y7272000
         $XIO  DMSENS3N,,L         SENSE FOR CARRIAGE BUSY              Y7273000
         $SLA  13                  CARRIAGE BUSY BIT TO LOW ORDER       Y7274000
         $BSC  DMCHK132,,L,N       NOT BUSY, GO CHECK 1132              Y7275000
         $MDM  DMPRINT+2,(DMCHK3-DMCHKPRT)/2 DMPRINT WILL BR TO 1403    Y7276000
         AGO   .DMASM23                                                 Y7277000
.DMASM21 AIF   (&PR1403 NE 1 ).DMASM22                                  Y7278000
.DMASM23 ANOP                                                           Y7279000
DMCHK3   $LDX  DMNLEVL4,WC,L       PICK UP LEVEL 4 INT ADDR             Y7280000
         $STX  12,WC,L             STORE IT IN INT. VECTOR              Y7281000
         $MDX  DM1403              GO START DUMP                        Y7282000
         AIF   (&PR1132 NE 1 ).DMASM04                                  Y7283000
DMCHK132 $XIO  DMSENS2,,L          SENSE 1132 FOR READY                 Y7284000
         $SLA  5                   NO READY BIT TO SIGN BIT             Y7285000
         $BSC  DMCHKPRT,,L,P+Z     NOT READY, CHECK 1403 READY          Y7286000
         $XIO  DMSKIP2,,L          SKIP 1132 TO TOP OF NEW PAGE         Y7287000
         $XIO  DMSENS2N,,L         SENSE FOR CARRIAGE BUSY              Y7288000
         $SLA 3                    SHIFT CARRIAGE BUSY TO SIGN          Y7289000
         $BSC  N                   SKIP IF BUSY                         Y7290000
         $MDX  DMCHKPRT            NOT BUSY GO CHECK 1403 AGAIN         Y7291000
         $MDM  DMPRINT+2,(DMCHK2-DMCHKPRT)/2  DMPRINT WILL BR TO DMCHK2 Y7292000
.DMASM22 ANOP                                                           Y7293000
DMCHK2   $LDX  DMNLEVL1,WC,L       PICK UP NEW LEVEL 1 INT ADDR         Y7294000
         $STX  9,WC,L              STORE IN INT. VECTOR                 Y7295000
         $BSC  DM1132,,L           GO PREPARE TO DUMP                   Y7296000
         AGO   .DMASM05                                                 Y7297000
.DMASM04 ANOP                                                           Y7298000
DMCHKPRT DS    6H                  1403 PRINT ROUTINE STORAGE           Y7299000
.DMASM05 AIF   (&PR1403 NE 1 ).DMASM06                                  Y7300000
         SPACE  1                                                       Y7301000
*********************************************************************** Y7302000
*                                                                     * Y7303000
*      1403 DUMP ROUTINE                                              * Y7304000
*                                                                     * Y7305000
*********************************************************************** Y7306000
         SPACE  1                                                       Y7307000
DM1403   $LDX  1,WA                INITIALIZE COUNTER FOR               Y7308000
         $STX  DMBLOCK,WA          DOUBLE SPACING AFTER ADDRESS         Y7309000
         $LDX  -9,WA               LOAD NO. OF WORDS REG. STORAGE       Y7310000
         $MDM  DMHIGH,9            ADD REG. STOR. TO TOTAL              Y7311000
*                                  WORD COUNT                           Y7312000
         $BSI  DMBUFBLK            GO BLANK OUT BUFFER                  Y7313000
         $LDX  DMBUFSWT,WC,I       LOAD FIRST BUFFER ADDRESS            Y7314000
         $LD   DMACCSVA            LOAD ADDR OF ACC STORAGE             Y7315000
         $STO  DMWDADD             STORE IN LOAD NEXT WORD INSTR.       Y7316000
         $MDX  DMLOOP15            GO ENTER DUMP LOOP                   Y7317000
*      THIS ENTRY POINT IS USED TO DUMP EACH 16 WORDS OF STORAGE        Y7318000
DMLOOP10 $BSI  DMBUFBLK            GO BLANK OUT BUFFER                  Y7319000
         $LDX  1,WB                RESTORE COUNT TO SPACE AFTER         Y7320000
         $STX  DMBLOCK,WB          ADDR. OF BLOCK OF 16 WORDS           Y7321000
         $LDX  DMBUFSWT,WC,I       LOAD ADDRESS OF NEXT BUFFER          Y7322000
         $LD   DMADDR              LOAD ADDR OF FIRST WORD              Y7323000
*                                  OF NEXT 16 WORD BLOCK                Y7324000
         $MDM  DMADDR,16           INCRE. TO FOLLOWING BLOCK            Y7325000
DMLOOP18 $STO  DMWDADD             STORE IN LOAD NEXT WORD INSTR        Y7326000
         $MDM  DMHIGH,1            ADD 1 FOR ADDR. TO TOTAL COUNT       Y7327000
         $LDX  -17,WA              LOAD XR1 WITH WORD COUNT PLUS ONE    Y7328000
         $MDX  DMLOOP15            GO ENTER DUMP LOOP                   Y7329000
DMLOOP9  $LD   *-*,,L              LOAD NEXT WORD TO BE DUMPED          Y7330000
         $MDM  DMWDADD,1           INCREMENT TO NEXT WORD               Y7331000
DMLOOP15 $LDX  2,WB                LOAD XR2 TO LOOP TWICE               Y7332000
         $SRT  16                  SHIFT WORD TO EXT                    Y7333000
DMLOOP12 $BSI  DMCONVT             CONVERT ODD CHAR TO 1403 CODE        Y7334000
         $SLA  8                   MOVE TO HIGH ORDER BYTE              Y7335000
         $STO  DMTEMP1             TEMPORARY STORAGE                    Y7336000
         $BSI  DMCONVT             CONVERT EVEN CHAR TO 1403 CODE       Y7337000
         $OR   DMTEMP1             PICK UP FIRST CHAR                   Y7338000
         $STO  0,WC                STORE TWO CHAR IN BUFFER             Y7339000
         $MDX  1,WC                INCREMENT TO NEXT BUFFER LOCATION    Y7340000
         $MDX  -1,WB               CHECK LOOP COUNT                     Y7341000
         $MDX  DMLOOP12            GO PICK UP REMAINDER OF WORD         Y7342000
         $MDX  1,WC                SPACE BETWEEN WORDS                  Y7343000
         $MDM  DMBLOCK,-1          CHECK FOR EXTRA SPACE EVERY 4        Y7344000
*                                  WORDS                                Y7345000
         $MDX  DMLOOP20            BR, NOT END OF 4 WORD GROUP          Y7346000
         $LDX  4,WB                RESTORE COUNT TO SPACE AFTER         Y7347000
         $STX  DMBLOCK,WB          EVERY FOUR WORD GROUP                Y7348000
         $MDX  1,WC                EXTRA SPACE EVERY FOUR WORDS         Y7349000
DMLOOP20 $MDM  DMHIGH,-1           REDUCE NO. WORDS TO BE DUMPED        Y7350000
         $MDX  DMLOOP17            NOT THRU, CHECK WORDS/LINE COUNT     Y7351000
         $MDX  DMLOOP22            ALL THRU PREPARE TO RETURN           Y7352000
DMLOOP17 $MDX  1,WA                DECREMENT WORDS PER LINE COUNT       Y7353000
         $MDX  DMLOOP9             BR TO GET ANOTHER WORD               Y7354000
         $MDX  DM1403E             GO PRINT A LINE                      Y7355000
DMLOOP22 $MDM  DMLOOP14+2,(DMLOOP24-DMLOOP10)/2                         Y7356000
         SPACE  1                                                       Y7357000
*********************************************************************** Y7358000
*      1403 PRINT ROUTINE                                             * Y7359000
*                                                                     * Y7360000
*      INPUT -                                                        * Y7361000
*          ACC POINTS TO DATA, DATA IS ALREADY IN 1403 CHAR CODE      * Y7362000
*                                                                     * Y7363000
*********************************************************************** Y7364000
         SPACE  1                                                       Y7365000
DM1403E  $XIO  DMSENS3N            SENSE 1403, WITHOUT RESET            Y7366000
         $BSC  E                   SKIP IF 1403 READY                   Y7367000
         $MDX  DM1403E             LOOP UNTIL THE 1403 IS READY         Y7368000
         $SRA  2                   SHIFT CARRIAGE BUSY BIT TO LOW       Y7369000
         $BSC  E                   LOOP IF CARRIAGE BUSY                Y7370000
         $MDX  DM1403E                                                  Y7371000
         $MDM  DMPRTBSY,0          TEST FOR PRINTER BUSY                Y7372000
         $MDX  DM1403E             LOOP UNTIL PRINT NOT BUSY            Y7373000
         $LDD  DMBUFSWT            LOAD BUFFER SWITCH                   Y7374000
         $STO  DMWRIT03            STORE BUFFER ADDR. IN WRITE XIO      Y7375000
         AIF   (&PR1132 NE 1 ).DMASM08                                  Y7376000
         $RTE  16                  SWITCH BUFFERS                       Y7377000
         $STD  DMBUFSWT            RESTORE BUFFER ADDRESSES             Y7378000
.DMASM08 ANOP                                                           Y7379000
DMCARXIO $XIO  DMSPC3              ISSUE EITHER SPACE OR SKIP           Y7380000
         AIF   (&PR1132 EQ 1 ).DMASM20                                  Y7381000
         $MDM  DMTRSBSY,1          INDICATE PRINT TRANSFER BUSY         Y7382000
DMTRNCHK $MDM  DMTRSBSY,0          CHECK FOR PRINT TRANSFER BUSY        Y7383000
         $MDX  DMTRNCHK            LOOP UNTIL TRANSFER COMPLETE         Y7384000
.DMASM20 ANOP                                                           Y7385000
DMLOOP14 $BSC  DMLOOP10,,L         GO BUILD NEXT LINE                   Y7386000
DMLOOP24 $MDM  DMPRTBSY,0          TEST FOR PRINT COMPLETE              Y7387000
         $MDX  DMLOOP24            LOOP UNTIL COMPLETE                  Y7388000
         $MDM  DMLOOP14+2,(DMLOOP10-DMLOOP24)/2  RESTORE                Y7389000
         $BSC  DMLEAVE,,L                                               Y7390000
         SPACE  1                                                       Y7391000
*********************************************************************** Y7392000
*                                                                     * Y7393000
*      CONVERT BINARY TO 1403 CHAR CODE ROUTINE                       * Y7394000
*                                                                     * Y7395000
*********************************************************************** Y7396000
         SPACE  1                                                       Y7397000
DMCONVT  DS    H                   RETURN ADDRESS                       Y7398000
         $SRA  16                  CLEAR ACC                            Y7399000
         $SLT  4                   MOVE IN NEXT CHAR FROM EXT           Y7400000
         $A    DMTABADD            ADD BINARY TO TABLE ADDRESS          Y7401000
         $STO  DMCHARAD            STORE SUM FOR INDIRECT ADDR.         Y7402000
         $LD   DMCHARAD,,I         LOAD 1403 BINARY CHAR                Y7403000
         $BSC  DMCONVT,,I          RETURN                               Y7404000
         DS    0F                  ALIGN TO EVEN 1130 ADDRESS           Y7405000
         SPACE  1                                                       Y7406000
*********************************************************************** Y7407000
*                                                                     * Y7408000
*      1403 BUFFER BLANKING ROUTINE                                   * Y7409000
*                                                                     * Y7410000
*********************************************************************** Y7411000
         SPACE  1                                                       Y7412000
DMBUFBLK DS    H                   RETURN ADDRESS                       Y7413000
         $LDX  DMBUFSWT,WC,I       LOAD BEGIN BUFFER ADDRESS            Y7414000
         $LDD  DMBLANK             LOAD ACC WITH TWO 1403 BLANKS        Y7415000
         $LDX  30,WB               LOAD COUNT TO BLANK 120 CHARS        Y7416000
DMLOOP16 $STD  0,WC                STORE 4 BLANKS IN OUTPUT LINE        Y7417000
         $MDX  2,WC                POINT TO NEXT BUFFER LOCATION        Y7418000
         $MDX  -1,WB               COUNT 4 CHAR GROUPS                  Y7419000
         $MDX  DMLOOP16            IF NOT THRU 120 CHAR,CONTINUE        Y7420000
         $BSC  DMBUFBLK,,I         RETURN IF BUFFER ALL BLANK           Y7421000
DMBLANK  DC    X'7F7F7F7F'         TWO 1403 BLANKS                      Y7422000
         DS    0F                  ALIGN FOR EVEN ADDRESSES ON 1130     Y7423000
DMBUFSWT $ADCON DMBUFF1            BUFFER ADDRESSES                     Y7424000
         AIF   (&PR1132 NE 1 ).DMASM18                                  Y7425000
         $ADCON  DMBUFF2                                                Y7426000
         AGO   .DMASM09                                                 Y7427000
.DMASM18 ANOP                                                           Y7428000
         DS    0F                                                       Y7429000
.DMASM09 ANOP                                                           Y7430000
         SPACE  1                                                       Y7431000
*********************************************************************** Y7432000
*      1403 IOCCS                                                     * Y7433000
*********************************************************************** Y7434000
         SPACE  1                                                       Y7435000
DMSENS3N DC    X'0000AF00'         1403 SENSE WITHOUT RESET             Y7436000
DMSENS3  DS    0F                                                       Y7437000
         DC    X'0000AF01'         IOCC TO SENSE 1403,RESET             Y7438000
DMSPC3   DC    H'0',X'AC00'        IOCC TO SINGLE SPACE 1403            Y7439000
DMSKP3   $ADCON DMSKPDW            IOCC TO SKIP 1403 TO CHAN 1          Y7440000
         DC    X'A900'                                                  Y7441000
DMWRIT03 DC    H'0'                IOCC TO WRITE ON 1403                Y7442000
         DC    X'AD00'                                                  Y7443000
DMSKPDW  DC    X'0800'             SKIP TO CHAN 1 DATA WORD             Y7444000
DMTABADD $ADCON  DM1403TB          ADDRESS OF CONVERSION TABLE          Y7445000
DM1403TB DC    X'0049'             1403 CONVERSION TABLE                Y7446000
         DC    X'0040'             CHARACTER 1                          Y7447000
         DC    X'0001'             CHARACTER 2                          Y7448000
         DC    X'0002'             CHARACTER 3                          Y7449000
         DC    X'0043'             CHARACTER 4                          Y7450000
         DC    X'0004'             CHARACTER 5                          Y7451000
         DC    X'0045'             CHARACTER 6                          Y7452000
         DC    X'0046'             CHARACTER 7                          Y7453000
         DC    X'0007'             CHARACTER 8                          Y7454000
         DC    X'0008'             CHARACTER 9                          Y7455000
         DC    X'0064'             CHARACTER A                          Y7456000
         DC    X'0025'             CHARACTER B                          Y7457000
         DC    X'0026'             CHARACTER C                          Y7458000
         DC    X'0067'             CHARACTER D                          Y7459000
         DC    X'0068'             CHARACTER E                          Y7460000
         DC    X'0029'             CHARACTER F                          Y7461000
.DMASM06 AIF   (&PR1132 NE 1 ).DMASM07                                  Y7462000
         SPACE  1                                                       Y7463000
*********************************************************************** Y7464000
*                                                                     * Y7465000
*      1132 DUMP ROUTINE                                              * Y7466000
*                                                                     * Y7467000
*********************************************************************** Y7468000
         SPACE  1                                                       Y7469000
         DS    0F                  ALIGN TO EVEN 1130 ADDRESS FOR       Y7470000
*                                  USE AS A 1403 BUFFER                 Y7471000
DM1132   $BSI  DMCLEAR             GO CLEAR SCAN BITS                   Y7472000
         $LDX  DMACCSV,WA,L        LOAD ADDR OF REG. STORAGE            Y7473000
         $SRA  16                  CLEAR ACC                            Y7474000
         $STO  DMWDCNT             CLEAR WORD COUNT SWITCH              Y7475000
         $STO  DMREQE              INDICATE THAT AN E IS REQUIRED       Y7476000
         $LDX  9,WB                NO. OF REGS. PLUS ONE                Y7477000
         $BSI  DM1132E             GO PRINT OUT REGISTERS               Y7478000
DMLOOP23 $LDX  DMLOW,WA,I          PICK UP INITIAL DUMP ADDR            Y7479000
         $MDM  DMHIGH,-16          REDUCE WORD COUNT BY 16              Y7480000
          $MDX  DMLOOP19           NOT ZERO , CONTINUE                  Y7481000
         $MDM  DMLOOP25+2,(DMLOOP26-DMLOOP23)/2  LEAVE AFTER THIS LINE  Y7482000
DMLOOP19 $LDX  17,WB               LOAD WORDS/LINE PLUS ONE             Y7483000
         $BSI  DM1132E             GO PRINT THIS LINE                   Y7484000
         $MDM  DMLOW,16            POINT TO NEXT DUMP BLOCK             Y7485000
DMLOOP25 $BSC  DMLOOP23,,L         GO INITIALIZE NEXT LINE              Y7486000
DMLOOP26 $MDM  DMWDCNT,0           CHECK FOR PRINT COMPLETE             Y7487000
         $MDX  DMLOOP26            LOOP UNTIL PRINT COMPLETE            Y7488000
         $MDM  DMLOOP25+2,(DMLOOP23-DMLOOP26)/2   RESTORE               Y7489000
         $MDM  DMFIRST,125         INDICATE NOT FIRST FOR SUBR CALLS    Y7490000
         $XIO  DMSTPPR             STOP THE 1132 PRINTER                Y7491000
         $BSC  DMLEAVE,,L          RETURN                               Y7492000
         SPACE  1                                                       Y7493000
*********************************************************************** Y7494000
*                                                                     * Y7495000
*     1132 PRINT ROUTINE                                              * Y7496000
*                                                                     * Y7497000
*            XR2  CONTAINS A COUNT OF THE NUMBER OF WORDS TO BE       * Y7498000
*                 DUMPED PLUS 1                                       * Y7499000
*                                                                     * Y7500000
*            XR1 CONTAINS THE ADDRESS OF THE NEXT DUMP BLOCK          * Y7501000
*                                                                     * Y7502000
*                                                                     * Y7503000
*********************************************************************** Y7504000
         SPACE  1                                                       Y7505000
DM1132E  DS    H                                                        Y7506000
         $XIO  DMSENS2N            SENSE 1132,WITHOUT RESET             Y7507000
         $SLA  3                   SHIFT CARRIAGE BUSY BIT TO SIGN      Y7508000
         $BSC  N                   SKIP IF CARRIAGE BUSY                Y7509000
         $SLA  2                   SHIFT NOT READY BIT TO SIGN          Y7510000
         $BSC  DM1132E+2,,L,P+Z    LOOP UNTIL 1132 IS READY             Y7511000
         $MDM  DMWDCNT,0           CHECK IF PRINT BUSY      -           Y7512000
         $MDX  DM1132E+2           LOOP UNTIL NOT BUSY                  Y7513000
         $STX  DMSTADDL,WA         STORE ADDR OF DUMP BLOCK             Y7514000
         $STX  DMWDCNT,WB          STORE COUNT OF CHAR TO BE DUMPED     Y7515000
         $MDM  DMFIRST,0           IS THIS THE FIRST CALL               Y7516000
         $XIO  DM132STR            ISSUE 1132 START PRINTER             Y7517000
         $BSC  DM1132E,,I          RETURN                               Y7518000
         SPACE  1                                                       Y7519000
*********************************************************************** Y7520000
*                                                                     * Y7521000
*     LEVEL 1 OR 1132 INTERRUPT ROUTINE                               * Y7522000
*                                                                     * Y7523000
*********************************************************************** Y7524000
         SPACE  1                                                       Y7525000
DMNLEVL1 DS    H                   RETURN ADDR                          Y7526000
         $STD  DMACCSAV            SAVE ACCUMULATOR                     Y7527000
         $STX  DMXR1SV2,WA         SAVE XR1                             Y7528000
         $STX  DMXR2SV2,WB         SAVE XR2                             Y7529000
         $STX  DMXR3SV2,WC         SAVE XR3                             Y7530000
         $XIO  DMSENS2             SENSE 1132 WITH RESET                Y7531000
         $BSC  DMREADEM,,L,P+Z     BR IF EMITTER READ INT.              Y7532000
         $SLA  1                   SHIFT SKIP RESPONSE TO SIGN BIT      Y7533000
         $BSC  DMSKPRES,,L,P+Z     BR IF SKIP RESPONSE                  Y7534000
DM1132RT $LDX  DMXR2SV2,WB,I       RESTORE XR2 TO PRE INT.  VALUE       Y7535000
         $LDX  DMXR3SV2,WC,I       RESTORE XR3 TO PRE INT.  VALUE       Y7536000
         $LDD  DMACCSAV            RESTORE ACC TO PRE. INT. VALUE       Y7537000
         $LDX  DMXR1SV2,WA,I       RESTORE XR1 TO PRE. INT. VALUE       Y7538000
         $BOSC DMNLEVL1,,I         RETURN,CLEAR INT.                    Y7539000
DMSKPRES $SLA  7                   SHIFT CHANNEL 1 INDICATOR TO SIGN    Y7540000
         $BSC  P+Z                 SKIP IF NOT CHANNEL 1                Y7541000
         $XIO  DMSSKIP2            STOP CARRIAGE SKIP                   Y7542000
         $MDX  DM1132RT            RESTORE AND RETURN                   Y7543000
         SPACE  1                                                       Y7544000
*********************************************************************** Y7545000
*      1132 IOCCS                                                     * Y7546000
*********************************************************************** Y7547000
         SPACE  1                                                       Y7548000
DMSSKIP2 DS    0F                                                       Y7549000
         DC    X'1000'             1132 STOP SKIP IOCC                  Y7550000
         DC    X'3402'                                                  Y7551000
DM132STR DC    X'00003480'         1132 START PRINTER IOCC              Y7552000
DMSKIP2  DC    H'0'                1132 START SKIP IOCC                 Y7553000
         DC    X'3404'                                                  Y7554000
DMSENS2  DC    X'F000'             1132 SENSE IOCC WITH RESET           Y7555000
         DC    X'3701'                                                  Y7556000
DMSPACE2 DC    X'C500',X'3401'     1132 SPACE  IOCC                     Y7557000
DMSTPPR  DC    X'90003440'         1132 STOP PRINTER IOCC               Y7558000
DMSENS2N DC    X'00003700'         SENSE 1132 WITHOUT RESET             Y7559000
DMRDEMIT $ADCON  DMEMIT            READ EMMITTER IOCC                   Y7560000
         DC    X'3200'                                                  Y7561000
DM9000   EQU   DMSTPPR                                                  Y7562000
         AGO   .DMASM10                                                 Y7563000
.DMASM07 ANOP                                                           Y7564000
DMREADEM DS    60H                 1403 PRINT BUFFER                    Y7565000
         AGO   .DMASM11                                                 Y7566000
.DMASM10 AIF   (&PR1403 NE 1 ).DMASM26                                  Y7567000
.DMASM11 ANOP                                                           Y7568000
         SPACE  1                                                       Y7569000
*********************************************************************** Y7570000
*                                                                     * Y7571000
*      LEVEL 4 OR 1403 INTERRUPT ROUTINE                              * Y7572000
*                                                                     * Y7573000
*********************************************************************** Y7574000
         SPACE  1                                                       Y7575000
DMNLEVL4 DS    H                   RETURN ADDRESS                       Y7576000
         $STD  DMACCSAV            SAVE ACC                             Y7577000
         $XIO DMSENS3              SENSE 1403 AND RESET                 Y7578000
         $SLA  2                   PRINT COMP. BIT TO SIGN              Y7579000
         $BSC   DM1403P,,L,P+Z     RETURN IF PRINT COMPLETE             Y7580000
         $SLA  1                   CARRIAGE COMP BIT TO SIGN            Y7581000
         $BSC  N                   SKIP IF CARRIAGE COMP                Y7582000
         AIF   (&PR1132 EQ 1 ).DMASM12                                  Y7583000
         $MDX  DM1403T             INDICATE TRANSFER COMPLETE           Y7584000
         AGO   .DMASM13                                                 Y7585000
.DMASM12 ANOP                                                           Y7586000
         $MDX  DMLEV4RT            IGNORE OTHER INTERRUPTS              Y7587000
.DMASM13 ANOP                                                           Y7588000
         $MDM  DMPRTBSY,0                                               Y7589000
DM1403W  $XIO  DMWRIT03            ISSUE WRITE XIO                      Y7590000
         $MDX DMLEV4RT                                                  Y7591000
DM1403P  $SRA  16                  INDICATE THAT PRINT NOT BUSY         Y7592000
         $STO  DMPRTBSY,,L                                              Y7593000
DMLEV4RT $LDD  DMACCSAV            RESTORE ACC TO PRE-INT. VALUE        Y7594000
         $BOSC DMNLEVL4,,I         RETURN TO MAINLINE, CLEAR INT.       Y7595000
         AIF   (&PR1132 EQ 1 ).DMASM14                                  Y7596000
DM1403T  $SRA  16                  CLEAR ACC                            Y7597000
         $STO  DMTRSBSY,,L         INDICATE TRANSFER COMPLETE           Y7598000
         $MDX  DMLEV4RT            RETURN                               Y7599000
.DMASM14 ANOP                                                           Y7600000
         AGO   .DMASM25                                                 Y7601000
.DMASM26 ANOP                                                           Y7602000
DMNLEVL4 DS    8H                  1132 PRINT ROUTINE STORAGE           Y7603000
.DMASM25 ANOP                                                           Y7604000
DMACCSAV DS    F                   ACC AND EXT STORAGE AT INT.TIME      Y7605000
DMXR1SV2 DS    H                   XR1 STORAGE AT INT. TIME             Y7606000
DMXR2SV2 DS    H                   XR2 STORAGE AT INT. TIME             Y7607000
DMXR3SV2 DS    H                   XR3 STORAGE AT INT. TIME             Y7608000
         AIF   (&PR1132 NE 1 ).DMASM15                                  Y7609000
         SPACE  1                                                       Y7610000
*********************************************************************** Y7611000
*                                                                     * Y7612000
*     CLEAR SCAN AREA ROUTINE                                         * Y7613000
*                                                                     * Y7614000
*********************************************************************** Y7615000
         SPACE  1                                                       Y7616000
DMCLEAR  DS    H                   RETURN ADDR                          Y7617000
         $LDX  0,WA                LOAD XR1 FOR USE IN SHORT INST.      Y7618000
         $SLT  32                  CLEAR ACC AND EXT                    Y7619000
         $STD  32,WA               CLEAR 32 AND 33                      Y7620000
         $STD  34,WA               CLEAR 34 AND 35                      Y7621000
         $STD  36,WA               CLEAR 36 AND 37                      Y7622000
         $LDD  DMDBLONE            PUT A 1 BIT IN BIT 15                Y7623000
         $STD  38,WA               CLEAR 38 AND 39                      Y7624000
         $BSC  DMCLEAR,,I          RETURN                               Y7625000
         SPACE  1                                                       Y7626000
*********************************************************************** Y7627000
*                                                                     * Y7628000
*     1132 READ EMITTER RESPONSE INTERRUPT HANDLER                    * Y7629000
*                                                                     * Y7630000
*********************************************************************** Y7631000
         SPACE  1                                                       Y7632000
         DS    0F                  ALIGN TO EVEN 1130 ADDRESS FOR       Y7633000
*                                  USE AS A 1403 BUFFER                 Y7634000
DMREADEM $BSI  DMCLEAR            CLEAR SCAN AREA                       Y7635000
         $XIO  DMRDEMIT            READ THE NEXT CHAR                   Y7636000
         $MDM  DMREQE,0            ARE WE WAITING FOR AN E              Y7637000
         $MDX  DMTESTCH            NO GO CHECK FOR A-I, 0-9             Y7638000
*     CHECK FOR CHAR E ROUTINE                                          Y7639000
         $LD   DMEMIT              LOAD ACC WITH NEXT PRINT CHAR        Y7640000
         $EOR  DMSPACE2            CHECK FOR CHAR E                     Y7641000
         $BSC  DM1132RT,,L,Z       BR TO RETURN IF NOT E                Y7642000
         $MDM  DMREQE,27           LOAD CHAR COUNT                      Y7643000
         $XIO  DMSPACE2            ISSUE SKIP OR SPACE                  Y7644000
         SPACE  1                                                       Y7645000
*********************************************************************** Y7646000
*                                                                     * Y7647000
*     COMMON ROUTINE TO SET UP SCAN FIELD , THIS IS ENTERED IF        * Y7648000
*     A CHARACTER A-I OR 0-9 IS TO BE PRINTED NEXT                    * Y7649000
*                                                                     * Y7650000
*********************************************************************** Y7651000
         SPACE  1                                                       Y7652000
DMCOMMON $LDX  DMWDCNT,WC,I        ADDR + 16 DATA WORDS PER LINE        Y7653000
         $LDX  16,WB               SET NO. OF MASK BITS IN XR2          Y7654000
         $LD   DMEMIT              LOAD NEXT PRINT CHAR                 Y7655000
         $SLT  4                   IS CHAR NUMERIC                      Y7656000
         $BSC  DMNUMBR,,L,C        BR IF NUMERIC(CARRY ON)              Y7657000
         $A    DM9000              ADD NINE                             Y7658000
         $BSC  DM1132RT,,L,C       RETURN IF CHAR G, H, I               Y7659000
DMNUMBR  $STO  DMEMIT              FILL  DMEMIT WITH CHAR.              Y7660000
         $SRA  4                   EXAMPLE                              Y7661000
         $OR   DMEMIT                 EMIT CONTAINS  EEEE  WHEN         Y7662000
         $STO  DMEMIT                 CHAR E IS TO BE PRINTED NEXT      Y7663000
         $SRA  8                                                        Y7664000
         $OR   DMEMIT                                                   Y7665000
         $STO  DMEMIT                                                   Y7666000
         $LDX  1,WA                LOAD XR1 WITH ONE                    Y7667000
         $STX  DMBLOCK2,WA         STORE IN COUNT FOR DOUBLE SPACING    Y7668000
         $LD   DMSTADDL            LOAD ADDR OF DUMP BLOCK              Y7669000
         $STO  DMSTADDR            STORE FOR CHAR. SCAN                 Y7670000
         $MDX  DMLOOP3             GO PRINT ADDR AND STORAGE BLOCK      Y7671000
DMDBLONE DC    F'1'                DOUBLE WORD ONE                      Y7672000
         SPACE  1                                                       Y7673000
*********************************************************************** Y7674000
*                                                                     * Y7675000
*     SET UP THE PRINT SCAN FIELD                                     * Y7676000
*                                                                     * Y7677000
*********************************************************************** Y7678000
         SPACE  1                                                       Y7679000
DMLOOP1  $LD   DMSTADDR,,I         LOAD WORD TO BE DUMPED               Y7680000
         $MDM  DMSTADDR,1          POINT TO NEXT WORD                   Y7681000
DMLOOP3  $LDX  4,WA                SET XR1 FOR LOOP CONTROL             Y7682000
         $EOR  DMEMIT              COMPARE WITH EMITTED CHAR            Y7683000
DMLOOP2  $A    DMSENS2             CHECK FOR OVERFLOW                   Y7684000
         $BSC  DMLOOP4,,L,C        IF OVERFLOW,NO COMPARE,BR            Y7685000
         $AD   DMDBLONE            IF MATCH, INSERT MASK BIT            Y7686000
DMLOOP4  $BSI  DMOVER              GO POSITION BIT IN SCAN FIELD        Y7687000
         $SLA  3                   POSITION NEXT CHAR FOR CHECK         Y7688000
         $MDX  -1,WA               DECREMENT CHAR CNT ,SKIP IF END WORD Y7689000
         $MDX  DMLOOP2             GO LOOK AT NEXT CHAR IN WORD         Y7690000
         SPACE  1                                                       Y7691000
*********************************************************************** Y7692000
*                                                                     * Y7693000
*     RTN. ENTERED AT END OF EACH WORD DUMPED                         * Y7694000
*                                                                     * Y7695000
*********************************************************************** Y7696000
         SPACE 1                                                        Y7697000
DMLOOP5  $BSI  DMOVER              GO SPACE BETWEEN WORDS               Y7698000
         $MDM  DMBLOCK2,-1         DECREMENT BLOCK WORD COUNT           Y7699000
         $MDX  DMLOOP6             NOT DONE WITH 4 WORD BLOCK           Y7700000
         $BSI  DMOVER              EXTRA SPACE BETWEEN 4 WORD BLOCKS    Y7701000
         $MDM  DMBLOCK2,4          RESTORE COUNT TO EXTRA SPACE         Y7702000
*                                  EVERY 4 WORDS                        Y7703000
DMLOOP6  $MDX  -1,WC               DECREMENT WORD COUNT                 Y7704000
         $MDX  DMLOOP1             GO PICK UP NEXT WORD                 Y7705000
         SPACE  1                                                       Y7706000
*********************************************************************** Y7707000
*                                                                     * Y7708000
*     RTN. ENTERED AT THE END OF EACH LINE                            * Y7709000
*                                                                     * Y7710000
*********************************************************************** Y7711000
         SPACE  1                                                       Y7712000
         $MDM  DMFIRST,0           TEST FOR REGISTER LINE               Y7713000
         $MDX  DMRESTR1            BR TO RESTORE FIRST LINE             Y7714000
         $SLT  21                  POSITION LAST 10 BITS                Y7715000
         $STO  $MMASK1+5,,L        STORE LAST SCAN BITS                 Y7716000
DMRESTR2 $LDX  32,WC               RESTORE MASK ADDRESS IN STORE        Y7717000
         $STX  DMSTO+2,WC          INSTRUCTION                          Y7718000
         $BSC  DM1132RT,,L         RETURN                               Y7719000
DMRESTR1 $SLT  15                  POSITION LAST 14 BITS                Y7720000
         $STO  $MMASK1+2,,L        STORE LAST SCAN BITS                 Y7721000
         $MDX  DMRESTR2                                                 Y7722000
         SPACE  1                                                       Y7723000
*********************************************************************** Y7724000
*      RTN. TO SET MASK BITS                                          * Y7725000
*********************************************************************** Y7726000
         SPACE  1                                                       Y7727000
DMOVER   EQU   *+2                 STORAGE FOR RETURN ADDR              Y7728000
DMEXIT   $BSC  *-*,,L              RETURN TO CALLER                     Y7729000
         $SLT  1                   SHIFT COMPARE CHAR AND MASK          Y7730000
         $MDX  -1,WB               DECREMENT MASK BIT COUNT             Y7731000
         $MDX  DMEXIT              RETURN IF NOT ZERO                   Y7732000
         $LDX  16,WB               PUT BIT COUNT OF 16 IN XR2           Y7733000
         $RTE  17                  PUT MASK WD IN ACC                   Y7734000
DMSTO    $STO  $MMASK1,,L          STORE MASK WORD                      Y7735000
         $MDM  DMSTO+2,1           POINT TO NEXT MASK WORD              Y7736000
         $RTE  15                  RESTORE ACC                          Y7737000
         $MDX  DMEXIT              RETURN                               Y7738000
         SPACE  1                                                       Y7739000
*********************************************************************** Y7740000
*                                                                     * Y7741000
*     RTN. TO  TEST FOR THE CHAR A-I , 0-9                            * Y7742000
*                                                                     * Y7743000
*********************************************************************** Y7744000
         SPACE  1                                                       Y7745000
DMTESTCH $MDM  DMREQE,-1           DECREMENT WHEEL CHAR COUNT           Y7746000
         $MDX  DMLOOP7             NOT ZERO CHECK FOR A-I               Y7747000
         $SRA  16                  ZERO THE CHAR COUNT FOR THIS         Y7748000
         $STO  DMWDCNT             LINE TO INDICATE THAT PRINT FREE     Y7749000
         $STO  DMFIRST             INDICATE NOT FIRST LINE              Y7750000
         $BSC  DM1132RT,,L         GO RETURN                            Y7751000
DMLOOP7  $LD   DMEMIT,,L           GET PRESENT WHEEL CHAR               Y7752000
         $BSC  N                   CONTINUE IF ALPHA OR NUMERIC         Y7753000
         $MDX  DMTESTRT            RETURN IF NOT ALPHA OR NUMERIC       Y7754000
         $A    DMSSKIP2,,L         TURNS CARRY ON IF 0-9                Y7755000
         $BSC  DMCOMMON,,L,C       IF 0-9 GO SCAN DUMP LINE             Y7756000
         $SLA  2                   NOT 0-9 ,CHECK FOR A-I               Y7757000
         $BSC  DMCOMMON,,L,N       GO SCAN DUMP LINE IF A-I             Y7758000
DMTESTRT $BSC  DM1132RT,,L         OTHERWISE RETURN                     Y7759000
.DMASM15 ANOP                                                           Y7760000
         SPACE  1                                                       Y7761000
*********************************************************************** Y7762000
*   SYMBOL DEFINITIONS                                                * Y7763000
*********************************************************************** Y7764000
         SPACE  1                                                       Y7765000
         AIF   (&PR1403 NE 1 ).DMASM17                                  Y7766000
DMPRTBSY EQU   DMWRIT03            PRINTER BUSY INDICATOR               Y7767000
DMTEMP1  EQU   DMCHKPRT            TEMPORARY STORAGE                    Y7768000
DMBUFLOC EQU   DMTEMP1+2           START ADDR OF BUFFER                 Y7769000
DMBLOCK  EQU   DMBUFLOC+2          COUNT FOR EXTRA SPACE EVERY 4        Y7770000
DMCHARAD EQU   DMBLOCK+2           ADDR IN TABLE OF CHAR                Y7771000
DMADDR   EQU   DMLOW               ADDR OF NEXT WORD TO DUMP            Y7772000
DMWDADD  EQU   DMLOOP9+2           ADDR FIELD IN LOAD NEXT WORD INSTR.  Y7773000
DMBUFF1  EQU   DMREADEM            1403 BUFFER 1                        Y7774000
         AIF   (&PR1132 NE 1 ).DMASM16                                  Y7775000
DMBUFF2  EQU   DM1132              1403 BUFFER 2                        Y7776000
         AGO   .DMASM17                                                 Y7777000
.DMASM16 ANOP                                                           Y7778000
DMTRSBSY EQU   DMCHARAD+2          TRANSFER COMPLETE INDICATOR          Y7779000
.DMASM17 ANOP                                                           Y7780000
$MMASK1  EQU   32                  1132 MASK ADDRESS                    Y7781000
DMFIRST  EQU   DMNLEVL4            1132 FIRST TIME INDICATOR            Y7782000
DMREQE   EQU   DMFIRST+2           1132 WAITING FOR AN E INDICATOR      Y7783000
DMWDCNT  EQU   DMREQE+2            NO. OF WORDS/LINE PLUS ONE           Y7784000
DMBLOCK2 EQU   DMWDCNT+2           COUNT FOR EXTRA SPACE EVERY 4        Y7785000
DMEMIT   EQU   DMBLOCK2+2          STORAGE FOR NEXT 1132 CHAR TO PRINT  Y7786000
DMSTADDR EQU   DMEMIT+2            WORD ADDR FOR CHAR SCAN              Y7787000
DMSTADDL EQU   DMSTADDR+2          ADDR OF DUMP BLOCK                   Y7788000
.NODBUGA ANOP                                                           Y7789000
         TITLE 'RTP1130 (TP BUFFER ORIGIN)'                             Y7790000
         SPACE 3                                                        Y7791000
*********************************************************************** Y7792000
*              TP BUFFER ORIGIN AND QUEUE POINTER DEFINITIONS         * Y7793000
*********************************************************************** Y7794000
TPBUFFQP $ADCON (SBUFPOOL)         FREE BUFFER QUEUE POINTER            Y7795000
TPBUFIQP DC    AL2(*-*)            INPUT BUFFER QUEUE POINTER           Y7796000
TPBUFOQP DC    AL2(*-*)            OUTPUT BUFFER QUEUE POINTER          Y7797000
SBUFPOOL $NULL                     START OF TP BUFFER POOL              Y7798000
         END   RTPETIN                                                  Y7799000
