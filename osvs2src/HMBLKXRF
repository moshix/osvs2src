         TITLE 'HMBLKXRF - LOAD MODULE AND NUCLEUS MAPS AND CROSS-REFERX00010000
               ENCES'                                                   00020000
         LCLA  &T,&SPN                                                  00030000
&SPN     SETA  44                      CHANGE AUTO DATA SUBPOOL TO 44   00040000
         AGO   .@001                                                    00050000
         LCLA  &T,&SPN                                            0002  00060000
.@001    ANOP                                                     0002  00070000
HMBLKXRF CSECT ,                                                  0002  00080000
         BC    15,14(0,@F)                                              00090000
         DC    C'ÊHMBLKXRF'                                       0002  00100000
         STM   @E,@C,12(@D)                                       0002  00110000
         BALR  @B,0                                               0002  00120000
@PSTART  DS    0H                                                 0002  00130000
         USING @PSTART+00000,@B                                   0002  00140000
         LA    @9,4095(0,@B)                                      0002  00150000
         USING @PSTART+04095,@9                                   0002  00160000
         LA    @4,4095(0,@9)                                      0002  00170000
         USING @PSTART+08190,@4                                   0002  00180000
         L     @0,@SIZ001                                         0002  00190000
         GETMAIN  R,LV=(0)                                        0002  00200000
         LR    @C,@1                                              0002  00210000
         USING @DATD+00000,@C                                     0002  00220000
         LM    @0,@1,20(@D)                                       0002  00230000
         XC    @TEMPS(@L),@TEMPS                                  0002  00240000
         ST    @D,@SAV001+4                                       0002  00250000
         LA    @F,@SAV001                                         0002  00260000
         ST    @F,8(0,@D)                                         0002  00270000
         LR    @D,@F                                              0002  00280000
*   GEN(MVC   DECBE(READLEN),RD);       /* MOVE READ TO DYNAMIC AREA    00290000
         MVC   DECBE(READLEN),RD                                        00300000
         DS    0H                                                       00310000
*   PARMPTR=PARMREG;                    /* SAVE PTR TO PARAMETER LIST   00320000
         ST    @1,PARMPTR                                         0031  00330000
*   CURRCESD=GTMAINAD;                  /* INIT CURRCESD TO BEGINNING   00340000
*                                          OF WORK AREA                 00350000
         L     @7,PARMPTR                                         0032  00360000
         L     @5,12(0,@7)                                        0032  00370000
*   CETABPTR=GTMAINAD;                  /* INIT CESDTAB POINTER         00380000
         MVC   CETABPTR(4),12(@7)                                 0033  00390000
*   HIGHADDR=GTMAINAD+GMLENGTH;         /* SET END ADDR OF WORK AREA    00400000
         L     @F,16(0,@7)                                        0034  00410000
         A     @F,12(0,@7)                                        0034  00420000
         ST    @F,HIGHADDR                                        0034  00430000
*   TRSCDCNT=SCATDCNT+TRANDCNT;         /* COMPUTE BYTES OF SC/TR DATA  00440000
         LH    @F,30(0,@7)                                        0035  00450000
         AH    @F,28(0,@7)                                        0035  00460000
         STH   @F,TRSCDCNT                                        0035  00470000
*   INCR=4;                             /* INIT INCR TO 4               00480000
         LA    @F,4                                               0036  00490000
         STH   @F,INCR                                            0036  00500000
*   NUMCESDS=0;                         /* INIT NO. CESD TAB ENTS TO 0  00510000
         SR    @F,@F                                              0037  00520000
         STH   @F,NUMCESDS                                        0037  00530000
*   NUMRLDS=0;                          /* INIT NO. RLD TAB ENTS TO 0   00540000
         ST    @F,NUMRLDS                                         0038  00550000
*   PAGENUM=0;                          /* INIT PAGE NUMBER TO 0        00560000
         STH   @F,PAGENUM                                         0039  00570000
*   SEGLENCT=0;                         /* INIT SEGLENCT TO 0           00580000
         STH   @F,SEGLENCT                                        0040  00590000
*   RLDSPRTD=0;                         /* INIT RLDSPRTD TO 0           00600000
         ST    @F,RLDSPRTD                                        0041  00610000
*   LMLEN=0;                            /* INIT LMLEN TO 0              00620000
         MVC   LMLEN(3),@D1+1                                     0042  00630000
*   LMLENNO=0;                          /* INIT LMLENNO TO 0            00640000
         MVC   LMLENNO(3),@D1+1                                   0043  00650000
*   PDLEN=0;                            /* INIT PDLEN TO 0              00660000
         MVC   PDLEN(3),@D1+1                                     0044  00670000
*   LINECNT=61;                         /* INIT LINECNT TO 61           00680000
         LA    @F,61                                              0045  00690000
         ST    @F,LINECNT                                         0045  00700000
*   CURSEGNO=ZERO(1);                   /* INIT CURSEGNO TO 0           00710000
         MVC   CURSEGNO(1),ZERO                                   0046  00720000
*   PREGHERE='0'B;                      /* INIT PREGHERE TO OFF         00730000
         NI    SWITCHES+1,B'11110001'                             0047  00740000
*   EREFPRES='0'B;                      /* INIT EREFPRES TO OFF         00750000
*   DASHLINE='0'B;                      /* INIT DASHLINE TO OFF         00760000
*   NCHD='0'B;                          /* INIT NCHD TO OFF             00770000
         NI    SWITCHES,B'11110000'                               0050  00780000
*   NCSHD='0'B;                         /* INIT NCSHD TO OFF            00790000
*   ACHD='0'B;                          /* INIT ACHD TO OFF             00800000
*   ACSHD='0'B;                         /* INIT ACSHD TO OFF            00810000
*   NRHD='0'B;                          /* INIT NRHD TO OFF             00820000
         NI    SWITCHES+1,B'00011111'                             0054  00830000
*   ARHD='0'B;                          /* INIT ARHD TO OFF             00840000
*   PRHD='0'B;                          /* INIT PRHD TO OFF             00850000
*   NA3RET='0'B;                        /* INIT NA3RET TO OFF           00860000
         NI    SWITCHES+2,B'01111111'                             0057  00870000
*   PRSHD='0'B;                         /* INIT PRSHD TO OFF            00880000
         NI    SWITCHES+1,B'11101111'                             0058  00890000
*   TEXTNEXT='0'B;                      /* INIT TEXTNEXT TO OFF         00900000
         NI    SWITCHES,B'01111111'                               0059  00910000
*   SP2='0'B;                           /* INIT SP2 TO OFF              00920000
         NI    SWITCHES+2,B'11000111'                             0060  00930000
*   DUBLDASH='0'B;                      /* INIT DUBLDASH TO OFF         00940000
*   NUCMAP='0'B;                        /* INIT NUCMAP TO OFF           00950000
*   TRSCREC1='1'B;                      /* INIT TRSCREC1 TO ON          00960000
         OI    SWITCHES+2,B'00000100'                             0063  00970000
*   BLNKHEAD='1'B;                      /* INIT BLNKHEAD TO ON          00980000
         OI    SWITCHES,B'01100000'                               0064  00990000
*   BLNKDATA='1'B;                      /* INIT BLNKDATA TO ON          01000000
*   NUMCESD='1'B;                       /* INIT NUMCESD TO ON           01010000
         OI    SWITCHES+2,B'01000010'                             0066  01020000
*   RELOC='1'B;                         /* INIT RELOC TO ON             01030000
*   /* TEST FOR HOW TO INITIALIZE NUCMAP                                01040000
*   IF LMODNAME(1:7)=IEANUC0            /* IF LOAD MODULE IS NUCLEUS    01050000
*     THEN                              /* THEN                         01060000
         CLC   36(7,@7),IEANUC0                                   0068  01070000
         BC    07,@9FF                                            0068  01080000
*       DO;                             /* TEST FOR NUCLEUS ERRORS      01090000
*         /* TEST IF THERE IS ANY SCATTER DATA                          01100000
*         IF SCATDCNT=0                 /* IF SCATTER DATA COUNT ZERO   01110000
*           THEN                        /* THEN INDICATE ERROR          01120000
         SR    @F,@F                                              0070  01130000
         CH    @F,28(0,@7)                                        0070  01140000
         BC    07,@9FE                                            0070  01150000
*             ERRORS(28)='1'B;          /* NUCLEUS NOT MARKED SCTR      01160000
         OI    35(@7),B'00010000'                                 0071  01170000
         BC    15,@9FD                                            0072  01180000
*           ELSE                        /* ELSE IT'S OKAY FOR NUC MAP   01190000
*             NUCMAP='1'B;              /* TURN NUCMAP SWITCH ON        01200000
@9FE     OI    SWITCHES+2,B'00001000'                             0072  01210000
*         /* TEST IF A RELOCATION FACTOR WAS SPECIFIED                  01220000
*         IF RELOCFAC^=0                /* IF RELOCFAC IS NOT ZERO      01230000
*           THEN                        /* THEN INDICATE ERROR          01240000
@9FD     SR    @F,@F                                              0073  01250000
         C     @F,60(0,@7)                                        0073  01260000
         BC    08,@9FC                                            0073  01270000
*             DO;                       /* NEGATE RELOCFAC              01280000
*               RELOCFAC=0;             /* MAKE RELOCFAC 0              01290000
         ST    @F,60(0,@7)                                        0075  01300000
*               ERRORS(27)='1'B;        /* RELOC INVALID W/NUCLEUS MAP  01310000
         OI    35(@7),B'00100000'                                 0076  01320000
*             END;                                                      01330000
*       END;                                                            01340000
@9FC     EQU   *                                                  0078  01350000
*   RET=ADDR(READ);                     /* SET UP RETURN ADDRESS        01360000
@9FF     LA    @3,READ                                            0079  01370000
*   GO TO WRITE17;                      /* GO TO INIT BUFFERS TO BLANKS 01380000
         BC    15,WRITE17                                         0080  01390000
*                                                                       01400000
* /******************************************************************** 01410000
* /*   THE FOLLOWING SECTION OF CODE READS LOAD MODULE RECORDS.  IT     01420000
* /*   TAKES DATA REQUIRED BY HMBLKXRF FROM CESD AND RLD RECORDS AND    01430000
* /*   BUILDS THE CESD TABLE AND THE RLD TABLE.  DATA FROM OTHER        01440000
* /*   RECORDS IS IGNORED.  THE RECORDS ARE PROCESSED ONE AT A TIME.    01450000
* /******************************************************************** 01460000
*                                                                       01470000
* READ:                                                                 01480000
*   DCBAD=INDCBAD;                      /* LOAD INPUT DCB ADDR INTO REG 01490000
READ     L     @7,PARMPTR                                         0081  01500000
         L     @2,0(0,@7)                                         0081  01510000
*   INBUFAD=INBUF;                      /* LOAD INPUT BUF ADDR INTO REG 01520000
         L     @3,24(0,@7)                                        0082  01530000
*   GEN;                                                                01540000
         READ  DECBE,SF,(DCBAD),(INBUFAD),'S',MF=E READ LOAD MOD RECORD 01550000
         CHECK DECBE                   CHECK READ                       01560000
         DS    0H                                                       01570000
*   /* TEST IF THIS INPUT RECORD IS TEXT                                01580000
*   IF TEXTNEXT='1'B                    /* IF TEXTNEXT SWITCH IS ON     01590000
*     THEN                              /* THEN                         01600000
         TM    SWITCHES,B'10000000'                               0084  01610000
         BC    12,@9FB                                            0084  01620000
*       DO;                             /* THIS RECORD IS TEXT          01630000
*         TEXTNEXT='0'B;                /* INDICATE NEXT REC NOT TEXT   01640000
         NI    SWITCHES,B'01111111'                               0086  01650000
*         GO TO READ;                   /* GO TO READ ANOTHER RECORD    01660000
         BC    15,READ                                            0087  01670000
*       END;                                                            01680000
*   /* TEST IF INPUT RECORD TYPE IS CESD                                01690000
*   IF IDENT1=CESD                      /* IF RECORD ID IS '00100000'   01700000
*     THEN                              /* THEN                         01710000
@9FB     CLC   0(1,@3),CESD                                       0089  01720000
         BC    07,@9FA                                            0089  01730000
*       DO;                             /* PROCESS IT                   01740000
*         CESDTBID=ESDID;               /* SET CESDTBID FROM CURR ESDID 01750000
         MVC   CESDTBID(2),4(@3)                                  0091  01760000
*         NUMITEMS=COUNT1/16;           /* SET NO. 16 BYTE ITEMS IN REC 01770000
         LH    @E,6(0,@3)                                         0092  01780000
         SRDA  @E,32                                              0092  01790000
         LA    @0,16                                              0092  01800000
         DR    @E,@0                                              0092  01810000
         STH   @F,NUMITEMS                                        0092  01820000
*         /* ENTER DATA FROM CESD RECORD INTO CESD TABLE                01830000
*         DO I=1 TO NUMITEMS;           /* LOOP                         01840000
         LA    @2,1                                               0093  01850000
         BC    15,@DO9F8                                          0093  01860000
*          /* IF NULL CESD AND NUCLEUS IS BEING MAPPED THEN ALTER       01870000
*          /* ENTRY FOR LATER SORTOUT                                   01880000
*          TEMPESD=ESDATA(I,9) &'0F'X;  /* SAVE CESD TYPE      YM05307  01890000
@DO9F9   MVI   TEMPESD,X'0F'                                      0094  01900000
         LR    @7,@2                                              0094  01910000
         BCTR  @7,0                                               0094  01920000
         SLA   @7,4                                               0094  01930000
         LA    @E,16(@7,@3)                                       0094  01940000
         NC    TEMPESD(1),0(@E)                                   0094  01950000
*          IF TEMPESD=NULL              /* NULL ITEM ?         YM05307  01960000
*            THEN                       /* YES                          01970000
         CLC   TEMPESD(1),NULL                                    0095  01980000
         BC    07,@9F5                                            0095  01990000
*              DO;                                                      02000000
*                IF NUCMAP='1'B         /* AND NUCLEUS IS BEING MAPPED  02010000
*                  THEN                 /* YES                          02020000
         TM    SWITCHES+2,B'00001000'                             0097  02030000
         BC    12,@9F4                                            0097  02040000
*                    DO;                                                02050000
*                    CESDLINE(3:18)=ESDATA(I,1:16); /* PUT IN CESD DATA 02060000
         LA    @E,8(@7,@3)                                        0099  02070000
         MVC   2(16,@5),0(@E)                                     0099  02080000
*                    SYMBOL=LASTN;          /* SET NAME TO ALL Z'S      02090000
         MVC   2(8,@5),LASTN                                      0100  02100000
*                    CESDADDR=LASTADDR;     /* SET ADDR TO ALL Z'S      02110000
         MVC   11(3,@5),LASTADDR                                  0101  02120000
*                    GO TO READA;           /* INCR PTR                 02130000
         BC    15,READA                                           0102  02140000
*                    END;                                               02150000
*                  ELSE                 /* NUCLEUS IS NOT BEING MAPPED  02160000
*                    GO TO READA1;      /* INCR CESD TABLE ID           02170000
*              END;                                                     02180000
@9F3     EQU   *                                                  0105  02190000
*          /* TEST IF THE CESD TABLE IS BIG ENOUGH TO HOLD ITEM         02200000
*           IF CURRCESD>HIGHADDR-18     /* IF LINE WILL OVERFLOW TABLE  02210000
*             THEN                      /* THEN                         02220000
@9F5     L     @F,HIGHADDR                                        0106  02230000
         SH    @F,@D2                                             0106  02240000
         CR    @F,@5                                              0106  02250000
         BC    10,@9F2                                            0106  02260000
*               DO;                     /* PROCESS THE ERROR            02270000
*                 ERRORS(4)='1'B;       /* INDICATE TABLE OVERFLOW      02280000
         L     @7,PARMPTR                                         0108  02290000
         OI    32(@7),B'00010000'                                 0108  02300000
*                 GO TO ABORT;          /* ABORT (MESSAGE HMB104I)      02310000
         BC    15,ABORT                                           0109  02320000
*               END;                                                    02330000
*           CESDLINE(3:18)=ESDATA(I,1:16); /* PUT CESD REC DATA IN TAB  02340000
@9F2     LR    @7,@2                                              0111  02350000
         BCTR  @7,0                                               0111  02360000
         SLA   @7,4                                               0111  02370000
         LA    @E,8(@7,@3)                                        0111  02380000
         MVC   2(16,@5),0(@E)                                     0111  02390000
* READA:    CESDID=CESDTBID;            /* ENTER ESDID FOR THIS ITEM    02400000
READA    MVC   0(2,@5),CESDTBID                                   0112  02410000
*           NUMCESDS=NUMCESDS+1;        /* INCR NO. CESD TABLE LINES    02420000
         LA    @F,1                                               0113  02430000
         AH    @F,NUMCESDS                                        0113  02440000
         STH   @F,NUMCESDS                                        0113  02450000
*           CURRCESD=CURRCESD+18;       /* LOC NEXT EMPTY LINE IN TABLE 02460000
         LA    @5,18(0,@5)                                        0114  02470000
*           /* BRANCH HERE TO AVOID ENTERING NULL CESD ITEM IN TABLE    02480000
* READA1:   CESDTBID=CESDTBID+1;        /* INCR CESD TABLE ID           02490000
READA1   LA    @F,1                                               0115  02500000
         AH    @F,CESDTBID                                        0115  02510000
         STH   @F,CESDTBID                                        0115  02520000
*         END;                          /* LOOP                         02530000
*         CURRLD=CURRCESD;              /* INIT CURRLD                  02540000
         AH    @2,@D3                                             0116  02550000
@DO9F8   CH    @2,NUMITEMS                                        0116  02560000
         BC    12,@DO9F9                                          0116  02570000
         LR    @6,@5                                              0117  02580000
*         GO TO READ;                   /* GO TO READ ANOTHER RECORD    02590000
         BC    15,READ                                            0118  02600000
*       END;                                                            02610000
*   /* TEST IF INPUT RECORD TYPE IS IDR                                 02620000
*   IF IDENT1=IDR                       /* IF RECORD ID IS '10000000'   02630000
*     THEN                              /* THEN                         02640000
@9FA     CLC   0(1,@3),IDR                                        0120  02650000
*       GO TO READ;                     /* GO TO READ ANOTHER RECORD    02660000
         BC    08,READ                                            0121  02670000
*   /* TEST IF INPUT RECORD TYPE IS CONTROL OR CONTROL-EOS              02680000
*   IF IDENT1=CONTROL                   /* IF RECORD ID IS '00000001'   02690000
*      | IDENT1=CONTEOS                 /* OR IF ID IS '00000101'       02700000
*     THEN                              /* THEN                         02710000
         CLC   0(1,@3),CONTROL                                    0122  02720000
         BC    08,@9F1                                            0122  02730000
         CLC   0(1,@3),CONTEOS                                    0122  02740000
         BC    07,@9F0                                            0122  02750000
*       DO;                             /* DON'T PROCESS NEXT RECORD    02760000
*         TEXTNEXT='1'B;                /* INDICATE NEXT RECORD IS TEXT 02770000
@9F1     OI    SWITCHES,B'10000000'                               0124  02780000
*         GO TO READ;                   /* GO TO READ THIS TEXT RECORD  02790000
         BC    15,READ                                            0125  02800000
*       END;                                                            02810000
*   /* TEST IF INPUT RECORD TYPE IS CONTROL-EOM                         02820000
*   IF IDENT1=CONTEOM                   /* IF RECORD ID IS '00001101'   02830000
*     THEN                              /* THEN EOM HAS BEEN REACHED    02840000
@9F0     CLC   0(1,@3),CONTEOM                                    0127  02850000
*       GO TO NUCCONV;                  /* GO TO CONVERT NUC ADDRESSES  02860000
         BC    08,NUCCONV                                         0128  02870000
*   /* TEST IF INPUT RECORD TYPE IS SYM                                 02880000
*   IF IDENT1=SYM                       /* IF RECORD ID IS '01000000'   02890000
*     THEN                              /* THEN                         02900000
         CLC   0(1,@3),SYM                                        0129  02910000
*       GO TO READ;                     /* GO TO READ ANOTHER RECORD    02920000
         BC    08,READ                                            0130  02930000
*   /* TEST IF INPUT RECORD TYPE IS SCATTER/TRANSLATION                 02940000
*   IF IDENT1=SCATRANS                  /* IF RECORD IS '00010000'      02950000
*     THEN                              /* THEN                         02960000
         CLC   0(1,@3),SCATRANS                                   0131  02970000
         BC    07,@9EF                                            0131  02980000
*       /* TEST IF A NUCLEUS IS BEING MAPPED                            02990000
*       IF NUCMAP='0'B                  /* IF NUCMAP SWITCH IS OFF      03000000
*         THEN                          /* THEN THE LOAD MOD NOT A NUC  03010000
         TM    SWITCHES+2,B'00001000'                             0132  03020000
*           GO TO READ;                 /* GO TO READ ANOTHER RECORD    03030000
         BC    08,READ                                            0133  03040000
*         ELSE                          /* ELSE LOAD MOD IS A NUCLEUS   03050000
*           DO;                                                         03060000
*             /* TEST IF THIS IS FIRST SCAT/TRAN READ                   03070000
*             IF TRSCREC1='1'B          /* IF TRSCREC1 SWITCH IS ON     03080000
*               THEN                    /* THEN                         03090000
         TM    SWITCHES+2,B'00000100'                             0135  03100000
         BC    12,@9EE                                            0135  03110000
*                 DO;                   /* EXECUTE FOLLOWING CODE       03120000
*                   /* CHECK FOR VALID CESD ORDER                       03130000
*                   IF CESDTAB(1,3:10)=IEAANIP0  /* 1ST SYMBOL NIP ?    03140000
*                      & CESDTAB(1,1:2)=1  /* WITH CESDID = 1  YM04682  03150000
*                      | CESDTAB(1,3:10)=IEAVNIP0  /* OR VNIP? YM04682  03160000
*                      & CESDTAB(1,1:2)=1  /* AND ITS CESDID IS 1       03170000
*                     THEN                                              03180000
         L     @7,CETABPTR                                        0137  03190000
         CLC   2(8,@7),IEAANIP0                                   0137  03200000
         BC    07,@9ED                                            0137  03210000
         CLC   0(2,@7),@D3                                        0137  03220000
         BC    08,@9EC                                            0137  03230000
@9ED     L     @7,CETABPTR                                        0137  03240000
         CLC   2(8,@7),IEAVNIP0                                   0137  03250000
         BC    07,@9EB                                            0137  03260000
         CLC   0(2,@7),@D3                                        0137  03270000
         BC    07,@9EA                                            0137  03280000
*                       GO TO READB;         /* CONTINUE                03290000
         BC    08,READB                                           0138  03300000
*                     ELSE;                  /* NO,WRONG CESD           03310000
@9EA     EQU   *                                                  0139  03320000
*                       ERRORS(29)='1'B;     /* INVALID CESD ORDER      03330000
@9EB     L     @7,PARMPTR                                         0140  03340000
         OI    35(@7),B'00001000'                                 0140  03350000
*                       NUCMAP='0'B;         /* TURN NUCMAP SWITCH OFF  03360000
         NI    SWITCHES+2,B'11110111'                             0141  03370000
*                       GO TO READ;          /* GO READ ANOTHER RECORD  03380000
         BC    15,READ                                            0142  03390000
*                 END;                                                  03400000
*               ELSE                    /* ELSE NOT FIRST TIME THRU     03410000
*                 GO TO READB1;         /* CONTINUE BUILDING TABLES     03420000
*         /************************************************************ 03430000
* READB:  /* BRANCH HERE WHEN FIRST CSECT IN CESD TABLE IS IEAANIPO     03440000
*         /************************************************************ 03450000
*         TRNTABAD=CURRCESD+18;         /* INIT TRNTABAD                03460000
@9E9     EQU   *                                                  0145  03470000
READB    LA    @F,18                                              0145  03480000
         AR    @F,@5                                              0145  03490000
         ST    @F,TRNTABAD                                        0145  03500000
*         CESDEND=TRNTABAD;             /* INIT CESDEND                 03510000
         MVC   CESDEND(4),TRNTABAD                                0146  03520000
*         SCTTABAD=TRNTABAD+TRANDCNT-2; /* INIT SCTTABAD                03530000
         LH    @F,@D4                                             0147  03540000
         L     @7,PARMPTR                                         0147  03550000
         AH    @F,30(0,@7)                                        0147  03560000
         A     @F,TRNTABAD                                        0147  03570000
         ST    @F,SCTTABAD                                        0147  03580000
*         ADDRTBAD=SCTTABAD+SCATDCNT-4; /* GET ADDR OF ADDR TABLE       03590000
         LH    @F,@D5                                             0148  03600000
         AH    @F,28(0,@7)                                        0148  03610000
         A     @F,SCTTABAD                                        0148  03620000
         ST    @F,ADDRTBAD                                        0148  03630000
*         RLDTABAD=ADDRTBAD+SCATDCNT-4; /* INIT RLDTABAD                03640000
         LH    @F,@D5                                             0149  03650000
         AH    @F,28(0,@7)                                        0149  03660000
         A     @F,ADDRTBAD                                        0149  03670000
         ST    @F,RLDTABAD                                        0149  03680000
*         CURRLD=RLDTABAD;              /* INIT CURRLD                  03690000
         LR    @6,@F                                              0150  03700000
*         IF RLDTABAD>=HIGHADDR         /* WILL ENTRIES OVERFLOW TABLE  03710000
*           THEN                        /* YES                          03720000
         L     @F,HIGHADDR                                        0151  03730000
         C     @F,RLDTABAD                                        0151  03740000
         BC    02,@9E8                                            0151  03750000
*             DO;                                                       03760000
*               ERRORS(4)='1'B;         /* INDICATE TABLE OVERFLOW      03770000
         OI    32(@7),B'00010000'                                 0153  03780000
*               GO TO ABORT;            /* ABORT (MESSAGE HMB104I)      03790000
         BC    15,ABORT                                           0154  03800000
*             END;                                                      03810000
*           ELSE                        /* ENTRIES WILL NOT OVERFLOW    03820000
*             DO;                                                       03830000
*               CURRTRSC=ADDRTBAD-4;    /* INIT SCAT/TRANTAB LINE PTR   03840000
@9E8     L     @F,ADDRTBAD                                        0157  03850000
         SH    @F,@D6                                             0157  03860000
         ST    @F,CURRTRSC                                        0157  03870000
*               TRSCREC1='0'B;          /* AVOID ABOVE CODE NEXT TIME   03880000
         NI    SWITCHES+2,B'11111011'                             0158  03890000
*             END;                                                      03900000
*             /******************************************************** 03910000
*             /* BUILD SCATTAB AND TRANTAB (SCATTAB IS BUILT FIRST)     03920000
*             /* IF SCATTAB IS BUILT THEN SWITCH TO A DECREMENT OF      03930000
*             /* TWO AND DO NOT PUT ITEM IN TABLE THIS TIME. IF         03940000
*             /* TRANTAB FINISHED THEN DO NOT PUT ITEM IN TABLE BUT     03950000
*             /* DECREMENT COUNTER SO THAT THIS LOOP WILL FINISH.       03960000
*             /******************************************************** 03970000
* READB1:     DO I=COUNT4 TO 1 BY -INCR; /* LOOP THRU LOAD MOD RECORD   03980000
@9E7     EQU   *                                                  0160  03990000
READB1   LH    @F,2(0,@3)                                         0160  04000000
         LR    @2,@F                                              0160  04010000
         BC    15,@DO9E5                                          0160  04020000
*               TRSCDCNT=TRSCDCNT-INCR; /* DECREMENT COUNTER OF         04030000
@DO9E6   LH    @F,TRSCDCNT                                        0161  04040000
         SH    @F,INCR                                            0161  04050000
         STH   @F,TRSCDCNT                                        0161  04060000
*                                       /* SCATTER/TRANSLATION DATA     04070000
*               /* TEST IF SCATTAB OR TRANTAB IS FINISHED BEING BUILT   04080000
*               IF TRSCDCNT=TRANDCNT    /* IF SCATTAB BUILT             04090000
*                  | TRSCDCNT=0         /* OR IF TRANTAB BUILT          04100000
*                 THEN                  /* THEN DO NOT PUT ITEM IN TBL  04110000
         L     @7,PARMPTR                                         0162  04120000
         LH    @F,30(0,@7)                                        0162  04130000
         CH    @F,TRSCDCNT                                        0162  04140000
         BC    08,@9E2                                            0162  04150000
         SR    @F,@F                                              0162  04160000
         CH    @F,TRSCDCNT                                        0162  04170000
         BC    07,@9E1                                            0162  04180000
*                   DO;                 /* THIS TURN BUT STILL DECR     04190000
*                     INCR=2;           /* SET INCR TO BUILD TRANTAB    04200000
@9E2     LA    @F,2                                               0164  04210000
         STH   @F,INCR                                            0164  04220000
*                     CURRTRSC=CURRTRSC+2;  /* INCR TBL LINE PTR        04230000
         A     @F,CURRTRSC                                        0165  04240000
         ST    @F,CURRTRSC                                        0165  04250000
*                     I=I-2;               /* DECR I BY 2               04260000
         SH    @2,@D7                                             0166  04270000
*                     GO TO READC;      /* DO NOT PUT ITEM IN TABLE     04280000
         BC    15,READC                                           0167  04290000
*                   END;                                                04300000
*                 ELSE                  /* PUT ITEM IN TABLE & INCR PTR 04310000
*                   TRSCITEM(1:INCR)=TRSCDATA(I-INCR,2:INCR+1);         04320000
@9E1     LH    @7,INCR                                            0169  04330000
         LCR   @7,@7                                              0169  04340000
         AR    @7,@2                                              0169  04350000
         BCTR  @7,0                                               0169  04360000
         LA    @E,5(@7,@3)                                        0169  04370000
         LH    @8,INCR                                            0169  04380000
         BCTR  @8,0                                               0169  04390000
         L     @7,CURRTRSC                                        0169  04400000
         LR    @A,@7                                              0169  04410000
         EX    @8,@MVC                                            0169  04420000
*                   CURRTRSC=CURRTRSC-INCR; /* LOC NEXT LINE IN TABLE   04430000
@9E0     L     @F,CURRTRSC                                        0170  04440000
         SH    @F,INCR                                            0170  04450000
         ST    @F,CURRTRSC                                        0170  04460000
* READC:            /* BRANCH HERE TO AVOID ENTERING SCAT OR TRAN ITEM  04470000
*                   /* IN TABLE.                                        04480000
*             END;                      /* LOOP TO BUILD TABLE          04490000
*              GO TO READ;              /* READ NEXT RECORD             04500000
READC    SH    @2,INCR                                            0171  04510000
@DO9E5   CH    @2,@D3                                             0171  04520000
         BC    10,@DO9E6                                          0171  04530000
         BC    15,READ                                            0172  04540000
*           END;                                                        04550000
*   /* TEST IF INPUT RECORD TYPE IS CONTROL&RLD                         04560000
*      OR CONTROL&RLD-EOS OR CONTROL&RLD-EOM                            04570000
*   IF IDENT1=CONTRLD                   /* IF RECORD ID IS '00000011'   04580000
*      | IDENT1=CRLDEOS                 /* OR IF ID IS '00000111'       04590000
*      | IDENT1=CRLDEOM                 /* OR IF ID IS '00001111'       04600000
*     THEN                              /* THEN                         04610000
@9EF     CLC   0(1,@3),CONTRLD                                    0174  04620000
         BC    08,@9DF                                            0174  04630000
         CLC   0(1,@3),CRLDEOS                                    0174  04640000
         BC    08,@9DE                                            0174  04650000
         CLC   0(1,@3),CRLDEOM                                    0174  04660000
         BC    07,@9DD                                            0174  04670000
*       DO;                             /* DON'T PROCESS NEXT RECORD    04680000
@9DE     EQU   *                                                  0175  04690000
*         TEXTNEXT='1'B;                /* INDICATE NEXT RECORD IS TEXT 04700000
@9DF     OI    SWITCHES,B'10000000'                               0176  04710000
*         GO TO READ2;                  /* GO TO PUT RLD DATA IN TABLE  04720000
         BC    15,READ2                                           0177  04730000
*       END;                                                            04740000
*   /* TEST IF INPUT RECORD TYPE IS RLD OR RLD-EOS OR RLD-EOM           04750000
*   IF IDENT1=RLD                       /* IF RECORD ID IS '00000010'   04760000
*      | IDENT1=RLDEOS                  /* OR IF ID IS '00000110'       04770000
*      | IDENT1=RLDEOM                  /* OR IF ID IS '00001110'       04780000
*      THEN                             /* THEN                         04790000
@9DD     CLC   0(1,@3),RLD                                        0179  04800000
         BC    08,@9DC                                            0179  04810000
         CLC   0(1,@3),RLDEOS                                     0179  04820000
         BC    08,@9DB                                            0179  04830000
         CLC   0(1,@3),RLDEOM                                     0179  04840000
         BC    07,@9DA                                            0179  04850000
* READ2: /* BRANCH HERE WHEN CONTROL/RLD (-EOS, EOM) RECORD IS ENCOUNT- 04860000
*           ERED.  FOLLOWING CODE ENTERS DATA FROM IT INTO RLD TABLE.   04870000
*       DO;                             /* PROCESS RLD DATA             04880000
@9DB     EQU   *                                                  0180  04890000
@9DC     EQU   *                                                  0180  04900000
*         R=1;                          /* INIT RLDATA R PTR SUBSCRIPT  04910000
READ2    LA    @F,1                                               0181  04920000
         STH   @F,R                                               0181  04930000
*         P=3;                          /* INIT RLDATA P PTR SUBSCRIPT  04940000
         LA    @F,3                                               0182  04950000
         STH   @F,P                                               0182  04960000
*         F=5;                          /* INIT RLDATA FLAG SUBSCRIPT   04970000
         LA    @F,5                                               0183  04980000
         STH   @F,F                                               0183  04990000
*         A=6;                          /* INIT RLDATA ADDR SUBSCRIPT   05000000
         LA    @F,6                                               0184  05010000
         STH   @F,A                                               0184  05020000
*         DATACNT=COUNT3;               /* SET DATA COUNT FOR THIS REC  05030000
         MVC   DATACNT(2),6(@3)                                   0185  05040000
* READ3:  /* BRANCH HERE WHEN ITEM FROM CURRENT RLD RECORD IN PROCESS   05050000
*            ISN'T ENTERED INTO RLD TABLE.  FOLLOWING CODE TRIES TO     05060000
*            ENTER NEXT ITEM FROM RLD RECORD INTO RLD TABLE.            05070000
*         /* TEST IF ALL RLD DATA FROM THIS RECORD HAS BEEN PROCESSED   05080000
*         IF DATACNT=0                  /* IF DATA COUNT IS 0           05090000
*           THEN                        /* THEN                         05100000
READ3    SR    @F,@F                                              0186  05110000
         CH    @F,DATACNT                                         0186  05120000
*             GO TO READ5;              /* GO TO TEST FOR MORE INPUT    05130000
         BC    08,READ5                                           0187  05140000
*         /* TEST IF FOLLOWING RLD ITEM HAS SAME R AND P POINTERS       05150000
*         IF RLDATA(F,8)='1'B           /* IF CHAINED BIT IS ON         05160000
*           THEN                        /* THEN                         05170000
         LH    @7,F                                               0188  05180000
         BCTR  @7,0                                               0188  05190000
         LA    @A,16(@7,@3)                                       0188  05200000
         TM    0(@A),B'00000001'                                  0188  05210000
         BC    12,@9D9                                            0188  05220000
*             DATACNT=DATACNT-4;        /* DECREMENT DATA COUNT BY 4    05230000
         LH    @F,DATACNT                                         0189  05240000
         SH    @F,@D6                                             0189  05250000
         STH   @F,DATACNT                                         0189  05260000
         BC    15,@9D8                                            0190  05270000
*           ELSE                        /* ELSE RLD ITEMS NOT CHAINED   05280000
*             DATACNT=DATACNT-8;        /* DECREMENT DATA COUNT BY 8    05290000
@9D9     LH    @F,DATACNT                                         0190  05300000
         SH    @F,@D8                                             0190  05310000
         STH   @F,DATACNT                                         0190  05320000
*         /* TEST IF RLD DATA SHOULD BE PUT INTO RLD TABLE              05330000
*         IF RLDATA(R,1:16)=0           /* IF R PTR IS 0                05340000
*            | RLDATA(R,1:16)=RLDATA(P,1:16) /* OR SAME AS P PTR        05350000
*           THEN                        /* THEN DON'T PUT DATA INTO TAB 05360000
@9D8     LH    @8,R                                               0191  05370000
         BCTR  @8,0                                               0191  05380000
         LA    @A,16(@8,@3)                                       0191  05390000
         CLC   0(2,@A),@D1+2                                      0191  05400000
         BC    08,@9D7                                            0191  05410000
         LH    @7,P                                               0191  05420000
         BCTR  @7,0                                               0191  05430000
         LA    @E,16(@7,@3)                                       0191  05440000
         CLC   0(2,@A),0(@E)                                      0191  05450000
         BC    07,@9D6                                            0191  05460000
* READ4:      /* BRANCH HERE AFTER ENTERING RLD DATA INTO TABLE.        05470000
*                FOLLOWING CODE INCREMENTS SUBSCRIPTS.                  05480000
*             DO;                       /* INCREMENT SUBSCRIPTS         05490000
@9D7     EQU   *                                                  0192  05500000
*               /* TEST IF FOLLOWING RLD ITEM HAS SAME R AND P POINTERS 05510000
*               IF RLDATA(F,8)='1'B     /* IF CHAINED BIT IS ON         05520000
*                 THEN                  /* THEN                         05530000
READ4    LH    @7,F                                               0193  05540000
         BCTR  @7,0                                               0193  05550000
         LA    @A,16(@7,@3)                                       0193  05560000
         TM    0(@A),B'00000001'                                  0193  05570000
         BC    12,@9D5                                            0193  05580000
*                   DO;                 /* INCREMENT SUBSCRIPTS F AND A 05590000
*                     F=F+4;            /* INCR FLAG SUBSCRIPT          05600000
         LA    @F,4                                               0195  05610000
         AH    @F,F                                               0195  05620000
         STH   @F,F                                               0195  05630000
*                     A=A+4;            /* INCR ADDRESS SUBSCRIPT       05640000
         LA    @F,4                                               0196  05650000
         AH    @F,A                                               0196  05660000
         STH   @F,A                                               0196  05670000
*                     GO TO READ3;      /* TRY AGAIN TO PUT ITEM IN TAB 05680000
         BC    15,READ3                                           0197  05690000
*                   END;                                                05700000
*                 ELSE                  /* ELSE RLD ITEMS NOT CHAINED   05710000
*                   DO;                 /* INCREMENT RLD SUBSCRIPTS     05720000
*                     R=F+4;            /* INCR R PTR SUBSCRIPT         05730000
@9D5     LA    @F,4                                               0200  05740000
         AH    @F,F                                               0200  05750000
         STH   @F,R                                               0200  05760000
*                     P=F+6;            /* INCR P PTR SUBSCRIPT         05770000
         LA    @F,6                                               0201  05780000
         AH    @F,F                                               0201  05790000
         STH   @F,P                                               0201  05800000
*                     F=F+8;            /* INCR FLAG SUBSCRIPT          05810000
         LA    @F,8                                               0202  05820000
         AH    @F,F                                               0202  05830000
         STH   @F,F                                               0202  05840000
*                     A=A+8;            /* INCR ADDRESS SUBSCRIPT       05850000
         LA    @F,8                                               0203  05860000
         AH    @F,A                                               0203  05870000
         STH   @F,A                                               0203  05880000
*                     GO TO READ3;      /* TRY AGAIN TO PUT ITEM IN TAB 05890000
         BC    15,READ3                                           0204  05900000
*                   END;                                                05910000
*             END;                                                      05920000
*           ELSE                        /* ELSE R PTR NOT 0 OR = P PTR  05930000
*             DO;                       /* PUT RLD DATA INTO TABLE      05940000
*               /* TEST IF RLD DATA SHOULD BE PUT INTO TABLE            05950000
*               IF RLDATA(F,3)='1'B     /* IF TYPE IS PR DISP VALUE     05960000
*                                          OR PR CUM DISP VALUE         05970000
*                 THEN                  /* THEN DON'T PUT DATA INTO TAB 05980000
@9D6     LH    @7,F                                               0208  05990000
         BCTR  @7,0                                               0208  06000000
         LA    @A,16(@7,@3)                                       0208  06010000
         TM    0(@A),B'00100000'                                  0208  06020000
*                   GO TO READ4;        /* GO TO INCREMENT SUBSCRIPTS   06030000
         BC    01,READ4                                           0209  06040000
*               /* TEST IF RLD DATA SHOULD BE PUT INTO TABLE            06050000
*               IF RLDATA(F,5)='0'B     /* IF TYPE IS TWO BYTE          06060000
*                 THEN                  /* THEN DON'T PUT DATA INTO TAB 06070000
         TM    0(@A),B'00001000'                                  0210  06080000
*                   GO TO READ4;        /* GO TO INCREMENT SUBSCRIPTS   06090000
         BC    08,READ4                                           0211  06100000
*               /* TEST IF RLD TABLE HAS ROOM FOR RLD DATA              06110000
*               IF CURRLD>HIGHADDR-8    /* IF TABLE IS FULL             06120000
*                 THEN                  /* THEN                         06130000
         L     @F,HIGHADDR                                        0212  06140000
         SH    @F,@D8                                             0212  06150000
         CR    @F,@6                                              0212  06160000
         BC    10,@9D2                                            0212  06170000
*                   DO;                 /* PROCESS ERROR                06180000
*                     ERRORS(4)='1'B;   /* INDICATE TABLE OVERFLOW      06190000
         L     @8,PARMPTR                                         0214  06200000
         OI    32(@8),B'00010000'                                 0214  06210000
*                     GO TO ABORT;      /* ABORT (MESSAGE HMB104I)      06220000
         BC    15,ABORT                                           0215  06230000
*                   END;                                                06240000
*               EREFPRES='1'B;          /* INDIC EXTERNAL REF PRESENT   06250000
@9D2     OI    SWITCHES+1,B'00000010'                             0217  06260000
*               RPTR=RLDATA(R,1:16);    /* PUT R PTR INTO TABLE         06270000
         LH    @7,R                                               0218  06280000
         BCTR  @7,0                                               0218  06290000
         LA    @A,16(@7,@3)                                       0218  06300000
         MVC   @TEMP2+2(2),0(@A)                                  0218  06310000
         L     @F,@TEMP2                                          0218  06320000
         STH   @F,0(0,@6)                                         0218  06330000
*               PPTR=RLDATA(P,1:16);    /* PUT P PTR INTO TABLE         06340000
         LH    @8,P                                               0219  06350000
         BCTR  @8,0                                               0219  06360000
         LA    @A,16(@8,@3)                                       0219  06370000
         MVC   @TEMP2+2(2),0(@A)                                  0219  06380000
         L     @F,@TEMP2                                          0219  06390000
         STH   @F,2(0,@6)                                         0219  06400000
*               RLDFLAG=RLDATA(F);      /* PUT FLAGS INTO TABLE         06410000
         LH    @7,F                                               0220  06420000
         BCTR  @7,0                                               0220  06430000
         LA    @E,16(@7,@3)                                       0220  06440000
         MVC   4(1,@6),0(@E)                                      0220  06450000
*               RLDADDR=RLDATA(A,1:24); /* PUT ADDRESS INTO TABLE       06460000
         LH    @8,A                                               0221  06470000
         BCTR  @8,0                                               0221  06480000
         LA    @A,16(@8,@3)                                       0221  06490000
         MVC   @TEMP3+1(3),0(@A)                                  0221  06500000
         L     @F,@TEMP3                                          0221  06510000
         ST    @F,@TEMP4                                          0221  06520000
         MVC   5(3,@6),@TEMP4+1                                   0221  06530000
*               NUMRLDS=NUMRLDS+1;      /* INCR CNT OF RLD TAB ENTRIES  06540000
         LA    @F,1                                               0222  06550000
         A     @F,NUMRLDS                                         0222  06560000
         ST    @F,NUMRLDS                                         0222  06570000
*               CURRLD=CURRLD+8;        /* LOC NEXT EMPTY RLD TAB LINE  06580000
         LA    @6,8(0,@6)                                         0223  06590000
*               GO TO READ4;            /* GO TO INCREMENT SUBSCRIPTS   06600000
         BC    15,READ4                                           0224  06610000
*             END;                                                      06620000
*       END;                                                            06630000
@9D3     EQU   *                                                  0226  06640000
*   /* ALL LOAD MODULE RECORD TYPES HAVE NOW BEEN TESTED FOR            06650000
*   ERRORS(2)='1'B;                     /* ERROR-INVALID LMOD REC TYPE  06660000
@9DA     L     @7,PARMPTR                                         0227  06670000
         OI    32(@7),B'01000000'                                 0227  06680000
*   GO TO ABORT;                        /* ABORT (MESSAGE HMB102I)      06690000
         BC    15,ABORT                                           0228  06700000
* READ5: /* BRANCH HERE AFTER AN RLD RECORD IS PROCESSED.  FOLLOWING    06710000
*           CODE TESTS FOR END OF INPUT.                                06720000
*   /* TEST IF INPUT RECORD TYPE IS RLD-EOM OR CONTROL&RLD-EOM          06730000
*   IF IDENT1=RLDEOM                    /* IF RECORD ID IS '00001110'   06740000
*      | IDENT1=CRLDEOM                 /* OR IF ID IS '00001111'       06750000
*     THEN                              /* THEN                         06760000
READ5    CLC   0(1,@3),RLDEOM                                     0229  06770000
         BC    08,@9D1                                            0229  06780000
         CLC   0(1,@3),CRLDEOM                                    0229  06790000
         BC    07,@9D0                                            0229  06800000
*       GO TO NUCCONV;                  /* GO TO CONVERT NUC ADDRESSES  06810000
         BC    08,NUCCONV                                         0230  06820000
*     ELSE                              /* ELSE EOM NOT YET REACHED     06830000
*       GO TO READ;                     /* GO TO READ ANOTHER RECORD    06840000
         BC    15,READ                                            0231  06850000
*                                                                       06860000
* /******************************************************************** 06870000
* /*   THE FOLLOWING SECTION OF CODE CONVERTS ALL CESD TABLE AND RLD    06880000
* /*   TABLE ADDRESSES POST-IPL VALUES WHEN A NUCLEUS IS BEING MAPPED.  06890000
* /*   AN ALGORITHM IS USED TO MOVE IEAQFX00 TO LOCATION 00 AND         06900000
* /*   IEAANIP0 TO THE HIGH END OF THE NUCLEUS WHILE THE REST OF THE    06910000
* /*   CONTROL SECTIONS KEEP THEIR SAME ORDER (BUT WITH NEW ADDRESSES)  06920000
* /*   BETWEEN THESE TWO CONTROL SECTIONS. A FEW TABLE INITIALIZATIONS  06930000
* /*   ARE ALSO PERFORMED HERE. THIS SECTION IS ENTERED AFTER ALL       06940000
* /*   LOAD MODULE RECORDS HAVE BEEN READ.                              06950000
* /******************************************************************** 06960000
* NUCCONV:                                                              06970000
*                                                                       06980000
*   CESDEND=CURRCESD;                   /* INIT CESDEND                 06990000
NUCCONV  ST    @5,CESDEND                                         0232  07000000
*   IF NUCMAP='0'B                      /* NUCLEUS BEING MAPPED         07010000
*     THEN                              /* NO                           07020000
         TM    SWITCHES+2,B'00001000'                             0233  07030000
         BC    05,@9CF                                            0233  07040000
*       RLDTABAD=CESDEND;               /* INIT RLD TABLE ADDR          07050000
         MVC   RLDTABAD(4),CESDEND                                0234  07060000
*     ELSE;                             /* NULL ELSE                    07070000
@9CF     EQU   *                                                  0235  07080000
*   RLDEND=NUMRLDS*8+RLDTABAD;          /* INIT RLDEND                  07090000
@9CE     LA    @F,8                                               0236  07100000
         M     @E,NUMRLDS                                         0236  07110000
         A     @F,RLDTABAD                                        0236  07120000
         ST    @F,RLDEND                                          0236  07130000
*   /* TEST IF THERE IS ENOUGH ROOM TO BUILD THE INDEX TABLE            07140000
*   IF RLDEND+CESDTBID*2>HIGHADDR-2     /* IF INDEXES WILL OVERFLOW TAB 07150000
*     THEN                              /* THEN                         07160000
         LH    @E,CESDTBID                                        0237  07170000
         AR    @E,@E                                              0237  07180000
         A     @E,RLDEND                                          0237  07190000
         L     @7,HIGHADDR                                        0237  07200000
         SH    @7,@D7                                             0237  07210000
         CR    @E,@7                                              0237  07220000
         BC    12,@9CD                                            0237  07230000
*       DO;                             /* PROCESS THE ERROR            07240000
*         ERRORS(4)='1'B;               /* INDICATE TABLE OVERFLOW      07250000
         L     @7,PARMPTR                                         0239  07260000
         OI    32(@7),B'00010000'                                 0239  07270000
*         GO TO ABORT;                  /* ABORT (MESSAGE HMB104I)      07280000
         BC    15,ABORT                                           0240  07290000
*       END;                                                            07300000
*     ELSE                              /* ELSE INDEXTAB CAN BE BUILT   07310000
*       INDTABAD=RLDEND;                /* INIT INDTABAD                07320000
@9CD     MVC   INDTABAD(4),RLDEND                                 0242  07330000
*   /* TEST IF LOAD MODULE IS A NUCLEUS                                 07340000
*   IF NUCMAP='0'B                      /* MAPPING THE NUCLEUS ?        07350000
*     THEN                              /* NO                           07360000
@9CC     TM    SWITCHES+2,B'00001000'                             0243  07370000
*       GO TO NCSORT;                   /* DON'T DO NUCLEUS MAP         07380000
         BC    08,NCSORT                                          0244  07390000
*     ELSE;                             /* NULL ELSE                    07400000
*                                                                       07410000
*   IF LMODNAME(1:7)=IEANUC0            /* IF NAME IS IEANUC0X          07420000
*     THEN                              /* THEN                         07430000
         L     @7,PARMPTR                                         0246  07440000
         CLC   36(7,@7),IEANUC0                                   0246  07450000
         BC    07,@9CB                                            0246  07460000
*       DO;                             /* CHECK THE FOLLOWING          07470000
*         RESTRICT(8);                  /* RESTRICT REGISTER 8          07480000
*         GEN;                                                          07490000
         LA    8,CVTPTR                GET LOCATION 10 HEX      YM2968  07500000
         L     8,0(0,8)                GET ADDRESS OF CVT               07510000
         USING CVTMAP,8                SET BASE OF CVT MAP      YM2968  07520000
         L 8,CVTEXT2                   GET ADDR OF EXTENSION    YM2968  07530000
         USING CVTXTNT2,8              SET BASE OF CVT EXT.     YM2968  07540000
         MVC   TEMPAREA(1),CVTNUCLS    GET NUCLEUS NUMBER       YM2968  07550000
         DS    0H                                                       07560000
*         RELEASE (8);                                                  07570000
*         /* TEST IF NUCLEUS NUMBER REQUESTED WAS IPL'D                 07580000
*         IF LMODNAME(8)=TEMPAREA(1)    /* IF USER'S NUC SAME AS CVT'S  07590000
*           THEN                        /* THEN                         07600000
         CLC   43(1,@7),TEMPAREA                                  0251  07610000
*             GO TO NUCCONV1;           /* GO TO CHECK CESD ORDER       07620000
         BC    08,NUCCONV1                                        0252  07630000
*           ELSE;                       /* NULL ELSE                    07640000
*             ERRORS(30)='1'B;          /* ELSE USER'S NUC NOT IPL'D    07650000
         OI    35(@7),B'00000100'                                 0254  07660000
         BC    15,@9CA                                            0256  07670000
*      END;                                                             07680000
*        ELSE;                          /* NULL ELSE                    07690000
@9CB     EQU   *                                                  0256  07700000
*                                                                       07710000
*    /***************************************************************** 07720000
*    /* BRANCH HERE WHEN NUCLEUS FOR WHICH LISTLOAD IS REQUESTED IS     07730000
*    /* THE ONE THAT WAS IPL'D.  FOLLOWING CODE CHECKS FOR PROPER       07740000
*    /* CESD SEQUENCE.                                                  07750000
*    /***************************************************************** 07760000
* NUCCONV1:                                                             07770000
*         IF CESDTAB(1,3:10)=IEAANIP0   /* IF 1ST SYMBOL IS IEAANIP0    07780000
*           | CESDTAB(1,3:10)=IEAVNIP0  /* OR IEAVNIP0                  07790000
*           THEN                        /* THEN                         07800000
@9CA     EQU   *                                                  0257  07810000
NUCCONV1 L     @7,CETABPTR                                        0257  07820000
         CLC   2(8,@7),IEAANIP0                                   0257  07830000
         BC    08,@9C9                                            0257  07840000
         CLC   2(8,@7),IEAVNIP0                                   0257  07850000
         BC    07,@9C8                                            0257  07860000
*             GO TO NUCCONV2;           /* GO TO START CONVERTING       07870000
         BC    08,NUCCONV2                                        0258  07880000
*           ELSE;                       /* NULL ELSE                    07890000
*         ERRORS(29)='1'B;              /* INVALID CESD ORDER (HMB129I) 07900000
@9C8     L     @7,PARMPTR                                         0260  07910000
         OI    35(@7),B'00001000'                                 0260  07920000
*         NUCMAP='0'B;                  /* TURN NUCMAP SWITCH OFF       07930000
         NI    SWITCHES+2,B'11110111'                             0261  07940000
*         GO TO NCSORT;                 /* DON'T DO NUCLEUS MAP         07950000
         BC    15,NCSORT                                          0262  07960000
*                                                                       07970000
*    /***************************************************************** 07980000
*    /* BRANCH HERE WHEN FIRST CSECT IN CESD IS IEAANIP0.               07990000
*    /* FOLLOWING CODE DOES SOME INITIALIZATIONS.                       08000000
*    /***************************************************************** 08010000
* NUCCONV2:                                                             08020000
*    SCATWDCT=(SCATDCNT/4)-1;           /* GET WORD COUNT FOR COUNTER   08030000
NUCCONV2 L     @7,PARMPTR                                         0263  08040000
         LH    @E,28(0,@7)                                        0263  08050000
         SRDA  @E,32                                              0263  08060000
         LA    @0,4                                               0263  08070000
         DR    @E,@0                                              0263  08080000
         BCTR  @F,0                                               0263  08090000
         ST    @F,SCATWDCT                                        0263  08100000
*    IF NUCMAP^='1'B                    /* IF NUCLEUS NOT BEING MAPPED  08110000
*      THEN                             /* THEN                         08120000
         TM    SWITCHES+2,B'00001000'                             0264  08130000
*        GO TO NCSORT;                  /* GO SORT CESD TABLE ENTRIES   08140000
         BC    12,NCSORT                                          0265  08150000
*      ELSE;                            /* NULL ELSE                    08160000
*                                                                       08170000
*   /*                   THE FOLLOWING LINES ARE CHANGED FOR PTM YM2968 08180000
*                                                                       08190000
*    /* FLAG ALL ENTRIES IN ADDR TABLE                                  08200000
*    DO I=1 TO SCATWDCT;                /* LOOP THRU ADDR TABLE         08210000
         LA    @2,1                                               0267  08220000
         BC    15,@DO9C6                                          0267  08230000
*      ADDRTBL(I)='70000000'X;          /* FLAG ALL ENTRIES             08240000
@DO9C7   LR    @7,@2                                              0268  08250000
         BCTR  @7,0                                               0268  08260000
         SLA   @7,2                                               0268  08270000
         L     @8,ADDRTBAD                                        0268  08280000
         LA    @A,0(@7,@8)                                        0268  08290000
         MVC   0(4,@A),@X4                                        0268  08300000
*    END;                                                               08310000
*                                                                       08320000
*    /* FOLLOWING CODE DOES SOME INITIALIZING                           08330000
*    LASTAD=0;                          /* SET LAST ADDR TO ZERO        08340000
         AH    @2,@D3                                             0269  08350000
@DO9C6   C     @2,SCATWDCT                                        0269  08360000
         BC    12,@DO9C7                                          0269  08370000
         SR    @F,@F                                              0270  08380000
         ST    @F,LASTAD                                          0270  08390000
*    SIZEN=CESDTAB(2,16:18);            /* GET SIZE OF QFX              08400000
         L     @7,CETABPTR                                        0271  08410000
         MVC   @TEMP3+1(3),33(@7)                                 0271  08420000
         L     @F,@TEMP3                                          0271  08430000
         ST    @F,SIZEN                                           0271  08440000
*    REMAINDR=SIZEN//8;                 /* COMPUT REMAINDER             08450000
         LR    @E,@F                                              0272  08460000
         SRDA  @E,32                                              0272  08470000
         LA    @0,8                                               0272  08480000
         DR    @E,@0                                              0272  08490000
         ST    @E,REMAINDR                                        0272  08500000
*    IF REMAINDR^=0                     /* CHECK IF REMAINDER           08510000
*      THEN                             /* YES                          08520000
         SR    @F,@F                                              0273  08530000
         C     @F,REMAINDR                                        0273  08540000
         BC    08,@9C3                                            0273  08550000
*        SIZEN=SIZEN+8-REMAINDR;        /* GET ROUNDED LENGTH           08560000
         L     @F,REMAINDR                                        0274  08570000
         LCR   @F,@F                                              0274  08580000
         AH    @F,@D8                                             0274  08590000
         A     @F,SIZEN                                           0274  08600000
         ST    @F,SIZEN                                           0274  08610000
*      ELSE;                            /* NULL ELSE                    08620000
@9C3     EQU   *                                                  0275  08630000
*    TRCOUNT=(TRANDCNT-2)/2;            /* GET NO. OF TRANS ENTRIES     08640000
@9C2     LH    @E,@D4                                             0276  08650000
         L     @8,PARMPTR                                         0276  08660000
         AH    @E,30(0,@8)                                        0276  08670000
         SRDA  @E,32                                              0276  08680000
         LA    @0,2                                               0276  08690000
         DR    @E,@0                                              0276  08700000
         ST    @F,TRCOUNT                                         0276  08710000
*    Q=TRANTAB(1);                      /* GET TRANS PTR TO NIP         08720000
         L     @7,TRNTABAD                                        0277  08730000
         MVC   Q(2),0(@7)                                         0277  08740000
*    S=TRANTAB(2);                      /* GET TRANS PTR TO QFX         08750000
         MVC   S(2),2(@7)                                         0278  08760000
*    /***************************************************************** 08770000
*    /* BUILD ADDRESS TABLE TO BE USED WITH THE TRANSLATION TABLE       08780000
*    /***************************************************************** 08790000
*    DO N=3 TO TRCOUNT;                 /* LOOP THRU TRANSLATION TABLE  08800000
         LA    @F,3                                               0279  08810000
         BC    15,@DO9C0                                          0279  08820000
*    P=TRANTAB(N);                      /* GET TRANSLATION TABLE ENTRY  08830000
@DO9C1   LH    @7,N                                               0280  08840000
         BCTR  @7,0                                               0280  08850000
         SLA   @7,1                                               0280  08860000
         L     @8,TRNTABAD                                        0280  08870000
         LH    @F,0(@7,@8)                                        0280  08880000
         STH   @F,P                                               0280  08890000
*    IF P=0                             /* TRANSLATION TBL ENTRY = 0    08900000
*     | P=Q                             /* OR IEAVNIP0 PTR              08910000
*       | P=S                           /* OR IEAQFX00 PTR              08920000
*         THEN                          /* YES                          08930000
         SR    @F,@F                                              0281  08940000
         CH    @F,P                                               0281  08950000
         BC    08,@9BD                                            0281  08960000
         LH    @F,Q                                               0281  08970000
         CH    @F,P                                               0281  08980000
         BC    08,@9BC                                            0281  08990000
         LH    @F,S                                               0281  09000000
         CH    @F,P                                               0281  09010000
         BC    07,@9BB                                            0281  09020000
*            GO TO CHNXT;               /* BYPASS PROCESSING            09030000
         BC    08,CHNXT                                           0282  09040000
*         ELSE;                         /* NULL ELSE                    09050000
*           REMAINDR=SIZEN//8;          /* COMPUTE REMAINDER            09060000
@9BB     L     @E,SIZEN                                           0284  09070000
         SRDA  @E,32                                              0284  09080000
         LA    @0,8                                               0284  09090000
         DR    @E,@0                                              0284  09100000
         ST    @E,REMAINDR                                        0284  09110000
*           IF REMAINDR^=0              /* CHECK IF REMAINDER           09120000
*              THEN                     /* YES                          09130000
         SR    @F,@F                                              0285  09140000
         C     @F,REMAINDR                                        0285  09150000
         BC    08,@9BA                                            0285  09160000
*                SIZEN=SIZEN+8-REMAINDR;    /* GET ROUNDED LENGTH       09170000
         L     @F,REMAINDR                                        0286  09180000
         LCR   @F,@F                                              0286  09190000
         AH    @F,@D8                                             0286  09200000
         A     @F,SIZEN                                           0286  09210000
         ST    @F,SIZEN                                           0286  09220000
*              ELSE;                    /* NULL ELSE                    09230000
@9BA     EQU   *                                                  0287  09240000
*                                                                       09250000
*    IF ADDRTBL(P)='70000000'X          /* HAS ENTRY BEEN FILLED        09260000
*      THEN                             /* NO                           09270000
@9B9     LH    @7,P                                               0288  09280000
         BCTR  @7,0                                               0288  09290000
         SLA   @7,2                                               0288  09300000
         L     @8,ADDRTBAD                                        0288  09310000
         LA    @A,0(@7,@8)                                        0288  09320000
         CLC   0(4,@A),@X4                                        0288  09330000
         BC    07,@9B8                                            0288  09340000
*        DO;                                                            09350000
*        ADDRTBL(P)=SIZEN+LASTAD;       /* SET ENTRY TO SIZE OF         09360000
         L     @F,LASTAD                                          0290  09370000
         A     @F,SIZEN                                           0290  09380000
         ST    @F,@TEMP4                                          0290  09390000
         MVC   0(4,@A),@TEMP4                                     0290  09400000
*                                       /* PREVIOUS CSECT + LAST ADDR   09410000
*        LASTAD=ADDRTBL(P);             /* SET LASTAD TO SAME           09420000
         MVC   @TEMP4(4),0(@A)                                    0291  09430000
         L     @F,@TEMP4                                          0291  09440000
         ST    @F,LASTAD                                          0291  09450000
*        CESDTYP=CESDTAB(N,11);         /* GET CESD TYPE                09460000
         LH    @7,N                                               0292  09470000
         BCTR  @7,0                                               0292  09480000
         MH    @7,@D2                                             0292  09490000
         L     @8,CETABPTR                                        0292  09500000
         LA    @E,10(@7,@8)                                       0292  09510000
         MVC   CESDTYP(1),0(@E)                                   0292  09520000
*        IF CESDTYP(5:8)='0000'B        /* IS CESD TYPE SD              09530000
*         | CESDTYP(5:8)='0100'B        /* OR PC ?                      09540000
*         | CESDTYP(5:8)='0101'B        /* OR CM ?             ZA03162  09550000
*          THEN                         /* YES                          09560000
         TM    CESDTYP,B'00001111'                                0293  09570000
         BC    08,@9B7                                            0293  09580000
         TM    CESDTYP,B'00000100'                                0293  09590000
         BC    12,@9B6                                            0293  09600000
         TM    CESDTYP,B'00001011'                                0293  09610000
         BC    08,@9B5                                            0293  09620000
@9B6     TM    CESDTYP,B'00000101'                                0293  09630000
         BC    12,@9B4                                            0292  09640000
         TM    CESDTYP,B'00001010'                                0293  09650000
         BC    05,@9B3                                            0293  09660000
*            SIZEN=CESDTAB(N,16:18);     /* SAVE PRESENT CESD SIZE      09670000
@9B5     EQU   *                                                  0294  09680000
@9B7     LH    @7,N                                               0294  09690000
         BCTR  @7,0                                               0294  09700000
         MH    @7,@D2                                             0294  09710000
         L     @8,CETABPTR                                        0294  09720000
         LA    @A,15(@7,@8)                                       0294  09730000
         MVC   @TEMP3+1(3),0(@A)                                  0294  09740000
         L     @F,@TEMP3                                          0294  09750000
         ST    @F,SIZEN                                           0294  09760000
*          ELSE;                        /* NULL ELSE                    09770000
@9B3     EQU   *                                                  0295  09780000
@9B4     EQU   *                                                  0295  09790000
*        IF CESDTYP(5:8)='0011'B        /* IS CESD TYPE LR ?            09800000
*          THEN                         /* YES                          09810000
@9B2     TM    CESDTYP,B'00000011'                                0296  09820000
         BC    12,@9B1                                            0295  09830000
         TM    CESDTYP,B'00001100'                                0296  09840000
         BC    05,@9B0                                            0296  09850000
*            DO;                                                        09860000
*              ID=CESDTAB(N,17:18);     /* GET CESD ID                  09870000
         LH    @7,N                                               0298  09880000
         BCTR  @7,0                                               0298  09890000
         MH    @7,@D2                                             0298  09900000
         L     @8,CETABPTR                                        0298  09910000
         LA    @A,16(@7,@8)                                       0298  09920000
         MVC   @TEMP2+2(2),0(@A)                                  0298  09930000
         L     @F,@TEMP2                                          0298  09940000
         ST    @F,ID                                              0298  09950000
*              SIZEN=CESDTAB(ID,16:18);  /* GET SIZE OF THAT CESD       09960000
         LR    @7,@F                                              0299  09970000
         BCTR  @7,0                                               0299  09980000
         MH    @7,@D2                                             0299  09990000
         LA    @A,15(@7,@8)                                       0299  10000000
         MVC   @TEMP3+1(3),0(@A)                                  0299  10010000
         L     @F,@TEMP3                                          0299  10020000
         ST    @F,SIZEN                                           0299  10030000
*            END;                                                       10040000
*          ELSE;                        /* NULL ELSE                    10050000
*        END;                                                           10060000
*      ELSE;                            /* NULL ELSE                    10070000
@9B8     EQU   *                                                  0303  10080000
* CHNXT: END;                                                           10090000
CHNXT    EQU   *                                                  0304  10100000
*                                                                       10110000
*        /************************************************************* 10120000
*        /* COMPUTE FINAL ADDRESSES AND PUT IN CESD TABLE               10130000
*        /************************************************************* 10140000
*        DO L=3 TO TRCOUNT;             /* LOOP THRU TABLES             10150000
@9AE     LH    @F,N                                               0304  10160000
         AH    @F,@D3                                             0304  10170000
@DO9C0   STH   @F,N                                               0304  10180000
         C     @F,TRCOUNT                                         0304  10190000
         BC    12,@DO9C1                                          0304  10200000
         LA    @F,3                                               0305  10210000
         BC    15,@DO9AC                                          0305  10220000
*        CESDTYP=CESDTAB(L,11);         /* GET CESDTYPE                 10230000
@DO9AD   L     @7,L                                               0306  10240000
         BCTR  @7,0                                               0306  10250000
         MH    @7,@D2                                             0306  10260000
         L     @8,CETABPTR                                        0306  10270000
         LA    @E,10(@7,@8)                                       0306  10280000
         MVC   CESDTYP(1),0(@E)                                   0306  10290000
*        IF CESDTYP(5:8)='0011'B        /* IS IT LR ?                   10300000
*          THEN                         /* YES                          10310000
         TM    CESDTYP,B'00000011'                                0307  10320000
         BC    12,@9A9                                            0306  10330000
         TM    CESDTYP,B'00001100'                                0307  10340000
*            GO TO BYP;                 /* BYPASS UPDATING ADDRESSES    10350000
         BC    10,BYP                                             0308  10360000
*          ELSE;                        /* NULL ELSE                    10370000
@9A8     EQU   *                                                  0309  10380000
*        N=TRANTAB(L);                  /* GET PTR TO SCATTER TBL ENT   10390000
@9A9     L     @7,L                                               0310  10400000
         BCTR  @7,0                                               0310  10410000
         SLA   @7,1                                               0310  10420000
         L     @8,TRNTABAD                                        0310  10430000
         LH    @F,0(@7,@8)                                        0310  10440000
         STH   @F,N                                               0310  10450000
*        SCATAD=SCATTAB(N);             /* GET CSECT ADDR FROM SCATTER  10460000
         LR    @7,@F                                              0311  10470000
         BCTR  @7,0                                               0311  10480000
         SLA   @7,2                                               0311  10490000
         L     @8,SCTTABAD                                        0311  10500000
         LA    @A,0(@7,@8)                                        0311  10510000
         MVC   @TEMP4(4),0(@A)                                    0311  10520000
         L     @F,@TEMP4                                          0311  10530000
         ST    @F,SCATAD                                          0311  10540000
*                                       /* TABLE                        10550000
*        NEWAD=ADDRTBL(N);              /* GET ADDR FROM ADDR TABLE     10560000
         L     @8,ADDRTBAD                                        0312  10570000
         LA    @A,0(@7,@8)                                        0312  10580000
         MVC   @TEMP4(4),0(@A)                                    0312  10590000
         L     @F,@TEMP4                                          0312  10600000
         ST    @F,NEWAD                                           0312  10610000
*        RLF=NEWAD-SCATAD;              /* GET ADDR MINUS SCATTER VALUE 10620000
         S     @F,SCATAD                                          0313  10630000
         ST    @F,RLF                                             0313  10640000
*        CESDTAB(L,12:14)=RLF+CESDTAB(L,12:14); /* ADD EDITOR ASSIGNED  10650000
         L     @7,L                                               0314  10660000
         BCTR  @7,0                                               0314  10670000
         MH    @7,@D2                                             0314  10680000
         L     @8,CETABPTR                                        0314  10690000
         LA    @A,11(@7,@8)                                       0314  10700000
         MVC   @TEMP3+1(3),0(@A)                                  0314  10710000
         L     @F,@TEMP3                                          0314  10720000
         A     @F,RLF                                             0314  10730000
         ST    @F,@TEMP4                                          0314  10740000
         MVC   0(3,@A),@TEMP4+1                                   0314  10750000
*                                       /* ORIGIN + RLF VALUE           10760000
*    BYP: END;                                                          10770000
*        CESDTAB(2,12:14)=0;            /* SET QFX ADDR TO ZERO         10780000
BYP      L     @F,L                                               0315  10790000
         AH    @F,@D3                                             0315  10800000
@DO9AC   ST    @F,L                                               0315  10810000
         C     @F,TRCOUNT                                         0315  10820000
         BC    12,@DO9AD                                          0315  10830000
         L     @7,CETABPTR                                        0316  10840000
         MVC   29(3,@7),@D1+1                                     0316  10850000
*                                                                       10860000
*    /***************************************************************** 10870000
*    /* SUBTRACT NIP SIZE FROM NUCLEUS SIZE AND                         10880000
*    /* ROUND THIS VALUE UP TO A DOUBLEWORD MULTIPLE AND SET NIP        10890000
*    /* ADDR TO THIS VALUE.                                             10900000
*    /***************************************************************** 10910000
*          NUCMINIP=TEXTLEN- CESDTAB(1,16:18);  /* NUC MINUS NIP        10920000
         MVC   @TEMP3+1(3),15(@7)                                 0317  10930000
         L     @F,@TEMP3                                          0317  10940000
         LCR   @F,@F                                              0317  10950000
         L     @8,PARMPTR                                         0317  10960000
         A     @F,64(0,@8)                                        0317  10970000
         ST    @F,@TEMP4                                          0317  10980000
         MVC   NUCMINIP(3),@TEMP4+1                               0317  10990000
*          REMAINDR=NUCMINIP//8;        /* COMPUTE REMAINDER            11000000
         MVC   @TEMP3+1(3),NUCMINIP                               0318  11010000
         L     @E,@TEMP3                                          0318  11020000
         SRDA  @E,32                                              0318  11030000
         LA    @0,8                                               0318  11040000
         DR    @E,@0                                              0318  11050000
         ST    @E,REMAINDR                                        0318  11060000
*          /* TEST IF REMAINDER MUST BE ROUNDED TO A DOUBLEWORD         11070000
*          IF REMAINDR^=0               /* IF REMAINDER NOT ZERO        11080000
*            THEN                       /* THEN                         11090000
         SR    @F,@F                                              0319  11100000
         C     @F,REMAINDR                                        0319  11110000
         BC    08,@9A7                                            0319  11120000
*              DO;                                                      11130000
*                NUCMINIP=NUCMINIP+8-REMAINDR; /* ROUND TO DOUBLE WORD  11140000
         L     @F,REMAINDR                                        0321  11150000
         LCR   @F,@F                                              0321  11160000
         AH    @F,@D8                                             0321  11170000
         MVC   @TEMP3+1(3),NUCMINIP                               0321  11180000
         A     @F,@TEMP3                                          0321  11190000
         ST    @F,@TEMP4                                          0321  11200000
         MVC   NUCMINIP(3),@TEMP4+1                               0321  11210000
*              END;                                                     11220000
*            ELSE;                      /* ADDR ON DOUBLEWORD BOUNDRY   11230000
@9A7     EQU   *                                                  0323  11240000
*              CESDTAB(1,12:14)=NUCMINIP; /* INSERT NIP ADDR IN CESDTAB 11250000
@9A6     L     @7,CETABPTR                                        0324  11260000
         MVC   11(3,@7),NUCMINIP                                  0324  11270000
*              ADDRTBL(Q,2:4)=NUCMINIP;     /* SET NIP ADDR IN ADDR TBL 11280000
         LH    @8,Q                                               0325  11290000
         BCTR  @8,0                                               0325  11300000
         SLA   @8,2                                               0325  11310000
         L     @7,ADDRTBAD                                        0325  11320000
         LA    @A,1(@8,@7)                                        0325  11330000
         MVC   0(3,@A),NUCMINIP                                   0325  11340000
*              P=TRANTAB(2);            /* GET QFX PTR                  11350000
         L     @8,TRNTABAD                                        0326  11360000
         MVC   P(2),2(@8)                                         0326  11370000
*              ADDRTBL(P)=0;            /* SET QFX ADDR TO ZERO         11380000
         LH    @7,P                                               0327  11390000
         BCTR  @7,0                                               0327  11400000
         SLA   @7,2                                               0327  11410000
         L     @8,ADDRTBAD                                        0327  11420000
         LA    @A,0(@7,@8)                                        0327  11430000
         MVC   0(4,@A),@D1                                        0327  11440000
*              NIPADDR=NUCMINIP;        /* INSERT NIP ADDR IN CESDTAB   11450000
         MVC   NIPADDR(3),NUCMINIP                                0328  11460000
*                                                                       11470000
* /******************************************************************** 11480000
* /* RESOLVE LABEL REFERENCES USING SCATTER/TRANSLATION AND CESD TABLES 11490000
* /* TO OBTAIN NEW ADDRESS                                              11500000
* /******************************************************************** 11510000
* RESLRET: /* BRANCH HERE AFTER FINISHING FIRST PASS OF CESD TABLE      11520000
*          DO R=1 TO TRCOUNT;            /* LOOP THRU TABLES            11530000
RESLRET  LA    @F,1                                               0329  11540000
         BC    15,@DO9A4                                          0329  11550000
*            CESDTYP=CESDTAB(R,11);      /* GET CESD TYPE               11560000
@DO9A5   LH    @7,R                                               0330  11570000
         BCTR  @7,0                                               0330  11580000
         MH    @7,@D2                                             0330  11590000
         L     @8,CETABPTR                                        0330  11600000
         LA    @E,10(@7,@8)                                       0330  11610000
         MVC   CESDTYP(1),0(@E)                                   0330  11620000
*            IF CESDTYP(5:8)='0011'B     /* LABEL REFERENCE ?           11630000
*              THEN                      /* YES                         11640000
         TM    CESDTYP,B'00000011'                                0331  11650000
         BC    12,@9A1                                            0330  11660000
         TM    CESDTYP,B'00001100'                                0331  11670000
         BC    05,@9A0                                            0331  11680000
*                DO;                                                    11690000
*                   N=TRANTAB(R);        /* GET PTR TO SCATTER TBL ENT  11700000
         LH    @7,R                                               0333  11710000
         BCTR  @7,0                                               0333  11720000
         SLA   @7,1                                               0333  11730000
         L     @8,TRNTABAD                                        0333  11740000
         LH    @F,0(@7,@8)                                        0333  11750000
         STH   @F,N                                               0333  11760000
*                   SCATAD=SCATTAB(N);   /* GET CSECT ADDR FROM SCATTER 11770000
         LR    @7,@F                                              0334  11780000
         BCTR  @7,0                                               0334  11790000
         SLA   @7,2                                               0334  11800000
         L     @8,SCTTABAD                                        0334  11810000
         LA    @A,0(@7,@8)                                        0334  11820000
         MVC   @TEMP4(4),0(@A)                                    0334  11830000
         L     @F,@TEMP4                                          0334  11840000
         ST    @F,SCATAD                                          0334  11850000
*                                        /* TABLE                       11860000
*                   /* SUBTRACT CSECT ADDR FROM LR ADDR                 11870000
*                  LRDIF=CESDTAB(R,12:14)-SCATAD;  /* GET LR DISP       11880000
         LCR   @F,@F                                              0335  11890000
         LH    @7,R                                               0335  11900000
         BCTR  @7,0                                               0335  11910000
         MH    @7,@D2                                             0335  11920000
         L     @8,CETABPTR                                        0335  11930000
         LA    @A,11(@7,@8)                                       0335  11940000
         MVC   @TEMP3+1(3),0(@A)                                  0335  11950000
         A     @F,@TEMP3                                          0335  11960000
         ST    @F,LRDIF                                           0335  11970000
*                  /* GET NEW LR ADDR                                   11980000
*                  CESDTAB(R,12:14)=ADDRTBL(N)+LRDIF;                   11990000
         LH    @7,N                                               0336  12000000
         BCTR  @7,0                                               0336  12010000
         SLA   @7,2                                               0336  12020000
         L     @8,ADDRTBAD                                        0336  12030000
         LA    @A,0(@7,@8)                                        0336  12040000
         MVC   @TEMP4(4),0(@A)                                    0336  12050000
         AL    @F,@TEMP4                                          0336  12060000
         LH    @7,R                                               0336  12070000
         BCTR  @7,0                                               0336  12080000
         MH    @7,@D2                                             0336  12090000
         L     @8,CETABPTR                                        0336  12100000
         ST    @F,@TEMP4                                          0336  12110000
         LA    @A,11(@7,@8)                                       0336  12120000
         MVC   0(3,@A),@TEMP4+1                                   0336  12130000
*                END;                                                   12140000
*              ELSE;                    /* NULL ELSE                    12150000
@9A0     EQU   *                                                  0338  12160000
@9A1     EQU   *                                                  0338  12170000
*          END;                         /* END OF LOOP THRU TABLES      12180000
* /*                                      END OF CHANGES FOR PTM YM2968 12190000
*    CURRLD=RLDTABAD-8;                 /* INIT CURRLD                  12200000
@99F     LH    @F,R                                               0339  12210000
         AH    @F,@D3                                             0339  12220000
@DO9A4   STH   @F,R                                               0339  12230000
         C     @F,TRCOUNT                                         0339  12240000
         BC    12,@DO9A5                                          0339  12250000
         LH    @6,@D9                                             0340  12260000
         A     @6,RLDTABAD                                        0340  12270000
*                                                                       12280000
* /******************************************************************** 12290000
* /* BRANCH HERE WHEN ALL CESD TABLE ADDRESSES HAVE BEEN                12300000
* /* CONVERTED. FOLLOWING CODE RELOCATES RLDTAB ADDRESSES               12310000
* /******************************************************************** 12320000
* NUCCONV4:  CURRLD=CURRLD+8;           /* LOC NEXT LINE IN RLDTABLE    12330000
NUCCONV4 LA    @6,8(0,@6)                                         0341  12340000
*    /* TEST IF ALL RLDTABLE ADDRESSES HAVE BEEN CONVERTED              12350000
*    IF CURRLD=RLDEND                   /* IF AT END OF RLD TABLE       12360000
*      THEN                             /* THEN                         12370000
         C     @6,RLDEND                                          0342  12380000
*        GO TO NCSORT ;                 /* GO TO SORT CESDTAB           12390000
         BC    08,NCSORT                                          0343  12400000
*      ELSE;                            /* NULL ELSE                    12410000
*   N=TRANTAB(PPTR);                    /* GET TRANSLATION TABLE ENTRY  12420000
         LH    @7,2(0,@6)                                         0345  12430000
         BCTR  @7,0                                               0345  12440000
         SLA   @7,1                                               0345  12450000
         L     @8,TRNTABAD                                        0345  12460000
         LH    @F,0(@7,@8)                                        0345  12470000
         STH   @F,N                                               0345  12480000
*                                       /* FOR P PTR                    12490000
*   SCADR=SCATTAB(N);                   /* GET SCAT ADDR OF CSECT THAT  12500000
         LR    @7,@F                                              0346  12510000
         BCTR  @7,0                                               0346  12520000
         SLA   @7,2                                               0346  12530000
         L     @8,SCTTABAD                                        0346  12540000
         LA    @A,0(@7,@8)                                        0346  12550000
         MVC   @TEMP4(4),0(@A)                                    0346  12560000
         L     @F,@TEMP4                                          0346  12570000
         ST    @F,SCADR                                           0346  12580000
*                                       /* CONTAINS THE ADCON           12590000
*   OFFSET=RLDADDR-SCADR;               /* GET OFFSET INTO CSECT        12600000
         LCR   @F,@F                                              0347  12610000
         MVC   @TEMP3+1(3),5(@6)                                  0347  12620000
         A     @F,@TEMP3                                          0347  12630000
         ST    @F,OFFSET                                          0347  12640000
*   /* CHECK IF NIP CESD AND GET STORED NIP ADDR IF YES                 12650000
*   IF PPTR=0                           /* NIP CESD            ZA01417  12660000
*      THEN                             /* YES                          12670000
         SR    @F,@F                                              0348  12680000
         CH    @F,2(0,@6)                                         0348  12690000
         BC    07,@99E                                            0348  12700000
*       DO;                                                             12710000
*         RLDADDR=NIPADDR+OFFSET;       /* PUT NEW ADDR OF ADCON IN     12720000
         L     @F,OFFSET                                          0350  12730000
         MVC   @TEMP3+1(3),NIPADDR                                0350  12740000
         A     @F,@TEMP3                                          0350  12750000
         ST    @F,@TEMP4                                          0350  12760000
         MVC   5(3,@6),@TEMP4+1                                   0350  12770000
         BC    15,@99D                                            0352  12780000
*       END;                            /* RLD TABLE                    12790000
*     ELSE                              /* THIS IS NOT NIP CESD         12800000
*       DO;                                                             12810000
*         RLDADDR=ADDRTBL(N)+OFFSET;    /* PUT NEW ADDR OF              12820000
@99E     L     @F,OFFSET                                          0353  12830000
         LH    @7,N                                               0353  12840000
         BCTR  @7,0                                               0353  12850000
         SLA   @7,2                                               0353  12860000
         L     @8,ADDRTBAD                                        0353  12870000
         LA    @A,0(@7,@8)                                        0353  12880000
         MVC   @TEMP4(4),0(@A)                                    0353  12890000
         AL    @F,@TEMP4                                          0353  12900000
         ST    @F,@TEMP4                                          0353  12910000
         MVC   5(3,@6),@TEMP4+1                                   0353  12920000
*                                       /* ADCON IN RLD TABLE           12930000
*       END;                                                            12940000
*   GO TO NUCCONV4;                     /* CHECK NEXT RLD TABLE ENTRY   12950000
         BC    15,NUCCONV4                                        0355  12960000
* /******************************************************************** 12970000
* /*   THE FOLLOWING SECTION OF CODE SORTS CESD TABLE LINES INTO        12980000
* /*   ASCENDING NUMERICAL ORDER ACCORDING TO THE SEGMENT NUMBER        12990000
* /*   (IF THE LOAD MODULE IS IN OVERLAY), ADDRESS, AND CESD TYPE       13000000
* /*   IN EACH LINE. TO COMPARE TWO LINES,THE THREE FIELDS FOR          13010000
* /*   BOTH LINES ARE MOVED INTO TWO 5-BYTE AREAS.  THE RESULT IS       13020000
* /*   SEGMENT 1 SORTED BY ADDRESS, THEN SEGMENT 2, ETC.                13030000
* /*   THIS SECTION ALSO BUILDS THE INDEX TABLE, WHICH IS USED TO       13040000
* /*   DIRECTLY MATCH ID CHAIN POINTERS, R POINTERS, AND P              13050000
* /*   POINTERS TO CESD TABLE LINES.  THESE POINTER VALUES ARE USED     13060000
* /*   AS OFFSETS INTO THE INDEX TABLE TO FIND A VALUE WHICH            13070000
* /*   IS USED AS AN OFFSET INTO THE CESD TABLE.  THIS SECTION          13080000
* /*   HAS BEEN ASSIGNED NEW VALUES.                                    13090000
* /******************************************************************** 13100000
* NCSORT:                                                               13110000
*   M=NUMCESDS;                         /* INIT M TO NO. CESD TAB ENTS  13120000
NCSORT   LH    @F,NUMCESDS                                        0356  13130000
         ST    @F,M                                               0356  13140000
* NCSORT1: /* BRANCH HERE WHEN A PASS THROUGH THE CESD TABLE IS         13150000
*             FINISHED.  FOLLOWING CODE TESTS IF SORT IS FINISHED.      13160000
*   M=M/2;                              /* DIVIDE ARRAY IN HALF         13170000
NCSORT1  L     @E,M                                               0357  13180000
         SRDA  @E,32                                              0357  13190000
         LA    @0,2                                               0357  13200000
         DR    @E,@0                                              0357  13210000
         ST    @F,M                                               0357  13220000
*   /* TEST IF SORT IS FINISHED                                         13230000
*   IF M=0                              /* IF M IS 0                    13240000
*     THEN                              /* THEN SORT IS FINISHED        13250000
         SR    @F,@F                                              0358  13260000
         C     @F,M                                               0358  13270000
         BC    07,@99C                                            0358  13280000
*       DO;                             /* DO THE FOLLOWING             13290000
*                 /* BUILD THE INDEX TABLE                              13300000
*         DO J=1 TO NUMCESDS;           /* LOOP THRU CESD & INDEX TABS  13310000
         LA    @F,1                                               0360  13320000
         BC    15,@DO99A                                          0360  13330000
*           N=CESDTAB(J,1:2);           /* USE CESD AS INDEX            13340000
@DO99B   L     @7,J                                               0361  13350000
         BCTR  @7,0                                               0361  13360000
         MH    @7,@D2                                             0361  13370000
         L     @8,CETABPTR                                        0361  13380000
         LA    @A,0(@7,@8)                                        0361  13390000
         MVC   @TEMP2+2(2),0(@A)                                  0361  13400000
         L     @F,@TEMP2                                          0361  13410000
         STH   @F,N                                               0361  13420000
*           INDEXTAB(N)=J;              /* MAKE ENTRY IN INDEX TABLE    13430000
         L     @F,J                                               0362  13440000
         LH    @7,N                                               0362  13450000
         BCTR  @7,0                                               0362  13460000
         SLA   @7,1                                               0362  13470000
         L     @8,INDTABAD                                        0362  13480000
         STH   @F,0(@7,@8)                                        0362  13490000
*         END;                          /* LOOP                         13500000
*         GO TO NRSORT;                 /* GO TO NUMERIC RLD SORT       13510000
         L     @F,J                                               0363  13520000
         AH    @F,@D3                                             0363  13530000
@DO99A   ST    @F,J                                               0363  13540000
         CH    @F,NUMCESDS                                        0363  13550000
         BC    12,@DO99B                                          0363  13560000
         BC    15,NRSORT                                          0364  13570000
*       END;                                                            13580000
*   K=NUMCESDS-M;                       /* SET INDEX L                  13590000
@99C     LH    @F,NUMCESDS                                        0366  13600000
         S     @F,M                                               0366  13610000
         ST    @F,K                                               0366  13620000
*   J=1;                                /* SET INDEX J TO 1             13630000
         LA    @F,1                                               0367  13640000
         ST    @F,J                                               0367  13650000
* NCSORT2: /* BRANCH HERE TO COMPLETE A PASS THRU THE CESD TABLE.       13660000
*         /* FOLLOWING CODE SETS INDEX I.                               13670000
*   I=J;                                /* SET INDEX I                  13680000
NCSORT2  L     @2,J                                               0368  13690000
* NCSORT3: /* BRANCH HERE WHEN TWO COMPARENDS ARE FOUND                 13700000
*         /* FOLLOWING CODE COMPARES THEM                               13710000
*   IM=I+M;                             /* SET INDEX IM                 13720000
NCSORT3  L     @F,M                                               0369  13730000
         AR    @F,@2                                              0369  13740000
         ST    @F,IM                                              0369  13750000
*   BITCHECK=CESDTAB(I,11);             /* PREPARE TYPE AREA FOR TEST   13760000
         LR    @7,@2                                              0370  13770000
         BCTR  @7,0                                               0370  13780000
         MH    @7,@D2                                             0370  13790000
         L     @8,CETABPTR                                        0370  13800000
         LA    @E,10(@7,@8)                                       0370  13810000
         MVC   BITCHECK(1),0(@E)                                  0370  13820000
*   /* FOLLOWING HANDLES CASE WHERE SD AND/OR PC AND/OR LR HAVE         13830000
*   /* SAME ADDRESS                                                     13840000
*   DO N=5 TO 10 BY 5;                  /* LOOP TWICE                   13850000
         LA    @F,5                                               0371  13860000
         STH   @F,N                                               0371  13870000
*     /* TEST IF CESD TYPE IS SD                                        13880000
*     IF BITCHECK(5:8)='0000'B          /* IS SO                        13890000
*       THEN                                                            13900000
@DO997   TM    BITCHECK,B'00001111'                               0372  13910000
         BC    05,@993                                            0372  13920000
*         TEMPAREA(N)=ONE;              /* PUT ONE INTO COMPARISON AREA 13930000
         LH    @7,N                                               0373  13940000
         LA    @A,TEMPAREA-1(@7)                                  0373  13950000
         MVC   0(1,@A),ONE                                        0373  13960000
         BC    15,@992                                            0374  13970000
*       ELSE                            /* ELSE PUT IN TWO OR ZERO      13980000
*         /*TST IF CESD TYPE IS LR                                      13990000
*         IF BITCHECK(5:8)='0011'B      /* IS LR                        14000000
*           THEN                        /* THEN                         14010000
@993     TM    BITCHECK,B'00000011'                               0374  14020000
         BC    12,@991                                            0373  14030000
         TM    BITCHECK,B'00001100'                               0374  14040000
         BC    05,@990                                            0374  14050000
*             TEMPAREA(N)=TWO;          /* PUT TWO INTO COMPARE AREA    14060000
         LH    @7,N                                               0375  14070000
         LA    @A,TEMPAREA-1(@7)                                  0375  14080000
         MVC   0(1,@A),TWO                                        0375  14090000
         BC    15,@98F                                            0376  14100000
*           ELSE                        /* ELSE PC OR OTHER TYPE        14110000
*             TEMPAREA(N)=ZERO(1);      /* PUT 0 INTO COMPARISON AREA   14120000
@990     EQU   *                                                  0376  14130000
@991     LH    @7,N                                               0376  14140000
         LA    @A,TEMPAREA-1(@7)                                  0376  14150000
         MVC   0(1,@A),ZERO                                       0376  14160000
*     BITCHECK=CESDTAB(IM,11);          /* PREPARE TYPE AREA FOR TEST   14170000
@98F     EQU   *                                                  0377  14180000
@992     L     @7,IM                                              0377  14190000
         BCTR  @7,0                                               0377  14200000
         MH    @7,@D2                                             0377  14210000
         L     @8,CETABPTR                                        0377  14220000
         LA    @E,10(@7,@8)                                       0377  14230000
         MVC   BITCHECK(1),0(@E)                                  0377  14240000
*   END;                                /* LOOP                         14250000
*   TEMPAREA(2:4)=CESDTAB(I,12:14);     /* PUT 1ST ADDR INTO TEMPAREA   14260000
         LH    @F,N                                               0378  14270000
         AH    @F,@D10                                            0378  14280000
@DO996   STH   @F,N                                               0378  14290000
         CH    @F,@D11                                            0378  14300000
         BC    12,@DO997                                          0378  14310000
         LR    @7,@2                                              0379  14320000
         BCTR  @7,0                                               0379  14330000
         MH    @7,@D2                                             0379  14340000
         L     @8,CETABPTR                                        0379  14350000
         LA    @E,11(@7,@8)                                       0379  14360000
         MVC   TEMPAREA+1(3),0(@E)                                0379  14370000
*   TEMPAREA(7:9)=CESDTAB(IM,12:14);    /* PUT 2ND ADDR INTO TEMPAREA   14380000
         L     @7,IM                                              0380  14390000
         BCTR  @7,0                                               0380  14400000
         MH    @7,@D2                                             0380  14410000
         LA    @E,11(@7,@8)                                       0380  14420000
         MVC   TEMPAREA+6(3),0(@E)                                0380  14430000
*   /* TEST IF INPUT LOAD MODULE IS IN OVERLAY STRUCTURE                14440000
*   IF OVERLAY='1'B                     /* IF OVERLAY SWITCH IS ON      14450000
*     THEN                              /* THEN                         14460000
         L     @7,PARMPTR                                         0381  14470000
         TM    20(@7),B'01000000'                                 0381  14480000
         BC    12,@98E                                            0381  14490000
*       DO;                             /* FILL HIGH ORDER BYTE W/SEGNO 14500000
*         TEMPAREA(1)=CESDTAB(I,15);    /* PUT SEG NO. INTO TEMPAREA    14510000
         LR    @8,@2                                              0383  14520000
         BCTR  @8,0                                               0383  14530000
         MH    @8,@D2                                             0383  14540000
         L     @7,CETABPTR                                        0383  14550000
         LA    @E,14(@8,@7)                                       0383  14560000
         MVC   TEMPAREA(1),0(@E)                                  0383  14570000
*         TEMPAREA(6)=CESDTAB(IM,15);   /* PUT SEG NO. INTO TEMPAREA    14580000
         L     @8,IM                                              0384  14590000
         BCTR  @8,0                                               0384  14600000
         MH    @8,@D2                                             0384  14610000
         LA    @E,14(@8,@7)                                       0384  14620000
         MVC   TEMPAREA+5(1),0(@E)                                0384  14630000
         BC    15,@98D                                            0386  14640000
*       END;                                                            14650000
*     ELSE                              /* ELSE OVERLAY SWITCH IS OFF   14660000
*       DO;                             /* FILL HIGH ORDER BYTE WITH 0  14670000
*         TEMPAREA(1)=ZERO(1);          /* PUT 0 INTO TEMPAREA          14680000
@98E     MVC   TEMPAREA(1),ZERO                                   0387  14690000
*         TEMPAREA(6)=ZERO(1);          /* PUT 0 INTO TEMPAREA          14700000
         MVC   TEMPAREA+5(1),ZERO                                 0388  14710000
*       END;                                                            14720000
*   /* TEST WHICH IS GREATER OF TWO CESDTAB SEG NOS. AND ADDRESSES      14730000
*   IF TEMPAREA(1:5)<=TEMPAREA(6:10)    /* IF SECOND GREATER THAN FIRST 14740000
*     THEN                              /* THEN                         14750000
@98D     CLC   TEMPAREA(5),TEMPAREA+5                             0390  14760000
*       GO TO NCSORT4;                  /* DON'T EXCHANGE CESD LINES    14770000
         BC    12,NCSORT4                                         0391  14780000
*   TEMPAREA(1:18)=CESDTAB(I);          /* FIRST GOES INTO TEMP AREA    14790000
         LR    @7,@2                                              0392  14800000
         BCTR  @7,0                                               0392  14810000
         MH    @7,@D2                                             0392  14820000
         L     @8,CETABPTR                                        0392  14830000
         LA    @E,0(@7,@8)                                        0392  14840000
         MVC   TEMPAREA(18),0(@E)                                 0392  14850000
*   CESDTAB(I)=CESDTAB(IM);             /* SECOND GOES INTO FIRST       14860000
         L     @7,IM                                              0393  14870000
         BCTR  @7,0                                               0393  14880000
         MH    @7,@D2                                             0393  14890000
         LA    @E,0(@7,@8)                                        0393  14900000
         LR    @7,@2                                              0393  14910000
         BCTR  @7,0                                               0393  14920000
         MH    @7,@D2                                             0393  14930000
         LA    @A,0(@7,@8)                                        0393  14940000
         MVC   0(18,@A),0(@E)                                     0393  14950000
*   CESDTAB(IM)=TEMPAREA(1:18);         /* FIRST GOES INTO SECOND       14960000
         L     @7,IM                                              0394  14970000
         BCTR  @7,0                                               0394  14980000
         MH    @7,@D2                                             0394  14990000
         LA    @A,0(@7,@8)                                        0394  15000000
         MVC   0(18,@A),TEMPAREA                                  0394  15010000
*   I=I-M;                              /* DECREMENT INDEX I BY M       15020000
         S     @2,M                                               0395  15030000
*   /* TEST IF BEGINNING OF CESD TABLE HAS BEEN REACHED                 15040000
*   IF I>=1                             /* IF BEGINNING NOT REACHED     15050000
*     THEN                              /* THEN                         15060000
         CH    @2,@D3                                             0396  15070000
*       GO TO NCSORT3;                  /* GO TO COMPARE AGAIN          15080000
         BC    10,NCSORT3                                         0397  15090000
* NCSORT4: /* BRANCH HERE TO BYPASS SWAPPING TWO CESD TABLE LINES.      15100000
*             FOLLOWING CODE TESTS FOR SCAN COMPLETION.                 15110000
*   J=J+1;                              /* INCREMENT INDEX J BY 1       15120000
NCSORT4  LA    @F,1                                               0398  15130000
         A     @F,J                                               0398  15140000
         ST    @F,J                                               0398  15150000
*   /* TEST IF THIS SCAN IS FINISHED                                    15160000
*   IF J>K                              /* IF INDEX J GREATER THAN K    15170000
*     THEN                              /* THEN                         15180000
         L     @F,K                                               0399  15190000
         C     @F,J                                               0399  15200000
*       GO TO NCSORT1;                  /* GO TO POSSIBLY SCAN AGAIN    15210000
         BC    04,NCSORT1                                         0400  15220000
*     ELSE                              /* ELSE SCAN ISN'T FINISHED     15230000
*       GO TO NCSORT2;                  /* GO TO FINISH IT              15240000
         BC    15,NCSORT2                                         0401  15250000
*                                                                       15260000
* /******************************************************************** 15270000
* /*   THE FOLLOWING SECTION OF CODE SORTS RLD TABLE LINES INTO         15280000
* /*   ASCENDING NUMERICAL ORDER ACCORDING TO THE ADDRESS FIELD IN      15290000
* /*   EACH LINE.  COMPARISONS ARE MADE FROM THE RLD TABLE LINES,       15300000
* /*   WITHOUT USING TEMPORARY AREAS.  THIS SECTION IS ENTERED AFTER    15310000
* /*   THE NCSORT IS FINISHED.                                          15320000
* /******************************************************************** 15330000
*                                                                       15340000
* NRSORT:                                                               15350000
*   /* TEST IF LOAD MODULE CONTAINS ANY EXTERNAL REFERENCES             15360000
*   IF EREFPRES='0'B                    /* IF EREFPRES SWITCH IS OFF    15370000
*     THEN                              /* THEN                         15380000
NRSORT   TM    SWITCHES+1,B'00000010'                             0402  15390000
*       GO TO NACESD;                   /* GO TO NACESD PROCESSING      15400000
         BC    08,NACESD                                          0403  15410000
*   M=NUMRLDS;                          /* INIT M TO NO. RLD TAB ENTS   15420000
         MVC   M(4),NUMRLDS                                       0404  15430000
* NRSORT1: /* BRANCH HERE WHEN A PASS THROUGH THE RLD TABLE IS          15440000
*             FINISHED.  FOLLOWING CODE TESTS IF SORT IS FINISHED.      15450000
*   M=M/2;                              /* DIVIDE ARRAY IN HALF         15460000
NRSORT1  L     @E,M                                               0405  15470000
         SRDA  @E,32                                              0405  15480000
         LA    @0,2                                               0405  15490000
         DR    @E,@0                                              0405  15500000
         ST    @F,M                                               0405  15510000
*   /* TEST IF SORT IS FINISHED                                         15520000
*   IF M=0                              /* IF M IS 0                    15530000
*     THEN                              /* THEN SORT IS FINISHED        15540000
         SR    @F,@F                                              0406  15550000
         C     @F,M                                               0406  15560000
*         GO TO NACESD;                 /* GO TO NUMERIC CESD PROCESSNG 15570000
         BC    08,NACESD                                          0407  15580000
*   K=NUMRLDS-M;                        /* SET INDEX K                  15590000
         L     @F,NUMRLDS                                         0408  15600000
         S     @F,M                                               0408  15610000
         ST    @F,K                                               0408  15620000
*   J=1;                                /* SET INDEX J TO 1             15630000
         LA    @F,1                                               0409  15640000
         ST    @F,J                                               0409  15650000
* NRSORT2: /* BRANCH HERE TO COMPLETE A PASS THROUGH THE RLD TABLE.     15660000
*             FOLLOWING CODE SETS INDEX I.                              15670000
*   I=J;                                /* SET INDEX I                  15680000
NRSORT2  L     @2,J                                               0410  15690000
* NRSORT3: /* BRANCH HERE WHEN TWO NEW COMPARANDS ARE FOUND.            15700000
*             FOLLOWING CODE COMPARES THEM.                             15710000
*   IM=I+M;                             /* SET INDEX IM                 15720000
NRSORT3  L     @F,M                                               0411  15730000
         AR    @F,@2                                              0411  15740000
         ST    @F,IM                                              0411  15750000
*   /* TEST WHICH IS GREATER OF TWO RLD TABLE ADDRESSES                 15760000
*   IF RLDTAB(I,6:8)<=RLDTAB(IM,6:8)    /* IF SECOND GREATER THAN FIRST 15770000
*     THEN                              /* THEN                         15780000
         LR    @7,@F                                              0412  15790000
         BCTR  @7,0                                               0412  15800000
         SLA   @7,3                                               0412  15810000
         L     @8,RLDTABAD                                        0412  15820000
         LA    @E,5(@7,@8)                                        0412  15830000
         LR    @7,@2                                              0412  15840000
         BCTR  @7,0                                               0412  15850000
         SLA   @7,3                                               0412  15860000
         LA    @A,5(@7,@8)                                        0412  15870000
         CLC   0(3,@A),0(@E)                                      0412  15880000
*       GO TO NRSORT4;                  /* DON'T EXCHANGE RLD LINES     15890000
         BC    12,NRSORT4                                         0413  15900000
*   TEMPAREA(1:8)=RLDTAB(I);            /* FIRST GOES INTO TEMP AREA    15910000
         LA    @E,0(@7,@8)                                        0414  15920000
         MVC   TEMPAREA(8),0(@E)                                  0414  15930000
*   RLDTAB(I)=RLDTAB(IM);               /* SECOND GOES INTO FIRST       15940000
         L     @7,IM                                              0415  15950000
         BCTR  @7,0                                               0415  15960000
         SLA   @7,3                                               0415  15970000
         LA    @E,0(@7,@8)                                        0415  15980000
         LR    @7,@2                                              0415  15990000
         BCTR  @7,0                                               0415  16000000
         SLA   @7,3                                               0415  16010000
         LA    @A,0(@7,@8)                                        0415  16020000
         MVC   0(8,@A),0(@E)                                      0415  16030000
*   RLDTAB(IM)=TEMPAREA(1:8);           /* FIRST GOES INTO SECOND       16040000
         L     @7,IM                                              0416  16050000
         BCTR  @7,0                                               0416  16060000
         SLA   @7,3                                               0416  16070000
         LA    @A,0(@7,@8)                                        0416  16080000
         MVC   0(8,@A),TEMPAREA                                   0416  16090000
*   I=I-M;                              /* DECREMENT INDEX I BY M       16100000
         S     @2,M                                               0417  16110000
*   /* TEST IF BEGINNING OF RLD TABLE HAS BEEN REACHED                  16120000
*   IF I>=1                             /* IF BEGINNING NOT REACHED     16130000
*     THEN                              /* THEN                         16140000
         CH    @2,@D3                                             0418  16150000
*       GO TO NRSORT3;                  /* GO TO COMPARE ADDRESSES      16160000
         BC    10,NRSORT3                                         0419  16170000
* NRSORT4: /* BRANCH HERE TO BYPASS SWAPPING TWO RLD TABLE LINES.       16180000
*             FOLLOWING CODE TESTS FOR SCAN COMPLETION.                 16190000
*   J=J+1;                              /* INCREMENT INDEX J BY 1       16200000
NRSORT4  LA    @F,1                                               0420  16210000
         A     @F,J                                               0420  16220000
         ST    @F,J                                               0420  16230000
*   /* TEST IF THIS SCAN IS FINISHED                                    16240000
*   IF J>K                              /* IF INDEX J GREATER THAN K    16250000
*     THEN                              /* THEN                         16260000
         L     @F,K                                               0421  16270000
         C     @F,J                                               0421  16280000
*       GO TO NRSORT1;                  /* GO TO POSSIBLY SCAN AGAIN    16290000
         BC    04,NRSORT1                                         0422  16300000
*     ELSE                              /* ELSE SCAN ISN'T FINISHED     16310000
*       GO TO NRSORT2;                  /* GO TO FINISH IT              16320000
         BC    15,NRSORT2                                         0423  16330000
*                                                                       16340000
* /******************************************************************** 16350000
* /*   THE FOLLOWING SECTION OF CODE PRODUCES DATA FOR THE NUMERICAL    16360000
* /*   AND ALPHABETICAL MAPS.  IT IS ENTERED TWICE: AFTER THE NRSORT    16370000
* /*   (AT WHICH TIME IT WILL PRODUCE A NUMERICAL MAP) AND AFTER THE    16380000
* /*   ACSORT (WHEN IT WILL PRODUCE AN ALPHABETICAL MAP).               16390000
* /******************************************************************** 16400000
*                                                                       16410000
* NACESD:                                                               16420000
*   CURRCESD=CESDEND-18;                /* PREPARE FOR NEXT STATEMENT   16430000
NACESD   LH    @5,@D12                                            0424  16440000
         A     @5,CESDEND                                         0424  16450000
*   /* TEST IF INPUT LOAD MODULE IS IN OVERLAY                          16460000
*   IF OVERLAY='1'B                     /* IF OVERLAY SWITCH IS ON      16470000
*     THEN                              /* THEN                         16480000
         L     @7,PARMPTR                                         0425  16490000
         TM    20(@7),B'01000000'                                 0425  16500000
         BC    12,@98C                                            0425  16510000
*       HISEGNO=SEGNO;                  /* INIT HIGHEST SEGNO IN LMOD   16520000
         MVC   HISEGNO+1(1),14(@5)                                0426  16530000
         MVI   HISEGNO,X'00'                                      0426  16540000
         BC    15,@98B                                            0427  16550000
*     ELSE                              /* ELSE OVERLAY SWITCH IS OFF   16560000
*       HISEGNO=SEGLENCT;               /* SET HIGH SEG NO. TO 0        16570000
@98C     MVC   HISEGNO(2),SEGLENCT                                0427  16580000
*   SAVCURR1=CETABPTR;                  /* GET BEGINNING OF CESDTAB     16590000
@98B     MVC   SAVCURR1(4),CETABPTR                               0428  16600000
* NACESD1: /* BRANCH HERE WHEN RETURNING FROM NRLD ROUTINE.  FOLLOWING  16610000
*             CODE PERFORMS INITIALIZATIONS FOR NACESD PROCESSING.      16620000
*   /* TEST IF NUMERIC CESD PROCESSING IS BEING PERFORMED               16630000
*   IF NUMCESD='1'B                     /* IF NUMCESD SWITCH IS ON      16640000
*     THEN                              /* THEN                         16650000
NACESD1  TM    SWITCHES+2,B'01000000'                             0429  16660000
         BC    12,@98A                                            0429  16670000
*       DO;                             /* PREPARE FOR THIS PROCESSING  16680000
*         NCHD='1'B;                    /* INDIC TO PRINT NCESD HEADING 16690000
         OI    SWITCHES,B'00001100'                               0431  16700000
*         NCSHD='1'B;                   /* INDIC TO PRINT NCESD SUBHEAD 16710000
*         /* TEST IF INPUT LOAD MODULE IS IN OVERLAY STRUCTURE          16720000
*         IF OVERLAY='1'B               /* IF OVERLAY SWITCH IS ON      16730000
*           THEN                        /* THEN                         16740000
         L     @7,PARMPTR                                         0433  16750000
         TM    20(@7),B'01000000'                                 0433  16760000
         BC    12,@989                                            0433  16770000
*             DO;                       /* PREPARE FOR THIS PROCESSING  16780000
*               SEGLEN=0;               /* SET SEGLEN TO 0              16790000
         MVC   SEGLEN(3),@D1+1                                    0435  16800000
*               CURSEGNO=CURSEGNO+1;    /* INCR CURR SEGNO IN PROCESS   16810000
         LA    @F,1                                               0436  16820000
         SR    @0,@0                                              0436  16830000
         IC    @0,CURSEGNO                                        0436  16840000
         AR    @F,@0                                              0436  16850000
         STC   @F,CURSEGNO                                        0436  16860000
*               DASHLINE='1'B;          /* INDIC TO PRNT LINE OF DASHES 16870000
         OI    SWITCHES+1,B'00001000'                             0437  16880000
*               DUBLDASH='1'B;          /* PRINT ANOTHER LINE OF DASHES 16890000
         OI    SWITCHES+2,B'00010000'                             0438  16900000
*             END;                                                      16910000
*       END;                                                            16920000
         BC    15,@988                                            0441  16930000
*     ELSE                              /* ELSE NUMCESD SWITCH IS OFF   16940000
*       DO;                             /* PREP FOR ALPHA CESD PROCESNG 16950000
*         ACHD='1'B;                    /* INDIC TO PRINT ACESD HEADING 16960000
@98A     OI    SWITCHES,B'00000011'                               0442  16970000
*         ACSHD='1'B;                   /* INDIC TO PRINT ACESD SUBHEAD 16980000
*       END;                                                            16990000
* NACESD2: /* BRANCH HERE AFTER PROCESSING CURRENT CESD TABLE LINE.     17000000
*             FOLLOWING CODE PROCESSES NEXT ONE.                        17010000
*   CURRCESD=SAVCURR1;                  /* GET NEXT CESD TABLE LINE     17020000
@988     EQU   *                                                  0445  17030000
NACESD2  L     @5,SAVCURR1                                        0445  17040000
*   /* TEST IF THIS CESD ROUTINE IS FINISHED                            17050000
*   IF CURRCESD=CESDEND                 /* IF END OF CESD TABLE REACHED 17060000
*     THEN                              /* THEN                         17070000
         C     @5,CESDEND                                         0446  17080000
         BC    07,@987                                            0446  17090000
*       /* TEST IF THE RLD ROUTINE IS FINISHED                          17100000
*       IF RLDSPRTD=NUMRLDS             /* IF ALL RLD DATA IS PRINTED   17110000
*                                          (THESE TWO SYMBOLS ARE ALWAY 17120000
*                                          EQUAL DURING ALPHA CESD      17130000
*                                          PROCESSING)                  17140000
*         THEN                          /* THEN                         17150000
         L     @F,NUMRLDS                                         0447  17160000
         C     @F,RLDSPRTD                                        0447  17170000
         BC    07,@986                                            0447  17180000
*           DO;                         /* TURN CESD HDNG SWITCHES OFF  17190000
*             NCHD='0'B;                /* TURN NUM CESD HEADING OFF    17200000
         NI    SWITCHES,B'11110000'                               0449  17210000
*             NCSHD='0'B;               /* TURN NUM CESD SUBHEAD OFF    17220000
*             ACHD='0'B;                /* TURN ALPHA CESD HEADING OFF  17230000
*             ACSHD='0'B;               /* TURN ALPHA CESD SUBHEAD OFF  17240000
*             /* TEST IF NUMERIC CESD PROCESSING IS BEING PERFORMED     17250000
*             IF NUMCESD='1'B           /* IF NUMCESD SWITCH IS ON      17260000
*               THEN                    /* THEN                         17270000
         TM    SWITCHES+2,B'01000000'                             0453  17280000
         BC    12,@985                                            0453  17290000
*                 DO;                   /* PRODUCE MODULE LENGTHS       17300000
*                   /* TEST IF ALL SEGMENT LENGTHS HAVE BEEN PRINTED    17310000
*                   IF SEGLENCT^=HISEGNO  /* IF ANOTHER SEGLEN TO PRINT 17320000
*                     THEN              /* THEN                         17330000
         LH    @F,HISEGNO                                         0455  17340000
         CH    @F,SEGLENCT                                        0455  17350000
         BC    08,@984                                            0455  17360000
*                       DO;             /* PREPARE TO PRINT IT          17370000
*                         NA3RET='1'B;  /* INDIC TO RETURN TO NACESD3   17380000
         OI    SWITCHES+2,B'10000000'                             0457  17390000
*                         GO TO NACESD7; /* GO TO PRODUCE SEG LENGTH    17400000
         BC    15,NACESD7                                         0458  17410000
*                       END;                                            17420000
* NACESD3:          /* BRANCH HERE WHEN THE LAST LOAD MODULE SEGMENT    17430000
*                      HAS NO CROSS-REFERENCE LIST. FOLLOWING CODE      17440000
*                      PRODUCES LOAD MODULE LENGTH.                     17450000
*                   REMAINDR=LMLEN//8;  /* COMPUTE REMAINDER            17460000
@984     EQU   *                                                  0460  17470000
NACESD3  MVC   @TEMP3+1(3),LMLEN                                  0460  17480000
         L     @E,@TEMP3                                          0460  17490000
         SRDA  @E,32                                              0460  17500000
         LA    @0,8                                               0460  17510000
         DR    @E,@0                                              0460  17520000
         ST    @E,REMAINDR                                        0460  17530000
*                   /* TEST IF LMOD LENGTH MUST BE ROUNDED TO DBLWORD   17540000
*                   IF REMAINDR^=0      /* IF REMAINDER NOT 0           17550000
*                     THEN              /* THEN                         17560000
         SR    @F,@F                                              0461  17570000
         C     @F,REMAINDR                                        0461  17580000
         BC    08,@983                                            0461  17590000
*                       LMLEN=LMLEN+8-REMAINDR; /* ROUND TO DBLWORD     17600000
         L     @F,REMAINDR                                        0462  17610000
         LCR   @F,@F                                              0462  17620000
         AH    @F,@D8                                             0462  17630000
         MVC   @TEMP3+1(3),LMLEN                                  0462  17640000
         A     @F,@TEMP3                                          0462  17650000
         ST    @F,@TEMP4                                          0462  17660000
         MVC   LMLEN(3),@TEMP4+1                                  0462  17670000
*                   DATABUF(1:6)=HEADING1(28:33); /* 'LENGTH' INTO BUF  17680000
@983     MVC   BUFFERS+125(6),HEADING1+27                         0463  17690000
*                   /* TEST IF A NUCLEUS IS BEING MAPPED                17700000
*                   IF NUCMAP='1'B      /* IF NUCMAP SWITCH IS ON       17710000
*                     THEN              /* THEN                         17720000
         TM    SWITCHES+2,B'00001000'                             0464  17730000
         BC    12,@982                                            0464  17740000
*                       DO;             /* PUT FOLLOWING IN BUFFER      17750000
*                         DATABUF(8:9)=HEADING3(19:20); /* 'OF'         17760000
         MVC   BUFFERS+132(2),HEADING3+18                         0466  17770000
*                         DATABUF(11:17)=HEADING7(16:22); /* 'NUCLEUS'  17780000
         MVC   BUFFERS+135(7),HEADING7+15                         0467  17790000
         BC    15,@981                                            0469  17800000
*                       END;                                            17810000
*                     ELSE              /* ELSE NUCMAP SWITCH IS OFF    17820000
*                       DATABUF(8:21)=HEADING3(19:32); /* 'OF LOAD      17830000
*                                                         MODULE'       17840000
@982     MVC   BUFFERS+132(14),HEADING3+18                        0469  17850000
*                   BININT(5:7)=LMLEN; /* PREPARE TO CONVERT LMOD LEN   17860000
@981     MVC   BININT+4(3),LMLEN                                  0470  17870000
*                   RELOC='0'B;         /* INDICATE NOT TO ADD RELOCFAC 17880000
         NI    SWITCHES+2,B'11111101'                             0471  17890000
*                   RET=ADDR(NACESD4); /* SET UP RETURN ADDRESS         17900000
         LA    @3,NACESD4                                         0472  17910000
*                   GO TO BITOHEX;     /* CONV LMOD LEN TO PRINTBLE HEX 17920000
         BC    15,BITOHEX                                         0473  17930000
* NACESD4:          /* BRANCH HERE TO RETURN FROM BITOHEX ROUTINE.      17940000
*                      FOLLOWING CODE CONTINUES NACESD PROCESSING.      17950000
*                   DATABUF(23:28)=HEXINT(2:7); /* PUT LENGTH INTO BUF  17960000
NACESD4  MVC   BUFFERS+147(6),HEXINT+1                            0474  17970000
*                   /* TEST IF INPUT LOAD MODULE IS IN OVERLAY          17980000
*                   IF OVERLAY='1'B     /* IF OVERLAY SWITCH IS ON      17990000
*                     THEN              /* THEN                         18000000
         L     @7,PARMPTR                                         0475  18010000
         TM    20(@7),B'01000000'                                 0475  18020000
         BC    12,@980                                            0475  18030000
*                       DO;             /* PREPARE FOR PRINT            18040000
*                         DASHLINE='1'B; /* INDICATE TO PRINT DASHES    18050000
         OI    SWITCHES+1,B'00001000'                             0477  18060000
*                         DUBLDASH='1'B; /* PRNT ANOTHER LINE OF DASHES 18070000
         OI    SWITCHES+2,B'00010000'                             0478  18080000
*                         DATABUF(73)=HEADING3(51); /* PUT '(' INTO BUF 18090000
         MVC   BUFFERS+197(1),HEADING3+50                         0479  18100000
*                         DATABUF(74:79)=HEADING1(28:33); /* 'LENGTH'   18110000
         MVC   BUFFERS+198(6),HEADING1+27                         0480  18120000
*                         DATABUF(81:112)=HEADING3(19:50); /* 'OF LOAD  18130000
*                                                             MODULE IF 18140000
*                                                             NOT IN    18150000
*                                                             OVERLAY'  18160000
         MVC   BUFFERS+205(32),HEADING3+18                        0481  18170000
*                         DATABUF(120)=HEADING3(52); /* PUT ')' IN BUF  18180000
         MVC   BUFFERS+244(1),HEADING3+51                         0482  18190000
*                         LMLENNO=LMLENNO-PDLEN; /* COMPUTE LMLENNO     18200000
         MVC   @TEMP3+1(3),LMLENNO                                0483  18210000
         L     @F,@TEMP3                                          0483  18220000
         MVC   @TEMP3+1(3),PDLEN                                  0483  18230000
         S     @F,@TEMP3                                          0483  18240000
         ST    @F,@TEMP4                                          0483  18250000
         MVC   LMLENNO(3),@TEMP4+1                                0483  18260000
*                         BININT(5:7)=LMLENNO; /* PREP CONV LEN NO OVLY 18270000
         MVC   BININT+4(3),LMLENNO                                0484  18280000
*                         RELOC='0'B;   /* INDICATE NOT TO ADD RELOCFAC 18290000
         NI    SWITCHES+2,B'11111101'                             0485  18300000
*                         RET=ADDR(NACESD5); /* SET UP RETURN ADDRESS   18310000
         LA    @3,NACESD5                                         0486  18320000
*                         GO TO BITOHEX; /* CONV LMLENNO TO PRNTBLE HEX 18330000
         BC    15,BITOHEX                                         0487  18340000
* NACESD5:                /* BRANCH HERE TO RETURN FROM BITOHEX ROUTINE 18350000
*                            FOLLOWING CODE CONTINUES NACESD PROCES'NG. 18360000
*                         DATABUF(114:119)=HEXINT(2:7); /* PUT INTO BUF 18370000
NACESD5  MVC   BUFFERS+238(6),HEXINT+1                            0488  18380000
*                       END;                                            18390000
*                   SP2='1'B;           /* SET UP DATA BUF CON CHAR     18400000
@980     OI    SWITCHES+2,B'00100000'                             0490  18410000
*                   RET=ADDR(NACESD6);  /* SET UP RETURN ADDRESS        18420000
         LA    @3,NACESD6                                         0491  18430000
*                   GO TO WRITE;        /* GO TO PRINT THIS BUFFER      18440000
         BC    15,WRITE                                           0492  18450000
*                 END;                                                  18460000
* NACESD6:    /* BRANCH HERE TO RETURN FROM WRITE ROUTINE.              18470000
*                FOLLOWING CODE CONTINUES NACESD PROCESSING.            18480000
*             DASHLINE='0'B;            /* TURN DASHLINE SWITCH OFF     18490000
@985     EQU   *                                                  0494  18500000
NACESD6  NI    SWITCHES+1,B'11110111'                             0494  18510000
*             DUBLDASH='0'B;            /* TURN DUBLDASH SWITCH OFF     18520000
         NI    SWITCHES+2,B'11101111'                             0495  18530000
*             GO TO NACESD16;           /* GO TO TEST FOR PSEUDO REGS   18540000
         BC    15,NACESD16                                        0496  18550000
*           END;                                                        18560000
*         ELSE                          /* ELSE NRLD ROUTINE NOT DONE   18570000
*           GO TO NACESD7;              /* GO TO TEST FOR OVERLAY       18580000
*     ELSE                              /* ELSE CESD ROUTINE ISN'T DONE 18590000
*       /* TEST IF NUMERIC CESD PROCESSING IS BEING PERFORMED           18600000
*       IF NUMCESD='1'B                 /* IF NUMCESD SWITCH IS ON      18610000
*         THEN                          /* THEN                         18620000
@987     TM    SWITCHES+2,B'01000000'                             0499  18630000
         BC    12,@97D                                            0499  18640000
*           /* TEST IF INPUT LOAD MODULE IS IN OVERLAY                  18650000
*           IF OVERLAY='1'B             /* IF OVERLAY SWITCH IS ON      18660000
*             THEN                      /* THEN                         18670000
         L     @7,PARMPTR                                         0500  18680000
         TM    20(@7),B'01000000'                                 0500  18690000
         BC    12,@97C                                            0500  18700000
*               /* TEST IF CESD ITEM IS PR, UNRESLVD ER, OR UNRESLVD WX 18710000
*               IF CESDTYPE(7)='0'B     /* IF SD, PC, PD, OR CM         18720000
*                  | CESDTYPE(8)='1'B   /* OR IF LR OR CM               18730000
*                 THEN                  /* THEN                         18740000
         TM    10(@5),B'00000010'                                 0501  18750000
         BC    08,@97B                                            0501  18760000
         TM    10(@5),B'00000001'                                 0501  18770000
         BC    12,@97A                                            0501  18780000
*                   /* TEST IF CURR LINE'S SEG NO.=CURR SEG IN PROCESS  18790000
*                   IF SEGNO^=CURSEGNO  /* IF THEY ARE NOT EQUAL        18800000
*                     THEN              /* THEN                         18810000
@97B     CLC   14(1,@5),CURSEGNO                                  0502  18820000
         BC    08,@979                                            0502  18830000
* NACESD7:              /* BRANCH HERE WHEN A SEGMENT'S MAP IS COMPLETE 18840000
*                          FOLLOWING CODE PRODUCES SEGMENT LENGTH.      18850000
*                       /* TEST IF INPUT LOAD MODULE IS IN OVERLAY      18860000
*                       IF OVERLAY='1'B /* IF OVERLAY SWITCH IS ON      18870000
*                         THEN          /* THEN                         18880000
NACESD7  L     @7,PARMPTR                                         0503  18890000
         TM    20(@7),B'01000000'                                 0503  18900000
         BC    12,@978                                            0503  18910000
*                           DO;         /* PROCESS SEGMENT LENGTH       18920000
*                             SEGLENCT=SEGLENCT+1; /* INCR SEGLENCT     18930000
         LA    @F,1                                               0505  18940000
         AH    @F,SEGLENCT                                        0505  18950000
         STH   @F,SEGLENCT                                        0505  18960000
*                             LMLENNO=LMLENNO+SEGLEN; /* INCR LMLENNO   18970000
         MVC   @TEMP3+1(3),SEGLEN                                 0506  18980000
         L     @F,@TEMP3                                          0506  18990000
         MVC   @TEMP3+1(3),LMLENNO                                0506  19000000
         A     @F,@TEMP3                                          0506  19010000
         ST    @F,@TEMP4                                          0506  19020000
         MVC   LMLENNO(3),@TEMP4+1                                0506  19030000
*                             BININT(5:7)=SEGLEN; /* PREP TO CONV SEGLN 19040000
         MVC   BININT+4(3),SEGLEN                                 0507  19050000
*                             RELOC='0'B; /* INDIC NOT TO ADD RELOCFAC  19060000
         NI    SWITCHES+2,B'11111101'                             0508  19070000
*                             RET=ADDR(NACESD8); /* SET UP RETURN ADDR  19080000
         LA    @3,NACESD8                                         0509  19090000
*                             GO TO BITOHEX; /* CONV TO PRINTABLE HEX   19100000
         BC    15,BITOHEX                                         0510  19110000
* NACESD8:                    /* BRANCH HERE TO RETURN FROM BITODEC     19120000
*                                ROUTINE.  FOLLOWING CODE CONTINUES     19130000
*                                NACESD PROCESSING.                     19140000
*                             DATABUF(20:25)=HEXINT(2:7); /* PUT LEN IN 19150000
NACESD8  MVC   BUFFERS+144(6),HEXINT+1                            0511  19160000
*                             DATABUF(1:6)=HEADING1(28:33); /* 'LENGTH' 19170000
         MVC   BUFFERS+125(6),HEADING1+27                         0512  19180000
*                             DATABUF(8:9)=HEADING3(19:20); /* 'OF'     19190000
         MVC   BUFFERS+132(2),HEADING3+18                         0513  19200000
*                             DATABUF(11:17)=HEADING7(4:10); /* 'SEG'T' 19210000
         MVC   BUFFERS+135(7),HEADING7+3                          0514  19220000
*                             SP2='1'B; /* SET UP DATA BUF CON CHAR     19230000
         OI    SWITCHES+2,B'00100000'                             0515  19240000
*                             /* TEST FOR WHERE TO RETURN               19250000
*                             IF NA3RET='1'B /* IF NA3RET SWITCH IS ON  19260000
*                               THEN    /* THEN                         19270000
         TM    SWITCHES+2,B'10000000'                             0516  19280000
         BC    12,@977                                            0516  19290000
*                                 RET=ADDR(NACESD3); /* RET TO NACESD3  19300000
         LA    @3,NACESD3                                         0517  19310000
         BC    15,@976                                            0518  19320000
*                               ELSE    /* ELSE NA3RET SWITCH IS OFF    19330000
*                                 RET=ADDR(NRLD); /* RETURN IS TO NRLD  19340000
@977     LA    @3,NRLD                                            0518  19350000
*                             GO TO WRITE; /* PRINT THIS BUFFER         19360000
         BC    15,WRITE                                           0519  19370000
*                           END;                                        19380000
*                         ELSE          /* ELSE OVERLAY SWITCH IS OFF   19390000
*                           GO TO NRLD; /* GO TO NUMERIC RLD ROUTINE    19400000
*   /* TEST IF CESD ITEM IS A SECTION DEF, COMMON AREA, OR PRIVATE CODE 19410000
*   IF CESDTYPE(5:8)='0000'B            /* IF CESD ITEM IS SD           19420000
*      | CESDTYPE(5:8)='0101'B          /* OR IF CESD ITEM IS CM        19430000
*      | CESDTYPE(6:8)='100'B           /* OR IF CESD ITEM IS PC OR PD  19440000
*     THEN                              /* THEN                         19450000
@975     EQU   *                                                  0522  19460000
@979     EQU   *                                                  0522  19470000
@97A     EQU   *                                                  0522  19480000
@97C     EQU   *                                                  0522  19490000
@97D     EQU   *                                                  0522  19500000
@97E     TM    10(@5),B'00001111'                                 0522  19510000
         BC    08,@974                                            0522  19520000
         TM    10(@5),B'00000101'                                 0522  19530000
         BC    12,@973                                            0522  19540000
         TM    10(@5),B'00001010'                                 0522  19550000
         BC    08,@972                                            0522  19560000
@973     TM    10(@5),B'00000100'                                 0522  19570000
         BC    12,@971                                            0521  19580000
         TM    10(@5),B'00000011'                                 0522  19590000
         BC    05,@970                                            0522  19600000
*       DO;                             /* PUT IT INTO PRINT BUFFER     19610000
@972     EQU   *                                                  0523  19620000
*         /* TEST IF NUMERIC CESD PROCESSING IS BEING PERFORMED         19630000
*         IF NUMCESD='1'B               /* IF NUMCESD SWITCH IS ON      19640000
*           THEN                        /* THEN                         19650000
@974     TM    SWITCHES+2,B'01000000'                             0524  19660000
         BC    12,@96F                                            0524  19670000
*             DO;                       /* PROCESS SEG AND LMOD LENGTHS 19680000
*               REMAINDR=IDLENGTH//8;   /* COMPUTE REMAINDER            19690000
         MVC   @TEMP3+1(3),15(@5)                                 0526  19700000
         L     @E,@TEMP3                                          0526  19710000
         SRDA  @E,32                                              0526  19720000
         LA    @0,8                                               0526  19730000
         DR    @E,@0                                              0526  19740000
         ST    @E,REMAINDR                                        0526  19750000
*               /* TEST IF SEGMENT LENGTH MUST BE ROUNDED TO DOUBLEWORD 19760000
*               IF REMAINDR^=0          /* IF REMAINDER NOT 0           19770000
*                 THEN                  /* THEN                         19780000
         SR    @F,@F                                              0527  19790000
         C     @F,REMAINDR                                        0527  19800000
         BC    08,@96E                                            0527  19810000
*                   SEGLEN=SEGLEN+8-REMAINDR; /* ROUND TO DOUBLEWORD    19820000
         L     @F,REMAINDR                                        0528  19830000
         LCR   @F,@F                                              0528  19840000
         AH    @F,@D8                                             0528  19850000
         MVC   @TEMP3+1(3),SEGLEN                                 0528  19860000
         A     @F,@TEMP3                                          0528  19870000
         ST    @F,@TEMP4                                          0528  19880000
         MVC   SEGLEN(3),@TEMP4+1                                 0528  19890000
*               SEGLEN=SEGLEN+IDLENGTH; /* INCREMENT SEGMENT LENGTH     19900000
@96E     MVC   @TEMP3+1(3),15(@5)                                 0529  19910000
         L     @F,@TEMP3                                          0529  19920000
         MVC   @TEMP3+1(3),SEGLEN                                 0529  19930000
         A     @F,@TEMP3                                          0529  19940000
         ST    @F,@TEMP4                                          0529  19950000
         MVC   SEGLEN(3),@TEMP4+1                                 0529  19960000
*               /* TEST IF A NUCLEUS IS BEING MAPPED                    19970000
*               IF NUCMAP='1'B          /* IF NUCMAP SWITCH IS ON       19980000
*                 THEN                  /* THEN                         19990000
         TM    SWITCHES+2,B'00001000'                             0530  20000000
         BC    12,@96D                                            0530  20010000
*                   DO;                 /* INCREMENT NUCLEUS LENGTH     20020000
*                     /* TEST IF CSECT LENGTH MUST BE ROUNDED TO DBLWD  20030000
*                     IF REMAINDR^=0    /* IF REMAINDER IS NOT ZERO     20040000
*                       THEN            /* THEN                         20050000
         SR    @F,@F                                              0532  20060000
         C     @F,REMAINDR                                        0532  20070000
         BC    08,@96C                                            0532  20080000
*                         LMLEN=LMLEN+8-REMAINDR; /* ROUND TO DOUBLEWRD 20090000
         L     @F,REMAINDR                                        0533  20100000
         LCR   @F,@F                                              0533  20110000
         AH    @F,@D8                                             0533  20120000
         MVC   @TEMP3+1(3),LMLEN                                  0533  20130000
         A     @F,@TEMP3                                          0533  20140000
         ST    @F,@TEMP4                                          0533  20150000
         MVC   LMLEN(3),@TEMP4+1                                  0533  20160000
*                     LMLEN=LMLEN+IDLENGTH; /* INCREMENT NUCLEUS LENGTH 20170000
@96C     MVC   @TEMP3+1(3),15(@5)                                 0534  20180000
         L     @F,@TEMP3                                          0534  20190000
         MVC   @TEMP3+1(3),LMLEN                                  0534  20200000
         A     @F,@TEMP3                                          0534  20210000
         ST    @F,@TEMP4                                          0534  20220000
         MVC   LMLEN(3),@TEMP4+1                                  0534  20230000
         BC    15,@96B                                            0536  20240000
*                   END;                                                20250000
*                 ELSE                  /* ELSE LOAD MODULE NOT NUCLEUS 20260000
*                   /* TEST IF LOAD MODULE LENGTH SHOULD BE INCREMENTED 20270000
*                   IF LMLEN<CESDADDR+IDLENGTH /* IF ADDR LARGST SO FAR 20280000
*                     THEN              /* THEN                         20290000
@96D     MVC   @TEMP3+1(3),15(@5)                                 0536  20300000
         L     @F,@TEMP3                                          0536  20310000
         MVC   @TEMP3+1(3),11(@5)                                 0536  20320000
         A     @F,@TEMP3                                          0536  20330000
         MVC   @TEMP3+1(3),LMLEN                                  0536  20340000
         C     @F,@TEMP3                                          0536  20350000
         BC    12,@96A                                            0536  20360000
*                       LMLEN=CESDADDR+IDLENGTH; /* COMPUTE LMOD LENGTH 20370000
         MVC   @TEMP3+1(3),15(@5)                                 0537  20380000
         L     @F,@TEMP3                                          0537  20390000
         MVC   @TEMP3+1(3),11(@5)                                 0537  20400000
         A     @F,@TEMP3                                          0537  20410000
         ST    @F,@TEMP4                                          0537  20420000
         MVC   LMLEN(3),@TEMP4+1                                  0537  20430000
*             END;                                                      20440000
@96A     EQU   *                                                  0538  20450000
@96B     EQU   *                                                  0538  20460000
*         BININT(5:7)=CESDADDR;         /* PREPARE TO CONVERT LMOD LOC  20470000
@96F     MVC   BININT+4(3),11(@5)                                 0539  20480000
*         RET=ADDR(NACESD9);            /* SET UP RETURN ADDRESS        20490000
         LA    @3,NACESD9                                         0540  20500000
*         GO TO BITOHEX;                /* CONV LMOD LOC TO PRINTBL HEX 20510000
         BC    15,BITOHEX                                         0541  20520000
* NACESD9: /* BRANCH HERE TO RETURN FROM BITOHEX ROUTINE.               20530000
*             FOLLOWING CODE CONTINUES NACESD PROCESSING.               20540000
*         DATABUF(19:24)=HEXINT(2:7);   /* PUT LMOD LOC INTO BUFFER     20550000
NACESD9  MVC   BUFFERS+143(6),HEXINT+1                            0542  20560000
*         BININT(5:7)=IDLENGTH;         /* PREPARE TO CONVERT LENGTH    20570000
         MVC   BININT+4(3),15(@5)                                 0543  20580000
*         RELOC='0'B;                   /* INDICATE NOT TO ADD RELOCFAC 20590000
         NI    SWITCHES+2,B'11111101'                             0544  20600000
*         RET=ADDR(NACESD10);           /* SET UP RETURN ADDRESS        20610000
         LA    @3,NACESD10                                        0545  20620000
*         GO TO BITOHEX;                /* CONV LENGTH TO PRINTABLE HEX 20630000
         BC    15,BITOHEX                                         0546  20640000
* NACESD10: /* BRANCH HERE TO RETURN FROM BITOHEX ROUTINE.              20650000
*              FOLLOWING CODE CONTINUES NACESD PROCESSING.              20660000
*         DATABUF(41:46)=HEXINT(2:7);   /* PUT LENGTH INTO BUFFER       20670000
NACESD10 MVC   BUFFERS+165(6),HEXINT+1                            0547  20680000
*         /* TEST IF CESD ITEM IS A SECTION DEFINITION                  20690000
*         IF CESDTYPE(5:8)='0000'B      /* IF CESD ITEM IS SD           20700000
*           THEN                        /* THEN                         20710000
         TM    10(@5),B'00001111'                                 0548  20720000
         BC    05,@969                                            0548  20730000
*             DO;                       /* PROCESS REST OF IT           20740000
*               DATABUF(30:37)=SYMBOL;  /* PUT ITS NAME INTO BUFFER     20750000
         MVC   BUFFERS+154(8),2(@5)                               0550  20760000
*               DATABUF(51:52)=SDPRT;   /* PUT 'SD' INTO BUFFER         20770000
         MVC   BUFFERS+175(2),SDPRT                               0551  20780000
*               GO TO NACESD11;         /* GO TO TEST FOR OVERLAY       20790000
         BC    15,NACESD11                                        0552  20800000
*             END;                                                      20810000
*         /* TEST IF CESD ITEM IS A COMMON AREA                         20820000
*         IF CESDTYPE(5:8)='0101'B      /* IF CESD ITEM IS CM           20830000
*           THEN                        /* THEN                         20840000
@969     TM    10(@5),B'00000101'                                 0554  20850000
         BC    12,@968                                            0553  20860000
         TM    10(@5),B'00001010'                                 0554  20870000
         BC    05,@967                                            0554  20880000
*             DO;                       /* PROCESS REST OF IT           20890000
*               DATABUF(51:52)=CMPRT;   /* PUT 'CM' INTO BUFFER         20900000
         MVC   BUFFERS+175(2),CMPRT                               0556  20910000
*               /* TEST IF THIS IS BLANK COMMON OR NAMED COMMON         20920000
*               IF SYMBOL(1)=BLANK      /* IF NAME FIELD IS BLANK       20930000
*                 THEN                  /* THEN                         20940000
         CLC   2(1,@5),BLANK                                      0557  20950000
         BC    07,@966                                            0557  20960000
*                   DATABUF(29:37)=BLCOMPRT; /* PUT '$BLANKCOM' IN BUF  20970000
         MVC   BUFFERS+153(9),BLCOMPRT                            0558  20980000
         BC    15,@965                                            0559  20990000
*                 ELSE                  /* ELSE IT IS NAMED COMMON      21000000
*                   DATABUF(30:37)=SYMBOL; /* PUT ITS NAME INTO BUFFER  21010000
@966     MVC   BUFFERS+154(8),2(@5)                               0559  21020000
*               GO TO NACESD11;         /* GO TO TEST FOR OVERLAY       21030000
         BC    15,NACESD11                                        0560  21040000
*             END;                                                      21050000
*         /* TEST IF CESD ITEM IS PRIVATE CODE                          21060000
*         IF CESDTYPE(6:8)='100'B       /* IF CESD ITEM IS PRIVATE CODE 21070000
*           THEN                        /* THEN                         21080000
@967     EQU   *                                                  0562  21090000
@968     TM    10(@5),B'00000100'                                 0562  21100000
         BC    12,@964                                            0561  21110000
         TM    10(@5),B'00000011'                                 0562  21120000
         BC    05,@963                                            0562  21130000
*             /* TEST IF CESD ITEM IS PRIVATE CODE MARKED DELETE (PD)   21140000
*             IF CESDTYPE(4)='0'B       /* IF CESD ITEM IS NOT PD       21150000
*               THEN                    /* THEN                         21160000
         TM    10(@5),B'00010000'                                 0563  21170000
         BC    05,@962                                            0563  21180000
*                 DO;                   /* IT IS PC                     21190000
*                   DATABUF(29:36)=PRIVPRT; /* PUT '$PRIVATE' INTO BUF  21200000
         MVC   BUFFERS+153(8),PRIVPRT                             0565  21210000
*                   DATABUF(51:52)=PCPRT; /* PUT 'PC' INTO BUFFER       21220000
         MVC   BUFFERS+175(2),PCPRT                               0566  21230000
*                   GO TO NACESD11;     /* GO TO TEST FOR OVERLAY       21240000
         BC    15,NACESD11                                        0567  21250000
*                 END;                                                  21260000
*               ELSE                    /* ELSE CESD ITEM IS PD         21270000
*                 DO;                   /* PROCESS REST OF IT           21280000
*                   DATABUF(51:52)=PDPRT; /* PUT 'PD' INTO BUFFER       21290000
@962     MVC   BUFFERS+175(2),PDPRT                               0570  21300000
*                   REMAINDR=IDLENGTH//8; /* COMPUTE REMAINDER          21310000
         MVC   @TEMP3+1(3),15(@5)                                 0571  21320000
         L     @E,@TEMP3                                          0571  21330000
         SRDA  @E,32                                              0571  21340000
         LA    @0,8                                               0571  21350000
         DR    @E,@0                                              0571  21360000
         ST    @E,REMAINDR                                        0571  21370000
*                   /* TEST IF LENGTH MUST BE ROUNDED TO DOUBLEWORD     21380000
*                   IF REMAINDR^=0      /* IF REMAINDER NOT 0           21390000
*                     THEN              /* THEN                         21400000
         SR    @F,@F                                              0572  21410000
         C     @F,REMAINDR                                        0572  21420000
         BC    08,@960                                            0572  21430000
*                       PDLEN=PDLEN+8-REMAINDR; /* ROUND TO DOUBLEWORD  21440000
         L     @F,REMAINDR                                        0573  21450000
         LCR   @F,@F                                              0573  21460000
         AH    @F,@D8                                             0573  21470000
         MVC   @TEMP3+1(3),PDLEN                                  0573  21480000
         A     @F,@TEMP3                                          0573  21490000
         ST    @F,@TEMP4                                          0573  21500000
         MVC   PDLEN(3),@TEMP4+1                                  0573  21510000
*                   PDLEN=PDLEN+IDLENGTH; /* INCR CUMUL LEN OF PD ITEMS 21520000
@960     MVC   @TEMP3+1(3),15(@5)                                 0574  21530000
         L     @F,@TEMP3                                          0574  21540000
         MVC   @TEMP3+1(3),PDLEN                                  0574  21550000
         A     @F,@TEMP3                                          0574  21560000
         ST    @F,@TEMP4                                          0574  21570000
         MVC   PDLEN(3),@TEMP4+1                                  0574  21580000
*                   /* TEST IF THIS ITEM IS A SEGTAB                    21590000
*                   IF CESDADDR=ZERO    /* IF CESD ADDRESS IS 0         21600000
*                     THEN              /* THEN IT IS SEGTAB            21610000
         MVC   @TEMP3+1(3),ZERO                                   0575  21620000
         L     @F,@TEMP3                                          0575  21630000
         MVC   @TEMP3+1(3),11(@5)                                 0575  21640000
         C     @F,@TEMP3                                          0575  21650000
         BC    07,@95F                                            0575  21660000
*                       DATABUF(29:35)=SEGTBPRT; /*PUT '$SEGTAB' IN BUF 21670000
         MVC   BUFFERS+153(7),SEGTBPRT                            0576  21680000
         BC    15,@95E                                            0577  21690000
*                     ELSE              /* ELSE CESD ADDRESS IS NOT 0   21700000
*                       DATABUF(29:34)=ENTABPRT; /* PUT '$ENTAB' IN BUF 21710000
@95F     MVC   BUFFERS+153(6),ENTABPRT                            0577  21720000
*                 END;                                                  21730000
@95E     EQU   *                                                  0578  21740000
* NACESD11: /* BRANCH HERE WHEN LMOD LOC, NAME, LENGTH, AND TYPE HAVE   21750000
*              BEEN PROCESSED.  FOLLOWING CODE PROCESSES SEGMENT NO.    21760000
*         /* TEST IF INPUT LOAD MODULE IS IN OVERLAY                    21770000
*         IF OVERLAY='1'B               /* IF OVERLAY SWITCH IS ON      21780000
*           THEN                        /* THEN                         21790000
@961     EQU   *                                                  0579  21800000
@963     EQU   *                                                  0579  21810000
@964     EQU   *                                                  0579  21820000
NACESD11 L     @7,PARMPTR                                         0579  21830000
         TM    20(@7),B'01000000'                                 0579  21840000
         BC    12,@95D                                            0579  21850000
*             DO;                       /* PROCESS SEGMENT NUMBER       21860000
*               BINARY=SEGNO;           /* PREPARE TO CONVERT SEG NO.   21870000
         SR    @2,@2                                              0581  21880000
         IC    @2,14(0,@5)                                        0581  21890000
*               BLNKZERO='1'B;          /* INDIC TO BLANK NONSIG ZEROS  21900000
         OI    SWITCHES+1,B'00000001'                             0582  21910000
*               RET=ADDR(NACESD12);     /* SET UP RETURN ADDRESS        21920000
         LA    @3,NACESD12                                        0583  21930000
*               GO TO BITODEC;          /* CONV SEG NO. TO PRINTBLE DEC 21940000
         BC    15,BITODEC                                         0584  21950000
* NACESD12:     /* BRANCH HERE TO RETURN FROM BITODEC ROUTINE.          21960000
*                  FOLLOWING CODE CONTINUES NACESD PROCESSING.          21970000
*               DATABUF(57:59)=DECINT(2:4); /* PUT SEG NO. INTO BUFFER  21980000
NACESD12 MVC   BUFFERS+181(3),DECINT+1                            0585  21990000
*             END;                                                      22000000
*         SAVLMLOC=CESDADDR;            /* SAVE LMOD LOC FOR LR PROC'NG 22010000
@95D     MVC   SAVLMLOC+1(3),11(@5)                               0587  22020000
         MVI   SAVLMLOC,X'00'                                     0587  22030000
*         CURRCESD=CURRCESD+18;         /* LOC NEXT LINE IN CESD TABLE  22040000
         LA    @5,18(0,@5)                                        0588  22050000
*         /* TEST IF ALPHABETIC CESD PROCESSING IS BEING PERFORMED      22060000
*         IF NUMCESD='0'B               /* IF NUMCESD SWITCH IS OFF     22070000
*           THEN                        /* THEN                         22080000
         TM    SWITCHES+2,B'01000000'                             0589  22090000
         BC    05,@95C                                            0589  22100000
*             DO;                       /* REARRANGE CSECT DATA IN BUF  22110000
*               TEMPAREA=DATABUF(19:40); /* PUT LOC & NAME IN TEMP AREA 22120000
         MVC   TEMPAREA(22),BUFFERS+143                           0591  22130000
*               DATABUF(13:24)=TEMPAREA(11:22); /* MOVE NAME            22140000
         MVC   BUFFERS+137(12),TEMPAREA+10                        0592  22150000
*               DATABUF(25:34)=TEMPAREA(1:10); /* MOVE LMOD LOC         22160000
         MVC   BUFFERS+149(10),TEMPAREA                           0593  22170000
*               DATABUF(35:44)=DATABUF(41:50); /* MOVE LENGTH           22180000
         MVC   BUFFERS+159(10),BUFFERS+165                        0594  22190000
*               DATABUF(45:50)=DATABUF(51:56); /* MOVE TYPE             22200000
         MVC   BUFFERS+169(6),BUFFERS+175                         0595  22210000
*               DATABUF(51:59)=DATABUF(57:65); /* MOVE SEG NO.          22220000
         MVC   BUFFERS+175(9),BUFFERS+181                         0596  22230000
*             END;                                                      22240000
* NACESD13: /* BRANCH HERE WHEN A LINE OF NACESD DATA IS READY TO BE    22250000
*              PRINTED.  FOLLOWING CODE PREPARES TO PRINT IT.           22260000
*         RET=ADDR(NACESD2);            /* SET UP RETURN ADDRESS        22270000
@95C     EQU   *                                                  0598  22280000
NACESD13 LA    @3,NACESD2                                         0598  22290000
*         SAVCURR1=CURRCESD;            /* SAVE CURRCESD                22300000
         ST    @5,SAVCURR1                                        0599  22310000
*         /* TEST IF LINE OF DATA SHOULD GO ON THIS OR NEXT PAGE        22320000
*         IF LINECNT>60                 /* IF LINE COUNT GREATR THAN 60 22330000
*           THEN                        /* THEN                         22340000
         LA    @F,60                                              0600  22350000
         C     @F,LINECNT                                         0600  22360000
         BC    10,@95B                                            0600  22370000
*             DO;                       /* SET TWO SWITCHES             22380000
*               LINECT61='1'B;          /* INDIC TO PRINT ON NEXT PAGE  22390000
         OI    SWITCHES,B'00010000'                               0602  22400000
*               /* TEST IF NUMERIC CESD PROCESSING IS BEING PERFORMED   22410000
*               IF NUMCESD='1'B         /* IF NUMCESD SWITCH IS ON      22420000
*                 THEN                  /* THEN                         22430000
         TM    SWITCHES+2,B'01000000'                             0603  22440000
         BC    12,@95A                                            0603  22450000
*                   NCHD='1'B;          /* INDIC TO PRINT NCESD HEADING 22460000
         OI    SWITCHES,B'00001000'                               0604  22470000
         BC    15,@959                                            0605  22480000
*                 ELSE                  /* ELSE NUMCESD SWITCH IS OFF   22490000
*                   ACHD='1'B;          /* INDIC TO PRINT ACESD HEADING 22500000
@95A     OI    SWITCHES,B'00000010'                               0605  22510000
*             END;                                                      22520000
*         GO TO WRITE;                  /* GO TO PRINT LINE OF DATA     22530000
         BC    15,WRITE                                           0607  22540000
*       END;                                                            22550000
*   /* TEST IF CESD ITEM IS A LABEL REFERENCE                           22560000
*   IF CESDTYPE(5:8)='0011'B            /* IF CESD ITEM IS LR           22570000
*     THEN                              /* THEN                         22580000
@970     EQU   *                                                  0609  22590000
@971     TM    10(@5),B'00000011'                                 0609  22600000
         BC    12,@958                                            0608  22610000
         TM    10(@5),B'00001100'                                 0609  22620000
         BC    05,@957                                            0609  22630000
*       DO;                             /* PROCESS IT                   22640000
*         DATABUF(97:104)=SYMBOL;       /* PUT NAME INTO BUFFER         22650000
         MVC   BUFFERS+221(8),2(@5)                               0611  22660000
*         BININT(5:7)=CESDADDR;         /* PREPARE TO CONVERT LMOD LOC  22670000
         MVC   BININT+4(3),11(@5)                                 0612  22680000
*         RET=ADDR(NACESD14);           /* SET UP RETURN ADDRESS        22690000
         LA    @3,NACESD14                                        0613  22700000
*         GO TO BITOHEX;                /* CONV LMOD LOC TO PRINTBL HEX 22710000
         BC    15,BITOHEX                                         0614  22720000
* NACESD14: /* BRANCH HERE TO RETURN FROM BITOHEX ROUTINE.              22730000
*              FOLLOWING CODE CONTINUES NACESD PROCESSING.              22740000
*         DATABUF(74:79)=HEXINT(2:7);   /* PUT LMOD LOC INTO BUFFER     22750000
NACESD14 MVC   BUFFERS+198(6),HEXINT+1                            0615  22760000
*         SAVCURR2=CURRCESD;            /* SAVE CURRCESD                22770000
         ST    @5,SAVCURR2                                        0616  22780000
*         /* TEST IF NUMERIC CESD PROCESSING IS BEING PERFORMED         22790000
*         IF NUMCESD='1'B               /* IF NUMCESD SWITCH IS ON      22800000
*           THEN                        /* THEN                         22810000
         TM    SWITCHES+2,B'01000000'                             0617  22820000
         BC    12,@956                                            0617  22830000
*             BININT(5:7)=CESDADDR-SAVLMLOC; /* PREP TO CONV CSECT LOC  22840000
         L     @F,SAVLMLOC                                        0618  22850000
         LCR   @F,@F                                              0618  22860000
         MVC   @TEMP3+1(3),11(@5)                                 0618  22870000
         A     @F,@TEMP3                                          0618  22880000
         ST    @F,@TEMP4                                          0618  22890000
         MVC   BININT+4(3),@TEMP4+1                               0618  22900000
         BC    15,@955                                            0619  22910000
*           ELSE                        /* ELSE ALPH CESD PROCESSING ON 22920000
*             DO;                       /* FIND CSECT LOC               22930000
*               SAVCSDAD=CESDADDR;      /* SAVE LR'S LMOD LOC           22940000
@956     MVC   SAVCSDAD+1(3),11(@5)                               0620  22950000
         MVI   SAVCSDAD,X'00'                                     0620  22960000
*               N=IDLENGTH(2:3);        /* PREP FOR NEXT INSTRUCTION    22970000
         MVC   @TEMP2+2(2),16(@5)                                 0621  22980000
         L     @F,@TEMP2                                          0621  22990000
         STH   @F,N                                               0621  23000000
*               N=INDEXTAB(N);          /* FIND INDEX INTO CESD TAB     23010000
         LR    @7,@F                                              0622  23020000
         BCTR  @7,0                                               0622  23030000
         SLA   @7,1                                               0622  23040000
         L     @8,INDTABAD                                        0622  23050000
         LH    @F,0(@7,@8)                                        0622  23060000
         STH   @F,N                                               0622  23070000
*               CURRCESD=ADDR(CESDTAB(N)); /* POINT TO CESD TABLE LINE  23080000
         LR    @7,@F                                              0623  23090000
         BCTR  @7,0                                               0623  23100000
         MH    @7,@D2                                             0623  23110000
         L     @8,CETABPTR                                        0623  23120000
         LA    @5,0(@7,@8)                                        0623  23130000
*               BININT(5:7)=SAVCSDAD-CESDADDR; /* PREP CONV CSECT LOC   23140000
         MVC   @TEMP3+1(3),11(@5)                                 0624  23150000
         L     @F,@TEMP3                                          0624  23160000
         LCR   @F,@F                                              0624  23170000
         A     @F,SAVCSDAD                                        0624  23180000
         ST    @F,@TEMP4                                          0624  23190000
         MVC   BININT+4(3),@TEMP4+1                               0624  23200000
*             END;                                                      23210000
*         RELOC='0'B;                   /* INDICATE NOT TO ADD RELOCFAC 23220000
@955     NI    SWITCHES+2,B'11111101'                             0626  23230000
*         RET=ADDR(NACESD15);           /* SET UP RETURN ADDRESS        23240000
         LA    @3,NACESD15                                        0627  23250000
*         GO TO BITOHEX;                /* CONV CSECT LOC TO PRNTBL HEX 23260000
         BC    15,BITOHEX                                         0628  23270000
* NACESD15: /* BRANCH HERE TO RETURN FROM BITOHEX ROUTINE.              23280000
*              FOLLOWING CODE CONTINUES NACESD PROCESSING.              23290000
*         DATABUF(84:89)=HEXINT(2:7);   /* PUT CSECT LOC INTO BUFFER    23300000
NACESD15 MVC   BUFFERS+208(6),HEXINT+1                            0629  23310000
*         TEMPAREA(1:8)=SYMBOL;         /* PUT CSECT NAME IN TEMP AREA  23320000
         MVC   TEMPAREA(8),2(@5)                                  0630  23330000
*         CURRCESD=SAVCURR2+18;         /* INCR TO PROCESS NEXT LINE    23340000
         LA    @5,18                                              0631  23350000
         A     @5,SAVCURR2                                        0631  23360000
*         /* TEST IF NUMERIC CESD PROCESSING IS BEING PERFORMED         23370000
*         IF NUMCESD='1'B               /* IF NUMCESD SWITCH IS ON      23380000
*           THEN                        /* THEN                         23390000
         TM    SWITCHES+2,B'01000000'                             0632  23400000
*             GO TO NACESD13;           /* GO TO PRINT ENTRY DATA       23410000
         BC    01,NACESD13                                        0633  23420000
*           ELSE                        /* ELSE DO THE FOLLOWING FIRST  23430000
*             DO;                       /* REARRANGE ENTRY DATA IN BUF  23440000
*               TEMPAREA(9:14)=DATABUF(74:79); /* PUT CSECT LOC IN TEMP 23450000
         MVC   TEMPAREA+8(6),BUFFERS+198                          0635  23460000
*               DATABUF(68:77)=DATABUF(97:106); /* MOVE NAME            23470000
         MVC   BUFFERS+192(10),BUFFERS+221                        0636  23480000
*               DATABUF(78:83)=TEMPAREA(9:14); /* MOVE LMOD LOC         23490000
         MVC   BUFFERS+202(6),TEMPAREA+8                          0637  23500000
*               TEMPAREA(9:14)=DATABUF(84:89); /* PUT CSECT LOC IN TEMP 23510000
         MVC   TEMPAREA+8(6),BUFFERS+208                          0638  23520000
*               DATABUF(84:99)=DATABUF(105:120); /* PUT BLANKS IN BUF   23530000
         MVC   BUFFERS+208(16),BUFFERS+229                        0639  23540000
*               DATABUF(88:93)=TEMPAREA(9:14); /* MOVE CSECT LOC        23550000
         MVC   BUFFERS+212(6),TEMPAREA+8                          0640  23560000
*               IF TEMPAREA(2:3)=PRIVPRT(1:2) /* CHECK FOR $P  ZA01415  23570000
*                  THEN DATABUF(99:106)=PRIVPRT;                        23580000
         CLC   TEMPAREA+1(2),PRIVPRT                              0641  23590000
         BC    07,@954                                            0641  23600000
         MVC   BUFFERS+223(8),PRIVPRT                             0642  23610000
         BC    15,@953                                            0643  23620000
*                               /* IF FOUND, INSERT $PRIVATE   ZA01415  23630000
*                  ELSE DATABUF(100:107)=TEMPAREA(1:8);                 23640000
@954     MVC   BUFFERS+224(8),TEMPAREA                            0643  23650000
*                               /* IF NOT, INSERT SYMBOL       ZA01415  23660000
*               GO TO NACESD13;         /* GO TO PRINT ENTRY DATA       23670000
         BC    15,NACESD13                                        0644  23680000
*             END;                                                      23690000
*       END;                                                            23700000
*   /* TEST IF CESD ITEM IS A PSEUDO REGISTER                           23710000
*   IF CESDTYPE(5:8)='0110'B            /* IF CESD ITEM IS A PSEUDO REG 23720000
*     THEN                              /* THEN                         23730000
@957     EQU   *                                                  0647  23740000
@958     TM    10(@5),B'00000110'                                 0647  23750000
         BC    12,@952                                            0646  23760000
         TM    10(@5),B'00001001'                                 0647  23770000
         BC    05,@951                                            0647  23780000
*       PREGHERE='1'B;                  /* INDIC PSEUDO REG PRESENT     23790000
         OI    SWITCHES+1,B'00000100'                             0648  23800000
*   /* TEST FOR INVALID CESD TYPE                                       23810000
*   IF CESDTYPE(5:8)='0010'B            /* IF CESD ITEM IS ER           23820000
*      | CESDTYPE(5:8)='1010'B          /* OR IF CESD ITEM IS WX        23830000
*      | CESDTYPE(5:8)='0110'B          /* OR IF CESD ITEM IS PR        23840000
*      | CESDTYPE(5:8)='0111'B          /* OR IF CESD ITEM IS NULL      23850000
*     THEN                              /* THEN CESD TYPE IS VALID      23860000
@951     EQU   *                                                  0649  23870000
@952     TM    10(@5),B'00000010'                                 0649  23880000
         BC    12,@950                                            0649  23890000
         TM    10(@5),B'00001101'                                 0649  23900000
         BC    08,@94F                                            0649  23910000
@950     TM    10(@5),B'00001010'                                 0649  23920000
         BC    12,@94E                                            0649  23930000
         TM    10(@5),B'00000101'                                 0649  23940000
         BC    08,@94D                                            0649  23950000
@94E     TM    10(@5),B'00000110'                                 0649  23960000
         BC    12,@94C                                            0649  23970000
         TM    10(@5),B'00001001'                                 0649  23980000
         BC    08,@94B                                            0649  23990000
@94C     TM    10(@5),B'00000111'                                 0649  24000000
         BC    12,@94A                                            0648  24010000
         TM    10(@5),B'00001000'                                 0649  24020000
         BC    05,@949                                            0649  24030000
*       DO;                             /* CONTINUE PROCESSING          24040000
@94B     EQU   *                                                  0650  24050000
@94D     EQU   *                                                  0650  24060000
*         SAVCURR1=SAVCURR1+18;         /* LOC NEXT LINE IN CESD TABLE  24070000
@94F     LA    @F,18                                              0651  24080000
         A     @F,SAVCURR1                                        0651  24090000
         ST    @F,SAVCURR1                                        0651  24100000
*         GO TO NACESD2;                /* GO TO PROCESS THIS NEXT LINE 24110000
         BC    15,NACESD2                                         0652  24120000
*       END;                                                            24130000
*     ELSE                              /* ELSE CESD TYPE IS INVALID    24140000
*       DO;                             /* PROCESS ERROR                24150000
@949     EQU   *                                                  0654  24160000
*         ERRORS(1)='1'B;               /* ERROR-INVALID CESD REC TYPE  24170000
@94A     L     @7,PARMPTR                                         0655  24180000
         OI    32(@7),B'10000000'                                 0655  24190000
*         GO TO ABORT;                  /* ABORT (MESSAGE HMB101I)      24200000
         BC    15,ABORT                                           0656  24210000
*       END;                                                            24220000
* NACESD16: /* BRANCH HERE WHEN IT IS TIME TO PROCESS PSEUDO REGISTERS. 24230000
*              FOLLOWNG CODE PROCESSES THEM.                            24240000
*   /* TEST IF INPUT LOAD M0DULE CONTAINS ANY PSEUDO REGISTERS          24250000
*   IF PREGHERE='1'B                    /* IF PSEUDO REGS PRESENT       24260000
*     THEN                              /* THEN                         24270000
@948     EQU   *                                                  0658  24280000
NACESD16 TM    SWITCHES+1,B'00000100'                             0658  24290000
         BC    12,@947                                            0658  24300000
*       DO;                             /* GET READY TO PROCESS THEM    24310000
*         DASHLINE='1'B;                /* INDIC TO PRNT LINE OF DASHES 24320000
         OI    SWITCHES+1,B'00001000'                             0660  24330000
*         DUBLDASH='1'B;                /* PRINT ANOTHER LINE OF DASHES 24340000
         OI    SWITCHES+2,B'00010000'                             0661  24350000
*         PRHD='1'B;                    /* INDIC TO PRINT PREG HEADING  24360000
         OI    SWITCHES+1,B'00110000'                             0662  24370000
*         PRSHD='1'B;                   /* INDIC TO PRINT PREG SUBHEAD  24380000
*         CURRCESD=CETABPTR;            /* PT CURRCESD TO  CESDTAB BEG  24390000
         L     @5,CETABPTR                                        0664  24400000
         BC    15,@946                                            0666  24410000
*       END;                                                            24420000
*     ELSE                              /* ELSE BYPASS P REG PROCESSING 24430000
*       DO;                             /* FIND OUT WHERE TO BRANCH TO  24440000
*         /* TEST IF NUMERIC CESD PROCESSING IS BEING PERFORMED         24450000
*         IF NUMCESD='1'B               /* IF NUMCESD SWITCH IS ON      24460000
*           THEN                        /* THEN                         24470000
@947     TM    SWITCHES+2,B'01000000'                             0667  24480000
*             GO TO ACSORT;             /* GO TO ALPHA CESD SORT        24490000
         BC    01,ACSORT                                          0668  24500000
*           ELSE                        /* ELSE ALPHA PROCESSING ON     24510000
*             GO TO ARLD;               /* GO TO ALPHA RLD PROCESSING   24520000
         BC    15,ARLD                                            0669  24530000
*       END;                                                            24540000
* NACESD17: /* BRANCH HERE AFTER PROCESSING CURRENT PSEUDO REGISTER.    24550000
*              FOLLOWING CODE PROCESSES NEXT ONE.                       24560000
*   /* TEST IF ALL PSEUDO REGISTERS HAVE BEEN PROCESSED                 24570000
*   IF CURRCESD=CESDEND                 /* IF END OF CESD TABLE REACHED 24580000
*     THEN                              /* THEN                         24590000
@946     EQU   *                                                  0671  24600000
NACESD17 C     @5,CESDEND                                         0671  24610000
         BC    07,@945                                            0671  24620000
*       /* TEST IF NUMERIC CESD PROCESSING IS BEING PERFORMED           24630000
*       IF NUMCESD='1'B                 /* IF NUMCESD SWITCH IS ON      24640000
*         THEN                          /* THEN                         24650000
         TM    SWITCHES+2,B'01000000'                             0672  24660000
         BC    12,@944                                            0672  24670000
*           DO;                         /* PRINT TOTAL LENGTH OF P REGS 24680000
*             BININT(5:7)=PRLEN;        /* PREPARE TO CONVERT PR LENGTH 24690000
         MVC   BININT+4(3),PRLEN                                  0674  24700000
*             RELOC='0'B;               /* INDICATE NOT TO ADD RELOCFAC 24710000
         NI    SWITCHES+2,B'11111101'                             0675  24720000
*             RET=ADDR(NACESD18);       /* SET UP RETURN ADDRESS        24730000
         LA    @3,NACESD18                                        0676  24740000
*             GO TO BITOHEX;            /* CONV TOT LGTH TO PRINTBL HEX 24750000
         BC    15,BITOHEX                                         0677  24760000
* NACESD18:   /* BRANCH HERE TO RETURN FROM BITOHEX ROUTINE.            24770000
*                FOLLOWING CODE CONTINUES NACESD PROCESSING.            24780000
*             DATABUF(28:33)=HEXINT(2:7); /* PUT TOTAL LENGTH INTO BUF  24790000
NACESD18 MVC   BUFFERS+152(6),HEXINT+1                            0678  24800000
*             DATABUF(1:6)=HEADING1(28:33); /* PUT'LENGTH' INTO BUF     24810000
         MVC   BUFFERS+125(6),HEADING1+27                         0679  24820000
*             DATABUF(8:9)=HEADING3(19:20); /* PUT 'OF' INTO BUF        24830000
         MVC   BUFFERS+132(2),HEADING3+18                         0680  24840000
*             DATABUF(11:26)=HEADING4(8:23); /* PUT 'PSEUDO REGISTERS'  24850000
         MVC   BUFFERS+135(16),HEADING4+7                         0681  24860000
*             SP2='1'B;                 /* SET UP DATA BUF CON CHAR     24870000
         OI    SWITCHES+2,B'00100000'                             0682  24880000
*             RET=ADDR(ACSORT);         /* SET UP RETURN TO ALPHA SORT  24890000
         LA    @3,ACSORT                                          0683  24900000
*             GO TO WRITE;              /* LAST PRINT OF THIS DATA BUF  24910000
         BC    15,WRITE                                           0684  24920000
*           END;                                                        24930000
*         ELSE                          /* ELSE ALPHA CESD PROCESSNG ON 24940000
*           GO TO ARLD;                 /* GO TO ARLD PROCESSNG         24950000
*   /* TEST IF CESD ITEM IS A PSEUDO REGISTER                           24960000
*   IF CESDTYPE(5:8)^='0110'B           /* IF CESD ITEM IS NOT P REG    24970000
*     THEN                              /* THEN                         24980000
@943     EQU   *                                                  0687  24990000
@945     TM    10(@5),B'00000110'                                 0687  25000000
         BC    12,@942                                            0686  25010000
         TM    10(@5),B'00001001'                                 0687  25020000
         BC    08,@941                                            0687  25030000
*       DO;                             /* DON'T PROCESS IT             25040000
*         CURRCESD=CURRCESD+18;         /* LOC NEXT LINE IN CESD TABLE  25050000
@942     LA    @5,18(0,@5)                                        0689  25060000
*         GO TO NACESD17;               /* GO TO PROCESS NEXT ITEM      25070000
         BC    15,NACESD17                                        0690  25080000
*       END;                                                            25090000
*   PRLEN=CESDADDR+IDLENGTH;            /* COMPUTE TOT LENGTH OF P REGS 25100000
@941     MVC   @TEMP3+1(3),15(@5)                                 0692  25110000
         L     @F,@TEMP3                                          0692  25120000
         MVC   @TEMP3+1(3),11(@5)                                 0692  25130000
         A     @F,@TEMP3                                          0692  25140000
         ST    @F,@TEMP4                                          0692  25150000
         MVC   PRLEN(3),@TEMP4+1                                  0692  25160000
*   BININT(5:7)=IDLENGTH;               /* PREPARE TO CONVERT LENGTH    25170000
         MVC   BININT+4(3),15(@5)                                 0693  25180000
*   RELOC='0'B;                         /* INDICATE NOT TO ADD RELOCFAC 25190000
         NI    SWITCHES+2,B'11111101'                             0694  25200000
*   RET=ADDR(NACESD19);                 /* SET UP RETURN ADDRESS        25210000
         LA    @3,NACESD19                                        0695  25220000
*   GO TO BITOHEX;                      /* CONV LENGTH TO PRINTABLE HEX 25230000
         BC    15,BITOHEX                                         0696  25240000
* NACESD19: /* BRANCH HERE TO RETURN FROM BITOHEX ROUTINE.              25250000
*              FOLLOWING CODE CONTINUES NACESD PROCESSING.              25260000
*   DATABUF(40:45)=HEXINT(2:7);         /* PUT THIS PR'S LEN INTO BUF   25270000
NACESD19 MVC   BUFFERS+164(6),HEXINT+1                            0697  25280000
*   /* TEST IF LENGTH HAS A NONSIGNIFICANT ZERO                         25290000
*   IF DATABUF(44)=CHARZERO(1)          /* IF TENS CHARACTER IS 0       25300000
*     THEN                              /* THEN                         25310000
         CLC   BUFFERS+168(1),CHARZERO                            0698  25320000
         BC    07,@940                                            0698  25330000
*       DATABUF(44)=BLANK;              /* BLANK IT                     25340000
         MVC   BUFFERS+168(1),BLANK                               0699  25350000
*   BININT(5:7)=CESDADDR;               /* PREPARE TO CONVERT ORIGIN    25360000
@940     MVC   BININT+4(3),11(@5)                                 0700  25370000
*   RELOC='0'B;                         /* INDICATE NOT TO ADD RELOCFAC 25380000
         NI    SWITCHES+2,B'11111101'                             0701  25390000
*   RET=ADDR(NACESD20);                 /* SET UP RETURN ADDRESS        25400000
         LA    @3,NACESD20                                        0702  25410000
*   GO TO BITOHEX;                      /* CONV ORIGIN TO PRINTABLE HEX 25420000
         BC    15,BITOHEX                                         0703  25430000
* NACESD20: /* BRANCH HERE TO RETURN FROM BITOHEX ROUTINE.              25440000
*              FOLLOWING CODE CONTINUES NACESD PROCESSING.              25450000
*   /* TEST IF NUMERIC CESD PROCESSING IS BEING DONE                    25460000
*   IF NUMCESD='1'B                     /* IF NUMCESD SWITCH IS ON      25470000
*     THEN                              /* THEN                         25480000
NACESD20 TM    SWITCHES+2,B'01000000'                             0704  25490000
         BC    12,@93F                                            0704  25500000
*       DO;                             /* PUT DATA INTO BUFFER         25510000
*         DATABUF(19:24)=HEXINT(2:7);   /* PUT VECTOR LOC INTO BUFFER   25520000
         MVC   BUFFERS+143(6),HEXINT+1                            0706  25530000
*         DATABUF(30:37)=SYMBOL;        /* PUT NAME INTO BUFFER         25540000
         MVC   BUFFERS+154(8),2(@5)                               0707  25550000
         BC    15,@93E                                            0709  25560000
*       END;                                                            25570000
*     ELSE                              /* ELSE THE ORDER IS DIFFERENT  25580000
*       DO;                             /* PUT DATA INTO BUFFER         25590000
*         DATABUF(14:21)=SYMBOL;        /* PUT NAME INTO BUFFER         25600000
@93F     MVC   BUFFERS+138(8),2(@5)                               0710  25610000
*         DATABUF(25:30)=HEXINT(2:7);   /* PUT VECTOR LOC INTO BUFFER   25620000
         MVC   BUFFERS+149(6),HEXINT+1                            0711  25630000
*         DATABUF(34:45)=DATABUF(40:51); /* MOVE LENGTH INTO PLACE      25640000
         MVC   BUFFERS+158(12),BUFFERS+164                        0712  25650000
*       END;                                                            25660000
*   CURRCESD=CURRCESD+18;               /* LOC NEXT LINE IN CESD TABLE  25670000
@93E     LA    @5,18(0,@5)                                        0714  25680000
*   RET=ADDR(NACESD17);                 /* SET UP RETURN ADDRESS        25690000
         LA    @3,NACESD17                                        0715  25700000
*   /* TEST IF LINE OF DATA SHOULD GO ON THIS OR NEXT PAGE              25710000
*   IF LINECNT>60                       /* IF LINE COUNT GREATR THAN 60 25720000
*     THEN                              /* THEN                         25730000
         LA    @F,60                                              0716  25740000
         C     @F,LINECNT                                         0716  25750000
         BC    10,@93D                                            0716  25760000
*       DO;                             /* SET TWO SWITCHES             25770000
*         LINECT61='1'B;                /* INDIC TO PRINT ON NEXT PAGE  25780000
         OI    SWITCHES,B'00010000'                               0718  25790000
*         PRHD='1'B;                    /* INDIC TO PRINT PREG HEADING  25800000
         OI    SWITCHES+1,B'00100000'                             0719  25810000
*       END;                                                            25820000
*   GO TO WRITE;                        /* PRINT THIS BUFFER OF DATA    25830000
         BC    15,WRITE                                           0721  25840000
*                                                                       25850000
* /******************************************************************** 25860000
* /*   THE FOLLOWING SECTION OF CODE PRODUCES DATA FOR THE NUMERICAL    25870000
* /*   CROSS-REFERENCE LIST.  IF THE INPUT LOAD MODULE IS IN OVERLAY,   25880000
* /*   THIS SECTION IS ENTERED FOR EACH SEGMENT.  IF NOT IN OVERLAY,    25890000
* /*   THIS SECTION IS ENTERED ONCE.  EACH TIME ENTERED, THE ENTIRE     25900000
* /*   RLD TABLE IS SCANNED.                                            25910000
* /******************************************************************** 25920000
*                                                                       25930000
* NRLD:                                                                 25940000
*   NRHD='1'B;                          /* INDIC TO PRINT NRLD HEADING  25950000
NRLD     OI    SWITCHES+1,B'10001000'                             0722  25960000
*   DASHLINE='1'B;                      /* INDIC TO PRNT LINE OF DASHES 25970000
*   SAVCURR1=CURRCESD;                  /* SAVE CURRCESD                25980000
         ST    @5,SAVCURR1                                        0724  25990000
*   CURRLD=RLDTABAD;                    /* GET BEGINNING OF RLD TABLE   26000000
         L     @6,RLDTABAD                                        0725  26010000
* NRLD1: /* BRANCH HERE WHEN READY TO PROCESS ANOTHER RLD TABLE LINE.   26020000
*           FOLLOWING CODE SEARCHES FOR THIS NEXT LINE.                 26030000
*   /* TEST IF ALL NUMERIC RLD DATA (FOR CUR SEGMENT IF OVLY) PROCESSED 26040000
*   IF CURRLD=RLDEND                    /* IF END OF RLD TABLE REACHED  26050000
*     THEN                              /* THEN                         26060000
NRLD1    C     @6,RLDEND                                          0726  26070000
         BC    07,@93C                                            0726  26080000
*       DO;                             /* THIS SCAN IS FINISHED        26090000
*         NRHD='0'B;                    /* TURN NUMERIC RLD HEADING OFF 26100000
         NI    SWITCHES+1,B'01110111'                             0728  26110000
*         DASHLINE='0'B;                /* TURN LINE OF DASHES OFF      26120000
*         GO TO NACESD1;                /* RETURN TO NUM CESD ROUTINE   26130000
         BC    15,NACESD1                                         0730  26140000
*       END;                                                            26150000
*   /* TEST IF R AND P PTRS ARE VALID                                   26160000
*   IF RPTR>CESDTBID                    /* IF R PTR PTS BEYOND CESDTAB  26170000
*      | PPTR>CESDTBID                  /* OR IF P PTR PTS BEYOND IT    26180000
*     THEN                              /* THEN                         26190000
@93C     LH    @F,CESDTBID                                        0732  26200000
         CH    @F,0(0,@6)                                         0732  26210000
         BC    04,@93B                                            0732  26220000
         CH    @F,2(0,@6)                                         0732  26230000
         BC    10,@93A                                            0732  26240000
*       DO;                             /* PROCESS ERROR                26250000
*         ERRORS(3)='1'B;               /* RLD PTR IS INVALID           26260000
@93B     L     @7,PARMPTR                                         0734  26270000
         OI    32(@7),B'00100000'                                 0734  26280000
*         GO TO ABORT;                  /* ABORT (MESSAGE HMB103I)      26290000
         BC    15,ABORT                                           0735  26300000
*       END;                                                            26310000
*   N=INDEXTAB(PPTR);                   /* FIND INDEX INTO CESD TABLE   26320000
@93A     LH    @7,2(0,@6)                                         0737  26330000
         BCTR  @7,0                                               0737  26340000
         SLA   @7,1                                               0737  26350000
         L     @8,INDTABAD                                        0737  26360000
         LH    @F,0(@7,@8)                                        0737  26370000
         STH   @F,N                                               0737  26380000
*   CURRCESD=ADDR(CESDTAB(N));          /* POINT TO CESD TABLE LINE     26390000
         LR    @7,@F                                              0738  26400000
         BCTR  @7,0                                               0738  26410000
         MH    @7,@D2                                             0738  26420000
         L     @8,CETABPTR                                        0738  26430000
         LA    @5,0(@7,@8)                                        0738  26440000
*   SAVCURR3=CURRCESD;                  /* SAVE CURRCESD                26450000
         ST    @5,SAVCURR3                                        0739  26460000
*   /* TEST IF INPUT LOAD MODULE IS IN OVERLAY                          26470000
*   IF OVERLAY='1'B                     /* IF OVERLAY SWITCH IS ON      26480000
*     THEN                              /* THEN                         26490000
         L     @7,PARMPTR                                         0740  26500000
         TM    20(@7),B'01000000'                                 0740  26510000
         BC    12,@939                                            0740  26520000
*       /* TEST IF CESDTAB ITEM'S SEGNO = CURR SEG NO. IN PROCESS       26530000
*       IF SEGNO=CURSEGNO               /* IF THIS SEG IS IN PROCESS    26540000
*         THEN                          /* THEN                         26550000
         CLC   14(1,@5),CURSEGNO                                  0741  26560000
*           GO TO NRLD2;                /* GO TO PROCESS RLD TABLE LINE 26570000
         BC    08,NRLD2                                           0742  26580000
*         ELSE                          /* ELSE SEGNO^=CURSEGNO         26590000
*           DO;                         /* DON'T PROCESS THIS LINE      26600000
*             CURRLD=CURRLD+8;          /* LOC NEXT LINE IN RLD TABLE   26610000
         LA    @6,8(0,@6)                                         0744  26620000
*             GO TO NRLD1;              /* GO TO TRY NEXT RLD TAB LINE  26630000
         BC    15,NRLD1                                           0745  26640000
*           END;                                                        26650000
* NRLD2: /* BRANCH HERE WHEN AN RLD TABLE LINE IS FOUND FOR PROCESSING. 26660000
*           FOLLOWING CODE PROCESSES IT.                                26670000
*   N=INDEXTAB(RPTR);                   /* FIND INDEX INTO CESD TABLE   26680000
@939     EQU   *                                                  0747  26690000
NRLD2    LH    @7,0(0,@6)                                         0747  26700000
         BCTR  @7,0                                               0747  26710000
         SLA   @7,1                                               0747  26720000
         L     @8,INDTABAD                                        0747  26730000
         LH    @F,0(@7,@8)                                        0747  26740000
         STH   @F,N                                               0747  26750000
*   CURRCESD=ADDR(CESDTAB(N));          /* POINT TO CESD TABLE LINE     26760000
         LR    @7,@F                                              0748  26770000
         BCTR  @7,0                                               0748  26780000
         MH    @7,@D2                                             0748  26790000
         L     @8,CETABPTR                                        0748  26800000
         LA    @5,0(@7,@8)                                        0748  26810000
*   BININT(5:7)=RLDADDR;                /* PREP TO CONV ER'S LMOD LOC   26820000
         MVC   BININT+4(3),5(@6)                                  0749  26830000
*   RET=ADDR(NRLD3);                    /* SET UP RETURN ADDRESS        26840000
         LA    @3,NRLD3                                           0750  26850000
*   GO TO BITOHEX;                      /* CONV LMOD LOC TO PRNTBLE HEX 26860000
         BC    15,BITOHEX                                         0751  26870000
* NRLD3: /* BRANCH HERE TO RETURN FROM BITOHEX ROUTINE.                 26880000
*           FOLLOWING CODE CONTINUES NRLD PROCESSING.                   26890000
*   DATABUF(7:12)=HEXINT(2:7);          /* PUT ER'S LMOD LOC INTO BUF   26900000
NRLD3    MVC   BUFFERS+131(6),HEXINT+1                            0752  26910000
*   /* TEST IF CESD ITEM IS A RESOLVED EXTERNAL REF (LABEL REFERENCE)   26920000
*   IF CESDTYPE(5:8)='0011'B            /* IF CESD ITEM IS LR           26930000
*     THEN                              /* THEN                         26940000
         TM    10(@5),B'00000011'                                 0753  26950000
         BC    12,@938                                            0752  26960000
         TM    10(@5),B'00001100'                                 0753  26970000
         BC    05,@937                                            0753  26980000
*       DO;                             /* PROCESS IT                   26990000
*         DATABUF(56:63)=SYMBOL;        /* PUT REF'D TO SYMBOL INTO BUF 27000000
         MVC   BUFFERS+180(8),2(@5)                               0755  27010000
*         BININT(5:7)=CESDADDR;         /* PREP TO CONV SYMB'S LMOD LOC 27020000
         MVC   BININT+4(3),11(@5)                                 0756  27030000
*         RET=ADDR(NRLD4);              /* SET UP RETURN ADDRESS        27040000
         LA    @3,NRLD4                                           0757  27050000
*         GO TO BITOHEX;                /* CONV LMOD LOC TO PRINTBL HEX 27060000
         BC    15,BITOHEX                                         0758  27070000
* NRLD4:  /* BRANCH HERE TO RETURN FROM BITOHEX ROUTINE.                27080000
*            FOLLOWING CODE CONTINUES NRLD PROCESSING.                  27090000
*         DATABUF(72:77)=HEXINT(2:7);   /* PUT SYMBOL'S LMOD LOC IN BUF 27100000
NRLD4    MVC   BUFFERS+196(6),HEXINT+1                            0759  27110000
*         SAVCSDAD=CESDADDR;            /* SAVE CESDADDR                27120000
         MVC   SAVCSDAD+1(3),11(@5)                               0760  27130000
         MVI   SAVCSDAD,X'00'                                     0760  27140000
*         N=IDLENGTH(2:3);              /* PREPARE FOR NEXT INSTRUCTION 27150000
         MVC   @TEMP2+2(2),16(@5)                                 0761  27160000
         L     @F,@TEMP2                                          0761  27170000
         STH   @F,N                                               0761  27180000
*         N=INDEXTAB(N);                /* FIND INDEX INTO CESD TABLE   27190000
         LR    @7,@F                                              0762  27200000
         BCTR  @7,0                                               0762  27210000
         SLA   @7,1                                               0762  27220000
         L     @8,INDTABAD                                        0762  27230000
         LH    @F,0(@7,@8)                                        0762  27240000
         STH   @F,N                                               0762  27250000
*         CURRCESD=ADDR(CESDTAB(N));    /* POINT TO CESD TABLE LINE     27260000
         LR    @7,@F                                              0763  27270000
         BCTR  @7,0                                               0763  27280000
         MH    @7,@D2                                             0763  27290000
         L     @8,CETABPTR                                        0763  27300000
         LA    @5,0(@7,@8)                                        0763  27310000
*         BININT(5:7)=SAVCSDAD-CESDADDR; /* COMPUTE SYMBOL'S CSECT LOC  27320000
         MVC   @TEMP3+1(3),11(@5)                                 0764  27330000
         L     @F,@TEMP3                                          0764  27340000
         LCR   @F,@F                                              0764  27350000
         A     @F,SAVCSDAD                                        0764  27360000
         ST    @F,@TEMP4                                          0764  27370000
         MVC   BININT+4(3),@TEMP4+1                               0764  27380000
*         RELOC='0'B;                   /* INDICATE NOT TO ADD RELOCFAC 27390000
         NI    SWITCHES+2,B'11111101'                             0765  27400000
*         RET=ADDR(NRLD5);              /* SET UP RETURN ADDRESS        27410000
         LA    @3,NRLD5                                           0766  27420000
*         GO TO BITOHEX;                /* CONV CSECT LOC TO PRNTBL HEX 27430000
         BC    15,BITOHEX                                         0767  27440000
* NRLD5:  /* BRANCH HERE TO RETURN FROM BITOHEX ROUTINE.                27450000
*            FOLLOWING CODE CONTINUES NRLD PROCESSING.                  27460000
*         DATABUF(83:88)=HEXINT(2:7);   /* PUT SYMBL'S CSECT LOC IN BUF 27470000
NRLD5    MVC   BUFFERS+207(6),HEXINT+1                            0768  27480000
*         IF CESDTYPE(5:8)='0000'B      /* CHECK FOR SD        ZA01415  27490000
*            THEN DATABUF(96:103)=SYMBOL;                               27500000
         TM    10(@5),B'00001111'                                 0769  27510000
         BC    05,@936                                            0769  27520000
         MVC   BUFFERS+220(8),2(@5)                               0770  27530000
         BC    15,@935                                            0771  27540000
*                                /* IF SD, INSERT SYMBOL       ZA01415  27550000
*            ELSE DATABUF(95:102)=PRIVPRT;                              27560000
@936     MVC   BUFFERS+219(8),PRIVPRT                             0771  27570000
*                                /* IF PC, INSERT $PRIVATE     ZA01415  27580000
*         /* TEST IF INPUT LOAD MODULE IS IN OVERLAY                    27590000
*         IF OVERLAY='1'B               /* IF OVERLAY SWITCH IS ON      27600000
*           THEN                        /* THEN                         27610000
@935     L     @7,PARMPTR                                         0772  27620000
         TM    20(@7),B'01000000'                                 0772  27630000
         BC    12,@934                                            0772  27640000
*             DO;                       /* PROCESS SEGMENT NUMBER       27650000
*               BINARY=SEGNO;           /* PREPARE TO CONVERT SEG NO.   27660000
         SR    @2,@2                                              0774  27670000
         IC    @2,14(0,@5)                                        0774  27680000
*               BLNKZERO='1'B;          /* INDIC TO BLANK NONSIG ZEROS  27690000
         OI    SWITCHES+1,B'00000001'                             0775  27700000
*               RET=ADDR(NRLD6);        /* SET UP RETURN ADDRESS        27710000
         LA    @3,NRLD6                                           0776  27720000
*               GO TO BITODEC;          /* CONV SEG NO. TO PRINTBLE DEC 27730000
         BC    15,BITODEC                                         0777  27740000
* NRLD6:  /* BRANCH HERE TO RETURN FROM BITODEC ROUTINE.                27750000
*            FOLLOWING CODE CONTINUES NRLD PROCESSING.                  27760000
*               DATABUF(109:111)=DECINT(2:4); /* PUT SEG NO. INTO BUF   27770000
NRLD6    MVC   BUFFERS+233(3),DECINT+1                            0778  27780000
*             END;                                                      27790000
* NRLD7:  /* BRANCH HERE TO BYPASS ABOVE LR PROCESSING WHEN CESD ITEM   27800000
*            FOUND THROUGH P PTR IS NOT LR.  FOLLOWING CODE COMPUTES    27810000
*            EXTERNAL REFERENCE'S CSECT LOC.                            27820000
*         CURRCESD=SAVCURR3;            /* RESTORE CURRCESD FOUND       27830000
*                                          THROUGH P PTR                27840000
@934     EQU   *                                                  0780  27850000
NRLD7    L     @5,SAVCURR3                                        0780  27860000
*         BININT(5:7)=RLDADDR-CESDADDR; /* PREP TO CONV ER'S CSECT LOC  27870000
         MVC   @TEMP3+1(3),11(@5)                                 0781  27880000
         L     @F,@TEMP3                                          0781  27890000
         LCR   @F,@F                                              0781  27900000
         MVC   @TEMP3+1(3),5(@6)                                  0781  27910000
         A     @F,@TEMP3                                          0781  27920000
         ST    @F,@TEMP4                                          0781  27930000
         MVC   BININT+4(3),@TEMP4+1                               0781  27940000
*         RELOC='0'B;                   /* INDICATE NOT TO ADD RELOCFAC 27950000
         NI    SWITCHES+2,B'11111101'                             0782  27960000
*         RET=ADDR(NRLD8);              /* SET UP RETURN ADDRESS        27970000
         LA    @3,NRLD8                                           0783  27980000
*         GO TO BITOHEX;                /* CONV CSECT LOC TO PRNTBL HEX 27990000
         BC    15,BITOHEX                                         0784  28000000
* NRLD8:  /* BRANCH HERE TO RETURN FROM BITOHEX ROUTINE.                28010000
*            FOLOWING CODE CONTINUES NRLD PROCESSING.                   28020000
*         DATABUF(17:22)=HEXINT(2:7);   /* PUT ER'S CSECT LOC INTO BUF  28030000
NRLD8    MVC   BUFFERS+141(6),HEXINT+1                            0785  28040000
*         /* TEST IF CESD ITEM IS A SECTION DEFINITION                  28050000
*         IF CESDTYPE(5:8)='0000'B      /* IF CESD ITEM IS SD           28060000
*           THEN                        /* THEN                         28070000
         TM    10(@5),B'00001111'                                 0786  28080000
         BC    05,@933                                            0786  28090000
*             DATABUF(30:37)=SYMBOL;    /* PUT CSECT NAME INTO BUFFER   28100000
         MVC   BUFFERS+154(8),2(@5)                               0787  28110000
         BC    15,@932                                            0788  28120000
*           ELSE                        /* ELSE IT IS PRIVATE CODE      28130000
*             DATABUF(29:36)=PRIVPRT;   /* PUT '$PRIVATE' INTO BUFFER   28140000
@933     MVC   BUFFERS+153(8),PRIVPRT                             0788  28150000
*         /* TEST IF INPUT LOAD MODULE IS IN OVERLAY                    28160000
*         IF OVERLAY='1'B               /* IF OVERLAY SWITCH IS ON      28170000
*           THEN                        /* THEN                         28180000
@932     L     @7,PARMPTR                                         0789  28190000
         TM    20(@7),B'01000000'                                 0789  28200000
         BC    12,@931                                            0789  28210000
*             DO;                       /* PROCESS SEGMENT NUMBER       28220000
*               BINARY=SEGNO;           /* PREPARE TO CONVERT SEG NO.   28230000
         SR    @2,@2                                              0791  28240000
         IC    @2,14(0,@5)                                        0791  28250000
*               BLNKZERO='1'B;          /* INDIC TO BLANK NONSIG ZEROS  28260000
         OI    SWITCHES+1,B'00000001'                             0792  28270000
*               RET=ADDR(NRLD9);        /* SET UP RETURN ADDRESS        28280000
         LA    @3,NRLD9                                           0793  28290000
*               GO TO BITODEC;          /* CONV SEG NO. TO PRINTBLE DEC 28300000
         BC    15,BITODEC                                         0794  28310000
* NRLD9:        /* BRANCH HERE TO RETURN FROM BITODEC ROUTINE.          28320000
*                  FOLLOWING CODE CONTINUES NRLD PROCESSING.            28330000
*               DATABUF(43:45)=DECINT(2:4); /* PUT SEG NO. INTO BUFFER  28340000
NRLD9    MVC   BUFFERS+167(3),DECINT+1                            0795  28350000
*             END;                                                      28360000
*         CURRLD=CURRLD+8;              /* LOC NEXT LINE IN RLD TABLE   28370000
@931     LA    @6,8(0,@6)                                         0797  28380000
*         RLDSPRTD=RLDSPRTD+1;          /* INCR NO. OF RLD LINES PRINTD 28390000
         LA    @F,1                                               0798  28400000
         A     @F,RLDSPRTD                                        0798  28410000
         ST    @F,RLDSPRTD                                        0798  28420000
*         RET=ADDR(NRLD1);              /* SET UP RETURN ADDRESS        28430000
         LA    @3,NRLD1                                           0799  28440000
*         /* TEST IF LINE OF DATA SHOULD GO ON THIS OR NEXT PAGE        28450000
*         IF LINECNT>60                 /* IF LINE COUNT GREATR THAN 60 28460000
*           THEN                        /* THEN                         28470000
         LA    @F,60                                              0800  28480000
         C     @F,LINECNT                                         0800  28490000
         BC    10,@930                                            0800  28500000
*             DO;                       /* SET TWO SWITCHES             28510000
*               LINECT61='1'B;          /* INDIC TO PRINT ON NEXT PAGE  28520000
         OI    SWITCHES,B'00010000'                               0802  28530000
*               NRHD='1'B;              /* INDIC TO PRINT NRLD HEADING  28540000
         OI    SWITCHES+1,B'10000000'                             0803  28550000
*             END;                                                      28560000
*         GO TO WRITE;                  /* PRINT THIS BUFFER OF DATA    28570000
         BC    15,WRITE                                           0805  28580000
*       END;                                                            28590000
*   /* TEST IF CESD ITEM IS A RESOLVED EXT REF (SECTION DEF OR COMMON)  28600000
*   IF CESDTYPE(5:8)='0000'B            /* IF CESD ITEM IS SD           28610000
*      | CESDTYPE(5:8)='0101'B          /* OR CESD ITEM IS CM           28620000
*      | CESDTYPE(6:8)='100'B           /* OR CESD ITEM IS PC OY03410   28630000
*     THEN                              /* THEN                         28640000
@937     EQU   *                                                  0807  28650000
@938     TM    10(@5),B'00001111'                                 0807  28660000
         BC    08,@92F                                            0807  28670000
         TM    10(@5),B'00000101'                                 0807  28680000
         BC    12,@92E                                            0807  28690000
         TM    10(@5),B'00001010'                                 0807  28700000
         BC    08,@92D                                            0807  28710000
@92E     TM    10(@5),B'00000100'                                 0807  28720000
         BC    12,@92C                                            0806  28730000
         TM    10(@5),B'00000011'                                 0807  28740000
         BC    05,@92B                                            0807  28750000
*       DO;                             /* PROCESS IT                   28760000
@92D     EQU   *                                                  0808  28770000
*         /* TEST WHETHER TO PRINT $PRIVATE                    OY03410  28780000
*         IF CESDTYPE(6:8)='100'B       /* IS THIS PC?         OY03410  28790000
*           THEN                        /* IF IT IS,           OY03410  28800000
@92F     TM    10(@5),B'00000100'                                 0809  28810000
         BC    12,@92A                                            0808  28820000
         TM    10(@5),B'00000011'                                 0809  28830000
         BC    05,@929                                            0809  28840000
*             DO;                       /* PRINT $PRIVATE      OY03410  28850000
*               DATABUF(55:63)=PRIVPRT; /* REF'D SYMBOL        OY03410  28860000
         MVC   BUFFERS+179(8),PRIVPRT                             0811  28870000
         MVI   BUFFERS+187,C' '                                   0811  28880000
*               DATABUF(95:103)=PRIVPRT; /* REF'D CSECT        OY03410  28890000
         MVC   BUFFERS+219(8),PRIVPRT                             0812  28900000
         MVI   BUFFERS+227,C' '                                   0812  28910000
         BC    15,@928                                            0814  28920000
*            END;                                                       28930000
*         /* TEST WHETHER TO PRINT '$BLANKCOM' AS REF'D TO SYMB & CSECT 28940000
*         ELSE IF SYMBOL(1)=BLANK       /* IF SYMBOL FIELD IS BLANK     28950000
*           THEN                        /* THEN THE ITEM IS BLANK COM   28960000
@929     EQU   *                                                  0814  28970000
@92A     CLC   2(1,@5),BLANK                                      0814  28980000
         BC    07,@927                                            0814  28990000
*             DO;                       /* PUT '$BLANKCOM' INTO BUFFER  29000000
*               DATABUF(55:63)=BLCOMPRT; /* IT'S THE REF'D TO SYMBOL    29010000
         MVC   BUFFERS+179(9),BLCOMPRT                            0816  29020000
*               DATABUF(95:103)=BLCOMPRT; /* IT'S THE REF'D TO CSECT    29030000
         MVC   BUFFERS+219(9),BLCOMPRT                            0817  29040000
         BC    15,@926                                            0819  29050000
*             END;                                                      29060000
*           ELSE                        /* ELSE ITEM ISN'T BLANK COMMON 29070000
*             DO;                       /* PUT SYMBOL INTO BUFFER       29080000
*               DATABUF(56:63)=SYMBOL;  /* IT'S THE REF'D TO SYMBOL     29090000
@927     MVC   BUFFERS+180(8),2(@5)                               0820  29100000
*               DATABUF(96:103)=SYMBOL; /* IT'S THE REF'D TO CSECT      29110000
         MVC   BUFFERS+220(8),2(@5)                               0821  29120000
*             END;                                                      29130000
*         BININT(5:7)=CESDADDR;         /* PREP TO CONV SYMB'S LMOD LOC 29140000
@926     EQU   *                                                  0823  29150000
@928     MVC   BININT+4(3),11(@5)                                 0823  29160000
*         RET=ADDR(NRLD10);             /* SET UP RETURN ADDRESS        29170000
         LA    @3,NRLD10                                          0824  29180000
*         GO TO BITOHEX;                /* CONV LMOD LOC TO PRINTBL HEX 29190000
         BC    15,BITOHEX                                         0825  29200000
* NRLD10: /* BRANCH HERE TO RETURN FROM BITOHEX ROUTINE.                29210000
*            FOLLOWING CODE CONTINUES NRLD PROCESSING.                  29220000
*         DATABUF(72:77)=HEXINT(2:7);   /* PUT SYMBOL'S LMOD LOC IN BUF 29230000
NRLD10   MVC   BUFFERS+196(6),HEXINT+1                            0826  29240000
*         DATABUF(87:88)=CHARZERO;      /* PUT LOCATION '00' INTO BUF   29250000
         MVC   BUFFERS+211(2),CHARZERO                            0827  29260000
*         /* TEST IF INPUT LOAD MODULE IS IN OVERLAY                    29270000
*         IF OVERLAY='1'B               /* IF OVERLAY SWITCH IS ON      29280000
*           THEN                        /* THEN                         29290000
         L     @7,PARMPTR                                         0828  29300000
         TM    20(@7),B'01000000'                                 0828  29310000
         BC    12,@925                                            0828  29320000
*             DO;                       /* PROCESS SEGMENT NUMBER       29330000
*               BINARY=SEGNO;           /* PREPARE TO CONVERT SEG NO.   29340000
         SR    @2,@2                                              0830  29350000
         IC    @2,14(0,@5)                                        0830  29360000
*               BLNKZERO='1'B;          /* INDIC TO BLANK NONSIG ZEROS  29370000
         OI    SWITCHES+1,B'00000001'                             0831  29380000
*               RET=ADDR(NRLD11);       /* SET UP RETURN ADDRESS        29390000
         LA    @3,NRLD11                                          0832  29400000
*               GO TO BITODEC;          /* CONV SEG NO. TO PRINTBLE DEC 29410000
         BC    15,BITODEC                                         0833  29420000
* NRLD11:       /* BRANCH HERE TO RETURN FROM BITODEC ROUTINE.          29430000
*                  FOLLOWING CODE CONTINUES NRLD PROCESSING.            29440000
*               DATABUF(109:111)=DECINT(2:4); /* PUT SEG NO. INTO BUF   29450000
NRLD11   MVC   BUFFERS+233(3),DECINT+1                            0834  29460000
*             END;                                                      29470000
*         GO TO NRLD7;                  /* REST SAME AS LR PROCESSING   29480000
         BC    15,NRLD7                                           0836  29490000
*       END;                                                            29500000
*   /* TEST IF CESD ITEM IS AN UNRESOLVED EXTERNAL REFERENCE (ER)       29510000
*   IF CESDTYPE(5:8)='0010'B            /* IF CESD ITEM IS ER           29520000
*     THEN                              /* THEN                         29530000
@92B     EQU   *                                                  0838  29540000
@92C     TM    10(@5),B'00000010'                                 0838  29550000
         BC    12,@924                                            0837  29560000
         TM    10(@5),B'00001101'                                 0838  29570000
         BC    05,@923                                            0838  29580000
*       DO;                             /* FIND OUT WHICH KIND          29590000
*         DATABUF(56:63)=SYMBOL;        /* PUT REF'D TO SYMBOL INTO BUF 29600000
         MVC   BUFFERS+180(8),2(@5)                               0840  29610000
*         /* TEST IF UNRESOLVED ER IS SIMPLE UNRESOLVED                 29620000
*         IF IDLENGTH(1)=ZERO(1)        /* IF ID IS 0                   29630000
*           THEN                        /* THEN                         29640000
         CLC   15(1,@5),ZERO                                      0841  29650000
         BC    07,@922                                            0841  29660000
*             DATABUF(95:105)=UNRESPRT; /* PUT '$UNRESOLVED' INTO BUF   29670000
         MVC   BUFFERS+219(11),UNRESPRT                           0842  29680000
         BC    15,@921                                            0843  29690000
*           ELSE                        /* ELSE TEST FOR NEVER-CALL     29700000
*             /* TEST IF UNRESOLVED ER IS NEVER-CALL                    29710000
*             IF IDLENGTH(1)=NEVRCALL   /* IF ID IS 6                   29720000
*               THEN                    /* THEN                         29730000
@922     CLC   15(1,@5),NEVRCALL                                  0843  29740000
         BC    07,@920                                            0843  29750000
*                 DATABUF(95:105)=NEVCLPRT; /* PUT '$NEVER-CALL' IN BUF 29760000
         MVC   BUFFERS+219(11),NEVCLPRT                           0844  29770000
         BC    15,@91F                                            0845  29780000
*               ELSE                    /* ELSE                         29790000
*                 DO;                   /* PROCESS ERROR                29800000
*                   ERRORS(3)='1'B;     /* RLD PTR IS INVALID           29810000
@920     L     @7,PARMPTR                                         0846  29820000
         OI    32(@7),B'00100000'                                 0846  29830000
*                   GO TO ABORT;        /* ABORT (MESSAGE HMB103I)      29840000
         BC    15,ABORT                                           0847  29850000
*                 END;                                                  29860000
*         GO TO NRLD7;                  /* REST SAME AS LR PROCESSING   29870000
*       END;                                                            29880000
*   /* TEST IF CESD ITEM IS AN UNRESOLVED WEAK EXTERNAL REFERENCE       29890000
*   IF CESDTYPE(5:8)='1010'B            /* IF CESD ITEM IS WX           29900000
*     THEN                              /* THEN                         29910000
@923     EQU   *                                                  0851  29920000
@924     TM    10(@5),B'00001010'                                 0851  29930000
         BC    12,@91E                                            0850  29940000
         TM    10(@5),B'00000101'                                 0851  29950000
         BC    05,@91D                                            0851  29960000
*       DO;                             /* PROCESS IT                   29970000
*         DATABUF(56:63)=SYMBOL;        /* PUT REF'D TO SYMBOL INTO BUF 29980000
         MVC   BUFFERS+180(8),2(@5)                               0853  29990000
*         DATABUF(95:108)=UNREWPRT;     /* PUT '$UNRESOLVED(W)' IN BUF  30000000
         MVC   BUFFERS+219(14),UNREWPRT                           0854  30010000
*         GO TO NRLD7;                  /* REST SAME AS LR PROCESSING   30020000
         BC    15,NRLD7                                           0855  30030000
*       END;                                                            30040000
*                                                                       30050000
* /******************************************************************** 30060000
* /*   THE FOLLOWING SECTION OF CODE SORTS CESD TABLE LINES INTO        30070000
* /*   ASCENDING ALPHABETICAL ORDER ACCORDING TO THE SYMBOL FIELD       30080000
* /*   IN EACH LINE.  FOR PC, PD, AND BLANK CM LINES (ALL THEIR         30090000
* /*   SYMBOL FIELDS CONTAIN BLANKS), APPROPRIATE SYMBOLS ARE FIRST     30100000
* /*   PUT INTO THESE FIELDS, SO THESE LINES MAY BE SORTED ALONG        30110000
* /*   WITH THE SD, LR, ER, AND NAMED CM LINES.  THEN THE SORT IS       30120000
* /*   DONE FROM THE CESD TABLE, WITHOUT USING TEMPORARY AREAS FOR      30130000
* /*   COMPARISONS.  THE INDEX TABLE IS ALSO REBUILT HERE.  THIS        30140000
* /*   SECTION OF CODE IS ENTERED AFTER ALL NACESD AND NRLD             30150000
* /*   PROCESSING IS FINISHED.                                          30160000
* /******************************************************************** 30170000
*                                                                       30180000
* ACSORT:                                                               30190000
*   LINECNT=61;                         /* INDIC TO SKIP TO NEXT PAGE   30200000
@91D     EQU   *                                                  0857  30210000
@91E     EQU   *                                                  0857  30220000
ACSORT   LA    @F,61                                              0857  30230000
         ST    @F,LINECNT                                         0857  30240000
*   NUMCESD='0'B;                       /* INDIC NUM CESD ROUTINE DONE  30250000
         NI    SWITCHES+2,B'10111111'                             0858  30260000
*   M=NUMCESDS;                         /* INIT M TO NO. CESDTAB ENTS   30270000
         LH    @F,NUMCESDS                                        0859  30280000
         ST    @F,M                                               0859  30290000
*   CURRCESD=CETABPTR;                  /* GET BEGINNING OF CESD TABLE  30300000
         L     @5,CETABPTR                                        0860  30310000
*   /* PUT $P, $E, $S, OR $B IN SYMBOL FIELD OF APPROPRIATE CESD ITEM   30320000
*   DO I=1 TO NUMCESDS;                 /* LOOP THROUGH CESD TABLE      30330000
         LA    @2,1                                               0861  30340000
         BC    15,@DO91B                                          0861  30350000
*     /* TEST IF CESD ITEM IS PRIVATE CODE                              30360000
*     IF CESDTYPE(6:8)='100'B           /* IF CESD ITEM IS PRIVATE CODE 30370000
*       THEN                            /* THEN                         30380000
@DO91C   TM    10(@5),B'00000100'                                 0862  30390000
         BC    12,@918                                            0861  30400000
         TM    10(@5),B'00000011'                                 0862  30410000
         BC    05,@917                                            0862  30420000
*        /* TEST IF CESD ITEM IS PRIVATE CODE MARKED DELETE (PD)        30430000
*        IF CESDTYPE(4)='0'B            /* IF CESD ITEM IS NOT PD       30440000
*           THEN                        /* THEN                         30450000
         TM    10(@5),B'00010000'                                 0863  30460000
         BC    05,@916                                            0863  30470000
*             DO;                       /* IT IS PC                     30480000
*               SYMBOL(2:3)=PRIVPRT(1:2); /* PUT '$P' INTO SYMBOL FIELD 30490000
         MVC   3(2,@5),PRIVPRT                                    0865  30500000
*               SYMBOL(4:6)=CESDADDR;   /* PUT CESDADDR INTO SYMB FIELD 30510000
         MVC   5(3,@5),11(@5)                                     0866  30520000
*               GO TO ACSORT1;          /* GO TO INCREMENT CURRCESD     30530000
         BC    15,ACSORT1                                         0867  30540000
*             END;                                                      30550000
*           ELSE                        /* ELSE CESD ITEM IS PD         30560000
*             DO;                       /* TEST FOR ENTAB OR SEGTAB     30570000
*               /* TEST IF CESD ITEM IS ENTAB                           30580000
*               IF CESDADDR^=ZERO       /* IF CESDADDR IS NOT 0         30590000
*                 THEN                  /* THEN ITEM IS ENTAB           30600000
@916     MVC   @TEMP3+1(3),ZERO                                   0870  30610000
         L     @F,@TEMP3                                          0870  30620000
         MVC   @TEMP3+1(3),11(@5)                                 0870  30630000
         C     @F,@TEMP3                                          0870  30640000
         BC    08,@914                                            0870  30650000
*                   DO;                 /* PROCESS IT                   30660000
*                     SYMBOL(2:3)=ENTABPRT(1:2); /* '$E' IN SYMB FIELD  30670000
         MVC   3(2,@5),ENTABPRT                                   0872  30680000
*                     SYMBOL(4:6)=CESDADDR; /* CESDADDR INTO SYMB FIELD 30690000
         MVC   5(3,@5),11(@5)                                     0873  30700000
*                     GO TO ACSORT1;    /* LOOP                         30710000
         BC    15,ACSORT1                                         0874  30720000
*                   END;                                                30730000
*                 ELSE                  /* ELSE ITEM IS SEGTAB          30740000
*                   DO;                 /* PROCESS IT                   30750000
*                     SYMBOL(2:3)=SEGTBPRT(1:2); /* '$S' IN SYMB FIELD  30760000
@914     MVC   3(2,@5),SEGTBPRT                                   0877  30770000
*                     GO TO ACSORT1;    /* GO TO INCREMENT CURRCESD     30780000
         BC    15,ACSORT1                                         0878  30790000
*                   END;                                                30800000
*             END;                                                      30810000
@913     EQU   *                                                  0880  30820000
*     /* TEST IF CESD ITEM IS COMMON AREA                               30830000
*     IF CESDTYPE(5:8)='0101'B          /* IF CESD ITEM IS CM           30840000
*       THEN                            /* THEN                         30850000
@915     EQU   *                                                  0881  30860000
@917     EQU   *                                                  0881  30870000
@918     TM    10(@5),B'00000101'                                 0881  30880000
         BC    12,@912                                            0880  30890000
         TM    10(@5),B'00001010'                                 0881  30900000
         BC    05,@911                                            0881  30910000
*         /* TEST IF COMMON AREA IS BLANK COMMON                        30920000
*         IF SYMBOL(1)=BLANK            /* IF SYMBOL FIELD IS BLANK     30930000
*           THEN                        /* THEN ITEM IS BLANK COMMON    30940000
         CLC   2(1,@5),BLANK                                      0882  30950000
         BC    07,@910                                            0882  30960000
*             SYMBOL(2:3)=BLCOMPRT(1:2); /* PUT '$B' INTO SYMBOL FIELD  30970000
         MVC   3(2,@5),BLCOMPRT                                   0883  30980000
* ACSORT1: /* BRANCH HERE AFTER PRIVATE CODE OR COMMON AREA IS DETECTED 30990000
*             AND FLAGGED IN CESD TABLE.  FOLLOWING CODE LOOPS.         31000000
*     CURRCESD=CURRCESD+18;             /* LOC NEXT LINE IN CESD TABLE  31010000
@910     EQU   *                                                  0884  31020000
@911     EQU   *                                                  0884  31030000
@912     EQU   *                                                  0884  31040000
ACSORT1  LA    @5,18(0,@5)                                        0884  31050000
*   END;                                /* LOOP                         31060000
* ACSORT2: /* BRANCH HERE WHEN A PASS THROUGH THE CESD TABLE IS         31070000
*             FINISHED.  FOLLOWING CODE TESTS IF SORT IS FINISHED.      31080000
*   M=M/2;                              /* DIVIDE ARRAY IN HALF         31090000
         AH    @2,@D3                                             0885  31100000
@DO91B   CH    @2,NUMCESDS                                        0885  31110000
         BC    12,@DO91C                                          0885  31120000
ACSORT2  L     @E,M                                               0886  31130000
         SRDA  @E,32                                              0886  31140000
         LA    @0,2                                               0886  31150000
         DR    @E,@0                                              0886  31160000
         ST    @F,M                                               0886  31170000
*   /* TEST IF SORT IS FINISHED                                         31180000
*   IF M=0                              /* IF M IS 0                    31190000
*     THEN                              /* THEN SORT IS FINISHED        31200000
         SR    @F,@F                                              0887  31210000
         C     @F,M                                               0887  31220000
         BC    07,@90F                                            0887  31230000
*       DO;                             /* REBUILD THE INDEX TABLE      31240000
*         /* REBUILD THE INDEX TABLE                                    31250000
*         DO J=1 TO NUMCESDS;           /* LOOP THRU CESD & INDEX TABS  31260000
         LA    @F,1                                               0889  31270000
         BC    15,@DO90D                                          0889  31280000
*           N=CESDTAB(J,1:2);           /* USE CESDID AS INDEX          31290000
@DO90E   L     @7,J                                               0890  31300000
         BCTR  @7,0                                               0890  31310000
         MH    @7,@D2                                             0890  31320000
         L     @8,CETABPTR                                        0890  31330000
         LA    @A,0(@7,@8)                                        0890  31340000
         MVC   @TEMP2+2(2),0(@A)                                  0890  31350000
         L     @F,@TEMP2                                          0890  31360000
         STH   @F,N                                               0890  31370000
*           INDEXTAB(N)=J;              /* MAKE ENTRY IN INDEX TABLE    31380000
         L     @F,J                                               0891  31390000
         LH    @7,N                                               0891  31400000
         BCTR  @7,0                                               0891  31410000
         SLA   @7,1                                               0891  31420000
         L     @8,INDTABAD                                        0891  31430000
         STH   @F,0(@7,@8)                                        0891  31440000
*         END;                          /* LOOP                         31450000
*         GO TO NACESD;                 /* GO TO ALPHA CESD PROCESSING  31460000
         L     @F,J                                               0892  31470000
         AH    @F,@D3                                             0892  31480000
@DO90D   ST    @F,J                                               0892  31490000
         CH    @F,NUMCESDS                                        0892  31500000
         BC    12,@DO90E                                          0892  31510000
         BC    15,NACESD                                          0893  31520000
*       END;                                                            31530000
*   K=NUMCESDS-M;                       /* SET INDEX K                  31540000
@90F     LH    @F,NUMCESDS                                        0895  31550000
         S     @F,M                                               0895  31560000
         ST    @F,K                                               0895  31570000
*   J=1;                                /* SET INDEX J TO 1             31580000
         LA    @F,1                                               0896  31590000
         ST    @F,J                                               0896  31600000
* ACSORT3: /* BRANCH HERE TO COMPLETE A PASS THROUGH THE CESD TABLE.    31610000
*             FOLLOWING CODE SETS INDEX I.                              31620000
*   I=J;                                /* SET INDEX I                  31630000
ACSORT3  L     @2,J                                               0897  31640000
* ACSORT4: /* BRANCH HERE WHEN TWO NEW COMPARANDS ARE FOUND.            31650000
*             FOLLOWING CODE COMPARES THEM.                             31660000
*   IM=I+M;                             /* SET INDEX IM                 31670000
ACSORT4  L     @F,M                                               0898  31680000
         AR    @F,@2                                              0898  31690000
         ST    @F,IM                                              0898  31700000
*   /* TEST WHICH IS GREATER OF TWO CESD TABLE SYMBOLS                  31710000
*   IF CESDTAB(I,3:10)<=CESDTAB(IM,3:10) /* IF SECOND GREATER THAN 1ST  31720000
*     THEN                              /* THEN                         31730000
         LR    @7,@F                                              0899  31740000
         BCTR  @7,0                                               0899  31750000
         MH    @7,@D2                                             0899  31760000
         L     @8,CETABPTR                                        0899  31770000
         LA    @E,2(@7,@8)                                        0899  31780000
         LR    @7,@2                                              0899  31790000
         BCTR  @7,0                                               0899  31800000
         MH    @7,@D2                                             0899  31810000
         LA    @A,2(@7,@8)                                        0899  31820000
         CLC   0(8,@A),0(@E)                                      0899  31830000
*       GO TO ACSORT5;                  /* DON'T EXCHANGE CESD LINES    31840000
         BC    12,ACSORT5                                         0900  31850000
*   TEMPAREA(1:18)=CESDTAB(I);          /* FIRST GOES INTO TEMP AREA    31860000
         LA    @E,0(@7,@8)                                        0901  31870000
         MVC   TEMPAREA(18),0(@E)                                 0901  31880000
*   CESDTAB(I)=CESDTAB(IM);             /* SECOND GOES INTO FIRST       31890000
         L     @7,IM                                              0902  31900000
         BCTR  @7,0                                               0902  31910000
         MH    @7,@D2                                             0902  31920000
         LA    @E,0(@7,@8)                                        0902  31930000
         LR    @7,@2                                              0902  31940000
         BCTR  @7,0                                               0902  31950000
         MH    @7,@D2                                             0902  31960000
         LA    @A,0(@7,@8)                                        0902  31970000
         MVC   0(18,@A),0(@E)                                     0902  31980000
*   CESDTAB(IM)=TEMPAREA(1:18);         /* FIRST GOES INTO SECOND       31990000
         L     @7,IM                                              0903  32000000
         BCTR  @7,0                                               0903  32010000
         MH    @7,@D2                                             0903  32020000
         LA    @A,0(@7,@8)                                        0903  32030000
         MVC   0(18,@A),TEMPAREA                                  0903  32040000
*   I=I-M;                              /* DECREMENT INDEX I BY M       32050000
         S     @2,M                                               0904  32060000
*   /* TEST IF BEGINNING OF CESD TABLE HAS BEEN REACHED                 32070000
*   IF I>=1                             /* IF BEGINNING NOT REACHED     32080000
*     THEN                              /* THEN                         32090000
         CH    @2,@D3                                             0905  32100000
*       GO TO ACSORT4;                  /* GO TO COMPARE SYMBOLS        32110000
         BC    10,ACSORT4                                         0906  32120000
* ACSORT5: /* BRANCH HERE TO BYPASS SWAPPING TWO CESD TABLE LINES.      32130000
*             FOLLOWING CODE TESTS FOR SCAN COMPLETION.                 32140000
*   J=J+1;                              /* INCREMENT INDEX J BY 1       32150000
ACSORT5  LA    @F,1                                               0907  32160000
         A     @F,J                                               0907  32170000
         ST    @F,J                                               0907  32180000
*   /* TEST IF THIS SCAN IS FINISHED                                    32190000
*   IF J>K                              /* IF INDEX J GREATER THAN K    32200000
*     THEN                              /* THEN                         32210000
         L     @F,K                                               0908  32220000
         C     @F,J                                               0908  32230000
*       GO TO ACSORT2;                  /* GO TO POSSIBLY SCAN AGAIN    32240000
         BC    04,ACSORT2                                         0909  32250000
*     ELSE                              /* ELSE SCAN ISN'T FINISHED     32260000
*       GO TO ACSORT3;                  /* GO TO FINISH IT              32270000
         BC    15,ACSORT3                                         0910  32280000
*                                                                       32290000
* /******************************************************************** 32300000
* /*   THE FOLLOWING SECTION OF CODE PRODUCES DATA FOR THE              32310000
* /*   ALPHABETICAL CROSS-REFERENCE LIST.  THIS SECTION IS ENTERED      32320000
* /*   ONCE: AFTER ALPHABETICAL CESD PROCESSING.                        32330000
* /******************************************************************** 32340000
*                                                                       32350000
* ARLD:                                                                 32360000
*   /* TEST IF THE LOAD MODULE CONTAINS ANY EXTERNAL REFERENCES         32370000
*   IF EREFPRES='0'B                    /* IF EREFPRES SWITCH IS OFF    32380000
*     THEN                              /* THEN                         32390000
ARLD     TM    SWITCHES+1,B'00000010'                             0911  32400000
*       GO TO FINISH;                   /* HMBLKXRF IS FINISHED         32410000
         BC    08,FINISH                                          0912  32420000
*   LINECNT=61;                         /* INDIC TO PRINT ON NEXT PAGE  32430000
         LA    @F,61                                              0913  32440000
         ST    @F,LINECNT                                         0913  32450000
*   CURRLD=RLDTABAD;                    /* GET BEGINNING OF RLD TABLE   32460000
         L     @6,RLDTABAD                                        0914  32470000
*   CURRCESD=CETABPTR;                  /* GET BEGINNING OF CESD TABLE  32480000
         L     @5,CETABPTR                                        0915  32490000
*   ARHD='1'B;                          /* TURN ALPHA RLD HEADING ON    32500000
         OI    SWITCHES+1,B'01000000'                             0916  32510000
* ARLD1: /* BRANCH HERE WHEN READY TO PROCESS ANOTHER RLD TABLE LINE.   32520000
*           FOLLOWING CODE SEARCHES FOR THIS NEXT LINE.                 32530000
*   /* TEST IF A PASS THROUGH THE RLD TABLE IS COMPLETE                 32540000
*      (THERE IS ONE PASS FOR EACH CESD TABLE ITEM)                     32550000
*   IF CURRLD=RLDEND                    /* IF END OF RLD TABLE REACHED  32560000
*     THEN                              /* THEN                         32570000
ARLD1    C     @6,RLDEND                                          0917  32580000
         BC    07,@90A                                            0917  32590000
*       DO;                             /* DO THE FOLLOWING             32600000
*         CURRLD=RLDTABAD;              /* GET BEG OF RLD TABLE AGAIN   32610000
         L     @6,RLDTABAD                                        0919  32620000
*         CURRCESD=CURRCESD+18;         /* LOC NEXT LINE IN CESD TABLE  32630000
         LA    @5,18(0,@5)                                        0920  32640000
*         /* TEST IF ALPHABETIC RLD PROCESSING IS COMPLETE              32650000
*         IF CURRCESD=CESDEND           /* IF END OF CESD TABLE REACHED 32660000
*           THEN                        /* THEN                         32670000
         C     @5,CESDEND                                         0921  32680000
*             GO TO FINISH;             /* IMBLKXRF IS FINISHED         32690000
         BC    08,FINISH                                          0922  32700000
*       END;                                                            32710000
*   /* TEST IF R PTR MATCHES CESD ID                                    32720000
*   IF CESDID=RPTR                      /* IF CESD ID = R PTR           32730000
*     THEN                              /* THEN                         32740000
@90A     LH    @F,0(0,@6)                                         0924  32750000
         CH    @F,0(0,@5)                                         0924  32760000
*       GO TO ARLD2;                    /* GO TO PROCESS THIS MATCHUP   32770000
         BC    08,ARLD2                                           0925  32780000
*     ELSE                              /* ELSE CESD ID ^= R PTR        32790000
*       DO;                             /* TRY AGAIN                    32800000
*         CURRLD=CURRLD+8;              /* LOC NEXT LINE IN RLD TABLE   32810000
         LA    @6,8(0,@6)                                         0927  32820000
*         GO TO ARLD1;                  /* GO TO TRY AGAIN FOR MATCHUP  32830000
         BC    15,ARLD1                                           0928  32840000
*       END;                                                            32850000
* ARLD2: /* BRANCH HERE WHEN AN RLD TABLE LINE IS FOUND FOR PROCESSING. 32860000
*           FOLLOWING CODE CONVERTS ITS RLD ADDRESS.                    32870000
*   BININT(5:7)=RLDADDR;                /* PREP TO CONV REF'S LMOD LOC  32880000
ARLD2    MVC   BININT+4(3),5(@6)                                  0930  32890000
*   RET=ADDR(ARLD3);                    /* SET UP RETURN ADDRESS        32900000
         LA    @3,ARLD3                                           0931  32910000
*   GO TO BITOHEX;                      /* CONV LMOD LOC TO PRNTBLE HEX 32920000
         BC    15,BITOHEX                                         0932  32930000
* ARLD3: /* BRANCH HRE TO RETURN FROM BITOHEX ROUTINE.                  32940000
*           FOLLOWING CODE CONTINUES ARLD PROCESSING.                   32950000
*   DATABUF(70:75)=HEXINT(2:7);         /* PUT ER'S LMOD LOC INTO BUF   32960000
ARLD3    MVC   BUFFERS+194(6),HEXINT+1                            0933  32970000
*   /* TEST IF CESD ITEM IS A RESOLVED EXTERNAL REF (LABEL REFERENCE)   32980000
*   IF CESDTYPE(5:8)='0011'B            /* IF CESD ITEM IS LR           32990000
*     THEN                              /* THEN                         33000000
         TM    10(@5),B'00000011'                                 0934  33010000
         BC    12,@909                                            0933  33020000
         TM    10(@5),B'00001100'                                 0934  33030000
         BC    05,@908                                            0934  33040000
*       DO;                             /* PROCESS IT                   33050000
*         DATABUF(2:9)=SYMBOL;          /* PUT REF'D TO SYMBOL INTO BUF 33060000
         MVC   BUFFERS+126(8),2(@5)                               0936  33070000
*         BININT(5:7)=CESDADDR;         /* PREP TO CONV SYMB'S LMOD LOC 33080000
         MVC   BININT+4(3),11(@5)                                 0937  33090000
*         RET=ADDR(ARLD4);              /* SET UP RETURN ADDRESS        33100000
         LA    @3,ARLD4                                           0938  33110000
*         GO TO BITOHEX;                /* CONV LMOD LOC TO PRINTBL HEX 33120000
         BC    15,BITOHEX                                         0939  33130000
* ARLD4:  /* BRACH HERE TO RETURN FROM BITOHEX ROUTINE.                 33140000
*            FOLLOWING CODE CONTINUES ARLD PROCESSING.                  33150000
*         DATABUF(14:19)=HEXINT(2:7);   /* PUT SYMBOL'S LMOD LOC IN BUF 33160000
ARLD4    MVC   BUFFERS+138(6),HEXINT+1                            0940  33170000
*         SAVCURR2=CURRCESD;            /* SAVE CURRCESD                33180000
         ST    @5,SAVCURR2                                        0941  33190000
*         SAVCSDAD=CESDADDR;            /* SAVE CESDADDR                33200000
         MVC   SAVCSDAD+1(3),11(@5)                               0942  33210000
         MVI   SAVCSDAD,X'00'                                     0942  33220000
*         N=IDLENGTH(2:3);              /* PREPARE FOR NEXT INSTRUCTION 33230000
         MVC   @TEMP2+2(2),16(@5)                                 0943  33240000
         L     @F,@TEMP2                                          0943  33250000
         STH   @F,N                                               0943  33260000
*         N=INDEXTAB(N);                /* FIND INDEX INTO CESD TABLE   33270000
         LR    @7,@F                                              0944  33280000
         BCTR  @7,0                                               0944  33290000
         SLA   @7,1                                               0944  33300000
         L     @8,INDTABAD                                        0944  33310000
         LH    @F,0(@7,@8)                                        0944  33320000
         STH   @F,N                                               0944  33330000
*         CURRCESD=ADDR(CESDTAB(N));    /* POINT TO CESD TABLE LINE     33340000
         LR    @7,@F                                              0945  33350000
         BCTR  @7,0                                               0945  33360000
         MH    @7,@D2                                             0945  33370000
         L     @8,CETABPTR                                        0945  33380000
         LA    @5,0(@7,@8)                                        0945  33390000
*         BININT(5:7)=SAVCSDAD-CESDADDR; /* PREP TO CONV SYM'S CSECT LC 33400000
         MVC   @TEMP3+1(3),11(@5)                                 0946  33410000
         L     @F,@TEMP3                                          0946  33420000
         LCR   @F,@F                                              0946  33430000
         A     @F,SAVCSDAD                                        0946  33440000
         ST    @F,@TEMP4                                          0946  33450000
         MVC   BININT+4(3),@TEMP4+1                               0946  33460000
*         RELOC='0'B;                   /* INDICATE NOT TO ADD RELOCFAC 33470000
         NI    SWITCHES+2,B'11111101'                             0947  33480000
*         RET=ADDR(ARLD5);              /* SET UP RETURN ADDRESS        33490000
         LA    @3,ARLD5                                           0948  33500000
*         GO TO BITOHEX;                /* CONV CSECT LOC TO PRNTBL HEX 33510000
         BC    15,BITOHEX                                         0949  33520000
* ARLD5:  /* BRANCH HERE TO RETURN FROM BITOHEX ROUTINE.                33530000
*            FOLLOWING CODE CONTINUES ARLD PROCESSING.                  33540000
*         DATABUF(25:30)=HEXINT(2:7);   /* PUT SYMBL'S CSECT LOC IN BUF 33550000
ARLD5    MVC   BUFFERS+149(6),HEXINT+1                            0950  33560000
*         IF SYMBOL(2:3)=PRIVPRT(1:2)   /* CHECK FOR $P        ZA01415  33570000
*            THEN DATABUF(37:44)=PRIVPRT;                               33580000
         CLC   3(2,@5),PRIVPRT                                    0951  33590000
         BC    07,@907                                            0951  33600000
         MVC   BUFFERS+161(8),PRIVPRT                             0952  33610000
         BC    15,@906                                            0953  33620000
*                              /* IF FOUND, INSERT $PRIVATE    ZA01415  33630000
*            ELSE DATABUF(38:45)=SYMBOL;                                33640000
@907     MVC   BUFFERS+162(8),2(@5)                               0953  33650000
*                              /* IF NOT, INSERT SYMBOL        ZA01415  33660000
*         /* TEST IF INPUT LOAD MODULE IS IN OVERLAY                    33670000
*         IF OVERLAY='1'B               /* IF OVERLAY SWITCH IS ON      33680000
*           THEN                        /* THEN                         33690000
@906     L     @7,PARMPTR                                         0954  33700000
         TM    20(@7),B'01000000'                                 0954  33710000
         BC    12,@905                                            0954  33720000
*             DO;                       /* PROCESS SEGMENT NUMBER       33730000
*               BINARY=SEGNO;           /* PREPARE TO CONVERT SEG NO.   33740000
         SR    @2,@2                                              0956  33750000
         IC    @2,14(0,@5)                                        0956  33760000
*               BLNKZERO='1'B;          /* INDIC TO BLANK NONSIG ZEROS  33770000
         OI    SWITCHES+1,B'00000001'                             0957  33780000
*               RET=ADDR(ARLD6);        /* SET UP RETURN ADDRESS        33790000
         LA    @3,ARLD6                                           0958  33800000
*               GO TO BITODEC;          /* CONV SEG NO. TO PRINTBLE DEC 33810000
         BC    15,BITODEC                                         0959  33820000
* ARLD6:        /* BRANCH HERE TO RETURN FROM BITODEC ROUTINE.          33830000
*                  FOLLOWING CODE CONTINUES ARLD PROCESSING.            33840000
*               DATABUF(51:53)=DECINT(2:4); /* PUT SEG NO. INTO BUFFER  33850000
ARLD6    MVC   BUFFERS+175(3),DECINT+1                            0960  33860000
*             END;                                                      33870000
*         CURRCESD=SAVCURR2;            /* PREPARE FOR FOLLOWING STMNT  33880000
@905     L     @5,SAVCURR2                                        0962  33890000
* ARLD7:  /* BRANCH HERE TO BYPASS ABOVE LR PROCESSING WHEN CESD ITEM   33900000
*            IS NOT LR.  FOLLOWING CODE LOOKS FOR P PTR MATCH.          33910000
*         SAVCURR2=CURRCESD;            /* SAVE CURRCESD                33920000
ARLD7    ST    @5,SAVCURR2                                        0963  33930000
*         N=INDEXTAB(PPTR);             /* FIND INDEX INTO CESD TABLE   33940000
         LH    @7,2(0,@6)                                         0964  33950000
         BCTR  @7,0                                               0964  33960000
         SLA   @7,1                                               0964  33970000
         L     @8,INDTABAD                                        0964  33980000
         LH    @F,0(@7,@8)                                        0964  33990000
         STH   @F,N                                               0964  34000000
*         CURRCESD=ADDR(CESDTAB(N));    /* POINT TO CESD TABLE LINE     34010000
         LR    @7,@F                                              0965  34020000
         BCTR  @7,0                                               0965  34030000
         MH    @7,@D2                                             0965  34040000
         L     @8,CETABPTR                                        0965  34050000
         LA    @5,0(@7,@8)                                        0965  34060000
*         BININT(5:7)=RLDADDR-CESDADDR; /* COMPUTE REF'S CSECT LOC      34070000
         MVC   @TEMP3+1(3),11(@5)                                 0966  34080000
         L     @F,@TEMP3                                          0966  34090000
         LCR   @F,@F                                              0966  34100000
         MVC   @TEMP3+1(3),5(@6)                                  0966  34110000
         A     @F,@TEMP3                                          0966  34120000
         ST    @F,@TEMP4                                          0966  34130000
         MVC   BININT+4(3),@TEMP4+1                               0966  34140000
*         RELOC='0'B;                   /* INDICATE NOT TO ADD RELOCFAC 34150000
         NI    SWITCHES+2,B'11111101'                             0967  34160000
*         RET=ADDR(ARLD8);              /* SET UP RETURN ADDRESS        34170000
         LA    @3,ARLD8                                           0968  34180000
*         GO TO BITOHEX;                /* CONV CSECT LOC TO PRNTBL HEX 34190000
         BC    15,BITOHEX                                         0969  34200000
* ARLD8:  /* BRANCH HERE TO RETURN FROM BITOHEX ROUTINE.                34210000
*            FOLLOWING CODE CONTINUES ARLD PROCESSING.                  34220000
*         DATABUF(88:93)=HEXINT(2:7);   /* PUT ER'S CSECT LOC INTO BUF  34230000
ARLD8    MVC   BUFFERS+212(6),HEXINT+1                            0970  34240000
*         /* TEST IF CESD ITEM IS A SECTION DEFINITION                  34250000
*         IF CESDTYPE(5:8)='0000'B      /* IF CESD ITEM IS SD           34260000
*           THEN                        /* THEN                         34270000
         TM    10(@5),B'00001111'                                 0971  34280000
         BC    05,@904                                            0971  34290000
*             DATABUF(101:108)=SYMBOL;  /* PUT CSECT NAME INTO BUFFER   34300000
         MVC   BUFFERS+225(8),2(@5)                               0972  34310000
         BC    15,@903                                            0973  34320000
*           ELSE                        /* ELSE IT IS PRIVATE CODE      34330000
*             DATABUF(100:107)=PRIVPRT; /* PUT '$PRIVATE' INTO BUFFER   34340000
@904     MVC   BUFFERS+224(8),PRIVPRT                             0973  34350000
*         /* TEST IF INPUT LOAD MODULE IS IN OVERLAY                    34360000
*         IF OVERLAY='1'B               /* IF OVERLAY SWITCH IS ON      34370000
*           THEN                        /* THEN                         34380000
@903     L     @7,PARMPTR                                         0974  34390000
         TM    20(@7),B'01000000'                                 0974  34400000
         BC    12,@902                                            0974  34410000
*             DO;                       /* PROCESS SEGMENT NUMBER       34420000
*               BINARY=SEGNO;           /* PREPARE TO CONVERT SEG NO.   34430000
         SR    @2,@2                                              0976  34440000
         IC    @2,14(0,@5)                                        0976  34450000
*               BLNKZERO='1'B;          /* INDIC TO BLANK NONSIG ZEROS  34460000
         OI    SWITCHES+1,B'00000001'                             0977  34470000
*               RET=ADDR(ARLD9);        /* SET UP RETURN ADDRESS        34480000
         LA    @3,ARLD9                                           0978  34490000
*               GO TO BITODEC;          /* CONV SEG NO. TO PRINTBLE DEC 34500000
         BC    15,BITODEC                                         0979  34510000
* ARLD9:        /* BRANCH HERE TO RETURN FROM BITODEC ROUTINE.          34520000
*                  FOLLOWING CODE CONTINUES ARLD PROCESSING.            34530000
*               DATABUF(114:116)=DECINT(2:4); /* PUT SEG NO. INTO BUF   34540000
ARLD9    MVC   BUFFERS+238(3),DECINT+1                            0980  34550000
*             END;                                                      34560000
*         CURRCESD=SAVCURR2;            /* RESTORE CURRCESD             34570000
@902     L     @5,SAVCURR2                                        0982  34580000
*         CURRLD=CURRLD+8;              /* LOC NEXT LINE IN RLD TABLE   34590000
         LA    @6,8(0,@6)                                         0983  34600000
*         RET=ADDR(ARLD1);              /* SET UP RETURN ADDRESS        34610000
         LA    @3,ARLD1                                           0984  34620000
*         /* TEST IF LINE OF DATA SHOULD GO ON THIS OR NEXT PAGE        34630000
*         IF LINECNT>60                 /* IF LINE COUNT GREATR THAN 60 34640000
*           THEN                        /* THEN                         34650000
         LA    @F,60                                              0985  34660000
         C     @F,LINECNT                                         0985  34670000
         BC    10,@901                                            0985  34680000
*             DO;                       /* SET TWO SWITCHES             34690000
*               LINECT61='1'B;          /* INDIC TO PRINT ON NEXT PAGE  34700000
         OI    SWITCHES,B'00010000'                               0987  34710000
*               ARHD='1'B;              /* INDIC TO PRINT ARLD HEADING  34720000
         OI    SWITCHES+1,B'01000000'                             0988  34730000
*             END;                                                      34740000
*         GO TO WRITE;                  /* PRINT THIS BUFFER OF DATA    34750000
         BC    15,WRITE                                           0990  34760000
*       END;                                                            34770000
*   /* TEST IF CESD ITEM IS A RESOLVED EXT REF (SECTION DEF OR COMMON)  34780000
*   IF CESDTYPE(5:8)='0000'B            /* IF CESD ITEM IS SD           34790000
*      | CESDTYPE(5:8)='0101'B          /* OR CESD ITEM IS CM           34800000
*      | CESDTYPE(6:8)='100'B           /* OR CESD ITEM IS PC  OY03410  34810000
*     THEN                              /* THEN                         34820000
@908     EQU   *                                                  0992  34830000
@909     TM    10(@5),B'00001111'                                 0992  34840000
         BC    08,@900                                            0992  34850000
         TM    10(@5),B'00000101'                                 0992  34860000
         BC    12,@8FF                                            0992  34870000
         TM    10(@5),B'00001010'                                 0992  34880000
         BC    08,@8FE                                            0992  34890000
@8FF     TM    10(@5),B'00000100'                                 0992  34900000
         BC    12,@8FD                                            0991  34910000
         TM    10(@5),B'00000011'                                 0992  34920000
         BC    05,@8FC                                            0992  34930000
*       DO;                             /* PROCESS IT                   34940000
@8FE     EQU   *                                                  0993  34950000
*         /* TEST WHETHER TO PRINT $PRIVATE                    OY03410  34960000
*         IF CESDTYPE(6:8)='100'B       /* IS THIS PC?         OY03410  34970000
*           THEN                        /* IF IT IS,           OY03410  34980000
@900     TM    10(@5),B'00000100'                                 0994  34990000
         BC    12,@8FB                                            0993  35000000
         TM    10(@5),B'00000011'                                 0994  35010000
         BC    05,@8FA                                            0994  35020000
*             DO;                       /* PRINT $PRIVATE      OY03410  35030000
*               DATABUF(1:9)=PRIVPRT;   /* REF'D SYMBOL        OY03410  35040000
         MVC   BUFFERS+125(8),PRIVPRT                             0996  35050000
         MVI   BUFFERS+133,C' '                                   0996  35060000
*               DATABUF(37:45)=PRIVPRT; /* REF'D CSECT         OY03410  35070000
         MVC   BUFFERS+161(8),PRIVPRT                             0997  35080000
         MVI   BUFFERS+169,C' '                                   0997  35090000
         BC    15,@8F9                                            0999  35100000
*             END;                                                      35110000
*         /* TEST WHETHER TO PRINT '$BLANKCOM' AS REF'D TO SYMB & CSECT 35120000
*         ELSE IF SYMBOL(1)=BLANK       /* IF SYMBOL FIELD IS BLANK     35130000
*           THEN                        /* THEN THE ITEM IS BLANK COM   35140000
@8FA     EQU   *                                                  0999  35150000
@8FB     CLC   2(1,@5),BLANK                                      0999  35160000
         BC    07,@8F8                                            0999  35170000
*             DO;                       /* PUT '$BLANKCOM' INTO BUFFER  35180000
*               DATABUF(1:9)=BLCOMPRT;  /* IT'S THE REF'D TO SYMBOL     35190000
         MVC   BUFFERS+125(9),BLCOMPRT                            1001  35200000
*               DATABUF(37:45)=BLCOMPRT; /* IT'S THE REF'D TO CSECT     35210000
         MVC   BUFFERS+161(9),BLCOMPRT                            1002  35220000
         BC    15,@8F7                                            1004  35230000
*             END;                                                      35240000
*           ELSE                        /* ELSE ITEM ISN'T BLANK COMMON 35250000
*             DO;                       /* PUT SYMBOL INTO BUFFER       35260000
*               DATABUF(2:9)=SYMBOL;    /* IT'S THE REF'D TO SYMBOL     35270000
@8F8     MVC   BUFFERS+126(8),2(@5)                               1005  35280000
*               DATABUF(38:45)=SYMBOL;  /* IT'S THE REF'D TO CSECT      35290000
         MVC   BUFFERS+162(8),2(@5)                               1006  35300000
*             END;                                                      35310000
*         BININT(5:7)=CESDADDR;         /* PREP TO CONV SYMB'S LMOD LOC 35320000
@8F7     EQU   *                                                  1008  35330000
@8F9     MVC   BININT+4(3),11(@5)                                 1008  35340000
*         RET=ADDR(ARLD10);             /* SET UP RETURN ADDRESS        35350000
         LA    @3,ARLD10                                          1009  35360000
*         GO TO BITOHEX;                /* CONV LMOD LOC TO PRINTBL HEX 35370000
         BC    15,BITOHEX                                         1010  35380000
* ARLD10: /* BRANCH HERE TO RETURN FROM BITOHEX ROUTINE.                35390000
*            FOLLOWING CODE CONTINUES ARLD PROCESSING.                  35400000
*         DATABUF(14:19)=HEXINT(2:7);   /* PUT SYMBOL'S LMOD LOC IN BUF 35410000
ARLD10   MVC   BUFFERS+138(6),HEXINT+1                            1011  35420000
*         DATABUF(29:30)=CHARZERO;      /* PUT LOCATION '00' INTO BUF   35430000
         MVC   BUFFERS+153(2),CHARZERO                            1012  35440000
*         /* TEST IF INPUT LOAD MODULE IS IN OVERLAY                    35450000
*         IF OVERLAY='1'B               /* IF OVERLAY SWITCH IS ON      35460000
*           THEN                        /* THEN                         35470000
         L     @7,PARMPTR                                         1013  35480000
         TM    20(@7),B'01000000'                                 1013  35490000
         BC    12,@8F6                                            1013  35500000
*             DO;                       /* PROCESS SEGMENT NUMBER       35510000
*               BINARY=SEGNO;           /* PREPARE TO CONVERT SEG NO.   35520000
         SR    @2,@2                                              1015  35530000
         IC    @2,14(0,@5)                                        1015  35540000
*               BLNKZERO='1'B;          /* INDIC TO BLANK NONSIG ZEROS  35550000
         OI    SWITCHES+1,B'00000001'                             1016  35560000
*               RET=ADDR(ARLD11);       /* SET UP RETURN ADDRESS        35570000
         LA    @3,ARLD11                                          1017  35580000
*               GO TO BITODEC;          /* CONV SEG NO. TO PRINTBLE DEC 35590000
         BC    15,BITODEC                                         1018  35600000
* ARLD11:       /* BRANCH HERE TO RETURN FROM BITODEC ROUTINE.          35610000
*                  FOLLOWING CODE CONTINUES ARLD PROCESSING.            35620000
*               DATABUF(51:53)=DECINT(2:4); /* PUT SEG NO. INTO BUFFER  35630000
ARLD11   MVC   BUFFERS+175(3),DECINT+1                            1019  35640000
*             END;                                                      35650000
*         GO TO ARLD7;                  /* REST SAME AS LR PROCESSING   35660000
         BC    15,ARLD7                                           1021  35670000
*       END;                                                            35680000
*   /* TEST IF CESD ITEM IS AN UNRESOLVED EXTERNAL REFERENCE            35690000
*   IF CESDTYPE(5:8)='0010'B            /* IF CESD ITEM IS ER           35700000
*     THEN                              /* THEN                         35710000
@8FC     EQU   *                                                  1023  35720000
@8FD     TM    10(@5),B'00000010'                                 1023  35730000
         BC    12,@8F5                                            1022  35740000
         TM    10(@5),B'00001101'                                 1023  35750000
         BC    05,@8F4                                            1023  35760000
*       DO;                             /* FIND OUT WHICH KIND          35770000
*         DATABUF(2:9)=SYMBOL;          /* PUT REF'D TO SYMBOL INTO BUF 35780000
         MVC   BUFFERS+126(8),2(@5)                               1025  35790000
*         /* TEST IF UNRESOLVED ER IS SIMPLE UNRESOLVED                 35800000
*         IF IDLENGTH(1)=ZERO(1)        /* IF ID IS 0                   35810000
*           THEN                        /* THEN                         35820000
         CLC   15(1,@5),ZERO                                      1026  35830000
         BC    07,@8F3                                            1026  35840000
*             DATABUF(37:47)=UNRESPRT;  /* PUT '$UNRESOLVED' INTO BUF   35850000
         MVC   BUFFERS+161(11),UNRESPRT                           1027  35860000
         BC    15,@8F2                                            1028  35870000
*           ELSE                        /* ELSE ID IS 6                 35880000
*             DATABUF(37:47)=NEVCLPRT;  /* PUT '$NEVER-CALL' INTO BUF   35890000
@8F3     MVC   BUFFERS+161(11),NEVCLPRT                           1028  35900000
*         GO TO ARLD7;                  /* REST SAME AS LR PROCESSING   35910000
         BC    15,ARLD7                                           1029  35920000
*       END;                                                            35930000
*   /* TEST IF CESD ITEM IS A WEAK UNRESOLVED EXTERNAL REFERENCE        35940000
*   IF CESDTYPE(5:8)='1010'B            /* IF CESD ITEM IS WX           35950000
*     THEN                              /* THEN                         35960000
@8F4     EQU   *                                                  1031  35970000
@8F5     TM    10(@5),B'00001010'                                 1031  35980000
         BC    12,@8F1                                            1030  35990000
         TM    10(@5),B'00000101'                                 1031  36000000
         BC    05,@8F0                                            1031  36010000
*       DO;                             /* PROCESS IT                   36020000
*         DATABUF(2:9)=SYMBOL;          /* PUT REF'D TO SYMBOL INTO BUF 36030000
         MVC   BUFFERS+126(8),2(@5)                               1033  36040000
*         DATABUF(37:50)=UNREWPRT;      /* PUT '$UNRESOLVED(W)' IN BUF  36050000
         MVC   BUFFERS+161(14),UNREWPRT                           1034  36060000
*         GO TO ARLD7;                  /* REST SAME AS LR PROCESSING   36070000
         BC    15,ARLD7                                           1035  36080000
*       END;                                                            36090000
*                                                                       36100000
* /******************************************************************** 36110000
* /*   THE FOLLOWING SECTION OF CODE PRINTS ALL HEADINGS AND DATA.      36120000
* /*   HEADINGS ARE ASSEMBLED IN THEIR BUFFER HERE, DATA IS             36130000
* /*   ASSEMBLED IN ITS BUFFER PRIOR TO ENTERING THIS SECTION.  EACH    36140000
* /*   TIME THIS CODE IS EXECUTED, IT WILL FIRST PRINT A HEADING,       36150000
* /*   IF A SWITCH INDICATES IT IS REQUESTED, THEN A LINE OF DATA.      36160000
* /*   THIS SECTION IS ENTERED EACH TIME A LINE IS TO BE PRINTED.       36170000
* /******************************************************************** 36180000
*                                                                       36190000
* WRITE:                                                                36200000
*   SAVERET=RET;                        /* SAVE RETURN ADDRESS          36210000
@8F0     EQU   *                                                  1037  36220000
@8F1     EQU   *                                                  1037  36230000
WRITE    ST    @3,SAVERET                                         1037  36240000
*   /* TEST IF SKIP TO NEXT PAGE IS REQUESTED                           36250000
*   IF LINECT61='1'B                    /* IF LINECT61 SWITCH IS ON     36260000
*     THEN                              /* THEN                         36270000
         TM    SWITCHES,B'00010000'                               1038  36280000
         BC    12,@8EF                                            1038  36290000
* WRITE1: /* BRANCH HERE WHEN WRITE ROUTINE DISCOVERS THAT SKIP TO      36300000
*            NEXT PAGE IS REQUIRED.  FOLLOWING CODE PREPARES TITLE,     36310000
*            PAGE NO., AND USER TITLE FOR PRINTING.                     36320000
*       DO;                             /* PRINT ON NEXT PAGE           36330000
*         LINECT61='0'B;                /* TURN LINECT61 SWITCH OFF     36340000
WRITE1   NI    SWITCHES,B'11101111'                               1040  36350000
*         /* TEST IF NUMERIC CESD OR RLD PROCESSING IS BEING PERFORMED  36360000
*         IF NUMCESD='1'B               /* IF NUMCESD SWITCH IS ON      36370000
*           THEN                        /* THEN                         36380000
         TM    SWITCHES+2,B'01000000'                             1041  36390000
         BC    12,@8EE                                            1041  36400000
*             DO;                       /* PUT PAGE HEADING INTO BUFFER 36410000
*               HEADBUF(30:38)=HEADING6(6:14); /* 'NUMERICAL'           36420000
         MVC   BUFFERS+30(9),HEADING6+5                           1043  36430000
*               HEADBUF(40:67)=HEADING5(1:28); /* 'MAP AND CROSS-       36440000
*                                                 REFERENCE LIST'       36450000
         MVC   BUFFERS+40(28),HEADING5                            1044  36460000
*               /* TEST IF A NUCLEUS IS BEING MAPPED                    36470000
*               IF NUCMAP='1'B          /* IF NUCMAP SWITCH IS ON       36480000
*                 THEN                  /* THEN                         36490000
         TM    SWITCHES+2,B'00001000'                             1045  36500000
         BC    12,@8ED                                            1045  36510000
*                   DO;                 /* PUT NUCLEUS HEADING IN BUF   36520000
*                     HEADBUF(69:70)=HEADING3(19:20); /* 'OF'           36530000
         MVC   BUFFERS+69(2),HEADING3+18                          1047  36540000
*                     HEADBUF(72:78)=HEADING7(16:22); /* 'NUCLEUS'      36550000
         MVC   BUFFERS+72(7),HEADING7+15                          1048  36560000
*                     HEADBUF(80:87)=LMODNAME; /* PUT NUC NAME IN BUF   36570000
         L     @7,PARMPTR                                         1049  36580000
         MVC   BUFFERS+80(8),36(@7)                               1049  36590000
         BC    15,@8EC                                            1051  36600000
*                   END;                                                36610000
*                 ELSE                  /* ELSE NUCMAP SWITCH IS OFF    36620000
*                   DO;                 /* PUT LOAD MOD HEADING IN BUF  36630000
*                     HEADBUF(69:82)=HEADING3(19:32); /* 'OF LOAD       36640000
*                                                        MODULE'        36650000
@8ED     MVC   BUFFERS+69(14),HEADING3+18                         1052  36660000
*                     HEADBUF(84:91)=LMODNAME; /* PUT LMOD NAME IN BUF  36670000
         L     @7,PARMPTR                                         1053  36680000
         MVC   BUFFERS+84(8),36(@7)                               1053  36690000
*                   END;                                                36700000
*             END;                                                      36710000
@8EC     EQU   *                                                  1055  36720000
*         /* TEST IF ALPHABETIC CESD PROCESSING IS BEING PERFORMED      36730000
*         IF ACHD='1'B                  /* IF ACHD SWITCH IS ON         36740000
*            | PRHD='1'B                /* OR IF PRHD SWITCH IS ON      36750000
*            & NUMCESD='0'B             /* AND IF NUMCESD SWITCH IS OFF 36760000
*           THEN                        /* THEN                         36770000
@8EE     TM    SWITCHES,B'00000010'                               1056  36780000
         BC    01,@8EB                                            1056  36790000
         TM    SWITCHES+1,B'00100000'                             1056  36800000
         BC    12,@8EA                                            1056  36810000
         TM    SWITCHES+2,B'01000000'                             1056  36820000
         BC    05,@8E9                                            1056  36830000
*             DO;                       /* PUT PAGE HEADING INTO BUFFER 36840000
*               HEADBUF(41:52)=HEADING6(16:27); /* 'ALPHABETICAL'       36850000
@8EB     MVC   BUFFERS+41(12),HEADING6+15                         1058  36860000
*               HEADBUF(54:56)=HEADING5(1:3); /* 'MAP'                  36870000
         MVC   BUFFERS+54(3),HEADING5                             1059  36880000
*               /* TEST IF A NUCLEUS IS BEING MAPPED                    36890000
*               IF NUCMAP='1'B          /* IF NUCMAP SWITCH IS ON       36900000
*                 THEN                  /* THEN                         36910000
         TM    SWITCHES+2,B'00001000'                             1060  36920000
         BC    12,@8E8                                            1060  36930000
*                   DO;                 /* PUT NUCLEUS HEADING IN BUF   36940000
*                     HEADBUF(58:59)=HEADING3(19:20); /* 'OF'           36950000
         MVC   BUFFERS+58(2),HEADING3+18                          1062  36960000
*                     HEADBUF(61:67)=HEADING7(16:22); /* 'NUCLEUS'      36970000
         MVC   BUFFERS+61(7),HEADING7+15                          1063  36980000
*                     HEADBUF(69:76)=LMODNAME; /* PUT NUC NAME IN BUF   36990000
         L     @7,PARMPTR                                         1064  37000000
         MVC   BUFFERS+69(8),36(@7)                               1064  37010000
         BC    15,@8E7                                            1066  37020000
*                   END;                                                37030000
*                 ELSE                  /* ELSE NUCMAP SWITCH IS OFF    37040000
*                   DO;                 /* PUT LOAD MOD HEADING IN BUF  37050000
*                     HEADBUF(58:71)=HEADING3(19:32); /* 'OF LOAD       37060000
*                                                        MODULE'        37070000
@8E8     MVC   BUFFERS+58(14),HEADING3+18                         1067  37080000
*                     HEADBUF(73:80)=LMODNAME; /* PUT LMOD NAME IN BUF  37090000
         L     @7,PARMPTR                                         1068  37100000
         MVC   BUFFERS+73(8),36(@7)                               1068  37110000
*                   END;                                                37120000
*             END;                                                      37130000
@8E7     EQU   *                                                  1070  37140000
*         /* TEST IF ALPHABETIC RLD PROCESSING IS BEING PERFORMED       37150000
*         IF ARHD='1'B                  /* IF ARHD SWITCH IS ON         37160000
*           THEN                        /* THEN                         37170000
@8E9     EQU   *                                                  1071  37180000
@8EA     TM    SWITCHES+1,B'01000000'                             1071  37190000
         BC    12,@8E6                                            1071  37200000
*             DO;                       /* PUT PAGE HEADING INTO BUFFER 37210000
*               HEADBUF(32:43)=HEADING6(16:27); /* 'ALPHABETICAL'       37220000
         MVC   BUFFERS+32(12),HEADING6+15                         1073  37230000
*               HEADBUF(45:64)=HEADING5(9:28); /* 'CROSS-REF'NCE LIST'  37240000
         MVC   BUFFERS+45(20),HEADING5+8                          1074  37250000
*               /* TEST IF A NUCLEUS IS BEING MAPPED                    37260000
*               IF NUCMAP='1'B          /* IF NUCMAP SWITCH IS ON       37270000
*                 THEN                  /* THEN                         37280000
         TM    SWITCHES+2,B'00001000'                             1075  37290000
         BC    12,@8E5                                            1075  37300000
*                   DO;                 /* PUT NUCLEUS HEADING IN BUF   37310000
*                     HEADBUF(66:67)=HEADING3(19:20); /* 'OF'           37320000
         MVC   BUFFERS+66(2),HEADING3+18                          1077  37330000
*                     HEADBUF(69:75)=HEADING7(16:22); /* 'NUCLEUS'      37340000
         MVC   BUFFERS+69(7),HEADING7+15                          1078  37350000
*                     HEADBUF(77:84)=LMODNAME; /* PUT NUC NAME IN BUF   37360000
         L     @7,PARMPTR                                         1079  37370000
         MVC   BUFFERS+77(8),36(@7)                               1079  37380000
         BC    15,@8E4                                            1081  37390000
*                   END;                                                37400000
*                 ELSE                  /* ELSE NUCMAP SWITCH IS OFF    37410000
*                   DO;                 /* PUT LOAD MOD HEADING IN BUF  37420000
*                     HEADBUF(66:79)=HEADING3(19:32); /* 'OF LOAD       37430000
*                                                        MODULE'        37440000
@8E5     MVC   BUFFERS+66(14),HEADING3+18                         1082  37450000
*                     HEADBUF(81:88)=LMODNAME; /* PUT LMOD NAME IN BUF  37460000
         L     @7,PARMPTR                                         1083  37470000
         MVC   BUFFERS+81(8),36(@7)                               1083  37480000
*                   END;                                                37490000
*             END;                                                      37500000
@8E4     EQU   *                                                  1085  37510000
*         HEADBUF(112:115)=HEADING6(1:4); /* PUT 'PAGE' INTO BUFFER     37520000
@8E6     MVC   BUFFERS+112(4),HEADING6                            1086  37530000
*         PAGENUM=PAGENUM+1;            /* INCREMENT PAGE NUMBER BY 1   37540000
         LA    @F,1                                               1087  37550000
         AH    @F,PAGENUM                                         1087  37560000
         STH   @F,PAGENUM                                         1087  37570000
*         HEADCON=SP1PAGE;              /* CAUSE CARR SKIP TO NEXT PAGE 37580000
         MVC   BUFFERS(1),SP1PAGE                                 1088  37590000
*         BINARY=PAGENUM;               /* LOAD PAGE NO. INTO REGISTER  37600000
         LH    @2,PAGENUM                                         1089  37610000
*         BLNKZERO='0'B;                /* DON'T BLANK NONSIG ZEROS     37620000
         NI    SWITCHES+1,B'11111110'                             1090  37630000
*         RET=ADDR(WRITE2);             /* SET UP RETURN ADDRESS        37640000
         LA    @3,WRITE2                                          1091  37650000
*         GO TO BITODEC;                /* CONVERT TO PRINTABLE DECIMAL 37660000
         BC    15,BITODEC                                         1092  37670000
* WRITE2: /* BRANCH HERE TO RETURN FROM BITODEC ROUTINE.                37680000
*            FOLLOWING CODE PRODUCES PAGE TITLE AND NO.                 37690000
*         HEADBUF(117:120)=DECINT(1:4); /* PUT PAGE NO. INTO BUFFER     37700000
WRITE2   MVC   BUFFERS+117(4),DECINT                              1093  37710000
*         OUTAREAD=ADDR(HEADPRNT);      /* GET ADDR OF BUFFER FOR PUT   37720000
         LA    @1,BUFFERS                                         1094  37730000
*         BLNKHEAD='1'B;                /* INDIC TO BLANK IT AFTER PRNT 37740000
         OI    SWITCHES,B'01000000'                               1095  37750000
*         RET=ADDR(WRITE3);             /* SET UP RETURN ADDRESS        37760000
         LA    @3,WRITE3                                          1096  37770000
*         GO TO WRITE16;                /* GO TO PRINT PAGE NO.& TITLE  37780000
         BC    15,WRITE16                                         1097  37790000
* WRITE3: /* BRANCH HERE TO RETURN FROM PRINTING PAGE TITLE AND NO.     37800000
*            FOLLOWING CODE PRODUCES USER TITLE.                        37810000
*         LINECNT=5;                    /* SET LINE COUNT TO 5          37820000
WRITE3   LA    @F,5                                               1098  37830000
         ST    @F,LINECNT                                         1098  37840000
*         OUTAREAD=TITLEAD;             /* ADDR OF USER TITLE FOR PUT   37850000
         L     @7,PARMPTR                                         1099  37860000
         L     @1,8(0,@7)                                         1099  37870000
*         RET=ADDR(WRITE4);             /* SET UP RETURN ADDRESS        37880000
         LA    @3,WRITE4                                          1100  37890000
*         GO TO WRITE16;                /* GO TO PRINT TITLE            37900000
         BC    15,WRITE16                                         1101  37910000
*       END;                                                            37920000
* WRITE4: /* BRANCH HERE TO RETURN FROM PRINTING USER TITLE.            37930000
*            FOLLOWING CODE PRODUCES A LINE OF DASHES IF REQUESTED.     37940000
*   /* TEST IF DASHES BETWEEN CESD AND RLD PRINTOUT ARE REQUESTED       37950000
*   IF DASHLINE='1'B                    /* IF DASHLINE SWITCH IS ON     37960000
*     THEN                              /* THEN                         37970000
@8EF     EQU   *                                                  1103  37980000
WRITE4   TM    SWITCHES+1,B'00001000'                             1103  37990000
         BC    12,@8E3                                            1103  38000000
*       DO;                             /* PROCESS DASH PRINTING        38010000
*         /* TEST IF DASHES SHOULD GO ON THIS OR NEXT PAGE              38020000
*         IF LINECNT>56                 /* IF NO ROOM ON THIS PAGE      38030000
*           THEN                        /* THEN                         38040000
         LA    @F,56                                              1105  38050000
         C     @F,LINECNT                                         1105  38060000
*             GO TO WRITE1;             /* GO TO SKIP TO NEXT PAGE      38070000
         BC    04,WRITE1                                          1106  38080000
*         DASHLINE='0'B;                /* TURN DASHES SWITCH OFF       38090000
         NI    SWITCHES+1,B'11110111'                             1107  38100000
*         LINECNT=LINECNT+3;            /* INCREMENT LINE COUNT BY 3    38110000
         LA    @F,3                                               1108  38120000
         A     @F,LINECNT                                         1108  38130000
         ST    @F,LINECNT                                         1108  38140000
*         HEADCON=SP3LINES;             /* CAUSE CARR TO SKIP 3 LINES   38150000
         MVC   BUFFERS(1),SP3LINES                                1109  38160000
*         HEADBUF(1)=DASH;              /* PUT '-' IN FIRST BYTE        38170000
         MVC   BUFFERS+1(1),DASH                                  1110  38180000
*         HEADBUF(2:120)=HEADBUF(1:119); /* FILL REMAINDER WITH DASHES  38190000
         MVC   BUFFERS+2(119),BUFFERS+1                           1111  38200000
*         OUTAREAD=ADDR(HEADPRNT);      /* GET ADDR OF BUFFER FOR PUT   38210000
         LA    @1,BUFFERS                                         1112  38220000
*         BLNKHEAD='1'B;                /* INDIC TO BLANK IT AFTER PRNT 38230000
         OI    SWITCHES,B'01000000'                               1113  38240000
*         RET=ADDR(WRITE5);             /* SET UP RETURN ADDRESS        38250000
         LA    @3,WRITE5                                          1114  38260000
*         GO TO WRITE16;                /* GO TO PRINT DASHES           38270000
         BC    15,WRITE16                                         1115  38280000
* WRITE5: /* BRANCH HERE TO RETURN FROM PRINTING A LINE OF DASHES.      38290000
*            FOLLOWING CODE PRODUCES 2ND LINE OF DASHES IF REQUESTED.   38300000
*         /* TEST IF DOUBLE LINE OF DASHES IS TO BE PRINTED             38310000
*         IF DUBLDASH='1'B              /* IF DUBLDASH SWITCH IS ON     38320000
*           THEN                        /* THEN                         38330000
WRITE5   TM    SWITCHES+2,B'00010000'                             1116  38340000
         BC    12,@8E2                                            1116  38350000
*             DO;                       /* PREPARE TO PRINT LINE        38360000
*               DUBLDASH='0'B;          /* TURN DUBLDASH SWITCH OFF     38370000
         NI    SWITCHES+2,B'11101111'                             1118  38380000
*               LINECNT=LINECNT+1;      /* INCREMENT LINE COUNT BY 1    38390000
         LA    @F,1                                               1119  38400000
         A     @F,LINECNT                                         1119  38410000
         ST    @F,LINECNT                                         1119  38420000
*               HEADCON=SP1LINE;        /* CAUSE CARR TO SKIP 1 LINE    38430000
         MVC   BUFFERS(1),SP1LINE                                 1120  38440000
*               HEADBUF(1)=DASH;        /* PUT '-' IN FIRST BYTE        38450000
         MVC   BUFFERS+1(1),DASH                                  1121  38460000
*               HEADBUF(2:120)=HEADBUF(1:119); /* FILL REMAINDER OF BUF 38470000
         MVC   BUFFERS+2(119),BUFFERS+1                           1122  38480000
*               /* TEST IF SEG NO. IN LINE OF DASHES SHOULD BE PRINTED  38490000
*               IF NCHD='1'B            /* IF NCHD SWITCH IS ON         38500000
*                  | NCSHD='1'B         /* OR NCSHD SWITCH IS ON        38510000
*                  & OVERLAY='1'B       /* AND OVERLAY SWITCH IS ON     38520000
*                 THEN                  /* THEN                         38530000
         TM    SWITCHES,B'00001000'                               1123  38540000
         BC    01,@8E1                                            1123  38550000
         TM    SWITCHES,B'00000100'                               1123  38560000
         BC    12,@8E0                                            1123  38570000
         L     @7,PARMPTR                                         1123  38580000
         TM    20(@7),B'01000000'                                 1123  38590000
         BC    12,@8DF                                            1123  38600000
*                   DO;                 /* PRINT SEGMENT NUMBER         38610000
*                     HEADBUF(1:3)=HEADING7(4:6); /* PUT 'SEG' INTO BUF 38620000
@8E1     MVC   BUFFERS+1(3),HEADING7+3                            1125  38630000
*                     HEADBUF(4)=PERIOD; /* PUT '.' INTO BUFFER         38640000
         MVC   BUFFERS+4(1),PERIOD                                1126  38650000
*                     HEADBUF(5:9)=DATABUF(56:60); /* PUT SEG NO. IN    38660000
         MVC   BUFFERS+5(5),BUFFERS+180                           1127  38670000
*                     /* TEST FOR ONLY ONE SIGNIFICANT DIGIT            38680000
*                        ( IN ORDER TO LEFT ALIGN THE SEGMENT NO. )     38690000
*                     IF HEADBUF(7)=BLANK /* IF SECOND DIGIT BLANK      38700000
*                       THEN            /* THEN                         38710000
         CLC   BUFFERS+7(1),BLANK                                 1128  38720000
         BC    07,@8DE                                            1128  38730000
*                         HEADBUF(6:9)=HEADBUF(8:11); /* MOVE 2 PLACES  38740000
         MVC   BUFFERS+6(4),BUFFERS+8                             1129  38750000
         BC    15,@8DD                                            1130  38760000
*                       ELSE            /* ELSE MORE THAN 1 SIG DIGIT   38770000
*                         /* TEST FOR TWO SIGNIFICANT DIGITS            38780000
*                         IF HEADBUF(6)=BLANK /* IF FIRST DIGIT BLANK   38790000
*                           THEN        /* THEN                         38800000
@8DE     CLC   BUFFERS+6(1),BLANK                                 1130  38810000
         BC    07,@8DC                                            1130  38820000
*                             HEADBUF(6:9)=HEADBUF(7:10); /* MOVE 1 PLC 38830000
         MVC   BUFFERS+6(4),BUFFERS+7                             1131  38840000
*                   END;                                                38850000
@8DC     EQU   *                                                  1132  38860000
@8DD     EQU   *                                                  1132  38870000
*               OUTAREAD=ADDR(HEADPRNT); /* GET ADDR OF BUFFER FOR PUT  38880000
@8DF     EQU   *                                                  1133  38890000
@8E0     LA    @1,BUFFERS                                         1133  38900000
*               BLNKHEAD='1'B;          /* INDIC TO BLANK IT AFTER PRNT 38910000
         OI    SWITCHES,B'01000000'                               1134  38920000
*               RET=ADDR(WRITE6);       /* SET UP RETURN ADDRESS        38930000
         LA    @3,WRITE6                                          1135  38940000
*               GO TO WRITE16;          /* GO TO PRINT DASHES           38950000
         BC    15,WRITE16                                         1136  38960000
*             END;                                                      38970000
*     END;                                                              38980000
@8E2     EQU   *                                                  1138  38990000
* WRITE6: /* BRANCH HERE TO RETURN FROM PRINTING SECOND LINE OF DASHES. 39000000
*            FOLLOWING CODE PRODUCES NUMERIC CESD HEADING IF REQUESTED. 39010000
*   /* TEST IF NUMERIC CESD HEADING IS TO BE PRINTED                    39020000
*   IF NCHD='1'B                        /* IF NUM CESD HD SWITCH IS ON  39030000
*     THEN                              /* THEN                         39040000
@8E3     EQU   *                                                  1139  39050000
WRITE6   TM    SWITCHES,B'00001000'                               1139  39060000
         BC    12,@8DB                                            1139  39070000
*       DO;                             /* PROCESS THIS HEADING         39080000
*         /* TEST IF HEADING SHOULD GO ON THIS OR NEXT PAGE             39090000
*         IF LINECNT>57                 /* IF NO ROOM ON THIS PAGE      39100000
*           THEN                        /* THEN                         39110000
         LA    @F,57                                              1141  39120000
         C     @F,LINECNT                                         1141  39130000
*             GO TO WRITE1;             /* GO TO SKIP TO NEXT PAGE      39140000
         BC    04,WRITE1                                          1142  39150000
*         NCHD='0'B;                    /* TURN NUM CESD HD SWITCH OFF  39160000
         NI    SWITCHES,B'11110111'                               1143  39170000
*         LINECNT=LINECNT+3;            /* INCREMENT LINE COUNT BY 3    39180000
         LA    @F,3                                               1144  39190000
         A     @F,LINECNT                                         1144  39200000
         ST    @F,LINECNT                                         1144  39210000
*         HEADCON=SP3LINES;             /* CAUSE CARR TO SKIP 3 LINES   39220000
         MVC   BUFFERS(1),SP3LINES                                1145  39230000
*         HEADBUF(18:32)=HEADING1(1:15); /* PUT 'CONTROL SECTION' IN BF 39240000
         MVC   BUFFERS+18(15),HEADING1                            1146  39250000
*         HEADBUF(73:77)=HEADING1(17:21); /* PUT 'ENTRY' INTO BUFFER    39260000
         MVC   BUFFERS+73(5),HEADING1+16                          1147  39270000
*         OUTAREAD=ADDR(HEADPRNT);      /* GET ADDR OF BUFFER FOR PUT   39280000
         LA    @1,BUFFERS                                         1148  39290000
*         BLNKHEAD='1'B;                /* INDIC TO BLANK IT AFTER PRNT 39300000
         OI    SWITCHES,B'01000000'                               1149  39310000
*         RET=ADDR(WRITE7);             /* SET UP RETURN ADDRESS        39320000
         LA    @3,WRITE7                                          1150  39330000
*         GO TO WRITE16;                /* GO TO PRINT NUM CESD HEADING 39340000
         BC    15,WRITE16                                         1151  39350000
* WRITE7: /* BRANCH HERE TO RETURN FROM PRINTING NUMERIC CESD HEADING.  39360000
*            FOLLOWING CODE PRODUCES NUMERIC CESD SUBHEADING.           39370000
*         LINECNT=LINECNT+1;            /* INCREMENT LINE COUNT BY 1    39380000
WRITE7   LA    @F,1                                               1152  39390000
         A     @F,LINECNT                                         1152  39400000
         ST    @F,LINECNT                                         1152  39410000
*         HEADCON=SP1LINE;              /* CAUSE CARR TO SKIP 1 LINE    39420000
         MVC   BUFFERS(1),SP1LINE                                 1153  39430000
*         GO TO WRITE8;                 /* BYPASS NCSHD & LINECNT TESTS 39440000
         BC    15,WRITE8                                          1154  39450000
*       END;                                                            39460000
*   /* TEST IF NUMERIC CESD SUBHEADING IS REQUESTED                     39470000
*   IF NCSHD='1'B                       /* IF NUM CESD SUBHD IS ON      39480000
*     THEN                              /* THEN                         39490000
@8DB     TM    SWITCHES,B'00000100'                               1156  39500000
         BC    12,@8DA                                            1156  39510000
*       DO;                             /* PROCESS THIS HEADING         39520000
*         /* TEST IF HEADING SHOULD GO ON THIS OR NEXT PAGE             39530000
*         IF LINECNT>58                 /* IF NO ROOM ON THIS PAGE      39540000
*           THEN                        /* THEN                         39550000
         LA    @F,58                                              1158  39560000
         C     @F,LINECNT                                         1158  39570000
*             GO TO WRITE1;             /* GO TO SKIP TO NEXT PAGE      39580000
         BC    04,WRITE1                                          1159  39590000
*         LINECNT=LINECNT+2;            /* INCREMENT LINE COUNT BY 2    39600000
         LA    @F,2                                               1160  39610000
         A     @F,LINECNT                                         1160  39620000
         ST    @F,LINECNT                                         1160  39630000
*         HEADCON=SP2LINES;             /* CAUSE CARR TO SKIP 2 LINES   39640000
         MVC   BUFFERS(1),SP2LINES                                1161  39650000
* WRITE8: /* BRANCH HERE TO BYPASS NCSHD AND LINECNT TESTS,             39660000
*            BECAUSE EVERY TIME NCHD IS PRINTED NCSHD IS ALSO           39670000
*            PRINTED AND THESE TESTS MUST NOT BE MADE.                  39680000
*            FOLLOWING CODE PRODUCES NUMERIC CESD SUBHEADING.           39690000
*         NCSHD='0'B;                   /* TURN NUM CESD SUBHEAD OFF    39700000
WRITE8   NI    SWITCHES,B'11111011'                               1162  39710000
*         SP2='1'B;                     /* SET UP DATA BUF CONTROL CHAR 39720000
         OI    SWITCHES+2,B'00100000'                             1163  39730000
*         HEADBUF(19:26)=HEADING2(22:29); /* PUT 'LMOD LOC' INTO BUF    39740000
         MVC   BUFFERS+19(8),HEADING2+21                          1164  39750000
*         HEADBUF(32:35)=HEADING1(23:26); /* PUT 'NAME' INTO BUFFER     39760000
         MVC   BUFFERS+32(4),HEADING1+22                          1165  39770000
*         HEADBUF(42:53)=HEADING1(28:39); /* PUT 'LENGTH TYPE' INTO BUF 39780000
         MVC   BUFFERS+42(12),HEADING1+27                         1166  39790000
*         /* TEST IF INPUT LOAD MODULE IS IN OVERLAY STRUCTURE          39800000
*         IF OVERLAY='1'B               /* IF OVERLAY SWITCH IS ON      39810000
*           THEN                        /* THEN                         39820000
         L     @7,PARMPTR                                         1167  39830000
         TM    20(@7),B'01000000'                                 1167  39840000
         BC    12,@8D9                                            1167  39850000
*             HEADBUF(56:62)=HEADING7(4:10); /* PUT 'SEGMENT' INTO BUF  39860000
         MVC   BUFFERS+56(7),HEADING7+3                           1168  39870000
*         HEADBUF(74:92)=HEADING2(22:40); /* PUT'LMOD LOC               39880000
*                                            CSECT LOC' INTO BUFFER     39890000
@8D9     MVC   BUFFERS+74(19),HEADING2+21                         1169  39900000
*         /* TEST IF A NUCLEUS IS BEING MAPPED                          39910000
*         IF NUCMAP='1'B                /* IF NUCMAP SWITCH IS ON       39920000
*           THEN                        /* THEN                         39930000
         TM    SWITCHES+2,B'00001000'                             1170  39940000
         BC    12,@8D8                                            1170  39950000
*             DO;                       /* PUT FOLLOWING INTO BUFFER    39960000
*               HEADBUF(19:22)=HEADING7(15:18); /* PUT ' NUC' INTO BUF  39970000
         MVC   BUFFERS+19(4),HEADING7+14                          1172  39980000
*               HEADBUF(74:77)=HEADING7(15:18); /* PUT ' NUC' INTO BUF  39990000
         MVC   BUFFERS+74(4),HEADING7+14                          1173  40000000
*             END;                                                      40010000
*         HEADBUF(99:102)=HEADING1(23:26); /* PUT 'NAME' INTO BUFFER    40020000
@8D8     MVC   BUFFERS+99(4),HEADING1+22                          1175  40030000
*         OUTAREAD=ADDR(HEADPRNT);      /* GET ADDR OF BUFFER FOR PUT   40040000
         LA    @1,BUFFERS                                         1176  40050000
*         BLNKHEAD='1'B;                /* INDIC TO BLANK IT AFTER PRNT 40060000
         OI    SWITCHES,B'01000000'                               1177  40070000
*         RET=ADDR(WRITE9);             /* SET UP RETURN ADDRESS        40080000
         LA    @3,WRITE9                                          1178  40090000
*         GO TO WRITE16;                /* GO TO PRINT NUM CESD SUBHD   40100000
         BC    15,WRITE16                                         1179  40110000
* WRITE9: /* BRANCH HERE TO RETURN FROM PRINTING NUMERIC CESD           40120000
*            SUBHEADING.  FOLLOWING CODE BRANCHES TO CHECK IF LINE      40130000
*            OF DATA IS TO BE PRINTED, BECAUSE IF NCSHD IS PRINTED,     40140000
*            NONE OF THE FOLLOWING HEADINGS CAN BE.                     40150000
*         GO TO WRITE15;                /* GO TO PRINT LINE OF DATA     40160000
*       END;                                                            40170000
*   /* TEST IF ALPHABETIC CESD HEADING IS REQUESTED                     40180000
*   IF ACHD='1'B                        /* IF ALPHA CESD HEAD SWITCH ON 40190000
*     THEN                              /* THEN                         40200000
@8DA     TM    SWITCHES,B'00000010'                               1182  40210000
         BC    12,@8D7                                            1182  40220000
*       DO;                             /* PROCESS THIS HEADING         40230000
*         /* TEST IF HEADING SHOULD GO ON THIS OR NEXT PAGE             40240000
*         IF LINECNT>57                 /* IF NO ROOM ON THIS PAGE      40250000
*           THEN                        /* THEN                         40260000
         LA    @F,57                                              1184  40270000
         C     @F,LINECNT                                         1184  40280000
*             GO TO WRITE1;             /* GO TO SKIP TO NEXT PAGE      40290000
         BC    04,WRITE1                                          1185  40300000
*         ACHD='0'B;                    /* TURN ALPHA CESD HEAD OFF     40310000
         NI    SWITCHES,B'11111101'                               1186  40320000
*         LINECNT=LINECNT+3;            /* INCREMENT LINE COUNT BY 3    40330000
         LA    @F,3                                               1187  40340000
         A     @F,LINECNT                                         1187  40350000
         ST    @F,LINECNT                                         1187  40360000
*         HEADCON=SP3LINES;             /* CAUSE CARR TO SKIP 3 LINES   40370000
         MVC   BUFFERS(1),SP3LINES                                1188  40380000
*         HEADBUF(12:26)=HEADING1(1:15); /* PUT 'CONTROL SECTION' IN BF 40390000
         MVC   BUFFERS+12(15),HEADING1                            1189  40400000
*         HEADBUF(67:71)=HEADING1(17:21); /* PUT 'ENTRY' INTO BUFFER    40410000
         MVC   BUFFERS+67(5),HEADING1+16                          1190  40420000
*         OUTAREAD=ADDR(HEADPRNT);      /* GET ADDR OF BUFFER FOR PUT   40430000
         LA    @1,BUFFERS                                         1191  40440000
*         BLNKHEAD='1'B;                /* INDIC TO BLANK IT AFTER PRNT 40450000
         OI    SWITCHES,B'01000000'                               1192  40460000
*         RET=ADDR(WRITE10);            /* SET UP RETURN ADDRESS        40470000
         LA    @3,WRITE10                                         1193  40480000
*         GO TO WRITE16;                /* GO TO PRINT ALPHA CESD HEAD  40490000
         BC    15,WRITE16                                         1194  40500000
* WRITE10: /* BRANCH HERE TO RETURN FROM PRINTING ALPHABETIC CESD       40510000
*             HEADING.  FOLLOWING CODE PRODUCES ALPHABETIC CESD         40520000
*             SUBHEADING.                                               40530000
*         LINECNT=LINECNT+1;            /* INCREMENT LINE COUNT BY 1    40540000
WRITE10  LA    @F,1                                               1195  40550000
         A     @F,LINECNT                                         1195  40560000
         ST    @F,LINECNT                                         1195  40570000
*         HEADCON=SP1LINE;              /* CAUSE CARR TO SKIP 1 LINE    40580000
         MVC   BUFFERS(1),SP1LINE                                 1196  40590000
*         GO TO WRITE11;                /* BYPASS ACSHD & LINECNT TESTS 40600000
         BC    15,WRITE11                                         1197  40610000
*       END;                                                            40620000
*   /* TEST IF ALPHABETIC CESD SUBHEADING IS TO BE PRINTED              40630000
*   IF ACSHD='1'B                       /* IF ALPHA CESD SUBHEAD IS ON  40640000
*     THEN                              /* THEN                         40650000
@8D7     TM    SWITCHES,B'00000001'                               1199  40660000
         BC    12,@8D6                                            1199  40670000
*       DO;                             /* PROCESS THIS HEADING         40680000
*         /* TEST IF HEADING SHOULD GO ON THIS OR NEXT PAGE             40690000
*         IF LINECNT>58                 /* IF NO ROOM ON THIS PAGE      40700000
*           THEN                        /* THEN                         40710000
         LA    @F,58                                              1201  40720000
         C     @F,LINECNT                                         1201  40730000
*             GO TO WRITE1;             /* GO TO SKIP TO NEXT PAGE      40740000
         BC    04,WRITE1                                          1202  40750000
*         LINECNT=LINECNT+2;            /* INCREMENT LINE COUNT BY 2    40760000
         LA    @F,2                                               1203  40770000
         A     @F,LINECNT                                         1203  40780000
         ST    @F,LINECNT                                         1203  40790000
*         HEADCON=SP2LINES;             /* CAUSE CARR TO SKIP 2 LINES   40800000
         MVC   BUFFERS(1),SP2LINES                                1204  40810000
* WRITE11: /* BRANCH HERE TO BYPASS ACSHD AND LINECNT TESTS, BECAUSE    40820000
*             EVERY TIME ACHD IS PRINTED ACSHD IS ALSO PRINTED AND      40830000
*             THESE TESTS MUST NOT BE MADE.  FOLLOWING CODE PRODUCES    40840000
*             ALPHABETIC CESD SUBHEADING.                               40850000
*         ACSHD='0'B;                   /* TURN ALPHA CESD SUBHEAD OFF  40860000
WRITE11  NI    SWITCHES,B'11111110'                               1205  40870000
*         SP2='1'B;                     /* SET UP DATA BUF CONTROL CHAR 40880000
         OI    SWITCHES+2,B'00100000'                             1206  40890000
*         HEADBUF(16:19)=HEADING1(23:26); /* PUT 'NAME' INTO BUF        40900000
         MVC   BUFFERS+16(4),HEADING1+22                          1207  40910000
*         HEADBUF(25:32)=HEADING2(22:29); /* PUT 'LMOD LOC' INTO BUFFER 40920000
         MVC   BUFFERS+25(8),HEADING2+21                          1208  40930000
*         HEADBUF(36:47)=HEADING1(28:39); /* PUT 'LENGTH TYPE' INTO BUF 40940000
         MVC   BUFFERS+36(12),HEADING1+27                         1209  40950000
*         /* TEST IF INPUT LOAD MODULE IS IN OVERLAY STRUCTURE          40960000
*         IF OVERLAY='1'B               /* IF OVERLAY SWITCH IS ON      40970000
*           THEN                        /* THEN                         40980000
         L     @7,PARMPTR                                         1210  40990000
         TM    20(@7),B'01000000'                                 1210  41000000
         BC    12,@8D5                                            1210  41010000
*             HEADBUF(50:56)=HEADING7(4:10); /* PUT 'SEGMENT' INTO BUF  41020000
         MVC   BUFFERS+50(7),HEADING7+3                           1211  41030000
*         HEADBUF(70:73)=HEADING1(23:26); /* PUT 'NAME' INTO BUFFER     41040000
@8D5     MVC   BUFFERS+70(4),HEADING1+22                          1212  41050000
*         HEADBUF(78:96)=HEADING2(22:40); /* PUT 'LMOD LOC              41060000
*                                            CSECT LOC' INTO BUFFER     41070000
         MVC   BUFFERS+78(19),HEADING2+21                         1213  41080000
*         /* TEST IF A NUCLEUS IS BEING MAPPED                          41090000
*         IF NUCMAP='1'B                /* IF NUCMAP SWITCH IS ON       41100000
*           THEN                        /* THEN                         41110000
         TM    SWITCHES+2,B'00001000'                             1214  41120000
         BC    12,@8D4                                            1214  41130000
*             DO;                       /* PUT FOLLOWING INTO BUFFER    41140000
*               HEADBUF(25:28)=HEADING7(15:18); /* PUT ' NUC' INTO BUF  41150000
         MVC   BUFFERS+25(4),HEADING7+14                          1216  41160000
*               HEADBUF(78:81)=HEADING7(15:18); /*'PUT ' NUC' INTO BUF  41170000
         MVC   BUFFERS+78(4),HEADING7+14                          1217  41180000
*             END;                                                      41190000
*         HEADBUF(99:103)=HEADING2(32:36); /* PUT 'CSECT' INTO BUFFER   41200000
@8D4     MVC   BUFFERS+99(5),HEADING2+31                          1219  41210000
*         HEADBUF(105:108)=HEADING1(23:26); /* PUT 'NAME' INTO BUFFER   41220000
         MVC   BUFFERS+105(4),HEADING1+22                         1220  41230000
*         OUTAREAD=ADDR(HEADPRNT);      /* GET ADDR OF BUFFER FOR PUT   41240000
         LA    @1,BUFFERS                                         1221  41250000
*         BLNKHEAD='1'B;                /* INDIC TO BLANK IT AFTER PRNT 41260000
         OI    SWITCHES,B'01000000'                               1222  41270000
*         RET=ADDR(WRITE12);            /* SET UP RETURN ADDRESS        41280000
         LA    @3,WRITE12                                         1223  41290000
*         GO TO WRITE16;                /* GO TO PRINT ALPHA CESD SUBHD 41300000
         BC    15,WRITE16                                         1224  41310000
* WRITE12: /* BRANCH HERE TO RETURN FROM PRINTING ALPHABETIC CESD       41320000
*             SUBHEADING.  FOLLOWING CODE BRANCHES TO PRINT A LINE      41330000
*             OF DATA, BECAUSE IF ACSHD IS PRINTED NONE OF THE          41340000
*             FOLLOWING HEADINGS CAN BE PRINTED.                        41350000
*         GO TO WRITE15;                /* GO TO PRINT LINE OF DATA     41360000
*       END;                                                            41370000
*   /* TEST IF NUMERIC RLD HEADING IS TO BE PRINTED                     41380000
*   IF NRHD='1'B                        /* IF NUM RLD HEAD SWITCH IS ON 41390000
*     THEN                              /* THEN                         41400000
@8D6     TM    SWITCHES+1,B'10000000'                             1227  41410000
         BC    12,@8D3                                            1227  41420000
*       DO;                             /* PROCESS THIS HEADING         41430000
*         /* TEST IF HEADING SHOULD GO ON THIS OR NEXT PAGE             41440000
*         IF LINECNT>58                 /* IF NO ROOM ON THIS PAGE      41450000
*           THEN                        /* THEN                         41460000
         LA    @F,58                                              1229  41470000
         C     @F,LINECNT                                         1229  41480000
*             GO TO WRITE1;             /* GO TO SKIP TO NEXT PAGE      41490000
         BC    04,WRITE1                                          1230  41500000
*         NRHD='0'B;                    /* TURN NUM RLD HEAD SWITCH OFF 41510000
         NI    SWITCHES+1,B'01111111'                             1231  41520000
*         LINECNT=LINECNT+3;            /* INCREMENT LINE COUNT BY 3    41530000
         LA    @F,3                                               1232  41540000
         A     @F,LINECNT                                         1232  41550000
         ST    @F,LINECNT                                         1232  41560000
*         HEADCON=SP3LINES;             /* CAUSE CARR TO SKIP 3 LINES   41570000
         MVC   BUFFERS(1),SP3LINES                                1233  41580000
*         SP2='1'B;                     /* SET UP DATA BUF CONTROL CHAR 41590000
         OI    SWITCHES+2,B'00100000'                             1234  41600000
*         HEADBUF(7:37)=HEADING2(22:52); /* PUT 'LMOD LOC  CSECT LOC    41610000
*                                           IN CSECT' INTO BUFFER       41620000
         MVC   BUFFERS+7(31),HEADING2+21                          1235  41630000
*         /* TEST IF INPUT LOAD MODULE IS IN OVERLAY STRUCTURE          41640000
*         IF OVERLAY='1'B               /* IF OVERLAY SWITCH IS ON      41650000
*           THEN                        /* THEN                         41660000
         L     @7,PARMPTR                                         1236  41670000
         TM    20(@7),B'01000000'                                 1236  41680000
         BC    12,@8D2                                            1236  41690000
*             HEADBUF(40:49)=HEADING7(1:10); /*PUT 'IN SEGMENT' IN BUF  41700000
         MVC   BUFFERS+40(10),HEADING7                            1237  41710000
*         HEADBUF(52:67)=HEADING2(1:16); /* 'REFERS TO SYMBOL'          41720000
@8D2     MVC   BUFFERS+52(16),HEADING2                            1238  41730000
*         HEADBUF(70:103)=HEADING2(19:52); /* PUT 'AT LMOD LOC CSECT LO 41740000
*                                             IN CSECT' INTO BUFFER     41750000
         MVC   BUFFERS+70(34),HEADING2+18                         1239  41760000
*         /* TEST IF A NUCLEUS IS BEING MAPPED                          41770000
*         IF NUCMAP='1'B                /* IF NUCMAP SWITCH IS ON       41780000
*           THEN                        /* THEN                         41790000
         TM    SWITCHES+2,B'00001000'                             1240  41800000
         BC    12,@8D1                                            1240  41810000
*             DO;                       /* PUT FOLLOWING INTO BUFFER    41820000
*               HEADBUF(7:10)=HEADING7(15:18); /* PUT ' NUC' INTO BUF   41830000
         MVC   BUFFERS+7(4),HEADING7+14                           1242  41840000
*               HEADBUF(73:75)=HEADING7(16:18); /* PUT 'NUC' INTO BUF   41850000
         MVC   BUFFERS+73(3),HEADING7+15                          1243  41860000
*               HEADBUF(76:80)=HEADING2(26:30); /* PUT ' LOC ' INTO BUF 41870000
         MVC   BUFFERS+76(5),HEADING2+25                          1244  41880000
*             END;                                                      41890000
*         /* TEST IF INPUT LOAD MODULE IS IN OVERLAY                    41900000
*         IF OVERLAY='1'B               /* IF OVERLAY SWITCH IS ON      41910000
*           THEN                        /* THEN                         41920000
@8D1     L     @7,PARMPTR                                         1246  41930000
         TM    20(@7),B'01000000'                                 1246  41940000
         BC    12,@8D0                                            1246  41950000
*             HEADBUF(106:115)=HEADING7(1:10); /* PUT 'IN SEGMENT IN'   41960000
         MVC   BUFFERS+106(10),HEADING7                           1247  41970000
*         OUTAREAD=ADDR(HEADPRNT);      /* GET ADDR OF BUFFER FOR PUT   41980000
@8D0     LA    @1,BUFFERS                                         1248  41990000
*         BLNKHEAD='1'B;                /* INDIC TO BLANK IT AFTER PRNT 42000000
         OI    SWITCHES,B'01000000'                               1249  42010000
*         RET=ADDR(WRITE15);            /* SET UP RETURN ADDRESS        42020000
         LA    @3,WRITE15                                         1250  42030000
*         GO TO WRITE16;                /* GO TO PRINT NUM RLD HEADING  42040000
         BC    15,WRITE16                                         1251  42050000
*       END;                                                            42060000
*   /* TEST IF ALPHABETIC RLD HEADING IS TO BE PRINTED                  42070000
*   IF ARHD='1'B                        /* IF ALPHA RLD HEAD SWITCH ON  42080000
*     THEN                              /* THEN                         42090000
@8D3     TM    SWITCHES+1,B'01000000'                             1253  42100000
         BC    12,@8CF                                            1253  42110000
*       DO;                             /* PROCESS THIS HEADING         42120000
*         /* TEST IF HEADING SHOULD GO ON THIS OR NEXT PAGE             42130000
*         IF LINECNT>58                 /* IF NO ROOM ON THIS PAGE      42140000
*           THEN                        /* THEN                         42150000
         LA    @F,58                                              1255  42160000
         C     @F,LINECNT                                         1255  42170000
*             GO TO WRITE1;             /* GO TO SKIP TO NEXT PAGE      42180000
         BC    04,WRITE1                                          1256  42190000
*         ARHD='0'B;                    /* TURN ALPHA RLD HD SWITCH OFF 42200000
         NI    SWITCHES+1,B'10111111'                             1257  42210000
*         LINECNT=LINECNT+3;            /* INCREMENT LINE COUNT BY 3    42220000
         LA    @F,3                                               1258  42230000
         A     @F,LINECNT                                         1258  42240000
         ST    @F,LINECNT                                         1258  42250000
*         HEADCON=SP3LINES;             /* CAUSE CARR TO SKIP 3 LINES   42260000
         MVC   BUFFERS(1),SP3LINES                                1259  42270000
*         SP2='1'B;                     /* SET UP DATA BUF CONTROL CHAR 42280000
         OI    SWITCHES+2,B'00100000'                             1260  42290000
*         HEADBUF(3:8)=HEADING2(11:16); /* PUT 'SYMBOL' INTO BUFFER     42300000
         MVC   BUFFERS+3(6),HEADING2+10                           1261  42310000
*         HEADBUF(12:45)=HEADING2(19:52); /* PUT 'AT LMOD LOC CSECT LOC 42320000
*                                            IN CSECT' INTO BUFFER      42330000
         MVC   BUFFERS+12(34),HEADING2+18                         1262  42340000
*         /* TEST IF INPUT LOAD MODULE IS IN OVERLAY STRUCTURE          42350000
*         IF OVERLAY='1'B               /* IF OVERLAY SWITCH IS ON      42360000
*           THEN                        /* THEN                         42370000
         L     @7,PARMPTR                                         1263  42380000
         TM    20(@7),B'01000000'                                 1263  42390000
         BC    12,@8CE                                            1263  42400000
*             HEADBUF(48:57)=HEADING7(1:10); /*PUT 'IN SEGMENT' IN BUF  42410000
         MVC   BUFFERS+48(10),HEADING7                            1264  42420000
*         HEADBUF(60:76)=HEADING3(1:17); /* PUT 'IS REFERRED TO BY' IN  42430000
@8CE     MVC   BUFFERS+60(17),HEADING3                            1265  42440000
*         HEADBUF(78:108)=HEADING2(22:52); /* PUT 'LMOD LOC  CSECT LOC  42450000
*                                             IN CSECT' INTO BUFFER     42460000
         MVC   BUFFERS+78(31),HEADING2+21                         1266  42470000
*         /* TEST IF A NUCLEUS IS BEING MAPPED                          42480000
*         IF NUCMAP='1'B                /* IF NUCMAP SWITCH IS ON       42490000
*           THEN                        /* THEN                         42500000
         TM    SWITCHES+2,B'00001000'                             1267  42510000
         BC    12,@8CD                                            1267  42520000
*             DO;                       /* PUT FOLLOWING INTO BUFFER    42530000
*               HEADBUF(15:17)=HEADING7(16:18); /* PUT 'NUC' INTO BUF   42540000
         MVC   BUFFERS+15(3),HEADING7+15                          1269  42550000
*               HEADBUF(18:22)=HEADING2(26:30); /* PUT ' LOC ' INTO BUF 42560000
         MVC   BUFFERS+18(5),HEADING2+25                          1270  42570000
*               HEADBUF(78:80)=HEADING7(16:18); /* PUT 'NUC' INTO BUF   42580000
         MVC   BUFFERS+78(3),HEADING7+15                          1271  42590000
*               HEADBUF(81:85)=HEADING2(26:30); /* PUT ' LOC ' INTO BUF 42600000
         MVC   BUFFERS+81(5),HEADING2+25                          1272  42610000
*             END;                                                      42620000
*         /* TEST IF INPUT LOAD MODULE IS IN OVERLAY STRUCTURE          42630000
*         IF OVERLAY='1'B               /* IF OVERLAY SWITCH IS ON      42640000
*           THEN                        /* THEN                         42650000
@8CD     L     @7,PARMPTR                                         1274  42660000
         TM    20(@7),B'01000000'                                 1274  42670000
         BC    12,@8CC                                            1274  42680000
*             HEADBUF(111:120)=HEADING7(1:10); /* PUT 'IN SEGMENT' IN   42690000
         MVC   BUFFERS+111(10),HEADING7                           1275  42700000
*         OUTAREAD=ADDR(HEADPRNT);      /* GET ADDR OF BUFFER FOR PUT   42710000
@8CC     LA    @1,BUFFERS                                         1276  42720000
*         BLNKHEAD='1'B;                /* INDIC TO BLANK IT AFTER PRNT 42730000
         OI    SWITCHES,B'01000000'                               1277  42740000
*         RET=ADDR(WRITE15);            /* SET UP RETURN ADDRESS        42750000
         LA    @3,WRITE15                                         1278  42760000
*         GO TO WRITE16;                /* GO TO PRINT ALPHA RLD HEADNG 42770000
         BC    15,WRITE16                                         1279  42780000
*       END;                                                            42790000
*   /* TEST IF PSEUDO REGISTER HEADING IS TO BE PRINTED                 42800000
*   IF PRHD='1'B                        /* IF PSEUDO REG HEAD SWITCH ON 42810000
*     THEN                              /* THEN                         42820000
@8CF     TM    SWITCHES+1,B'00100000'                             1281  42830000
         BC    12,@8CB                                            1281  42840000
*       DO;                             /* PROCESS THIS HEADING         42850000
*         /* TEST IF HEADING SHOULD GO ON THIS OR NEXT PAGE             42860000
*         IF LINECNT>57                 /* IF NO ROOM ON THIS PAGE      42870000
*           THEN                        /* THEN                         42880000
         LA    @F,57                                              1283  42890000
         C     @F,LINECNT                                         1283  42900000
*             GO TO WRITE1;             /* GO TO SKIP TO NEXT PAGE      42910000
         BC    04,WRITE1                                          1284  42920000
*         PRHD='0'B;                    /* TURN PSEUDO REG HEADING OFF  42930000
         NI    SWITCHES+1,B'11011111'                             1285  42940000
*         LINECNT=LINECNT+3;            /* INCREMENT LINE COUNT BY 3    42950000
         LA    @F,3                                               1286  42960000
         A     @F,LINECNT                                         1286  42970000
         ST    @F,LINECNT                                         1286  42980000
*         HEADCON=SP3LINES;             /* CAUSE CARR TO SKIP 3 LINES   42990000
         MVC   BUFFERS(1),SP3LINES                                1287  43000000
*         /* TEST IF NUMERIC CESD PROCESSING IS BEING PERFORMED         43010000
*         IF NUMCESD='1'B               /* IF NUMCESD SWITCH IS ON      43020000
*           THEN                        /* THEN                         43030000
         TM    SWITCHES+2,B'01000000'                             1288  43040000
         BC    12,@8CA                                            1288  43050000
*             HEADBUF(18:32)=HEADING4(8:22); /* 'PSEUDO REGISTER' IN BF 43060000
         MVC   BUFFERS+18(15),HEADING4+7                          1289  43070000
         BC    15,@8C9                                            1290  43080000
*           ELSE                        /* ELSE ALPH CESD PROCESSING ON 43090000
*             HEADBUF(12:26)=HEADING4(8:22); /* PUT IT IN DIFF SPOT     43100000
@8CA     MVC   BUFFERS+12(15),HEADING4+7                          1290  43110000
*         OUTAREAD=ADDR(HEADPRNT);      /* GET ADDR OF BUFFER FOR PUT   43120000
@8C9     LA    @1,BUFFERS                                         1291  43130000
*         BLNKHEAD='1'B;                /* INDIC TO BLANK IT AFTER PRNT 43140000
         OI    SWITCHES,B'01000000'                               1292  43150000
*         RET=ADDR(WRITE13);            /* SET UP RETURN ADDRESS        43160000
         LA    @3,WRITE13                                         1293  43170000
*         GO TO WRITE16;                /* GO TO PRINT PSEUDO REG HEAD  43180000
         BC    15,WRITE16                                         1294  43190000
* WRITE13: /* BRANCH HERE TO RETURN FROM PRINTING PSEUDO REGISTER       43200000
*             HEADING.  FOLLOWING CODE PRODUCES ALPHABETIC OR           43210000
*             NUMERIC PSEUDO REGISTER SUBHEADING.                       43220000
*         LINECNT=LINECNT+1;            /* INCREMENT LINE COUNT BY 1    43230000
WRITE13  LA    @F,1                                               1295  43240000
         A     @F,LINECNT                                         1295  43250000
         ST    @F,LINECNT                                         1295  43260000
*         HEADCON=SP1LINE;              /* CAUSE CARR TO SKIP 1 LINE    43270000
         MVC   BUFFERS(1),SP1LINE                                 1296  43280000
*         GO TO WRITE14;                /* BYPASS PRSHD & LINECNT TESTS 43290000
         BC    15,WRITE14                                         1297  43300000
*       END;                                                            43310000
*   /* TEST IF PSEUDO REGISTER SUBHEADING IS TO BE PRINTED              43320000
*   IF PRSHD='1'B                       /* IF PSEUDO REG SUBHEAD IS ON  43330000
*     THEN                              /* THEN                         43340000
@8CB     TM    SWITCHES+1,B'00010000'                             1299  43350000
         BC    12,@8C8                                            1299  43360000
*       DO;                             /* PROCESS THIS HEADING         43370000
*         /* TEST IF HEADING SHOULD GO ON THIS OR NEXT PAGE             43380000
*         IF LINECNT>58                 /* IF NO ROOM ON THIS PAGE      43390000
*           THEN                        /* THEN                         43400000
         LA    @F,58                                              1301  43410000
         C     @F,LINECNT                                         1301  43420000
*             GO TO WRITE1;             /* GO TO SKIP TO NEXT PAGE      43430000
         BC    04,WRITE1                                          1302  43440000
*           LINECNT=LINECNT+2;          /* INCREMENT LINE COUNT BY 2    43450000
         LA    @F,2                                               1303  43460000
         A     @F,LINECNT                                         1303  43470000
         ST    @F,LINECNT                                         1303  43480000
*           HEADCON=SP2LINES;           /* CAUSE CARR TO SKIP 2 LINES   43490000
         MVC   BUFFERS(1),SP2LINES                                1304  43500000
* WRITE14:  /* BRANCH HERE TO BYPASS PRSHD AND LINECNT TESTS, BECAUSE   43510000
*              EVERY TIME PRHD IS PRINTED PRSHD IS ALSO PRINTED AND     43520000
*              THESE TESTS MUST NOT BE MADE.  FOLLOWING CODE PRODUCES   43530000
*              ALPHABETIC OR NUMERIC PSEUDO REGISTER SUBHEADING.        43540000
*           PRSHD='0'B;                 /* TURN PSEUDO REG SUBHEAD OFF  43550000
WRITE14  NI    SWITCHES+1,B'11101111'                             1305  43560000
*           SP2='1'B;                   /* SET UP DATA BUF CONTROL CHAR 43570000
         OI    SWITCHES+2,B'00100000'                             1306  43580000
*           /* TEST IF NUMERIC CESD PROCESSING IS BEING PERFORMED       43590000
*           IF NUMCESD='1'B             /* IF NUMCESD SWITCH IS ON      43600000
*             THEN                      /* THEN                         43610000
         TM    SWITCHES+2,B'01000000'                             1307  43620000
         BC    12,@8C7                                            1307  43630000
*               DO;                     /* PUT FOLLOWING INTO BUFFER    43640000
*                 HEADBUF(19:24)=HEADING4(1:6); /* PUT 'VECTOR' IN BUF  43650000
         MVC   BUFFERS+19(6),HEADING4                             1309  43660000
*                 HEADBUF(26:28)=HEADING2(27:29); /* PUT 'LOC' IN BUF   43670000
         MVC   BUFFERS+26(3),HEADING2+26                          1310  43680000
*                 HEADBUF(32:35)=HEADING1(23:26); /* PUT 'NAME' IN BUF  43690000
         MVC   BUFFERS+32(4),HEADING1+22                          1311  43700000
*                 HEADBUF(42:47)=HEADING1(28:33); /* PUT 'LENGTH' IN    43710000
         MVC   BUFFERS+42(6),HEADING1+27                          1312  43720000
         BC    15,@8C6                                            1314  43730000
*               END;                                                    43740000
*             ELSE                      /* ELSE ALPH CESD PROCESSING ON 43750000
*               DO;                     /* PUT FOLLOWING INTO BUFFER    43760000
*                 HEADBUF(16:19)=HEADING1(23:26); /* PUT 'NAME' IN BUF  43770000
@8C7     MVC   BUFFERS+16(4),HEADING1+22                          1315  43780000
*                 HEADBUF(24:29)=HEADING4(1:6); /* PUT 'VECTOR' IN BUF  43790000
         MVC   BUFFERS+24(6),HEADING4                             1316  43800000
*                 HEADBUF(31:33)=HEADING2(27:29); /* PUT 'LOC' IN BUF   43810000
         MVC   BUFFERS+31(3),HEADING2+26                          1317  43820000
*                 HEADBUF(36:41)=HEADING1(28:33); /* PUT 'LENGTH' IN    43830000
         MVC   BUFFERS+36(6),HEADING1+27                          1318  43840000
*               END;                                                    43850000
*           OUTAREAD=ADDR(HEADPRNT);    /* GET ADDR OF BUFFER FOR PUT   43860000
@8C6     LA    @1,BUFFERS                                         1320  43870000
*           BLNKHEAD='1'B;              /* INDIC TO BLANK IT AFTER PRNT 43880000
         OI    SWITCHES,B'01000000'                               1321  43890000
*           RET=ADDR(WRITE15);          /* SET UP RETURN ADDRESS        43900000
         LA    @3,WRITE15                                         1322  43910000
*           GO TO WRITE16;              /* GO TO PRINT PSEUDO REG SUBHD 43920000
         BC    15,WRITE16                                         1323  43930000
*         END;                                                          43940000
* WRITE15: /* BRANCH HERE AFTER PRINTING A HEADING.                     43950000
*             FOLLOWING CODE PREPARES TO PRINT A LINE OF DATA.          43960000
*   /* TEST IF SKIP TO 2ND NEXT LINE IS REQUESTED                       43970000
*   IF SP2='1'B                         /* IF SP2 SWITCH IS ON          43980000
*     THEN                              /* THEN                         43990000
@8C8     EQU   *                                                  1325  44000000
WRITE15  TM    SWITCHES+2,B'00100000'                             1325  44010000
         BC    12,@8C5                                            1325  44020000
*       DO;                             /* DO THE FOLLOWING             44030000
*         SP2='0'B;                     /* TURN SP2 SWITCH OFF          44040000
         NI    SWITCHES+2,B'11011111'                             1327  44050000
*         DATACON=SP2LINES;             /* CAUSE SKIP TO 2ND NEXT LINE  44060000
         MVC   BUFFERS+124(1),SP2LINES                            1328  44070000
*         LINECNT=LINECNT+2;            /* INCREMENT LINE COUNT BY 2    44080000
         LA    @F,2                                               1329  44090000
         A     @F,LINECNT                                         1329  44100000
         ST    @F,LINECNT                                         1329  44110000
         BC    15,@8C4                                            1331  44120000
*       END;                                                            44130000
*     ELSE                              /* ELSE SP2 SWITCH IS OFF       44140000
*       DO;                             /* DO THE FOLLOWING             44150000
*         DATACON=SP1LINE;              /* CAUSE CARR TO SKIP 1 LINE    44160000
@8C5     MVC   BUFFERS+124(1),SP1LINE                             1332  44170000
*         LINECNT=LINECNT+1;            /* INCREMENT LINE COUNT BY 1    44180000
         LA    @F,1                                               1333  44190000
         A     @F,LINECNT                                         1333  44200000
         ST    @F,LINECNT                                         1333  44210000
*       END;                                                            44220000
*   OUTAREAD=ADDR(DATAPRNT);            /* GET ADDR OF BUFF FOR SYSTEM  44230000
@8C4     LA    @1,BUFFERS+124                                     1335  44240000
*   BLNKDATA='1'B;                      /* INDIC TO BLANK IT AFTER PRNT 44250000
         OI    SWITCHES,B'00100000'                               1336  44260000
*   RET=SAVERET;                        /* RESTORE RET                  44270000
         L     @3,SAVERET                                         1337  44280000
* WRITE16: /* BRANCH HERE WHEN A HEADING IS TO BE PRINTED.              44290000
*             FOLLOWING CODE PRINTS IT.                                 44300000
*   DCBAD=OUTDCBAD;                     /* LOAD OUTPUT DCB ADR INTO REG 44310000
WRITE16  L     @7,PARMPTR                                         1338  44320000
         L     @2,4(0,@7)                                         1338  44330000
*   OUTBUFAD=OUTAREAD;                  /* LOAD OUTPUT BUF ADR INTO REG 44340000
         LR    @0,@1                                              1339  44350000
*   GEN(PUT (DCBAD));                   /* PRINT ONE LINE               44360000
         PUT (DCBAD)                                                    44370000
         DS    0H                                                       44380000
*   /* TEST IF HEADING BUFFER SHOULD BE BLANKED OUT                     44390000
*   IF BLNKHEAD='1'B                    /* IF BLNKHEAD SWITCH IS ON     44400000
*     THEN                              /* THEN                         44410000
         TM    SWITCHES,B'01000000'                               1341  44420000
         BC    12,@8C3                                            1341  44430000
* WRITE17: /* BRANCH HERE RIGHT AFTER ENTERING HMBLKXRF.                44440000
*             FOLLOWING CODE INITIALIZES BUFFERS TO BLANKS.             44450000
*       DO;                             /* BLANK OUT THE HEADING BUFFER 44460000
*         HEADBUF(1)=BLANK;             /* PUT BLANK INTO FIRST BYTE    44470000
WRITE17  MVC   BUFFERS+1(1),BLANK                                 1343  44480000
*         HEADBUF(2:120)=HEADBUF(1:119); /* FILL REMAINDER OF BUFFER    44490000
         MVC   BUFFERS+2(119),BUFFERS+1                           1344  44500000
*         BLNKHEAD='0'B;                /* TURN BLNKHEAD SWITCH OFF     44510000
         NI    SWITCHES,B'10111111'                               1345  44520000
*       END;                                                            44530000
*   /* TEST IF DATA BUFFER SHOULD BE BLANKED OUT                        44540000
*   IF BLNKDATA='1'B                    /* IF BLNKDATA SWITCH IS ON     44550000
*     THEN                              /* THEN                         44560000
@8C3     TM    SWITCHES,B'00100000'                               1347  44570000
         BC    12,@8C2                                            1347  44580000
*       DO;                             /* BLANK OUT THE DATA BUFFER    44590000
*         DATABUF(1)=BLANK;             /* PUT BLANK INTO FIRST BYTE    44600000
         MVC   BUFFERS+125(1),BLANK                               1349  44610000
*         DATABUF(2:120)=DATABUF(1:119); /* FILL REMAINDER OF BUFFER    44620000
         MVC   BUFFERS+126(119),BUFFERS+125                       1350  44630000
*         BLNKDATA='0'B;                /* TURN BLNKDATA SWITCH OFF     44640000
         NI    SWITCHES,B'11011111'                               1351  44650000
*       END;                                                            44660000
*   GO TO RET;                          /* RETURN WITHIN HMBLKXRF       44670000
@8C2     BCR   15,@3                                              1353  44680000
*                                                                       44690000
* /******************************************************************** 44700000
* /*   THE FOLLOWING SECTION OF CODE CONVERTS A 2-BYTE BINARY INTEGER   44710000
* /*   INTO A 4-BYTE ZONED DECIMAL INTEGER SUITABLE FOR PRINTING.       44720000
* /*   IT IS ENTERED EACH TIME A PAGE NO. OR SEGMENT NO. IS TO BE       44730000
* /*   CONVERTED.                                                       44740000
* /******************************************************************** 44750000
*                                                                       44760000
* BITODEC:                                                              44770000
*   GEN;                                                                44780000
BITODEC  EQU   *                                                  1354  44790000
         CVD   BINARY,BININT           CONVERT TO PACKED DECIMAL        44800000
         UNPK  DECINT(4),BININT+6(2)   CONVERT TO ZONED DECIMAL         44810000
         OI    DECINT+3,X'F0'          DELETE SIGN IN LOW ORDER BYTE    44820000
         DS    0H                                                       44830000
*   /* TEST IF NONSIG ZEROS OF NUMBER TO BE PRINTED SHOULD BE BLANKED   44840000
*   IF BLNKZERO='1'B                    /* IF BLNKZERO SWITCH IS ON     44850000
*     THEN                              /* THEN                         44860000
         TM    SWITCHES+1,B'00000001'                             1355  44870000
         BC    12,@8C1                                            1355  44880000
*       DO;                             /* BLANK OUT NONSIG ZEROS       44890000
*         BLNKZERO='0'B;                /* TURN BLNKZERO SWITCH OFF     44900000
         NI    SWITCHES+1,B'11111110'                             1357  44910000
*         GO TO BLANK0;                 /* GO TO BLANK OUT NONSIG ZEROS 44920000
         BC    15,BLANK0                                          1358  44930000
*       END;                                                            44940000
*     ELSE                              /* ELSE BLNKZERO SWITCH IS OFF  44950000
*       DO;                             /* DON'T BLANK NONSIG ZEROS     44960000
*         GO TO RET;                    /* RETURN WITHIN HMBLKXRF       44970000
@8C1     BCR   15,@3                                              1361  44980000
*       END;                                                            44990000
*                                                                       45000000
* /******************************************************************** 45010000
* /*   THE FOLLOWING SECTION OF CODE CONVERTS A 3-BYTE BINARY INTEGER   45020000
* /*   INTO A 6-BYTE ZONED HEXADECIMAL INTEGER SUITABLE FOR PRINTING.   45030000
* /*   IT IS ENTERED EACH TIME AN ADDRESS IS TO BE CONVERTED.           45040000
* /******************************************************************** 45050000
*                                                                       45060000
* BITOHEX:                                                              45070000
*   /* TEST IF RELOCATION FACTOR IS TO BE ADDED TO ADDR BEING CONVERTED 45080000
*   IF RELOCFAC^=0                      /* IF RELOCFAC IS NOT 0         45090000
*      & RELOC='1'B                     /* AND IF RELOC SWITCH IS ON    45100000
*     THEN                              /* THEN                         45110000
@8C0     EQU   *                                                  1363  45120000
BITOHEX  SR    @F,@F                                              1363  45130000
         L     @7,PARMPTR                                         1363  45140000
         C     @F,60(0,@7)                                        1363  45150000
         BC    08,@8BF                                            1363  45160000
         TM    SWITCHES+2,B'00000010'                             1363  45170000
         BC    12,@8BE                                            1363  45180000
*       BININT(5:7)=BININT(5:7)+RELOCFAC; /* ADD RELOC FACTOR TO ADDR   45190000
         L     @F,60(0,@7)                                        1364  45200000
         MVC   @TEMP3+1(3),BININT+4                               1364  45210000
         A     @F,@TEMP3                                          1364  45220000
         ST    @F,@TEMP4                                          1364  45230000
         MVC   BININT+4(3),@TEMP4+1                               1364  45240000
*   RELOC='1'B;                         /* TURN RELOC SWITCH ON         45250000
@8BE     EQU   *                                                  1365  45260000
@8BF     OI    SWITCHES+2,B'00000010'                             1365  45270000
*   GEN;                                                                45280000
         UNPK  HEXINT+1(7),BININT+4(4) CONVERT TO ZONED BINARY          45290000
         NC    HEXINT+1(6),ZONEOFF     ZERO OUT THE ZONES OF THE DIGITS 45300000
         TR    HEXINT+1(6),HEXCHARS    CONVERT TO PRINTABLE HEXADECIMAL 45310000
         DS    0H                                                       45320000
* BLANK0: /* BRANCH HERE AFTER CONVERTING A NUMBER TO PRINTABLE DECIMAL 45330000
*            FOLLOWING CODE BLANKS NONSIGNIFICANT ZEROS.                45340000
*   /* PUT BLANKS OVER NONSIGNIFICANT ZEROS                             45350000
*   DO I=2 TO 5;                        /* LOOP A POSSIBLE 5 TIMES      45360000
BLANK0   LA    @2,2                                               1367  45370000
*     /* TEST IF NUMBER SHOULD BE BLANKED OUT                           45380000
*     IF HEXINT(I)=CHARZERO(1)          /* IF THE NUMBER IS ZERO        45390000
*       THEN                            /* THEN                         45400000
@DO8BD   LR    @7,@2                                              1368  45410000
         LA    @A,HEXINT-1(@7)                                    1368  45420000
         CLC   0(1,@A),CHARZERO                                   1368  45430000
         BC    07,@8B9                                            1368  45440000
*         HEXINT(I)=BLANK;              /* BLANK IT OUT                 45450000
         MVC   0(1,@A),BLANK                                      1369  45460000
         BC    15,@8B8                                            1370  45470000
*       ELSE                            /* ELSE THE NUMBER IS NOT ZERO  45480000
*         GO TO RET;                    /* RETURN WITHIN HMBLKXRF       45490000
@8B9     BCR   15,@3                                              1370  45500000
*   END;                                                                45510000
*   GO TO RET;                          /* RETURN WITHIN HMBLKXRF       45520000
@8B8     AH    @2,@D3                                             1371  45530000
@DO8BC   CH    @2,@D10                                            1371  45540000
         BC    12,@DO8BD                                          1371  45550000
         BCR   15,@3                                              1372  45560000
*                                                                       45570000
* /******************************************************************** 45580000
* /*   THE FOLLOWING SECTION OF CODE PREPARES THIS MESSAGE FOR          45590000
* /*   PRINTING: '******END OF MAP AND CROSS-REFERENCE LISTING'.        45600000
* /*   IT IS ENTERED WHEN NORMAL PROCESSING COMPLETES.                  45610000
* /******************************************************************** 45620000
*                                                                       45630000
* FINISH:                                                               45640000
*   DATABUF(1)=ASTERISK;                /* PUT '*' IN FIRST BYTE        45650000
FINISH   MVC   BUFFERS+125(1),ASTERISK                            1373  45660000
*   DATABUF(2:6)=DATABUF(1:5);          /* FILL BYTES 2 THRU 6          45670000
         MVC   BUFFERS+126(5),BUFFERS+125                         1374  45680000
*   DATABUF(7:9)=HEADING7(12:14);       /* PUT 'END' INTO BUFFER        45690000
         MVC   BUFFERS+131(3),HEADING7+11                         1375  45700000
*   DATABUF(11:12)=HEADING3(19:20);     /* PUT 'OF' INTO BUFFER         45710000
         MVC   BUFFERS+135(2),HEADING3+18                         1376  45720000
*   DATABUF(14:44)=HEADING5(1:31);      /* PUT 'MAP AND CROSS-REFERENCE 45730000
*                                          LISTING' INTO BUFFER         45740000
         MVC   BUFFERS+138(31),HEADING5                           1377  45750000
*   /* TEST IF LINE SHOULD GO ON THIS OR NEXT PAGE                      45760000
*   IF LINECNT>58                       /* IF NO ROOM IN THIS PAGE      45770000
*     THEN                              /* THEN                         45780000
         LA    @F,58                                              1378  45790000
         C     @F,LINECNT                                         1378  45800000
         BC    10,@8B7                                            1378  45810000
*       DATACON=SP1PAGE;                /* CAUSE CARR TO SKIP 1 PAGE    45820000
         MVC   BUFFERS+124(1),SP1PAGE                             1379  45830000
         BC    15,@8B6                                            1380  45840000
*     ELSE                              /* THERE IS ROOM ON THIS PAGE   45850000
*       DATACON=SP3LINES;               /* CAUSE CARR TO SKIP 3 LINES   45860000
@8B7     MVC   BUFFERS+124(1),SP3LINES                            1380  45870000
*   OUTAREAD=ADDR(DATAPRNT);            /* GET ADDR OF BUFFER FOR PUT   45880000
@8B6     LA    @1,BUFFERS+124                                     1381  45890000
*   RET=ADDR(ABORT);                    /* SET UP RETURN ADDRESS        45900000
         LA    @3,ABORT                                           1382  45910000
*   GO TO WRITE16;                      /* GO TO PRINT TERMINAL MSG     45920000
         BC    15,WRITE16                                         1383  45930000
*                                                                       45940000
* /******************************************************************** 45950000
* /*   THE FOLLOWING SECTION OF CODE RETURNS CONTROL TO THE CONTROL     45960000
* /*   MODULE.  IT IS ENTERED WHEN AN ERROR IS ENCOUNTERED,             45970000
* /*   TERMINATING HMBLKXRF PROCESSING.                                 45980000
* /******************************************************************** 45990000
*                                                                       46000000
* ABORT:                                                                46010000
*   RETURN;                             /* RETURN TO HMBLKCTL           46020000
* END HMBLKXRF;                         /* END OF PROCEDURE HMBLKXRF    46030000
@EL01    L     @D,4(0,@D)                                         1385  46040000
         LR    @1,@C                                              1385  46050000
         L     @0,@SIZ001                                         1385  46060000
         FREEMAIN R,LV=(0),A=(1)                                  1385  46070000
         LM    @E,@C,12(@D)                                       1385  46080000
         BCR   15,@E                                              1385  46090000
@DATA1   EQU   *                                                        46100000
@0       EQU   00                  EQUATES FOR REGISTERS 0-15           46110000
@1       EQU   01                                                       46120000
@2       EQU   02                                                       46130000
@3       EQU   03                                                       46140000
@4       EQU   04                                                       46150000
@5       EQU   05                                                       46160000
@6       EQU   06                                                       46170000
@7       EQU   07                                                       46180000
@8       EQU   08                                                       46190000
@9       EQU   09                                                       46200000
@A       EQU   10                                                       46210000
@B       EQU   11                                                       46220000
@C       EQU   12                                                       46230000
@D       EQU   13                                                       46240000
@E       EQU   14                                                       46250000
@F       EQU   15                                                       46260000
@D1      DC    F'0'                                                     46270000
@D2      DC    H'18'                                                    46280000
@D3      DC    H'1'                                                     46290000
@D4      DC    H'-2'                                                    46300000
@D5      DC    H'-4'                                                    46310000
@D6      DC    H'4'                                                     46320000
@D7      DC    H'2'                                                     46330000
@D8      DC    H'8'                                                     46340000
@D9      DC    H'-8'                                                    46350000
@D10     DC    H'5'                                                     46360000
@D11     DC    H'10'                                                    46370000
@D12     DC    H'-18'                                                   46380000
@MVC     MVC   0(1,@A),0(@E)                                            46390000
         DS    0F                                                       46400000
@SIZ001  DC    AL1(&SPN)                                                46410000
         DC    AL3(@DATEND-@DATD)                                       46420000
         DS    0F                                                       46430000
@X4      DC    X'70000000'                                              46440000
         DS    0D                                                       46450000
@DATA    EQU   *                                                        46460000
DUMMY    EQU   00000000            FULLWORD INTEGER                     46470000
OUTBUFAD EQU   00000000            FULLWORD POINTER REGISTER            46480000
PARMREG  EQU   00000001            FULLWORD POINTER REGISTER            46490000
OUTAREAD EQU   00000001            FULLWORD POINTER REGISTER            46500000
DCBAD    EQU   00000002            FULLWORD POINTER REGISTER            46510000
DEBAD    EQU   00000002            FULLWORD POINTER REGISTER            46520000
UCBAD    EQU   00000002            FULLWORD POINTER REGISTER            46530000
BINARY   EQU   00000002            FULLWORD INTEGER REGISTER            46540000
I        EQU   00000002            FULLWORD INTEGER REGISTER            46550000
INBUFAD  EQU   00000003            FULLWORD POINTER REGISTER            46560000
RET      EQU   00000003            3  BYTE  POINTER REGISTER            46570000
CURRCESD EQU   00000005            3  BYTE  POINTER REGISTER            46580000
CURRLD   EQU   00000006            3  BYTE  POINTER REGISTER            46590000
MAINT    EQU   *                   400 BYTE(S) ON DWORD                 46600000
         DC    C'HMBLKXRF MAINTENANCE AREA'                             46610000
         DC    00375C' '                                                46620000
NULL     EQU   *                   8 BIT(S) ON BYTE                     46630000
         DC    B'00000111'                                              46640000
NEVRCALL EQU   *                   1 BYTE(S)                            46650000
         DC    X'06'                                                    46660000
CESD     EQU   *                   8 BIT(S) ON BYTE                     46670000
         DC    B'00100000'                                              46680000
IDR      EQU   *                   8 BIT(S) ON BYTE                     46690000
         DC    B'10000000'                                              46700000
CONTROL  EQU   *                   8 BIT(S) ON BYTE                     46710000
         DC    B'00000001'                                              46720000
CONTEOS  EQU   *                   8 BIT(S) ON BYTE                     46730000
         DC    B'00000101'                                              46740000
CONTEOM  EQU   *                   8 BIT(S) ON BYTE                     46750000
         DC    B'00001101'                                              46760000
CONTRLD  EQU   *                   8 BIT(S) ON BYTE                     46770000
         DC    B'00000011'                                              46780000
CRLDEOS  EQU   *                   8 BIT(S) ON BYTE                     46790000
         DC    B'00000111'                                              46800000
CRLDEOM  EQU   *                   8 BIT(S) ON BYTE                     46810000
         DC    B'00001111'                                              46820000
RLD      EQU   *                   8 BIT(S) ON BYTE                     46830000
         DC    B'00000010'                                              46840000
RLDEOS   EQU   *                   8 BIT(S) ON BYTE                     46850000
         DC    B'00000110'                                              46860000
RLDEOM   EQU   *                   8 BIT(S) ON BYTE                     46870000
         DC    B'00001110'                                              46880000
SYM      EQU   *                   8 BIT(S) ON BYTE                     46890000
         DC    B'01000000'                                              46900000
SCATRANS EQU   *                   8 BIT(S) ON BYTE                     46910000
         DC    B'00010000'                                              46920000
SP1LINE  EQU   *                   1 BYTE(S)                            46930000
         DC    C' '                                                     46940000
SP2LINES EQU   *                   1 BYTE(S)                            46950000
         DC    C'0'                                                     46960000
SP3LINES EQU   *                   1 BYTE(S)                            46970000
         DC    C'-'                                                     46980000
SP1PAGE  EQU   *                   1 BYTE(S)                            46990000
         DC    C'1'                                                     47000000
HEADING1 EQU   *                   39 BYTE(S)                           47010000
         DC    C'CONTROL SECTION ENTRY NAME LENGTH  TYPE'               47020000
HEADING2 EQU   *                   52 BYTE(S)                           47030000
         DC    C'REFERS TO SYMBOL  AT LMOD LOC  CSECT LOC  '            47040000
         DC    C'  IN CSECT'                                            47050000
HEADING3 EQU   *                   52 BYTE(S)                           47060000
         DC    C'IS REFERRED TO BY OF LOAD MODULE IF NOT IN'            47070000
         DC    C' OVERLAY()'                                            47080000
HEADING4 EQU   *                   23 BYTE(S)                           47090000
         DC    C'VECTOR PSEUDO REGISTERS'                               47100000
HEADING5 EQU   *                   31 BYTE(S)                           47110000
         DC    C'MAP AND CROSS-REFERENCE LISTING'                       47120000
HEADING6 EQU   *                   27 BYTE(S)                           47130000
         DC    C'PAGE NUMERICAL ALPHABETICAL'                           47140000
HEADING7 EQU   *                   22 BYTE(S)                           47150000
         DC    C'IN SEGMENT END NUCLEUS'                                47160000
SDPRT    EQU   *                   4 BYTE(S)                            47170000
         DC    C'SD'                                                    47180000
         DC    00002C' '                                                47190000
CMPRT    EQU   *                   4 BYTE(S)                            47200000
         DC    C'CM'                                                    47210000
         DC    00002C' '                                                47220000
PCPRT    EQU   *                   4 BYTE(S)                            47230000
         DC    C'PC'                                                    47240000
         DC    00002C' '                                                47250000
PDPRT    EQU   *                   4 BYTE(S)                            47260000
         DC    C'PD'                                                    47270000
         DC    00002C' '                                                47280000
PRIVPRT  EQU   *                   8 BYTE(S)                            47290000
         DC    C'$PRIVATE'                                              47300000
ENTABPRT EQU   *                   6 BYTE(S)                            47310000
         DC    C'$ENTAB'                                                47320000
SEGTBPRT EQU   *                   7 BYTE(S)                            47330000
         DC    C'$SEGTAB'                                               47340000
BLCOMPRT EQU   *                   9 BYTE(S)                            47350000
         DC    C'$BLANKCOM'                                             47360000
UNRESPRT EQU   *                   11 BYTE(S)                           47370000
         DC    C'$UNRESOLVED'                                           47380000
UNREWPRT EQU   *                   14 BYTE(S)                           47390000
         DC    C'$UNRESOLVED(W)'                                        47400000
NEVCLPRT EQU   *                   11 BYTE(S)                           47410000
         DC    C'$NEVER-CALL'                                           47420000
BLANK    EQU   *                   1 BYTE(S)                            47430000
         DC    C' '                                                     47440000
CHARZERO EQU   *                   2 BYTE(S)                            47450000
         DC    X'F0F0'                                                  47460000
ZERO     EQU   *                   3 BYTE(S)                            47470000
         DC    X'000000'                                                47480000
DASH     EQU   *                   1 BYTE(S)                            47490000
         DC    C'-'                                                     47500000
ASTERISK EQU   *                   1 BYTE(S)                            47510000
         DC    C'*'                                                     47520000
PERIOD   EQU   *                   1 BYTE(S)                            47530000
         DC    C'.'                                                     47540000
ONE      EQU   *                   1 BYTE(S)                            47550000
         DC    X'01'                                                    47560000
TWO      EQU   *                   1 BYTE(S)                            47570000
         DC    X'02'                                                    47580000
IEANUC0  EQU   *                   7 BYTE(S)                            47590000
         DC    C'IEANUC0'                                               47600000
IEAANIP0 EQU   *                   8 BYTE(S)                            47610000
         DC    C'IEAANIP0'                                              47620000
IEAVNIP0 EQU   *                   8 BYTE(S)                            47630000
         DC    C'IEAVNIP0'                                              47640000
IEAQFX00 EQU   *                   8 BYTE(S)                            47650000
         DC    C'IEAQFX00'                                              47660000
SYSNUC   EQU   *                   13 BYTE(S)                           47670000
         DC    C'SYS1.NUCLEUS '                                         47680000
LASTN    EQU   *                   8 BYTE(S)                            47690000
         DC    C'ZZZZZZZZ'                                              47700000
LASTADDR EQU   *                   3 BYTE(S)                            47710000
         DC    X'FFFFFF'                                                47720000
ZONEOFF  EQU   *                   6 BYTE(S)                            47730000
         DC    X'0F0F0F0F0F0F'                                          47740000
HEXCHARS EQU   *                   16 BYTE(S)                           47750000
         DC    C'0123456789ABCDEF'                                      47760000
PARMLIST EQU   00000000            72 BYTE(S) ON WORD                   47770000
INDCBAD  EQU   PARMLIST+00000000   FULLWORD POINTER                     47780000
OUTDCBAD EQU   PARMLIST+00000004   FULLWORD POINTER                     47790000
TITLEAD  EQU   PARMLIST+00000008   FULLWORD POINTER                     47800000
GTMAINAD EQU   PARMLIST+00000012   FULLWORD POINTER                     47810000
GMLENGTH EQU   PARMLIST+00000016   FULLWORD INTEGER                     47820000
FLAGS    EQU   PARMLIST+00000020   16 BIT(S)                            47830000
IDRFLAG  EQU   PARMLIST+00000020   1 BIT(S)                             47840000
OVERLAY  EQU   PARMLIST+00000020   1 BIT(S)                             47850000
A00001   EQU   PARMLIST+00000020   14 BIT(S)                            47860000
BLKCNT   EQU   PARMLIST+00000022   HALFWORD INTEGER                     47870000
INBUF    EQU   PARMLIST+00000024   FULLWORD POINTER                     47880000
SCATDCNT EQU   PARMLIST+00000028   HALFWORD INTEGER                     47890000
TRANDCNT EQU   PARMLIST+00000030   HALFWORD INTEGER                     47900000
ERRORS   EQU   PARMLIST+00000032   32 BIT(S)                            47910000
LMODNAME EQU   PARMLIST+00000036   8 BYTE(S)                            47920000
DDNAME   EQU   PARMLIST+00000044   8 BYTE(S)                            47930000
TXTTTR   EQU   PARMLIST+00000052   3 BYTE(S)                            47940000
TXTLEN   EQU   PARMLIST+00000055   2 BYTE(S)                            47950000
RELOCFAC EQU   PARMLIST+00000060   FULLWORD INTEGER                     47960000
TEXTLEN  EQU   PARMLIST+00000064   FULLWORD INTEGER                     47970000
JFCBARAD EQU   PARMLIST+00000068   FULLWORD POINTER                     47980000
JFCBAREA EQU   00000000            176 BYTE(S)                          47990000
CESDTAB  EQU   00000000            32767*18 BYTE(S)                     48000000
RLDTAB   EQU   00000000            32767*8 BYTE(S)                      48010000
SCATTAB  EQU   00000000            32767*4 BYTE(S)                      48020000
TRANTAB  EQU   00000000            32767*HALFWORD INTEGER               48030000
ADDRTBL  EQU   00000000            32767*4 BYTE(S)                      48040000
INDEXTAB EQU   00000000            32767*HALFWORD INTEGER               48050000
TRSCFORM EQU   00000000            1024 BYTE(S) ON WORD                 48060000
IDENT3   EQU   TRSCFORM+00000000   8 BIT(S)                             48070000
ZEROS1   EQU   TRSCFORM+00000001   1 BYTE(S)                            48080000
COUNT4   EQU   TRSCFORM+00000002   HALFWORD INTEGER                     48090000
TRSCDATA EQU   TRSCFORM+00000004   1020*1 BYTE(S)                       48100000
TRSCITEM EQU   00000000            4 BYTE(S)                            48110000
CESDLINE EQU   00000000            18 BYTE(S) ON WORD                   48120000
CESDID   EQU   CESDLINE+00000000   HALFWORD INTEGER                     48130000
SYMBOL   EQU   CESDLINE+00000002   8 BYTE(S)                            48140000
CESDTYPE EQU   CESDLINE+00000010   8 BIT(S)                             48150000
CESDADDR EQU   CESDLINE+00000011   3  BYTE  POINTER                     48160000
SEGNO    EQU   CESDLINE+00000014   1 BYTE(S)                            48170000
IDLENGTH EQU   CESDLINE+00000015   3 BYTE(S)                            48180000
RLDLINE  EQU   00000000            8 BYTE(S) ON WORD                    48190000
RPTR     EQU   RLDLINE+00000000    HALFWORD INTEGER                     48200000
PPTR     EQU   RLDLINE+00000002    HALFWORD INTEGER                     48210000
RLDFLAG  EQU   RLDLINE+00000004    8 BIT(S)                             48220000
RLDADDR  EQU   RLDLINE+00000005    3  BYTE  POINTER ON WORD+1           48230000
CESDFORM EQU   00000000            248 BYTE(S) ON WORD                  48240000
IDENT1   EQU   CESDFORM+00000000   8 BIT(S)                             48250000
SPARE1   EQU   CESDFORM+00000001   3 BYTE(S)                            48260000
ESDID    EQU   CESDFORM+00000004   HALFWORD INTEGER                     48270000
COUNT1   EQU   CESDFORM+00000006   HALFWORD INTEGER                     48280000
ESDATA   EQU   CESDFORM+00000008   15*16 BYTE(S)                        48290000
RLDFORM  EQU   00000000            256 BYTE(S) ON WORD                  48300000
IDENT2   EQU   RLDFORM+00000000    8 BIT(S)                             48310000
SPARE2   EQU   RLDFORM+00000001    3 BYTE(S)                            48320000
COUNT2   EQU   RLDFORM+00000004    HALFWORD INTEGER                     48330000
COUNT3   EQU   RLDFORM+00000006    HALFWORD INTEGER                     48340000
SPARE3   EQU   RLDFORM+00000008    8 BYTE(S)                            48350000
RLDATA   EQU   RLDFORM+00000016    240*8 BIT(S) ON BYTE                 48360000
         ORG   @DATA                                                    48370000
         DS    00000835C                                                48380000
@L       EQU   6                                                        48390000
@DATD    DSECT                                                          48400000
@SAV001  EQU   @DATD+00000000      72 BYTE(S) ON WORD                   48410000
BININT   EQU   @DATD+00000072      8 BYTE(S) ON DWORD                   48420000
DECINT   EQU   @DATD+00000080      8 BYTE(S) ON DWORD                   48430000
HEXINT   EQU   @DATD+00000080      8 BYTE(S)                            48440000
DECBE    EQU   @DATD+00000088      20 BYTE(S) ON DWORD                  48450000
PARMPTR  EQU   @DATD+00000108      FULLWORD POINTER                     48460000
HIGHADDR EQU   @DATD+00000112      FULLWORD POINTER                     48470000
RLDTABAD EQU   @DATD+00000116      FULLWORD POINTER                     48480000
INDTABAD EQU   @DATD+00000120      FULLWORD POINTER                     48490000
CURRTRSC EQU   @DATD+00000124      FULLWORD POINTER                     48500000
TRNTABAD EQU   @DATD+00000128      FULLWORD POINTER                     48510000
SAVCURR2 EQU   @DATD+00000132      FULLWORD POINTER                     48520000
SCTTABAD EQU   @DATD+00000136      FULLWORD POINTER                     48530000
SAVLMLOC EQU   @DATD+00000140      FULLWORD POINTER                     48540000
SAVCSDAD EQU   @DATD+00000144      FULLWORD POINTER                     48550000
RLDEND   EQU   @DATD+00000148      FULLWORD POINTER                     48560000
CESDEND  EQU   @DATD+00000152      FULLWORD POINTER                     48570000
SAVCURR1 EQU   @DATD+00000156      FULLWORD POINTER                     48580000
SAVCURR3 EQU   @DATD+00000160      FULLWORD POINTER                     48590000
CETABPTR EQU   @DATD+00000164      FULLWORD POINTER                     48600000
SAVERET  EQU   @DATD+00000168      FULLWORD POINTER                     48610000
REMAINDR EQU   @DATD+00000172      FULLWORD INTEGER                     48620000
NUMRLDS  EQU   @DATD+00000176      FULLWORD INTEGER                     48630000
RLDSPRTD EQU   @DATD+00000180      FULLWORD INTEGER                     48640000
M        EQU   @DATD+00000184      FULLWORD INTEGER                     48650000
K        EQU   @DATD+00000188      FULLWORD INTEGER                     48660000
J        EQU   @DATD+00000192      FULLWORD INTEGER                     48670000
IM       EQU   @DATD+00000196      FULLWORD INTEGER                     48680000
L        EQU   @DATD+00000200      FULLWORD INTEGER                     48690000
ID       EQU   @DATD+00000204      FULLWORD INTEGER                     48700000
CESDSZSV EQU   @DATD+00000208      FULLWORD INTEGER                     48710000
SCATAD   EQU   @DATD+00000212      FULLWORD INTEGER                     48720000
SCATWDCT EQU   @DATD+00000216      FULLWORD INTEGER                     48730000
TRCOUNT  EQU   @DATD+00000220      FULLWORD INTEGER                     48740000
LINECNT  EQU   @DATD+00000224      FULLWORD INTEGER                     48750000
NUCMINIP EQU   @DATD+00000229      3  BYTE  POINTER ON WORD+1           48760000
LRDIF    EQU   @DATD+00000232      FULLWORD INTEGER                     48770000
TEMPADDR EQU   @DATD+00000236      FULLWORD INTEGER                     48780000
RLF      EQU   @DATD+00000240      FULLWORD INTEGER                     48790000
OFFSET   EQU   @DATD+00000244      FULLWORD INTEGER                     48800000
SCADR    EQU   @DATD+00000248      FULLWORD INTEGER                     48810000
ADDRTBAD EQU   @DATD+00000252      FULLWORD POINTER                     48820000
NIPADDR  EQU   @DATD+00000257      3  BYTE  POINTER ON WORD+1           48830000
PREVAD   EQU   @DATD+00000260      FULLWORD POINTER                     48840000
QFXADDR  EQU   @DATD+00000265      3  BYTE  POINTER ON WORD+1           48850000
PREVLN   EQU   @DATD+00000268      FULLWORD POINTER                     48860000
SIZEN    EQU   @DATD+00000272      FULLWORD INTEGER                     48870000
NEWAD    EQU   @DATD+00000276      FULLWORD INTEGER                     48880000
LASTAD   EQU   @DATD+00000280      FULLWORD INTEGER                     48890000
NIPLEN   EQU   @DATD+00000285      3  BYTE  POINTER ON WORD+1           48900000
QFXLEN   EQU   @DATD+00000289      3  BYTE  POINTER ON WORD+1           48910000
SEGLEN   EQU   @DATD+00000293      3  BYTE  POINTER ON WORD+1           48920000
LMLENNO  EQU   @DATD+00000297      3  BYTE  POINTER ON WORD+1           48930000
LMLEN    EQU   @DATD+00000301      3  BYTE  POINTER ON WORD+1           48940000
PDLEN    EQU   @DATD+00000305      3  BYTE  POINTER ON WORD+1           48950000
PRLEN    EQU   @DATD+00000309      3  BYTE  POINTER ON WORD+1           48960000
CESDTBID EQU   @DATD+00000312      HALFWORD INTEGER                     48970000
NUMITEMS EQU   @DATD+00000314      HALFWORD INTEGER                     48980000
NUMCESDS EQU   @DATD+00000316      HALFWORD INTEGER                     48990000
DATACNT  EQU   @DATD+00000318      HALFWORD INTEGER                     49000000
TRSCDCNT EQU   @DATD+00000320      HALFWORD INTEGER                     49010000
INCR     EQU   @DATD+00000322      HALFWORD INTEGER                     49020000
R        EQU   @DATD+00000324      HALFWORD INTEGER                     49030000
P        EQU   @DATD+00000326      HALFWORD INTEGER                     49040000
F        EQU   @DATD+00000328      HALFWORD INTEGER                     49050000
A        EQU   @DATD+00000330      HALFWORD INTEGER                     49060000
PAGENUM  EQU   @DATD+00000332      HALFWORD INTEGER                     49070000
Q        EQU   @DATD+00000334      HALFWORD INTEGER                     49080000
S        EQU   @DATD+00000336      HALFWORD INTEGER                     49090000
N        EQU   @DATD+00000338      HALFWORD INTEGER                     49100000
SEGLENCT EQU   @DATD+00000340      HALFWORD INTEGER                     49110000
HISEGNO  EQU   @DATD+00000342      HALFWORD INTEGER                     49120000
SWITCHES EQU   @DATD+00000344      24 BIT(S) ON BYTE                    49130000
TEXTNEXT EQU   SWITCHES+00000000   1 BIT(S)                             49140000
BLNKHEAD EQU   SWITCHES+00000000   1 BIT(S)                             49150000
BLNKDATA EQU   SWITCHES+00000000   1 BIT(S)                             49160000
LINECT61 EQU   SWITCHES+00000000   1 BIT(S)                             49170000
NCHD     EQU   SWITCHES+00000000   1 BIT(S)                             49180000
NCSHD    EQU   SWITCHES+00000000   1 BIT(S)                             49190000
ACHD     EQU   SWITCHES+00000000   1 BIT(S)                             49200000
ACSHD    EQU   SWITCHES+00000000   1 BIT(S)                             49210000
NRHD     EQU   SWITCHES+00000001   1 BIT(S)                             49220000
ARHD     EQU   SWITCHES+00000001   1 BIT(S)                             49230000
PRHD     EQU   SWITCHES+00000001   1 BIT(S)                             49240000
PRSHD    EQU   SWITCHES+00000001   1 BIT(S)                             49250000
DASHLINE EQU   SWITCHES+00000001   1 BIT(S)                             49260000
PREGHERE EQU   SWITCHES+00000001   1 BIT(S)                             49270000
EREFPRES EQU   SWITCHES+00000001   1 BIT(S)                             49280000
BLNKZERO EQU   SWITCHES+00000001   1 BIT(S)                             49290000
NA3RET   EQU   SWITCHES+00000002   1 BIT(S)                             49300000
NUMCESD  EQU   SWITCHES+00000002   1 BIT(S)                             49310000
SP2      EQU   SWITCHES+00000002   1 BIT(S)                             49320000
DUBLDASH EQU   SWITCHES+00000002   1 BIT(S)                             49330000
NUCMAP   EQU   SWITCHES+00000002   1 BIT(S)                             49340000
TRSCREC1 EQU   SWITCHES+00000002   1 BIT(S)                             49350000
RELOC    EQU   SWITCHES+00000002   1 BIT(S)                             49360000
A00000   EQU   SWITCHES+00000002   1 BIT(S)                             49370000
BITCHECK EQU   @DATD+00000347      8 BIT(S) ON BYTE                     49380000
CESDTYP  EQU   @DATD+00000348      8 BIT(S) ON BYTE                     49390000
CURSEGNO EQU   @DATD+00000349      1 BYTE(S)                            49400000
TEMPESD  EQU   @DATD+00000350      1 BYTE(S)                            49410000
TEMPAREA EQU   @DATD+00000351      22 BYTE(S)                           49420000
BUFFERS  EQU   @DATD+00000376      245 BYTE(S) ON WORD                  49430000
HEADPRNT EQU   BUFFERS+00000000    121 BYTE(S) ON WORD                  49440000
HEADCON  EQU   BUFFERS+00000000    1 BYTE(S)                            49450000
HEADBUF  EQU   BUFFERS+00000001    120 BYTE(S)                          49460000
DATAPRNT EQU   BUFFERS+00000124    121 BYTE(S) ON WORD                  49470000
DATACON  EQU   BUFFERS+00000124    1 BYTE(S)                            49480000
DATABUF  EQU   BUFFERS+00000125    120 BYTE(S)                          49490000
         DS    00000780C                                                49500000
@TEMPS   DS    0F                                                       49510000
@TEMP2   DC    F'0'                                                     49520000
@TEMP3   DC    F'0'                                                     49530000
@TEMP4   DC    F'0'                                                     49540000
RD       READ  DECBL,SF,MF=L           ISSUE LIST FORMAT READ           49550000
READLEN  EQU   *-RD                    COMPUTE LENGTH OF READ CODE      49560000
         CVT LIST=YES,DSECT=YES                               YM2968    49570000
@DATD    DSECT                                                          49580000
@DATEND  EQU   *                                                        49590000
HMBLKXRF CSECT ,                                                        49600000
@9F4     EQU   READA1                                                   49610000
@9EC     EQU   READB                                                    49620000
@9EE     EQU   READB1                                                   49630000
@9D4     EQU   @9D3                                                     49640000
@9D1     EQU   NUCCONV                                                  49650000
@9D0     EQU   READ                                                     49660000
@9C9     EQU   NUCCONV2                                                 49670000
@9BD     EQU   CHNXT                                                    49680000
@9BC     EQU   CHNXT                                                    49690000
@9AF     EQU   @9AE                                                     49700000
@9B1     EQU   @9AE                                                     49710000
@9B0     EQU   @9AE                                                     49720000
@99D     EQU   NUCCONV4                                                 49730000
@989     EQU   @988                                                     49740000
@986     EQU   NACESD7                                                  49750000
@97F     EQU   @97E                                                     49760000
@976     EQU   WRITE                                                    49770000
@978     EQU   NRLD                                                     49780000
@965     EQU   NACESD11                                                 49790000
@95B     EQU   WRITE                                                    49800000
@959     EQU   WRITE                                                    49810000
@953     EQU   NACESD13                                                 49820000
@944     EQU   ARLD                                                     49830000
@93D     EQU   WRITE                                                    49840000
@930     EQU   WRITE                                                    49850000
@925     EQU   NRLD7                                                    49860000
@921     EQU   NRLD7                                                    49870000
@91F     EQU   NRLD7                                                    49880000
@901     EQU   WRITE                                                    49890000
@8F6     EQU   ARLD7                                                    49900000
@8F2     EQU   ARLD7                                                    49910000
WRITE9   EQU   WRITE15                                                  49920000
WRITE12  EQU   WRITE15                                                  49930000
ABORT    EQU   @EL01                                                    49940000
         END   HMBLKXRF,(C'PL/S',1400,76175)                            49950000
