         JHEAD 'EDIT PHASE DICTIONARY ROUTINES',                       X00070000
               PHASEID=X1J,                                            X00140000
               LEVEL=10                                                 00210000
         EJECT                                                          00280000
*   THE EDIT PHASE DICTIONARY ROUTINES ARE A SET OF SUBROUTINES.      * 00350000
*   THESE SUBROUTINES PROVIDE ALL THE FUNCTIONS REQUIRED BY THE EDIT  * 00420000
*   PHASE RELATIVE TO THE COLLECTION TIME DICTIONARIES, CALLED        * 00490000
*   DIRECTORIES. THE FUNCTIONS PROVIDED ARE- INITIALIZATION,          * 00560000
*   BUILDING, REFERENCING, AND OUTPUTTING. THESE FUNCTIONS ARE        * 00630000
*   REQUESTED DURING THE CONVERSION OF SOURCE INPUT TEXT FOR BOTH     * 00700000
*   MACRO DEFINITIONS AND OPEN CODE INTO EDITED TEXT TO BE PROCESSED  * 00770000
*   BY THE GENERATE PHASE. THE PERTINENT DICTIONARIES ARE- OP CODE    * 00840000
*   TABLE, MACRO DEFINITION DIRECTORY, VARIABLE SYMBOL DIRECTORY,     * 00910000
*   SEQUENCE SYMBOL REFERENCE DIRECTORY, ORDINARY SYMBOL REFERENCE    * 00980000
*   DIRECTORY, AND OPSYN TABLE.                                       * 01050000
*                                                                     * 01120000
*ENTRY POINT-                                                         * 01190000
*        DICTENTR                                                     * 01260000
*              THE CALLING SEQUENCE IS-                               * 01330000
*                  LA    RETURN,ENTRY                                 * 01400000
*                  L     LINK,POINTER                                 * 01470000
*                  BAL   RETURN,0(RETURN,LINK)                        * 01540000
*              WHERE LINK IS THE STANDARD REGISTER FOR THE ADDRESS    * 01610000
*                             OF THE CALLED ROUTINE                   * 01680000
*                    POINTER CONTAINS THE ADDRESS OF THE DICTIONARY   * 01750000
*                             ENTRY ROUTINE                           * 01820000
*                    ENTRY IS THE NAME OF THE DICTIONARY FUNCTION     * 01890000
*                             REQUIRED (ENTRY NAMES ARE EQUATED TO    * 01960000
*                             ABSOLUTE VALUES USED AS DISPLACEMENTS   * 02030000
*                             INTO A BRANCH TABLE)                    * 02100000
*                    RETURN IS THE STANDARD REGISTER FOR THE RETURN   * 02170000
*                             ADDRESS                                 * 02240000
*                                                                     * 02310000
*INPUT-                                                               * 02380000
*   ITEMS EXTRACTED FROM THE SOURCE TEXT BY THE EDITOR, TO BE         * 02450000
*   EXCHANGED FOR POINTERS TO GENERATION TIME DICTIONARIES (IN THE    * 02520000
*   CASES OF MACRO NAMES, MACRO PARAMETERS, GLOBAL VARIABLES, LOCAL   * 02590000
*   VARIABLES, SEQUENCE SYMBOLS, AND OPEN CODE ORDINARY SYMBOLS       * 02660000
*   USED IN ATTRIBUTE REFERENCES OR IN MACRO INSTRUCTION OPERANDS)    * 02730000
*   OR POINTERS TO OP CODE TABLE ENTRIES (IN THE CASE OF OP CODES).   * 02800000
*                                                                     * 02870000
*OUTPUT-                                                              * 02940000
*   FILE 2 - TEXT SEGMENT DICTIONARY FILE FOR EACH MACRO DEFINITION   * 03010000
*          - TEXT SEGMENT DICTIONARY FILE FOR OPEN CODE               * 03080000
*   FILE 3 - ORDINARY SYMBOL DEFINITION FILE                          * 03150000
*          - MACRO DEFINITION DIRECTORY/OPSYN TABLE                   * 03220000
*                                                                     * 03290000
*EXTERNAL ROUTINES-                                                   * 03360000
*   NONE                                                              * 03430000
*                                                                     * 03500000
*                                                                     * 03570000
*EXITS,NORMAL-                                                        * 03640000
*   RETURN TO THE EDITOR WITH THE BYTE 'CONCODE' SET TO A ZERO        * 03710000
*   VALUE.                                                            * 03780000
*                                                                     * 03850000
*EXITS,ERROR-                                                         * 03920000
*   RETURN TO THE EDITOR WITH THE BYTE 'CONCODE' SET TO A NON-ZERO    * 03990000
*   VALUE, THE SPECIFIC VALUE INDICATING THE ERROR DETECTED.          * 04060000
*                                                                     * 04130000
*TABLES/WORK AREAS-                                                   * 04200000
*   MACRO DEFINITION DIRECTORY - A CHAINED TABLE CONTAINING AN        * 04270000
*        ENTRY FOR EACH UNIQUE MACRO NAME ENCOUNTERED IN THE TEXT     * 04340000
*        OF ALL MACRO DEFINITIONS AND OPEN CODE, AND AN ENTRY FOR     * 04410000
*        OPEN CODE (MERGED WITH THE OPSYN TABLE).                     * 04480000
*   VARIABLE SYMBOL DIRECTORY - A CHAINED TABLE CONTAINING AN         * 04550000
*        ENTRY FOR EACH VARIABLE SYMBOL (SYSTEM VARIABLE, GLOBAL      * 04620000
*        VARIABLE, LOCAL VARIABLE, OR SYMBOLIC PARAMETER)             * 04690000
*        ENCOUNTERED IN THE TEXT OF THE MACRO DEFINITION CURRENTLY    * 04760000
*        BEING EDITED OR IN THE TEXT OF OPEN CODE.                    * 04830000
*   SEQUENCE SYMBOL REFERENCE DIRECTORY - A REVOLVING TABLE           * 04900000
*        CONTAINING AN ENTRY FOR THE 10 MOST RECENTLY REFERENCED      * 04970000
*        SEQUENCE SYMBOLS ENCOUNTERED IN THE TEXT OF A MACRO          * 05040000
*        DEFINITION OR OF OPEN CODE.                                  * 05110000
*   ORDINARY SYMBOL REFERENCE DIRECTORY - A REVOLVING TABLE CONTAIN-  * 05180000
*        ING AN ENTRY FOR THE 10 MOST RECENTLY REFERENCED ORDINARY    * 05250000
*        SYMBOLS ENCOUNTERED IN ATTRIBUTE REFERENCES OR IN MACRO      * 05320000
*        INSTRUCTION OPERANDS.                                        * 05390000
*   OP CODE TABLE - A CHAINED TABLE CONTAINING AN ENTRY FOR EACH      * 05460000
*        OF THE DEFINED ASSEMBLER AND MACHINE OPERATION CODES.        * 05530000
*   OPSYN TABLE - A CHAINED TABLE CONTAINING AN ENTRY FOR EACH        * 05600000
*        UNIQUE MNEMONIC AFFECTED BY AN OPSYN STATEMENT (MERGED       * 05670000
*        WITH THE MACRO DEFINITION DIRECTORY).                        * 05740000
*                                                                     * 05810000
*ATTRIBUTES-                                                          * 05880000
*   REFRESHABLE                                                       * 05950000
*                                                                     * 06020000
*NOTES-                                                               * 06090000
*                                                                     * 06160000
*                                                                     * 06230000
*                                                                     * 06300000
         EJECT                                                          06370000
         COPY JCOMMON                                                   06440000
         EJECT                                                          06510000
         COPY  EDSECT                                                   06580000
         EJECT                                                          06650000
*                                                                       06720000
* THIS DSECT MAPS ALL ENTRIES IN THE VARIABLE SYMBOL DIRECTORY.         06790000
*                                                                       06860000
VSDENTRY DSECT                                                          06930000
VCHAIN   DS    XL3                      CHAIN POINTER     3 BYTES       07000000
VFLAGS   DS    X                        ENTRY FLAGS       1 BYTE        07070000
VLNGTH   DS    X                        SYMBOL LENGTH     1 BYTE        07140000
VSYMBL   EQU   *                        VARIABLE SYMBOL 1-7 BYTES       07210000
         ORG   VSDENTRY                 ORIGIN 0                        07280000
VTFVAL   DS    X                        META TEXT FLAG    1 BYTE        07350000
VGVECTR  DS    XL3                      GBL VECTOR PTR    3 BYTES       07420000
         ORG   VGVECTR                  ORIGIN 1                        07490000
VLDICTR  DS    XL3                      LCL DICTNRY PTR   3 BYTES       07560000
         ORG   VGVECTR                  ORIGIN 1                        07630000
VPVECTR  DS    XL3                      PARAM VCTR PTR    3 BYTES       07700000
VGDIMEN  DS    XL2                      GBL DIMEN/SUBSC   2 BYTES       07770000
         ORG   VGDIMEN                  ORIGIN 4                        07840000
VLDIMEN  DS    XL2                      LCL DIMEN/SUBSC   2 BYTES       07910000
         ORG   VGDIMEN                  ORIGIN 4                        07980000
VPPAD    DS    XL2                      PARAM TERM PAD    2 BYTES       08050000
*                                                                       08120000
* THIS DSECT MAPS THE GLOBAL VARIABLE ENTRY IN THE VARIABLE SYMBOL      08190000
*            DIRECTORY.                                                 08260000
*                                                                       08330000
GBLNTRY  DSECT                                                          08400000
GCHAIN   DS    XL3                      CHAIN POINTER     3 BYTES       08470000
GFLAGS   DS    X                        FLAGS             1 BYTE        08540000
GLNGTH   DS    X                        SYMBOL LENGTH     1 BYTE        08610000
GSYMBL   EQU   *                        VARIABLE SYMBOL 2-8 BYTES       08680000
         ORG   GBLNTRY                  ORIGIN 0                        08750000
GTFVAL   DS    X                        TEXT FLAG VALUE   1 BYTE        08820000
GVECTR   DS    XL3                      VECTOR POINTER    3 BYTES       08890000
GDIMEN   DS    XL2                      DIMENSION         2 BYTES       08960000
*                                                                       09030000
* THIS DSECT MAPS THE LOCAL VARIABLE ENTRY IN THE VARIABLE SYMBOL       09100000
*            DIRECTORY.                                                 09170000
*                                                                       09240000
LCLNTRY  DSECT                                                          09310000
LCHAIN   DS    XL3                      CHAIN POINTER     3 BYTES       09380000
LFLAGS   DS    X                        FLAGS             1 BYTE        09450000
LLNGTH   DS    X                        SYMBOL LENGTH     1 BYTE        09520000
LSYMBL   EQU   *                        VARIABLE SYMBOL 2-8 BYTES       09590000
         ORG   LCLNTRY                  ORIGIN 0                        09660000
LTFVAL   DS    X                        TEXT FLAG VALUE   1 BYTE        09730000
LDICTR   DS    XL3                      DICTIONARY PTR    3 BYTES       09800000
LDIMEN   DS    XL2                      DIMENSION         2 BYTES       09870000
*                                                                       09940000
* THIS DSECT MAPS THE MACRO PARAMETER ENTRY IN THE VARIABLE SYMBOL      10010000
*            DIRECTORY.                                                 10080000
*                                                                       10150000
PRMNTRY  DSECT                                                          10220000
PCHAIN   DS    XL3                      CHAIN POINTER     3 BYTES       10290000
PFLAGS   DS    X                        FLAGS             1 BYTE        10360000
PLNGTH   DS    X                        SYMBOL LENGTH     1 BYTE        10430000
PSYMBL   EQU   *                        VARIABLE SYMBOL 2-8 BYTES       10500000
         ORG   PRMNTRY                  ORIGIN 0                        10570000
PTFVAL   DS    X                        TEXT FLAG VALUE   1 BYTE        10640000
PVECTR   DS    XL3                      VECTOR POINTER    3 BYTES       10710000
PPAD     DS    XL2                      PADDING           2 BYTES       10780000
*                                                                       10850000
* THIS DSECT MAPS THE OP CODE TABLE ENTRY.                              10920000
*                                                                       10990000
OPNTRY   DSECT                                                          11060000
OCHAIN   DS    XL2                      CHAIN POINTER     2 BYTES       11130000
OFLAGS   DS    X                        FLAGS             1 BYTE        11200000
OMNEM    EQU   *                        MNEMONIC        1-8 BYTES       11270000
         ORG   OPNTRY                   ORIGIN 0                        11340000
OFLAGA   DS    X                        SWITCH CODES      1 BYTE        11410000
OINTCD   DS    X                        INTERNAL OP COD   1 BYTE        11480000
OMASK    DS    X                        MASK, EXT MNEMS   1 BYTE        11550000
OINTCD2  EQU   OMASK                    OP (2ND BYTE)     1 BYTE        11620000
*                                                                       11690000
* THIS DSECT MAPS THE MACRO DEFINITION DIRECTORY ENTRY.                 11760000
*                                                                       11830000
MDDNTRY  DSECT                                                          11900000
MCHAIN   DS    XL3                      CHAIN PTR         3 BYTES       11970000
MFLAGS   DSW   TSEDIT,                  ON-SEGMENT EDITED              X12040000
               OCTS,                    ON-OPEN CODE ENTRY             X12110000
               FLUSH,                   ON-MACRO FLUSHED               X12150000
               DELETE,,                 ON-MACRO DELETED VIA OPSYN     X12190000
               MNL1,MNL2,MNL3           MACRO NAME LENGTH               12250000
MSYMBL   DS    XL8                      SYMBOL (PADDED)   8 BYTES       12320000
MVECTR   DS    XL3                      VECTOR POINTER    3 BYTES       12390000
MTXTNP   DS    XL8                      TEXT FILE N/P     8 BYTES       12460000
MTSDNP   DS    XL8                      DICT FILE N/P     8 BYTES       12530000
MGBLSZ   DS    XL3                      GBL VCTR SIZE     3 BYTES       12600000
MSEQSZ   DS    XL3                      SEQ SYM DICT SIZE 3 BYTES       12670000
MLCLSZ   DS    XL3                      LCL DICT SIZE     3 BYTES       12740000
MDDEND   EQU   *                                                        12810000
*                                                                       12880000
* THIS DSECT MAPS THE OPSYN TABLE ENTRY.                                12950000
*                                                                       13020000
OPSYNTRY DSECT                                                          13060000
OPSYNCH  DS    XL3                      CHAIN POINTER  3 BYTES          13100000
OPSYNFLG DSW   ,,,,                     ROOM FOR OP CODE FLAGS         X13140000
               OMAC,                    MACRO OPSYN ENTRY              X13180000
               ODEL,                    DELETED OPSYN ENTRY            X13220000
               OPREV                    PREVIOUS OPSYN ENTRY USED       13230000
OPSYNATT DS    XL3                      ATTRIBUTES                      13260000
         ORG   OPSYNATT                 OVERLAY WITH ALTERNATE          13300000
OPSYNCHN DS    XL3                      MACRO CHAIN POINTER             13340000
ONAMEL   DS    XL1                      NAME LENGTH                     13380000
ONAME    DS    XL8                      NAME                            13420000
OPSYND   EQU   *                        END OF DSECT                    13460000
OPSYNLN  EQU   OPSYND-OPSYNTRY          OPSYN ENTRY LENGTH              13500000
*                                                                       13580000
* THIS DSECT MAPS THE SEQUENCE SYMBOL REFERENCE DIRECTORY ENTRY.        13650000
*                                                                       13720000
SSDIR    DSECT                                                          13790000
SSSYM    DS    XL8                      SEQ SYMB (PADDED) 8 BYTES       13860000
STFVAL   DS    X                        TEXT FLAG VALUE   1 BYTE        13930000
SSRDP    DS    XL3                      DICT POINTER      3 BYTES       14000000
SSPAD    DS    XL2                      PADDING           2 BYTES       14070000
SSDIRND  EQU   *                                                        14140000
*                                                                       14210000
* THIS DSECT MAPS THE ORDINARY SYMBOL REFERENCE DIRECTORY ENTRY.        14280000
*                                                                       14350000
OSDIR    DSECT                                                          14420000
OSSYM    DS    XL8                      ORD SYMB (PADDED) 8 BYTES       14490000
OTFVAL   DS    X                        TEXT FLAG VALUE   1 BYTE        14560000
OSRDP    DS    XL3                      DICT POINTER      3 BYTES       14630000
OSPAD    DS    XL2                      PADDING           2 BYTES       14700000
OSDIRND  EQU   *                                                        14770000
*                                                                       14840000
* THIS DSECT MAPS THE LOGICAL RECORD PUT TO THE TEXT SEGMENT          * 14910000
*            DICTIONARY FILE FOR A GLOBAL DEFINITION.                 * 14980000
*                                                                       15050000
GBLDEF   DSECT                                                          15120000
GDEFRL   DS    XL2                      RECORD LENGTH     2 BYTES       15190000
GDEFRT   DS    X'00'                    RECORD TYPE       1 BYTE        15260000
GDEFF    DS    X                        FLAGS             1 BYTE        15330000
GDEFSL   DS    X                        SYMBOL LENGTH     1 BYTE        15400000
GDEFVS   EQU   *                        VARIABLE SYMBOL 2-8 BYTES       15470000
         ORG   GBLDEF                   ORIGIN 0                        15540000
GDEFTF   DS    X                        TEXT FLAG VALUE   1 BYTE        15610000
GDEFVP   DS    XL3                      VECTOR POINTER    3 BYTES       15680000
GDEFD    DS    XL2                      DIMENSION         2 BYTES       15750000
*                                                                       15820000
* THIS DSECT MAPS THE LOGICAL RECORD PUT TO THE TEXT SEGMENT          * 15890000
*            DICTIONARY FILE FOR A SEQUENCE SYMBOL DEFINITION.        * 15960000
*                                                                       16030000
SSDEF    DSECT                                                          16100000
SDEFRL   DS    XL2                      RECORD LENGTH     2 BYTES       16170000
SDEFRT   DS    X'04'                    RECORD TYPE       1 BYTE        16240000
SDEFNP   DS    XL8                      NOTE/POINT ADDR   8 BYTES       16310000
SDEFSL   DS    XL1                      SYMBOL LENGTH     1 BYTE        16380000
SDEFSS   EQU   *                        SEQUENCE SYMBOL 2-8 BYTES       16450000
*                                                                       16520000
* THIS DSECT MAPS THE LOGICAL RECORD PUT TO THE TEXT SEGMENT          * 16590000
*            DICTIONARY FILE FOR A SEQUENCE SYMBOL REFERENCE.         * 16660000
*                                                                       16730000
SSREF    DSECT                                                          16800000
SREFRL   DS    XL2                      RECORD LENGTH     2 BYTES       16870000
SREFRT   DS    X'08'                    RECORD TYPE       1 BYTE        16940000
SREFDP   DS    XL3                      DICTIONARY PTR    3 BYTES       17010000
SREFSL   DS    XL1                      SYMBOL LENGTH     1 BYTE        17080000
SREFSS   EQU   *                        SEQUENCE SYMBOL 2-8 BYTES       17150000
*                                                                       17220000
* THIS DSECT MAPS THE LOGICAL RECORD PUT TO THE TEXT SEGMENT          * 17290000
*            DICTIONARY FILE FOR AN ORDINARY SYMBOL REFERENCE.        * 17360000
*                                                                       17430000
OSREF    DSECT                                                          17500000
OREFRL   DS    XL2                      RECORD LENGTH     2 BYTES       17570000
OREFRT   DS    X'0C'                    RECORD TYPE       1 BYTE        17640000
OREFDP   DS    XL3                      DICTIONARY PTR    3 BYTES       17710000
OREFSL   DS    XL1                      SYMBOL LENGTH     1 BYTE        17780000
OREFOS   EQU   *                        ORDINARY SYMBOL 1-8 BYTES       17850000
*                                                                       17920000
* THIS DSECT MAPS THE LOGICAL RECORD PUT TO THE ORDINARY SYMBOL         17990000
*            DEFINITION FILE.                                           18060000
*                                                                       18130000
         COPY  JTEXT                                                    18200000
*                                                                       18270000
* THIS DSECT MAPS THE END-OF-SEGMENT RECORD PUT TO THE TEXT SEGMENT     18340000
*            DICTIONARY FILE.                                           18410000
*                                                                       18480000
ENDSEG   DSECT                                                          18550000
ESEGRL   DS    XL2                      RECORD LENGTH     2 BYTES       18620000
ESEGRT   DS    X'10'                    RECORD TYPE       1 BYTE        18690000
*                                                                       18760000
* THIS DSECT MAPS THE END-OF-FILE RECORD PUT TO THE TEXT SEGMENT        18830000
*            DICTIONARY FILE AND THE ORDINARY SYMBOL DEFINITION FILE.   18900000
*                                                                       18970000
ENDFIL   DSECT                                                          19040000
EFILRL   DS    XL2                      RECORD LENGTH     2 BYTES       19110000
EFILRT   DS    X'FF'                    RECORD TYPE       1 BYTE        19180000
*                                                                       19250000
         COPY  JTMTXT                                                   19320000
         EJECT                                                          19390000
         COPY  JERMSGCD                                                 19460000
         EJECT                                                          19530000
WORK4    EQU   R6                       SCRATCH REGISTER                19600000
MODCOMM  EQU   R2                       PTR REGISTER, EDSECT BASE       19670000
LNGTHREG EQU   R3                       SYMBOL LENGTH REGISTER          19740000
PARMREG  EQU   R4                       SYMBOL POINTER REGISTER         19810000
VSDPTR   EQU   R5                       PTR TO ENTRY IN VSD             19880000
SSRDPTR  EQU   R5                       PTR TO ENTRY IN SSRD            19950000
OCHNPTR  EQU   R5                       PTR TO ENTRY IN OP CODE TABLE   20020000
WORK3    EQU   R5                       SCRATCH REGISTER                20090000
WORK2    EQU   R6                       SCRATCH REGISTER                20160000
WORK1    EQU   R7                       SCRATCH REGISTER                20230000
RTNLNK   EQU   R9                       LINKAGE REGISTER                20300000
BUFPTR   EQU   R11                      PTR TO RECORD IN BUFFER         20370000
EOPAIR1  EQU   R14                      EVEN REGISTER OF PAIR           20440000
HASHO    EQU   R14                      OP CODE TABLE HASH VALUE REG    20510000
HASHV    EQU   R15                      VSD HASH VALUE REGISTER         20580000
EOPAIR2  EQU   R15                      ODD REGISTER OF PAIR            20650000
SSRDNE   EQU   10                       NO. OF SSRD ENTRIES             20720000
SSRDEL   EQU   SSDIRND-SSDIR            LENGTH OF AN SSRD ENTRY         20790000
SSRDLNGT EQU   SSRDNE*SSRDEL            LENGTH OF WHOLE SSRD            20860000
OSRDPTR  EQU   SSRDPTR                  PTR TO ENTRY IN OSRD            20930000
OSRDNE   EQU   SSRDNE                   NO. OF OSRD ENTRIES             21000000
OSRDEL   EQU   SSRDEL                   LENGTH OF AN OSRDENTRY          21070000
OSRDLNGT EQU   SSRDLNGT                 LENGTH OF WHOLE OSRD            21140000
OSALNGT  EQU   6                        LENGTH OF ORD SYMB ATTRIBUTES   21210000
GDEFTYPE EQU   0                        TYPE FOR GBL DEFIN RCD          21280000
SDEFTYPE EQU   4                        TYPE FOR SEQ SYMB DEFIN RCD     21350000
SSREFTYP EQU   8                        TYPE FOR SEQ SYMB REFER RCD     21420000
OSREFTYP EQU   12                       TYPE FOR ORD SYMB REFER RCD     21490000
ESEGTYPE EQU   16                       TYPE FOR END-OF-SEGMENT RCD     21560000
EFILTYPE EQU   255                      TYPE FOR END-OF-FILE RCD        21630000
MINSPACE EQU   512                      MINIMUM WORK SPACE IN DBL WDS   21700000
PVPTRLNG EQU   3                        LENGTH OF ENTRY IN PARAM VCTRS  21770000
GVPTRLNG EQU   3                        LENGTH OF ENTRY IN GBL VECTOR   21840000
VSDHTLNT EQU   128*3                    LENGTH OF VAR SYMB DIR HSH TBL  21910000
MDVEL    EQU   19                       LENGTH OF ENTRY IN MDV          21980000
SAVMDDPT EQU   JDPASS                   SAVE AREA, MDD ADDRESS          22050000
SAVMDDLN EQU   JDPASS+D8                SAVE AREA, MDD LENGTH           22120000
SAVMDDCN EQU   JDPASS+D12               SAVE AREA, MDD ENTRY CHAIN      22190000
SAVMDDCT EQU   JDPASS+D16               SAVE AREA, MDD ENTRY COUNT      22260000
SAVOPSCN EQU   JDPASS+D20               SAVE AREA, OPSYN ENTRY CHAIN    22330000
PAIR1E   EQU   R4                       EVEN REGISTER OF PAIR           22400000
PAIR1O   EQU   R5                       ODD REGISTER OF PAIR            22470000
PAIR2E   EQU   R6                       EVEN REGISTER OF PAIR           22540000
PAIR2O   EQU   R7                       ODD REGISTER OF PAIR            22610000
VSDEL    EQU   19                       MAX, LENGTH OF VSD ENTRY        22680000
MINRECSZ EQU   18                       MINIMUM I/O LENGTH              22750000
WORK5    EQU   R1                       SCRATCH REGISTER                22820000
NAMEPTR  EQU   R5                       OPSYN SYNONYM PTR REGISTER      22890000
ENTRYPTR EQU   R6                       PTR TO ENTRY IN OPSYN TABLE     22960000
SCANPTR  EQU   R7                       PTR TO SYNONYM ENTRY REGISTER   23030000
D256     EQU   256                      SYMBOLIC SDT (256)              23100000
         EJECT                                                          23170000
         JCSECT (X1J00)                                                 23240000
         JMODID                                                         23310000
*DICTIONARY ENTRY ROUTINE - ALL CALLS TO THE EDIT PHASE DICTIONARY    * 23380000
*   ROUTINES ENTER THROUGH THE FOLLOWING BRANCH TABLE WHICH PROVIDES  * 23450000
*   THE LINK TO THE REQUIRED ROUTINE.                                 * 23520000
*                                                                     * 23590000
         USING DICTENTR,R12                                             23660000
DICTENTR B     DICTSAVE                 GO DIRECTLY TO COMMON ENTRY     23730000
         DC    AL2(PHASENT-DICTENTR)    DISPL TO PHASENT ROUTINE        23800000
         DC    AL2(MACRENT-DICTENTR)    DISPL TO MACRENT ROUTINE        23870000
         DC    AL2(MACREND-DICTENTR)    DISPL TO MACRENT  ROUTINE       23940000
         DC    AL2(OPENENT-DICTENTR)    DISPL TO OPENENT  ROUTINE       24010000
         DC    AL2(OPENEND-DICTENTR)    DISPL TO OPENEND  ROUTINE       24080000
         DC    AL2(VARBSYMR-DICTENTR)   DISPL TO VARBSYMR ROUTINE       24150000
         DC    AL2(SEQSYMBR-DICTENTR)   DISPL TO SEQSYMBR ROUTINE       24220000
         DC    AL2(SEQSYMBD-DICTENTR)   DISPL TO SEQSYMBD ROUTINE       24290000
         DC    AL2(ORDSYMBR-DICTENTR)   DISPL TO ORDSYMBR ROUTINE       24360000
         DC    AL2(ORDSYMBD-DICTENTR)   DISPL TO ORDSYMBD ROUTINE       24430000
         DC    AL2(VARBSYMD-DICTENTR)   DISPL TO VARBSYMD ROUTINE       24500000
         DC    AL2(OPERCODE-DICTENTR)   DISPL TO OPERCODE ROUTINE       24570000
         DC    AL2(OPSYNBLD-DICTENTR)   DISPL TO OPSYNBLD ROUTINE       24640000
         SPACE 5                                                        24710000
         JENTRY (X1J01=DICTENTR)                                        24780000
         EJECT                                                          24850000
*                                                                       24920000
* THIS SUBROUTINE IS USED BY ALL THE DICTIONARY ROUTINES TO SAVE        24990000
*        REGISTERS AND ESTABLISH ADDRESSABILITY.                        25060000
*                                                                       25130000
DICTSAVE STM   R2,R9,REGSTACK           SAVE REGISTER FOR EDITOR        25200000
         LR    R8,R12                   SET UP BASE REGISTER            25270000
         USING DICTENTR,R8                                              25340000
         DROP  R12                                                      25410000
         LH    R9,DDNDX                 PICK UP ENTRY INDICATOR         25480000
         LH    R9,DICTENTR+D4(R9)       GET DISPL TO REQ'D ROUTINE      25550000
         B     DICTENTR(R9)             LINK TO DICTIONARY ROUTINE      25620000
         SPACE 10                                                       25690000
*                                                                       25760000
* THIS ROUTINE IS THE COMMON EXIT POINT FOR THE DICTIONARY ROUTINES.    25830000
*                                                                       25900000
DICTEXIT LM    R2,R9,REGSTACK           RESTORE EDITOR'S REGISTERS      25970000
         BR    R9                       RETURN TO EDITOR                26040000
         EJECT                                                          26110000
*PHASENT - THIS ROUTINE IS CALLED AT THE START OF THE EDIT PHASE.     * 26180000
*   ITS FUNCTION IS TO GET AND ALLOCATE THE SPACE REQUIRED FOR THE    * 26250000
*   VARIOUS COLLECTION TIME DICTIONARIES, TO PERFORM THE GENERAL      * 26320000
*   INITIALIZATION FOR THOSE DICTIONARIES, AND TO INITIALIZE THE      * 26390000
*   MODULE COMMON SPACE USED BY ALL THE EDIT PHASE DICTIONARY         * 26460000
*   ROUTINES.                                                         * 26530000
*        INPUT - NONE.                                                * 26600000
*        OUTPUT - NONE.                                               * 26670000
*                                                                     * 26740000
PHASENT  EQU   *                                                        26810000
         XC    DICTCOMS(DICTCOME-DICTCOMS),DICTCOMS INITIALIZE COMMON   26880000
         LH    R11,=H'32000'            SET UP MAX SPACE VALUE          26950000
         JGETCORE MINDBL=MINSPACE,MAXDBL=(R11) GET FREE SPACE           27020000
         ST    R10,FREESTRT             KEEP ADDR FOR LATER RELEASE     27090000
         AR    R11,R10                  GET HIGH BYTE ADDR AND SAVE AS  27160000
         ST    R11,MDDSTRT              MACRO DEF DIR BASE ADDR         27230000
         ST    R11,MDDSLOT              SAVE MDD PTR FOR FIRST MACRO    27300000
         ST    R10,SSRDSTRT             SAVE SEQ SYMB REF DIR PTR       27370000
         LA    R10,SSRDLNGT(,R10)       DISPLACE BY SEQ SYMB REF DIR    27440000
         ST    R10,OSRDSTRT             SAVE ORD SYMB REF DIR PTR       27510000
         MVI   D0(R10),JBLANK           INSERT CHARACTER TO CLEAR       27580000
         MVC   D1(OSRDLNGT-D1,R10),D0(R10) ORDINARY SYMBOL REFER DIRECT 27650000
         LA    R10,OSRDLNGT(,R10)       DISPLACE BY ORD SYMB REF DIR    27720000
         ST    R10,VSDSTRT              SAVE VAR SYMB DIR BASE ADDR     27790000
         XC    D0(VSDHTLNT-256,R10),D0(R10)  CLEAR VSD HASH TABLE,      27810000
         XC    VSDHTLNT-256(256,R10),VSDHTLNT-256(R10) PARTS 1 AND 2    27830000
         MVC   GTMVALOC,=F'19'          INITIALIZE MDV POINTER          27860000
         MVC   SSDLNGTH(D12),=AL1(0,L'JNOTEVAL,JTMSEQ,SSREFTYP,0,0,0,0,X27930000
               0,OSALNGT,JTMOSA,OSREFTYP) SET UP TABLE DATA FOR SYMBOL X28000000
               REFERENCES - SEQUENCE AND ORDINARY                       28070000
         B     DICTEXIT                 RETURN                          28140000
         EJECT                                                          28210000
*MACRENT - THIS ROUTINE IS CALLED AT THE START OF EDITING A MACRO     * 28280000
*   DEFINITION. ITS FUNCTION IS TO INITIALIZE THAT PART OF MODULE     * 28350000
*   COMMON USED IN EDITING MACRO DEFINITIONS, TO INITIALIZE THE       * 28420000
*   VARIABLE SYMBOL DIRECTORY, TO INITIALIZE THE SEQUENCE SYMBOL      * 28490000
*   REFERENCE DIRECTORY, TO INITIALIZE THE TEXT SEGMENT DICTIONARY    * 28560000
*   FILE, AND TO NOTE THE START OF THE MACRO DEFINITION TEXT FOR      * 28630000
*   THE ENTRY IN THE MACRO DEFINITION DIRECTORY.                      * 28700000
*        INPUT - THE 'MACRO' STATEMENT HAS BEEN PUT TO THE TEXT       * 28770000
*                FILE PRIOR TO ENTRY.                                 * 28840000
*        OUTPUT - NONE.                                               * 28910000
*                                                                     * 28980000
MACRENT  EQU   *                                                        29050000
         XC    MDINITS(TSINITE-MDINITS),MDINITS REINITIALIZE COMMON     29120000
         BAL   WORK3,COMNINIT           GO TO COMMON INITIALIZATION     29190000
         JNOTE FILE=FILE1               NOTE THE TEXT FILE              29260000
         MVC   NOTESAVE,JNOTEVAL        SAVE N/P ADDR FOR MDD ENTRY     29330000
         LA    WORK5,SYSNDX             POINT TO SYST LCL, GBL LIST     29400000
         B     VSDINIT                  GO TO ENTER THEN IN VSD         29470000
         EJECT                                                          29540000
*MACREND - THIS ROUTINE IS CALLED AT THE END OF EDITING A MACRO       * 29610000
*   DEFINITION. FOR A MACRO SUCCESSFULLY EDITED, ITS FUNCTION IS TO   * 29680000
*   CLOSE OUT THE TEXT SEGMENT DICTIONARY FILE, TO INSERT THE LOCAL   * 29750000
*   DICTIONARY, GLOBAL VECTOR, AND SEQUENCE SYMBOL REFERENCE DICTION- * 29820000
*   ARY ALLOCATIONS IN THE ENTRY FOR THE MACRO DEFINITION IN THE      * 29890000
*   MACRO DEFINITION DIRECTORY, TO INSERT THE POINTER TO THE MACRO    * 29960000
*   DEFINITION EDITED TEXT AND THE POINTER TO THE TEXT SEGMENT        * 30030000
*   DICTIONARY FILE SEGMENT FOR THE MACRO DEFINITION IN THE ENTRY     * 30100000
*   FOR THE MACRO DEFINITION IN THE MACRO DEFINITION DIRECTORY AND    * 30170000
*   TO FLAG THE MACRO AS EDITED. FOR A MACRO NOT SUCCESSFULLY EDITED, * 30240000
*   ITS FUNCTION IS TO FLAG THE MACRO AS AN UNDEFINED OP CODE AND     * 30310000
*   TO FLAG THE MACRO AS EDITED. IF LIBRARY MACROS ARE BEING EDITED,  * 30380000
*   THE NEXT NAME IS RETURNED TO THE EDITOR.                          * 30450000
*        INPUT - IF 'SKPMND' IS ON, 'SNOSMCRO', 'SBDPROTO', OR        * 30520000
*                'SNOSYSMD' INDICATE THE CAUSE FOR ABORTING THE       * 30590000
*                MACRO DEFINITION.                                    * 30660000
*        OUTPUT - NONE.                                               * 30730000
*                                                                     * 30800000
MACREND  EQU   *                                                        30870000
         GOIF  SKPMND,OFF=MRSKPA        BRANCH IF NORMAL END OF EDIT    30940000
         GOIF  SSYSMD,ON=MRSKP          SKIP IF EDITING SYS MACS        30950000
         GOIF  SMDDENTR,OFF=DICTEXIT    EXIT IF NO MDD ENTRY WAS MADE   30990000
MRSKP    L     WORK1,CURMDDPT           GET MDD ENTRY POINTER           31080000
         USING MDDNTRY,WORK1                                            31150000
         SET   FLUSH,ON                 INDICATE EDIT ABORTED           31220000
         MVI   MTSDNP+(L'MTSDNP-D1),D4  INDICATE NO SUCH MACRO          31290000
         GOIF  SNOSYSMD,ON=MRSKPB       SKIP IF THATS THE ERROR         31360000
         GOIF  SSYSMD,OFF=MRSKPB        BR IF PRGMR MACRO               31390000
         MVI   MTSDNP+(L'MTSDNP-D1),D8  INDICATE BOGUS PROTOTYPE        31430000
         GOIF  SBDPROTO,ON=MRSKPB       SKIP IF THATS THE ERROR         31500000
         MVI   MTSDNP+(L'MTSDNP-D1),D12 INDICATE NO MACRO STMT          31570000
         GOIF  SNOSMCRO,ON=MRSKPB       SKIP IF THATS THE ERROR         31640000
         MVI   MTSDNP+(L'MTSDNP-D1),D16 INDICATE MEMBER, MACRO UNALIKE  31710000
         GOIF  LSTSYSMS,OFF=MRSKPB      SKIP IF THATS THE ERROR         31730000
         MVI   MTSDNP+(L'MTSDNP-D1),D20 DICT OVERFLOW ON THIS SYS MAC   31750000
         B     MRSKPB                   GO TO FINISH MDD ENTRY          31780000
MRSKPA   EQU   *                                                        31850000
         BAL   WORK3,COMNEND            GO TO COMMON TERMINATION        31920000
         MVC   MTXTNP(L'MTXTNP+L'MTSDNP),NOTESAVE                      X31990000
               INSERT TEXT AND TSDF N/P ADDRS IN MDD ENTRY              32060000
MRSKPB   EQU   *                                                        32130000
         SET   SMDDENTR,OFF             RESET MDD ENTRY MADE SWITCH     32180000
         SET   TSEDIT,ON                INDICATE MACRO EDITED           32200000
         GOIF  SSYSMD,ON=EDITSYSM,      CONTINUE LIBRARY MACRO EDIT    X32270000
               ELSE=DICTEXIT            RETURN OTHERWISE                32340000
         DROP  WORK1                                                    32410000
         EJECT                                                          32480000
*OPENENT - THIS ROUTINE IS CALLED AT THE START OF EDITING OPEN CODE.  * 32550000
*   ITS FUNCTION IS TO INITIALIZE THAT PART OF MODULE COMMON USED IN  * 32620000
*   EDITING OPEN CODE, TO INITIALIZE THE VARIABLE SYMBOL DIRECTORY,   * 32690000
*   TO INITIALIZE THE TEXT SEGMENT DICTIONARY FILE, TO INITIALIZE     * 32760000
*   THE SEQUENCE SYMBOL REFERENCE DIRECTORY, AND TO INITIALIZE THE    * 32830000
*   ENTRY FOR OPEN CODE IN THE MACRO DEFINITION DIRECTORY.            * 32900000
*        INPUT - NONE.                                                * 32970000
*        OUTPUT - APPROPRIATE FLAGS IN 'CONCODE' IF INSUFFICIENT      * 33040000
*                 SPACE REMAINS FOR THE MACRO DEFINITION DIRECTORY    * 33110000
*                 ENTRY.                                              * 33180000
*                                                                     * 33250000
OPENENT  EQU   *                                                        33320000
         XC    OCINITS(TSINITE-OCINITS),OCINITS REINITIALIZE COMMON     33390000
         BAL   WORK3,COMNINIT           GO TO COMMON INITIALIZATION     33460000
         L     WORK1,MDDSLOT            GET PRESENT END OF MDD PTR      33530000
         SH    WORK1,=AL2(MDDEND-MDDNTRY) ADJUST FOR OPEN CODE ENTRY    33600000
         C     WORK1,VSDSLOT            LOOK FOR OVERLAP WITH VSD       33670000
         BL    OERR                     IF OVERLAP, GO FLAG THE ERROR   33740000
         ST    WORK1,MDDSLOT            PUT END OF MDD PTR BACK         33810000
         ST    WORK1,CURMDDPT           SET CURRENT ENTRY PTR ALSO      33880000
         USING MDDNTRY,WORK1                                            33950000
         MVC   MCHAIN,MDDCHN+(L'MDDCHN-L'MCHAIN) INSERT CHAIN PTR       34020000
         XC    MFLAGS(L'MFLAGS+L'MSYMBL+L'MVECTR),MFLAGS               X34090000
               CLEAR LENGTH,NAME, GT MDV POINTER                        34160000
         L     WORK2,MDDSTRT            PICK UP TABLE BASE              34230000
         SR    WORK2,WORK1              GET DISPL TO LATEST ENTRY       34300000
         ST    WORK2,MDDCHN             SAVE AS NEW FIRST CHAIN PTR     34370000
         L     WORK2,MDDCNT             PICK UP NUMBER OF MDD ENTRIES   34440000
         LA    WORK2,D1(,WORK2)         INCREMENT FOR NEW ENTRY         34510000
         ST    WORK2,MDDCNT             SAVE NEW MDD ENTRY COUNT        34580000
         SET   OCTS,ON                  INDICATE OPEN CODE ENTRY        34650000
         LA    WORK5,SYSPRM             POINT TO SYST GBL LIST          34720000
         B     VSDINIT                  GO TO ENTER THEM IN VSD         34790000
         DROP  WORK1                                                    34860000
         EJECT                                                          34930000
*OPENEND - THIS ROUTINE IS CALLED AT THE END OF EDITING OPEN CODE.    * 35000000
*   ITS FUNCTION IS TO CLOSE OUT THE TEXT SEGMENT DICTIONARY FILE,    * 35070000
*   INSERT THE LOCAL DICTIONARY, GLOBAL VECTOR, AND SEQUENCE SYMBOL   * 35140000
*   REFERENCE DICTIONARY ALLOCATIONS IN THE ENTRY FOR OPEN CODE IN    * 35210000
*   THE MACRO DEFINITION DIRECTORY. IF THERE ARE LIBRARY MACROS       * 35280000
*   TO BE EDITED, THE FIRST NAME IS RETURNED,TO THE EDITOR. WHEN      * 35350000
*   ALL LIBRARY MACROS ARE EDITED, 'LSTSYSMS' IS SET ON, AND THE      * 35420000
*   PHASE TERMINATION IS PERFORMED.                                   * 35490000
*        INPUT - NONE.                                                * 35560000
*        OUTPUT - A POINTER IN R11 TO THE LENGTH OF THE NAME (1       * 35630000
*                 BYTE) IMMEDIATELY FOLLOWED BY THE NAME ITSELF       * 35700000
*                 (PADDED WITH ZEROS TO 8 BYTES) OF A LIBRARY MACRO   * 35770000
*                 TO BE EDITED.                                       * 35840000
*                                                                     * 35910000
OPENEND  EQU   *                                                        35980000
         BAL   WORK3,COMNEND            GO TO COMMON TERMINATION        36050000
         USING MDDNTRY,WORK1                                            36120000
         MVC   MTSDNP,SAVENOTE          INSERT TSDF N/P ADDR IN MDD     36190000
         XC    MTXTNP,MTXTNP            CLEAR TEXT N/P ADDR FOR O.C.    36260000
         SET   TSEDIT,ON                INDICATE OPEN CODE EDITED       36330000
EDITSYSM GOIF  LSTSYSMS,ON=PHASEND      SKIP IT ALL IF OVERLAP OCCURRED 36400000
         MVC   HIBYTE0,MDDCHN           SET UP PTR FOR FULL CHAIN SCAN  36470000
SYSEDTLP L     WORK1,MDDSTRT            PICK UP TABLE BASE              36540000
         S     WORK1,HIBYTE0            DISPLACE TO NEXT CHAIN ENTRY    36610000
         C     WORK1,MDDSTRT            SEE IF END OF CHAIN REACHED     36680000
         BE    ENDSYSM                  BRANCH IF YES                   36750000
         GOIF  TSEDIT,OFF=EDITIT        GO TO EDIT IF NOT ALREADY       36820000
         MVC   HIBYTE0+(L'HIBYTE0-L'MCHAIN)(L'MCHAIN),MCHAIN           X36890000
               PICK UP PTR TO NEXT ENTRY IN CHAIN                       36960000
         B     SYSEDTLP                 GO BACK TO START OF SEARCH      37030000
EDITIT   ST    WORK1,CURMDDPT           SAVE PTR TO ENTRY BEING EDITED  37100000
         LA    R10,MSYMBL               GET NAME PTR FOR EDITOR         37170000
         B     DICTEXIT                 RETURN                          37240000
ENDSYSM  SET   LSTSYSMS,ON              ALL LIBRARY MACROS EDITED       37310000
         DROP  WORK1                                                    37380000
         EJECT                                                          37450000
*PHASEND - THIS ROUTINE IS CALLED AT THE END OF EDITING ALL LIBRARY   * 37520000
*   MACROS. ITS FUNCTION IS TO CLOSE OUT THE ORDINARY SYMBOL          * 37590000
*   DEFINITION FILE, OUTPUT THE MACRO DEFINITION DIRECTORY, CLOSE     * 37660000
*   OUT THE TEXT SEGMENT DICTIONARY FILE, TO PUT IN COMMON THE DATA   * 37730000
*   REQUIRED BY THE DICTIONARY INTERLUDE PHASE, AND TO RELEASE THE    * 37800000
*   DICTIONARY SPACE.                                                 * 37870000
*        INPUT - NONE.                                                * 37940000
*        OUTPUT - NONE.                                               * 38010000
*                                                                     * 38080000
PHASEND  EQU   *                                                        38150000
         JPUTL FILE=FILE3,BUFREQ=L'EFILRL+L'EFILRT GET RECORD LENGTH    38220000
         USING ENDFIL,BUFPTR                                            38290000
         MVC   EFILRL(L'EFILRL+L'EFILRT),=AL1(0,L'EFILRL+L'EFILRT,EFILTX38360000
               YPE) INSERT RECORD LENGTH AND TYPE                       38430000
         JTRUNC FILE=FILE2              COMPLETE OUTPUT, FILE 2         38570000
         JTRUNC FILE=FILE3              COMPLETE OUTPUT, FILE 3         38640000
         JPOINT FILE=FILE2,NEXT=START   REWIND FOR INTERLUDE            38710000
         MVC   PIOPARMA,MDDSLOT         SET UP BUFFER ADDRESS           38780000
         L     WORK1,MDDSTRT            GET PTR TO MDD HIGH END         38850000
         S     WORK1,MDDSLOT            GET LENGTH OF MDD               38920000
         ST    WORK1,PIOPARMB           SET UP WRITE LENGTH             38990000
         MVC   SAVMDDLN(L'PIOPARMB),PIOPARMB LENGTH IN COMMON           39060000
         LH    R5,JMAXRL3               SET UP MAXIMUM RECORD THIS FILE 39130000
         LA    R6,FILE3                 SET UP FILE POINTER             39200000
         BAL   R7,BUFRITE               GO PUT MDD TO FILE 3            39270000
         MVC   SAVMDDPT(L'JNOTEVAL),JNOTEVAL  SAVE NOTE/POINT AND MDD   39340000
         MVC   SAVMDDCN(L'MDDCHN),MDDCHN PASS MDD CHAIN LINK TO INTERL  39410000
         MVC   SAVMDDCT(L'MDDCNT),MDDCNT PASS MACRO NAME COUNT ALSO     39480000
         MVC   SAVOPSCN(L'OPSCHN),OPSCHN PASS OPSYN CHN PTR TO X2A      39550000
         JFRECORE ADDR=FREESTRT         RELEASE DIRECTORY SPACE         39620000
         B     DICTEXIT                 RETURN TO EDITOR                39690000
         DROP  BUFPTR                                                   39760000
         EJECT                                                          39830000
*MACRNAME - THIS ROUTINE IS CALLED DURING THE EDITING OF A MACRO      * 39900000
*   DEFINITION WHEN THE MACRO NAME IS ENCOUNTERED ON THE PROTOTYPE    * 39970000
*   STATEMENT. ITS FUNCTION IS TO ENTER THE MACRO NAME IN THE MACRO   * 40040000
*   DEFINITION DIRECTORY, IF IT HAS NOT BEEN PREVIOUSLY ENTERED, AND  * 40110000
*   TO RETURN TO THE EDITOR A POINTER TO THE APPROPRIATE ENTRY IN THE * 40180000
*   GENERATION TIME MACRO DEFINITION VECTOR.                          * 40250000
*        INPUT - THE LENGTH OF THE MNEMONIC IN R11.                   * 40320000
*              - A POINTER TO THE MNEMONIC (1-8 BYTES) IN R10.        * 40390000
*                THE MNEMONIC HAS BEEN VERIFIED AS A VALID SYMBOL.    * 40460000
*                THE MNEMONIC HAS NOT BEEN FOUND IN THE OP CODE TABLE.* 40530000
*        OUTPUT - A POINTER IN R11 TO THE APPROPRIATE ENTRY IN THE    * 40600000
*                 MACRO DEFINITION DIRECTORY AND APPROPRIATE FLAGS    * 40670000
*                 SET IN THE BYTE 'IOCID'.                            * 40740000
*               - APPROPRIATE FLAGS IN 'CONCODE' IF THE NAME OF A     * 40810000
*                 PROGRAMMER MACRO DUPLICATES A PREVIOUS ONE OR IF    * 40880000
*                 INSUFFICIENT SPACE REMAINS FOR THE MACRO DEFINI-    * 40950000
*                 TION ENTRY OF IF THE NAME ON THE PROTOTYPE IN A     * 41020000
*                 LIBRARY MACRO IS DIFFERENT FROM THE NAME THE        * 41090000
*                 MACRO IS CATALOGED UNDER.                           * 41160000
*                                                                     * 41230000
MACRNAME EQU   *                                                        41300000
         MVC   JDWORD,=8AL1(JBLANK)     SET UP PAD FOR MACRO NAME       41370000
         EX    LNGTHREG,MACRNMOV        SET UP MACRO NAME WITH PAD      41440000
         MVC   HIBYTE0,MDDCHN           SET UP PTR TO START CHAIN SERCH 41510000
MDDSCAN  L     WORK1,MDDSTRT            PICK UP TABLE BASE              41580000
         S     WORK1,HIBYTE0            DISPLACE TO NEXT ENTRY IN CHAIN 41650000
         C     WORK1,MDDSTRT            SEE IF END OF CHAIN REACHED     41720000
         BER   R4                       BRANCH IF YES                   41790000
         USING MDDNTRY,WORK1                                            41860000
         GOIF  DELETE,ON=MSCANB         DELETED, IGNORE                 41890000
         CLC   JDWORD,MSYMBL            COMPARE MACRO NAMES             41930000
         BE    MSCANA                   BRANCH IF NAMES MATCH           42000000
MSCANB   EQU   *                                                        42030000
         MVC   HIBYTE0+(L'HIBYTE0-L'MCHAIN)(L'MCHAIN),MCHAIN           X42070000
               PICK UP PTR IN ENTRY TO NEXT ENTRY IN CHAIN              42140000
         B     MDDSCAN                  GO BACK TO START OF SEARCH      42210000
MSCANA   GOIF  SXPRTO,OFF=MACDONE       SEE IF PRGMR MACRO PROTOTYPE    42280000
         GOIF  TSEDIT,ON=MACERR         IF ENTRY ALREADY EDITED, ERROR  42350000
         ST    WORK1,CURMDDPT           SET CURRENT PTR TO THIS ENTRY   42420000
         SET   SMDDENTR,ON              SHOW THAT MDD ENTRY WAS MADE    42470000
MACDONE  LA    R11,MVECTR               GET PTR FOR EDITOR TO MDV SLOT  42490000
         MVI   IOCID,J0                 SET OP CODE FLAGS PROPERLY      42560000
         B     D4(R4)                   RETURN                          42630000
MACERR   MVC   DSEVCD(D2),=AL1(SEV10,ERR10) INDICATE DUPL PRGMR MACROS  42700000
         B     D4(R4)                   RETURN                          42770000
MACENTRY EQU   *                                                        42840000
         GOIF  SSYSMD,OFF=MAKENTRY      MAKE CHECK ONLY IN SYST MACROS  42910000
         GOIF  SXPRTO,OFF=MAKENTRY      SEE IF BOOK NAME AND MACRO NAME 42980000
         MVC   DSEVCD(D2),=AL1(SEV11,ERR11) DO NOT AGREE, FLAG IF NOT   43050000
         B     DICTEXIT                 EXIT                            43120000
MAKENTRY EQU   *                                                        43190000
         L     WORK1,MDDSLOT            GET END OF DICT PTR             43260000
         SH    WORK1,=AL2(MDDEND-MDDNTRY) ALLOW ROOM FOR THIS ENTRY     43330000
         C     WORK1,VSDSLOT            LOOK FOR OVERLAP WITH VSD       43400000
         BL    OERR                     IF OVERLAP, GO FLAG THE ERROR   43470000
         ST    WORK1,MDDSLOT            IF NOT, UPDATE NEXT SLOT PTR    43540000
         MVC   MCHAIN,MDDCHN+(L'MDDCHN-L'MCHAIN) INSERT CHAIN PTR       43610000
         STC   LNGTHREG,MFLAGS          INSERT FLAGS IN MDD ENTRY       43680000
         MVC   MSYMBL,JDWORD            INSERT NAME IN MDD ENTRY        43750000
         MVC   MVECTR,GTMVALOC+(L'GTMVALOC-L'MVECTR)   INSERT MACRO    X43820000
               DEFINITION VECTOR PTR IN MDD ENTRY                       43890000
         XC    MTXTNP(L'MTXTNP+L'MTSDNP),MTXTNP  CLEAR N/P ADDRS        43960000
         L     R14,GTMVALOC             PICK UP CURRENT MDV PTR         44030000
         LA    R14,MDVEL(,R14)          BUMP IT FOR NEXT ENTRY          44100000
         ST    R14,GTMVALOC             PUT IT BACK UPDATED             44170000
         L     R14,MDDSTRT              PICK UP TABLE BASE              44240000
         SR    R14,WORK1                GET DISPL TO LATEST ENTRY       44310000
         ST    R14,MDDCHN               STORE IT                        44380000
         L     R14,MDDCNT               NUMBER OF MOD ENTRIES           44450000
         LA    R14,D1(R14)              BUMP                            44520000
         ST    R14,MDDCNT               STORE                           44590000
         B     MSCANA                   GO SEE IF EDITING THE ENTRY     44660000
MACRNMOV MVC   JDWORD(D0),JFWORD1       MOVE MACRO NAME                 44730000
         DROP  WORK1                                                    44800000
         EJECT                                                          44870000
*VARBSYMD - THIS ROUTINE IS CALLED DURING THE EDITING OF A MACRO      * 44940000
*   DEFINITION OR OF OPEN CODE WHEN THE DEFINITION OF A VARIABLE      * 45010000
*   SYMBOL IS ENCOUNTERED (IN THE OPERAND OF A GLOBAL OR LOCAL        * 45080000
*   DECLARATION OR IN THE OPERAND OF THE MACRO PROTOTYPE STATEMENT).  * 45150000
*   ITS FUNCTION IS TO ENTER THE VARIABLE SYMBOL IN THE VARIABLE      * 45220000
*   SYMBOL DIRECTORY. FOR GLOBALS, THIS ROUTINE ALSO MAKES AN ENTRY   * 45290000
*   IN THE TEXT SEGMENT DICTIONARY FILE FOR THE GLOBAL DEFINITION.    * 45360000
*        INPUT - THE LENGTH OF THE VARIABLE SYMBOL IN R11.            * 45430000
*              - A POINTER IN R10 TO THE VARIABLE SYMBOL (1-8 BYTES). * 45500000
*                THE VARIABLE SYMBOL HAS BEEN VERIFIED AS VALID.      * 45570000
*                IF THE VARIABLE SYMBOL IS DIMENSIONED, THE           * 45640000
*                DIMENSION VALUE IS IN 'JHWORD1'. THE DIMENSION       * 45710000
*                HAS BEEN VERIFIED AS VALID.                          * 45780000
*              - APPROPRIATE FLAGS SET IN THE BYTE 'FLGBYT'.          * 45850000
*        OUTPUT - APPROPRIATE FLAGS IN 'CONCODE' IF THE VARIABLE      * 45920000
*                 SYMBOL DUPLICATES A PREVIOUS ONE OR IF INSUFFIC-    * 45990000
*                 IENT SPACE REMAINS FOR THE VARIABLE SYMBOL          * 46060000
*                 DIRECTORY ENTRY.                                    * 46130000
*                                                                     * 46200000
VSDINIT  EQU   *                                                        46270000
         SET   ITERSW,ON                INDICATE VSD INITIALIZATION     46340000
VSDINITA SR    R11,R11                  CLEAR PARAMETER REGISTER        46410000
         IC    R11,D1(,WORK5)           PICK UP VARB SYMB LENGTH        46480000
         LA    R10,D2(,WORK5)           GET PTR TO SYST VARB SYMBOL     46550000
         MVC   FLGBYT,D0(WORK5)         SET UP APPROPRIATE FLAGS        46620000
VARBSYMD EQU   *                                                        46690000
         BAL   RTNLNK,VSLOOKUP          SEE IF VAR SYM DEFINED PREV     46760000
         GOIF  FNDFLG,ON=VERR           IF YES, THIS DECLR AN ERROR     46830000
         L     WORK2,VSDSLOT            GET PTR TO NEW ENTRY            46900000
         LA    WORK1,VSDEL(,WORK2)      ASSUME LONGEST VSD ENTRY        46970000
         C     WORK1,MDDSLOT            CHECK FOR OVERLAP               47040000
         BNL   OERR                     IF OVERLAP, BRANCH              47110000
         L     WORK1,VSDSTRT            GET VSD HASH TBL PTR            47180000
         AR    WORK1,HASHV              GET PTR TO HSH TBL ENTRY        47250000
         USING VSDENTRY,WORK2                                           47320000
         MVC   VCHAIN,D0(WORK1)         PUT CHN LINK IN NEW ENTRY       47390000
         LR    WORK3,WORK2              SET UP NEW ENTRY ADDR           47460000
         S     WORK3,VSDSTRT            GET DISPL FOR HASH TBL ENTRY    47530000
         ST    WORK3,JFWORD1            SAVE TEMPORARILY AND PUT IN     47600000
         MVC   D0(L'VCHAIN,WORK1),JFWORD1+(L'JFWORD1-L'VCHAIN) HSH TBL  47670000
         STC   LNGTHREG,VLNGTH          INSERT VARB SYMB LENGTH         47740000
         EX    LNGTHREG,SYMBMOVE        PUT VAR SYMB IN ENTRY           47810000
         LA    WORK2,L'VCHAIN+L'VFLAGS+L'VLNGTH+D1(LNGTHREG,WORK2)     X47880000
               UPDATE ENTRY (DSECT) PTR                                 47950000
         GOIF  (VTYP1,VTYP2),NOTALL=LGVARB GO AHEAD IF LOCAL, GLOBAL    48020000
PENTRY   GOIF  VPTYP,ON=KENTRY                                          48090000
         MVI   VTFVAL,JTMPPAR           FLAG POS PARAM FOR TEXT         48160000
         MVC   VPVECTR,GTPVALOC+(L'GTPVALOC-L'VPVECTR) PUT IN POSITNL  X48230000
               PARAMETER VECTOR DISPLACEMENT                            48300000
         L     WORK3,GTPVALOC           GET CURRENT POSIT PARM DISPL    48370000
         LA    WORK3,PVPTRLNG(,WORK3)   INCR FOR NEXT POS ENTRY         48440000
         ST    WORK3,GTPVALOC           PUT IT BACK UPDATED             48510000
         B     COMPNTRY                 CONTINUE AT COMMON PARAM PT     48580000
KENTRY   MVI   VTFVAL,JTMKPAR           FLAG KWD PARAM FOR TEXT         48650000
         MVC   VPVECTR,GTKVALOC+(L'GTKVALOC-L'VPVECTR) PUT IN KEYWORD  X48720000
               PARAMETER VECTOR DISPLACEMENT                            48790000
         L     WORK3,GTKVALOC           GET CURRENT KEYWRD PARM DISPL   48860000
         LA    WORK3,PVPTRLNG(,WORK3)   INCR FOR NEXT KWD ENTRY         48930000
         ST    WORK3,GTKVALOC           PUT IT BACK UPDATED             49000000
COMPNTRY EQU   *                                                        49070000
         XC    VPPAD,VPPAD              INSERT PAD OF ZEROES IN ENTRY   49140000
         B     COMALL                   CONTINUE AT COMMON PT FOR ALL   49210000
SYMBMOVE MVC   VSYMBL(D0),D0(PARMREG)   EXECUTED VARB SYMB MOVE         49280000
LGVARB   GOIF  (VSTP1,VSTP2),NONE=ATYP,MIX=BTYP BRANCH ON VARB TYPE     49350000
         MVI   VTFVAL,JTMSVC            FLAG C-TYPE FOR TEXT            49420000
         B     FANOUT                   GO ON                           49490000
ATYP     MVI   VTFVAL,JTMSVA            FLAG A-TYPE FOR TEXT            49560000
         B     FANOUT                   GO ON                           49630000
BTYP     MVI   VTFVAL,JTMSVB            FLAG B-TYPE FOR TEXT            49700000
FANOUT   GOIF  (VTYP1,VTYP2),NONE=GENTRY SEPARATE GLOBALS AND LOCALS    49770000
LENTRY   EQU   *                                                        49840000
         GOIF  VSLS,OFF=SLSKIP          HANDLE SYSLIST SPECIALLY        49910000
         MVI   VTFVAL,JTMLSTO           SET SPECIAL SYSLIST FLAG        49980000
         XC    VLDICTR,VLDICTR          CLEAR DICTIONARY PTR            50050000
         MVC   VLDIMEN,=H'1'            PRE-SET SYSLIST DIMENSION FLAG  50120000
         B     COMALL                   SKIP ALLOCATION FOR SYSLIBT     50190000
SLSKIP   MVC   VLDICTR,GTLDALOC+(L'GTLDALOC-L'VLDICTR) PUT IN DICT PTR  50260000
         LA    EOPAIR2,D1               ALLOCATE 1 BYTE FOR B-TYPE      50330000
         GOIF  (VSTP1,VSTP2),MIX=DIMENCK  BRANCH IF B-TYPE              50400000
         LA    EOPAIR2,D4               ALLOCATE 4 BYTES FOR A-TYPE     50470000
         GOIF  (VSTP1,VSTP2),NONE=DIMENCK BRANCH IF A-TYPE              50540000
         LA    EOPAIR2,D9               ALLOCATE 9 BYTES FOR C-TYPE     50610000
DIMENCK  GOIF  VDIM,ON=LSKIP            BRANCH IF VARB DIMENSIONED      50680000
         XC    VLDIMEN,VLDIMEN          SET DIMEN TO ZERO               50750000
         B     COMLNTRY                 SKIP DIMEN CALCULATION          50820000
LSKIP    MVC   VLDIMEN,JHWORD1          PUT DIMEN VALUE IN ENTRY        50890000
         MH    EOPAIR2,JHWORD1          COMPUTE DIMEN'D ALLOCATION      50960000
         GOIF  (VSTP1,VSTP2),NOTMIX=COMLNTRY   BRANCH IF NOT B-TYPE     51030000
         LA    EOPAIR2,D7(,EOPAIR2)     ADJUST TO GET ROUNDED RESULT    51100000
         SR    EOPAIR1,EOPAIR1          INITIALIZE AND DIVIDE TO ALLOC  51170000
         D     EOPAIR1,=F'8'            FORM                            51240000
COMLNTRY A     EOPAIR2,GTLDALOC         ADJUST DICTIONARY ALLOCATION    51310000
         ST    EOPAIR2,GTLDALOC         PUT BACK UPDATED                51380000
         B     COMALL                   CONTINUE AT COMMON PT FOR ALL   51450000
GENTRY   OI    VTFVAL,JTMGBL            INSERT GLOBAL FLAG              51520000
         MVC   VGVECTR,GTGVALOC+(L'GTGVALOC-L'VGVECTR) PUT IN GLOBAL   X51590000
               VECTOR DISPLACEMENT                                      51660000
         L     WORK3,GTGVALOC           GET CURRENT GBL VECTR DISPL     51730000
         LA    WORK3,GVPTRLNG(,WORK3)   INCR FOR NEXT GBL ENTRY         51800000
         ST    WORK3,GTGVALOC           PUT IT BACK UPDATED             51870000
         GOIF  VDIM,ON=GSKIP            BRANCH IF VARB DIMENSIONED      51940000
LSKIPA   EQU   *                                                        52010000
         XC    VGDIMEN,VGDIMEN          SET DIMEN TO ZERO               52080000
         B     COMALL                   SKIP DIMEN HANDLING             52150000
GSKIP    MVC   VGDIMEN,JHWORD1          PUT DIMEN VALUE IN ENTRY        52220000
COMALL   EQU   *                                                        52290000
         LA    WORK2,L'VTFVAL+L'VGVECTR+L'VGDIMEN(,WORK2) UPDATE PTR    52360000
         L     WORK3,VSDSLOT            GET PTR TO START OF ENTRY       52430000
         DROP  WORK2                                                    52500000
         USING VSDENTRY,WORK3                                           52570000
         MVC   VFLAGS,FLGBYT            INSERT FLAGS IN ENTRY           52640000
         ST    WORK2,VSDSLOT            UPDATE NEXT ENTRY ADDRESS       52710000
         GOIF  (VTYP1,VTYP2),ANY=VSDINITX FINSIHED EXCEPT FOR GLOBALS   52780000
         SR    WORK2,WORK3              GET ENTRY LENGTH                52850000
         LR    R11,WORK2                SET UP LENGTH FOR JPUTL         52920000
         ST    WORK5,REGSAVE2           PRESERVE VSDINIT POINTER        52990000
         JPUTL FILE=FILE2,BUFREQ=(R11)  GET BUFFER PTR AND SPACE        53060000
         USING GBLDEF,BUFPTR                                            53130000
         BCTR  WORK2,D0                 GET RECORD MOVE LENGTH          53200000
         EX    WORK2,GDEFMOVE           MOVE DIR ENTRY TO DEF RECORD    53270000
         LA    WORK2,D1(,WORK2)         RESTORE TRUE LENGTH             53340000
         STH   WORK2,GDEFRL             PUT AT HEAD OF DEF RCRD         53410000
         MVI   GDEFRT,GDEFTYPE          INSERT RECORD TYPE              53480000
         BAL   RTNLNK,GETNPF2           NOTE TEXT SEG DICT, IF NECESS   53550000
         L     WORK5,REGSAVE2           RESTORE VSDINIT POINTER         53620000
VSDINITX GOIF  ITERSW,OFF=DICTEXIT      EXIT FI NOT VSD INITIALIZATION  53690000
         LA    WORK5,D9(,WORK5)        BUMP TO NEXT SYST VARB DEFIN     53760000
         CLI   D0(WORK5),BITFF          SEE IF END OF LIST REACHED      53830000
         BNE   VSDINITA                 BRANCH IF NOT                   53900000
         SET   ITERSW,OFF               INDICATE VSD INITIALIZE DONE    53970000
         B     DICTEXIT                 AND EXIT                        54040000
GDEFMOVE MVC   GDEFRL(D0),VCHAIN        EXECUTED GBL DEFINITION MOVE    54110000
         DROP  BUFPTR                                                   54180000
         DROP  WORK3                                                    54250000
         USING VSDENTRY,VSDPTR                                          54320000
OERR     MVC   DSEVCD(D2),=AL1(SEV9,ERR9) FLAG DICTIONARY OVERLAP       54390000
         SET   LSTSYSMS,ON              PREVENT SYSTEM MACRO EDITING    54460000
         B     DICTEXIT                 RETURN TO EDITOR                54530000
VERR     GOIF  (VTYP1,VTYP2),ON=PERR    BRANCH IF PARAM IN ERROR        54600000
         TM    VFLAGS,VSNS              SEE IF DUP ENTRY FOR SYS VARB   54670000
         BO    VERRA                    BRANCH IF YES                   54740000
         TM    VFLAGS,VTYP1+VTYP2       SEE IF DUP ENTRY FOR PARAM      54810000
         BO    VERRB                    BRANCH IF YES                   54880000
         MVC   DSEVCD(D2),=AL1(SEV5,ERR5) FLAG VAR SYMB DUPL OF VAR SYM 54950000
         B     DICTEXIT                 EXIT                            55020000
VERRA    MVC   DSEVCD(D2),=AL1(SEV3,ERR3) FLAG VAR SYMB DUPL OF SYS VAR 55090000
         B     DICTEXIT                 EXIT                            55160000
VERRB    MVC   DSEVCD(D2),=AL1(SEV4,ERR4) FLAG VAR SYMB DUPL OF PARAM   55230000
         B     DICTEXIT                 EXIT                            55300000
PERR     TM    VFLAGS,VTYP1+VTYP2       SEE IF DUPL ENTRY FOR PARAM     55370000
         BO    PERRA                    BRANCH IF YES                   55440000
         MVC   DSEVCD(D2),=AL1(SEV1,ERR1) FLAG PARAM DUPL OF SYST VAR   55510000
         B     DICTEXIT                 EXIT                            55580000
PERRA    MVC   DSEVCD(D2),=AL1(SEV2,ERR2) FLAG PARAM DUPL OF PARAM      55650000
         B     DICTEXIT                 RETURN TO EDITOR                55720000
         DROP  VSDPTR                                                   55790000
         EJECT                                                          55860000
*VARBSYMR - THIS ROUTINE IS CALLED DURING THE EDITING OF A MACRO      * 55930000
*   DEFINITION OR OF OPEN CODE WHEN A REFERENCE TO A VARIABLE SYMBOL  * 56000000
*   IS ENCOUNTERED. ITS FUNCTION IS TO DETERMINE THE TYPE OF          * 56070000
*   REFERENCE (SYMBOLIC PARAMETER, LOCAL VARIABLE, OR GLOBAL VARI-    * 56140000
*   ABLE), AND TO RETURN TO THE EDITOR A POINTER TO THE APPROPRIATE   * 56210000
*   ENTRY IN THE APPROPRIATE GENERATION TIME DICTIONARY (THE KEYWORD  * 56280000
*   OR POSITIONAL PARAMETER VECTOR IN THE CASE OF A SYMBOLIC PARAM-   * 56350000
*   ETER, THE LOCAL DICTIONARY IN THE CASE OF A LOCAL VARIABLE, THE   * 56420000
*   GLOBAL VECTOR IN THE CASE OF A GLOBAL VARIABLE).                  * 56490000
*        INPUT - THE LENGTH OF THE VARIABLE SYMBOL IN R11.            * 56560000
*              - A POINTER IN R10 TO THE VARIABLE SYMBOL (1-8 BYTES). * 56630000
*                IF SUBSCRIPTED, THE VARIABLE SYMBOL IS FOLLOWED BY   * 56700000
*                A LEFT PARENTHESIS (1 BYTE).                         * 56770000
*                THE VARIABLE SYMBOL HAS BEEN VERIFIED AS VALID.      * 56840000
*        OUTPUT - A POINTER IN R11 TO THE TEXT FLAG BYTE IN THE       * 56910000
*                 VARIABLE SYMBOL DIRECTORY ENTRY FOR THE VARIABLE    * 56980000
*                 SYMBOL.                                             * 57050000
*               - APPROPRIATE FLAGS SET IN THE BYTE 'FLGBYT'.         * 57120000
*               - APPROPRIATE FLAGS IN 'CONCODE' IF THE VARIABLE      * 57190000
*                 SYMBOL WAS NOT PREVIOUSLY DEFINED OR IF ITS         * 57260000
*                 USEAGE IS INCONSISTENT WITH ITS DECLARATION.        * 57330000
*                                                                     * 57400000
VARBSYMR EQU   *                                                        57470000
         MVI   FLGBYT,J0                CLEAN UP BEFORE GOING ON        57750000
         BAL   RTNLNK,VSLOOKUP          SEE IF VARB SYMB DECLARED PREV  57820000
         GOIF  FNDFLG,OFF=VERRC         IF NOT, THIS REFER AN ERROR     57890000
         GOIF  SPGRMD,OFF=RSKIP         BR IF NOT PRGR MACS             57900000
         GOIF  SMDEF,OFF=VERRC          ERROR IF BETWEEN MACRO DEFS     57910000
RSKIP    EQU   *                                                        57920000
         USING VSDENTRY,VSDPTR                                          57960000
         MVC   FLGBYT,VFLAGS            GET FLAGS FOR EDITOR            58030000
RSKIPA   LA    WORK1,D1(LNGTHREG,PARMREG) GET PTR PAST VARB SYMB        58100000
         CLI   D0(WORK1),JLPARN         LOOK FOR LEFT PAREN (DIMEN)     58170000
         BNE   RSKIPB                   IF NOT, DONT SET FLAG           58240000
         OI    FLGBYT,VDIM              INDICATE PAREN FOUND            58310000
         B     RSKIPB1                  GO CHECK CONSISTENCY            58380000
RSKIPB   NI    FLGBYT,BITFF-VDIM        INDICATE NO PAREN FOUND         58450000
RSKIPB1  TM    VFLAGS,VTYP1+VTYP2       CONSIDER PARAMS SPECIALLY       58520000
         BO    RSKIPD                   SKIP IF THATS THE CASE          58590000
         CLC   FLGBYT,VFLAGS            SEE IF USEAGE CONSISTENT        58660000
         BNE   VERRD                    BRANCH IF NOT                   58730000
RSKIPC   EQU   *                                                        58800000
         LA    R11,L'VCHAIN+L'VFLAGS+L'VLNGTH+D1(LNGTHREG,VSDPTR)      X58870000
               GET POINTER TO TEXT FLAG BYTE                            58940000
         B     DICTEXIT                 RETURN                          59010000
VERRC    MVC   DSEVCD(D2),=AL1(SEV6,ERR6) FLAG UNDECLARED VAR SYMB      59080000
         B     DICTEXIT                 RETURN                          59150000
VERRD    TM    VFLAGS,VSLS              LOOK FOR SYSLIST REFERENCE      59220000
         BZ    VERRE                    BRANCH IF GBL OR LCL            59290000
         MVC   DSEVCD(D2),=AL1(SEV7,ERR7) FLAG INCONSISTENCY ERROR FOR  59360000
         B     RSKIPC                   SYSLIST, BUT STILL GET POINTER  59430000
RSKIPD   LA    R11,L'VCHAIN+L'VFLAGS+L'VLNGTH+D1(LNGTHREG,VSDPTR)      X59500000
               GET POINTER TO TEXT FLAG BYTE                            59570000
         USING PTFVAL,R11                                               59640000
         MVI   PPAD+D1,J0               SET DIMEN TO ZERO INITIALLY     59710000
         TM    FLGBYT,VDIM              SEE IF SUBSCRIPT ON PARAM       59780000
         BZ    DICTEXIT                 BRANCH IF NOT                   59850000
         MVI   PPAD+D1,J1               INSERT NON-ZERO IN DIMEN BYTES  59920000
         B     DICTEXIT                 RETURN                          59990000
VERRE    EQU   *                                                        60060000
         MVC   DSEVCD(D2),=AL1(SEV7,ERR7) FLAG INCONSISTENCY ERROR      60130000
         B     DICTEXIT                 RETURN TO EDITOR                60200000
         DROP  VSDPTR                                                   60270000
         DROP  R11                                                      60340000
         EJECT                                                          60410000
*SEQSYMBR - THIS ROUTINE IS CALLED DURING THE EDITING OF A MACRO      * 60480000
*   DEFINITION OR OF OPEN CODE WHEN A REFERENCE TO A SEQUENCE SYMBOL  * 60550000
*   IS ENCOUNTERED. ITS FUNCTION IS TO ENTER THE SEQUENCE SYMBOL IN   * 60620000
*   THE SEQUENCE SYMBOL REFERENCE DIRECTORY, IF IT HAS NOT BEEN       * 60690000
*   PREVIOUSLY ENTERED, AND TO RETURN TO THE EDITOR A POINTER TO THE  * 60760000
*   APPROPRIATE ENTRY IN THE GENERATION TIME SEQUENCE SYMBOL REFER-   * 60830000
*   ENCE DICTIONARY. FOR EACH NEW ENTRY IN THE SEQUENCE SYMBOL        * 60900000
*   REFERENCE DIRECTORY, THIS ROUTINE ALSO MAKES AN ENTRY IN THE      * 60970000
*   TEXT SEGMENT DICTIONARY FILE FOR THE SEQUENCE SYMBOL REFERENCE.   * 61040000
*        INPUT - THE LENGTH OF THE SEQUENCE SYMBOL IN R11.            * 61110000
*              - A POINTER TO THE SEQUENCE SYMBOL (2-8 BYTES) IN R10. * 61180000
*                THE SEQUENCE SYMBOL HAS BEEN VERIFIED AS VALID.      * 61250000
*        OUTPUT - A POINTER IN R11 TO THE TEXT FLAG BYTE IN THE       * 61320000
*                 SEQUENCE SYMBOL REFERENCE DIRECTORY ENTRY FOR THE   * 61390000
*                 SEQUENCE SYMBOL.                                    * 61460000
*                                                                     * 61530000
SEQSYMBR EQU   *                                                        61600000
         LA    R6,SSPARMS               POINT TO SEQ SYMBOL VALUES      61670000
         LA    R10,D1(,R10)             DROP LEADING PERIOD             61690000
         BCTR  R11,0                    FROM SEQUENCE SYMBOL            61710000
COMNREF  EQU   *                                                        61740000
         USING SSPARMS,R6                                               61810000
         LR    LNGTHREG,R11             SAVE LENGTH PARAMETER           61880000
         LR    PARMREG,R10              SAVE POINTER PARAMETER          61950000
         MVC   JDWORD,=8AL1(JBLANK)     CLEAR NAME BUFFER               62020000
         EX    LNGTHREG,SSMVC           MOVE SEQ SYMB INTO BUFFER       62090000
         L     SSRDPTR,SSRDSTRT         GET SS REF DIR BASE ADDR        62160000
         USING SSDIR,SSRDPTR                                            62230000
         LA    WORK1,SSRDNE             SET UP COMPARE LIMIT            62300000
SSLOOP   CLI   SSSYM,J0                 LOOK FOR SS IN DIR ENTRY        62370000
         BE    SSENTRY                  IF NO SS, GO MAKE ENTRY         62440000
         CLC   JDWORD,SSSYM             COMPARE SEQUENCE SYMBOLS        62510000
         BE    SSFOUND                  IF ALIKE, GO GET PTR AND EXIT   62580000
         LA    SSRDPTR,SSRDEL(,SSRDPTR) IF NOT, BUMP PTR TO NEXT ENTRY  62650000
         BCT   WORK1,SSLOOP             BRANCH 10 TIMES, THEN FALL      62720000
         L     SSRDPTR,SSRDSTRT         GET TABLE BASE ADDR             62790000
         AH    SSRDPTR,SSRAPDIS         DEVELOP PTR TO NEXT ENTRY SLOT  62860000
SSENTRY  MVC   SSSYM,JDWORD             MOVE SS NAME INTO ENTRY         62930000
         MVC   STFVAL,SSFLGVAL          INSERT FLAG FOR TEXT REFER      63000000
         MVC   SSRDP,GTSDALOC+L'GTSDALOC-L'SSRDP      GET DICT PTR      63070000
         XC    SSPAD,SSPAD              INSERT PAD OF ZEROES IN ENTRY   63140000
         LA    WORK1,D8(,LNGTHREG)      GET LENGTH OF SS REF RECORD     63210000
         LR    R11,WORK1                SET UP FOR JPUTL                63280000
         JPUTL FILE=FILE2,BUFREQ=(R11)  GET BUFFER PTR AND SPACE        63350000
         USING SSREF,BUFPTR                                             63420000
         STH   WORK1,SREFRL             INSERT RECORD LENGTH            63490000
         MVC   SREFDP,SSRDP             INSERT DICTIONARY PTR           63560000
         MVC   SREFRT,SREFTYPE          INSERT RECORD TYPE              63630000
         STC   LNGTHREG,SREFSL          INSERT SEQ SYMB LENGTH          63700000
         EX    LNGTHREG,SREFMOVE        INSERT SEQUENCE SYMBOL          63770000
         BAL   RTNLNK,GETNPF2           NOTE TEXT SEG DICT, IF NECESS   63840000
         L     WORK1,GTSDALOC           PICK UP CURRENT DICT PTR        63910000
         AH    WORK1,SSDLNGTH           INCREMENT BY DICT ENTRY LENGTH  63980000
         ST    WORK1,GTSDALOC           PUT IT BACK UPDATED             64050000
         LH    WORK1,SSRAPDIS           PICK UP CURRENT DISPL           64120000
         LA    WORK1,SSRDEL(,WORK1)     ADD IN NEWEST ENTRY             64190000
         CH    WORK1,=AL2(SSRDEL*(SSRDNE-D1)) CHECK IF WRAP POINT HIT   64260000
         BNH   SSSKIP                   IF NOT, SKIP                    64330000
         SR    WORK1,WORK1              IF SO, RESET DISPL TO ZERO      64400000
SSSKIP   STH   WORK1,SSRAPDIS           SAVE WRAP-AROUND DISPL          64470000
SSFOUND  LA    R11,STFVAL               GET PTR TO STUFF FOR EDITOR     64540000
         B     DICTEXIT                 RETURN TO EDITOR                64610000
SSMVC    MVC   JDWORD(D0),D0(PARMREG)   EXECUTED SEQ SYMB MOVE          64680000
SREFMOVE MVC   SREFSS(D0),D0(PARMREG)   EXECUTED SEQ SYMB MOVE          64750000
         DROP  SSRDPTR                                                  64820000
         DROP  BUFPTR                                                   64890000
         DROP  R6                                                       64960000
         EJECT                                                          65030000
*SEQSYMBD - THIS ROUTINE IS CALLED DURING THE EDITING OF A MACRO      * 65100000
*   DEFINITION OR OF OPEN CODE AFTER THE EDITED TEXT RECORD HAS       * 65170000
*   BEEN BUILT FOR A STATEMENT IN WHICH A SEQUENCE SYMBOL WAS         * 65240000
*   ENCOUNTERED IN THE NAME FIELD. ITS FUNCTION IS TO MAKE AN         * 65310000
*   ENTRY IN THE TEXT SEGMENT DICTIONARY FILE FOR THE SEQUENCE        * 65380000
*   SYMBOL DEFINITION.                                                * 65450000
*        INPUT - THE LENGTH OF THE SEQUENCE SYMBOL IN R11.            * 65520000
*              - A POINTER TO THE SEQUENCE SYMBOL (2-8 BYTES) IN R10. * 65590000
*                THE SEQUENCE SYMBOL HAS BEEN VERIFIED AS VALID.      * 65660000
*                THE STATEMENT DEFINING THE SEQUENCE SYMBOL HAS       * 65730000
*                BEEN PUT TO THE TEXT FILE PRIOR TO ENTRY.            * 65800000
*        OUTPUT - NONE.                                               * 65870000
*                                                                     * 65940000
SEQSYMBD EQU   *                                                        66010000
         LR    LNGTHREG,R11             SAVE LENGTH PARAMETER           66080000
         LR    PARMREG,R10              SAVE POINTER PARAMETER          66150000
         JNOTE FILE=FILE1               GET N/P ADDR AS SS DEF          66220000
         LA    WORK1,L'JNOTEVAL+D5(,LNGTHREG) DEVELOP RECORD LENGTH     66290000
         LR    R11,WORK1                SET UP FOR JPUTL                66360000
         JPUTL FILE=FILE2,BUFREQ=(R11)  GET BUFFER PTR AND SPACE        66430000
         USING SSDEF,BUFPTR                                             66500000
         STH   WORK1,SDEFRL             INSERT RECORD LENGTH            66570000
         MVC   SDEFNP(L'JNOTEVAL),JNOTEVAL  INSERT N/P ADDR             66640000
         BCTR  LNGTHREG,0               DROP LEADING PERIOD             66670000
         STC   LNGTHREG,SDEFSL          INSERT SEQ SYMB LENGTH          66710000
         EX    LNGTHREG,SSDEFMV         INSERT SEQ SYMB                 66780000
         MVI   SDEFRT,SDEFTYPE          INSERT RECORD TYPE              66850000
         BAL   RTNLNK,GETNPF2           NOTE TEXT SEG DICT, IF NECESS   66920000
         B     DICTEXIT                 RETURN TO EDITOR                66990000
SSDEFMV  MVC   SDEFSS(D0),D1(PARMREG)   EXECUTED SEQ SYMB MOVE          67060000
         DROP  BUFPTR                                                   67130000
         EJECT                                                          67200000
*OPERCODE - THIS ROUTINE IS CALLED DURING THE EDITING OF A MACRO      * 67270000
*   DEFINITION OR OF OPEN CODE WHEN AN OPERATION CODE IS ENCOUNT-     * 67340000
*   ERED. ITS FUNCTION IS TO LOCATE THE APPROPRIATE ENTRY IN THE      * 67410000
*   OP CODE TABLE AND TO RETURN TO THE EDITOR A POINTER TO THE ENTRY  * 67480000
*   LOCATED. ANY OPERATION CODE NOT LOCATED IN THE OP CODE TABLE IS   * 67550000
*   ENTERED IN THE MACRO DEFINITION DIRECTORY (SEE THE ROUTINE        * 67620000
*   'MACRNAME').                                                      * 67690000
*        INPUT - THE LENGTH OF THE MNEMONIC IN R11.                   * 67760000
*              - A POINTER TO THE MNEMONIC (1-8 BYTES) IN R10.        * 67830000
*                THE MNEMONIC HAS BEEN VERIFIED AS A VALID SYMBOL.    * 67900000
*        OUTPUT - A POINTER IN R11 TO THE 'FLAGA' BYTE IN THE OP      * 67970000
*                 CODE TABLE ENTRY FOR THE MNEMONIC.                  * 68040000
*               - APPROPRIATE FLAGS SET IN THE BYTE 'IOCID'.          * 68110000
*                                                                     * 68180000
OPERCODE EQU   *                                                        68250000
         LR    LNGTHREG,R11             SAVE LENGTH PARAMETER           68320000
         XC    JFWORD1(D8),JFWORD1      CLEAR WORK AREA                 68340000
         EX    R11,MNEMOVE              MOVE MNEMONIC T-6 WORK AREA     68360000
         NC    OPSCHN,OPSCHN            SEE IF ANY OPSYN ENTRIES        68670000
         BZ    OPERCD1                  BRANCH AROUND IF NONE           68740000
         BAL   R4,OPSYNAME              DO OPSYN SCAN                   68810000
OPERCD1  EQU   *                                                        68880000
         BAL   R4,OPERNAME              SEARCH OP CODE TABLE FIRST      68910000
         B     OPERCD2                  RETURN--NOT FOUND               68940000
         B     DICTEXIT                 RETURN--FOUND                   68970000
OPERCD2  BAL   R4,MACRNAME              LOOK UP AS A MACRO              69010000
         B     MACENTRY                 NOT FOUND                       69050000
         B     DICTEXIT                 FOUND                           69090000
OPERNAME EQU   *                                                        69160000
         L     EOPAIR2,JFWORD1          GET FIRST HALF OF NAME          69230000
         AL    EOPAIR2,JFWORD2          ADD SECOND HALF                 69300000
         SR    EOPAIR1,EOPAIR1          INITIALIZE AND DIVIDE BY        69370000
         D     EOPAIR1,=F'71'           HASHING VALUE                   69440000
         SLL   EOPAIR1,D1               DEVELOP HASH TABLE INDEX        69510000
         L     OCHNPTR,OCTSTRT          GET OP COD TBL BASE ADDR        69580000
         AR    OCHNPTR,HASHO            ADD DISPL TO REQ'D CHAIN        69650000
         USING OPNTRY,OCHNPTR                                           69720000
NXTCHN   CLC   OCHAIN,=FL3'0'           CHECK FOR END OF CHAIN          69790000
         BZR   R4                       IF FOUND, GO HANDLE MACRO CALL  69860000
         MVC   JHWORD1,OCHAIN           ALIGN CHAIN POINTER             69930000
         LH    OCHNPTR,JHWORD1          PICK UP LINK TO NEXT ENTRY      70000000
         A     OCHNPTR,OCTSTRT          GET ADDR OF NEXT CHAIN ENTRY    70070000
         SR    WORK1,WORK1              CLEAR WORK REGISTER             70140000
         IC    WORK1,OFLAGS             PICK UP ENTRY FLAGS             70210000
         N     WORK1,=F'7'              STRIP OUT ALL BUT MNEM LENGTH   70280000
         CLR   WORK1,LNGTHREG           SEE IF LENGTHS EQUAL            70350000
         BNE   NXTCHN                   BRANCH IF NOT                   70420000
         EX    LNGTHREG,OPCOMP          COMPARE MNEMONICS               70490000
         BNE   NXTCHN                   IF NOT SAME, SEARCH FURTHER     70560000
         MVC   IOCID(L'OFLAGS),OFLAGS        GET FLAGS FROM TBL ENTRY   70630000
         NI    IOCID,BITFF-BIT5-BIT6-BIT7    STRIP OUT LENGTH BITS      70700000
         LA    R11,D4(LNGTHREG,OCHNPTR) GET POINTER TO FLAGA BYTE       70770000
         B     D4(R4)                   RETURN--FOUND                   70840000
MNEMOVE  MVC   JFWORD1(D0),D0(R10)      REMOTE MNEMONIC MOVE            70910000
OPCOMP   CLC   JFWORD1(D0),OMNEM        EXECUTED MNEMONIC COMPARE       70980000
         DROP  OCHNPTR                                                  71050000
OPSYNAME LA    NAMEPTR,JFWORD1-D1       SET UP POINTER FOR OPSYN SCAN   71120000
         LA    R1,D1(,LNGTHREG)         GET MNEMONIC TRUE LENGTH        71160000
         STC   R1,JFWORD1-D1            STORE FOR COMPARE               71200000
OPSYNM1  BAL   RTNLNK,SCANOPSN          GO LOOK FOR OPSYN ENTRY         71260000
         B     OPSYNM2                  BRANCH IF FOUND                 71330000
         BR    R4                       BRANCH IF NOT FOUND             71400000
         USING OPSYNTRY,SCANPTR                                         71470000
OPSYNM2  GOIF  ODEL,ON=D4(R4)           SKIP OPCODE LOOKUP IF DELETED   71520000
         MVC   IOCID(D1),OPSYNFLG       MOVE FLAGS                      71570000
         LA    R11,OPSYNATT             POINT TO FLAGA, ETC.            71670000
         B     DICTEXIT                 AND EXIT                        71720000
         DROP  SCANPTR                                                  71820000
         EJECT                                                          71890000
*ORDSYMBR - THIS ROUTINE IS CALLED DURING THE EDITING OF A MACRO      * 71960000
*   DEFINITION OR OF OPEN CODE WHEN AN EXPLICIT REFERENCE TO AN       * 72030000
*   ATTRIBUTE OF AN ORDINARY SYMBOL IS ENCOUNTERED IN A CONDITIONAL   * 72100000
*   ASSEMBLY STATEMENT OR WHEN AN ORDINARY SYMBOL IS ENCOUNTERED      * 72170000
*   IN THE OPERAND OF A MACRO INSTRUCTION.                            * 72240000
*   ITS FUNCTION IS TO ENTER THE ORDINARY SYMBOL IN THE ORDINARY      * 72310000
*   SYMBOL REFERENCE DIRECTORY, IF IT HAS NOT BEEN PREVIOUSLY         * 72380000
*   ENTERED, AND TO RETURN TO THE EDITOR A POINTER TO THE APPRO-      * 72450000
*   PRIATE ENTRY IN THE GENERATION TIME ORDINARY SYMBOL REFERENCE     * 72520000
*   DICTIONARY. FOR EACH NEW ENTRY IN THE ORDINARY SYMBOL REFERENCE   * 72590000
*   DIRECTORY, THIS ROUTINE ALSO MAKES AN ENTRY IN THE TEXT SEGMENT   * 72660000
*   DICTIONARY FILE FOR THE ORDINARY SYMBOL REFERENCE.                * 72730000
*        INPUT - THE LENGTH OF THE ORDINARY SYMBOL IN R11.            * 72800000
*              - A POINTER TO THE ORDINARY SYMBOL (1-8 BYTES) IN R10. * 72870000
*                THE ORDINARY SYMBOL HAS BEEN VERIFIED AS VALID.      * 72940000
*        OUTPUT - A POINTER IN R11 TO THE TEXT FLAG BYTE IN THE       * 73010000
*                 ORDINARY SYMBOL REFERENCE DIRECTORY ENTRY FOR THE   * 73080000
*                 ORDINARY SYMBOL.                                    * 73150000
*                                                                     * 73220000
ORDSYMBR EQU   *                                                        73290000
         LA    R6,OSPARMS               POINT TO ORD SYMB VALUES        73360000
         B     COMNREF                  HANDLE AS SEQUENCE SYMBOL       73430000
         EJECT                                                          73500000
*ORDSYMBD - THIS ROUTINE IS CALLED DURING THE EDITING OF OPEN         * 73570000
*   CODE AFTER THE EDITED TEXT RECORD HAS BEEN BUILT FOR AN           * 73640000
*   'EXTRN' OR 'WXTRN' STATEMENT OR FOR A STATEMENT IN WHICH AN       * 73710000
*   ORDINARY SYMBOL WAS ENCOUNTERED IN THE NAME FIELD. ITS FUNCTION   * 73780000
*   IS TO MAKE AN ENTRY IN THE ORDINARY SYMBOL DEFINITION FILE.       * 73850000
*        INPUT - A POINTER IN R10 TO THE START OF THE EDITED TEXT     * 73920000
*                RECORD.                                              * 73990000
*        OUTPUT - NONE.                                               * 74060000
*                                                                     * 74130000
ORDSYMBD EQU   *                                                        74200000
         LR    R11,R10                  SET UP PTR FOR PUTL             74270000
         JPUTM FILE=FILE3,ADDR=(R11)    PUT RCD TO ORD SYMB DEF FILE    74340000
         B     DICTEXIT                 RETURN TO EDITOR                74410000
         EJECT                                                          74480000
*OPSYNBLD - THIS ROUTINE IS CALLED AFTER THE EDITING OF AN OPSYN      * 74550000
*   STATEMENT. ITS FUNCTION IS TO ENTER THE MNEMONIC AND ITS          * 74620000
*   SYNONYM IN THE OPSYN TABLE.                                       * 74690000
*        INPUT - A POINTER IN R10 TO THE EDITED TEXT RECORD.          * 74760000
*        OUTPUT - NONE.                                               * 74830000
*                                                                     * 74900000
OPSYNBLD EQU   *                                                        74970000
         USING JTEXT,R10                                                75040000
         LH    NAMEPTR,JTNMP            GET DISPL TO NAME FIELD         75110000
         LA    NAMEPTR,D1(NAMEPTR,R10)  DEVELOP PTR TO OPSYN NAME       75180000
         LH    SCANPTR,JTOPP            GET OPERAND FIELD DISPLACEMENT  75200000
         AR    R10,SCANPTR              POINT TO OPERAND                75220000
         USING JTOPO,R10                  AND DECLARE AS BASE.          75240000
         GOIF  JTOPOCD,OFF=OPBLD1       BRANCH IF NO CARD POINTER       75260000
         LA    R10,JTOPL                BUMP OVER CARD POINTER          75280000
OPBLD1   LA    R10,JTOPL                POINT TO OPERAND LENGTH         75300000
         USING JTOPL,R10                  AND RESET BASE.               75320000
         SR    R1,R1                    CLEAR REGISTER                  75340000
         IC    R1,D0(NAMEPTR)           PICK UP NAME FIELD LENGTH       75360000
         LR    LNGTHREG,R1              PLACE MNEMONIC IN LENGTH REG    75380000
         BCTR  LNGTHREG,0                 AND MAKE MOVE LENGTH          75400000
         GOIF  JTOPL,D0,EQ=OPBLD10      EXIT IF NULL OPERAND            75420000
         CLC   JTOPL(D2),=AL1(D1,JCOMMA) CHECK FOR COMMA IN OPERAND     75440000
         BE    OPBLD10                  BRANCH IF YES--NULL OPERAND     75460000
*              NAMEPTR POINTS TO MNEMONIC TO BE SEARCHED                75480000
         BAL   RTNLNK,SCANOPSN          SEARCH FOR PREVIOUS ENTRY       75500000
         B     OPBLD2                   RETURN HERE IF FOUND            75520000
*                                       RETURN HERE IF NOT FOUND        75540000
         BAL   RTNLNK,OPENTRY           GO MAKE OPSYN ENTRY             75560000
         B     OPBLD3                   SKIP AROUND                     75580000
OPBLD2   EQU   *                                                        75600000
         LR    ENTRYPTR,SCANPTR         POINT TO ENTRY                  75620000
*              ENTRYPTR IS OPSYN ENTRY BASE                             75640000
         USING OPSYNTRY,ENTRYPTR        DECLARE BASE                    75660000
         SET   OPREV,ON                                                 75680000
OPBLD3   EQU   *                                                        75700000
OPBLD4   EQU   *                                                        75880000
         LR    NAMEPTR,R10              POINT TO MNEMONIC               75900000
         IC    R1,JTOPL                 PICK UP OPSYN OPERAND LENGTH    75920000
         DROP  R10                                                      75940000
         LR    LNGTHREG,R1              PUT LENGTH IN LENGTH REG        75960000
         BCTR  LNGTHREG,0                 AND MAKE INTO MOVE LENGTH     75980000
         BAL   RTNLNK,SCANOPSN          SEE IF THERE IS AN OPSYN        76000000
         B     OPBLD6                   RETURN HERE IF FOUND            76020000
OPBLD7   XC    JFWORD1(D8),JFWORD1      CLEAR WORK AREA                 76040000
         EX    R1,NAMEMV                USE TO MOVE OPERAND TO WORK    X76060000
                                          AREA.                         76080000
OPBLD8   BAL   R4,OPERNAME              GO SEE IF THERE'S AN OP CODE    76100000
         B     OPBLD5                   RETURN HERE IF NOT FOUND        76120000
*                                       RETURN HERE IF FOUND            76140000
         MVC   OPSYNATT,D0(R11)         MOVE ATTRIBUTES TO OPSYN ENTRY  76160000
         MVC   OPSYNFLG(D1),IOCID       MOVE FLAGS TO OPSYN ENTRY       76180000
         B     DICTEXIT                 EXIT POINT                      76200000
         SPACE                                                          76340000
OPBLD6   EQU   *                                                        76360000
*              SCANPTR POINTS TO OLD OPSYN ENTRY                        76380000
         CLC   HIBYTE0,OPSCHN           IS IT THE LAST OPSYN            76400000
         BNE   OPBLD9                   NO                              76410000
         TM    D3(SCANPTR),OPREV                                        76412000
         BZ    OPBLD7                                                   76414000
OPBLD9   TM    D3(SCANPTR),ODEL         DELETED                         76416000
         BO    OPBLDER1                 OR AN ERRONEOUS OPSYN           76418000
         MVC   OPSYNFLG(D4),D3(SCANPTR) MOVE ATTRIBUTES AND FLAGS       76420000
         B     DICTEXIT                 EXIT                            76440000
         SPACE                                                          76460000
OPBLD5   EQU   *                                                        76470000
         GOIF  OPREV,OFF=OPBLDER1                                       76475000
OPBLDERR SET   ODEL,ON                  MARK AS A DELETE ENTRY          76480000
         MVC   DSEVCD(D2),=AL1(SEV8,ERR8)    LOG ERROR--CIRCULAR       X76500000
                                             OPSYN OPERAND              76520000
         B     DICTEXIT                 EXIT                            76540000
         SPACE                                                          76560000
*        OPSYN DELETE ROUTINE                                           76580000
         SPACE                                                          76600000
OPBLD10  EQU   *                        DELETE AN ENTRY                 76620000
         SPACE                                                          76640000
*        ON ENTRY R1 CONTAINS MNEMONIC LENGTH                           76660000
*              LNGTHREG CONTAINS LENGTH-1                               76680000
*                 NAMEPTR CONTAINS POINTER TO MNEMONIC IN TEXT RECORD   76700000
         SPACE                                                          76720000
         XC    JFWORD1(D8),JFWORD1      CLEAR WORK AREA                 76740000
         EX    R1,NAMEMV                MOVE NAME TO WORK AREA          76760000
         BAL   RTNLNK,SCANOPSN          SEARCH FOR OPSYN ENTRY          76780000
         B     OPBLD11                  RETURN HERE IF FOUND            76800000
*                                       RETURN HERE IF NOT FOUND        76820000
         BAL   R4,OPERNAME              LOOK FOR OP CODE                76840000
         B     OPBLDER1                 RETURN HERE IF NOT FOUND        76860000
*                                       RETURN HERE IF FOUND            76880000
         LA    NAMEPTR,JFWORD1-D1       RESET POINTER TO MNEMONIC       76900000
         BAL   RTNLNK,OPENTRY           MAKE OPSYN ENTRY                76920000
         SET   ODEL,ON                  MARK AS A DELETE                76940000
         B     DICTEXIT                 RETURN                          76960000
OPBLDER1 SET   ODEL,ON                  MARK AS A DELETE ENTRY          76970000
         MVC   DSEVCD(D2),=AL1(SEV14,ERR14)                            X76972000
               LOG ERROR - INVALID OPCODE IN NAME FIELD                 76974000
         B     DICTEXIT                 RETURN                          76976000
OPBLD11  EQU   *                                                        76980000
         DROP  ENTRYPTR                                                 77000000
         USING OPSYNTRY,SCANPTR         BASE                            77020000
         SET   OPREV,ON                                                 77030000
         SET   ODEL,ON                  MARK AS DELETE                  77060000
         DROP  SCANPTR                                                  77080000
         USING OPSYNTRY,ENTRYPTR        BASE FOR OPSYN ENTRY            77100000
         B     DICTEXIT                 RETURN                          77120000
         SPACE                                                          77140000
         SPACE                                                          77320000
OPENTRY  EQU   *                                                        77340000
         L     ENTRYPTR,MDDSLOT         POINTER TO NEXT FREE SLOT       77360000
         SH    ENTRYPTR,=AL2(OPSYND-OPSYNTRY)  MAKE ROOM FOR NEW ENTRY  77380000
         GOIF  (ENTRYPTR),VSDSLOT,LOW=OERR EXIT IF NO ROOM              77400000
         ST    ENTRYPTR,MDDSLOT         UPDATE TABLE BOUNDARY           77420000
         XC    OPSYNTRY(OPSYNLN),OPSYNTRY    CLEAR IT OUT               77440000
         MVC   OPSYNCH,OPSCHN+(L'OPSCHN-L'OPSYNCH)  LINK THE CHAIN      77460000
         LCR   R15,ENTRYPTR             COMPLEMENT AND USE TO CALCULATE 77480000
         A     R15,MDDSTRT              NEW CHAIN POINTER               77500000
         ST    R15,OPSCHN               SAVE AS MASTER LINK             77520000
         EX    R1,NAME1MV               MOVE NAME TO OPSYN ENTRY        77540000
         BR    RTNLNK                   RETURN                          77560000
         SPACE                                                          77580000
*        EXECUTED OPERATIONS                                            77600000
         SPACE                                                          77620000
NAME1MV  MVC   ONAMEL(D0),D0(NAMEPTR)   MNEMONIC MOVE TO OPSYN ENTRY    77640000
NAMEMV   MVC   JFWORD1-D1(D0),D0(NAMEPTR)    ALIGN OPSYN NAME           77660000
         DROP  ENTRYPTR                                                 77680000
         EJECT                                                          77980000
*                                                                       78050000
* THIS SUBROUTINE SEARCHES THE VARIABLE SYMBOL DIRECTORY FOR A          78120000
*        SPECIFIED VARIABLE SYMBOL.                                     78190000
*        IT IS CALLED FROM THE FOLLOWING ROUTINES-                      78260000
*                   VARBSYMD                                            78330000
*                   VARBSYMR                                            78400000
*                                                                       78470000
VSLOOKUP EQU   *                                                        78540000
         LR    LNGTHREG,R11             SAVE LENGTH PARAMETER           78610000
         LR    PARMREG,R10              SAVE POINTER PARAMETER          78680000
         XC    JDWORD,JDWORD            CLEAR VARB NAME AREA            78750000
         EX    LNGTHREG,VARMOVE         MOVE NAME TO ALIGNED AREA       78820000
         L     EOPAIR2,JDWORD           GET FIRST HALF OF NAME          78890000
         AL    EOPAIR2,JDWORD+D4        ADD SECOND HALF                 78960000
         SR    EOPAIR1,EOPAIR1          INITIALIZE AND DIVIDE BY        79030000
         D     EOPAIR1,=F'201'          HASHING VALUE                   79100000
         N     EOPAIR1,=F'127'          INSURE HASH VALUE IN RANGE      79170000
         LR    EOPAIR2,EOPAIR1          SET UP TO CALC DISPL            79240000
         MH    EOPAIR2,=H'3'            MULTIPLY FOR RANGE 0-381        79310000
         L     VSDPTR,VSDSTRT           GET VAR SYMB DIR BASE ADDR      79380000
         AR    VSDPTR,HASHV             ADD DISPL TO REQ'D CHAIN        79450000
         USING VSDENTRY,VSDPTR                                          79520000
CHNON    CLC   VCHAIN,=FL3'0'           CHECK FOR END OF CHAIN          79590000
         BZ    NTFND                    IF YES, GO FLAG IT AND EXIT     79660000
         MVC   HIBYTE0+(L'HIBYTE0-L'VCHAIN)(L'VCHAIN),VCHAIN           X79730000
               MOVE CHAIN POINTER                                       79800000
         L     VSDPTR,HIBYTE0           TO ALIGNED AREA, PICK IT UP     79870000
         A     VSDPTR,VSDSTRT           GET ADDR OF NEXT CHAIN ENTRY    79940000
         SR    WORK1,WORK1              CLEAR WORK REGISTER             80010000
         IC    WORK1,VLNGTH             PICK UP LENGTH OF ENTRY         80080000
         N     WORK1,=F'7'              STRIP OUT ALL BUT LENGTH BITS   80150000
         CLR   WORK1,LNGTHREG           COMPARE VARB SYMB LENGTHS       80220000
         BNE   CHNON                    IF UNEQUAL, SEARCH FURTHER      80290000
         EX    LNGTHREG,VARCOMP         COMPARE VARIABLE SYMBOLS        80360000
         BNE   CHNON                    IF NOT SAME, SEARCH FURTHER     80430000
         SET   FNDFLG,ON                IF SAME, FLAG IT                80500000
         BR    RTNLNK                        AND EXIT                   80570000
NTFND    SET   FNDFLG,OFF               INDICATE VARB SYM NOT FOUND     80640000
         BR    RTNLNK                   RETURN TO CALLING RTN           80710000
VARCOMP  CLC   VSYMBL(D0),D0(PARMREG)   EXECUTED VARB NAME COMPARE      80780000
VARMOVE  MVC   JDWORD(D0),D0(PARMREG)   EXECUTED VARB NAME MOVE         80850000
         DROP  VSDPTR                                                   80920000
*                                                                       80990000
* THIS SUBROUTINE NOTES THE TEXT SEGMENT DICTIONARY FILE FOLLOWING      81060000
*        THE FIRST WRITE TO THAT FILE FOR EACH TEXT SEGMENT.            81130000
*        IT IS CALLED FROM THE FOLLOWING ROUTINES-                      81200000
*                   VARBSYMD                                            81270000
*                   SEQSYMBR                                            81340000
*                   SEQSYMBD                                            81410000
*                   ORDSYMBR                                            81480000
*                                                                       81550000
GETNPF2  GOIF  NOTEFIL2,OFF=(RTNLNK)    RETURN IF FLAG SET OFF          81620000
         SET   NOTEFIL2,OFF             SET FLAG OFF                    81690000
         ST    RTNLNK,REGSAVE1          TEMPOR SAVE LINK REG            81760000
         JNOTE FILE=FILE2               NOTE TEXT SEG DICT FILE         81830000
         MVC   SAVENOTE,JNOTEVAL        SAVE N/P ADDR FOR MDD ENTRY     81900000
         L     RTNLNK,REGSAVE1          RESTORE LINK REG                81970000
         BR    RTNLNK                   RETURN                          82040000
*                                                                       82110000
* THIS SUBROUTINE PERFORMS A BUFFERED WRITE TO ANY FILE.                82180000
*        IT IS CALLED FROM THE FOLLOWING ROUTINES                       82250000
*                   PHASEND                                             82320000
*                                                                       82390000
BUFRITE  EQU   *                                                        82460000
         MVI   FSWITCH,J0               CLEAR FIRST WRITE/NOTE SWITCH   82530000
         LM    R3,R4,PIOPARMB           PICK UP I/O PARAMETERS          82600000
BR1      CLR   R3,R5                    SEE IF RECORD LESS THAN MAX     82670000
         BH    BR4                      BRANCH IF NOT                   82740000
         CH    R3,=AL2(MINRECSZ)        SEE IF BLOCK OVER MINIMUM       82810000
         BNL   BR11                     BRANCH IF MORE OR JUST ENUF     82880000
         LA    R3,MINRECSZ              IF NOT, USE MINIMUM SIZE        82950000
BR11     EQU   *                                                        83020000
         STH   R3,PIOPARMC              SET UP I/O LENGTH PARAM         83090000
         SR    R3,R3                    INDICATE LAST WRITE             83160000
BR2      JWRITE FILE=(R6),PARM=PIOPARMA WRITE RECORD TO PROPER FILE     83230000
         JCHECK FILE=(R6)               CHECK THE WRITE                 83300000
         TS    FSWITCH                  TEST AND SET FIRST WRITE SW     83370000
         BNZ   BR3                      BRANCH IF NOT FIRST WRITE       83440000
         JNOTE FILE=(R6)                NOTE FIRST BLOCK WRITTEN        83510000
BR3      LTR   R3,R3                    SEE IF WRITE COMPLETE           83580000
         BZR   R7                       RETURN IF YES                   83650000
         AR    R4,R5                    DEVELOP PTR TO NEXT I/O AREA    83720000
         ST    R4,PIOPARMA              PUT PTR IN I/O CONTROL AREA     83790000
         B     BR1                      GO SET UP NEW WRITE LENGTH      83860000
BR4      STH   R5,PIOPARMC              USE MAX RCD LENGTH THIS TIME    83930000
         SR    R3,R5                    ADJUST RECORD LENGTH            84000000
         B     BR2                      GO WRITE NEXT RECORD            84070000
*                                                                       84140000
* THIS SUBROUTINE PERFORMS THE INITIALIZATION COMMON TO A MACRO         84210000
*        DEFINITION AND OPEN CODE. IT IS CALLED FROM THE                84280000
*        FOLLOWING ROUTINES - OPENENT, MACRENT                          84350000
*                                                                       84420000
COMNINIT EQU   *                                                        84490000
         SET   NOTEFIL2,ON              SET NOTE FLAG FOR FILE 2        84560000
         L     WORK1,SSRDSTRT           GET PTR TO SS REF DIRECTORY     84630000
         MVI   D0(WORK1),JBLANK         INSERT CHARACTER TO CLEAR       84700000
         MVC   D1(SSRDLNGT-D1,WORK1),D0(WORK1) SEQ SYMB REFER DIRECT    84770000
         L     WORK1,VSDSTRT            GET PTR TO VSD HASH TABLE       84840000
         XC    D0(VSDHTLNT-D256,WORK1),D0(WORK1) CLEAR VSD HASH TABLE,  84910000
         XC    VSDHTLNT-D256(D256,WORK1),VSDHTLNT-D256(WORK1) 2 PARTS   84980000
         LA    WORK1,VSDHTLNT(,WORK1)   ADJUST PTR PAST HASH TABLE      85050000
         ST    WORK1,VSDSLOT            RESET START OF VSD ENTRY AREA   85120000
         BR    WORK3                    RETURN                          85190000
*                                                                       85260000
* THIS SUBROUTINE PERFORMS THE TERMINATION COMMON TO A MACRO            85330000
*        DEFINITION AND OPEN CODE. IT IS CALLED FROM THE                85400000
*        FOLLOWING ROUTINES - OPENEND, MACREND                          85470000
*                                                                       85540000
COMNEND  EQU   *                                                        85610000
         JPUTL FILE=FILE2,BUFREQ=L'ESEGRL+L'ESEGRT GET RECORD LENGTH    85680000
         USING ENDSEG,BUFPTR                                            85750000
         MVC   ESEGRL(L'ESEGRL+L'ESEGRT),=AL1(0,L'ESEGRL+L'ESEGRT,ESEGTX85820000
               YPE) INSERT RECORD LENGTH AND TYPE                       85890000
         BAL   RTNLNK,GETNPF2           NOTE TEXT SEG DICT, IF NECESS   85960000
         L     WORK1,CURMDDPT           PICK UP CURRENT MDD SLOT PTR    86030000
         USING MDDNTRY,WORK1                                            86100000
         MVC   MLCLSZ,GTLDALOC+(L'GTLDALOC-L'MLCLSZ) INSERT LCL DICT    86170000
         MVC   MSEQSZ,GTSDALOC+(L'GTSDALOC-L'MSEQSZ) INSERT SEQ DICT    86240000
         MVC   MGBLSZ,GTGVALOC+(L'GTGVALOC-L'MGBLSZ) INSERT GBL VCT     86310000
         BR    WORK3                    RETURN                          86380000
         DROP  WORK1                                                    86450000
*                                                                       86520000
* THIS SUBROUTINE SCANS THE OPSYN TABLE FOR A GIVEN OP CODE.            86590000
*                                                                       86660000
SCANOPSN MVC   HIBYTE0,OPSCHN           SET UP INITIAL CHAIN PTR        86730000
SCOPN1   L     SCANPTR,HIBYTE0          PICK UP PTR TO NEXT CHAIN ENTRY 86800000
         LTR   SCANPTR,SCANPTR          SEE IF END OF CHAIN             86870000
         BZ    D4(,RTNLNK)              TAKE NOT-FOUND EXIT             86940000
         USING OPSYNTRY,SCANPTR                                         87010000
         LCR   SCANPTR,SCANPTR          GET VALUE FOR CALCULATION OF    87030000
         A     SCANPTR,MDDSTRT          OPSYN ENTRY LOCATION            87050000
         EX    R1,COMPNAME              REMOTE MNEMONIC COMPARE         87100000
         BER   RTNLNK                   TAKE FOUND EXIT                 87150000
         MVC   HIBYTE0+(L'HIBYTE0-L'OPSYNCH)(L'OPSYNCH),OPSYNCH        X87220000
                SET UP LINK TO NEXT ENTRY                               87290000
         B     SCOPN1                   GO BACK THRU SEARCH LOOP        87360000
COMPNAME CLC   ONAMEL,D0(NAMEPTR)       COMPARE MNEMONICS               87390000
         DROP  SCANPTR                                                  87430000
         EJECT                                                          87500000
OCTSTRT  DC    A(OPBASE)                POINTER TO OP CODE TABLE        87570000
         JEXTRN (X1K01=OPBASE)                                          87640000
SYSNDX   DC    AL1(VSNS+VTYP2),X'05',AL1(JS,JY,JS,JN,JD,JX,JBLANK)     X87740000
               DEFINITION OF SYSNDX SYSTEM LOCAL                        87840000
SYSECT   DC    AL1(VSNS+VTYP2+VSTP1+VSTP2),X'05',AL1(JS,JY,JS,JE,JC,JT,X87940000
               JBLANK) DEFINITION OF SYSECT SYSTEM LOCAL                88040000
SYSLST   DC    AL1(VSNS+VSLS+VDIM+VTYP2),X'06',AL1(JS,JY,JS,JL,JI,JS,JTX88140000
               ) DEFINITION OF SYSLIST SYSTEM LOCAL                     88240000
SYSPRM   DC    AL1(VSNS+VSTP1+VSTP2),X'06',AL1(JS,JY,JS,JP,JA,JR,JM)   X88340000
               DEFINITION OF SYSPARM SYSTEM GLOBAL                      88440000
SYSTME   DC    AL1(VSNS+VSTP1+VSTP2),X'06',AL1(JS,JY,JS,JT,JI,JM,JE)   X88540000
               DEFINITION OF SYSTIME SYSTEM GLOBAL                      88640000
SYSDTE   DC    AL1(VSNS+VSTP1+VSTP2),X'06',AL1(JS,JY,JS,JD,JA,JT,JE)   X88740000
               DEFINITION OF SYSDATE SYSTEM GLOBAL                      88840000
         DC    X'FF'                    END OF TABLE FLAG               88940000
         SPACE 3                                                        89250000
         EJECT                                                          89340000
         JPATCH X1J00,B64                                               89430000
         END                                                            89530000
