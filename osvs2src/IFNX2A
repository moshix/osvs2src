         JHEAD 'DICTIONARY INTERLUDE PHASE',                           X00094000
               PHASEID=X2A,                                            X00100000
               LEVEL=10                                                 00150000
*FUNCTION/OPERATION-                                                  * 00200000
*   GENERALLY, THE DICTIONARY INTERLUDE PHASE BUILDS THE GENERATION   * 00250000
*   TIME DICTIONARIES REQUIRED IN THE GENERATE PHASE. SPECIFICALLY,   * 00300000
*   THIS PHASE -                                                      * 00350000
*        (1) BUILDS THE SEQUENCE SYMBOL REFERENCE DICTIONARY FOR      * 00400000
*            EACH MACRO DEFINITION AND FOR OPEN CODE FROM THE         * 00450000
*            SEQUENCE SYMBOL REFERENCES AND SEQUENCE SYMBOL DEFIN-    * 00500000
*            ITIONS IN THE TEXT SEGMENT DICTIONARY FILE FOR THE       * 00550000
*            RESPECTIVE MACRO DEFINITIONS AND OPEN CODE               * 00600000
*        (2) BUILDS THE ORDINARY SYMBOL REFERENCE DICTIONARY FROM     * 00650000
*            THE ORDINARY SYMBOL REFERENCES IN THE TEXT SEGMENT       * 00700000
*            DICTIONARY FILE AND THE ORDINARY SYMBOL DEFINITIONS      * 00750000
*            IN THE ORDINARY SYMBOL DEFINITION FILE                   * 00800000
*        (3) BUILDS THE GLOBAL VECTOR FOR EACH MACRO DEFINITION AND   * 00850000
*            FOR OPEN CODE FROM THE GLOBAL DEFINITIONS IN THE TEXT    * 00900000
*            SEGMENT DICTIONARY FILE FOR THE RESPECTIVE MACRO DEFIN-  * 00950000
*            ITIONS AND OPEN CODE                                     * 01000000
*        (4) BUILDS THE SKELETON DICTIONARY HEADER FOR EACH MACRO     * 01050000
*            DEFINITION AND FOR OPEN CODE FROM THE MACRO DEFINITION   * 01100000
*            DIRECTORY ENTRIES FOR THE RESPECTIVE MACRO DEFINITIONS   * 01150000
*            AND OPEN CODE                                            * 01200000
*        (5) BUILDS THE OPSYN TABLE FOR THE GENERATE PHASE FROM THE   * 01250000
*            OPSYN TABLE FOR THE EDIT PHASE                           * 01300000
*        (6) BUILDS THE MACRO DEFINITION VECTOR FOR THE GENERATE      * 01350000
*            PHASE                                                    * 01400000
*        (7) DETERMINES THE GLOBAL DICTIONARY ALLOCATION FOR THE      * 01450000
*            GENERATE PHASE FROM THE GLOBAL DEFINITIONS IN THE        * 01500000
*            TEXT SEGMENT DICTIONARY FILE                             * 01550000
*                                                                     * 01600000
*ENTRY POINT-                                                         * 01650000
*        INTRENTR                                                     * 01700000
*                                                                     * 01750000
*INPUT-                                                               * 01800000
*   FILE 2 - TEXT SEGMENT DICTIONARY FILE FOR EACH MACRO DEFINITION   * 01850000
*          - TEXT SEGMENT DICTIONARY FILE FOR OPEN CODE               * 01900000
*   FILE 3 - ORDINARY SYMBOL DEFINITION FILE                          * 01950000
*          - MACRO DEFINITION DIRECTORY/OPSYN TABLE                   * 02000000
*                                                                     * 02050000
*OUTPUT-                                                              * 02100000
*   FILE 1 - SKELETON DICTIONARY FOR EACH MACRO DEFINITION            * 02150000
*          - SKELETON DICTIONARY FOR OPEN CODE                        * 02200000
*          - ERROR RECORDS ORIGINATING IN THE INTERLUDE PHASE         * 02250000
*   FILE 2 - ORDINARY SYMBOL REFERENCE DICTIONARY                     * 02300000
*          - MACRO DEFINITION VECTOR                                  * 02350000
*          - OPSYN TABLE                                              * 02400000
*                                                                     * 02450000
*EXTERNAL ROUTINES-                                                   * 02500000
*                                                                     * 02550000
*                                                                     * 02600000
*                                                                     * 02650000
*EXITS,NORMAL-                                                        * 02700000
*   RETURN TO THE DRIVER WITH THE COMPLETION CODE SET TO A ZERO       * 02750000
*   VALUE.                                                            * 02800000
*                                                                     * 02850000
*EXITS,ERROR-                                                         * 02900000
*   RETURN TO THE DRIVER WITH THE COMPLETION CODE SET TO A NON-ZERO   * 02950000
*   VALUE, THE SPECIFIC VALUE INDICATING THE ACTION TO BE TAKEN BY    * 03000000
*   THE DRIVER.                                                       * 03050000
*                                                                     * 03100000
*TABLES/WORK AREAS-                                                   * 03150000
*   MACRO DEFINITION DIRECTORY - A CHAINED TABLE CONTAINING AN        * 03200000
*        ENTRY FOR EACH UNIQUE MACRO NAME ENCOUNTERED IN THE TEXT     * 03250000
*        OF ALL MACRO DEFINITIONS AND OPEN CODE, AND AN ENTRY FOR     * 03300000
*        OPEN CODE (MERGED WITH THE OPSYN TABLE).                     * 03350000
*   OPSYN TABLE - A CHAINED TABLE CONTAINING AN ENTRY FOR EACH        * 03400000
*        UNIQUE MNEMONIC AFFECTED BY AN OPSYN STATEMENT (MERGED       * 03450000
*        WITH THE MACRO DEFINITION DIRECTORY).                        * 03500000
*   SEQUENCE SYMBOL DEFINITION TABLE - A CHAINED TABLE CONTAINING     * 03550000
*        AN ENTRY FOR EACH UNIQUE SEQUENCE SYMBOL DEFINED IN A        * 03600000
*        MACRO DEFINITION OR OPEN CODE.                               * 03650000
*   ORDINARY SYMBOL REFERENCE TABLE - A CHAINED TABLE CONTAINING AN   * 03700000
*        ENTRY FOR EACH REFERENCE TO AN ORDINARY SYMBOL ENCOUNTERED   * 03750000
*        IN AN ATTRIBUTE REFERENCE OR IN A MACRO INSTRUCTION          * 03800000
*        OPERAND (MERGED WITH THE GLOBAL DIRECTORY).                  * 03850000
*   GLOBAL DIRECTORY - A CHAINED TABLE CONTAINING AN ENTRY FOR        * 03900000
*        EACH SYSTEM GLOBAL VARIABLE AND EACH UNIQUE VARIABLE SYMBOL  * 03950000
*        ENCOUNTERED ON A GBLX STATEMENT IN THE TEXT OF ALL MACRO     * 04000000
*        DEFINITIONS AND OPEN CODE (MERGED WITH THE ORDINARY          * 04050000
*        SYMBOL REFERENCE TABLE).                                     * 04100000
*   MACRO DEFINITION VECTOR - A SEQUENTIAL TABLE CONTAINING AN        * 04150000
*        ENTRY FOR EACH UNIQUE MACRO NAME ENCOUNTERED IN THE TEXT     * 04200000
*        OF ALL MACRO DEFINITIONS AND OPEN CODE, AND AN ENTRY FOR     * 04250000
*        OPEN CODE.                                                   * 04300000
*   ORDINARY SYMBOL REFERENCE DICTIONARY - A SEQUENTIAL TABLE         * 04350000
*        CONTAINING AN ENTRY FOR EACH ORDINARY SYMBOL ENCOUNTERED     * 04400000
*        IN AN ATTRIBUTE REFERENCE OR IN THE OPERAND OF A MACRO       * 04450000
*        INSTRUCTION.                                                 * 04500000
*   OPSYN TABLE - A SEQUENTIAL TABLE CONTAINING AN ENTRY FOR EACH     * 04550000
*        UNIQUE MNEMONIC AFFECTED BY AN OPSYN STATEMENT.              * 04600000
*   SKELETON DICTIONARY AREA - THE AREA IN WHICH THE SKELETON DICT-   * 04650000
*        IONARY FOR EACH MACRO DEFINITION AND OPEN CODE IS BUILT.     * 04700000
*        EACH SKELETON DICTIONARY CONSISTS OF A SKELETON DICTION-     * 04750000
*        ARY HEADER, A GLOBAL VECTOR, AND A SEQUENCE SYMBOL REFER-    * 04800000
*        ENCE DICTIONARY. THE SIZE OF THE SKELETON DICTIONARY AREA    * 04850000
*        VARIES ACCORDING TO THE REQUIREMENTS FOR THE SKELETON        * 04900000
*        DICTIONARY FOR EACH TEXT SEGMENT.                            * 04950000
*                                                                     * 05000000
*ATTRIBUTES-                                                          * 05050000
*   REFRESHABLE                                                       * 05100000
*                                                                     * 05150000
*NOTES-                                                               * 05200000
*                                                                     * 05250000
*                                                                     * 05300000
*                                                                     * 05350000
         EJECT                                                          05400000
         COPY  JCOMMON                                                  05450000
         EJECT                                                          05500000
INTRCOM  DSECT                                                          05550000
RECADDR  DS    F                        PTR TO LAST RECORD READ         05590000
COMSTRT  DS    F                        PTR TO PHASE COMMON AREA        05630000
MDDSTRT  DS    F                        PTR TO START OF MACRO DEF DIRCT 05670000
FREESTRT DS    F                        PTR TO LOW END OF WORK AREA     05710000
FREEEND  DS    F                        PTR TO HIGH END OF WORK AREA    05750000
GDSTRT   DS    F                        PTR TO START OF GBL DIRECTORY   05790000
OSRTSTRT EQU   GDSTRT                   PTR TO START OF ORD SYMB REF TB 05830000
GDEND    DS    F                        PTR TO CURRENT END OF GBL DIR   05870000
OSRTEND  EQU   GDEND                    PTR TO CURRENT END OF ORD SYMB  05910000
OSRDSTRT EQU   OSRTEND                  PTR TO START OF ORD SYMB REF DI 05950000
MDVSTRT  DS    F                        PTR TO START OF MACRO DEF VECTR 05990000
MDDND    DS    F                        PTR TO END OF MACRO DEF DIRECT  06030000
SSDTSTRT DS    F                        PTR TO START OF SEQ SYMB DEF TB 06070000
SSDTEND  DS    F                        PTR TO CURRENT END OF SEQ SYMB  06110000
SKDCSTRT DS    F                        PTR TO START OF SKEL DICT       06150000
GDALLOC  DS    F                        CURRENT SIZE OF GLOBAL DICTIONY 06190000
OREFCNT  DS    F                        COUNT OF ORD SYMB ATTR REFERS   06230000
MDVLNTH  DS    F                        LENGTH OF MACRO DEFIN VECTOR    06270000
OPSCHAIN DS    F                        MASTER LINK IN OPSYN CHAIN      06310000
ENDCOL   DS    F                        PTR TO END OF OPERAND           06350000
VECTSAVE EQU   ENDCOL                   TEMP FULLWORD WORK AREA         06390000
ERRBLK   DS    F                        PTR TO ERROR RECORD BUFFER      06430000
ERBLKPTR DS    F                        PTR TO NEXT SLOT IN ERROR BUF   06470000
LNGSK    DS    F                        LENGTH OF SKELETON DICTIONARY   06510000
GBLSK    DS    F                        PTR TO START OF GLOBAL VECTOR   06550000
SEQSK    DS    F                        PTR TO START OF SEQ,SYM REF DIC 06590000
ERRLNKSV DS    F                        SAVE AREA ERROR RTN LINK REG    06630000
HIBYTE0  DS    F                        FULL WORD WORK AREA             06670000
SHIFTAMT EQU   HIBYTE0+D3               ONE BYTE WORK AREA              06710000
*                                                                       07000000
* THIS IS THE ASCAN WORK AREA.                                          07050000
*                                                                       07100000
AWORK    DS    0F                                                       07150000
AFLAGS   DSW   ADCON1,                  ADDRESS CONSTANT (A,Y,V,S)     X07200000
               ADCON2,                  ADDRESS CONSTANT (Q)           X07250000
               CHCON,                   CHARACTER CONSTANT (C)         X07300000
               BXCON,                   HEX. OR BINARY CONSTANT (X,B)  X07350000
               DCCON,                   DECIMAL CONSTANT (P,Z)         X07400000
               FLCON,                   FLOATING-PT CONSTANT (D,E,L)   X07450000
               FXCON                    FIXED-PT CONSTANT (F,H)         07500000
ATYPEAT  DS    XL1                      TYPE ATTRIBUTE                  07550000
ALENGTH  DS    XL2                      LENGTH ATTRIBUTE                07600000
ASCALE   DS    XL2                      SCALE ATTRIBUTE                 07650000
ALENMAX  DS    XL2                      MAXIMUM LENGTH VALUE            07700000
ASCAMAX  DS    XL2                      MAXIMUM SCALE VALUE             07750000
ATYPALT  DS    XL1                      ALTERNATE TYPE ATTRIBUTE        07800000
         ORG   ATYPALT                  ORIGIN FOR ALTERNATIVE BYTE     07850000
ARFACT   DS    XL1                      ROUNDING FACTOR                 07900000
ASFACT   DS    XL1                      SHIFTING FACTOR                 07950000
ACHARLMT DS    XL1                      HIGH CHARACTER LIMIT            08000000
*                                                                       08040000
SWITCHA  DSW   ENDSW,                   END OF EXTRN OPERAND HIT       X08080000
               FNDFLG,                  MATHING TABLE ENTRY FOUND      X08120000
               QUOTESW,                 QUOTE MODE ENTERED             X08160000
               TRANSW,                  TRANSLATE SDT VALUE            X08190000
               ,,,                                                      08220000
SWITCHB  DSW   DSSW,                    DS (NOT DC) STATEMENT          X08260000
               EXLENFLG,                EXPLICIT LENGTH MODIFIER USED  X08300000
               NSCALSW,                 NEGATIVE SCALE MODIFIER USED   X08340000
               SCALEFLG,                SCALING DECIMAL POINT FOUND    X08380000
               SIGNFLG,                 CONSTANT SIGN PROCESSED        X08420000
               DEFLTL,                  DEFAULT LENGTH MODIFIER USED   X08460000
               ,                                                        08550000
DELIMIT  DS    X                        OPERAND DELIMITER SCANNED FOR   08590000
PIOPARMB DS    F                        INITIAL I/O LENGTH              08630000
PIOPARMA DS    F                        I/O AREA ADDRESS                08670000
PIOPARMC DS    H                        I/O AREA LENGTH                 08710000
SAVE3456 DS    5F                       REGISTER SAVE AREA              08750000
FSWITCH  DS    X                        FIRST-WRITE SWITCH              08790000
ERRHDR   DS    CL12                     ERROR RECORD HEADER AREA        08830000
ERRNAME  DS    CL8                      ERROR RECORD FIRST NAME AREA    08870000
ERROTHR  DS    CL16                     ERROR RECORD 2ND, 3RD NAMES     08910000
         DS    4F                       PATCH AREA                      08950000
ENDCOM   DS    0D                                                       09050000
         EJECT                                                          09100000
*                                                                       09150000
* THIS DSECT MAPS THE MACRO DEFINITION DIRECTORY ENTRY.                 09200000
*                                                                       09250000
MDDNTRY  DSECT                                                          09300000
MCHAIN   DS    XL3                      CHAIN PTR         3 BYTES       09350000
MFLAGS   DSW   TSEDIT,                  ON-SEGMENT EDITED              X09400000
               OCTS,                    ON-OPEN CODE ENTRY             X09450000
               FLUSH,,,                 ON-MACRO FLUSHED               X09500000
               MNL1,MNL2,MNL3           MACRO NAME LENGTH               09550000
MSYMBL   DS    XL8                      SYMBOL (PADDED)   8 BYTES       09600000
MVECTR   DS    XL3                      VECTOR POINTER    3 BYTES       09650000
MTXTNP   DS    XL8                      TEXT FILE N/P     8 BYTES       09700000
MTSDNP   DS    XL8                      DICT FILE N/P     8 BYTES       09750000
MGBLSZ   DS    XL3                      GBL VCTR SIZE     3 BYTES       09800000
MSEQSZ   DS    XL3                      SEQ SYM DICT SIZE 3 BYTES       09850000
MLCLSZ   DS    XL3                      LCL DICT SIZE     3 BYTES       09900000
MDDEND   EQU   *                                                        09950000
*                                                                       10000000
* THIS DSECT MAPS THE OPSYN TABLE ENTRY, AS PASSED FROM THE EDIT        10050000
*            PHASE.                                                     10100000
*                                                                       10150000
OPSYNTRY DSECT                                                          10200000
OPSYNCH  DS    XL3                      CHAIN POINTER     3 BYTES       10250000
OPSYNFLG DSW   ,,,,                     SPACE FOR OPCODE FLAGS         X10280000
               OMAC,                    OPSYN MACRO ENTRY              X10310000
               ODEL                     DELETED                         10340000
OPSYNATT DS    XL3                      ATTRIBUTES                      10370000
ONAMEL   DS    XL1                      NAME LENGTH                     10400000
ONAME    DS    XL8                      NAME                            10430000
OPSYND   EQU   *                                                        10500000
*                                                                       10550000
* THIS DSECT MAPS THE OPSYN TABLE ENTRY, AS PASSED TO THE GENERATE      10600000
*            PHASE.                                                     10650000
*                                                                       10700000
OPSTBL   DSECT                                                          10750000
OPSFLGS  DS    XL1                      FLAGS                           10800000
OPSTATTS DS    XL3                      ATTRIBUTES                      10850000
OPSTNL   DS    XL1                      NAME LENGTH                     10900000
OPSTNAM  DS    XL8                      NAME                            10950000
OPSTND   EQU   *                                                        11000000
*                                                                       11050000
* THIS DSECT MAPS THE MACRO DEFINITION VECTOR ENTRY.                    11100000
*                                                                       11150000
MDVNTRY  DSECT                                                          11200000
MNPTXT   DS    XL8                      TEXT FILE N/P     8 BYTES       11250000
MNPSD    DS    XL8                      SKEL DICTION N/P  8 BYTES       11300000
MSDL     DS    XL3                      SKEL DICT LENGTH  3 BYTES       11350000
MDVEND   EQU   *                                                        11400000
*                                                                       11450000
* THIS DSECT MAPS THE HEADER FOR THE SKELETON DICTIONARY.               11500000
*                                                                       11550000
SKDCTHDR DSECT                                                          11600000
SKSRDPT  DS    XL3                      DISPL SEQ SYM DIC 3 BYTES       11650000
SKLDADR  DS    XL3                      LCL DICT PTR      3 BYTES       11700000
SKLDLNG  DS    XL3                      LCL DICT LENGTH   3 BYTES       11750000
SKMPADR  DS    XL3                      MACRO PARAM PTR   3 BYTES       11800000
SKKVADR  DS    XL3                      KEYWD VECTR PTR   3 BYTES       11850000
SKADNLD  DS    XL4                      DICT ADR NXT LVL  4 BYTES       11900000
SKNPNLT  DS    XL8                      TEXT N/P NXT LVL  8 BYTES       11950000
SKACTRV  DS    XL4                      ACTR VALUE        4 BYTES       12000000
SKNOFSLS DS    XL2                      N'&SYSLIST        2 BYTES       12050000
SKHDREND EQU   *                                                        12100000
*                                                                       12150000
* THIS DSECT MAPS THE LOGICAL RECORD READ FROM THE TEXT SEGMENT         12200000
*            DICTIONARY FILE FOR A SEQUENCE SYMBOL DEFINITION.          12250000
*                                                                       12300000
SSDEF    DSECT                                                          12350000
SDEFRL   DS    XL2                      RECORD LENGTH     2 BYTES       12400000
SDEFRT   DS    X'04'                    RECORD TYPE       1 BYTE        12450000
SDEFNP   DS    XL8                      NOTE/POINT ADDR   8 BYTES       12500000
SDEFSL   DS    XL1                      SYMBOL LENGTH     1 BYTE        12550000
SDEFSS   EQU   *                        SEQUENCE SYMBOL 2-8 BYTES       12600000
*                                                                       12650000
* THIS DSECT MAPS THE SEQUENCE SYMBOL DEFINITION TABLE ENTRY.           12700000
*                                                                       12750000
SSDTNTRY DSECT                                                          12800000
SSDTCP   DS    XL3                      CHAIN POINTER     3 BYTES       12850000
SSDTNP   DS    XL8                      NOTE/POINT ADDR   8 BYTES       12900000
SSDTSL   DS    XL1                      SYMBOL LENGTH     1 BYTE        12950000
SSDTSY   EQU   *                        SEQUENCE SYMBOL 2-8 BYTES       13000000
*                                                                       13050000
* THIS DSECT MAPS THE LOGICAL RECORD READ FROM THE TEXT SEGMENT         13100000
*            DICTIONARY FILE FOR A SEQUENCE SYMBOL REFERENCE.           13150000
*                                                                       13200000
SSREF    DSECT                                                          13250000
SREFRL   DS    XL2                      RECORD LENGTH     2 BYTES       13300000
SREFRT   DS    X'08'                    RECORD TYPE       1 BYTE        13350000
SREFDP   DS    XL3                      DICTIONARY PTR    3 BYTES       13400000
SREFSL   DS    XL1                      SYMBOL LENGTH     1 BYTE        13450000
SREFSS   EQU   *                        SEQUENCE SYMBOL 2-8 BYTES       13500000
*                                                                       13550000
* THIS DSECT MAPS THE LOGICAL RECORD READ FROM THE TEXT SEGMENT         13600000
*            DICTIONARY FILE FOR A GLOBAL DEFINITION.                   13650000
*                                                                       13700000
GBLDEFN  DSECT                                                          13750000
GDEFRL   DS    XL2                      RECORD LENGTH     2 BYTES       13800000
GDEFRT   DS    X'00'                    RECORD TYPE       1 BYTE        13850000
GDEFF    DS    X                        FLAGS             1 BYTE        13900000
GDEFSL   DS    X                        SYMBOL LENGTH     1 BYTE        13950000
GDEFVS   EQU   *                        VARIABLE SYMBOL 2-8 BYTES       14000000
         ORG   GBLDEFN                  ORIGIN ZERO                     14050000
GDEFTF   DS    X                        TEXT FLAG VALUE   1 BYTE        14100000
GDEFVP   DS    XL3                      VECTOR POINTER    3 BYTES       14150000
GDEFD    DS    XL2                      DIMENSION         2 BYTES       14200000
*                                                                       14250000
* THIS DSECT MAPS THE LOGICAL RECORD READ FROM THE TEXT SEGMENT         14300000
*            DICTIONARY FILE FOR AN ORDINARY SYMBOL REFERENCE.          14350000
*                                                                       14400000
OSREF    DSECT                                                          14450000
OREFRL   DS    XL2                      RECORD LENGTH     2 BYTES       14500000
OREFRT   DS    X'0C'                    RECORD TYPE       1 BYTE        14550000
OREFDP   DS    XL3                      DICTIONARY PTR    3 BYTES       14600000
OREFSL   DS    XL1                      SYMBOL LENGTH     1 BYTE        14650000
OREFOS   EQU   *                        ORDINARY SYMBOL 1-8 BYTES       14700000
*                                                                       14750000
* THIS DSECT MAPS THE END-OF-SEGMENT RECORD READ FROM THE TEXT          14800000
*            SEGMENT DICTIONARY FILE.                                   14850000
*                                                                       14900000
ENDSEG   DSECT                                                          14950000
ESEGRL   DS    XL2                      RECORD LENGTH     2 BYTES       15000000
ESEGRT   DS    X'10'                    RECORD TYPE       1 BYTE        15050000
*                                                                       15100000
* THIS DSECT MAPS THE END-OF-FILE RECORD READ FROM THE TEXT SEGMENT     15150000
*            DICTIONARY FILE AND THE ORDINARY SYMBOL DEFINITION FILE.   15200000
*                                                                       15250000
ENDFIL   DSECT                                                          15300000
EFILRL   DS    XL2                      RECORD LENGTH     2 BYTES       15350000
EFILRT   DS    X'FF'                    RECORD TYPE       1 BYTE        15400000
*                                                                       15450000
* THIS DSECT MAPS THE ORDINARY SYMBOL REFERENCE DICTIONARY ENTRY.       15500000
*                                                                       15550000
OSRDNTRY DSECT                                                          15600000
TATTRIB  DS    X                        TYPE ATTRIBUTE    1 BYTE        15650000
LATTRIB  DS    XL2                      LENGTH ATTRIBUTE  2 BYTES       15700000
SATTRIB  DS    XL2                      SCALE ATTRIBUTE   2 BYTES       15750000
ATTRIB   DSW   TDEFALT,                 TYPE ATTRIB IS DEFAULT VALUE   X15760000
               LDEFALT,                 LENGTH ATTRIB IS DEFAULT VALUE X15770000
               SDEFALT,                 SCALE ATTRIB IS DEFAULT VALUE  X15780000
               UDEFALT                  UNDEFINED SYMBOL ATTRIB REFED   15790000
*                                                                       15800000
* THIS DSECT MAPS THE GLOBAL DIRECTORY ENTRY.                           15850000
*                                                                       15900000
GDNTRY   DSECT                                                          15950000
GDCP     DS    XL3                      CHAIN POINTER     3 BYTES       16000000
GDFL     DSW   GTYP1,GTYP2,GPTYP,GSNS,GSLS,GDIM,GSTP1,GSTP2             16050000
GDSL     DS    X                        SYMBOL LENGTH     1 BYTE        16100000
GDSYM    EQU   *                        VARIABLE SYMBOL 2-8 BYTES       16150000
         ORG   GDNTRY                   ORIGIN ZERO                     16200000
GDTFV    DS    X                        TEXT FLAG VALUE   1 BYTE        16250000
GDDP     DS    XL3                      G.T. DICT. PTR    3 BYTES       16300000
GDDM     DS    XL2                      DIMENSION         2 BYTES       16350000
*                                                                       16400000
* THIS DSECT MAPS THE ORDINARY SYMBOL REFERENCE TABLE ENTRY.            16450000
*                                                                       16500000
OSRTNTRY DSECT                                                          16550000
OSRTCP   DS    XL3                      CHAIN POINTER     3 BYTES       16600000
OSRTDP   DS    XL3                      DICTIONARY PTR    3 BYTES       16650000
OSRTSL   DS    XL1                      SYMBOL LENGTH     1 BYTE        16700000
OSRTOS   EQU   *                        ORDINARY SYMBOL 1-8 BYTES       16750000
*                                                                       16800000
* THIS DSECT MAPS THE LOGICAL RECORD READ FROM THE ORDINARY SYMBOL      16850000
*            DEFINITION FILE.                                           16900000
*                                                                       16950000
         COPY  JTEXT                                                    17000000
         COPY JERRCD                                                    17050000
         COPY  JERMSGCD                                                 17100000
         EJECT                                                          17150000
SAVMDDPT EQU   JDPASS                   SAVE AREA, MDD ADDRESS          17190000
SAVMDDLN EQU   JDPASS+D8                SAVE AREA, MDD LENGTH           17230000
SAVMDDCN EQU   JDPASS+D12               SAVE AREA, MDD ENTRY CHAIN      17270000
SAVMDDCT EQU   JDPASS+D16               SAVE AREA, MDD ENTRY COUNT      17310000
SAVOPSCN EQU   JDPASS+D20               SAVE AREA, OPSYN ENTRY CHAIN    17350000
LNGTHREG EQU   R12                      SYMBOL LENGTH REGISTER          17390000
WORK2    EQU   R15                      SCRATCH REGISTER                17430000
WORK3    EQU   R10                      SCRATCH REGISTER                17470000
MDDPTR   EQU   R3                       PTR TO MDD ENTRY BEING PROCD    17510000
SKDCTPTR EQU   R4                       PTR TO START OF SKELETON DICT   17550000
BRTBLPTR EQU   R5                       PTR TO BRANCH TABLE IN USE      17590000
SSDTBASE EQU   R6                       PTR TO START OF SEQ SYM DEF TBL 17630000
GDBASE   EQU   R6                       PTR TO START OF GBL DEF DIRECT  17670000
SSDTPTR  EQU   R7                       PTR TO SEQ SYM DEF TBL ENTRY    17710000
RTNLNK   EQU   R9                       RETURN LINKAGE REGISTER         17750000
PTR      EQU   R10                      PTR TO START OF SYMBOL FOR HASH 17790000
RCDPTR   EQU   R11                      PTR REGISTER, INPUT RCD BASE    17830000
WORK1    EQU   R14                      SCRATCH REGISTER                17870000
PAIRE    EQU   R0                       EVEN REGISTER OF PAIR           17910000
PAIRO    EQU   R1                       ODD REGISTER OF PAIR            17950000
EO1      EQU   R0                       EVEN REGISTER OF PAIR           17990000
EO2      EQU   R1                       ODD REGISTER OF PAIR            18030000
HASHSS   EQU   R1                       HASH VALUE FOR SEQ SYMBOL       18070000
HASHGS   EQU   R1                       HASH VALUE FOR GBL VARIABLE     18110000
D36      EQU   36                       LENGTH OF INTERLUDE ERROR RCD   18120000
D44      EQU   44                       DISPLACEMENT                    18130000
D48      EQU   48                       DISPLACEMENT                    18140000
SAVMDVNP EQU   JDPASS                   SAVE AREA, MDV ADDRESS          18150000
SAVMDVLN EQU   JDPASS+D8                SAVE AREA, MDV LENGTH           18190000
SAVGDLNT EQU   JDPASS+D12               SAVE AREA, GLOBAL DICT ALLOC    18230000
SAVOSDNP EQU   JDPASS+D16               SAVE AREA, OSRD ADDRESS         18270000
SAVOSDLN EQU   JDPASS+D24               SAVE AREA, OSRD LENGTH          18310000
SAVOVFPT EQU   JDPASS+D28               SAVE AREA, END OF FILE 1 ADDR   18350000
SAVOPTNP EQU   JDPASS+D36               SAVE AREA, OPSYN TABLE ADDRESS  18390000
SAVOPTLN EQU   JDPASS+D44               SAVE AREA, OPSYN TABLE LENGTH   18430000
SAVERRNP EQU   JDPASS+D48               SAVE AREA, ERROR BLOCK ADDRESS  18470000
GDEL     EQU   19                       MAX LENGTH,GBL DIRECT ENTRY     18510000
OSRTBASE EQU   R6                       PTR TO START OF ORD SYMB REF TB 18550000
HASHOS   EQU   R1                       HASH VALUE FOR ORD SYMBOL       18590000
OSRDPTR  EQU   R4                       PTR TO ORD SYM REF TBL ENTRY    18630000
REFCNT   EQU   R5                       COUNT OR ORD SYM REF TBL ENTRYS 18670000
ENDPTR   EQU   R0                       PTR TO END OF OPERAND           18750000
PARENCT  EQU   R0                       PARENTHESIS LEVEL COUNT         18790000
INPTR    EQU   R7                       PTR TO OPERAND BEING SCANNED    18830000
RX       EQU   R1                       SCRATCH REGISTER                18870000
RY       EQU   R5                       SCRATCH REGISTER                18910000
WORK5    EQU   R12                      SCRATCH REGISTER                18950000
RZ       EQU   R12                      SCRATCH REGISTER                18990000
ATYPE    EQU   JA                       TYPE ATTRIBUTE, A-CON           19030000
BTYPE    EQU   JB                       TYPE ATTRIBUTE, B-CON           19070000
CTYPE    EQU   JC                       TYPE ATTRIBUTE, C-CON           19110000
DTYPE    EQU   JD                       TYPE ATTRIBUTE, D-CON           19150000
WORK4    EQU   R1                       SCRATCH REGISTER                19190000
ETYPE    EQU   JE                       TYPE ATTRIBUTE, E-CON           19230000
FTYPE    EQU   JF                       TYPE ATTRIBUTE, F-CON           19270000
GTYPE    EQU   JG                       TYPE ATTRIBUTE, G-CON           19310000
HTYPE    EQU   JH                       TYPE ATTRIBUTE, H-CON           19350000
KTYPE    EQU   JK                       TYPE ATTRIBUTE, K-CON           19390000
LTYPE    EQU   JL                       TYPE ATTRIBUTE, L-CON           19430000
PTYPE    EQU   JP                       TYPE ATTRIBUTE, P-CON           19470000
QTYPE    EQU   JQ                       TYPE ATTRIBUTE, Q-CON           19510000
RTYPE    EQU   JR                       TYPE ATTRIBUTE, R-CON           19550000
STYPE    EQU   JS                       TYPE ATTRIBUTE, S-CON           19590000
VTYPE    EQU   JV                       TYPE ATTRIBUTE, V-CON           19630000
XTYPE    EQU   JX                       TYPE ATTRIBUTE, X-CON           19670000
YTYPE    EQU   JY                       TYPE ATTRIBUTE, Y-CON           19710000
ZTYPE    EQU   JZ                       TYPE ATTRIBUTE, Z-CON           19750000
OPSTLNT  EQU   OPSTND-OPSTBL            OPSYN ENTRY LENGTH              19790000
MINRECSZ EQU   18                       MINIMUM I/O LENGTH              19830000
VALUE    EQU   R0                       SDT VALUE REGISTER              19870000
TYPE     EQU   R15                      SDT TYPE REGISTER               19910000
COUNT    EQU   R14                      SDT CHARACTER COUNT REGISTER    19950000
D384     EQU   384                      LENGTH OF GBL DIRECT HASH TABLE 20070000
D256     EQU   256                      MOVE LIMIT                      20110000
D192     EQU   192                      LENGTH OF SSDT HASH TABLE       20150000
D255     EQU   255                      MOVE LIMIT LESS ONE             20190000
         EJECT                                                          20750000
         JCSECT (X2A00)                                                 20800000
* VS1 RELEASE 3 CHANGES                                                 20810001
*C886000,890500,912500,927500,935500                            OX00408 20820001
*C593000                                                       @AX14177 20830006
*A599100-599160                                                @AX14177 20840006
*C214500                                                       @AZ26254 20845000
*A779100-779170                                                @AY19671 20847000
         JMODID                                                         20850000
*INTERLUDE INITIALIZATION ROUTINE - THIS ROUTINE PERFORMS ALL THE     * 20900000
*   ONE-TIME INITIALIZATION FUNCTIONS FOR THE PHASE. ITS FUNCTION     * 20950000
*   IS-  (1) TO GET AND ALLOCATE THE SPACE REQUIRED FOR THE VARIOUS   * 21000000
*            COMMON, TABLE, AND WORK AREAS USED BY THE PHASE          * 21050000
*        (2) TO INITIALIZE COMMON FOR THE PHASE                       * 21100000
*        (3) TO FETCH THE MACRO DEFINITION DIRECTORY                  * 21150000
*        (4) TO INITIALIZE THE PERMANENT DICTIONARIES WITHIN THE      * 21200000
*            WORK AREA.                                               * 21250000
*                                                                     * 21300000
INTRENTR JSAVE BASE=YES                                                 21350000
         JENTRY (X2A01=INTRENTR)                                        21400000
         L     R11,=F'1310720'          SET MAX SPACE TO 10M   @AZ26254 21450000
         JGETCORE MINDBL=1625,MAXDBL=(R11) GET FREE SPACE               21500000
         AR    R11,R10                  DEVELOP END-OF-SPACE PTR        21550000
         LA    WORK1,(((ENDCOM-INTRCOM+D7)/D8)*D8) COMPUTE COMMON LEN   21600000
         SR    R11,WORK1                DEVELOP COMMON ADDRESS          21650000
         LR    R2,R11                   SET UP AS COMMON PTR            21700000
         USING INTRCOM,R2                                               21750000
         XC    INTRCOM(ENDCOM-INTRCOM),INTRCOM INITIALIZE ALL COMMON    21800000
         ST    R11,COMSTRT              SAVE IN COMMON ITSELF           21850000
         S     R11,=F'190'              ALLOW FOR ERROR RECORD BUFFER   21900000
         ST    R11,ERRBLK               SAVE PTR TO STRT OF BUFFER      21950000
         XC    D0(L'JNOTEVAL,R11),D0(R11) SET FIRST CHAIN LINK TO 0     22000000
         LA    WORK1,D8(,R11)           DEVELOP PTR WITHIN ERROR BUFF   22050000
         ST    WORK1,ERBLKPTR           AND SAVE FOR ERLOGER            22100000
         ST    R11,MDDND                MAKE IT END-OF-MDD ADDR ALSO    22150000
         ST    R10,FREESTRT             SAVE START-OF-SPACE PTR         22200000
         ST    R10,GDSTRT               MAKE IT GBL DIRECTORY BASE      22250000
         MVI   D0(R10),BITFF-BITFF      INSERT ZERO IN HASH TABLE       22300000
         MVC   D1(D256,R10),D0(R10)     PROPAGATE FIRST 256 BYTES       22350000
         LA    R10,D256(,R10)           BUMP THE POINTER AND            22400000
         MVC   D1(D384-D256,R10),D0(R10) PROPAGATE THRU REST OF TABLE   22450000
         LA    R10,D384-D256(,R10)      BUMP THE POINTER PAST HASH TBL  22500000
         ST    R10,GDEND                SAVE PTR TO GBL ENTRY SPACE     22550000
         MVC   PIOPARMB,SAVMDDLN        PICK UP MDD LENGTH FROM COMMON  22600000
         S     R11,PIOPARMB             DEVELOP MDD ADDRESS             22650000
         ST    R11,MDDSTRT              SAVE MDD PTR IN COMMON          22700000
         ST    R11,PIOPARMA             SET IT UP ALSO FOR MDD READ     22750000
         MVC   JFWORD1,SAVMDDCT         PICK UP MDD ENTRY COUNT         22800000
         L     EO2,JFWORD1              GET IT FOR MDV LENGTH CALC      22850000
         MH    EO2,=Y(MDVEND-MDVNTRY)   MULTIPLY BY MDV ENTRY LENGTH    22900000
         ST    EO2,MDVLNTH              SAVE LENGTH OF MDV FOR WRITE    22950000
         SR    R11,EO2                  DEVELOP MDV ADDRESS             23000000
         ST    R11,MDVSTRT              SAVE MDV PTR IN COMMON          23050000
         BCTR  R11,D0                   GET END-OF-FREE-SPACE PTR       23100000
         ST    R11,FREEEND              AND SAVE IT IN COMMON           23150000
         JPOINT FILE=FILE3,ADDR=SAVMDDPT,NEXT=READ POINT TO MDD         23200000
         LH    R5,JMAXRL3               SET UP MAXIMUM RECORD THIS FILE 23250000
         LA    R6,FILE3                 SET UP FILE POINTER             23300000
         BAL   R7,BUFREAD               GO GET MDD FROM FILE 3          23350000
         JPOINT FILE=FILE3,NEXT=START        REWIND THE FILE            23400000
         MVC   HIBYTE0,SAVMDDCN         PICK UP CHAIN PTR FOR FIRST     23450000
         MVC   OPSCHAIN,SAVOPSCN        PRESERVE OPSYN PTR FOR LATER    23500000
         MVC   ERRHDR+D1(D5),=AL1(D36,JEPSOP,JNOCNT,JEOPCOD)           X23550000
               SET UP STANDARD STUFF IN ERROR HEADER                    23600000
         EJECT                                                          23650000
*DRIVER FOR CONCURRENT RESOLUTION - THIS ROUTINE ATTEMPTS TO BUILD    * 23700000
*   THE SKELETON DICTIONARY FOR A TEXT SEGMENT IN THE MINIMUM         * 23750000
*   NUMBER OF PASSES (2) OVER THE TEXT SEGMENT DICTIONARY FILE        * 23800000
*   FOR THAT TEXT SEGMENT. THIS MEANS THAT, WHILE BUILDING            * 23850000
*   SKELETON DICTIONARIES, THE ENTIRE SKELETON DICTIONARY FOR         * 23900000
*   THE TEXT SEGMENT IS IN CORE, ALL UNIQUE GLOBAL DEFINITIONS        * 23950000
*   FROM ALL TEXT SEGMENTS UP TO THAT POINT ARE IN THE GLOBAL         * 24000000
*   DIRECTORY IN CORE, ALL ORDINARY SYMBOL REFERENCES                 * 24050000
*   FROM ALL TEXT SEGMENTS UP TO THAT POINT ARE IN THE ORDINARY       * 24100000
*   SYMBOL REFERENCE TABLE IN CORE, AND ALL THE SEQUENCE SYMBOL       * 24150000
*   DEFINITIONS FOR THE TEXT SEGMENT ARE IN THE SEQUENCE SYMBOL       * 24200000
*   DEFINITION TABLE IN CORE.                                         * 24250000
*                                                                     * 24300000
INITTSD  L     MDDPTR,MDDND             PICK UP TABLE BASE              24350000
         S     MDDPTR,HIBYTE0           DISPLACE TO NEXT ENTRY IN CHAIN 24400000
         C     MDDPTR,MDDND             SEE IF END OF CHAIN REACHED     24450000
         BE    INITOSR                  BRANCH IF YES                   24500000
         USING MDDNTRY,MDDPTR                                           24550000
         GOIF  FLUSH,ON=ENDSEGBX        BRANCH IF BYPASS FLAG ON        24600000
         GOIF  TSEDIT,OFF=OERR          OVERLAP IN X1A-DUMMY UP MDV REC 24620000
         MVC   HIBYTE0+(L'HIBYTE0-L'MSEQSZ)(L'MSEQSZ),MSEQSZ           X24650000
               PICK UP LENGTH OF SEQUENCE SYMBOL REFERENCE DIRECTORY    24700000
         L     WORK1,HIBYTE0            ACCUM FOR SKEL DICT SIZE        24750000
         MVC   HIBYTE0+(L'HIBYTE0-L'MGBLSZ)(L'MGBLSZ),MGBLSZ           X24800000
               PICK UP LENGTH OF GLOBAL VECTOR                          24850000
         A     WORK1,HIBYTE0            ADD TO SEQ SYMB REF DIR SIZE    24900000
         LA    WORK1,SKHDREND-SKDCTHDR(,WORK1) ADD IN HEADER LENGTH     24950000
         ST    WORK1,LNGSK              PRESERVE SKELETON LENGTH        25000000
         L     WORK2,FREEEND            GET PTR TO HI END OF WORKAREA   25050000
         SR    WORK2,WORK1              ALLOW FOR SKELETON DICT         25100000
         C     WORK2,GDEND              CHECK FOR OVERLAP               25150000
         BL    OERR                     GO FLAG THE CONDITION           25200000
         ST    WORK2,SKDCSTRT           SAVE SKEL DICT START ADDR       25250000
         LR    SKDCTPTR,WORK2           GET PTR TO SKEL DICT HEADER     25300000
         USING SKDCTHDR,SKDCTPTR                                        25350000
         BCTR  WORK2,D0                 BUMP PAST SKEL DICTIONARY       25400000
         ST    WORK2,SSDTSTRT           SET UP PTR TO SEQ SYMB DEF TBL  25450000
         SH    WORK2,=H'192'            ALLOW FOR HASH TABLE            25500000
         CL    WORK2,GDEND              CHECK FOR OVERLAP               25550000
         BL    OERR                     GO FLAG THE CONDITION           25600000
         ST    WORK2,SSDTEND            SAVE AS END OF SSDT PTR         25650000
         MVI   D1(WORK2),BITFF-BITFF    INSERT ZERO FOR PROPAGATION     25700000
         MVC   D2(D192-D1,WORK2),D1(WORK2) CLEAR HSH TBL BY PROPAGATION 25750000
         XC    SKDCTHDR(SKHDREND-SKDCTHDR),SKDCTHDR CLEAR IT FIRST      25800000
         MVC   SKSRDPT(L'MGBLSZ+L'MSEQSZ+L'MLCLSZ),MGBLSZ              X25850000
               FILL IN GBL, SEQ, AND LCL DICT SIZES                     25900000
         LA    WORK2,SKHDREND-SKDCTHDR(,SKDCTPTR) GET PTR TO GBL VECTR  25950000
         ST    WORK2,GBLSK              SAVE IT FOR LATER USE           26000000
         A     WORK2,HIBYTE0            DEVELOP PTR TO SEQ SYMB VECTOR  26050000
         ST    WORK2,SEQSK              SAVE IT FOR LATER USE           26100000
         LA    BRTBLPTR,BRTBLA          SET UP TO USE BRANCH TABLE A    26150000
RESCAN   JPOINT FILE=FILE2,ADDR=MTSDNP,NEXT=GET  POINT TO START OF      26200000
GETNXT   JGETL FILE=FILE2               TXT SEG DICT FILE AND READ      26250000
         ST    R11,RECADDR              PRESERVE RECORD PTR ONCE        26300000
         SR    WORK1,WORK1              CLEAR A REGISTER                26350000
         IC    WORK1,D2(,R11)           GET RECORD TYPE                 26400000
         L     WORK1,D0(WORK1,BRTBLPTR) BRANCH ON IT VIA                26450000
         BR    WORK1                    BRANCH TABLE                    26500000
*                                                                       26550000
*BRANCH TABLE A - USED IN THE FIRST PASS OVER THE TEXT SEGMENT          26600000
*                 DICTIONARY FILE FOR A TEXT SEGMENT                    26650000
*                                                                       26700000
BRTBLA   DC    A(GBLDEF)                RECORD TYPE 00                  26750000
         DC    A(SEQDEF)                RECORD TYPE 04                  26800000
         DC    A(GETNXT)                RECORD TYPE 08                  26850000
         DC    A(ORDREF)                RECORD TYPE 0C                  26900000
         DC    A(ENDSEGA)               RECORD TYPE 10                  26950000
*                                                                       27000000
*BRANCH TABLE B - USED IN THE SECOND PASS OVER THE TEXT SEGMENT         27050000
*                 DICTIONARY FILE FOR A TEXT SEGMENT                    27100000
*                                                                       27150000
BRTBLB   DC    A(GETNXT)                RECORD TYPE 00                  27200000
         DC    A(GETNXT)                RECORD TYPE 04                  27250000
         DC    A(SEQREF)                RECORD TYPE 08                  27300000
         DC    A(GETNXT)                RECORD TYPE 0C                  27350000
         DC    A(ENDSEGB)               RECORD TYPE 10                  27400000
         EJECT                                                          27450000
*GBLDEF - THIS ROUTINE PROCESSES GLOBAL DEFINITIONS DURING THE        * 27500000
*   FIRST PASS OVER THE TEXT SEGMENT DICTIONARY FILE FOR A TEXT       * 27550000
*   SEGMENT. ITS FUNCTION IS TO MAKE AN ENTRY FOR THE GLOBAL          * 27600000
*   VARIABLE IN THE GLOBAL DIRECTORY, IF IT HAS NOT ALREADY BEEN      * 27650000
*   ENTERED, TO INCREASE THE GENERATION TIME GLOBAL DICTIONARY        * 27700000
*   ALLOCATION AS NECESSARY, AND TO BUILD THE GLOBAL VECTOR IN        * 27750000
*   THE SKELETON DICTIONARY FOR EACH TEXT SEGMENT.                    * 27800000
*                                                                     * 27850000
GBLDEF   EQU   *                                                        27900000
         USING GBLDEFN,RCDPTR                                           27950000
         LA    PTR,GDEFSL               GET PTR TO LEN, NAME FOR SUBR   28000000
         BAL   RTNLNK,GSHASHER          GO LOOK FOR GBL VARB IN DIRECT  28050000
         GOIF  FNDFLG,ON=SYNCHEK        BRANCH IF SYNONYM FOUND         28100000
         L     WORK1,GDEND              GET PTR TO NEW ENTRY            28150000
         USING GDNTRY,WORK1                                             28200000
         LA    WORK2,GDEL(,WORK1)       ASSUME LONGEST GBL DIR ENTRY    28250000
         C     WORK2,SSDTEND            CHECK FOR OVERLAP               28300000
         BNL   OERR                     IF OVERLAP, BRANCH              28350000
         MVC   GDFL(L'GDEFF+L'GDEFSL),GDEFF PUT FLAGS AND LENGTH IN     28360000
         MVI   GDSYM,JAMPER             SUPPLY AMPERSAND LITERALLY      28370000
         SR    WORK2,WORK2              CLEAR WORK REGISTER             28400000
         IC    WORK2,GDEFSL             GET LENGTH OF GBL VARB SYMBOL   28450000
         LA    WORK3,L'GDEFTF+L'GDEFVP+L'GDEFD(,WORK2)                 X28500000
                   GET MOVE LENGTH FOR GLOBAL DEFINITION                28550000
         EX    WORK3,GNTRYMV            MOVE GBL DEFN INTO GBL DIRECT   28600000
         LA    WORK3,D7(WORK1,WORK3)    ALLOW FOR ADDED ENTRY IN DIRCT  28650000
         ST    WORK3,GDEND              PUT PTR BACK UPDATED            28700000
         A     HASHGS,GDSTRT            GET PTR TO HASH TBL ENTRY       28750000
         MVC   GDCP,D0(HASHGS)          PUT CHAIN LINK IN NEW ENTRY     28800000
         LR    WORK3,WORK1              SET UP NEW ENTRY ADDR           28850000
         S     WORK3,GDSTRT             GET DISPL FOR HSH TBL ENTRY     28900000
         ST    WORK3,JFWORD1            SAVE TEMPORARILY AND PUT IN     28950000
         MVC   D0(L'GDCP,HASHGS),JFWORD1+(L'JFWORD1-L'GDCP) HASH TABLE  29000000
         LA    WORK1,L'GDCP+L'GDFL+L'GDSL+D2(WORK2,WORK1) BUMP POINTER  29050000
         MVC   GDDP,GDALLOC+(L'GDALLOC-L'GDDP) INSERT GT PTR IN ENTRY   29100000
         SR    PAIRO,PAIRO              INITIALIZE FOR ALLOCATION       29150000
         LA    PAIRO,D1(,PAIRO)         ALLOC 1 BYTE FOR B TYPE         29200000
         TM    GDEFF,GSTP1+GSTP2        CHECK IF B-TYPE VARIABLE        29250000
         BM    DIMENCK                  BRANCH IF B-TYPE                29300000
         LA    PAIRO,D3(,PAIRO)         ALLOC 4 BYTES FOR A TYPE        29350000
         BZ    DIMENCK                  BRANCH IF A-TYPE                29400000
         LA    PAIRO,D5(,PAIRO)         ALLOC 9 BYTES FOR C TYPE        29450000
DIMENCK  TM    GDEFF,GDIM               CHECK IF VARIABLE DIMENSIONED   29500000
         BZ    ALLOC                    BRANCH IF NOT                   29550000
         MVC   JHWORD1,GDDM             PICK UP VARIABLE DIMENSION      29600000
         MH    PAIRO,JHWORD1           MULTIPLY BY SINGLE ELEMENT SIZE  29650000
         TM    GDEFF,GSTP1+GSTP2        CHECK IF B-TYPE VARIABLE        29700000
         BNM   ALLOC                    BRANCH IF NOT                   29750000
         LA    PAIRO,D7(,PAIRO)         ROUND VALUE TO NEXT BYTE        29800000
         SR    PAIRE,PAIRE              CLEAR EVEN REG FOR DIVIDE       29850000
         D     PAIRE,=F'8'              GET NUMBER OF BYTES FO B TYPE   29900000
ALLOC    A     PAIRO,GDALLOC            ADD ALLOCATION FOR NEW ENTRY    29950000
         ST    PAIRO,GDALLOC              TO CURRENT GT GBL DICT ALLOC  30000000
         LR    GDBASE,WORK1             PREPARE FOR BASE CHANGE         30050000
         LA    RCDPTR,L'GDEFRL+L'GDEFRT+L'GDEFF+L'GDEFSL+D1(LNGTHREG,RCX30100000
               DPTR) BUMP PTR TO GBL DEFN RCD PAST VARB SYMB            30150000
         B     ENTRSKEL                 GO TO FILL GBL VCTR SLOT        30200000
GNTRYMV  MVC   GDSYM+D1(D0),GDEFVS      EXECUTED GBL DEFN MOVE          30250000
         DROP  WORK1                                                    30300000
         USING GDNTRY,GDBASE                                            30350000
SYNCHEK  CLC   GDEFF,GDFL               COMPARE THE FLAG BYTES          30400000
         BNE   IERR1                    IF UNALIKE, AN ERROR            30450000
         SR    WORK3,WORK3              CLEAR WORK REGISTER             30500000
         IC    WORK3,GDSL               PICK UP SYMBOL LENGTH           30550000
         LA    GDBASE,L'GDCP+L'GDFL+L'GDSL+D2(WORK3,GDBASE)            X30600000
               BUMP GBL DIR ENTRY PTR PAST VARB SYMBOL                  30650000
         LA    WORK2,GDEFSL             GET PTR TO VARB SYM, IN CASE    30680000
         LA    RCDPTR,L'GDEFRL+L'GDEFRT+L'GDEFF+L'GDEFSL+D1(LNGTHREG,RCX30710000
               DPTR) BUMP PTR TO GBL DEFN RCD PAST VARB SYMB            30740000
         CLC   GDEFD,GDDM               COMPARE DIMENSIONING            30800000
         BNE   IERR2                    IF UNALIKE, AN ERROR            30850000
ENTRSKEL L     SKDCTPTR,GBLSK           GET PTR TO GLOBAL VECTOR        30900000
         MVC   HIBYTE0+(L'HIBYTE0-L'GDEFVP)(L'GDEFVP),GDEFVP           X30950000
               GET DISPL TO GBL VECTR SLOT FROM GBL DEFN RECORD         31000000
         A     SKDCTPTR,HIBYTE0         DEVELOP PTR TO GBL VCTR SLOT    31050000
         MVC   D0(L'GDDP,SKDCTPTR),GDDP INSERT POINTER TO GBL DICT      31100000
         B     GETNXT                   RETURN                          31150000
IERR     EQU   *                                                        31200000
IERR1    EQU   *                                                        31250000
         LA    WORK2,GDEFSL             GET PTR TO VARB SYMB            31300000
         LA    RCDPTR,L'GDEFRL+L'GDEFRT+L'GDEFF+L'GDEFSL+D1(LNGTHREG,RCX31310000
               DPTR) BUMP PTR TO GBL DEFN RCD PAST VARB SYMB            31320000
         MVC   VECTSAVE+D1(L'GDEFVP),GDEFVP                            X31330000
               PRESERVE VECTOR POINTER ACROSS ERROR PROCESS             31340000
         BAL   RTNLNK,ERLOGER           CALL ERROR LOGGING RTN          31350000
         DC    AL1(SEV67,ERR67)         ERROR PARAMETERS                31400000
IERR1A   LA    GDBASE,=X'00FFFFFE'       SET UP DEFAULT FLAGS           31450000
         LA    RCDPTR,VECTSAVE          DUMMY UP PTR TO VECTOR POINTER  31470000
         B     ENTRSKEL                 GO BUILD VECOTR ENTRY W/DEFAULT 31500000
IERR2    EQU   *                                                        31550000
         MVC   VECTSAVE+D1(L'GDEFVP),GDEFVP                            X31630000
               PRESERVE VECTOR POINTER ACROSS ERROR PROCESS             31640000
         BAL   RTNLNK,ERLOGER           CALL ERROR LOGGING RTN          31650000
         DC    AL1(SEV81,ERR81)         ERROR PARAMETERS                31700000
         B     IERR1A                   GO TO DEFAULT PROCESS           31750000
         DROP  GDBASE                                                   31800000
         DROP  RCDPTR                                                   31850000
         EJECT                                                          31900000
*SEQDEF - THIS ROUTINE PROCESSES SEQUENCE SYMBOL DEFINITIONS          * 31950000
*   DURING THE FIRST PASS OVER THE TEXT SEGMENT DICTIONARY FILE       * 32000000
*   FOR A TEXT SEGMENT. ITS FUNCTION IS TO MAKE AN ENTRY FOR THE      * 32050000
*   SEQUENCE SYMBOL DEFINITION IN THE SEQUENCE SYMBOL DEFINITION      * 32100000
*   TABLE.                                                            * 32150000
*                                                                     * 32200000
SEQDEF   EQU   *                                                        32250000
         USING SSDEF,RCDPTR                                             32300000
         LA    PTR,SDEFSL               GET PTR TO LEN, NAME FOR SUBR   32350000
         BAL   RTNLNK,SSHASHER          GO SEE IF SEQ SYMB ALREADY IN   32400000
         GOIF  FNDFLG,ON=DUPERR         IF YES, DUPLICATE DEFINITION    32450000
         L     WORK1,SSDTEND            GET PTR TO SPACE FOR ENTRY      32500000
         LA    WORK2,L'SSDTCP+L'SSDTNP+L'SSDTSL(,LNGTHREG) GET LENGTH   32550000
         SR    WORK1,WORK2              BUMP PTR FOR NRXT ENTRY         32600000
         C     WORK1,GDEND              CHECK FOR TABLE OVERLAP         32650000
         BNH   OERR                     BRANCH IF IT OCCURS             32700000
         ST    WORK1,SSDTEND            UPDATE POINTER                  32750000
         LA    WORK1,D1(,WORK1)         SET UP PTR TO THIS ENTRY        32800000
         USING SSDTNTRY,WORK1                                           32850000
         SR    WORK2,WORK2              CLEAR REGISTER                  32900000
         IC    WORK2,SDEFSL             GET SEQUENCE SYMBOL LENGTH      32950000
         LA    WORK2,L'SDEFNP+D1(,WORK2) GET ENTRY LENGTH - CHAIN PTR   33000000
         EX    WORK2,SSDTMOVE           PUT N/P, LEN, SYMBOL IN ENTRY   33050000
         LR    SSDTPTR,SSDTBASE         PICK UP HASH TABLE PTR          33100000
         SH    SSDTPTR,=H'2'            ADJUST IT                       33150000
         SR    SSDTPTR,HASHSS           GET PTR TO PROPER HSH TBL SLOT  33200000
         MVC   SSDTCP,D0(SSDTPTR)       PUT CHAIN PTR IN ENTRY          33250000
         SR    SSDTBASE,WORK1           GET DISPL TO NEW ENTRY          33300000
         ST    SSDTBASE,JFWORD1         PUT IT IN PROPER HASH TABLE     33350000
         MVC   D0(L'SSDTCP,SSDTPTR),JFWORD1+(L'JFWORD1-L'SSDTCP) SLOT   33400000
         B     GETNXT                   RETURN FOR NEXT RECORD          33450000
DUPERR   EQU   *                                                        33500000
         LA    R0,JPERIOD               INSERT PERIOD FOR SEQ SYNB      33550000
         LA    WORK2,SDEFSL             GET PTR TO SEQ SYMB             33600000
         BAL   RTNLNK,ERLOGERZ          CALL ERROR LOGGING RTN          33650000
         DC    AL1(SEV74,ERR74)         ERROR PARAMETERS                33700000
         B     GETNXT                   RETURN                          33750000
SSDTMOVE MVC   SSDTNP(D0),SDEFNP        EXECUTED SSDT ENTRY MOVE        33800000
         DROP  RCDPTR                                                   33850000
         DROP  WORK1                                                    33900000
         EJECT                                                          33950000
*SEQREF - THIS ROUTINE PROCESSES SEQUENCE SYMBOL REFERENCES           * 34000000
*   DURING THE SECOND PASS OVER THE TEXT SEGMENT DICTIONARY FILE      * 34050000
*   FOR A TEXT SEGMENT. ITS FUNCTION IS TO BUILD THE SEQUENCE         * 34100000
*   SYMBOL REFERENCE DICTIONARY IN THE SKELETON DICTIONARY FOR        * 34150000
*   EACH TEXT SEGMENT USING THE SEQUENCE SYMBOL DEFINITIONS IN        * 34200000
*   THE SEQUENCE SYMBOL DEFINITION TABLE.                             * 34250000
*                                                                     * 34300000
SEQREF   EQU   *                                                        34350000
         USING SSREF,RCDPTR                                             34400000
         LA    PTR,SREFSL               GET PTR TO LEN, NAME FOR SUBR   34450000
         BAL   RTNLNK,SSHASHER          GO SEE IF SEQ SYM ALREADY IN    34500000
         GOIF  FNDFLG,OFF=UNDERR        IF NO, UNDEFINED SEQ SYMB       34550000
SEQREFA  EQU   *                                                        34600000
         USING SSDTNTRY,SSDTPTR                                         34650000
         L     SKDCTPTR,SEQSK           GET PTR TO SEQ SYMB VECTOR      34700000
         MVC   HIBYTE0+(L'HIBYTE0-L'SREFDP)(L'SREFDP),SREFDP           X34750000
               GET DISPL TO SSRD SLOT FROM SEQ SYMB REF RECORD          34800000
         A     SKDCTPTR,HIBYTE0         DEVELOP PTR TO SSRD SLOT        34850000
         MVC   D0(L'SSDTNP,SKDCTPTR),SSDTNP  INSERT N/P ADDR IN SLOT    34900000
         B     GETNXT                   RETURN FOR NEXT RECORD          34950000
UNDERR   EQU   *                                                        35000000
         LA    R0,JPERIOD               INSERT PERIOD FOR SEQ SYMB      35050000
         LA    WORK2,SREFSL             GET PTR TO SEQ SYMB             35100000
         BAL   RTNLNK,ERLOGERZ          CALL ERROR LOGGING RTN          35150000
         DC    AL1(SEV76,ERR76)         ERROR PARAMETERS                35200000
         L     R11,RECADDR              RESTORE RECORD PTR              35250000
         LA    SSDTPTR,=XL11'00'        GIVE DUMMY TO CLEAR SSRD ENTRY  35300000
         B     SEQREFA                  GO BACK TO PROCESS AS NORMAL    35350000
         DROP  SSDTPTR                                                  35400000
         DROP  RCDPTR                                                   35450000
         EJECT                                                          35500000
*ORDREF - THIS ROUTINE PROCESSES ORDINARY SYMBOL REFERENCES           * 35550000
*   DURING THE FIRST PASS OVER THE TEXT SEGMENT DICTIONARY FILE       * 35600000
*   FOR A TEXT SEGMENT. ITS FUNCTION IS TO MAKE AN ENTRY FOR THE      * 35650000
*   ORDINARY SYMBOL REFERENCE IN THE ORDINARY SYMBOL REFERENCE        * 35700000
*   TABLE.                                                            * 35750000
*                                                                     * 35800000
ORDREF   EQU   *                                                        35850000
         USING OSREF,RCDPTR                                             35900000
         LH    WORK1,OREFRL             PICK UP LENGTH OF OS REF        35950000
         BCTR  WORK1,D0                 MAKE IT MOVE LENGTH FOR MOVE    36000000
         L     WORK3,OSRTEND            GET PTR TO NEXT SLOT IN OSRT    36050000
         LA    WORK2,D1(WORK1,WORK3)    DEVELOP PTR PAST POTENTIAL NTRY 36100000
         C     WORK2,SSDTEND            CHECK FOR TABLE OVERLAP         36150000
         BNL   OERR                     BRANCH IF IT OCCURS             36200000
         USING OSRTNTRY,WORK3                                           36250000
         EX    WORK1,OSREFMV            MOVE OS REF RCD INTO OSRT       36300000
         ST    WORK2,OSRTEND            SAVE NEXT SLOT POINTER          36350000
         L     WORK1,OREFCNT            GET CURRENT OS REF COUNT        36400000
         LA    WORK1,D1(,WORK1)         ADD 1                           36450000
         ST    WORK1,OREFCNT            SAVE NEW COUNT                  36500000
         XC    JDWORD,JDWORD            CLEAR WORK AREA FOR ORD SYMB    36550000
         SR    LNGTHREG,LNGTHREG        CLEAR REGISTER FOR ORD SYM LEN  36600000
         IC    LNGTHREG,OREFSL          GET LENGTH OF ORDINARY SYMBOL   36650000
         EX    LNGTHREG,OSMOVE          MOVE SYMBOL INTO WORK AREA      36700000
         LA    WORK1,OSPRIME            GET PTR TO HASH PARAMETERS      36750000
         BAL   WORK2,HASH               LINK TO HASHING RTN             36800000
         A     HASHOS,OSRTSTRT          DEVELOP HASH TABLE POINTER      36850000
         MVC   OSRTCP,D0(HASHOS)        MOVE CHAIN PTR TO NEW ENTRY     36900000
         S     WORK3,OSRTSTRT           DEVELOP CHAIN PTR FOR HSH TBL   36950000
         ST    WORK3,JFWORD1            STOE TEMPORARILY AND            37000000
         MVC   D0(L'OSRTCP,HASHOS),JFWORD1+(L'JFWORD1-L'OSRTCP)        X37050000
               INSERT INTO HASH TABLE SLOT                              37100000
         B     GETNXT                   RETURN                          37150000
OSMOVE   MVC   JDWORD(D0),OREFOS        EXECUTED ORD SYMB MOVE          37200000
OSREFMV  MVC   OSRTCP(D0),OREFRL        EXECUTED OS REF RCD MOVE        37250000
         DROP  RCDPTR                                                   37300000
         DROP  WORK3                                                    37350000
         EJECT                                                          37400000
*ENDSEGA - THIS ROUTINE HANDLES THE END-OF-SEGMENT CONDITION          * 37450000
*   THAT INDICATES THE END OF THE FIRST PASS OVER THE TEXT            * 37500000
*   SEGMENT DICTIONARY FILE FOR A TEXT SEGMENT. ITS FUNCTION          * 37550000
*   IS TO SET UP THE BRANCH TABLE FOR THE SECOND PASS AND TO          * 37600000
*   INITIATE THE SECOND PASS.                                         * 37650000
*                                                                     * 37700000
ENDSEGA  EQU   *                                                        37750000
         LA    BRTBLPTR,BRTBLB          SET UP PTR TO BRANCH TABLE B    37800000
         B     RESCAN                   GO START SECOND PASS            37850000
         EJECT                                                          37900000
*ENDSEGB - THIS ROUTINE HANDLES THE END-OF-SEGMENT CONDITION          * 37950000
*   THAT INDICATES THE END OF THE SECOND PASS OVER THE TEXT           * 38000000
*   SEGMENT DICTIONARY FILE FOR A TEXT SEGMENT. ITS FUNCTION          * 38050000
*   IS TO OUTPUT THE SKELETON DICTIONARY FOR THE TEXT SEGMENT,        * 38100000
*   TO BUILD THE MACRO DEFINITION VECTOR ENTRY FOR THE TEXT           * 38150000
*   SEGMENT, AND TO INITIATE THE FIRST PASS OVER THE TEXT SEGMENT     * 38200000
*   DICTIONARY FILE FOR THE NEXT TEXT SEGMENT.                        * 38250000
*                                                                     * 38300000
ENDSEGB  EQU   *                                                        38350000
         MVC   PIOPARMA,SKDCSTRT        SET UP PTR TO START OF DICT     38400000
         MVC   PIOPARMB,LNGSK           SET UP LNGTH OF DICT           X38450000
               SET UP LENGTH OF SKELETON DICTIONARY FOR WRITE           38500000
         STM   R3,R5,SAVE3456           SAVE REGISTERS USED BY SUBRTN   38550000
         LH    R5,JMAXRL1               SET UP MAXIMUM RECORD THIS FILE 38600000
         LA    R6,FILE1                 SET UP FILE POINTER             38650000
         BAL   R7,BUFRITE               GO PUT SKEL DICT TO FILE 1      38700000
         LM    R3,R5,SAVE3456           RESTORE NECESSARY REGISTERS     38750000
         L     WORK2,MDVSTRT            GET PTR TO START OF MDV         38800000
         MVC   HIBYTE0+(L'HIBYTE0-L'MVECTR)(L'MVECTR),MVECTR           X38850000
               GET DISPL INTO MDV FROM MOD ENTRY                        38900000
         A     WORK2,HIBYTE0            DEVELOP PTR TO MDV SLOT         38950000
         USING MDVNTRY,WORK2                                            39000000
         MVC   MNPSD,JNOTEVAL           INSERT SKEL DICT N/P ADDR       39050000
         MVC   MNPTXT,MTXTNP            INSERT TEXT START N/P ADDR      39100000
         MVC   MSDL,LNGSK+(L'LNGSK-L'MSDL) INSERT SKEL DICT LENGTH      39150000
ENDSEGXT MVC   HIBYTE0+(L'HIBYTE0-L'MCHAIN)(L'MCHAIN),MCHAIN           X39200000
               PICK UP PTR TO NEXT ENTRY IN CHAIN                       39250000
         B     INITTSD                  RETURN TO BUILD NEXT SKEL DICT  39300000
ENDSEGBX EQU   *                                                        39350000
         L     WORK2,MDVSTRT            GET PTR TO START OF MDV         39400000
         MVC   HIBYTE0+(L'HIBYTE0-L'MVECTR)(L'MVECTR),MVECTR           X39450000
               GET DISPL INTO MDV FROM MDD ENTRY                        39500000
         A     WORK2,HIBYTE0            DEVELOP PTR TO MDV SLOT         39550000
         USING MDVNTRY,WORK2                                            39600000
         XC    MNPTXT(MDVEND-MDVNTRY),MNPTXT    SET MDV SLOT ALL ZEROES 39650000
         MVC   MSDL+(L'MSDL-D1)(D1),MTSDNP+(L'MTSDNP-D1) SET ERROR FLAG 39700000
         B     ENDSEGXT                 GO TO RETURN                    39750000
OERR     EQU   *                                                        39800000
         L     WORK2,MDVSTRT            GET PTR TO START OF MDV         39850000
         MVC   HIBYTE0+(L'HIBYTE0-L'MVECTR)(L'MVECTR),MVECTR           X39900000
               GET DISPL INTO MDV FROM MDD ENTRY                        39950000
         A     WORK2,HIBYTE0            DEVELOP PTR TO MDV SLOT         40000000
         USING MDVNTRY,WORK2                                            40050000
         XC    MNPTXT(MDVEND-MDVNTRY),MNPTXT SET MDV ENTRY TO ZEROES    40100000
         MVI   MSDL+D2,D20              INSERT ERROR FLAG               40150000
         B     ENDSEGXT                 GO TO RETURN                    40200000
         DROP  WORK2                                                    40250000
         EJECT                                                          40300000
*                                                                       40350000
* THIS SUBROUTINE SCANS OFF A DECIMAL SELF-DEFINING TERM AND            40400000
*        CONVERTS IT TO BINARY. IT IS CALLED BY THE FOLLOWING           40450000
*        ROUTINES- EQUSCAN                                              40500000
*                                                                       40550000
DECBIN   EQU   *                                                        40600000
         SR    RX,RX                    CLEAR ACCUMULATED LENGTH REG    40650000
         LR    RY,RX                    CLEAR NEXT DIGIT REGISTER       40700000
DB1      CLI   D0(INPTR),J9             LOOK FOR NUMERIC CHARACTER      40750000
         BHR   RTNLNK                   EXIT IF NOT FOUND               40800000
         IC    RY,D0(INPTR)             PICK UP DIGIT                   40850000
         MH    RX,=H'10'                MULTIPLY ACCUMULATED LENGTH     40900000
         AR    RX,RY                    AND ADD IN NEXT DIGIT           40950000
         LA    INPTR,D1(,INPTR)         BUMP COLUMN POINTER TO NEXT     41000000
         B     DB1                      GO BACK TO GET MORE DIGITS      41050000
*                                                                       41100000
* THIS SUBROUTINE GETS A NAME FROM THE OPERAND OF AN EXTRN OR           41150000
*        WXTRN STATEMENT. IT IS CALLED BY THE FOLLOWING ROUTINES-       41200000
*        ESCAN                                                          41250000
*                                                                       41300000
GETXNAM  EQU   *                                                        41350000
         GOIF  ENDSW,OFF=GX1            GO ON IF END NOT REACHED        41400000
GX0      SET   ENDSW,ON                 INDICATE NO MORE NAMES          41450000
         B     D0(,RTNLNK)              RETURN ON NO NAME OR ERROR      41500000
GX1      CLI   D0(INPTR),JAT            LOOK FOR ALPHANUMERIC CHAR      41550000
         BH    GX5                      BRANCH IF NOT                   41600000
         CLI   D0(INPTR),JA             LOOK FOR ALPHA ONLY             41650000
         BL    GX0                      BRANCH IF NOT                   41700000
GX1A     EQU   *                                                        41750000
         LR    RX,INPTR                 SAVE PTR TO START OF NAME       41800000
GX2      LA    INPTR,D1(,INPTR)         BUMP TO NEXT CHARACTER          41850000
         CLI   D0(INPTR),JAT            LOOK FOR ALPHANUMERIC CHAR      41900000
         BNH   GX2                      BRANCH IF FOUND                 41950000
GX3      CLI   D0(INPTR),JCOMMA         LOOK FOR COMMA DELIMITER        42000000
         BE    GX4                      BRANCH IF FOUND                 42050000
         CLI   D0(INPTR),JBLANK         LOOK FOR BLANK DELIMITER        42100000
         BNE   GX0                      BRANCH IF NOT FOUND             42150000
         SET   ENDSW,ON                 INDICATE LAST OPERAND PROCESSED 42200000
GX4      LR    WORK3,INPTR              GET PTR TO END OF NAME +1       42250000
         SR    WORK3,RX                 GET LENGTH OF NAME              42300000
         BCTR  WORK3,D0                 GET MOVE LENGTH OF NAME         42350000
         C     WORK3,=F'7'              CHECK FOR VALID LENGTH          42400000
         BH    GX0                      BRANCH IF TOO LONG              42450000
         LA    INPTR,D1(,INPTR)         BUMP TO NEXT NAME               42500000
         B     D4(,RTNLNK)              RETURN WITH GOOD NAME           42550000
GX5      CLI   D0(INPTR),JAMPER         TEST FOR POSSIBLE VARIABLE SYM  42600000
         BNE   GX0                      BRANCH IF NOT FOUND             42650000
         B     GX1A                     ACCEPT IF FOUND                 42700000
*                                                                       42750000
* THIS SUBROUTINE SCANS PAST EXPRESSIONS IN THE OPERANDS OF EQU,        42800000
*        DC, AND DS STATEMENTS. IT IS CALLED BY THE FOLLOWING           42850000
*        ROUTINES- EQUSCAN, DCSCAN                                      42900000
*                                                                       42950000
OPNDSCAN EQU   *                                                        43000000
         SR    PARENCT,PARENCT          INITIALIZE PAREN COUNT TO 0     43050000
         SET   QUOTESW,OFF              INITIALIZE QUOTE MODE INDICATOR 43100000
OPS1     CLI   D0(INPTR),JBLANK         LOOK FOR BLANK DELIMITER        43150000
         BNE   OPS2                     BRANCH IF NOT FOUND             43200000
         GOIF  QUOTESW,ON=OPS6          IGNORE IF BLANK INSIDE QUOTES   43250000
OPS1A    B     D0(,RTNLNK)              RETURN ON ANY ERROR             43300000
OPS2     CLI   D0(INPTR),JCOMMA         LOOK FOR COMMA DELIMITER        43350000
         BNE   OPS3                     BRANCH IF NOT FOUND             43400000
         GOIF  QUOTESW,ON=OPS6          IGNORE IF COMMA INSIDE QUOTES   43450000
         CLI   DELIMIT,JCOMMA           SEE IF LOOKING FOR COMMA        43500000
         BNE   OPS1A                    ERROR IF NOT                    43550000
         LTR   PARENCT,PARENCT          CHECK PAREN COUNT FOR ZERO      43600000
         BNZ   OPS1A                    ERROR IF NOT ZERO               43650000
OPS2A    LA    INPTR,D1(,INPTR)         BUMP PTR PAST DELIMITER         43700000
         B     D4(,RTNLNK)              RETURN ON VALID SYNTAX          43750000
OPS3     CLI   D0(INPTR),JLPARN         LOOK FOR LEFT PAREN CHARACTER   43800000
         BNE   OPS4                     BRANCH IF NOT FOUND             43850000
         GOIF  QUOTESW,ON=OPS6          IGNORE IF PAREN INSIDE QUOTES   43900000
         LA    PARENCT,D1(,PARENCT)     INCREMENT PAREN COUNT BY 1      43950000
         B     OPS6                     GO ON TO NEXT CHARACTER         44000000
OPS4     CLI   D0(INPTR),JQUOTE         LOOK FOR QUOTE CHARACTER        44050000
         BNE   OPS5                     BRANCH IF NOT FOUND             44100000
         BCTR  INPTR,D0                 BACK UP TO PREVIOUS CHARACTER   44150000
         CLI   D0(INPTR),JL             LOOK FOR L ATTRIB NOTATION      44200000
         BNE   OPS41                    BRANCH IF NOT FOUND             44250000
         GOIF  QUOTESW,ON=OPS42,ELSE=OPS421 IGNORE QUOTE IF L ATTRIB    44300000
OPS41    CLI   D0(INPTR),JB             LOOK FOR BINARY SDT             44350000
         BE    OPS42                    BRANCH IF FOUND                 44400000
         CLI   D0(INPTR),JC             LOOK FOR CHARACTER SDT          44450000
         BE    OPS42                    BRANCH IF FOUND                 44500000
         CLI   D0(INPTR),JX             LOOK FOR HEX SDT                44550000
         BE    OPS42                    BRANCH IF FOUND                 44600000
         CLI   D0(INPTR),JQUOTE         LOOK FOR PAIRED QUOTES          44650000
         BE    OPS42                    BRANCH IF FOUND                 44700000
         GOIF  QUOTESW,ON=OPS42,ELSE=OPS1A END ON SPURIOUS QUOTE        44750000
OPS42    SET   QUOTESW,FLIP             START OR END QUOTE MODE         44800000
OPS421   LA    INPTR,D1(,INPTR)         REPOSITION POINTER              44850000
         B     OPS6                     GO ON TO NEXT CHARACTER         44900000
OPS5     CLI   D0(INPTR),JRPARN         LOOK FOR RIGHT PAREN DELIMITER  44950000
         BNE   OPS6                     BRANCH IF NOT FOUND             45000000
         GOIF  QUOTESW,ON=OPS6          IGNORE IF PAREN INSIDE QUOTES   45050000
         CLI   DELIMIT,JRPARN           SEE IF LOOKING FOR RIGHT PAREN  45100000
         BNE   OPS5A                    GO ON IF NOT                    45150000
         LTR   PARENCT,PARENCT          CHECK PAREN COUNT FOR ZERO      45200000
         BZ    OPS2A                    BRANCH IF ZERO                  45250000
         B     OPS1A                    ERROR IF NOT                    45300000
OPS5A    BCTR  PARENCT,D0               DECREMENT PAREN COUNT BY 1      45350000
OPS6     LA    INPTR,D1(,INPTR)         BUMP PTR TO NEXT CHARACTER      45400000
         CL    INPTR,ENDCOL             CHECK FOR OPERAND EXCEEDED      45450000
         BH    OPS1A                    BRANCH IF EXCEEDED              45500000
         B     OPS1                     GO HANDLE NEXT CHARACTER        45550000
*                                                                       45600000
* THIS SUBROUTINE PERFORMS A BUFFERED WRITE TO ANY FILE.                45650000
*        IT IS CALLED FROM THE FOLLOWING ROUTINES                       45700000
*                   ENDSEGB                                             45750000
*                   INITOSR                                             45800000
*                   OSRDFINI                                            45850000
*                                                                       45900000
BUFRITE  EQU   *                                                        45950000
         MVI   FSWITCH,J0               CLEAR FIRST WRITE/NOTE SWITCH   46000000
         LM    R3,R4,PIOPARMB           PICK UP I/O PARAMETERS          46050000
BRT1     CLR   R3,R5                    SEE IF RECORD LESS THAN MAX     46100000
         BH    BRT4                     BRANCH IF NOT                   46150000
         CH    R3,=AL2(MINRECSZ)        SEE IF BLOCK OVER MINIMUM       46200000
         BNL   BRT11                    BRANCH IF MORE OR JUST ENUF     46250000
         LA    R3,MINRECSZ              IF NOT, USE MINIMUM SIZE        46300000
BRT11    STH   R3,PIOPARMC              SET UP RECORD LENGTH            46350000
         SR    R3,R3                    INDICATE LAST WRITE             46400000
BRT2     JWRITE FILE=(R6),PARM=PIOPARMA WRITE RECORD TO PROPER FILE     46450000
         JCHECK FILE=(R6)               CHECK THE WRITE                 46500000
         TS    FSWITCH                  TEST AND SET FIRST WRITE SW     46550000
         BNZ   BRT3                     BRANCH IF NOT FIRST WRITE       46600000
         JNOTE FILE=(R6)                NOTE FIRST BLOCK WRITTEN        46650000
BRT3     LTR   R3,R3                    SEE IF WRITE COMPLETE           46700000
         BZR   R7                       RETURN IF YES                   46750000
         AR    R4,R5                    DEVELOP PTR TO NEXT I/O AREA    46800000
         ST    R4,PIOPARMA              PUT PTR IN I/O CONTROL AREA     46850000
         B     BRT1                     GO SET UP NEW WRITE LENGTH      46900000
BRT4     STH   R5,PIOPARMC              SET UP MAXIMUM RECORD LENGTH    46950000
         SR    R3,R5                    ADJUST WRITE LENGTH             47000000
         B     BRT2                     GO WRITE NEXT RECORD            47050000
*                                                                       47100000
* THIS SUBROUTINE PERFORMS A BUFFERED READ FROM ANY FILE.               47150000
*        IT IS CALLED FROM THE FOLLOWING ROUTINES                       47200000
*                   INTRENTR                                            47250000
*                                                                       47300000
BUFREAD  EQU   *                                                        47350000
         LM    R3,R4,PIOPARMB           PICK UP I/O PARAMETERS          47400000
BRD1     CLR   R3,R5                    SEE IF RECORD LESS THAN MAX     47450000
         BH    BRD4                     BRANCH IF NOT                   47500000
         CH    R3,=AL2(MINRECSZ)        SEE IF BLOCK OVER MINIMUM       47550000
         BNL   BRD11                    BRANCH IF MORE OR JUST ENUF     47600000
         LA    R3,MINRECSZ              IF NOT, USE MINIMUM SIZE        47650000
BRD11    STH   R3,PIOPARMC              SET UP RECORD LENGTH            47700000
         SR    R3,R3                    INDICATE LAST READ              47750000
BRD2     JREAD FILE=(R6),PARM=PIOPARMA  READ RECORD FROM PROPER FILE    47800000
         JCHECK FILE=(R6)               CHECK THE READ                  47850000
         LTR   R3,R3                    SEE IF READ COMPLETE            47900000
         BZR   R7                       RETURN IF YES                   47950000
         AR    R4,R5                    DEVELOP PTR TO NEXT I/O AREA    48000000
         ST    R4,PIOPARMA              PUT PTR IN I/O CONTROL AREA     48050000
         B     BRD1                     GO SET UP NEW READ LENGTH       48100000
BRD4     STH   R5,PIOPARMC              SET UP MAXIMUM RECORD LENGTH    48150000
         SR    R3,R5                    ADJUST READ LENGTH              48200000
         B     BRD2                     GO READ NEXT RECORD             48250000
*                                                                       48300000
* THIS SUBROUTINE SEARCHES THE SEQUENCE SYMBOL DEFINITION TABLE         48350000
*        FOR A SPECIFIED SEQUENCE SYMBOL.                               48400000
*        IT IS CALLED FROM THE FOLLOWING ROUTINES                       48450000
*                   SEQDEF                                              48500000
*                   SEQREF                                              48550000
*                                                                       48600000
         USING SSDEF,RCDPTR                                             48650000
SSHASHER XC    JDWORD,JDWORD            CLEAR WORK AREA FOR SEQ SYMB    48700000
         SR    LNGTHREG,LNGTHREG        CLEAR REGISTER FOR SEQ SYM LEN  48750000
         IC    LNGTHREG,D0(,PTR)        GET LENGTH OF SEQ SYMB          48800000
         EX    LNGTHREG,SSDEFMOV        MOVE SYMBOL INTO WORK AREA      48850000
         LA    LNGTHREG,D1(,LNGTHREG)   GET SYMBOL TRUE LENGTH          48900000
         LA    WORK1,SSPRIME            SET UP PTR TO HASH PARAMETERS   48950000
         BAL   WORK2,HASH               LINK TO HASHING RTN             49000000
         L     SSDTBASE,SSDTSTRT        SET UP SSDT POINTER CONSTANT    49050000
         LR    SSDTPTR,SSDTBASE         SET UP SAME POINTER SCRATCH     49100000
         SH    SSDTPTR,=H'2'            ADJUST IT                       49150000
         SR    SSDTPTR,HASHSS           DEVELOP HASH TABLE POINTER      49200000
         USING SSDTNTRY,SSDTPTR                                         49250000
CHNLOOP  CLC   SSDTCP,=FL3'0'           CHECK FOR END OF CHAIN          49300000
         BZ    NTFND                    IF FOUND, BRANCH OUT            49350000
         MVC   HIBYTE0+(L'HIBYTE0-L'SSDTCP)(L'SSDTCP),SSDTCP           X49400000
               GET CHAIN POINTER FROM ENTRY                             49450000
         LR    SSDTPTR,SSDTBASE         RESTORE SSDT BASE ADDR          49500000
         S     SSDTPTR,HIBYTE0          GET CHAINED ENTRY ADDRESS       49550000
         EX    LNGTHREG,SSDEFCMP        COMPARE SEQUENCE SYMBOLS        49600000
         BNE   CHNLOOP                  BRANCH IF NOT IDENTICAL         49650000
         SET   FNDFLG,ON                INDICATE MATCH FOUND            49700000
         BR    RTNLNK                   RETURN                          49750000
NTFND    SET   FNDFLG,OFF               INDICATE NO MATCH FOUND         49800000
         BR    RTNLNK                   RETURN                          49850000
SSDEFMOV MVC   JDWORD(D0),D1(PTR)       EXECUTED SEQ SYMB MOVE          49900000
SSDEFCMP CLC   D0(D0,PTR),SSDTSL        EXECUTED SEQ SYMB COMPARE       49950000
         DROP  RCDPTR                                                   50000000
         DROP  SSDTPTR                                                  50050000
*                                                                       50100000
* THIS SUBROUTINE SEARCHES THE GLOBAL DIRECTORY FOR A SPECIFIED         50150000
*        VARIABLE SYMBOL.                                               50200000
*        IT IS CALLED FROM THE FOLLOWING ROUTINES                       50250000
*                   GBLDEF                                              50300000
*                                                                       50350000
         USING GBLDEFN,RCDPTR                                           50400000
GSHASHER XC    JDWORD,JDWORD            CLEAR WORK AREA FOR VARB NAME   50450000
         SR    LNGTHREG,LNGTHREG        CLEAR REGISTER FOR VAR SYM LEN  50500000
         IC    LNGTHREG,D0(,PTR)        GET LENGTH OF VARIABLE SYMBOL   50550000
         EX    LNGTHREG,GSMOVE          MOVE NAME INTO WORK AREA        50600000
         LA    WORK1,GSPRIME            SET UP PTR TO HASH PARAMETERS   50700000
         BAL   WORK2,HASH               LINK TO HASHING RTN             50750000
         L     GDBASE,GDSTRT            GET GBL DIRECTORY BASEADDR      50800000
         AR    GDBASE,HASHGS            DEVELOP HASH TABLE POINTER      50850000
         USING GDNTRY,GDBASE                                            50900000
CHAINON  CLC   GDCP,=FL3'0'             CHECK FOR END OF CHAIN          50950000
         BZ    NTFOUND                  IF FOUND, BRANCH OUT            51000000
         MVC   HIBYTE0+(L'HIBYTE0-L'GDCP)(L'GDCP),GDCP                 X51050000
               GET CHAIN POINTER FROM ENTRY                             51100000
         L     GDBASE,HIBYTE0           PICK UP CHAIN PTR               51150000
         A     GDBASE,GDSTRT            ADD BASE ADDR OF TABLE          51200000
         SR    WORK2,WORK2              CLEAR LENGTH REGISTER           51210000
         IC    WORK2,GDSL               PICK UP ENTRY LENGTH            51220000
         CR    WORK2,LNGTHREG           CHECK FOR EQUAL LENGTHS         51230000
         BNE   CHAINON                  IF NOT, DONT BOTHER MORE        51240000
         EX    LNGTHREG,GSCMP           COMPARE GLOBAL VARIABLES        51250000
         BNE   CHAINON                  BRANCH IF NOT IDENTICAL         51300000
         SET   FNDFLG,ON                INDICATE MATCH FOUND            51350000
         BR    RTNLNK                   RETURN                          51400000
NTFOUND  SET   FNDFLG,OFF               INDICATE NO MATCH FOUND         51450000
         BR    RTNLNK                   RETURN                          51500000
GSMOVE   MVC   JDWORD(D0),D1(PTR)       EXECUTED VARB SYMB MOVE         51550000
GSCMP    CLC   JDWORD(D0),GDSYM+D1      EXECUTED VARB SYMB COMPARE      51600000
         DROP  RCDPTR                                                   51650000
         DROP  GDBASE                                                   51700000
*                                                                       51750000
* THIS SUBROUTINE CONVERTS A SYMBOL PASSED IN JDWORD TO A HASH          51800000
*            TABLE INDEX USING THE PARAMETERS POINTED TO BY WORK1.      51850000
*   IT IS CALLED BY THE FOLLOWING ROUTINES -                          * 51900000
*              ORDREF,ORDSYMBR,SSHASHER,GSHASHER                      * 51950000
*                                                                       52000000
HASH     EQU   *                                                        52050000
         L     PAIRO,JDWORD             PICK UP FIRST HALF OF NAME      52100000
         AL    PAIRO,JDWORD+D4          FOLD SECOND HALF OVER FIRST     52150000
         SR    PAIRE,PAIRE              SET UP REGISTER PAIR            52200000
         D     PAIRE,D0(,WORK1)         DIVIDE BY HASH VALUE            52250000
         N     PAIRE,D4(,WORK1)         APPLY MASK FOR HASH TABLE RANGE 52300000
         LR    PAIRO,PAIRE              SHIFT VALUE FOR MULTIPLY        52350000
         M     PAIRE,=F'3'              DEVELOP TABLE INDEX             52400000
         BR    WORK2                    RETURN                          52450000
*                                                                     * 52500000
* THIS SUBROUTINE GENERATES THE ERROR RECORDS ORIGINATING IN THE      * 52550000
*              INTERLUDE PHASE. IT IS CALLED FROM THE FOLLOWING       * 52600000
*              ROUTINES - GBLDEF, SEQDEF, SEQREF, INITOSR,            * 52650000
*              ORDSYMBR, OPSYNBLD                                     * 52700000
*                                                                     * 52750000
ERLOGER  EQU   *                                                        52800000
         LA    R0,JAMPER                INSERT AMPERSAND FOR VARB SYMB  52850000
ERLOGERZ SR    WORK1,WORK1              CLEAR LENGTH REGISTER           52900000
         IC    WORK1,D0(,WORK2)         PICK UP SYMBOL LENGTH           52950000
         STC   R0,D0(,WORK2)            INSERT AMPERSAND OR PERIOD      53000000
         LA    WORK1,D1(,WORK1)         IN SYMBOL AND ADJUST FOR IT     53050000
         GOIF  OCTS,OFF=MACROMSG        GO TO HANDLE SEPARATE MSGS      53100000
         MVC   ERROTHR,=AL1(JO,JP,JE,JN,JBLANK,JBLANK,JBLANK,JBLANK,JC,X53150000
               JO,JD,JE,JBLANK,JBLANK,JBLANK,JBLANK)                   X53200000
               PUT IN EXTRA STUFF FOR OPEN CODE ERROR                   53250000
         B     ERLOGERA                 PROCEED TO NAME INSERTION       53300000
MACROMSG MVC   ERROTHR,=AL1(JM,JA,JC,JR,JO,JBLANK,JBLANK,JBLANK,JBLANK,X53350000
               JBLANK,JBLANK,JBLANK,JBLANK,JBLANK,JBLANK,JBLANK)       X53400000
               PUT IN EXTRA STUFF AND PAD FOR MACRO DEFINITION ERROR    53450000
         IC    WORK5,MFLAGS             PICK UP MDD ENTRY FLAGS         53500000
         N     WORK5,=F'7'              GET MACRO NAME LENGTH           53550000
         EX    WORK5,MACRNMOV           PUT MACRO NAME IN MESSAGE       53600000
ERLOGERA EQU   *                                                        53650000
         MVC   ERRNAME,=8AL1(JBLANK)    FILL SYMBOL SLOT WITH PAD       53700000
         EX    WORK1,NAMEMVE            PUT ERROR SYMBOL IN BUFFER      53750000
ERLOGERB CLC   JMSGL,D0(RTNLNK)         SEE IF ERROR SHOULD BE LOGGED   53800000
         BH    D2(,RTNLNK)              RETURN DIRECTLY IF NOT          53850000
         CLC   D0(D1,RTNLNK),JSEVER     IS THIS HIGHER                  53900000
         BNH   ERLOGERD                 BRANCH IF NOT                   53910000
         MVC   JSEVER(D1),D0(RTNLNK)    ENTER HIGH                      53920000
ERLOGERD MVC   ERRHDR+D9(D2),D0(RTNLNK) PUT IN ERROR CODE               53930000
         L     WORK1,ERBLKPTR           GET PTR TO NEXT RCD SLOT        53950000
         LA    WORK2,D36(,WORK1)        ADJUST PTR FOR NEW ERROR        54000000
         C     WORK2,COMSTRT            CHECK FOR OVERLAP OF BUFFER     54050000
         BL    ERLOGERC                 BRANCH IF NO OVERLAP            54100000
         MVC   D0(D2,WORK1),=H'0'       PUT END OF BUFFER FLAG IN       54150000
         MVC   PIOPARMA,ERRBLK          SET UP WRITE PARAMETER- ADDRESS 54200000
         MVC   PIOPARMB,=F'190'         SET UP WRITE PARAMETER- LENGTH  54250000
         ST    RTNLNK,ERRLNKSV          PRESERVE RETURN ADDRESS         54300000
         STM   R3,R7,SAVE3456           SAVE CRUCIAL REGISTERS          54350000
         LH    R5,JMAXRL1               SET UP MAXIMUM RECORD LENGTH    54400000
         LA    R6,FILE1                 SET UP FILE POINTER             54450000
         BAL   R7,BUFRITE               LINK TO BUFFERED WRITE RTN      54500000
         LM    R3,R7,SAVE3456           RESTORE REGISTERS               54550000
         L     WORK1,ERRBLK             GET PTR TO ERROR BUFFER         54600000
         MVC   D0(L'JNOTEVAL,WORK1),JNOTEVAL SAVE N/P FOR LINK TO LAST  54650000
         LA    WORK1,D8(,WORK1)         GET OFFSET IN NEW ERROR BUFFER  54700000
         L     RTNLNK,ERRLNKSV          RESTORE RETURN REGISTER         54750000
ERLOGERC MVC   D0(D36,WORK1),ERRHDR     PUT ERROR MSG BUILT INTO BUF    54800000
         LA    WORK1,D36(,WORK1)        ADJUST BUFFER PTR FOR NEW MSG   54850000
         ST    WORK1,ERBLKPTR           SAVE NEW ERROR SLOT PTR         54900000
         B     D2(,RTNLNK)              RETURN TO CALLING RTN           54950000
NAMEMVE  MVC   ERRNAME(D0),D0(WORK2)    EXECUTED ERROR SYMBOL MOVE      55000000
MACRNMOV MVC   ERROTHR+D8(D0),MSYMBL    EXECUTED MACRO NAME MOVE        55050000
*                                                                       55100000
* THIS SUBROUTINE CONVERTS ANY SELF-DEFINING TERM TO A BINARY VALUE.    55150000
*                                                                       55200000
SDTCONV  SR    COUNT,COUNT              CLEAR REG FOR CHAR COUNT        55260000
         LR    RX,COUNT                 CLEAR REG FOR CHAR VALUE        55320000
         STC   TYPE,SHIFTAMT            SAVE SDT TYPE INDICATOR         55400000
SDT01    LA    RY,SDTAB1-D1(TYPE)       GET TTR TO SDT HI CHARACTER     55450000
         CLC   D0(D1,INPTR),D0(RY)      CHECK FOR NEXT CHAR IN RANGE    55500000
         BH    SDT08                    BRANCH IF NOT                   55550000
         IC    RX,D0(,INPTR)            PICK UP NEXT VALID CHAR         55600000
         LR    RY,VALUE                 PRESERVE CURRENT ACCUM VALUE    55650000
         CLI   SHIFTAMT,D8              CHECK FOR CHAR (C) TYPE SDT     55700000
         BNE   SDT04                    BRANCH IF NOT C TYPE            55750000
         CLI   D0(INPTR),JQUOTE         SEE IF CHARACTER A QUOTE        55800000
         BNE   SDT04                    PROCEED IF NOT                  55850000
         CLI   D1(INPTR),JQUOTE         LOOK AHEAD FOR PAIRED QUOTE     55900000
         BNE   SDT08A                   GO TO CHECK LENGTH AND EXIT     55950000
SDT03    LA    INPTR,D1(,INPTR)         BUMP PAST PARING QUOTE          56000000
SDT04    SLL   VALUE,D0(TYPE)           SHIFT ACCUM VALUE 1 PLACE       56050000
         CLI   SHIFTAMT,D3              CHECK FOR DECIMAL SDT           56100000
         BNE   SDT05                    BRANCH IF NOT DECIMAL           56150000
         ALR   VALUE,RY                 DO ADDITIONAL ADJUSTMENT        56200000
         ALR   VALUE,RY                 NECESSARY FOR DECIMAL SDT       56250000
SDT05    ALR   VALUE,RX                 ADD IN NEXT CHARACTER VALUE     56300000
         LA    COUNT,D1(,COUNT)         INCREMENT CHARACTER COUNT       56350000
         LA    INPTR,D1(,INPTR)         BUMP INPUT PTR TO NEXT CHAR     56400000
         CL    INPTR,ENDCOL             SEE IF OPERAND EXCEEDED         56450000
         BNH   SDT01                    GO ON IF STILL OK               56500000
SDT06    SR    COUNT,COUNT              SET COUNT TO NONE               56550000
SDT07    BR    RTNLNK                   RETURN TO CALLING RTN           56600000
SDT08    CLI   SHIFTAMT,D3              CHECK FOR DECIMAL SDT           56650000
         BE    SDT09                    GO TO CHECK LENGTH AND EXIT     56700000
         CLI   D0(INPTR),JQUOTE         LOOK FOR ENDING QUOTE           56750000
         BNE   SDT06                    TREAT AS ERROR IF NONE          56800000
SDT08A   LA    INPTR,D1(,INPTR)         BUMP PAST ENDING QUOTE          56850000
SDT09    IC    RX,SDTAB2-D1(TYPE)       PICK UP LENGTH LIMIT            56900000
         CR    COUNT,RX                 SEE IF SDT LENGTH IN RANGE      56950000
         BH    SDT06                    TREAT AS ERROR IF NOT           57000000
         CLI   SHIFTAMT,D8              CHECK FOR CHARACTER SDT         57010000
         BNER  RTNLNK                   BRANCH OUT IF NOT               57020000
         GOIF  TRANSW,OFF=(RTNLNK)      EXIT IF NO TRANSLATION          57030000
         ST    VALUE,JFWORD1            SET UP VALUE FOR TRANSLATE      57040000
         TR    JFWORD1,JTRTABLE         TRANSLATE IT                    57050000
         L     VALUE,JFWORD1            PICK IT UP FOR CALLER           57060000
         BR    RTNLNK                   RETURN WITH TRANSLATED VALUE    57070000
SDTAB1   DC    X'0100090F000000FF'      SELF-DEFINING TERM              57110000
SDTAB2   DC    X'20000A0800000004'      CONVERSION TABLES               57150000
         EJECT                                                          57200000
SSPRIME  DC    F'71'                    PRIME FOR HASHING SEQ SYMBOLS   57250000
SSHSHMSK DC    XL4'3F'                  MASK FOR HASHING SEQ SYMBOLS    57300000
GSPRIME  DC    F'201'                   PRIME FOR HASHING GBL VARIABLES 57350000
OSPRIME  EQU   GSPRIME                  PRIME FOR HASHING ORD SYMBOLS   57400000
GSHSHMSK DC    XL4'7F'                  MASK FOR HASHING GBL VARIABLES  57450000
OSHSHMSK EQU   GSHSHMSK                 MASK FOR HASHING ORD SYMBOLS    57500000
         EJECT                                                          57550000
*INITOSR - THIS ROUTINE OUTPUTS THE MACRO DEFINITION VECTOR AND       * 57700000
*   INITIALIZES FOR THE ORDINARY SYMBOL RESOLUTION.                   * 57750000
*                                                                     * 57800000
         DS    0H                                                       57850000
INITOSR  EQU   *                                                        57900000
         L     R3,=A(ORDSYMBR)          SET UP BASE FOR SECOND HALF     57950000
         USING ORDSYMBR,R3                                              58000000
         JPOINT FILE=FILE2,NEXT=START   REWIND BEFORE PUTTING MDV       58050000
         MVC   PIOPARMB,MDVLNTH         SET UP MDV LENGTH               58100000
         MVC   PIOPARMA,MDVSTRT         SET UP MDV ADDRESS              58150000
         ST    R3,SAVE3456              SAVE CRUCIAL REGISTER           58200000
         LH    R5,JMAXRL2               SET UP MAXIMUM RECORD THIS FILE 58250000
         LA    R6,FILE2                 SET UP FILE POINTER             58300000
         BAL   R7,BUFRITE               GO PUT MDV TO FILE2             58350000
         L     R3,SAVE3456              RESTORE CRUCIAL REGISTER        58400000
         MVC   SAVMDVNP(L'JNOTEVAL),JNOTEVAL SAVE N/P ADDR FOR GENER    58450000
         MVC   SAVMDVLN(L'MDVLNTH),MDVLNTH   SAVE LENGTH FOR GENERATOR  58500000
         MVC   SAVGDLNT(L'GDALLOC),GDALLOC   SAVE GLOBAL DICT SIZE      58550000
         L     REFCNT,OREFCNT           GET NUMBER OF REFERENCES        58600000
         LTR   REFCNT,REFCNT            TEST FOR ZERO                   58650000
         BNZ   OSRDALOC                 IF NOT ZERO, ENTER RESOLUTION   58700000
OSRDXT   XC    SAVOSDLN(D4),SAVOSDLN    INDICATE NO OSRD TO X3N         58750000
         B     OPSYNBLD                 AND SKIP TO OPSYN PROCESSING    58800000
OSRDALOC MH    REFCNT,=H'6'             GET SIZE OF OSRD                58850000
         ST    REFCNT,JFWORD1           SAVE TEMPORARILY AND PUT OSRD   58900000
         MVC   SAVOSDLN(L'JFWORD1),JFWORD1 LENGTH IN COMMON             58950000
         L     WORK2,OSRDSTRT           GET PTR TO DICT AREA            59000000
         LA    WORK3,D0(REFCNT,WORK2)   GET PTR PAST OSRD               59050000
         C     WORK3,MDDSTRT            CHECK FOR TABLE OVERLAP         59100000
         BNH   OSRDGO                   BRANCH IF NOT THE CASE          59150000
         BAL   RTNLNK,ERLOGERB          CALL ERROR LOGGING RTN          59200000
         DC    AL1(SEV64,ERR64)         ERROR PARAMETERS                59250000
         B     WTOMSG                   GO THRU BYPASS OF OSRD @AX14177 59300006
OSRDGO   EQU   *                                                        59350000
CLERLP1  CH    REFCNT,=H'256'           SEE IF ONE MOVE WILL CLEAR IT   59400000
         BH    CLERLP2                  BRANCH IF NOT                   59450000
         SH    REFCNT,=H'2'             ADJUST LENGTH FOR EXECUTED MOVE 59500000
         MVI   D0(WORK2),BITFF          INSERT F'S TO PROPAGATE         59550000
         EX    REFCNT,OSRDCLER          PROPAGATE THRU REST OF DICT     59600000
         B     ORDSYMBR                 GO ON TO RESOLUTION             59650000
CLERLP2  MVI   D0(WORK2),BITFF          INSERT F'S TO PROPAGATE         59700000
         MVC   D1(D255,WORK2),D0(WORK2) PROPAGATE THRU 256 BYTES        59750000
         SH    REFCNT,=H'256'           ADJUST REMAINING DICT LENGTH    59800000
         LA    WORK2,D256(,WORK2)       ADJUST PTR ALSO                 59850000
         B     CLERLP1                  GO BACK THRU TO CLEAR REST      59900000
WTOMSG   WTO   MF=(E,MSG064)                                   @AX14177 59910006
         B     OSRDXT                                          @AX14177 59912006
MSG064   WTO   'IFO064 INTERLUDE DICTIONARY SPACE EXHAUSTED',  @AX14177*59914006
               ROUTCDE=11,MF=L                                 @AX14177 59916006
         EJECT                                                          59920000
         JPATCH X2A00,A20               PATCH AREA                      59940000
         EJECT                                                          59960000
         JCSECT (X2A02)                                                 59980000
ORDSYMBR EQU   *                                                        60060000
         JGETL FILE=FILE3               OTHERWISE, READ NEXT DEF RECD   60150000
         USING ENDFIL,RCDPTR                                            60200000
         CLI   EFILRT,BITFF             CHECK FOR END-OF-FILE           60250000
         BE    OSRDFINI                 IF SO, FINISH UP                60300000
         USING JTEXT,RCDPTR                                             60350000
         GOIF  JPSOP,OFF=GETNAME        BRANCH IF NOT A PSEUDO-OP       60400000
         CLI   JTIOP1,JTEXTRN           SEE IF PSEUDO-OP IS EXTRN       60450000
         BE    ESCAN                    BRANCH IF IT IS, TO GET NAME    60500000
         CLI   JTIOP1,JTWXTRN           SEE IF PSEUDO-OP IS WXTRN       60550000
         BE    ESCAN                    BRANCH IF IT IS, TO GET NAME    60600000
GETNAME  LR    WORK1,RCDPTR             GET START OF TEXT ADDR          60650000
         AH    WORK1,JTNMP              GET START OF NAME FIELD ADDR    60700000
         SR    WORK3,WORK3              CLEAR REGISTER FOR LENGTH       60750000
         IC    WORK3,D1(,WORK1)         PICK UP NAME TRUE LENGTH        60800000
         BCTR  WORK3,D0                 MAKE IT MOVE LENGTH             60850000
         STH   WORK3,JHWORD2            SAVE LENGTH OF NAME             60870000
         XC    JDWORD,JDWORD            CLEAR NAME WORK AREA            60900000
         EX    WORK3,NAMEMV             MOVE NAME FOR HASHING           60950000
HASHNAME LA    WORK1,OSPRIME            GET PTR TO HASHING PARAMETERS   61000000
         BAL   WORK2,HASH               LINK TO SYMBOL HASHING RTN      61050000
         L     OSRTBASE,OSRTSTRT        GET OSRT BASE ADDRESS           61100000
         AR    OSRTBASE,HASHOS          DEVELOP HASH TABLE POINTER      61150000
         USING OSRTNTRY,OSRTBASE                                        61200000
OSLUKUP  CLC   OSRTCP,=FL3'0'           CHECK FOR END OF CHAIN          61250000
         BZ    NGNAME                   IF FOUND, NO MATCH              61300000
         MVC   HIBYTE0+(L'HIBYTE0-L'OSRTCP)(L'OSRTCP),OSRTCP           X61350000
               GET CHAIN POINTER FROM ENTRY                             61400000
         L     OSRTBASE,HIBYTE0         PICK UP CHAIN POINTER           61450000
         A     OSRTBASE,OSRTSTRT        DEVELOP PTR TO NEXT ENTRY       61500000
         SR    WORK1,WORK1              CLEAR REGISTER FOR LENGTH       61550000
         IC    WORK1,OSRTSL             PICK UP ENTRY SYMBOL LENGTH     61600000
         CLR   WORK1,WORK3              COMPARE MOVE LENGTHS            61650000
         BNE   OSLUKUP                  NO MATCH IF UNALIKE             61700000
         EX    WORK1,NAMECM             COMPARE NAMES                   61750000
         BNE   OSLUKUP                  SEARCH ON IF UNALIKE            61800000
         L     OSRDPTR,OSRDSTRT         PICK UP BASE ADDR OF OSRD       61850000
         MVC   HIBYTE0+(L'HIBYTE0-L'OSRTDP)(L'OSRTDP),OSRTDP           X61900000
               GET DICTIONARY POINTER                                   61950000
         A     OSRDPTR,HIBYTE0          DEVELOP PTR TO OSRD ENTRY       62000000
         USING OSRDNTRY,OSRDPTR                                         62050000
         CLC   TATTRIB(L'TATTRIB+L'LATTRIB+L'SATTRIB),=5X'FF'          X62100000
               SEE THAT ATTRIBUTES HAVE NOT ALREADY BEEN ASSIGNED       62150000
         BE    BRONTYP                  BRANCH IF NOT YET SET           62200000
         CLI   TATTRIB,JM               WAS OLD TYPE ATTRIBUTE M        62207000
         BNE   OLDNOTM                  BR IF ANYTHING ELSE             62214000
         GOIF  JTCALL,EQ=ORDSYMBR       ALLOW DUPLICATE NAME ON MI      62221000
CHNGU    MVI   TATTRIB,JU               DUPLICATE NAMES-- MAKE ATTRB U  62228000
         B     ORDSYMBR                 BACK TO CONTINUE                62235000
OLDNOTM  GOIF  JTCALL,EQ=CHNGU          MAKE ATTRB U IF THIS IS MI      62242000
CHKCST   GOIF  JTCSECT,LO=ERRORA        ERROR IF DUPLICATE NAME NOT ON  62250000
         GOIF  JTCOM,HI=ERRORA,ELSE=NGNAME CSECT, DSECT, OR COM STMT    62300000
BRONTYP  EQU   *                                                        62350000
         MVI   ATTRIB,J0                CLEAR ATTRIBUTE DEFAULT FLAGS   62370000
         GOIF  JSUBOPCD,ON=TYPEU1       HANDLE SUBSTITUTED OP CODE      62400000
         GOIF  JPSOP,OFF=TYPEI1         BRANCH IF MACHINE INSTRUCTION   62450000
         GOIF  JTDC,EQ=DCSCAN           BRANCH IF DC STATEMENT          62500000
         GOIF  JTEQU,EQ=EQUSCAN         BRANCH IF EQU STATEMENT         62550000
         GOIF  JTDS,EQ=DSSCAN           BRANCH IF DS STATEMENT          62600000
         GOIF  JTCALL,EQ=TYPEM          BRANCH IF MACRO INSTRUCTION     62650000
         GOIF  JTORG,EQ=TYPEU1          BRANCH IF ORG STATEMENT         62700000
         GOIF  JTEXTRN,EQ=TYPET         BRANCH IF EXTRN STATEMENT       62750000
         GOIF  JTWXTRN,EQ=TYPE$         BRANCH IF WXTRN STATEMENT       62800000
         GOIF  JTSTART,EQ=TYPEJ         BRANCH IF START STATEMENT       62850000
         GOIF  JTLTORG,EQ=TYPEU1        BRANCH IF LTORG STATEMENT       62900000
         GOIF  JTDSECT,EQ=TYPEJ         BRANCH IF DSECT STATEMENT       62950000
         GOIF  JTCSECT,EQ=TYPEJ         BRANCH IF CSECT STATEMENT       63000000
         GOIF  JTCNOP,EQ=TYPEI2         BRANCH IF CNOP STATEMENT        63050000
         GOIF  JTCCW,EQ=TYPEW           BRANCH IF CCW STATEMENT         63100000
         GOIF  JTCOM,EQ=TYPEJ           BRANCH IF COM STATEMENT         63150000
         GOIF  JTCXD,EQ=TYPEU2          BRANCH IF CXD STATEMENT         63200000
         GOIF  JTDXD,EQ=TYPEJ           BRANCH IF DXD STATEMENT         63250000
         B     TYPEU1                   OTHERWISE ASSIGN DEFAULT ATTRS  63350000
ERRORA   EQU   *                                                        63600000
         MVI   TATTRIB,JU               DUPLICATE NAMES-- MAKE ATTRB U  63800000
NGNAME   EQU   *                                                        63850000
         GOIF  JTEXTRN,EQ=ESCANA        GO GET NEXT EXTRN/WXTRN NAME    63900000
         GOIF  JTWXTRN,EQ=ESCANA,ELSE=ORDSYMBR OR NEXT STATEMENT        63950000
CHASER     EQU   *                                                      64050000
ENDCHK   NC    OSRTCP,OSRTCP            SEE IF END OF CHAIN REACHED     64150000
         BZ    NGNAME                   BRANCH IF YES                   64200000
         MVC   HIBYTE0+(L'HIBYTE0-L'OSRTCP)(L'OSRTCP),OSRTCP           X64250000
               GET CHAIN PTR FROM ENTRY                                 64300000
         L     OSRTBASE,HIBYTE0         PICK UP CHAIN POINTER           64350000
         A     OSRTBASE,OSRTSTRT        DEVELOP PTR TO NEXT ENTRY       64400000
         SR    WORK1,WORK1              CLEAR REGISTER FOR LENGTH       64450000
         IC    WORK1,OSRTSL             PICK UP ENTRY SYMBOL LENGTH     64500000
         CLR   WORK1,WORK3              COMPARE MOVE LENGTHS            64550000
         BNE   ENDCHK                   BRANCH IF UNALIKE               64600000
         EX    WORK1,NAMECM             COMPARE NAMES                   64650000
         BNE   ENDCHK                   BRANCH IF UNALIKE               64700000
         L     PAIRO,OSRDSTRT           PICK UP,OSRD BASE ADDRESS       64750000
         MVC   HIBYTE0+(L'HIBYTE0-L'OSRTDP)(L'OSRTDP),OSRTDP           X64800000
                   GET PTR TO OSRD ENTRY FOR DUPLICATE                  64850000
         A     PAIRO,HIBYTE0            DEVELOP DICTIONARY POINTER      64900000
         MVC  D0(L'TATTRIB+L'LATTRIB+L'SATTRIB+L'ATTRIB,PAIRO),TATTRIB X64950000
               PUT SAME ATTRIBUTES IN DUPLICATE ENTRY                   65000000
         B     CHASER                   LOOP BACK FOR MORE              65050000
         EJECT                                                          65100000
TYPEI1   EQU   *                                                        65150000
         MVI   TATTRIB,JI               SET TYPE TO I IN DICT ENTRY     65200000
         SR    PAIRO,PAIRO              CLEAR WORK REGISTER             65250000
         IC    PAIRO,JTFLGA             PICK UP FLAGA BYTE FROM TEXT    65300000
         N     PAIRO,=F'3'              ISOLATE LENGTH BITS             65350000
         LA    PAIRO,D1(,PAIRO)         ADD 1 AND                       65400000
         SLL   PAIRO,D1                 MULTIPLY BY 2 FOR LENGTH        65450000
         STH   PAIRO,JHWORD1            TEMPORARILY SAVE LENGTH AND     65500000
         MVC   LATTRIB,JHWORD1          INSERT INTO DICTIONARY ENTRY    65550000
         B     DEFALTC                  GO ASSIGN SCALE                 65600000
TYPEI2   EQU   *                                                        65650000
         MVI   TATTRIB,JI               SET TYPE TO I IN DICT ENTRY     65700000
DLENGTH  MVC   LATTRIB,=H'1'            PUT DEFAULT LENGTH IN ENTRY     65750000
         SET   LDEFALT,ON               INDICATE DEFAULTED LENGTH       65770000
DEFALTC  MVC   SATTRIB,=H'0'            INSERT DEFAULT SCALE ATTRIB     65800000
         SET   SDEFALT,ON               INDICATE DEFAULTED SCALE        65820000
         B     CHASER                   RETURN FOR ADDITNL REFERENCES   65850000
ESCAN    EQU   *                                                        65900000
         SET   ENDSW,OFF                &NITIALIZE FOR NEW STATEMENT    65950000
ESCANB   LR    INPTR,RCDPTR             PICK UP PTR TO STATEMENT        66000000
         AH    INPTR,JTOPP              DEVELOP PTR TO OPERAND          66050000
         CLI   D0(INPTR),J0             LOOK FOR NULL OPERAND           66100000
         BE    ORDSYMBR                 BRANCH IF NO OPERAND            66150000
         TM    D0(INPTR),BIT0           LOOK FOR CARD POINTER           66200000
         BNO   ESCANC                   BRANCH IF NONE PRESENT          66250000
         LA    INPTR,D1(,INPTR)         BUMP PAST CARD POINTER          66300000
ESCANC   LA    INPTR,D2(,INPTR)         GET PTR TO NAME ITSELF          66350000
ESCANA   BAL   RTNLNK,GETXNAM           GO GET A NAME                   66400000
         B     ORDSYMBR                 BRANCH ON NO NAME OR ERROR      66450000
         XC    JDWORD,JDWORD            CLEAR NAME WORK AREA            66500000
         EX    WORK3,MVNAME             PICK UP NAME FOR HASHING        66550000
         B     HASHNAME                 GO HASH NAME                    66600000
DSSCAN   EQU   *                                                        66650000
         MVI   SWITCHB,J0               CLEAR OUT ALL SWITCHES          66700000
         SET   DSSW,ON                  INDICATE DS OPERAND             66750000
         B     DC0                      CONTINUE AS DC                  66800000
DCSCAN   EQU   *                                                        66850000
         MVI   SWITCHB,J0               CLEAR OUT ALL SWITCHES          66900000
         SET   DSSW,OFF                 INDICATE DC OPERAND             66950000
DC0      LH    INPTR,JTOPP              GET DISPL TO OPERAND IN TEXT    67000000
         AR    INPTR,RCDPTR             DEVELOP PTR TO OPERAND          67050000
         CLI   D0(INPTR),J0             CHECK FOR NO OPERAND            67100000
         BE    DEFALTD1                 BRANCH IF NONE                  67150000
         TM    D0(INPTR),BIT0           LOOK FOR CARD POINTER           67200000
         BNO   DC1                      BRANCH IF NONE                  67250000
         LA    INPTR,D1(,INPTR)         BUMP PAST CARD POINTER          67300000
DC1      LA    INPTR,D1(,INPTR)         BUMP PAST COLUMN POINTER        67350000
         SR    ENDPTR,ENDPTR            CLEAR REGISTER FOR END PTR      67400000
         IC    ENDPTR,D0(INPTR)         PICK UP OPERAND LENGTH          67450000
         AR    ENDPTR,INPTR             DEVELOP PTR TO END OF OPERAND   67500000
         AH    ENDPTR,=H'1'             ADJUST FOR BLANK DELIMITER      67550000
         ST    ENDPTR,ENDCOL            SAVE FOR USE IN SCAN LATER      67600000
         LA    INPTR,D1(,INPTR)         BUMP PAST OPERAND LENGTH        67650000
         SR    RZ,RZ                    INITIALIZE WORK REGISTER        67700000
         CLI   D0(INPTR),J9             LOOK FOR DECIMAL DUP FACTOR     67750000
         BH    DC2                      BRANCH IF EXPRESSION            67800000
         BAL   RTNLNK,DECBIN            COLLECT DUP FACTOR              67850000
         B     DC3                      BRANCH,IGNORING DUP FACTOR      67900000
DC2      CLI   D0(INPTR),JLPARN         LOOK FOR LEADING PARENTHESIS    67950000
         BNE   DC3                      BRANCH IF NOT FOUND             68000000
         LA    INPTR,D1(,INPTR)         BUMP PAST LEFT PAREN            68050000
         MVI   DELIMIT,JRPARN           INDICATE LOOKING FOR RIGHT PAR  68100000
         BAL   RTNLNK,OPNDSCAN          GO SCAN OVER EXPRESSION         68150000
         B     DEFALTD1                 BRANCH ON ERROR RETURN          68200000
DC3      CLI   D0(INPTR),JZ             LOOK FOR TYPE CHARACTER HIGH    68250000
         BH    DEFALTD1                 BRANCH IF INVALID TYPE          68300000
         CLI   D0(INPTR),JA             LOOK FOR TYPE CHARACTER LOW     68350000
         BL    DEFALTD1                 BRANCH IF INVALID TYPE          68400000
         IC    RZ,D0(,INPTR)            PICK UP TYPE AS INDEX TO CONTAB 68450000
         IC    RZ,CONTAB-JA(RZ)         PICK UP DISPL IN CONTAB         68500000
         LTR   RZ,RZ                    CHECK FOR ZERO DISPLACEMENT     68550000
         BZ    DEFALTD1                 BRANCH ON INVALID TYPE          68600000
         LA    RZ,CONTAB(RZ)            DEVELOP PTR TO CONSTANT DATA    68650000
         MVC   AWORK(ACHARLMT-AFLAGS+D1),D0(RZ) PUT IN WORK AREA        68700000
         LA    INPTR,D1(,INPTR)         BUMP PTR TO NEXT CHARACTER      68750000
         CLI   D0(INPTR),JL             LOOK FOR LENGTH MODIFIER CHAR   68800000
         BNE   DC7                      BRANCH IF IMPLICIT LENGTH       68850000
         LA    INPTR,D1(,INPTR)         BUMP PTR TO NEXT CHARACTER      68900000
         SET   EXLENFLG,ON              SET EXPLICIT LENGTH FLAG ON     68950000
         CLI   D0(INPTR),JPERIOD        LOOK FOR BIT LENGTH INDICATOR   69000000
         BNE   DC4                      BRANCH IF NOT BIT LENGTH        69050000
         CLI   ATYPEAT,STYPE            LOOK FOR STYPE WITH BIT LENGTH  69100000
         BE    DEFALTD2                 BRANCH IF FOUND                 69150000
         LA    INPTR,D1(,INPTR)         BUMP PTR TO NEXT CHARACTER      69200000
         BAL   RTNLNK,DECBIN            COLLECT BIT LENGTH              69250000
         LTR   RX,RX                    CHECK FOR ZERO BIT LENGTH       69300000
         BZ    DEFALTD2                 BRANCH IF FOUND                 69350000
         LA    RX,D7(,RX)               ROUND BIT LENGTH UP             69400000
         SRL   RX,D3                    DIVIDE BY 8 FOR BYTE LENGTH     69450000
         B     DC6                      BRANCH TO SET LENGTH ATTR       69500000
DC4      CLI   D0(INPTR),J9             LOOK FOR DECIMAL LENGTH MODIF   69550000
         BH    DC8                      BRANCH IF EXPRESSION            69600000
         BAL   RTNLNK,DECBIN            COLLECT LENGTH MODIFIER         69650000
         LTR   RX,RX                    CHECK FOR ZERO LENGTH           69700000
         BZ    DEFALTD2                 BRANCH IF FOUND                 69750000
         CLI   ATYPEAT,STYPE            LOOK FOR S TYPE CONSTANT        69800000
         BNE   DC5                      BRANCH IF NOT FOUND             69850000
         CH    RX,=H'2'                 LOOK FOR EXACT LENGTH OF 2      69900000
         BNE   DEFALTD2                 BRANCH IF NOT FOUND             69950000
DC5      CL    RX,=F'65535'             CHECK FOR HIGH LENGTH LIMIT     70000000
         BH    DEFALTD2                 BRANCH IF EXCEEDED              70050000
         CH    RX,ALENMAX               CHECK IF CONSTANT LENGTH LESS   70100000
         BNH   DC6                      BRANCH ON LENGTH OK             70150000
         GOIF  DSSW,OFF=DEFALTD2        BRANCH IF NOT DS OPERAND        70200000
         GOIF  (CHCON,BXCON),OFF=DEFALTD2 BRANCH IF NOT C,X,B TYPE      70250000
         CLI   ATYPEAT,BTYPE            LOOK FOR B TYPE                 70300000
         BE    DEFALTD2                 BRANCH IF FOUND                 70350000
DC6      STH   RX,ALENGTH               STORE LENGTH                    70400000
         GOIF  (ADCON1,ADCON2,FLCON,FXCON),OFF=DC7                     X70450000
               BRANCH IF NOT A,Y,V,S,Q,D,E,L,F,H TYPE                   70500000
         MVC   ATYPEAT,ATYPALT          INSERT TYPE WITH EXPLICIT LENG  70550000
         GOIF  FLCON,OFF=DC7            BRANCH IF NOT D,E,L TYPE        70600000
         AR    RX,RX                    GET SCALE LIMIT WITH EXPL LENG  70650000
         SH    RX,=H'2'                 ALLOW FOR FIRST CHARACTERISTIC  70700000
         CL    RX,=F'16'                LOOK FOR L-CON, LENGTH OVER 8   70750000
         BNH   DC6A                     BRANCH IF NOT THE CASE          70800000
         SH    RX,=H'2'                 ALLOW FOR SECOND CHARACTERISTIC 70850000
DC6A     EQU   *                                                        70900000
         GOIF  DEFLTL,ON=DC7            KEEP STD SCALE MAX ON DEFAULT   70950000
         STH   RX,ASCAMAX               SET SCALE, (LENGTH-1)*2         71000000
DC7      CLI   D0(INPTR),JS             LOOK FOR SCALE MODIFIER CHAR    71050000
         BNE   DC11                     BRANCH IF NOT FOUND             71100000
         GOIF  (FLCON,FXCON),NONE=DEFALTD3 EXIT IF SCALE NOT ALLOWED    71150000
         LA    INPTR,D1(,INPTR)         BUMP PTR TO NEXT CHARACTER      71200000
         CLI   D0(INPTR),JPLUS          LOOK FOR SCALE SIGN PLUS        71250000
         BE    DC7A                     SIMPLY IGNORE IF FOUND          71300000
         CLI   D0(INPTR),JMINUS         LOOK FOR SCALE SIGN MINUS       71350000
         BNE   DC9                      GO ON IF NO SIGN FOUND          71400000
         GOIF  FXCON,OFF=DEFALTD3       BR IF NEG SCALE ON FLCON        71450000
         SET   NSCALSW,ON               INDICATE SCALE NEGATIVE         71500000
DC7A     LA    INPTR,D1(,INPTR)         BUMP PTR PAST SCALE SIGN        71550000
DC9      CLI   D0(INPTR),J9             LOOK FOR DECIMAL SCALE          71600000
         BH    DEFALTD3                 BR IF NOT DECIMAL               71650000
         BAL   RTNLNK,DECBIN            GO COLLECT SCALE VALUE          71700000
         GOIF  NSCALSW,OFF=DC10         BRANCH IF SCALE POSITIVE        71750000
         LCR   RX,RX                    MAKE SCALE VALUE NEGATIVE       71800000
         CH    RX,=H'-187'              CHECK FOR NEGATIVE LIMIT        71850000
         BL    DEFALTD3                 BR IF EXCEEDED                  71900000
DC10     CH    RX,ASCAMAX               CHECK FOR POSITIVE LIMIT        71950000
         BH    DEFALTD3                 BR IF EXCEEDED                  72000000
         STH   RX,ASCALE                INSERT SCALE ATTRIBUTE          72050000
DC11     CLI   D0(INPTR),JE             LOOK FOR EXPONENT MODIFIER      72100000
         BNE   DC11A                    BRANCH IF NOT FOUND             72150000
         GOIF  (FXCON,FLCON),ANY=DCEXIT, TERMINATE FIXED AND FLOATING  X72200000
               ELSE=DEFALTD2            ERROR FOR ALL OTHER TYPES       72250000
DC11A    CLI   D0(INPTR),JQUOTE         LOOK FOR LEADING QUOTE          72300000
         BNE   DC19                     IF NOT FOUND, MAKE MORE CHECKS  72350000
         GOIF  (FXCON,FLCON),ANY=DCEXIT THRU WITH TYPES F,H,D,E,L       72400000
         GOIF  (ADCON1,ADCON2),ANY=DEFALTD2  ERROR IF TYPES A,S,V,Y,Q   72450000
         GOIF  DCCON,ON=DC13            CONTINUE ON ALL TYPES P,Z       72500000
         GOIF  EXLENFLG,ON=DCEXIT       THRU ON TYPES C,X,B - EXPL LEN  72550000
DC13     SR    RX,RX                    CLEAR LENGTH ACCUMULATOR        72600000
         LR    RY,RX                    CLEAR SCALE ACCUMULATOR         72650000
         LA    INPTR,D1(,INPTR)         BUMP TO FIRST CHARACTER         72700000
DC13A    CLI   D0(INPTR),JQUOTE         LOOK FOR ENDING QUOTE           72750000
         BNE   DC12                     BRANCH IF NOT IT                72800000
         GOIF  CHCON,OFF=DC14           THRU FOR ALL BUT TYPE C         72850000
         LA    INPTR,D1(,INPTR)         BUMP PTR TO NEXT CHARACTER      72900000
         CLI   D0(INPTR),JQUOTE         LOOK FOR PAIRED QUOTE           72950000
         BNE   DC14                     THRU WITH TYPE C IF NOT FOUND   73000000
DC12     CLC   D0(D1,INPTR),ACHARLMT    CHECK FOR CHARACTER IN RANGE    73050000
         BNH   DC15                     BRANCH IF WITHIN RANGE          73100000
         GOIF  BXCON,ON=DEFALTD2        ERROR IF TYPES B,X              73150000
         CLI   D0(INPTR),JPLUS          LOOK FOR INTERNAL PLUS SIGN     73200000
         BE    DC17                     BRANCH IF FOUND                 73250000
         CLI   D0(INPTR),JMINUS         LOOK FOR INTERNAL MINUS SIGN    73300000
         BE    DC17                     BRANCH IF FOUND                 73350000
         CLI   D0(INPTR),JPERIOD        LOOK FOR INTERNAL DECIMAL PT    73400000
         BE    DC18                     BRANCH IF FOUND                 73450000
         CLI   D0(INPTR),JCOMMA         LOOK FOR MULTIPLE CONSTANT DEL  73500000
         BNE   DEFALTD2                 BRANCH IF NOT FOUND             73550000
DC14     STH   RY,ASCALE                INSERT ACCUMULATED SCALE        73600000
         GOIF  EXLENFLG,ON=DCEXIT       THRU IF EXPLICIT LENGTH         73650000
         SR    RY,RY                    CLEAR REGISTER                  73700000
         IC    RY,ARFACT                PICK UP ROUNDING FACTOR         73750000
         AR    RX,RY                    ADD TO ACCUMULATED LENGTH       73800000
         IC    RY,ASFACT                PICK UP SHIFTING FACTOR         73850000
         SRL   RX,D0(RY)                SHIFT TO GET CONSTANT LENGTH    73900000
         LTR   RX,RX                    CHECK FOR LENGTH OF ZERO        73950000
         BNP   DEFALTD2                 BRANCH IF LENGTH ZERO OR NEG    74000000
         CH    RX,ALENMAX               CHECK IF MAXIMUM LEN EXCEEDED   74050000
         BH    DEFALTD2                 BRANCH IF EXCEEDED              74100000
         STH   RX,ALENGTH               INSERT IMPLIED LENGTH           74150000
         B     DCEXIT                   GO COMPLETE ATTRIBUTE INSERTION 74200000
DC15     CLI   D0(INPTR),JAMPER         LOOK FOR AMPERSAND CHARACTER    74250000
         BNE   DC16                     BRANCH IF NOT FOUND             74300000
         CLI   D1(INPTR),JAMPER         LOOK FOR PAIRED AMPERSAND       74350000
         BNE   DEFALTD2                 BRANCH IF NOT FOUND             74400000
         LA    INPTR,D1(,INPTR)         IGNORE FIRST AMPERSAND          74450000
DC16     LA    RX,D1(,RX)               ADD 1 TO ACCUMULATED LENGTH     74500000
         GOIF  DCCON,OFF=DC16A          BRANCH ON ALL BUT TYPES P,Z     74550000
         GOIF  SCALEFLG,OFF=DC16A       BRANCH IF DEC PT NOT YET FOUND  74600000
         LA    RY,D1(,RY)               ADD 1 TO ACCUMULATED SCALE      74650000
DC16A    SET   SIGNFLG,ON               DISALLOW ANY FURTHER SIGNS      74700000
         LA    INPTR,D1(,INPTR)         BUMP PTR TO NEXT CHARACTER      74750000
         B     DC13A                    LOOP BACK FOR NEXT CHARACTER    74800000
DC17     GOIF  SIGNFLG,ON=DEFALTD2      BRANCH IF SIGN ALREADY FOUND    74850000
         B     DC16A                    CONTINUE OTHERWISE              74900000
DC18     GOIF  SCALEFLG,ON=DEFALTD2     BRANCH IF DEC PT ALREADY FOUND  74950000
         SET   SCALEFLG,ON              INDICATE DEC PT FOUND           75000000
         B     DC16A                    CONTINUE                        75050000
DC19     CLI   D0(INPTR),JLPARN         LOOK FOR LEF PAREN CHARACTER    75100000
         BNE   DC20                     BRANCH IF NOT FOUND             75150000
         GOIF  (ADCON1,ADCON2),ANY=DCEXIT THRU WITH TYPES A,S,V,Y,Q     75200000
         B     DEFALTD2                 ERROR ON ALL OTHER TYPES        75250000
DC20     CLI   D0(INPTR),JBLANK         LOOK FOR BLANK DELIMITER        75300000
         BE    DC21                     BRANCH IF FOUND                 75350000
         CLI   D0(INPTR),JCOMMA         LOOK FOR COMMA DELIMITER        75400000
         BNE   DEFALTD2                 BRANCH IF NOT FOUND             75450000
DC21     GOIF  DSSW,ON=DCEXIT,ELSE=DEFALTD2 ERROR EXCEPT ON DS STMT     75500000
DC8      CLI   D0(INPTR),JLPARN         LOOK FOR LEADING PARENTHESIS    75550000
         BNE   DEFALTD2                 BRANCH IF NOT FOUND             75600000
         LA    INPTR,D1(,INPTR)         BUMP PAST LEFT PAREN            75650000
         MVI   DELIMIT,JRPARN           INDICATE LOOKING FOR RIGHT PAR  75700000
         BAL   RTNLNK,OPNDSCAN          GO SCAN OVER EXPRESSION         75750000
         B     DEFALTD2                 BRANCH ON ERROR RETURN          75800000
         LH    RX,=H'1'                 SET UP DEFAULT LENGTH OF 1      75850000
         SET   LDEFALT,ON               INDICATE DEFAULTED LENGTH       75870000
         SET   DEFLTL,ON                INDICATE LENGTH DEFAULTED       75900000
         B     DC6                      GO ON WITH DEFAULT LENGTH       75950000
DEFALTD1 MVI   ATYPEAT,JU               SET TYPE TO U                   76000000
DEFALTD2 MVC   ALENGTH,=H'1'            SET LENGTH ATTRIB TO 1          76050000
         SET   LDEFALT,ON               INDICATE DEFAULTED LENGTH       76070000
DEFALTD3 MVC   ASCALE,=H'0'             SET SCALE ATTR TO 0             76100000
         SET   SDEFALT,ON               INDICATE DEFAULTED SCALE        76120000
DCEXIT   MVC   TATTRIB(L'TATTRIB+L'LATTRIB+L'SATTRIB),ATYPEAT          X76150000
               PUT ATTRIBUTES INTO OSRD ENTRY                           76200000
         GOIF  (DCCON,FLCON,FXCON),ANY=CHASER BR IF SCALE ALLOWED       76210000
         SET   SDEFALT,ON               INDICATE DEFAULTED SCALE        76220000
         B     CHASER                   GO SCAN FOR DUPLICATES          76250000
EQUSCAN  EQU   *                                                        76300000
         LH    INPTR,JTOPP              GET START OF RECORD ADDR        76350000
         AR    INPTR,RCDPTR             GET START OF OPERAND ADDR       76400000
         CLI   D0(INPTR),J0             SEE IF OPERAND PRESENT          76450000
         BE    DEFALTA                  BRANCH IF NOT                   76500000
         TM    D0(INPTR),BIT0           LOOK FOR CARD POINTER           76550000
         BNO   ES1                      BRANCH IF NONE FOUND            76600000
         LA    INPTR,D1(,INPTR)         BUMP BY CARD POINTER            76650000
ES1      LA    INPTR,D1(,INPTR)         BUMP PAST COLUMN POINTER        76700000
         SR    ENDPTR,ENDPTR            CLEAR REGISTER FOR END PTR      76750000
         IC    ENDPTR,D0(,INPTR)        PICK UP OPERAND LENGTH          76800000
         AR    ENDPTR,INPTR             DEVELOP PTR TO END OF OPERAND   76850000
         AH    ENDPTR,=H'1'             ADJUST FOR BLANK DELIMITER      76900000
         ST    ENDPTR,ENDCOL            SAVE FOR LATER OPERAND SCAN     76950000
         LA    INPTR,D1(,INPTR)         POINT TO START OF OPERAND       77000000
         MVI   DELIMIT,JCOMMA           INDICATE LOOKING FOR COMMA      77050000
         BAL   RTNLNK,OPNDSCAN          GO SCAN OVER FIRST OPERAND      77100000
         B     DEFALTA                  BRANCH ON ERROR                 77150000
         LA    TYPE,D8                  SET UP FOR CHARACTER SDT        77200000
         L     VALUE,=C'0000'           INITIALIZE VALUE REG FOR CHAR   77220000
         CLI   D0(INPTR),JC             SEE IF IT IS ONE                77250000
         BE    ES8                      BRANCH IF SO                    77300000
         SR    VALUE,VALUE              INITIALIZE VALUE REG FOR X,B,D  77320000
         LA    TYPE,D4                  SET UP FOR HEXADEC SDT          77350000
         CLI   D0(INPTR),JX             SEE IF IT IS ONE                77400000
         BE    ES8                      BRANCH IF SO                    77450000
         LA    TYPE,D1                  SET UP FOR BINARY SDT           77500000
         CLI   D0(INPTR),JB             SEE IF IT IS ONE                77550000
         BE    ES8                      BRANCH IF SO                    77600000
         LA    TYPE,D3                  SET UP FOR DECIMAL SDT          77650000
         CLI   D0(INPTR),J9             SEE IF IT IS ONE                77660000
         BH    ES9                      BRANCH IF NOT                   77670000
         B     ES8A                     GO TO CONVERT IT                77700000
ES8      CLI   D1(INPTR),JQUOTE         LOOK FOR LEADING QUOTE          77750000
         BNE   ES9                      BRANCH IF NOT FOUND             77800000
         LA    INPTR,D2(,INPTR)         BUMP TO START OF CONSTANT       77850000
ES8A     LR    RZ,INPTR                 PRESERVE INPUT PTR              77900000
         L     R9,ENDCOL                POINT TO TERMINATOR    @AY19671 77902000
ES8C     BCTR  R9,0                     POINT TO PRECEDING CHAR@AY19671 77904000
         CR    R9,INPTR                 END OF TEST            @AY19671 77906000
         BNH   ES8E                     BR IF YES              @AY19671 77908000
         CLI   D0(R9),J9                TEST FOR DEC SDT       @AY19671 77910000
         BH    ES9                      BR IF NOT              @AY19671 77912000
         B     ES8C                     LOOP FOR NEXT CHARACTER@AY19671 77914000
ES8E     EQU   *                                               @AY19671 77916000
         SET   TRANSW,ON                INDICATE TRANSLATED VALUE REQD  77920000
         BAL   RTNLNK,SDTCONV           LINK TO CONVERT ROUTINE         77950000
         CLI   D0(INPTR),JCOMMA         LOOK FOR COMMA DELIMITER        78000000
         BE    ES2                      BRANCH IF FOUND                 78050000
         CLI   D0(INPTR),JBLANK         LOOK FOR BLANK DELIMITER        78100000
         BE    ES2A                     BRANCH IF FOUND                 78150000
         B     ES3A                     OTHERWISE DEFAULT SITUATION     78200000
ES9      MVI   DELIMIT,JCOMMA           INDICATE LOOKING FOR COMMA      78250000
         BAL   RTNLNK,OPNDSCAN          GO SCAN OVER SECOND OPERAND     78300000
         B     DEFALTA                  BRANCH ON ERROR                 78350000
         SET   LDEFALT,ON               INDICATE DEFAULTED LENGTH       78400000
         B     ES3                      GO SET LENGTH 1                 78420000
ES2      LA    INPTR,D1(,INPTR)         BUMP PTR TO NEXT OPERAND        78450000
ES2A     LTR   COUNT,COUNT              SEE IF VALID VALUE GOTTEN       78500000
         BZ    ES3A                     GO WARN OF LENGTH DEFAULT TO 1  78550000
         CLI   SHIFTAMT,D3              CHECK FOR DECIMAL SDT           78600000
         BNE   ES2B                     BRANCH IF NOT DECIMAL           78650000
         CH    COUNT,=H'10'             CHECK FOR MAX LENGTH DEC SDT    78700000
         BNE   ES2B                     BRANCH IF NOT MAX LENGTH        78750000
         CLC   D0(D10,RZ),=X'00000000000605050305' CHECK FOR UPPER LMT  78800000
         BH    ES3A                     BRANCH IF VALUE OUT OF RANGE    78850000
ES2B     C     VALUE,=F'65535'          CHECK FOR LEGITIMATE VALUE      78900000
         BNH   ES4                      BRANCH IF ACCEPTABLE            78950000
ES3A     LA    WORK2,JDWORD             PT TO NAME FIELD OF EQU         78960000
         LH    WORK1,JHWORD2            SET NAME MOVE LENGTH            78968000
         BAL   RTNLNK,ERLOGERA          LOG ERROR                       78976000
         DC    AL1(SEV65,ERR65)         2ND OPERAND NOT IN RANGE        78984000
         SET   LDEFALT,ON               INDICATE DEFAULTED LENGTH       78992000
ES3      LA    VALUE,D1                 ASSIGN DEFAULT LENGTH OF 1      79000000
ES4      STH   VALUE,JHWORD1            TEMPORARILY SAVE LENGTH         79050000
         MVC   LATTRIB,JHWORD1          INSERT INTO OSRD ENTRY          79100000
         CLI   D0(INPTR),JCOMMA         CHECK IF COMMA DELIMITER        79108000
         BNE   ES4A                     BR IF NOT                       79116000
         LA    INPTR,D1(,INPTR)         BUMP OVER COMMA                 79124000
ES4A     CLI   D0(INPTR),JBLANK         SEE IF THERE IS A THIRD         79132000
         BE    DEFALTB                  BR IF NOT                       79140000
         LA    TYPE,D8                  SET UP FOR CHARACTER SDT        79150000
         SR    VALUE,VALUE              INITIALIZE VALUE REG FOR X,B,D  79170000
         CLI   D0(INPTR),JC             SEE IF IT IS ONE                79200000
         BE    ES5                      BRANCH IF SO                    79250000
         LA    TYPE,D4                  SET UP FOR HEXADEC SDT          79300000
         CLI   D0(INPTR),JX             SEE IF IT IS ONE                79350000
         BE    ES5                      BRANCH IF SO                    79400000
         LA    TYPE,D1                  SET UP FOR BINARY SDT           79450000
         CLI   D0(INPTR),JB             SEE IF IT IS ONE                79500000
         BE    ES5                      BRANCH IF SO                    79550000
         LA    TYPE,D3                  SET UP FOR DECIMAL SDT          79600000
         B     ES6                      GO TO CONVERT IT                79650000
ES5      CLI   D1(INPTR),JQUOTE         LOOK FOR LEADING QUOTE          79700000
         BNE   DEFALTT                  BR IF NOT FOUND                 79750000
         LA    INPTR,D2(,INPTR)         BUMP TO START OF CONSTANT       79800000
ES6      LR    RZ,INPTR                 PRESERVE INPUT PTR              79850000
         SET   TRANSW,ON                INDICATE TRANSLATION            79870000
         BAL   RTNLNK,SDTCONV           LINK TO CONVERT ROUTINE         79900000
         ST    VALUE,JFWORD1            SET UP VALUE FOR TRANSLATE      79910000
         TR    JFWORD1,JTRTABLE         TRANSLATE IT                    79920000
         CLI   D0(INPTR),JBLANK         LOOK FOR BLANK DELIMITER        79950000
         BNE   DEFALTT                  BR IF NOT FOUND                 80000000
         LTR   COUNT,COUNT              SEE IF VALID VALUE GOTTEN       80050000
         BZ    ES7B                     BR IF NOT                       80100000
         CLI   SHIFTAMT,D3              CHECK FOR DECIMAL SDT           80150000
         BNE   ES7                      BRANCH IF NOT DECIMAL           80200000
         CH    COUNT,=H'10'             CHECK FOR MAX LENGTH DEC SDT    80250000
         BNE   ES7                      BRANCH IF NOT MAX LENGTH        80300000
         CLC   D0(D10,RZ),=X'00000000000000020505' CHECK FOR UPPER LMT  80350000
         BH    ES7B                     BRANCH IF VALUE OUT OF RANGE    80400000
ES7      CH    VALUE,=H'255'            CHECK FOR LEGITIMATE VALUE      80450000
         BH    ES7B                     BR IF OUT OF RANGE              80500000
ES7A     L     VALUE,JFWORD1            RESTORE IT TRANSLATED           80620000
         STC   VALUE,TATTRIB            ASSIGN TYPE ATTRIBUTE           80630000
         B     DEFALTC                  GO TO FINISH UP                 80650000
ES7B     LA    WORK2,JDWORD             PT TO NAME FIELD OF EQU         80656000
         LH    WORK1,JHWORD2            SET NAME MOVE LENGTH            80662000
         BAL   RTNLNK,ERLOGERA          LOG ERROR                       80668000
         DC    AL1(SEV66,ERR66)         3RD OPERAND NOT IN RANGE        80674000
DEFALTT  EQU   *                                                        80680000
         SET   TDEFALT,ON               INDICATE DEFAULTED TYPE         80686000
         B     DEFALTB                  GO SET TYPE TO U                80692000
DEFALTA  MVC   LATTRIB,=H'1'            SET DEFAULT LENGTH ATTR         80700000
         SET   LDEFALT,ON               INDICATE DEFAULTED LENDTH       80720000
DEFALTB  MVI   TATTRIB,JU               SET TYPE   ATTRIBUTE TO U       80750000
         B     DEFALTC                  GO ASSIGN SCALE                 80800000
TYPEM    EQU   *                                                        80850000
         MVI   TATTRIB,JM               SET TYPE TO M IN DICT ENTRY     80900000
         B     DLENGTH                  GO ASSIGN DEFAULT LENGTH        80950000
TYPEU1   EQU   *                                                        81000000
         MVI   TATTRIB,JU               SET TYPE TO U IN DICT ENTRY     81050000
         MVC   LATTRIB,=H'0'            ASSIGN DEFAULT LENGTH ATTR      81080000
         B     DEFALTC                  GO ASSIGN SCALE                 81110000
TYPEJ    EQU   *                                                        81150000
         MVI   TATTRIB,JJ               SET TYPE TO J IN DICT ENTRY     81200000
         B     DLENGTH                  GO ASSIGN DEFAULT LENGTH        81250000
TYPET    EQU   *                                                        81300000
         MVI   TATTRIB,JT               SET TYPE TO T IN DICT ENTRY     81350000
         B     DLENGTH                  GO ASSIGN DEFAULT LENGTH        81400000
TYPE$    EQU   *                                                        81450000
         MVI   TATTRIB,JDOLLAR          SET TYPE TO $ IN DICT ENTRY     81500000
         B     DLENGTH                  GO ASSIGN DEFAULT LENGTH        81550000
TYPEW    EQU   *                                                        81600000
         MVI   TATTRIB,JW               SET TYPE TO W IN DICT ENTRY     81650000
         MVC   LATTRIB,=X'0008'         PUT LENGTH ATTR IN ENTRY        81700000
         B     DEFALTC                  GO ASSIGN SCALE                 81750000
TYPEU2   EQU   *                                                        81800000
         MVI   TATTRIB,JA               SET TYPE TO A IN DICT ENTRY     81850000
         MVC   LATTRIB,=X'0004'         PUT LENGTH ATTR IN ENTRY        81900000
         B     DEFALTC                  GO ASSIGN SCALE                 81950000
         EJECT                                                          82000000
OSRDFINI MVC   PIOPARMA,OSRDSTRT        SET UP PTR TO OSRD FOR WRITE    82050000
         MVC   PIOPARMB,SAVOSDLN        SET UP OSRD LENGTH FOR WRITE    82100000
         L     WORK1,OSRDSTRT           GET PTR TO START OF TABLE       82150000
         LR    WORK2,WORK1              USE PTR FOR TABLE END CALCULA   82200000
         A     WORK2,PIOPARMB           GET PTR TO END OF TABLE         82250000
         SR    WORK3,WORK3              CLEAR TABLE INDEX INITIALLY     82300000
OSRDLP1  LA    WORK4,D0(WORK3,WORK1)    GET PTR TO NEXT TABLE ENTRY     82350000
         CLR   WORK4,WORK2              SEE IF ENTIRE TABLE SCANNED     82400000
         BNL   OSRDLP3                  BRANCH IF IT HAS BEEN           82450000
         CLC   D0(D5,WORK4),=5X'FF'     LOOK FOR UNPROCESSED ENTRY      82500000
         BNE   OSRDLP2                  BRANCH IF NOT FOUND             82550000
         MVC   D0(D6,WORK4),=AL1(JU,J0,J1,J0,J0,X'70') SET DEFALTS      82600000
OSRDLP2  LA    WORK3,D6(,WORK3)         BUMP INDEX TO NEXT ENTRY        82650000
         B     OSRDLP1                  GO BACK TO START OF LOOP        82700000
OSRDLP3  EQU   *                                                        82750000
         ST    R3,SAVE3456              SAVE NECESSARY REGISTER         82800000
         LH    R5,JMAXRL2               SET UP MAXIMUM RECORD THIS FILE 82850000
         LA    R6,FILE2                 SET UP FILE POINTER             82900000
         BAL   R7,BUFRITE               GO PUT OSRD TO FILE 2           82950000
         L     R3,SAVE3456              RESTORE CRUCIAL REGISTER        83000000
         MVC   SAVOSDNP(L'JNOTEVAL),JNOTEVAL SAVE N/P IN COMMON         83050000
         B     OPSYNBLD                 GO PROCESS ANY OPSYN ENTRIES    83100000
OSRDCLER MVC   D1(D0,WORK2),D0(WORK2)   EXECUTED MOVE TO CLEAR OSRD     83150000
NAMEMV   MVC   JDWORD(D0),D2(WORK1)     EXECUTED ORD SYMB MOVE          83200000
NAMECM   CLC   JDWORD(D0),OSRTOS        EXECUTED ORD SYMB COMPARE       83250000
MVNAME   MVC   JDWORD(D0),D0(RX)        EXECUTED NAME MOVE              83300000
         DROP  RCDPTR                                                   83350000
         DROP  OSRTBASE                                                 83400000
         DROP  OSRDPTR                                                  83450000
         EJECT                                                          83500000
OPSYNBLD EQU   *                                                        83550000
         JPOINT FILE=FILE3,NEXT=START   REWIND FILE 3                   83600000
         L     WORK1,FREESTRT           GET PTR TO SPACE FOR TABLE BLD  83650000
         ST    WORK1,PIOPARMA           SAVE ALSO FOR I/O ROUTINE       83700000
         SR    WORK2,WORK2              SET TABLE LENGTH TO ZERO        83750000
         MVC   HIBYTE0,OPSCHAIN         PICK UP OPSYN CHAIN POINTER     83800000
BLDLOP   L     WORK3,MDDND              GET PTR TO TABLE BASE           83850000
         S     WORK3,HIBYTE0            DISPLACE TO FIRST ENTRY         83900000
         C     WORK3,MDDND              SEE IF END OF CHAIN REACHED     83950000
         BE    PUTOPSYN                 BRANCH IF YES                   84000000
         USING OPSYNTRY,WORK3                                           84050000
         USING OPSTBL,WORK1                                             84100000
         GOIF  OMAC,ON=BLDOP1           BRANCH IF THIS IS A MACRO       84120000
         MVC   OPSFLGS(OPSTLNT),OPSYNFLG MOVE OPSYN DATA TO NEW ENTRY   84160000
         LA    WORK2,OPSTLNT(,WORK2)    INCREMENT TABLE LENGTH          84200000
         LA    WORK1,OPSTLNT(,WORK1)    INCREMENT TABLE POINTER         84220000
BLDOP1   EQU   *                                                        84230000
         MVC   HIBYTE0+(L'HIBYTE0-L'OPSYNCH)(L'OPSYNCH),OPSYNCH        X84250000
               PICK UP CHAIN PTR FROM ENTRY                             84300000
         B     BLDLOP                   GO BACK TO START OF SEARCH      84350000
PUTOPSYN LTR   WORK2,WORK2              SEE IF ANY TABLE TO PUT         84400000
         BZ    NOOPSYN                  BRANCH IF NOT                   84450000
         ST    WORK2,PIOPARMB           SET UP TABLE LENGTH FOR I/O     84500000
         MVC   SAVOPTLN(L'PIOPARMB),PIOPARMB SAVE ALSO FOR X3N          84550000
         ST    R3,SAVE3456              SAVE CRUCIAL REGISTER           84600000
         LH    R5,JMAXRL2               SET UP MAXIMUM RECORD LENGTH    84650000
         LA    R6,FILE2                 SET UP FILE INDICATOR           84700000
         BAL   R7,BUFRITE               GO TO PUT OPSYN TABLE OUT       84750000
         L     R3,SAVE3456              RESTORE CRUCIAL REGISTER        84800000
         MVC   SAVOPTNP(L'JNOTEVAL),JNOTEVAL SAVE NOTE VALUE FOR X3N    84850000
         B     INTREXIT                 GO EXIT THE PHASE               84900000
NOOPSYN  XC    SAVOPTLN(D4),SAVOPTLN    SET OPSYN TABLE LENGTH TO 0     84950000
         B     INTREXIT                 GO EXIT THE PHASE               85000000
         DROP  WORK3                                                    85050000
         DROP  WORK1                                                    85100000
         EJECT                                                          85150000
*INTREXIT - THIS ROUTINE RELEASES THE WORK SPACE USED BY THE          * 85200000
*   DICTIONARY INTERLUDE PHASE AND TERMINATES THE PHASE.              * 85250000
*                                                                     * 85300000
INTREXIT EQU   *                                                        85350000
         L     WORK3,ERRBLK             GET PTR TO ERROR BUFFER         85500000
         ST    WORK3,PIOPARMA           SET UP I/O AREA START PTR       85520000
         MVC   SAVERRNP(L'JNOTEVAL),D0(WORK3) SAVE LAST ERROR LINK      85550000
         LA    WORK3,D8(,WORK3)         GET PTR TO NEXT ERROR SLOT      85600000
         CL    WORK3,ERBLKPTR           SEE IF ANY ERRORS IN BUFFER     85650000
         BE    IEXIT1                   BRANCH IF NOT                   85700000
         L     WORK3,ERBLKPTR           PICK UP PTR TO NEXT ERROR SLOT  85750000
         MVC   D0(D2,WORK3),=H'0'       INSERT END OF ERRORS FLAG       85800000
         MVC   PIOPARMB,=F'190'         SET UP I/O AREA LENGTH          85870000
         LH    R5,JMAXRL1               SET UP RECORD LENGTH            85950000
         LA    R6,FILE1                 SET UP FILE INDICATOR           86000000
         BAL   R7,BUFRITE               GO TO WRITE BLOCK OF ERRORS     86050000
         MVC   SAVERRNP(L'JNOTEVAL),JNOTEVAL SAVE NEW LAST ERROR LINK   86100000
IEXIT1   EQU   *                                                        86150000
         JNOTE FILE=FILE1               NOTE END OF DICT FILE           86160000
         MVC   SAVOVFPT(L'JNOTEVAL),JNOTEVAL SAVE AS OVERFLOW PTR       86170000
         JFRECORE ADDR=FREESTRT         FREE UP ALL DICT WORK AREA      86200000
INTROUT  JRETURN                        RETURN TO THE DRIVER            86250000
         EJECT                                                          86300000
*                                                                       86350000
* THIS TABLE IS INDEXED INTO USING THE DC/DS TYPE CHARACTER. IF         86400000
*        THE BYTE INDEXED TO IS ZERO, THE TYPE IS INVALID. IF THE       86450000
*        BYTE INDEXED TO IS NON-ZERO, THE BYTE CONTAINS THE DISPLACE-   86500000
*        MENT TO THE TABLE INFORMATION FOR THAT TYPE.                   86550000
*                                                                       86600000
CONTAB   DC    AL1(ACON-CONTAB)         A                               86650000
         DC    AL1(BCON-CONTAB)         B                               86700000
         DC    AL1(CCON-CONTAB)         C                               86750000
         DC    AL1(DCON-CONTAB)         D                               86800000
         DC    AL1(ECON-CONTAB)         E                               86850000
         DC    AL1(FCON-CONTAB)         F                               86900000
         DC    AL1(0)                   G                               86950000
         DC    AL1(HCON-CONTAB)         H                               87000000
         DC    AL1(0)                   I                               87050000
         DC    AL1(0)                   J                               87100000
         DC    AL1(0)                   K                               87150000
         DC    AL1(LCON-CONTAB)         L                               87200000
         DC    AL1(0)                   M                               87250000
         DC    AL1(0)                   N                               87300000
         DC    AL1(0)                   O                               87350000
         DC    AL1(PCON-CONTAB)         P                               87400000
         DC    AL1(QCON-CONTAB)         Q                               87450000
         DC    AL1(0)                   R                               87500000
         DC    AL1(SCON-CONTAB)         S                               87550000
         DC    AL1(0)                   T                               87600000
         DC    AL1(0)                   U                               87650000
         DC    AL1(VCON-CONTAB)         V                               87700000
         DC    AL1(0)                   W                               87750000
         DC    AL1(XCON-CONTAB)         X                               87800000
         DC    AL1(YCON-CONTAB)         Y                               87850000
         DC    AL1(ZCON-CONTAB)         Z                               87900000
*                                                                       87950000
* THIS TABLE CONTAINS THE DATA FOR EACH DC/DS TYPE NECESSARY TO         88000000
*        COLLECT AND VERIFY THE TYPE, LENGTH, AND SCALE ATTRIBUTES.     88050000
*                                                                       88100000
ACON     DC    AL1(128)                 TYPE A  FLAGS                   88150000
         DC    AL1(ATYPE)                       TYPE ATTR               88200000
         DC    AL2(4)                           LENGTH ATTR             88250000
         DC    AL2(0)                           SCALE ATTR              88300000
         DC    AL2(4)                           LENGTH MAXIMUM          88350000
         DC    AL2(0)                           SCALE MAXIMUM           88400000
         DC    AL1(RTYPE)                       ALTERNATE TYPE ATTR     88450000
BCON     DC    AL1(16)                  TYPE B  FLAGS                   88500000
         DC    AL1(BTYPE)                       TYPE ATTR               88550000
         DC    AL2(1)                           LENGTH ATTR     OX00408 88600001
         DC    AL2(0)                           SCALE ATTR              88650000
         DC    AL2(256)                         LENGTH MAXIMUM          88700000
         DC    AL2(0)                           SCALE MAXIMUM           88750000
         DC    AL1(7)                           ROUNDING FACTOR         88800000
         DC    AL1(3)                           SHIFTING FACTOR         88850000
         DC    AL1(1)                           CHARACTER HIGH LIMIT    88900000
CCON     DC    AL1(32)                  TYPE C  FLAGS                   88950000
         DC    AL1(CTYPE)                       TYPE ATTR               89000000
         DC    AL2(1)                           LENGTH ATTR     OX00408 89050001
         DC    AL2(0)                           SCALE ATTR              89100000
         DC    AL2(256)                         LENGTH MAXIMUM          89150000
         DC    AL2(0)                           SCALE MAXIMUM           89200000
         DC    AL1(0)                           ROUNDING FACTOR         89250000
         DC    AL1(0)                           SHIFTING FACTOR         89300000
         DC    AL1(255)                         CHARACTER HIGH LIMIT    89350000
DCON     DC    AL1(4)                   TYPE D  FLAGS                   89400000
         DC    AL1(DTYPE)                       TYPE ATTR               89450000
         DC    AL2(8)                           LENGTH ATTR             89500000
         DC    AL2(0)                           SCALE ATTR              89550000
         DC    AL2(8)                           LENGTH MAXIMUM          89600000
         DC    AL2(14)                          SCALE MAXIMUM           89650000
         DC    AL1(KTYPE)                       ALTERNATE TYPE ATTR     89700000
ECON     DC    AL1(4)                   TYPE E  FLAGS                   89750000
         DC    AL1(ETYPE)                       TYPE ATTR               89800000
         DC    AL2(4)                           LENGTH ATTR             89850000
         DC    AL2(0)                           SCALE ATTR              89900000
         DC    AL2(8)                           LENGTH MAXIMUM          89950000
         DC    AL2(14)                          SCALE MAXIMUM           90000000
         DC    AL1(KTYPE)                       ALTERNATE TYPE ATTR     90050000
FCON     DC    AL1(2)                   TYPE F  FLAGS                   90100000
         DC    AL1(FTYPE)                       TYPE ATTR               90150000
         DC    AL2(4)                           LENGTH ATTR             90200000
         DC    AL2(0)                           SCALE ATTR              90250000
         DC    AL2(8)                           LENGTH MAXIMUM          90300000
         DC    AL2(346)                         SCALE MAXIMUM           90350000
         DC    AL1(GTYPE)                       ALTERNATE TYPE ATTR     90400000
HCON     DC    AL1(2)                   TYPE H  FLAGS                   90450000
         DC    AL1(HTYPE)                       TYPE ATTR               90500000
         DC    AL2(2)                           LENGTH ATTR             90550000
         DC    AL2(0)                           SCALE ATTR              90600000
         DC    AL2(8)                           LENGTH MAXIMUM          90650000
         DC    AL2(346)                         SCALE MAXIMUM           90700000
         DC    AL1(GTYPE)                       ALTERNATE TYPE ATTR     90750000
LCON     DC    AL1(4)                   TYPE L  FLAGS                   90800000
         DC    AL1(LTYPE)                       TYPE ATTR               90850000
         DC    AL2(16)                          LENGTH ATTR             90900000
         DC    AL2(0)                           SCALE ATTR              90950000
         DC    AL2(16)                          LENGTH MAXIMUM          91000000
         DC    AL2(28)                          SCALE MAXIMUM           91050000
         DC    AL1(KTYPE)                       ALTERNATE TYPE ATTR     91100000
PCON     DC    AL1(8)                   TYPE P FLAGS                    91150000
         DC    AL1(PTYPE)                       TYPE ATTR               91200000
         DC    AL2(1)                           LENGTH ATTR     OX00408 91250001
         DC    AL2(0)                           SCALE ATTR              91300000
         DC    AL2(16)                          LENGTH MAXIMUM          91350000
         DC    AL2(31)                          SCALE MAXIMUM           91400000
         DC    AL1(2)                           ROUNDING FACTOR         91450000
         DC    AL1(1)                           SHIFTING FACTOR         91500000
         DC    AL1(9)                           CHARACTER HIGH LIMIT    91550000
QCON     DC    AL1(64)                  TYPE Q FLAGS                    91600000
         DC    AL1(QTYPE)                       TYPE ATTR               91650000
         DC    AL2(4)                           LENGTH ATTR             91700000
         DC    AL2(0)                           SCALE ATTR              91750000
         DC    AL2(4)                           LENGTH MAXIMUM          91800000
         DC    AL2(0)                           SCALE MAXIMUM           91850000
         DC    AL1(RTYPE)                       ALTERNATE TYPE ATTR     91900000
SCON     DC    AL1(128)                 TYPE S  FLAGS                   91950000
         DC    AL1(STYPE)                       TYPE ATTR               92000000
         DC    AL2(2)                           LENGTH ATTR             92050000
         DC    AL2(0)                           SCALE ATTR              92100000
         DC    AL2(2)                           LENGTH MAXIMUM          92150000
         DC    AL2(0)                           SCALE MAXIMUM           92200000
         DC    AL1(RTYPE)                       ALTERNATE TYPE ATTR     92250000
VCON     DC    AL1(128)                 TYPE V  FLAGS                   92300000
         DC    AL1(VTYPE)                       TYPE ATTR               92350000
         DC    AL2(4)                           LENGTH ATTR             92400000
         DC    AL2(0)                           SCALE ATTR              92450000
         DC    AL2(4)                           LENGTH MAXIMUM          92500000
         DC    AL2(0)                           SCALE MAXIMUM           92550000
         DC    AL1(RTYPE)                       ALTERNATE TYPE ATTR     92600000
XCON     DC    AL1(16)                  TYPE X  FLAGS                   92650000
         DC    AL1(XTYPE)                       TYPE ATTR               92700000
         DC    AL2(1)                           LENGTH ATTR     OX00408 92750001
         DC    AL2(0)                           SCALE ATTR              92800000
         DC    AL2(256)                         LENGTH MAXIMUM          92850000
         DC    AL2(0)                           SCALE MAXIMUM           92900000
         DC    AL1(1)                           ROUNDING FACTOR         92950000
         DC    AL1(1)                           SHIFTING FACTOR         93000000
         DC    AL1(15)                          CHARACTER HIGH LIMIT    93050000
YCON     DC    AL1(128)                 TYPE Y  FLAGS                   93100000
         DC    AL1(YTYPE)                       TYPE ATTR               93150000
         DC    AL2(2)                           LENGTH ATTR             93200000
         DC    AL2(0)                           SCALE ATTR              93250000
         DC    AL2(2)                           LENGTH MAXIMUM          93300000
         DC    AL2(0)                           SCALE MAXIMUM           93350000
         DC    AL1(RTYPE)                       ALTERNATE TYPE ATTR     93400000
ZCON     DC    AL1(8)                   TYPE Z  FLAGS                   93450000
         DC    AL1(ZTYPE)                       TYPE ATTR               93500000
         DC    AL2(1)                           LENGTH ATTR     OX00408 93550001
         DC    AL2(0)                           SCALE ATTR              93600000
         DC    AL2(16)                          LENGTH MAXIMUM          93650000
         DC    AL2(16)                          SCALE MAXIMUM           93700000
         DC    AL1(0)                           ROUNDING FACTOR         93750000
         DC    AL1(0)                           SHIFTING FACTOR         93800000
         DC    AL1(9)                           CHARACTER HIGH LIMIT    93850000
         EJECT                                                          93900000
         JPATCH X2A02,A20                                               94000000
         END   INTRENTR                                                 94100000
