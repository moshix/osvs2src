         JHEAD 'GENERATE PHASE DICTIONARY ROUTINES',                   X00060020
               PHASEID=X3N,                                            X00120020
               LEVEL=10                                                 00180020
*FUNCTION/OPERATION-                                                  * 00240020
*   THE GENERATE PHASE DICTIONARY ROUTINES ARE A SET OF SUBROUTINES.  * 00300020
*   THESE SUBROUTINES PROVIDE ALL THE FUNCTIONS REQUIRED BY THE       * 00360020
*   GENERATE PHASE RELATIVE TO THE GENERATION TIME DICTIONARIES. THE  * 00420020
*   FUNCTIONS PROVIDED ARE- INITIALIZATION, SETTING, AND REFERENCING. * 00480020
*   THESE FUNCTIONS ARE REQUESTED DURING THE EXPANSION OF MACRO       * 00540020
*   INSTRUCTIONS AND IN CONDITIONAL ASSEMBLY FOR THE GENERATION OF    * 00600020
*   THE TEXT TO BE PROCESSED BY THE ASSEMBLY PHASE. THE PERTINENT     * 00660020
*   DICTIONARIES ARE- GLOBAL DICTIONARY, ORDINARY SYMBOL REFERENCE    * 00720020
*   DICTIONARY, AND THE DICTIONARY FOR THE TEXT SEGMENT CURRENTLY     * 00780020
*   BEING USED BY THE GENERATE PHASE. THE DICTIONARY FOR A TEXT       * 00840020
*   SEGMENT INCLUDES THE SKELETON DICTIONARY BUILT BY THE DICTIONARY  * 00900020
*   INTERLUDE PHASE FOR THAT TEXT SEGMENT (CONSISTING OF THE          * 00960020
*   DICTIONARY HEADER, THE GLOBAL VECTOR, AND THE SEQUENCE SYMBOL     * 01020020
*   REFERENCE DICTIONARY), THE LOCAL DICTIONARY, AND, IN THE CASE     * 01080020
*   OF A MACRO DEFINITION, THE MACRO PARAMETER WORK AREA.             * 01140020
*                                                                     * 01200020
*ENTRY POINT-                                                         * 01260020
*        DICTENTR                                                     * 01320020
*              THE CALLING SEQUENCE IS-                               * 01380020
*                  DICTCALL ENTRY                                     * 01440020
*              WHICH GENERATES-                                       * 01500020
*                  L     LINK,POINTER                                 * 01560020
*                  BAL   RETURN,ENTRY(,LINK)                          * 01620020
*              WHERE LINK IS THE STANDARD REGISTER FOR THE ADDRESS    * 01680020
*                             OF THE CALLED ROUTINE                   * 01740020
*                    POINTER CONTAINS THE ADDRESS OF THE DICTIONARY   * 01800020
*                            ENTRY ROUTINE                            * 01860020
*                    ENTRY IS THE NAME OF THE DICTIONARY FUNCTION     * 01920020
*                             REQUIRED (ENTRY NAMES ARE EQUATED TO    * 01980020
*                             ABSOLUTE VALUES USED AS DISPLACEMENTS   * 02040020
*                             INTO A BRANCH TABLE                     * 02100020
*                    RETURN IS THE STANDARD REGISTER FOR THE RETURN   * 02160020
*                             ADDRESS                                 * 02220020
*                                                                     * 02280020
*INPUT-                                                               * 02340020
*   FILE 1 - SKELETON DICTIONARY FOR EACH TEXT SEGMENT                * 02400020
*   FILE 1 - OVERFLOW DICTIONARIES                                    * 02460020
*   FILE 2 - MACRO DEFINITION VECTOR                                  * 02520020
*          - ORDINARY SYMBOL REFERENCE DICTIONARY                     * 02580020
*          - OPSYN TABLE                                              * 02640020
*                                                                     * 02700020
*OUTPUT-                                                              * 02760020
*   FILE 1 - OVERFLOW DICTIONARIES                                    * 02820020
*                                                                     * 02880020
*EXTERNAL ROUTINES-                                                   * 02940020
*                                                                     * 03000020
*                                                                     * 03060020
*                                                                     * 03120020
*EXITS,NORMAL-                                                        * 03180020
*   EXIT TO THE CONTROLLER WITH THE COMPLETION CODE SET TO A ZERO     * 03240020
*   VALUE.                                                            * 03300020
*                                                                     * 03360020
*EXITS,ERROR-                                                         * 03420020
*   EXIT TO THE CONTROLLER WITH THE COMPLETION CODE SET TO A NON-ZERO * 03480020
*   VALUE, THE SPECIFIC VALUE INDICATING THE ACTION TO BE TAKEN BY    * 03540020
*   THE CONTROLLER.                                                   * 03600020
*                                                                     * 03660020
*TABLES/WORK AREAS-                                                   * 03720020
*   MACRO DEFINITION VECTOR - A SEQUENTIAL TABLE. THERE IS ONE ENTRY  * 03780020
*        IN THE TABLE FOR EACH TEXT SEGMENT. EACH ENTRY CONSISTS      * 03840020
*        OF THE NOTE/POINT ADDRESS OF THE EDITED TEXT (NOT PRESENT    * 03900020
*        IN THE ENTRY FOR OPEN CODE), THE NOTE/POINT ADDRESS OF THE   * 03960020
*        SKELETON DICTIONARY, AND THE SIZE OF SKELETON DICTIONARY.    * 04020020
*   GLOBAL DICTIONARY - THE AREA IN WHICH THE VALUES OF THE VARIABLE  * 04080020
*        SYMBOLS ASSIGNED AS GLOBAL VARIABLES IN THE EDIT PHASE ARE   * 04140020
*        SET AND REFERENCED IN THE GENERATE PHASE DURING THE          * 04200020
*        EXPANSION OF MACRO INSTRUCTIONS AND IN CONDITIONAL ASSEMBLY. * 04260020
*   ORDINARY SYMBOL REFERENCE DICTIONARY - A SEQUENTIAL TABLE. THERE  * 04320020
*        IS ONE ENTRY IN THE TABLE FOR EACH ORDINARY SYMBOL           * 04380020
*        REFERENCED IN ATTRIBUTE REFERENCES OR IN MACRO INSTRUCTION   * 04440020
*        OPERANDS (LESS THOSE RESOLVED AS DUPLICATES). EACH ENTRY     * 04500020
*        CONSISTS OF THE TYPE, LENGTH, AND SCALE ATTRIBUTES OF THE    * 04560020
*        CORRESPONDING ORDINARY SYMBOL.                               * 04620020
*   DICTIONARY FOR A TEXT SEGMENT - THE SKELETON DICTIONARY (CONSIS-  * 04680020
*        TING OF THE DICTIONARY HEADER, THE GLOBAL VECTOR, AND THE    * 04740020
*        SEQUENCE SYMBOL REFERENCE DICTIONARY) PLUS THE LOCAL DIC-    * 04800020
*        TIONARY PLUS, IN THE CASE OF A MACRO DEFINITION, THE MACRO   * 04860020
*        PARAMETER WORK AREA.                                         * 04920020
*      --DICTIONARY HEADER - WORK AREA CONTAINING ALL THE OVERHEAD    * 04980020
*              PECULIAR TO THE DICTIONARY FOR A TEXT SEGMENT.         * 05040020
*      --GLOBAL VECTOR - A SEQUENTIAL TABLE OF POINTERS, ONE FOR      * 05100020
*              EACH SYSTEM GLOBAL VARIABLE AND ONE FOR EACH OF THE    * 05160020
*              VARIABLE SYMBOLS IN THE TEXT SEGMENT ASSIGNED          * 05220020
*              AS GLOBAL VARIABLES IN THE EDIT PHASE, EACH POINTING   * 05280020
*              TO THE CORRESPONDING ENTRY IN THE GLOBAL DICTIONARY.   * 05340020
*      --SEQUENCE SYMBOL REFERENCE DICTIONARY - A SEQUENTIAL TABLE    * 05400020
*              OF NOTE/POINT ADDRESSES, ONE FOR EACH SEQUENCE SYMBOL  * 05460020
*              REFERENCE IN THE TEXT SEGMENT (LESS THOSE RESOLVED     * 05520020
*              AS DUPLICATES), EACH POINTING TO THE POSITION IN THE   * 05580020
*              EDITED TEXT WHERE THE CORRESPONDING SEQUENCE SYMBOL    * 05640020
*              IS DEFINED.                                            * 05700020
*      --LOCAL DICTIONARY - THE AREA IN WHICH THE VALUES OF THE       * 05760020
*              VARIABLE SYMBOLS ASSIGNED AS LOCAL VARIABLES FOR THE   * 05820020
*              TEXT SEGMENT IN THE EDIT PHASE ARE SET AND REFERENCED  * 05880020
*              IN THE GENERATE PHASE DURING THE EXPANSION OF MACRO    * 05940020
*              INSTRUCTIONS AND IN CONDITIONAL ASSEMBLY.              * 06000020
*      --MACRO PARAMETER WORK AREA - THE KEYWORD PARAMETER VECTOR     * 06060020
*              PLUS THE POSITIONAL PARAMETER VECTOR PLUS THE          * 06120020
*              PARAMETER TABLE, CONSISTING OF THE VALUES OF ALL       * 06180020
*              THE MACRO INSTRUCTION OPERANDS.                        * 06240020
*                                                                     * 06300020
*ATTRIBUTES-                                                          * 06360020
*   REFRESHABLE                                                       * 06420020
*                                                                     * 06480020
*NOTES-                                                               * 06540020
*                                                                     * 06600020
*                                                                     * 06660020
*                                                                     * 06720020
         EJECT                                                          06780020
         COPY  JCOMMON                                                  06840020
         EJECT                                                          06900020
         COPY  JTMTXT                                                   06960020
         EJECT                                                          07020020
         COPY  GENCOM                                                   07080020
         EJECT                                                          07140020
*                                                                       07200020
* THIS DSECT MAPS THE MACRO DEFINITION VECTOR ENTRY.                    07260020
*                                                                       07320020
MDVNTRY  DSECT                                                          07380020
MNPTXT   DS    XL8                      TEXT FILE N/P     8 BYTES       07440020
MNPSD    DS    XL8                      SKEL DICTION N/P  8 BYTES       07500020
MSDL     DS    XL3                      SKEL DICT LENGTH  3 BYTES       07560020
MDVEND   EQU   *                                                        07620020
*                                                                       07680020
* THIS DSECT MAPS THE HEADER FOR THE SKELETON DICTIONARY.               07740020
*                                                                       07800020
SKDCTHDR DSECT                                                          07860020
SKSRDPT  DS    XL3                      DISPL SEQ SYM DIC 3 BYTES       07920020
SKLDADR  DS    XL3                      LCL DICT PTR      3 BYTES       07980020
SKLDLNG  DS    XL3                      LCL DICT LENGTH   3 BYTES       08040020
SKMPADR  DS    XL3                      MACRO PARAM PTR   3 BYTES       08100020
SKKVADR  DS    XL3                      KEYWD VECTR PTR   3 BYTES       08160020
SKADNLD  DS    XL4                      DICT ADR NXT LVL  4 BYTES       08220020
SKNPNLT  DS    XL8                      TEXT N/P NXT LVL  8 BYTES       08280020
SKACTRV  DS    XL4                      ACTR VALUE        4 BYTES       08340020
SKNOFSLS DS    XL2                      N'&SYSLIST        2 BYTES       08400020
SKHDREND EQU   *                                                        08460020
*                                                                       08520020
* THIS DSECT MAPS THE MACRO CALL META-TEXT.                             08580020
*                                                                       08640020
MCRCAL   DSECT                                                          08700020
MDVPNT   DS    XL3                      PTR TO MDV ENTRY FOR MACRO      08760020
*                                                                       08820020
*                                                                       08880020
* THIS DSECT MAPS THE GLOBAL AND LOCAL REFERENCE META-TEXT.             08940020
*                                                                       09000020
VREF     DSECT                                                          09060020
VFLAG    DS    X                        META-TEXT FLAG/OPERATOR         09120020
VPNT     DS    XL3                      PTR TO DICT/VECTOR ENTRY        09180020
VSUBS    DS    XL2                      VARIABLE SUBSCRIPT/DIMENSION    09240020
*                                                                       09300020
* THIS DSECT MAPS THE SEQUENCE SYMBOL REFERENCE META-TEXT.              09360020
*                                                                       09420020
SEQREF   DSECT                                                          09480020
SFLAG    DS    X                        META-TEXT FLAG/OPERATOR         09540020
SEQPNT   DS    XL3                      PTR TO DICTIONARY ENTRY         09600020
SEQPAD   DS    XL2                      PADDING                         09660020
*                                                                       09720020
* THIS DSECT MAPS THE ORDINARY SYMBOL REFERENCE META-TEXT.              09780020
*                                                                       09840020
ORDREF   DSECT                                                          09900020
OFLAG    DS    X                        META-TEXT FLAG/OPERATOR         09960020
ORDPNT   DS    XL3                      PTR TO DICTIONARY ENTRY         10020020
ORDPAD   DS    XL2                      PADDING                         10080020
*                                                                       10140020
* THIS DSECT MAPS THE PARAMETER REFERENCE META-TEXT.                    10200020
*                                                                       10260020
PARMREF  DSECT                                                          10320020
PARMFLG  DS    X                        META-TEXT FLAG/OPERATOR         10380020
PARMPNT  DS    XL3                      PTR TO PARAM VECTOR ENTRY       10440020
PARMPAD  DS    XL2                      PADDING                         10500020
         ORG   PARMPAD                  ORIGIN FOUR                     10560020
PARMSUB  DS    XL2                      SUBOPERAND NUMBER               10620020
*                                                                       10680020
* THIS DSECT MAPS THE ENTRY IN THE GLOBAL OR LOCAL DICTIONARY FOR A     10740020
*        SETA VARIABLE.                                                 10800020
*                                                                       10860020
SETANTRY DSECT                                                          10920020
SETAVAL  DS    XL4                      DICT ENTRY, SETA VARIABLE       10980020
*                                                                       11040020
* THIS DSECT MAPS THE ENTRY IN THE GLOBAL OR LOCAL DICTIONARY FOR A     11100020
*        SETB VARIABLE.                                                 11160020
*                                                                       11220020
SETBNTRY DSECT                                                          11280020
SETBVAL  DS    X                                                        11340020
*                                                                       11400020
* THIS DSECT MAPS THE ENTRY IN THE GLOBAL OR LOCAL DICTIONARY FOR A     11460020
*        SETC VARIABLE.                                                 11520020
*                                                                       11580020
SETCNTRY DSECT                                                          11640020
SETCLEN  DS    C                        LENGTH BYTE, SETC VARIABLE      11700020
SETCVAL  DS    CL8                      DICT ENTRY, SETC VARIABLE       11760020
         ORG   SETCVAL+D5               ORIGIN SIX                      11820020
SETCPTR  DS    XL3                      PTR TO VALUE, EXTENDED SETC     11880020
*                                                                       11940020
* THIS DSECT MAPS THE ENTRIES FOR THE SYSTEM GLOBAL VARIABLES           12000020
*        AT THE HEAD OF THE GLOBAL DICTIONARY.                          12060020
GSYSVALS DSECT                                                          12120020
PARMLEN  DS    C                        LENGTH SYSPARM VALUE            12180020
PARMVAL  DS    CL8                      SYSPARM VALUE                   12240020
TIMELEN  DS    C                        LENGTH, SYSTIME VALUE           12300020
TIMEVAL  DS    CL8                      SYSTIME VALUE                   12360020
DATELEN  DS    C                        LENGTH, SYSDATE VALUE           12420020
DATEVAL  DS    CL8                      SYSDATE VALUE                   12480020
*                                                                       12540020
* THIS DSECT MAPS THE ENTRIES FOR THE SYSTEM LOCAL VARIABLES            12600020
*        AT THE HEAD OF EACH LOCAL DICTIONARY                           12660020
*                                                                       12720020
LSYSVALS DSECT                                                          12780020
INDXVAL  DS    XL4                      SYSNDX VALUE                    12840020
SECTLEN  DS    CL1                      LENGTH, SYSECT VALUE            12900020
SECTVAL  DS    CL8                      SYSECT VALUE                    12960020
*                                                                       13020020
* THIS DSECT MAPS THE LOGICAL RECORD FOR A MACRO INSTRUCTION            13080020
*        OR MACRO PROTOTYPE OPERAND.                                    13140020
*                                                                       13200020
         COPY  JTEXT                                                    13260020
*                                                                       13320020
* THIS DSECT MAPS THE ERROR STACK ENTRY                                 13380020
*                                                                       13440020
ERRMESS  DSECT                                                          13500020
EMSGSVTY DS    C                        ERROR SEVERITY CODE             13560020
EMSGCODE DS    C                        ERROR NUMBER                    13620020
EMSGHL   EQU   *-EMSGSVTY                                               13680020
ENTRYLNG DS    C                        LENGTH, SNAPSHOT DATA           13740020
EMSGNTRY DS    CL8                      SNAPSHOT DATA                   13800020
*                                                                       13807020
*        MORE DISPLACEMENT EQUATES                                      13814020
*                                                                       13821020
D36      EQU   36                       DISPLACEMENT                    13828020
D44      EQU   44                       DISPLACEMENT                    13835020
D48      EQU   48                       DISPLACEMENT                    13842020
D256     EQU   256                      MAXIMUM MOVE LENGTH             13849020
         EJECT                                                          13860020
         COPY JERMSGCD                                                  13920020
         EJECT                                                          13980020
SAVMDVNP EQU   JDPASS                   SAVE AREA, MDV ADDRESS          14030020
SAVMDVLN EQU   JDPASS+D8                SAVE AREA, MDV LENGTH           14080020
SAVGDLNT EQU   JDPASS+D12               SAVE AREA GLOBAL DICT ALLOC     14130020
SAVOSDNP EQU   JDPASS+D16               SAVE AREA, OSRD ADDRESS         14180020
SAVOSDLN EQU   JDPASS+D24               SAVE AREA, OSRD LENGTH          14230020
SAVOVFPT EQU   JDPASS+D28               SAVE AREA, END OF FILE 1 ADDR   14280020
SAVOPTNP EQU   JDPASS+D36               SAVE AREA, OPSYN TABLE ADDRESS  14330020
SAVOPTLN EQU   JDPASS+D44               SAVE AREA, OPSYN TABLE LENGTH   14380020
SAVERRNP EQU   JDPASS+D48               SAVE AREA, ERROR BLOCK ADDRESS  14430020
GBLVCTEL EQU   3                        GLOBAL VECTOR ENTRY LENGTH      14480020
OPNDSTR  EQU   BIT7                     CHARACTER STRING PARAM FLAG     14530020
OPNDTRM  EQU   BIT6                     SELF-DEF TERM PARAM FLAG        14580020
OPNDORD  EQU   BIT5                     ORDINARY SYMBOL PARAM FLAG      14630020
OPNDOMT  EQU   BIT4                     OMITTED OPERAND PARAM FLAG      14680020
OPNDPRM  EQU   BIT3                     PASSED PARAMETER PARAM FLAG     14730020
OPNDSUB  EQU   BIT0                     SUBOPERAND PARAM FLAG           14780020
OPNDSUBF EQU   BIT2                     FIRST SUBOPERAND PARAM FLAG     14830020
OPNDSUBL EQU   BIT1                     LAST SUBOPERAND PARAM FLAG      14880020
MINRECSZ EQU   18                       MINIMUM I/O LENGTH              14930020
WORK1    EQU   R1                       SCRATCH REGISTER                14980020
WORKX    EQU   R1                       SCRATCH REGISTER                15030020
LOCTR    EQU   R2                       PTR TO NEXT BYTE FOR ALLOCAT    15080020
MDVPTR   EQU   R2                       PTR TO MDV ENTRY                15130020
PTPTR    EQU   R2                       PTR TO NEXT PARAM TBL SLOT      15180020
KEYPTR   EQU   R2                       PTR TO KEYWORD IN PARAM RECORD  15230020
KCPTR    EQU   R2                       PTR TO KEYWORD CHAIN ENTRY      15280020
SKDCTPTR EQU   R2                       PTR TO START OF SKEL DICT       15330020
PARAMPTR EQU   R2                       PTR TO PARAM TBL ENTRY          15380020
EPTR     EQU   R3                       PTR TO ERROR RCD IN ERROR BLOCK 15430020
PVEPTR   EQU   R3                       PTR TO NEXT PARAM VECTOR SLOT   15480020
KEYLEN   EQU   R3                       KEYWORD LENGTH REGISTER         15530020
SETPTR   EQU   R3                       PTR TO GBL/LCL DICT ENTRY, LIMB 15580020
OVLPTR   EQU   R4                       PTR TO ALLOC ADJUSTED FOR OVRLP 15630020
KEYCHAIN EQU   R4                       PTR TO KEYWORD CHAIN ENTRY      15680020
DICTPTR  EQU   R4                       PTR TO GBL/LCL DICT ENTRY, ROOT 15730020
VALLEN   EQU   R5                       PARAM VALUE LENGTH REGISTER     15780020
SETLEN   EQU   R5                       SETC VALUE LENGTH REGISTER      15830020
TXTPTR   EQU   R6                       PTR TO PARAM RECORD HDR DATA    15880020
RETURN   EQU   R9                       LINKAGE REGISTER                15930020
RTNLNK   EQU   R9                       LINKAGE REGISTER                15980020
PARMA    EQU   R10                      PARAMETER PASSAGE REGISTER      16030020
PARMB    EQU   R11                      PARAMETER PASSAGE REGISTER      16080020
WORKA    EQU   R14                      SCRATCH REGISTER                16130020
WORK2    EQU   R14                      SCRATCH REGISTER                16180020
WORKY    EQU   R14                      SCRATCH REGISTER                16230020
PAIRE    EQU   R14                      EVEN REGISTER OF PAIR           16280020
WORKB    EQU   R15                      SCRATCH REGISTER                16330020
WORK3    EQU   R15                      SCRATCH REGISTER                16380020
WORKZ    EQU   R15                      SCRATCH REGISTER                16430020
PAIRO    EQU   R15                      ODD REGISTER OF PAIR            16480020
         EJECT                                                          17160020
         JCSECT (X3N00)                                                 17220020
* VS1 RELEASE 2 CHANGES                                                 17270020
*C374400,378200                                                 OX00049 17270420
*A377900-378000                                                 OX00049 17270820
*A751700-751700                                                 OX00218 17272020
*A754700-754784                                                 OX00218 17274020
* VS1 RELEASE 4 CHANGES                                                 17276002
*A568000                                                        OY01298 17278002
         JMODID                                                         17280020
*DICTIONARY ENTRY ROUTINE - ALL CALLS TO THE GENERATE PHASE           * 17340020
*   DICTIONARY ROUTINES ENTER THROUGH THE FOLLOWING BRANCH TABLE      * 17400020
*   WHICH PROVIDES THE LINK TO THE REQUIRED ROUTINE.                  * 17460020
*                                                                     * 17520020
         USING DICTENTR,R12                                             17580020
DICTENTR B     DICTSAVE                 LINK TO ENTRY/SAVE ROUTINE      17640020
         DC    AL2(PHASENTR-DICTENTR)   DISPL TO PHASENTR ROUTINE       17700020
         DC    AL2(MACRCALL-DICTENTR)   DISPL TO MACRCALL ROUTINE       17760020
         DC    AL2(CALLEND-DICTENTR)    DISPL TO CALLEND  ROUTINE       17820020
         DC    AL2(MACRKWRD-DICTENTR)   DISPL TO MACRKWRD ROUTINE       17880020
         DC    AL2(MACRPOST-DICTENTR)   DISPL TO MACRPOST ROUTINE       17940020
         DC    AL2(PROTOKWD-DICTENTR)   DISPL TO PROTOKWD ROUTINE       18000020
         DC    AL2(PROTOEND-DICTENTR)   DISPL TO PROTOEND ROUTINE       18060020
         DC    AL2(GBLDICTR-DICTENTR)   DISPL TO GBLDICTR ROUTINE       18120020
         DC    AL2(GBLDICTS-DICTENTR)   DISPL TO GBLDICTS ROUTINE       18180020
         DC    AL2(LCLDICTR-DICTENTR)   DISPL TO LCLDICTR ROUTINE       18240020
         DC    AL2(LCLDICTS-DICTENTR)   DISPL TO LCLDICTS ROUTINE       18300020
         DC    AL2(PARMTBLR-DICTENTR)   DISPL TO PARMTBLR ROUTINE       18360020
         DC    AL2(SEQSYMBR-DICTENTR)   DISPL TO SEQSYMBR ROUTINE       18420020
         DC    AL2(ORDSYMBR-DICTENTR)   DISPL TO ORDSYMBR ROUTINE       18480020
         DC    AL2(MACRFINI-DICTENTR)   DISPL TO MACRFINI ROUTINE       18540020
         SPACE 5                                                        18600020
         JENTRY (X3N01=DICTENTR)                                        18660020
         EJECT                                                          18720020
*                                                                       18780020
* THIS SUBROUTINE IS USED BY ALL THE DICTIONARY ROUTINES TO SAVE        18840020
*        REGISTERS AND ESTABLISH ADDRESSABILITY.                        18900020
*                                                                       18960020
DICTSAVE STM   R2,R9,REGSTACK           PRESERVE CALLERS REGISTERS      19020020
         LR    R8,R12                   SET UP DICT RTN BASE ADDR       19080020
         USING DICTENTR,R8                                              19140020
         DROP  R12                                                      19200020
         LH    R9,ENTRYNDX              PICK UP ENTRY PT FLAG           19260020
         LH    R9,DICTENTR+D4(R9)       GET DISPL TO REQ'D RTN          19320020
         B     DICTENTR(R9)             ENTER DICTIONARY SUBRTN         19380020
         SPACE 10                                                       19440020
*                                                                       19500020
* THIS ROUTINE IS THE COMMON EXIT POINT FOR THE DICTIONARY ROUTINES.    19560020
*                                                                       19620020
DICTEXIT LM    R2,R9,REGSTACK           RESTORE CALLERS REGISTERS       19680020
         BR    R9                       RETURN TO CALLER                19740020
         EJECT                                                          19800020
*PHASENTR - THIS ROUTINE IS CALLED AT THE START OF THE GENERATE       * 19860020
*   PHASE. ITS FUNCTION IS TO FETCH THE MACRO DEFINITION VECTOR,      * 19920020
*   GET THE SPACE FOR AND INITIALIZE THE GLOBAL DICTIONARY, FETCH     * 19980020
*   THE ORDINARY SYMBOL REFERENCE DICTIONARY, FETCH THE SKELETON      * 20040020
*   DICTIONARY FOR OPEN CODE, AND GET THE SPACE FOR AND INITIALIZE    * 20100020
*   THE LOCAL DICTIONARY FOR OPEN CODE.                               * 20160020
*        INPUT - NONE.                                                * 20220020
*        OUTPUT - NONE.                                               * 20280020
*                                                                     * 20340020
PHASENTR EQU   *                                                        20400020
         XC    DICTCOMS(DICTCOME-DICTCOMS),DICTCOMS CLEAR COMMON AREA   20460020
         L     R11,=A(X'1FFFF0')        MAX CORE REQUEST IN DW          20520020
         JGETCORE MINDBL=750,MAXDBL=(R11) GET FREE SPACE                20580020
         ST    R10,FREESTRT             SAVE START PTR                  20640020
         AR    R11,R10                  DETERMINE END PTR               20700020
         ST    R11,FREEEND              SAVE END PTR                    20760020
         ST    R11,SPACEAH              SET UP FREE AREA END FIRST      20820020
         LR    LOCTR,R10                SET UP MAIN ALLOCATION PTR      20880020
         MVC   PIOPARMB,SAVMDVLN        GET LENGTH OF MDV               20940020
         ST    LOCTR,PIOPARMA           SET UP TO READ IN MDV           21000020
         L     WORK1,PIOPARMB           PICK UP MOV LENGTH              21060020
         MVC   JFWORD1,SAVGDLNT         GET GLOBAL DICT SIZE            21120020
         A     WORK1,JFWORD1            ADD IN FOR CALCULATION          21180020
         MVC   JFWORD1,SAVOSDLN         GET ORD SYMB REF DICT SIZE      21240020
         A     WORK1,JFWORD1            ADD IN FOR CALCULATION          21300020
         MVC   JFWORD1,SAVOPTLN         PICK UP OPSYN TABLE LENGTH      21360020
         A     WORK1,JFWORD1            ADD IN FOR CALCULATION          21420020
         AR    WORK1,LOCTR              DEVELOP OVERLAP POINTER         21480020
         CL    WORK1,FREEEND            LOOK FOR OVERLAP                21540020
         BNL   OVERLP4A                 BRANCH IF NO ROOM FOR GBL DICTS 21600020
         ST    LOCTR,MDVSTRT            SAVE AS MDV PTR                 21660020
         JPOINT FILE=FILE2,ADDR=SAVMDVNP,NEXT=READ POINT TO MDV         21720020
         LH    R5,JMAXRL2               SET UP MAXIMUM RECORD THIS FILE 21780020
         LA    R6,FILE2                 SET UP FILE POINTER             21840020
         BAL   RTNLNK,BUFREAD           GO GET MDV FROM FILE 2          21900020
         A     LOCTR,PIOPARMB           BUMP PTR PAST MDV               21960020
         CLC   SAVOPTLN(D4),=D'0'       SEE IF OPSYN TABLE REQ'D        22020020
         BZ    SKPOPSYN                 BRANCH IF NOT                   22080020
         ST    LOCTR,PIOPARMA           SET UP I/O AREA POINTER         22140020
         ST    LOCTR,OPSNSTRT           SET UP OPSYN TABLE POINTER      22170020
         MVC   PIOPARMB,SAVOPTLN        SET UP OPSYN TABLE LENGTH       22200020
         JPOINT FILE=FILE2,ADDR=SAVOPTNP,NEXT=READ POINT TO OPSYN TBL   22260020
         LH    R5,JMAXRL2               GET MAX RECD LNGT FOR FILE      22320020
         LA    R6,FILE2                 GET FILE INDICATOR              22380020
         BAL   RTNLNK,BUFREAD           GO FETCH OPSYN TABLE            22440020
         A     LOCTR,PIOPARMB           BUMP PTR PAST OPSYN TABLE       22500020
SKPOPSYN EQU   *                                                        22560020
         ST    LOCTR,GDSTRT             SAVE AS GBL DICT PTR            22620020
         MVC   JFWORD1,SAVGDLNT         GET LENGTH OF GBL DICT          22680020
         L     WORK1,JFWORD1            PICK IT UP FOR CLEARING DICT    22740020
         LR    WORKA,LOCTR              SET UP PTR TO AREA TO CLEAR     22800020
         LA    WORKB,D1(,WORKA)         SET UP DESTINATION POINTER      22860020
         MVI   D0(WORKA),J0             INSERT CHARACTER TO PROPAGATE   22920020
         BAL   RETURN,MOVLOP            GO CLEAR OUT AREA               22980020
         USING GSYSVALS,LOCTR                                           23040020
         L     WORK2,JSYSPARM           PICK UP SYSPARM PTR IN COMMON   23100020
         LTR   WORK2,WORK2              SEE IF SYSPARM SPECIFIED        23160020
         BZ    SKIPPARM                 BRANCH IF NOT                   23220020
         IC    WORK3,D0(,WORK2)         PICK UP SYSPARM LENGTH          23280020
         STC   WORK3,PARMLEN            INSERT IN SYSPARM ENTRY         23340020
         CLI   PARMLEN,L'PARMVAL        SEE IF LENGTH OVER 8            23400020
         BH    SKIPPARM                 IF YES, LEAVE POINTER ZERO      23460020
         BCTR  WORK3,D0                 OTHERWISE, GET MOVE LENGTH      23520020
         EX    WORK3,SYSPMOVE           MOVE SYSPARM VALUE INTO ENTRY   23580020
SKIPPARM EQU   *                                                        23640020
         LA    WORK3,L'JSYSTIME         GET LENGTH FOR SYSTIME ENTRY    23700020
         STC   WORK3,TIMELEN            INSERT IN DICTIONARY            23760020
         MVC   TIMEVAL(L'JSYSTIME),JSYSTIME INSERT SYSTIME VALUE        23820020
         LA    WORK3,L'JSYSDATE         GET LENGTH FOR SYSDATE ENTRY    23880020
         STC   WORK3,DATELEN            INSERT IN DICTIONARY            23940020
         MVC   DATEVAL(L'JSYSDATE),JSYSDATE  INSERT SYSDATE VALUE       24000020
         A     LOCTR,JFWORD1            BUMP PTR PAST GLOBAL DICT       24060020
         CLC   SAVOSDLN(D4),=D'0'       SEE IF OSRD LENGTH FOR READ     24120020
         BZ    SKPOSRD                  BRANCH IF YES                   24180020
         MVC   PIOPARMB,SAVOSDLN        PICK UP OSRD LENGTH FOR READ    24240020
         ST    LOCTR,PIOPARMA           SET UP TO READ IN OSRD          24300020
         ST    LOCTR,OSRDSTRT           SAVE AS OSRD PTR                24360020
         JPOINT FILE=FILE2,ADDR=SAVOSDNP,NEXT=READ POINT TO OSRD        24420020
         LH    R5,JMAXRL2               SET UP MAXIMUM RECORD THIS FILE 24480020
         LA    R6,FILE2                 SET UP FILE POINTER             24540020
         BAL   RTNLNK,BUFREAD           GO GET OSRD FROM FILE 2         24600020
         A     LOCTR,PIOPARMB           BUMP PTR PAST OSRD              24660020
SKPOSRD  EQU   *                                                        24720020
         ST    LOCTR,OVLYSTRT           SAVE AS DICT AREA START PTR     24780020
         BAL   RETURN,OVERLP4B          GO DUMP INTERLUDE ERRORS        25280020
         ST    LOCTR,SPACEAL            SET UP FREE SPACE LOW ADDR      25920020
         LCR   WORK1,LOCTR              GET COMPLEMENT FOR CALCULATE    25980020
         A     WORK1,SPACEAH            COMPUTE LENGTH OF FREE SPACE    26040020
         ST    WORK1,SPACEAE            SAVE FREE SPACE LENGTH          26100020
         ST    LOCTR,PIOPARMA           SET UP TO READ O.C. SKEL DICT   26160020
         L     PARMA,MDVSTRT            GET PTR TO OPEN CODE ENTRY      26220020
         USING MDVNTRY,PARMA                                            26280020
         CLC   MNPSD,=D'0'              SEE IF OPEN CODE OVERFLOWED     26300020
         BZ    OVERLP4F                 BRANCH IF IT DID                26320020
         MVC   PIOPARMB+(L'PIOPARMB-L'MSDL)(L'MSDL),MSDL               X26340020
               SET UP LENGTH OF O.C. SKELETON DICTIONARY                26400020
         L     R0,PIOPARMB              LENGTH OF SKEL DICTIONARY       26460020
         C     R0,SPACEAE               CHECK FOR SPACE OVERLAP         26479620
         BNL   OVERLP4C                 BRANCH IF OVERLAP FOUND         26520020
         LCR   R0,R0                    SUBTRACT LENGTH FROM            26570020
         A     R0,SPACEAE               FREE SPACE                      26572020
         ST    R0,SPACEAE                                               26574020
         ST    LOCTR,CURRDICT           SAVE AS CURRENT DICT PTR        26580020
         BAL   RETURN,DCTFETCH          GO TO BRING IN SKEL DICT        26640020
         USING SKDCTHDR,LOCTR                                           26700020
         MVC   HIBYTE0+(L'HIBYTE0-L'SKLDLNG)(L'SKLDLNG),SKLDLNG        X26760020
               GET LOCAL DICTIONARY SIZE                                26820020
         L     R0,HIBYTE0               AND PICK IT UP                  26880020
         CL    R0,SPACEAE               CHECK FOR SPACE OVERLAP         26940020
         BNL   OVERLP4C                 BRANCH IF OVERLAP FOUND         27000020
         BAL   RETURN,PTRINIT           GO TO SET UP DICT POINTERS      27060020
         CLC   CURRLOCL,SPACEAL         SEE IF ANY LOCAL DICT ALLOCTD   27120020
         BNL   NOLCLOC                  BRANCH IF NOT                   27180020
         LR    WORK1,R0                 GET LCL DICT LENGTH FOR MOVLOP  27210020
         BAL   RETURN,LOCLINIT           INITIALIZE LOCAL DICTIONARY    27240020
NOLCLOC  EQU   *                                                        27300020
NOLOCAL  EQU   *                                                        27360020
         MVC   ACTRCNT,=F'4096'         INITIATE ACTR COUNT             27420020
         B     OVERLP4E                 BRANCH TO REPOSITION TEXT       27440020
OVERLP4A LA    RETURN,OVERLP4C          SET UP FOR FULSH EXIT,SEQUENCE  27460020
OVERLP4B ST    RETURN,REGSAVEB          PRESERVE LINK REGISTER          27480020
         JPOINT FILE=FILE2,NEXT=START   REPOSITION TEXT OUTPUT FILE     27500020
         MVC   D0(L'JNOTEVAL,LOCTR),SAVERRNP SET UP N/P CHAIN           27520020
         ST    LOCTR,PIOPARMA           SET UP I/O AREA POINTER         27540020
         MVC   PIOPARMB,=F'190'         SET UP ERROR BLOCK LENGTH       27560020
INLP     CLC   D0(L'JNOTEVAL,LOCTR),=D'0'   SEE IF ANY ERROR BLOCKS     27580020
         L     RETURN,REGSAVEB          RESTORE LINK REGISTER           27600020
         BZR   RETURN                   BRANCH IF NOT                   27620020
         JPOINT FILE=FILE1,ADDR=(LOCTR),NEXT=READ POINT TO ERROR BLOCK  27640020
         LH    R5,JMAXRL1               SET UP MAX RCD LENGTH FOR FILE  27660020
         LA    R6,FILE1                 SET UP FILE INDICATOR           27680020
         BAL   RTNLNK,BUFREAD           GO FETCH ERROR BLOCK            27700020
         LA    EPTR,L'JNOTEVAL(,LOCTR)  GET PTR TO ERROR RECORD         27720020
         USING JTEXT,EPTR                                               27740020
OUTLP    CLC   JTRLI,=H'0'              LOOK FOR END OF BLOCK FLAG      27760020
         BE    INLP                     BRANCH IF FOUND                 27780020
         JPUTM FILE=FILE2,ADDR=(EPTR)   PUT ERROR,RCD TO TXT FILE       27800020
         LA    EPTR,D36(,EPTR)          BUMP TO NEXT ERROR RECORD       27820020
         B     OUTLP                    GO BACK TO HANDLE NEXT ONE      27840020
OVERLP4C JPUTM FILE=FILE2,ADDR==AL1(D0,D12,JPSOP,JNOCNT,JTERROR,D0,D0,DX27860020
               0,D0,SEV89,ERR89,D0) PUT ERROR RECORD INTO TEXT FILE     27880020
         SET   INMACRO,OFF              INDICATE NOT IN MACRO NEST      27900020
OVERLP4D SET   FLUSH2,ON                INDICATE TEXT TO BE FLUSHED     27920020
OVERLP4E JPOINT FILE=FILE1,ADDR=SAVOVFPT,NEXT=WRITE                    X27940020
               POINT TO END OF FILE PRIOR TO REWIND                     27960020
         JPOINT FILE=FILE1,NEXT=START   REWIND TEXT FILE FOR GENERATOR  27980020
         B     DICTEXIT                 RETURN TO GENERATOR             28000020
OVERLP4F JPUTM FILE=FILE2,ADDR==AL1(D0,D12,JPSOP,JNOCNT,JTERROR,D0,D0,DX28020020
               0,D0,SEV133,ERR133,D0) PUT ERROR RECORD INTO TEXT FILE   28040020
         B     OVERLP4D                 GO SET FLUSH SWITCH,ETC.        28060020
         USING GSYSVALS,LOCTR                                           28140020
SYSPMOVE MVC   PARMVAL(D0),D1(WORK2)    EXECUTED SYSPARM MOVE           28200020
         DROP  LOCTR                                                    28260020
         DROP  EPTR                                                     28320020
         DROP  PARMA                                                    28380020
         EJECT                                                          28440020
*MACRCALL - THIS ROUTINE IS CALLED WHEN A MACRO INSTRUCTION IS        * 28500020
*   ENCOUNTERED. ITS FUNCTION IS TO PERFORM THE INITIALIZATION        * 28560020
*   REQUIRED TO BEGIN PARAMETER PROCESSING AND TO SUBSEQUENTLY        * 28620020
*   FETCH THE SKELETON DICTIONARY FOR THE MACRO DEFINITION.           * 28680020
*        INPUT - A POINTER IN R10 TO THE MACRO DEFINITION VECTOR      * 28740020
*                POINTER IN THE MACRO INSTRUCTION.                    * 28800020
*        OUTPUT - ON VALID MACRO CALL, R11 SET TO ZERO.               * 28860020
*                 ON UNDEFINED OP CODE, R11,SET TO VALUE INDICATING   * 28920020
*                 REASON FOR NON-DEFINITION.                          * 28980020
*                                                                     * 29040020
MACRCALL EQU   *                                                        29100020
         USING MCRCAL,PARMA                                             29160020
         MVC   HIBYTE0+(L'HIBYTE0-L'MDVPNT)(L'MDVPNT),MDVPNT           X29220020
               SAVE MDV PTR FROM TEXT FOR CURRENT AND LATER USE         29280020
         L     MDVPTR,MDVSTRT           GET BASE PTR TO MDV             29340020
         A     MDVPTR,HIBYTE0           DEVELOP PTR TO PROPER MDV SLOT  29400020
         ST    MDVPTR,MDVPTRSV          SAVE THIS POINTER FOR LATER     29460020
         USING MDVNTRY,MDVPTR                                           29520020
         SR    PARMB,PARMB              CLEAR RTN REG. CALL ASSUMED OK  29580020
         CLC   MNPTXT,=D'0'             CHECK FOR INVALID OP CODE       29640020
         BZ    BADCALL                  IF INVALID, BRANCH              29700020
         MVC   PPARMCNT,=F'-1'          INITIALIZE POSITIONAL COUNT     29760020
         XC    PRMTBLDS(L'PRMTBLDS+L'PVECTDIS+L'KVECTDIS+L'KCHANPTR),PRX29820020
               MTBLDS INITIALIZE OTHER CRUCIAL PARAMETER PROCESS VALUES 29880020
         MVI   PRMSWTCH,J0              INITIALIZE PARAMETER SWITCHES   29940020
         B     DICTEXIT                 RETURN                          30000020
BADCALL  IC    PARMB,MSDL+(L'MSDL-D1)   PICK UP FLAG FOR INVALID TYPE   30060020
         B     DICTEXIT                 RETURN                          30120020
         DROP  PARMA                                                    30180020
         DROP  MDVPTR                                                   30240020
         EJECT                                                          30300020
*CALLEND - THIS ROUTINE IS CALLED WHEN THE END-OF-PARAMETERS RECORD   * 30360020
*   IS ENCOUNTERED FOLLOWING A MACRO INSTRUCTION. ITS FUNCTION IS     * 30420020
*   TO NOTE AND SAVE THE TEXT RESUMPTION POINT FOR THE CURRENT TEXT   * 30480020
*   SEGMENT AND TO POSITION THE TEXT FILE TO THE START OF THE MACRO   * 30540020
*   DEFINITION TEXT SEGMENT.                                          * 30600020
*        INPUT - NONE.                                                * 30660020
*        OUTPUT - NONE.                                               * 30720020
*                                                                     * 30780020
CALLEND  EQU   *                                                        30840020
         JNOTE FILE=FILE1               NOTE TEXT FILE AT END OF CALL   30900020
         MVC   NOTESAVE,JNOTEVAL        SAVE N/P  TEMPORARILY           30960020
         L     MDVPTR,MDVPTRSV          GET PTR TO MDV ENTRY CALLED     31020020
         USING MDVNTRY,MDVPTR                                           31080020
         JPOINT FILE=FILE1,ADDR=MNPTXT,NEXT=GET POINT TO START OF TEXT  31140020
         B     DICTEXIT                 RETURN                          31200020
         DROP  MDVPTR                                                   31260020
         EJECT                                                          31320020
*MACRKWRD - THIS ROUTINE IS CALLED WHEN A KEYWORD PARAMETER RECORD    * 31380020
*   IS ENCOUNTERED FOLLOWING A MACRO INSTRUCTION. ITS FUNCTION IS     * 31440020
*   TO ADD THE PARAMETER VALUE TO THE KEYWORD PARAMETER CHAIN IN      * 31500020
*   PARAMETER TABLE.                                                  * 31560020
*        INPUT - A POINTER IN R10 TO THE PARAMETER RECORD.            * 31620020
*              - A POINTER IN R11 TO THE PARAMETER VALUE LENGTH       * 31680020
*                ( 1 BYTE) FOLLOWED BY THE PARAMETER VALUE CHARACTER  * 31740020
*                STRING (1-255 BYTES).                                  31800020
*        OUTPUT - NONE.                                               * 31860020
*                                                                     * 31920020
MACRKWRD EQU   *                                                        31980020
         SET   KEYFLG,ON                INDICATE KEYWORD PARAMETER      32040020
         L     PTPTR,PRMTBLAD           GET PTR TO BASE OF PARAM TABLE  32100020
         A     PTPTR,PRMTBLDS           GET PTR TO NEXT PARAM SLOT      32160020
         L     PVEPTR,PVECTPTR          GET PTR TO BASE OF POSIT VECTR  32220020
         S     PVEPTR,PVECTDIS          GET PTR TO END OF VECTOR        32280020
         S     PVEPTR,KVECTDIS          ALLOW FOR KEYWORDS UP TO HERE   32340020
         LR    OVLPTR,PTPTR             SET UP PTR FOR OVERLAP CHECK    32400020
         SR    VALLEN,VALLEN            CLEAR KEYWORD/VALUE LENGTH      32460020
         USING JTEXT,PARMA                                              32520020
         LH    TXTPTR,JTOPP             GET DISPL TO OPERAND FIELD      32580020
         AR    TXTPTR,PARMA             GET PTR TO OPERAND FIELD        32640020
         SH    TXTPTR,=H'5'              BACK UP TO START OF HEADER     32700020
         TM    D0(TXTPTR),OPNDSUB+OPNDSUBF BYPASS KEYWORD ENTRY IF NOT  32760020
         BM    MP0                      OPERAND OR FIRST SUBOPERAND     32820020
MK1      LA    WORKA,D5(,TXTPTR)        GET PTR TO OPERAND FIELD        32880020
         IC    VALLEN,D1(,WORKA)        GET KEYWORD LENGTH              32940020
         LA    OVLPTR,D5(VALLEN,OVLPTR) MAKE OVERLAP CALCULATION        33000020
         CLR   OVLPTR,PVEPTR            AND CHECK FOR OVERLAP           33060020
         BH    OVERLAP1                 BRANCH IF PARAM WON'T FIT       33120020
         MVC   D0(D4,PTPTR),KCHANPTR    PUT KEYWORD CHAIN PTR IN TBL    33180020
         LA    PTPTR,D0(,PTPTR)         MAKE FIRST BYTE ZERO            33230020
         ST    PTPTR,KCHANPTR           UPDATE KEYWORD CHAIN PTR        33420020
         EX    VALLEN,KEYMOVE           PUT KEYWORD LEN,KEYWORD IN TBL  33480020
         LA    PTPTR,D5(VALLEN,PTPTR)   UPDATE PARAMETER TABLE PTR      33540020
         SR    VALLEN,VALLEN            INSURE ZERO LENGTH REG          33570020
         B     MP0                      CONTINUE AS POSITIONAL PARAM    33600020
KEYMOVE  MVC   D4(D0,PTPTR),D1(WORKA)   EXECUTED KEYWORD MOVE           33660020
         DROP  PARMA                                                    33720020
         EJECT                                                          33780020
*MACRPOST - THIS ROUTINE IS CALLED WHEN A POSITIONAL PARAMETER        * 33840020
*   RECORD IS ENCOUNTERED FOLLOWING A MACRO INSTRUCTION. ITS FUNCTION * 33900020
*   IS TO ADD THE PARAMETER VALUE TO THE PARAMETER TABLE AND TO       * 33960020
*   MAKE AN ENTRY IN THE POSITIONAL VECTOR.                           * 34020020
*        INPUT - A POINTER IN R10 TO THE PARAMETER RECORD.            * 34080020
*              - A POINTER IN R11 TO THE PARAMETER VALUE LENGTH       * 34140020
*                ( 1 BYTE) FOLLOWED BY THE PARAMETER VALUE CHARACTER  * 34200020
*                STRING (1-255 BYTES).                                * 34260020
*        OUTPUT - NONE.                                               * 34320020
*                                                                     * 34380020
MACRPOST EQU   *                                                        34440020
         SET   KEYFLG,OFF               INDICATE POSITIONAL PARAM       34500020
         L     PTPTR,PRMTBLAD           GET PTR TO BASE OF PARAM TABLE  34560020
         A     PTPTR,PRMTBLDS           GET PTR TO NEXT PARAM SLOT      34620020
         L     PVEPTR,PVECTPTR          GET PTR TO BASE OF POSIT VECTR  34680020
         S     PVEPTR,PVECTDIS          GET PTR TO END OF VECTOR        34740020
         LR    OVLPTR,PTPTR             SET UP PTR FOR OVERLAP CHECK    34800020
         SR    VALLEN,VALLEN            CLEAR VALUE LENGTH              34860020
         USING JTEXT,PARMA                                              34920020
         LH    TXTPTR,JTOPP             GET DISPL TO OPERAND FIELD      34980020
         AR    TXTPTR,PARMA             GET PTR TO OPERAND FIELD        35040020
         SH    TXTPTR,=H'5'             BACK UP TO START OF HDR DATA    35100020
MP0      TM    D0(TXTPTR),OPNDSUB+OPNDSUBF LOOK FOR SUBOPERAND FLAGS    35160020
         BZ    MP2                      BRANCH IF NOT SUBOPERAND        35220020
         BM    MP3                      BRANCH IF NOT FIRST SUBOPER     35280020
         XC    SUBCNT(L'SUBCNT+L'SUBLEN+L'SUBVCTDS),SUBCNT             X35340020
               INITIALIZE SUBOPERAND PROCESSING VALUES                  35400020
MP2      ST    PTPTR,PRMPTRSV           SAVE POINTER TO STRT OF PARAM   35460020
MP3      TM    D0(TXTPTR),OPNDPRM       SEE IF PARAM PASSED FROM OUTER  35520020
         BO    MP3B                     BRANCH IF THE CASE              35580020
         TM    D0(TXTPTR),OPNDOMT       SEE IF OMITTED OPERAND. IF SO,  35640020
         BO    MP3A                     SKIP PICK UP OF VALUE LENGTH    35700020
         IC    VALLEN,D0(,PARMB)        PICK UP LENGTH OF PARAM VALUE   35760020
MP3A     LA    OVLPTR,D7(VALLEN,OVLPTR) MAKE OVERLAP CALCULATION        35850020
         CLR   OVLPTR,PVEPTR            SEE IF PARAMETER WILL FIT       35940020
         BH    OVERLAP2                 BRANCH IF NOT                   36000020
MP3B     TM    D0(TXTPTR),OPNDSUB+OPNDSUBF LOOK FOR SUBOPERAND FLAGS    36060020
         BZ    MP5                      BRANCH IF NOT SUBOPERAND        36120020
         BM    MP4                      BRANCH IF NOT FIRST SUBOPERAND  36180020
         LA    OVLPTR,D13(,OVLPTR)      DEVELOP POSSIBLE OVERLAP PTR    36240020
         CLR   OVLPTR,PVEPTR            CHECK IF OVERLAP MAY OCCUR      36300020
         BH    OVERLAP2                 BRANCH IF YES                   36360020
         MVC   D0(D13,PTPTR),=X'80000000000000000000000000'            X36420020
               PUT SUBLIST HEADER IN TO PARAM TABLE                     36480020
         LA    PTPTR,D13(,PTPTR)        ALLOW FOR SUBLIST HEADER        36540020
MP4      LR    WORKA,PVEPTR             GET POSIT VECTOR PTR FOR CALC   36600020
         S     WORKA,SUBVCTDS           DISPL TO END OF SUBLIST VECTOR  36660020
         SH    WORKA,=H'3'              ADJUST FOR ENTRY TO BE MADE     36720020
         LR    WORKB,PTPTR              GET PARAM TBL POINTER           36780020
         S     WORKB,PRMPTRSV           GET REL PTR TO SUBOPERAND       36840020
         ST    WORKB,HIBYTE0            SAVE COMPUTED DISPL             36900020
         MVC   D0(D3,WORKA),HIBYTE0+D1  INSERT IN SUBLIST VECTOR ENTRY  36960020
         LR    WORKB,PVEPTR             GET PTR TO PARAM VCTR END       37020020
         SR    WORKB,WORKA              GET NEW DISPL FOR SUBLST VCTR   37080020
         ST    WORKB,SUBVCTDS           SAVE DISPL FOR NEXT TIME        37140020
MP5      TM    D0(TXTPTR),OPNDPRM       SEE IF PARAM PASSED FROM OUTER  37200020
         BO    MP12                     BRANCH IF THE CASE              37260020
         TM    D0(TXTPTR),OPNDOMT       SEE IF OMITTED OPERAND          37320020
         BZ    MP6                      BRANCH IF NOT THE CASE          37380020
MPOMIT   MVC   D0(D8,PTPTR),=AL1(OPNDOMT,JO,J0,J1,J0,J0,X'60',J0)      X37440020
               SET ENTRY TYPE FLAG, ATTRIBUTES, AND LENGTH      OX00049 37500020
         LA    PTPTR,D8(,PTPTR)         ADJUST PARAM TBL POINTER        37560020
         B     MP9                      GO FINISH UP WITH THIS PARAM    37620020
MP6      TM    D0(TXTPTR),OPNDSTR       SEE IF CHARACTER STRING         37680020
         BZ    MP7                      BRANCH IF NOT THE CASE          37740020
         TM    D0(TXTPTR),OPNDORD       CHECK FOR COMPOS OPERAND        37750020
         BZ    MP6B                     BRANCH IF SIMPLE STRING         37760020
         MVI   D0(PTPTR),OPNDSTR        PUT IN STRING FLAG              37770020
         B     MP8A                     GO HANDLE AS ORD SYMBOL REFER   37780020
MP6B     LTR   VALLEN,VALLEN            IF NULL STRING          OX00049 37790020
         BZ    MPOMIT                   OMITTED OPERAND         OX00049 37800020
         MVC   D0(D7,PTPTR),=AL1(OPNDSTR,JU,J0,J1,J0,J0,X'60')  OX00049X37820020
               SET ENTRY TYPE FLAG AND ATTRIBUTES               OX00049 37860020
         LA    PTPTR,D7(,PTPTR)         ADJUST PARAM TBL POINTER        37890020
MP6A     EQU   *                                                        37920020
         EX    VALLEN,STRINGMV          INSERT VALUE LENGTH, VALUE      37980020
         LA    PTPTR,D1(VALLEN,PTPTR)   ADJUST PARAM TBL POINTER        38040020
         B     MP9                      GO FINISH UP WITH THIS PARAM    38100020
MP7      TM    D0(TXTPTR),OPNDTRM       SEE IF SELF-DEFINING TERM       38160020
         BZ    MP8                      BRANCH IF NOT THE CASE          38220020
         MVC   D0(D2,PTPTR),=AL1(OPNDTRM,JN) SET ENTRY TYPE FLAG,ATTRS  38280020
         MVC   D2(D4,PTPTR),D1(TXTPTR)  INSERT BINARY VALUE             38340020
         LA    PTPTR,D7(,PTPTR)         ADJUST PARAM TBL POINTER        38370020
         B     MP6A                     GO HANDLE VALUE                 38400020
MP8      MVI   D0(PTPTR),OPNDORD        INSERT TYPE FLAG (ORDINARY SYM) 38460020
         USING ORDREF,TXTPTR                                            38520020
MP8A     EQU   *                                                        38550020
         MVC   HIBYTE0+(L'HIBYTE0-L'ORDPNT)(L'ORDPNT),ORDPNT           X38580020
               PICK UP DICTIONARY POINTER FROM META TEXT                38640020
         L     WORKA,HIBYTE0            GET IT FOR POINTER CALCULATION  38700020
         CLC   OSRDSTRT,=D'0'           SEE IF ANY OSRD PRESENT         38720020
         BZ    MP8NG                    BRANCH IF NOT                   38740020
         A     WORKA,OSRDSTRT           DEVELOP PTR TO DICT ENTRY       38760020
         MVC   D1(D6,PTPTR),D0(WORKA)   PULL ACROSS ORDINARY SYMB ATTR  38820020
         LA    PTPTR,D7(,PTPTR)         ADJUST PARAM TBL POINTER        38850020
         B     MP6A                     GO HANDLE VALUE                 38880020
MP8NG    MVC   D1(D6,PTPTR),=AL1(JU,J0,J1,J0,J0,X'E0')   DEFAULT        38900020
         LA    PTPTR,D6(,PTPTR)         ADJUST PARAM TBL POINTER        38910020
         B     MP6A                     GO ON WITH PROCESS              38920020
MP9      TM    D0(TXTPTR),OPNDSUB       LOOK FOR SUBOPERAND FLAG        38940020
         BZ    MP10                     BRANCH IF NOT SUBOPERAND        39000020
         LH    WORKA,SUBCNT             GET CURRENT SUBOPERAND COUNT    39060020
         LA    WORKA,D1(,WORKA)         INCREMENT BY ONE                39120020
         STH   WORKA,SUBCNT             SAVE NEW COUNT                  39180020
         LH    WORKA,SUBLEN             GET CURRENT SUBLIST LENGTH      39240020
         AR    WORKA,VALLEN             INCREMENT BY SUBOPERAND LENGTH  39300020
         STH   WORKA,SUBLEN             SAVE NEW LENGTH                 39360020
         TM    D0(TXTPTR),OPNDSUBL      LOOK FOR LAST SUBOPER FLAG      39420020
         BZ    MP11                     BRANCH IF NOT LAST SUBOPER      39480020
         L     WORKA,PRMPTRSV           GET PTR TO SUBLIST HEADER       39540020
         MVC   D6(L'SUBCNT+L'SUBLEN,WORKA),SUBCNT INSERT SUBOPERAND    X39600020
               COUNT AND SUBLIST LENGTH IN HEADER DATA                  39660020
         MVC   D1(D5,WORKA),D14(WORKA)  INSERT ATTRIBUTES OF FIRST     X39720020
               SUBOPERAND AS ATTRIBUTES OF SUBLIST                      39780020
         LR    WORKB,PTPTR              GET PTR TO PARAM TABLE          39840020
         SR    WORKB,WORKA              GET LENGTH OF SUBLIST ENTRY     39900020
         A     WORKB,SUBVCTDS           GET DISPL TO SUBLIST VCTR STRT  39960020
         ST    WORKB,JFWORD1            SAVE DISPL TO SUBLIST VECTOR    40020020
         MVC   D10(D3,WORKA),JFWORD1+D1 INSERT INTO SUBLIST HEADER      40080020
         L     WORK1,SUBVCTDS           GET LENGTH OF SUBLIST VECTOR    40140020
         LR    WORKA,PVEPTR             GET PTR TO END OF SUBLST VCTR   40200020
         SR    WORKA,WORK1              GET PTR TO STRT OF SUBLST VCTR  40260020
         LR    WORKB,PTPTR              GET PTR TO PARAM TABLE          40320020
         BAL   RETURN,MOVLOP            GO MERGE VECTOR WITH SUBLIST    40380020
         A     PTPTR,SUBVCTDS           ADJUST PTR FOR SUBLIST VECTOR   40440020
MP10     GOIF  KEYFLG,ON=MP11           BRANCH IF KEYWORD OPERAND       40500020
         L     WORKA,PRMPTRSV           GET PTR TO PARAMETER START      40560020
         S     WORKA,PRMTBLAD           GET DISPL TO PARAM IN TABLE     40620020
         SH    PVEPTR,=H'3'             GET PTR TO NEXT VECTOR ENTRY    40680020
         ST    WORKA,HIBYTE0            SAVE DISPL TO PARAM ENTRY       40740020
         MVC   D0(D3,PVEPTR),HIBYTE0+D1 AND PUT INTO VECTOR ENTRY       40800020
         L     WORKA,PVECTPTR           PICK UP PARAM VECTOR BASE       40860020
         SR    WORKA,PVEPTR             GET DISPL TO NEW END OF VECTOR  40920020
         ST    WORKA,PVECTDIS           SAVE DISPLACEMENT               40980020
         L     WORKA,PPARMCNT           GET CURRENT POSIT PARAM COUNT   41040020
         LA    WORKA,D1(,WORKA)         INCREMENT BY ONE                41100020
         ST    WORKA,PPARMCNT           SAVE NEW COUNT                  41160020
MP11     S     PTPTR,PRMTBLAD           GET NEW PARAM TBL LENGTH        41220020
         ST    PTPTR,PRMTBLDS           SAVE DISPL                      41280020
         B     DICTEXIT                 RETURN                          41340020
MP12     GOIF  PASSPARM,ON=MP12A        GO TO HANDLE PARAM AS PARAM     41350020
         IC    VALLEN,D0(,PARMB)        PICK UP LENGTH OF PARAM STRING  41360020
         LA    OVLPTR,D7(VALLEN,OVLPTR) CALCULATE OVERLAP POINTER       41370020
         CLR   OVLPTR,PVEPTR            SEE IF OVERLAP OCCURRED         41380020
         BH    OVERLAP2                 BRANCH IF SO. OTHERWISE,        41390020
         B     MP6B                     HANDLE PARAM AS STRING          41400020
MP12A    EQU   *                                                        41410020
         TM    D0(PARMB),OPNDSUB        SEE IF PASSING A SUBLIST        41460020
         BZ    MP13                     BRANCH IF NOT SUBLIST           41520020
         MVC   HIBYTE0+D1(D3),D10(PARMB) PICK UP PTR TO SUBLIST VCTR    41580020
         L     WORK1,HIBYTE0            GET IT AS SUBLIST LENGTH        41640020
         B     MP13A                    GO CHECK FOR OVERLAP CONDITION  41760020
MP13     IC    VALLEN,D7(,PARMB)        PICK UP VALUE LENGTH            41820020
         LA    WORK1,D8(,VALLEN)        GET WHOLE PARAMETER LENGTH      41880020
MP13A    LA    OVLPTR,D3(WORK1,OVLPTR)  DEVELOP OVERLAP PTR             41940020
         CLR   OVLPTR,PVEPTR            CHECK FOR POSSIBLE OVERLAP      42000020
         BH    OVERLAP2                 BRANCH IF YES                   42060020
         LR    R0,WORK1                 PRESERVE PARAMETER LENGTH       42120020
         LR    WORKA,PARMB              GET PTR TO PARAMETER VALUE      42180020
         LR    WORKB,PTPTR              GET PTR TO PARAMETER TABLE      42240020
         BAL   RETURN,MOVLOP            GO TO PUT PARAM VALUE IN TABLE  42300020
         AR    PTPTR,R0                 ADJUST PTR FOR PARAM VALUE      42360020
         SET   PASSPARM,OFF             CLEAN UP PASSED PARAM SWITCH    42390020
         B     MP9                      GO FINISH UP WITH THIS PARAM    42420020
STRINGMV MVC   D0(D0,PTPTR),D0(PARMB)   EXECUTE PARM VALUE MOVE         42480020
OVERLAP1 EQU   *                                                        42540020
OVERLAP2 EQU   *                                                        42600020
         SET   (CALLING,NOCALL),FLIP    RESET SWITCHES FOR REST OF CALL 42660020
         SET   DEFLG,OFF                SET FLAG FOR DEFAULT OVERLAP    42720020
         BAL   R2,ERRRTN                GO TO LOG ERROR AND FIX COUNT   42780020
         B     DICTEXIT                 RETURN TO GENERATOR             42840020
         DROP  PARMA                                                    42900020
         DROP  TXTPTR                                                   42960020
         EJECT                                                          43020020
* PROTOKWD - THIS ROUTINE IS CALLED WHEN A KEYWORD PARAMETER RECORD   * 43080020
*   IS ENCOUNTERED FOLLOWING A PROTOTYPE STATEMENT. ITS FUNCTION IS   * 43140020
*   TO ADD THE DEFAULT PARAMETER VALUE TO THE KEYWORD PARAMETER       * 43200020
*   CHAIN IN THE PARAMETER TABLE IF THE KEYWORD PARAMETER WAS NOT     * 43260020
*   SPECIFIED ON THE MACRO INSTRUCTION. IT ALSO MAKES AN ENTRY IN     * 43320020
*   THE KEYWORD VECTOR.                                               * 43380020
*        INPUT - A POINTER IN R10 TO THE PARAMETER RECORD.            * 43440020
*              - A POINTER IN R11 TO THE PARAMETER VALUE LENGTH       * 43500020
*                ( 1 BYTE) FOLLOWED BY THE PARAMETER VALUE CHARACTER  * 43560020
*                STRING (1-255 BYTES).                                * 43620020
*        OUTPUT - NONE.                                               * 43680020
*                                                                     * 43740020
PROTOKWD EQU   *                                                        43800020
         USING JTEXT,PARMA                                              43860020
         LH    KEYPTR,JTOPP             GET DISPL TO OPERAND FIELD      43920020
         AR    KEYPTR,PARMA             GET PTR TO STRT OF OPRND FIELD  43980020
         GOIF  BYFLG,ON=PK8             BRANCH IF BYPASS FLAG ON        44040020
         GOIF  ENFLG,ON=PK7             BRANCH IF ENTRY FLAG ON         44100020
         SET   PREVDEF,OFF              INITIALIZE DUPLICATION SWITCH   44160020
         SR    KEYLEN,KEYLEN            CLEAR REG FOR KEYWORD LENGTH    44220020
         IC    KEYLEN,D1(,KEYPTR)       PICK UP KEYWORD LENGTH          44280020
         BCTR  KEYLEN,D0                DROP AMPERSAND                  44340020
         STC   KEYLEN,KEYLENSV          SAVE FOR LENGTH COMPARISON      44400020
         BCTR  KEYLEN,D0                GET MOVE LENGTH OF KEYWORD      44460020
         L     KEYCHAIN,KCHANPTR        PICK UP KEYWORD CHAIN POINTER   44520020
PK1      LTR   KEYCHAIN,KEYCHAIN        SEE IF CHAIN PTR ZERO (END)     44580020
         BZ    PK5                      BRANCH IF END TO ENTER DEFAULT  44640020
         TM    D0(KEYCHAIN),BIT0        LOOK FOR PROCESSED INDICATOR    44700020
         BO    PK2                      BRANCH IF ON TO GET NEXT ENTRY  44760020
         CLC   KEYLENSV,D4(KEYCHAIN)    COMPARE KEYWORD LENGTHS         44820020
         BNE   PK2                      BRANCH IF UNALIKE TO GET NEXT   44880020
         EX    KEYLEN,KEYCOMP           COMPARE KEYWORDS                44940020
         BE    PK3                      BRANCH IF IDENTICAL             45000020
PK2      MVC   HIBYTE0(D4),D0(KEYCHAIN) GET CHAIN PTR FROM ENTRY        45060020
         NI    HIBYTE0,BITFF-BIT0       STRIP OUT HIGH BIT IF THERE     45120020
         L     KEYCHAIN,HIBYTE0         MAKE IT THE NEW CHAIN POINTER   45180020
         B     PK1                      GO BACK TO CONTINUE SEARCH      45240020
PK3      GOIF  PREVDEF,ON=KDUPLERR      BRANCH IF MATCH ALREADY FOUND   45300020
         SET   PREVDEF,ON               INDICATE INITIAL MATCH          45360020
         LR    WORKX,KEYPTR             SET UP OPERAND FIELD PTR        45420020
         SH    WORKX,=H'5'              GET PTR TO START OF HEADER      45480020
         TM    D0(WORKX),OPNDSUB+OPNDSUBF+OPNDSUBL                     X45520020
               CHECK SUBOPERAND FLAGS                                   45560020
         BNM   PK4                      BRANCH IF NOT SUBOPERAND (NTH)  45600020
         SET   BYFLG,ON                 SET BYPASS FLAG ON              45660020
PK4      EQU   *                                                        45720020
         BAL   R9,KWDEND                GO TO FINISH KEYWORD ENTRY      46020020
         B     PK2                      GO BACK TO COMPLETE SCAN        46460020
PK5      GOIF  PREVDEF,ON=DICTEXIT      DONT ENTER DEFALT OF DUPLICATE  46500020
         LR    WORKX,KEYPTR             SET UP OPERAND FIELD PTR        46560020
         SH    WORKX,=H'5'              GET PTR TO START OF HEADER      46620020
         TM    D0(WORKX),OPNDSUB+OPNDSUBF+OPNDSUBL                     X46660020
               CHECK SUBOPERAND FLAGS                                   46700020
         BNM   PK6                      BRANCH IF NOT SUBOPERAND (NTH)  46740020
         SET   ENFLG,ON                 SET ENTRY FLAG ON               46800020
PK6      SET   DEFLG,ON                 INDICATE DEFAULT VALUE ASSGNMT  46860020
         LR    R12,R8                   SET UP DUMMY BASE ADDR          46920020
         MVC   RECURSTK(D32),REGSTACK   PRESERVE OUTER LEVEL REGISTERS  46980020
         LA    R11,D5(KEYLEN,KEYPTR)    GET PTR TO PARAM STRING         47040020
         MVI   NDXVAL,D6                SET UP FOR MACRKWRD ENTRY       47100020
         BALR  R9,R12                   MAKE RECURRSIVE ENTRY           47160020
         MVC   REGSTACK(D32),RECURSTK   RESTORE OUTER LEVEL REGISTERS   47220020
         GOIF  DEFLG,OFF=OVERLAP3       BRANCH IF OVERLAP OCCURRED      47280020
         GOIF  ENFLG,ON=DICTEXIT        FINISHED WITH SUBOPERAND        47320020
         B     PK7A                     GO TO MAKE VECTOR ENTRY         47400020
PK7      MVC   RECURSTK(D32),REGSTACK   PRESERVE OUTER LEVEL REGISTERS  47460020
         LR    R12,R8                   SET UP DUMMY BASE ADDR          47520020
         LA    R11,D1(,KEYPTR)          GET PTR TO PARAM STRING         47580020
         MVI   NDXVAL,D6                SET UP FOR MACRKWRD ENTRY       47640020
         BALR  R9,R12                   MAKE RECURRSIVE ENTRY           47700020
         MVC   REGSTACK(D32),RECURSTK   RESTORE OUTER LEVEL REGISTERS   47760020
PK71     EQU   *                                                        47820020
         GOIF  DEFLG,OFF=OVERLAP3       BRANCH IF OVERLAP OCCURRED      47880020
         LR    WORKX,KEYPTR             SET UP OPERAND FIELD PTR        47940020
         SH    WORKX,=H'5'              GET PTR TO START OF HEADER      48000020
         TM    D0(WORKX),OPNDSUBL       LOOK FOR LAST SUBOPERAND FLAG   48060020
         BZ    DICTEXIT                 BRANCH IF NOT FOUND             48120020
         SET   ENFLG,OFF                TURN OFF ENTRY FLAG             48180020
PK7A     L     KEYCHAIN,KCHANPTR        PICK UP PTR TO KEYWORD ENTERED  48240020
         SR    KEYLEN,KEYLEN            CLEAR REG FOR KEYWORD LENGTH    48300020
         IC    KEYLEN,KEYLENSV          PICK UP SAVED KEYWORD LENGTH    48360020
         BAL   R9,KWDEND                GO TO FINISH KEYWORD ENTRY      48400020
         B     DICTEXIT                 DONE WITH THIS ENTRY            48440020
PK8      LR    WORKX,KEYPTR             SET UP OPERAND FIELD PTR        48480020
         SH    WORKX,=H'5'              GET PTR TO START OF HEADER      48540020
         TM    D0(WORKX),OPNDSUBL       LOOK FOR LAST SUBOPERAND FLAG   48600020
         BZ    DICTEXIT                 BRANCH IF NOT FOUND             48660020
         SET   BYFLG,OFF                TURN OFF BYPASS FLAG            48720020
         B     DICTEXIT                 RETURN                          48780020
KWDEND   L     WORKZ,PVECTPTR           GET PTR TO END OF PARAM VCTRS   48784020
         S     WORKZ,PVECTDIS           GET PTR TO START OF POSIT VCTR  48788020
         SH    WORKZ,=H'3'              GET PTR TO FIRST KEYWORD SLOT   48792020
         S     WORKZ,KVECTDIS           DISPLACE TO NEXT KEYWORD SLOT   48796020
         LA    WORKY,D6(KEYLEN,KEYCHAIN) GET PTR TO PARAM TBL ENTRY     48800020
         S     WORKY,PRMTBLAD           GET DISPL TO PARAM TBL ENTRY    48804020
         ST    WORKY,JFWORD1            SAVE DISPLACEMENT AND           48808020
         MVC   D0(D3,WORKZ),JFWORD1+D1  INSERT INTO KEYWORD VECTOR SLOT 48812020
         L     WORKY,KVECTDIS           PICK UP CURRENT KEYWORD VECTOR  48816020
         AH    WORKY,=H'3'              LENGTH, ADJUST FOR NEW PARAM,   48820020
         ST    WORKY,KVECTDIS           AND SAVE ADJUSTED LENGTH        48824020
         OI    D0(KEYCHAIN),BIT0        INDICATE KEYWORD ENTRY PROCESSD 48828020
         BR    R9                       RETURN TO CALLER                48832020
KEYCOMP  CLC   D5(D0,KEYCHAIN),D3(KEYPTR) EXECUTED KEYWORD COMPARE      48862020
KDUPLERR L     R12,=A(LOGERR01)         GET PTR TO ERROR LOGGING RTN    48900020
         JEXTRN (X3A02=LOGERR01)                                        48960020
         BALR  R9,R12                   MAKE ERROR STACK ENTRY          49020020
         DC    AL1(SEV91,ERR91)         ERROR PARAMETERS                49080020
         L     WORKX,ESTKNDX            PICK UP ERROR STACK POINTER     49140020
         MVC   D0(D8,WORKX),=8AL1(JBLANK) INSERT NAME PADDING           49200020
         IC    WORKY,D4(,KEYCHAIN)      PICK UP KEYWORD LENGTH          49260020
         BCTR  WORKX,D0                 BACK UP TO LAST ENTRY           49320020
         EX    WORKY,KEYDUPMV          INSERT KEYWORD IN MESSAGE        49380020
         LA    WORKX,D9(,WORKX)         ADJUST ERROR STACK POINTER      49440020
         ST    WORKX,ESTKNDX            SAVE ERROR STACK POINTER        49500020
         L     R15,TXTOUT               PICK UP PTR TO LAST TEXT RCD    49560020
         USING JTEXT,R15                                                49620020
         SET   JERR,ON                  INDICATE AN ERROR FOLLOWS       49680020
         OI    D0(KEYCHAIN),BIT0        INDICATE KEYWORD ENTRY PROCESSD 49720020
         B     PK2                      GO BACK FOR FURTHER SCAN        49760020
KEYDUPMV MVC   D0(D0,WORKX),D4(KEYCHAIN) EXECUTED MOVE OF DUPL KEYWRD   49810020
         DROP  PARMA                                                    49860020
         DROP  R15                                                      49920020
         EJECT                                                          49980020
*PROTOEND - THIS ROUTINE IS CALLED WHEN THE END-OF-PARAMETERS RECORD  * 50040020
*   IS ENCOUNTERED FOLLOWING A PROTOTYPE STATEMENT. ITS FUNCTION IS   * 50100020
*   TO CHECK FOR AND FLAG UNDECLARED KEYWORD PARAMETERS, TO COMPLETE  * 50160020
*   THE PARAMETER PROCESSING AND TO MERGE THE PARAMETER VECTORS       * 50220020
*   AND THE PARAMETER TABLE INTO THE MACRO PARAMETER WORK AREA, TO    * 50280020
*   ALLOCATE THE SPACE FOR AND FETCH THE SKELETON DICTIONARY FOR      * 50340020
*   THE MACRO DEFINITION, AND TO ALLOCATE THE SPACE FOR AND           * 50400020
*   INITIALIZE THE LOCAL DICTIONARY FOR THE MACRO DEFINITION. IF      * 50460020
*   NECESSARY TO GET THE SPACE FOR THE DICTIONARY BEING BUILT, THE    * 50520020
*   DICTIONARY(S) FOR THE HIGHER LEVEL TEXT SEGMENT(S) ARE SAVED      * 50580020
*   ON A WORKFILE.                                                    * 50640020
*        INPUT - NONE.                                                * 50700020
*        OUTPUT - NONE.                                               * 50760020
*                                                                     * 50820020
PROTOEND EQU   *                                                        50880020
         L     KCPTR,KCHANPTR           PICK UP KEYWORD CHAIN PTR       50940020
PE0      LTR   KCPTR,KCPTR              SEE IF END OF CHAIN INDICATED   51000020
         BZ    PE2                      BRANCH IF YES                   51060020
         TM    D0(KCPTR),BIT0           SEE IF KEYWORD DEFINED          51120020
         BO    PE1                      BRANCH IF YES AND MATCH FOUND   51180020
         L     R12,=A(LOGERR01)         GET PTR TO ERROR LOGGING RTN    51240020
         BALR  R9,R12                   MAKE ERROR STACK ENTRY          51300020
         DC    AL1(SEV92,ERR92)         ERROR PARAMETERS                51360020
         L     WORKX,ESTKNDX            PICK UP ERROR STACK POINTER     51420020
         MVC   D0(D8,WORKX),=8AL1(JBLANK) INSERT NAME PADDING           51480020
         IC    WORKY,D4(,KCPTR)         PICK UP KEYWORD LENGTH          51540020
         BCTR  WORKX,D0                 BACK UP TO LAST ENTRY           51600020
         EX    WORKY,KEYUNDMV           INSERT KEYWORD IN MESSAGE       51660020
         LA    WORKX,D9(,WORKX)         ADJUST ERROR STACK POINTER      51720020
         ST    WORKX,ESTKNDX            SAVE ERROR STACK POINTER        51780020
         L     R15,TXTOUT               PICK UP PTR TO LAST TEXT RCD    51840020
         USING JTEXT,R15                                                51900020
         SET   JERR,ON                  INDICATE AN ERROR FOLLOWS       51960020
PE1      NI    D0(KCPTR),BITFF-BIT0     STRIP OFF FLAG BIT              52020020
         MVC   HIBYTE0(D4),D0(KCPTR)    GET CHAIN POINTER FROM ENTRY    52080020
         L     KCPTR,HIBYTE0            PICK UP PTR FOR NEXT ENTRY      52140020
         B     PE0                      GO BACK TO REPEAT PROCESS       52200020
PE2      EQU   *                                                        52260020
         L     WORK1,PVECTDIS           GET LENGTH OF POSITIONAL VCTR   52320020
         A     WORK1,KVECTDIS           GET LENGTH OF BOTH VECTORS      52380020
         LTR   WORK1,WORK1              SEE IF ANY VECTORS TO MOVE      52440020
         BZ    PE3                      IF NOT, SKIP MOVE               52500020
         ST    WORK1,KVECTDIS           PRESERVE LENGTH OF VECTORS      52560020
         L     WORKB,PRMTBLAD           GET PTR TO START OF PARAM TBL   52620020
         A     WORKB,PRMTBLDS           GET PTR TO END OF PARAM TBL     52680020
         L     WORKA,PVECTPTR           GET PTR TO END OF VECTORS       52740020
         SR    WORKA,WORK1              GET PTR TO START OF VECTORS     52800020
         BAL   RETURN,MOVLOP            GO MOVE PARAM VECTORS TO TABLE  52860020
PE3      EQU   *                                                        52920020
         JNOTE FILE=FILE1               KEEP PTR TO TEXT FILE           52980020
         MVC   SAVENOTE,JNOTEVAL        SAVE NOTE/POINT ADDR            53040020
         L     SKDCTPTR,CURRDICT        GET PTR TO CALLING LEVEL DICT   53100020
         USING SKDCTHDR,SKDCTPTR                                        53160020
         MVC   SKACTRV,ACTRCNT          SAVE CURRENT ACTR VALUE         53220020
         MVC   SKNOFSLS,NOFSYSLS        SAVE POSITIONAL PARAM COUNT     53280020
         ST    SKDCTPTR,ALTPTRSV        SAVE DICT PTR TEMPORARILY       53340020
         L     SKDCTPTR,SPACEAL         GET PTR TO STRT OF FREE AREA    53400020
         A     SKDCTPTR,PRMTBLDS        ALLOW FOR PARAMETER TABLE       53460020
         A     SKDCTPTR,KVECTDIS        ALLOW FOR PARAMETER VECTORS     53520020
         ST    SKDCTPTR,PIOPARMA        SET UP PTR FOR DICT SKEL FETCH  53580020
         L     PARMA,MDVPTRSV           GET PTR TO MDV ENTRY            53640020
         USING MDVNTRY,PARMA                                            53700020
         MVC   PIOPARMB+(L'PIOPARMB-L'MSDL)(L'MSDL),MSDL               X53760020
               SET UP SKEL DICT LENGTH                                  53820020
         L     R0,PRMTBLDS              LENGTH OF PARAMETERS TABLE      53880020
         A     R0,KVECTDIS              LENGTH OF PARAMETER VECTORS     53930020
         A     R0,PIOPARMB              LENGTH OF SKEL DICTIONARY       53932020
         C     R0,SPACEAE               CHECK FOR SPACE OVERLAP         53934020
         BNL   OVERLAP5                 BRANCH IF INSUFF SPACE          53940020
         LCR   R0,R0                    SUBTRACT LENGTH FROM            53990020
         A     R0,SPACEAE               FREE SPACE                      53992020
         ST    R0,SPACEAE                                               53994020
         BAL   RETURN,DCTFETCH          GO TO FETCH SKELETON DICT       54000020
         MVC   SKNPNLT,NOTESAVE         PUT TXT N/P IN SKEL DICT HDR    54060020
         MVC   SKKVADR,PVECTDIS+(L'PVECTDIS-L'SKKVADR) GET POSITIONAL  X54120020
               VECTOR LENGTH FOR HEADER                                 54180020
         MVC   SKADNLD,ALTPTRSV         SAVE PTR TO NEXT LEVEL DICT     54240020
         MVC   HIBYTE0+(L'HIBYTE0-L'SKLDLNG)(L'SKLDLNG),SKLDLNG        X54270020
               GET LOCAL DICT LENGTH FROM DICT HEADER                   54300020
         L     R0,HIBYTE0               PICK UP LENGTH FOR INITIAL      54330020
         CL    R0,SPACEAE               SEE IF SPACE OVERLAP OCCURS     54360020
         BNL   OVERLAP5                 BRANCH ON OVERLAP               54480020
         ST    SKDCTPTR,CURRDICT        SET UP NEW CURRENT DICT PTR     54540020
         LR    WORK1,SKDCTPTR           GET PTR TO DICT AREA BASE       54580020
         S     WORK1,SPACEAL            COMPUTE PARAM TBL LENGTH        54620020
         ST    WORK1,HIBYTE0            SAVE TEMPORARILY AND INSERT     54660020
         MVC   SKMPADR,HIBYTE0+(L'HIBYTE0-L'SKMPADR) IN DICT HDR        54720020
         BAL   RETURN,PTRINIT           GO INITIALIZE DICT POINTERS     54780020
         CLC   CURRLOCL,SPACEAL         SEE IF LOCAL DICT LENGTH ZERO   54840020
         BE    NOLCLMD                  SKIP INITIALIZATION IF SO       54900020
         LR    WORK1,R0                 GET LOCAL LENGTH FOR MOVLOP     54930020
         BAL   RETURN,LOCLINIT           GO INITIZE LOCAL DICTIONARY    54960020
         L     WORK1,CURRLOCL           GET PTR TO LOCAL DICT BASE      55020020
         USING LSYSVALS,WORK1                                           55080020
         MVC   INDXVAL,SYSNDX           PUT SYSNDX VALUE IN LCL DICT    55140020
         IC    WORK3,SYSECTL            GET LENGTH OF SYSECT VALUE      55200020
         EX    WORK3,SECTMOVE           PUT SYSECT VALUE,LEN IN LCL DT  55260020
NOLCLMD  EQU   *                                                        55320020
         MVC   ACTRCNT,=F'4096'         INITIALIZE ACTR VALUE           55380020
         L     WORK2,PPARMCNT           PICK UP FINAL POSITIONAL COUNT  55440020
         LTR   WORK2,WORK2              SEE IF ANY WERE PRESENT         55500020
         BNM   GOODCNT                  BRANCH IF ONE OR MORE           55560020
         SR    WORK2,WORK2              SET COUNT TO ZERO               55620020
GOODCNT  STH   WORK2,NOFSYSLS           SAVE POSITIONAL COUNT FOR DICT  55680020
         JPOINT FILE=FILE1,ADDR=SAVENOTE,NEXT=GET REPOSITION TEXT       55740020
         JGETL FILE=FILE1               DUMMY GET ON TEXT FILE          55800020
         B     DICTEXIT                 RETURN                          55860020
SECTMOVE MVC   SECTLEN(D0),SYSECTL      EXECUTED SYSECT MOVE            55910020
KEYUNDMV MVC   D0(D0,WORKX),D4(KCPTR)   EXECUTED MOVE OF UNDEF KEYWORD  55960020
OVERLAP5 SET   CALLING,OFF              EFFECTIVELY ABORT CALL          56010020
         BAL   R2,ERRRTN                GO TO LOG OVERLAP ERROR         56040020
OVERLAP3 EQU   *                                                        56070020
         NI    EVALSW01,BITFF-(CALLING+NOCALL)                  OY01298 56080002
         JPOINT FILE=FILE1,ADDR=NOTESAVE,NEXT=GET REPOSITION TEXT FILE  56100020
         B     DICTEXIT                 EXIT                            56220020
         DROP  PARMA                                                    56280020
         DROP  SKDCTPTR                                                 56340020
         DROP  R15                                                      56400020
         EJECT                                                          56460020
*GBLDICTR/GBLDICTS - THIS ROUTINE IS CALLED WHEN THE VALUE OF A       * 56520020
*   GLOBAL VARIABLE IS TO BE SET OR IS REFERENCED. ITS FUNCTION       * 56580020
*   IS TO LOCATE THE APPROPRIATE ENTRY IN THE GLOBAL DICTIONARY       * 56640020
*   THROUGH THE GLOBAL VECTOR AND TO EITHER SET THE GLOBAL DICTIONARY * 56700020
*   ENTRY TO A SPECIFIED VALUE (ENTRY AT 'GBLDICTS') OR GET THE       * 56760020
*   VALUE OF THE GLOBAL DICTIONARY ENTRY FOR THE GENERATOR (ENTRY     * 56820020
*   AT 'GBLDICTR').                                                   * 56880020
*                           * ENTRY AT GBLDICTS *                     * 56940020
*        INPUT - A POINTER IN R10 TO THE TEXT FLAG (1 BYTE)           * 57000020
*                FOLLOWED BY THE DICTIONARY POINTER (3 BYTES)         * 57060020
*                FOLLOWED BY THE EFFECTIVE SUBSCRIPT (2 BYTES)        * 57120020
*              - SETA VARIABLE, VALUE TO BE ASSIGNED IN R11           * 57180020
*                SETB VARIABLE, ZERO VALUE IN R11 TO SET VARIABLE OFF * 57240020
*                               NON-ZERO VALUE IN R11 TO SET VARIABLE * 57300020
*                                       ON                            * 57360020
*                SETC VARIABLE, POINTER TO CHARACTER STRING TO BE     * 57420020
*                                       ASSIGNED IN R11               * 57480020
*        OUTPUT - NONE.                                               * 57540020
*                           * ENTRY AT GBLDICTR *                     * 57600020
*        INPUT - A POINTER IN R10 TO THE TEXT FLAG (1 BYTE)           * 57660020
*                FOLLOWED BY THE DICTIONARY POINTER (3 BYTES)         * 57720020
*                FOLLOWED BY THE EFFECTIVE SUBSCRIPT (2 BYTES)        * 57780020
*        OUTPUT - SETA VARIABLE, VALUE OF VARIABLE IN R11             * 57840020
*                 SETB VARIABLE, ZERO VALUE IN R11 IF VARIABLE OFF    * 57900020
*                                NON-ZERO VALUE IN R11 IF VARIABLE ON * 57960020
*                 SETC VARIABLE, POINTER TO CHARACTER STRING IN R11   * 58020020
*                                                                     * 58080020
GBLDICTR EQU   *                                                        58140020
         SET   REFFLAG,ON               INDICATE REFERENCE ENTRY        58200020
         B     GCOM                     CONTINUE AT GLOBAL COMMON       58260020
GBLDICTS EQU   *                                                        58320020
         SET   REFFLAG,OFF              INDICATE SET ENTRY              58380020
GCOM     EQU   *                                                        58440020
         SET   GBLCALL,ON               INDICATE GLOBAL ENTRY           58500020
         L     SETPTR,CURRGLBL          PICK UP CURRENT GBL VCTR PTR    58560020
         USING VREF,PARMA                                               58620020
         MVC   HIBYTE0+(L'HIBYTE0-L'VPNT)(L'VPNT),VPNT                 X58680020
               PICK UP PTR TO GBL VECTOR ENTRY FROM TEXT                58740020
         A     SETPTR,HIBYTE0           DEVELOP PTR TO GBL VECTOR ENTRY 58800020
         CLC   D0(GBLVCTEL,SETPTR),=X'FFFFFE' LOOK FOR GBL ERROR FLAG   58860020
         BE    GBLERR                   BRANCH IF FOUND                 58920020
         MVC   HIBYTE0+(L'HIBYTE0-GBLVCTEL)(GBLVCTEL),D0(SETPTR)       X58980020
               PICK UP PTR TO GBL DICT FROM GBL VECTR ENTRY             59040020
         L     SETPTR,HIBYTE0           SET IT UP AND ADD TO GBL        59100020
         A     SETPTR,GDSTRT            DICT BASE ADDR                  59160020
         B     ALLCOM                   GO TO COMMON HANDLING           59220020
GBLERR   GOIF  REFFLAG,ON=REFERR         DIVERGE ON REFERENCE OR SET    59280020
SETERR   EQU   *                                                        59340020
         L     R12,=A(LOGERR01)         GET PTR TO ERROR LOGGING RTN    59400020
         BALR  R9,R12                   MAKE ERROR STACK ENTRY          59460020
         DC    AL1(SEV131,ERR131)       ERROR PARAMETERS                59520020
         B     DICTEXIT                 RETURN                          59580020
REFERR   EQU   *                                                        59640020
         L     R12,=A(LOGERR01)         GET PTR TO ERROR LOGGING RTN    59700020
         BALR  R9,R12                   MAKE ERROR STACK ENTRY          59760020
         DC    AL1(SEV132,ERR132)       ERROR PARAMETERS                59820020
DEADEXIT EQU   *                                                        59880020
         SR    R11,R11                  SET UP SETA/SETB DEFAULT        59940020
         CLI   VFLAG,JTMSVC             SET IF SETA OR SETB REFERENCE   60000020
         BL    DICTEXIT                 RETURN DIRECTLY IF SO           60060020
         LA    R11,=9X'00'              SET UP DEFAULT FOR SETC REFER   60120020
         B     DICTEXIT                 RETURN                          60180020
         DROP  PARMA                                                    60240020
         EJECT                                                          60300020
*LCLDICTR/LCLDICTS - THIS ROUTINE IS CALLED WHEN THE VALUE OF A       * 60360020
*   LOCAL VARIABLE IS TO BE SET OR IS REFERENCED. ITS FUNCTION        * 60420020
*   IS TO LOCATE THE APPROPRIATE ENTRY IN THE LOCAL DICTIONARY        * 60480020
*   AND TO EITHER SET THE LOCAL DICTIONARY ENTRY TO A SPECIFIED       * 60540020
*   VALUE (ENTRY A 'LCLDICTS') OR GET THE VALUE OF THE LOCAL          * 60600020
*   DICTIONARY ENTRY FOR THE GENERATOR (ENTRY AT 'LCLDICTR').         * 60660020
*                           * ENTRY AT LCLDICTS *                     * 60720020
*        INPUT - A POINTER IN R10 TO THE TEXT FLAG (1 BYTE)           * 60780020
*                FOLLOWED BY THE DICTIONARY POINTER (3 BYTES)         * 60840020
*                FOLLOWED BY THE EFFECTIVE SUBSCRIPT (2 BYTES)        * 60900020
*              - SETA VARIABLE, VALUE TO BE ASSIGNED IN R11           * 60960020
*                SETB VARIABLE, ZERO VALUE IN R11 TO SET VARIABLE OFF * 61020020
*                               NON-ZERO VALUE IN R11 TO SET VARIABLE * 61080020
*                                       ON                            * 61140020
*                SETC VARIABLE, POINTER TO CHARACTER STRING TO BE     * 61200020
*                                       ASSIGNED IN R11               * 61260020
*        OUTPUT - NONE.                                               * 61320020
*                           * ENTRY AT LCLDICTR *                     * 61380020
*        INPUT - A POINTER IN R10 TO THE TEXT FLAG (1 BYTE)           * 61440020
*                FOLLOWED BY THE DICTIONARY POINTER (3 BYTES)         * 61500020
*                FOLLOWED BY THE EFFECTIVE SUBSCRIPT (2 BYTES)        * 61560020
*        OUTPUT - SETA VARIABLE, VALUE OF VARIABLE IN R11             * 61620020
*                 SETB VARIABLE, ZERO VALUE IN R11 IF VARIABLE OFF    * 61680020
*                                NON-ZERO VALUE IN R11 IF VARIABLE ON * 61740020
*                 SETC VARIABLE, POINTER TO CHARACTER STRING IN R11   * 61800020
*                                                                     * 61860020
LCLDICTR EQU   *                                                        61920020
         SET   REFFLAG,ON               INDICATE REFERENCE ENTRY        61980020
         B     LCOM                     CONTINUE AT LOCAL COMMON        62040020
LCLDICTS EQU   *                                                        62100020
         SET   REFFLAG,OFF              INDICATE SET ENTRY              62160020
LCOM     EQU   *                                                        62220020
         SET   GBLCALL,OFF              INDICATE LOCAL ENTRY            62280020
         L     SETPTR,CURRLOCL          PICK UP CURRENT LCL DICT PTR    62340020
         USING VREF,PARMA                                               62400020
         MVC   HIBYTE0+(L'HIBYTE0-L'VPNT)(L'VPNT),VPNT                 X62460020
               PICK UP PTR TO LCL DICT ENTRY FROM TEXT                  62520020
         A     SETPTR,HIBYTE0           ADD TO DICT BASE                62580020
ALLCOM   EQU   *                                                        62640020
         TM    VSUBS,BIT0               SEE IF DEAD TERM                62700020
         BNZ   DEADTERM                 BRANCH IF SO                    62760020
         MVC   JHWORD1,VSUBS            GET SUBSCRIPT FIELD FROM TEXT   62820020
         LH    PAIRE,JHWORD1            PICK IT UP FOR CALCULATION      62880020
         LTR   PAIRE,PAIRE              TEST FOR ZERO SUBSCRIPT         62940020
         BZ    TYPETEST                 BRANCH IF ZERO                  63000020
         BCTR  PAIRE,D0                 ADJUST THE SUBSCRIPT            63060020
TYPETEST CLI   VFLAG,JTMSVB             TEST FOR SET VARIABLE TYPE      63120020
         BL    TYPEA                    BRANCH IF FLAG FOR A-TYPE       63180020
         CLI   VFLAG,JTMSVC             TEST FOR TYPE AGAIN             63240020
         BNL   TYPEC                    BRA CH IF FLAG FOR C-TYPE       63300020
         SRDL  PAIRE,D3                 DIVIDE SETB SUBSCRIPT BY 8      63360020
         SRL   PAIRO,D29                GET THE REMAINDER               63420020
         LA    WORK1,BIT0               INSERT A BIT FOR MASK GENERAT   63480020
         SRL   WORK1,D0(PAIRO)          SHIFT BY REMAINDER FOR MASK     63540020
         ALR   SETPTR,PAIRE             PUT PTR TO REQUIRED ENTRY       63600020
         USING SETBNTRY,SETPTR                                          63660020
         GOIF  REFFLAG,ON=REFSETB       BRANCH IF VARB REFERENCE        63720020
         LTR   PARMB,PARMB              TEST FOR CONDITION TO BE SET    63780020
         BZ    SETBOFF                  BRANCH IF SET TO ZERO           63840020
         EX    WORK1,SETONE             SET IT ON USING OR MASK         63900020
         B     DICTEXIT                 GO TO COMMON EXIT               63960020
SETBOFF  LA    WORK1,D1(,WORK1)         INCREMENT OR MASK BY ONE AND    64020020
         LCR   WORK1,WORK1              DEVELOP AND MASK                64080020
         EX    WORK1,SETZERO            SET IT OFF USING AND MASK       64140020
         B     DICTEXIT                 GO TO COMMON EXIT               64200020
REFSETB  EX    WORK1,TESTINST           TEST IF SETB ON                 64260020
         BO    SETBON                   BRANCH IF ON                    64320020
         SR    PARMB,PARMB              INDICATE SETB OFF TO GENERATOR  64380020
         B     DICTEXIT                 GO TO COMMON EXIT               64440020
SETBON   LA    PARMB,D1                 INDICATE SETB ON TO GENERATOR   64500020
         B     DICTEXIT                 GO TO COMMON EXIT               64560020
TESTINST TM    SETBVAL,D0               EXECUTED SETB VARB TEST         64620020
SETONE   OI    SETBVAL,D0               EXECUTED TURN-ON FOR SETB VARB  64680020
SETZERO  NI    SETBVAL,D0               EXECUTED TURN-OFF FOR SETB VARB 64740020
DEADTERM GOIF  REFFLAG,OFF=DICTEXIT,    IGNORE ATTEMPT TO SET VARIABLE X64800020
               ELSE=DEADEXIT            GET DEFAULT (NULL) ON REFERENCE 64860020
TYPEA    EQU   *                                                        64920020
         SLL   PAIRE,D2                 MULTIPLY SUBSCRIPT BY 4         64980020
         ALR   SETPTR,PAIRE             DEVELOP PTR TO ARRAY ENTRY      65040020
         USING SETANTRY,SETPTR                                          65100020
         GOIF  REFFLAG,ON=REFSETA       BRANCH IF VARB NOT TO BE SET    65160020
         ST    PARMB,JFWORD1            STORE VALUE FROM GENERATOR      65220020
         MVC   SETAVAL,JFWORD1          INSERT INTO DICT ENTRY          65280020
         B     DICTEXIT                 GO TO COMMON EXIT               65340020
REFSETA  MVC   JFWORD1,SETAVAL          GET DICT ENTRY                  65400020
         L     PARMB,JFWORD1            PICK IT UP FOR GENERATOR        65460020
         B     DICTEXIT                 GO TO COMMON EXIT               65520020
TYPEC    EQU   *                                                        65580020
         MH    PAIRE,=H'9'              MULTIPLY SUBSCRIPT BY 9         65640020
         ALR   SETPTR,PAIRE             DEVELOP PTR TO ARRAY ENTRY      65700020
         LR    DICTPTR,SETPTR           PRESERVE ORIGINAL DICT PTR      65760020
         CLI   D0(DICTPTR),J8           SEE IF SETC EXTENDED            65820020
         BNH   REFCHEK                  BRANCH IF NOT                   65880020
         MVC   HIBYTE0+D1(D3),D6(SETPTR) PICK UP PTR TO EXTENSION ENTRY 65940020
         GOIF  GBLCALL,ON=GETGBLEX      BRANCH IF GLOBAL EXTENSION      66000020
         L     SETPTR,HIBYTE0           PICK UP DISPLACEMENT            66060020
         A     SETPTR,CURRLOCL          COMPUTE PTR TO LOCAL EXTENSION  66120020
REFCHEK  GOIF  REFFLAG,ON=REFSETC       BRANCH IF SETC REFERENCE ONLY   66180020
         SR    PAIRO,PAIRO              CLEAR REG FOR EXTENSION CALCS   66240020
         IC    PAIRO,D0(,PARMB)         PICK UP STRING LENGTH           66300020
         L     PAIRE,=F'-16'            SET UP INITIAL MASK             66360020
         AR    PAIRO,PAIRO              SHIFT LENGTH LEFT ONE           66420020
         NR    PAIRO,PAIRE              DROP OFF LOW ORDER FOUR BITS    66480020
HSHLP    LR    SETLEN,PAIRO             PRESERVE CURRENT LENGTH         66540020
         AR    PAIRE,PAIRE              SHIFT MASK LEFT ONE             66600020
         NR    PAIRO,PAIRE              AND TO GET NEXT EXTENSION LNGT  66660020
         BNZ   HSHLP                    RETRY IF NOT LARGER THAN STRING 66720020
         CLI   D0(DICTPTR),J8           SEEIF ENTRY EXTENDED            66780020
         BH    EXTEST                   IF YES, LOOK AT EXTENSION       66840020
         CLI   D0(PARMB),J8             SEE IF SET VALUE WILL FIT       66900020
         BNH   PUTSET                   BRANCH IF IT WILL FIT           66960020
         B     TPCHEK                   GO TO EXTEND DICTIONARY ENTRY   67020020
EXTEST   CLC   D0(D1,DICTPTR),D0(PARMB) SEE IF SET VALUE WILL FIT       67080020
         BNL   PUTSET                   BRANCH IF IT WILL FIT           67140020
TPCHEK   EQU   *                                                        67200020
         GOIF  GBLCALL,ON=GBLEXTND      BRANCH IF GLOBAL EXTENSION REQD 67260020
         CL    SETLEN,SPACEAE           SEE IF ROOM IS AVAILABLE        67320020
         BNL   OVERLAP9                 BRANCH IF NOT                   67380020
         L     SETPTR,SPACEAL           SET UP PTR TO EXTENSION ENTRY   67440020
         LR    WORK1,SETPTR             SET UP EXTENSION BASE ADDR      67500020
         S     WORK1,CURRLOCL           COMPUTE DISPL TO LCL ENTRY      67560020
         ST    WORK1,JFWORD1            SAVE TEMPORARILY                67620020
         MVC   D6(D3,DICTPTR),JFWORD1+D1 INSERT IN ORIGINAL DICT ENTRY  67680020
         L     SKDCTPTR,CURRDICT        SET UP PTR TO DICT HDR          67740020
         USING SKDCTHDR,SKDCTPTR                                        67800020
         MVC   HIBYTE0+(L'HIBYTE0-L'SKLDLNG)(L'SKLDLNG),SKLDLNG        X67860020
               PICK UP CURRENT LOCAL DICTIONARY LENGTH                  67920020
         L     WORK1,HIBYTE0            SET UP TO ADD EXTENSION ENTRY   67980020
         AR    WORK1,SETLEN             ADJUST FOR EXTENSION            68040020
         ST    WORK1,JFWORD1            SAVE TEMPORARILY AND REPLACE    68100020
         MVC   SKLDLNG,JFWORD1+(L'JFWORD1-L'SKLDLNG) IN DICT HEADER     68160020
         LA    WORK1,D0(SETLEN,SETPTR)  DEVELOP NEW LOW SPACE ADDR      68220020
         ST    WORK1,SPACEAL            SAVE NEW LOW SPACE ADDR         68280020
         L     WORK2,SPACEAH            PICK UP HIGH SPACE ADDR         68340020
         SR    WORK2,WORK1              SUBTRACT LOW SPACE ADDR         68400020
         ST    WORK2,SPACEAE            SAVE NEW SPACE EXTENT           68460020
SETMAX   BCTR  SETLEN,D0                GET EXTENSION LENGTH -1         68520020
         STC   SETLEN,D0(,DICTPTR)      PUT IN PRIMARY DICT ENTRY       68580020
         USING SETCNTRY,SETPTR                                          68640020
PUTSET   IC    SETLEN,D0(,PARMB)        PICK UP STRING LENGTH           68700020
         EX    SETLEN,MOVEINST          MOVE STRING INTO SETC ENTRY     68760020
         B     DICTEXIT                 RETURN                          68820020
GETGBLEX CLC   HIBYTE0,=D'0'            SEE IF EXTENDED SYSPARM         68880020
         BZ    GGX1                     BRANCH IF IT IS                 68940020
         L     SETPTR,FREEEND           PICK UP EXTENSION AREA BASE     69000020
         S     SETPTR,HIBYTE0           COMPUTE PTR TO GLOBAL EXTENSION 69060020
         B     REFCHEK                  RETURN TO MAIN FLOW             69120020
REFSETC  LR    PARMB,SETPTR             GET PTR FOR GENERATOR TO SETC   69180020
         B     DICTEXIT                 RETURN                          69240020
GGX1     L     PARMB,JSYSPARM           PICK UP SYSPARM POINTER         69300020
         B     DICTEXIT                 RETURN                          69360020
OVERLAP8 EQU   *                                                        69420020
OVERLAP9 EQU   *                                                        69480020
         BAL   R2,ERRRTN                 GO TO LOG ERROR AND FIX COUNT  69540020
         GOIF  FLUSH2,OFF=MACRPOP,      BRANCH IF NO OVERLAP FOUND     X69600020
               ELSE=DICTEXIT            IN OPEN CODE                    69660020
GBLEXTND CL    SETLEN,SPACEAE           SEE IF ENOUGH ROOM IN AREA      69720020
         BNL   OVERLAP8                 BRANCH IF NOT                   69780020
         L     SETPTR,SPACEAH           PICK UP AREA HIGH ADDRESS       69840020
         SR    SETPTR,SETLEN            ADJUST FOR STRING BYTES         69900020
         ST    SETPTR,SPACEAH           SAVE NEW AREA HIGH ADDRESS      69960020
         LR    WORK1,SETPTR             GET NEW AREA HIGH ADDRESS       70020020
         S     WORK1,SPACEAL            SUBTRACT AREA LOW ADDRESS       70080020
         ST    WORK1,SPACEAE            SAVE NEW AREA LENGTH            70140020
         L     WORK1,FREEEND            GET EXTENSION BASE PTR          70200020
         SR    WORK1,SETPTR             COMPUTE DISPLACEMENT            70260020
         ST    WORK1,JFWORD1            SAVE TEMPORARILY AND INSERT     70320020
         MVC   D6(D3,DICTPTR),JFWORD1+D1 IN ORIGINAL DICTIONARY ENTRY   70380020
         B     SETMAX                   GO TO COMPLETE SET              70440020
MOVEINST MVC   SETCLEN(D0),D0(PARMB)    EXECUTED ASSIGN FOR SETC VARB   70500020
         DROP  PARMA                                                    70560020
         DROP  SKDCTPTR                                                 70620020
         DROP  SETPTR                                                   70680020
         EJECT                                                          70740020
*PARMTBLR - THIS ROUTINE IS CALLED WHEN THE VALUE OF A PARAMETER IS   * 70800020
*   REFERENCED. ITS FUNCTION IS TO LOCATE THE APPROPRIATE ENTRY IN    * 70860020
*   THE PARAMETER TABLE THROUGH THE APPROPRIATE VECTOR, KEYWORD OR    * 70920020
*   POSITIONAL, AND TO GET THE VALUE OF THE PARAMETER TABLE ENTRY     * 70980020
*   FOR THE GENERATOR.                                                * 71040020
*        INPUT - A POINTER IN R10 TO THE TEXT FLAG (1 BYTE)           * 71100020
*                FOLLOWED BY THE VECTOR POINTER (3 BYTES)             * 71160020
*                FOLLOWED BY PADDING (2 BYTES) IF NOT A SUBOPERAND    * 71220020
*                REFERENCE OR BY SUBOPERAND NUMBER (2 BYTES) IF A     * 71280020
*                SUBOPERAND REFERENCE                                 * 71340020
*        OUTPUT - A POINTER IN R11 TO THE PARAMETER TABLE ENTRY       * 71400020
*                                                                     * 71460020
PARMTBLR EQU   *                                                        71520020
         USING PARMREF,PARMA                                            71580020
         TM    PARMSUB,BIT0             LOOK FOR DEAD TERM FLAG         71640020
         BO    PTR1X                    BRANCH IF FOUND                 71700020
         CLI   PARMFLG,JTMKPAR          SEE IF KEYWORD REFERENCE        71760020
         BNE   PTR1                     BRANCH IF NOT                   71820020
         L     PARAMPTR,CURRKEYD        GET POINTER TO KEYWORD VECTOR   71880020
         B     PTR2                     GO JOIN MAIN FLOW               71940020
PTR1     LH    WORK1,NOFSYSLS           PICK UP POSITIONAL COUNT        72000020
         MH    WORK1,=H'3'              GET MAXIMUM VECTOR DISPL        72060020
         ST    WORK1,JFWORD1            SET ASIDE FOR PTR COMPARE       72120020
         CLC   PARMPNT,JFWORD1+(L'JFWORD1-L'PARMPNT) COMPARE DISPLS     72480020
         BNH   PTR0                     BRANCH IF PARAM IN RANGE        72540020
PTR1X    LA    PARMB,=AL1(OPNDOMT,JO,J0,J1,J0,J0,X'60',J0)  OMITTED     72600020
         B     DICTEXIT                 RETURN TO GENERATOR             72660020
PTR0     L     PARAMPTR,CURRPOST        GET POINTER TO POSITIONAL VCTR  72720020
PTR2     EQU   *                                                        72780020
         MVC   HIBYTE0+(L'HIBYTE0-L'PARMPNT)(L'PARMPNT),PARMPNT        X72840020
               PICK UP PTR TO PARAM VECTOR SLOT                         72900020
         S     PARAMPTR,HIBYTE0         DEVELOP PTR TO VECTOR ENTRY     72960020
         MVC   HIBYTE0+D1(D3),D0(PARAMPTR) PICK UP VECTOR ENTRY         73020020
         L     PARMB,HIBYTE0            GET FOR PARAM TBL REFERENCE     73080020
         A     PARMB,CURRPARM           DEVELOP PTR TO PARAM ENTRY      73140020
         CLC   PARMPAD,=D'0'            SEE IF SUBOPERAND REFERENCE     73200020
         BZ    DICTEXIT                 IF NOT, RETURN                  73260020
         MVC   JHWORD1,PARMSUB          PICK UP SUBOPERAND NUMBER       73320020
         TM    D0(PARMB),OPNDSUB        SEE IF SUBLIST BEING REFER'D    73380020
         BO    PTR4                     IF SO, PROCEED                  73440020
         CLC   JHWORD1,=H'1'            SEE IF SUBOPERAND 1 REFER'D     73500020
         BE    DICTEXIT                 IF SO, RETURN WHOLE PARAM PTR   73560020
         B     PTR1X                    GO RETURN DEFAULT               73620020
PTR4     CLC   JHWORD1,D6(PARMB)        SEE IF SUBOPERAND IN RANGE      73680020
         BH    PTR1X                    GO RETURN DEFAULT               73740020
         LH    WORK1,JHWORD1            GET SUBOPERAND NUMBER           73800020
         MH    WORK1,=H'3'              CONVERT TO VECTOR INDEX         73860020
         LR    WORK2,PARMB              GET PARAM ENTRY PTR FOR CALC    73920020
         MVC   HIBYTE0+D1(D3),D10(PARMB) PICK UP SUBLIST VECTOR PTR     73980020
         A     WORK2,HIBYTE0            GET PTR TO STRT OF SUBL VCTR    74040020
         SR    WORK2,WORK1              GET PTR TO SUBLIST VECTR ENTRY  74100020
         MVC   HIBYTE0+D1(D3),D0(WORK2) PICK UP SUBLIST VECTOR ENTRY    74160020
         A     PARMB,HIBYTE0            DEVELOP PTR TO SUBOPERAND       74220020
         B     DICTEXIT                 RETURN                          74280020
         DROP  PARMA                                                    74340020
         EJECT                                                          74400020
*SEQSYMBR - THIS ROUTINE IS CALLED WHEN A REFERENCE TO A SEQUENCE     * 74460020
*   SYMBOL IS ENCOUNTERED. ITS FUNCTION IS TO LOCATE THE APPROPRIATE  * 74520020
*   ENTRY IN THE SEQUENCE SYMBOL REFERENCE DICTIONARY AND TO GET      * 74580020
*   THE NOTE/POINT ADDRESS IN THE SEQUENCE SYMBOL REFERENCE           * 74640020
*   DICTIONARY ENTRY FOR THE GENERATOR.                               * 74700020
*        INPUT - A POINTER IN R10 TO THE TEXT FLAG (1 BYTE)           * 74760020
*                FOLLOWED BY THE DICTIONARY POINTER (3 BYTES)         * 74820020
*        OUTPUT - A POINTER IN R11 TO THE NOTE/POINT ADDRESS          * 74880020
*                                                                     * 74940020
SEQSYMBR EQU   *                                                        75000020
         L     SKDCTPTR,CURRSEQS        GET PTR TO SEQ SYMB REF DICT    75060020
         USING SEQREF,PARMA                                             75120020
         USING JTEXT,R5                                         OX00218 75170020
         MVC   HIBYTE0+(L'HIBYTE0-L'SEQPNT)(L'SEQPNT),SEQPNT           X75180020
               GET DISPL TO SEQ SYMB REF DICT ENTRY                     75240020
         A     SKDCTPTR,HIBYTE0         DEVELOP PTR TO DICT ENTRY       75300020
         CLC   D0(D8,SKDCTPTR),=D'0'    LOOK FOR UNDEFINED SEQ SYM      75360020
         BZ    DICTEXIT                 RETURN DIRECTLY IF THE CASE     75420020
         GOIF  JERR,OFF=NOERREC         ANY ERROR IN REC        OX00218 75470020
ERREC    JGETL FILE=FILE1               YES, GET ERROR REC      OX00218 75472020
         LR    R5,R11                   LOAD BASE FOR TEXT      OX00218 75472420
         GOIF  JTERROR,NE=NOERREC       IS THE REC ERROR REC    OX00218 75474020
         JPUTM FILE=FILE2,ADDR=(R5)     YES,PUT IT OUT          OX00218 75476020
         B     ERREC                    SEE IF MORE ERROR REC   OX00218 75478020
NOERREC  EQU   *                        NO MORE OR NO ERROR REC OX00218 75478420
         JPOINT FILE=FILE1,ADDR=(SKDCTPTR),NEXT=GET POSITION TEXT FILE  75480020
         CLI   *,BITFF                  SET COND CODE FOR DEF SEQ SYM   75540020
         B     DICTEXIT                 RETURN TO GENERATOR             75600020
         DROP  PARMA                                                    75660020
         EJECT                                                          75720020
*ORDSYMBR - THIS ROUTINE IS CALLED WHEN A REFERENCE TO AN ORDINARY    * 75780020
*   SYMBOL IS ENCOUNTERED. ITS FUNCTION IS TO LOCATE THE APPROPRIATE  * 75840020
*   ENTRY IN THE ORDINARY SYMBOL REFERENCE DICTIONARY AND TO GET      * 75900020
*   THE TYPE, LENGTH, AND SCALE ATTRIBUTES OF THE ORDINARY SYMBOL     * 75960020
*   IN THE ORDINARY SYMBOL REFERENCE DICTIONARY ENTRY FOR THE         * 76020020
*   GENERATOR.                                                        * 76080020
*        INPUT - A POINTER IN R10 TO THE TEXT FLAG (1 BYTE)           * 76140020
*                FOLLOWED BY THE DICTIONARY POINTER (3 BYTES)         * 76200020
*                FOLLOWED BY 2 BYTES OF PADDING                       * 76260020
*        OUTPUT - A POINTER IN R11 TO THE TYPE ATTRIBUTE (1 BYTE)     * 76320020
*                 FOLLOWED BY THE LENGTH ATTRIBUTE (2 BYTES)          * 76380020
*                 FOLLOWED BY THE SCALE ATTRIBUTE (2 BYTES)           * 76440020
*                 ATTRIBUTES                                          * 76500020
*                                                                     * 76560020
ORDSYMBR EQU   *                                                        76620020
         CLC   OSRDSTRT,=D'0'           SEE IF ANY OSRD PRESENT         76640020
         BZ    OSRDBAD                  BRANCH IF NONE (OVERFLOWED)     76660020
         USING ORDREF,PARMA                                             76680020
         MVC   HIBYTE0+(L'HIBYTE0-L'ORDPNT)(L'ORDPNT),ORDPNT           X76740020
               PICK UP DICTIONARY POINTER FROM META-TEXT                76800020
         L     PARMB,HIBYTE0            GET IT FOR POINTER CALCULATION  76860020
         A     PARMB,OSRDSTRT           DEVELOP PTR TO DICT ENTRY       76920020
         BCTR  PARMB,D0                 BACK UP PTR FOR GEN USEAGE      76980020
         B     DICTEXIT                 RETURN TO GENERATOR             77040020
OSRDBAD  LA    PARMB,=AL1(OPNDSTR,JU,J0,J0,J0,J0) RETURN DEFAULT ATTRS  77060020
         B     DICTEXIT                 RETURN                          77080020
         DROP  PARMA                                                    77100020
         EJECT                                                          77160020
*MACRFINI - THIS ROUTINE IS CALLED WHEN THE EXPANSION OF A MACRO      * 77220020
*   INSTRUCTION IS COMPLETED. ITS FUNCTION IS TO RESTORE THE          * 77280020
*   DICTIONARY FOR THE NEXT HIGHER LEVEL TEXT SEGMENT AS THE CURRENT  * 77340020
*   DICTIONARY AND TO REPOSITION THE TEXT FILE TO THE RESUMPTION      * 77400020
*   POINT IN THE NEXT HIGHER LEVEL TEXT SEGMENT.                      * 77460020
*        INPUT - NONE.                                                * 77520020
*        OUTPUT - NONE.                                               * 77580020
*                                                                     * 77640020
MACRFINI EQU   *                                                        77700020
MACRPOP  EQU   *                                                        77760020
         L     SKDCTPTR,CURRDICT        GET CURRENT DICT PTR            77820020
         USING SKDCTHDR,SKDCTPTR                                        77880020
MACRPOS  EQU   *                                                        77940020
         JPOINT FILE=FILE1,ADDR=SKNPNLT,NEXT=GET REPOSITION TEXT FILE   78000020
         MVC   CURRDICT,SKADNLD         SET UP NEW CURRENT DICT PTR     78060020
         L     SKDCTPTR,CURRDICT        POINT TO SKEL DICT HDR          78120020
         MVC   ACTRCNT,SKACTRV          RESTORE ACTR COUNT              78180020
         MVC   NOFSYSLS,SKNOFSLS        RESTORE POSITIONAL PARAM COUNT  78240020
         BAL   RETURN,PTRINIT           REESTABLISH DICTIONARY POINTERS 78300020
         B     DICTEXIT                 RETURN TO GENERATOR             78360020
         DROP  SKDCTPTR                                                 78420020
         EJECT                                                          78480020
*                                                                       78540020
* THIS SUBROUTINE PERFORMS A BUFFERED READ FROM ANY FILE.               78600020
*        IT IS CALLED FROM THE FOLLOWING ROUTINES                       78660020
*                   PHASENTR                                            78720020
*                   PROTOEND                                            78780020
*                                                                       78840020
BUFREAD  EQU   *                                                        78900020
         ST    RTNLNK,REGSAVEA          PRESERVE LINK REGISTER          78960020
         LM    R3,R4,PIOPARMB           PICK UP I/O PARAMETERS          79020020
BRD1     CLR   R3,R5                    SEE IF RECORD LESS THAN MAX     79080020
         BH    BRD4                     BRANCH IF NOT                   79140020
         CH    R3,=AL2(MINRECSZ)        SEE IF BLOCK OVER MINIMUM       79200020
         BNL   BRD11                    BRANCH IF MORE OR JUST ENUF     79260020
         LA    R3,MINRECSZ              IF NOT, USE MINIMUM SIZE        79320020
BRD11    STH   R3,PIOPARMC              SET UP RECORD LENGTH            79380020
         SR    R3,R3                    INDICATE LAST READ              79440020
BRD2     JREAD FILE=(R6),PARM=PIOPARMA  READ RECORD FROM PROPER FILE    79500020
         JCHECK FILE=(R6)               CHECK THE READ                  79560020
         LTR   R3,R3                    SEE IF READ COMPLETE            79620020
         BNZ   BRD3                     DKIP AHEAD IF NOT               79680020
         L     RTNLNK,REGSAVEA          RESTORE LINK REGISTER           79740020
         BR    RTNLNK                   RETURN TO CALLING ROUTINE       79800020
BRD3     EQU   *                                                        79860020
         AR    R4,R5                    DEVELOP PTR TO NEXT I/O AREA    79920020
         ST    R4,PIOPARMA              PUT PTR IN I/O CONTROL AREA     79980020
         B     BRD1                     GO SET UP NEW READ LENGTH       80040020
BRD4     STH   R5,PIOPARMC              SET UP MAXIMUM RECORD LENGTH    80100020
         SR    R3,R5                    ADJUST READ LENGTH              80160020
         B     BRD2                     GO READ NEXT RECORD             80220020
*                                                                       80280020
* THIS SUBROUTINE MOVES DATA TO AN AREA POINTED TO BY WORKB FROM        80340020
*        AN AREA POINTED TO BY WORKA USING THE LENGTH IN WORK1.         80400020
*        IT IS CALLED FROM THE FOLLOWING ROUTINES -                     80460020
*        PHASENTR, PROTOEND, MACRPOST                                   80520020
*                                                                       80580020
MOVLOP1  MVC   D0(D256,WORKB),D0(WORKA) MOVE BLOCK OF 256 BYTES         80640020
         LA    WORKA,D256(,WORKA)       ADJUST SOURCE POINTER           80700020
         LA    WORKB,D256(,WORKB)       ADJUST DESTINATION POINTER      80760020
MOVLOP   SH    WORK1,=H'256'            SEE IF ONE MOVE WILL DO IT      80820020
         BP    MOVLOP1                  BRANCH IF NOT                   80880020
         AH    WORK1,=H'255'            GET MOVE LENGTH REMAINING       80940020
         EX    WORK1,MOVLOP2            MOVE REMAINING SEGMENT          81000020
         BR    RETURN                   RETURN                          81060020
MOVLOP2  MVC   D0(D0,WORKB),D0(WORKA)   EXECUTED MOVE - 256 OR LESS     81120020
*                                                                       81180020
* THIS SUBROUTINE LOGS THE OVERLAP ERROR MESSAGE AND DECREMENTS THE     81240020
*        MACRO NEST COUNT. IT ADJUSTS THE 'INMACRO' SWITCH IF           81300020
*        NECESSARY.                                                     81360020
*                                                                       81420020
ERRRTN   EQU   *                                                        81480020
         L     R12,=A(LOGERR01)         GET PTR TO ERROR LOGGING RTN    81540020
         BALR  R9,R12                   GO MAKE ERROR STACK ENTRY       81600020
         DC    AL1(SEV89,ERR89)         ERROR PARAMETERS                81660020
         L     R9,MACROLVL              GET CURRENT MACRO NEST COUNT    81720020
         GOIF  (R9),NOTZERO=ERRRTN0     BRANCH IF NOT OPEN CODE         81780020
         SET   FLUSH2,ON                INDICATE TEXT TO BE FLUSHED     81870020
         BR    R2                       EXIT DIRECTLY                   81960020
ERRRTN0  EQU   *                                                        82020020
         BCT   R9,ERRRTN1               DECREMENT BY ONE. IF ZERO,      82080020
         SET   INMACRO,OFF              INDICATE POPPED TO OPEN CODE    82140020
ERRRTN1  ST    R9,MACROLVL              SAVE ADJUSTED MACRO NEST COUNT  82200020
         BR    R2                       RETURN                          82260020
*                                                                       82320020
* THIS SUBROUTINE SETS UP IN THE COMMON AREA THE POINTERS TO THE        82380020
*        VARIOUS GENERATION-TIME DICTIONARY ELEMENTS. THE POINTERS      82440020
*        ARE COMPUTED FROM VALUES IN THE DICTIONARY HEADER.             82500020
*        IT IS CALLED BY THE FOLLOWING ROUTINES -                       82560020
*        MACRFINI,PHASENTR,PROTOEND                                     82620020
*                                                                       82680020
PTRINIT  EQU   *                                                        82740020
         L     SKDCTPTR,CURRDICT        GET PTR TO DICT FOR INIT'ATION  82800020
         LR    WORK1,SKDCTPTR           GET COPY FOR CALCULATION        82860020
         USING SKDCTHDR,SKDCTPTR                                        82920020
         LA    WORK1,SKHDREND-SKDCTHDR(,WORK1) GET PTR TO GBL VECTOR    82980020
         ST    WORK1,CURRGLBL           SET ASIDE FOR GLBL REFERENCES   83040020
         MVC   HIBYTE0+(L'HIBYTE0-L'SKSRDPT)(L'SKSRDPT),SKSRDPT        X83100020
               GET LENGTH OF GLOBAL VECTOR FROM DICT HEADER             83160020
         A     WORK1,HIBYTE0            CALCULATE PTR TO SEQ SYMB DICT  83220020
         ST    WORK1,CURRSEQS           SET ADIDE FOR SEQ SYMB REFERS   83280020
         MVC   HIBYTE0+(L'HIBYTE0-L'SKLDADR)(L'SKLDADR),SKLDADR        X83340020
               GET LENGTH OF SEQ SYMB REFERENCE DICT FROM DICT HDR      83400020
         A     WORK1,HIBYTE0            CALCULATE PTR TO LOCAL DICT     83460020
         ST    WORK1,CURRLOCL           SET ASIDE FOR LOCAL REFERS      83520020
         MVC   HIBYTE0+(L'HIBYTE0-L'SKLDLNG)(L'SKLDLNG),SKLDLNG        X83580020
               GET LENGTH OF LOCAL DICT FROM DICT HEADER                83640020
         A     WORK1,HIBYTE0            CALCULATE PTR TO END OF SPACE   83700020
         ST    WORK1,SPACEAL            SET ASIDE FOR FREE SPACE LOW    83760020
         LCR   WORK1,WORK1              COMPLEMENT FOR CALCULATION      83820020
         A     WORK1,SPACEAH            ADD FREE SPACE HIGH             83880020
         ST    WORK1,SPACEAE            SAVE FREE SPACE EXTENT          83940020
         LR    WORK1,SKDCTPTR           RE-GET CALCULATION BASE         84000020
         SH    WORK1,=H'3'              GET PTR TO POSITIONAL VECTOR    84060020
         ST    WORK1,CURRPOST           SAVE FOR POSIT PARAM REFERS     84120020
         MVC   HIBYTE0+(L'HIBYTE0-L'SKKVADR)(L'SKKVADR),SKKVADR        X84180020
               GET LENGTH OF POSITIONAL VECTOR FROM DICT HEADER         84240020
         S     WORK1,HIBYTE0            GET PTR TO KEYWORD VECTOR       84300020
         ST    WORK1,CURRKEYD           SET ASIDE FOR KEYWORD REFERS    84360020
         MVC   HIBYTE0+(L'HIBYTE0-L'SKMPADR)(L'SKMPADR),SKMPADR        X84420020
               PICK UP PARAM TBL LENGTH FROM DICT HEADER                84480020
         S     SKDCTPTR,HIBYTE0         CALCULATE PTR TO PARAM TABLE    84540020
         ST    SKDCTPTR,CURRPARM        SET ASIDE FOR PARAM REFERS      84600020
         BR    RETURN                   RETURN                          84660020
         DROP  SKDCTPTR                                                 84720020
*                                                                       84780020
* THIS SUBROUTINE INITIALIZES THE LOCAL DICTIONARY SPACE TO ZEROES.     84840020
*        IT IS CALLED FROM THE FOLLOWING ROUTINES -                     84900020
*        PHASENTR,PROTOEND                                              84960020
*                                                                       85020020
LOCLINIT EQU   *                                                        85080020
         LR    R12,RETURN               PRESERVE RETURN REGISTER        85140020
         L     WORKA,CURRLOCL           GET PTR TO START OF LOCAL DICT  85200020
         LA    WORKB,D1(,WORKA)         GET PTR TO SINK LOCATION        85260020
         MVI   D0(WORKA),J0             INSERT ZERO TO BE PROPAGATED    85320020
         BAL   RETURN,MOVLOP            GO TO CLEAR LOCAL DICT SPACE    85380020
         BR    R12                      RETURN                          85440020
*                                                                       85500020
* THIS SUBROUTINE FETCHES A SKELETON DICTIONARY INTO THE FREE           85560020
*        SPACE. THE I/O PARAMETERS ARE SET UP IN PIOPARMA AND           85620020
*        PIOPARMB, AND R10 POINTS TO THE MDV ENTRY.                     85680020
*        IT IS CALLED FROM THE FOLLOWING ROUTINES-                      85740020
*        PHASENTR,PROTOEND                                              85800020
*                                                                       85860020
DCTFETCH EQU   *                                                        85920020
         ST    RETURN,REGSAVEB          SAVE LINK REGISTER              85980020
         USING MDVNTRY,PARMA                                            86040020
         LA    R11,MNPSD                GET PTR TO N/P ADDRESS          86100020
         JPOINT FILE=FILE1,ADDR=(R11),NEXT=READ POSITION TO DICTIONARY  86160020
         LH    R5,JMAXRL1               SET UP FILES BLOCK SIZE         86220020
         LA    R6,FILE1                 SET UP FILE INDICATOR           86280020
         BAL   RTNLNK,BUFREAD           LINK TO BUFFERED READ RTN       86340020
         L     RETURN,REGSAVEB          RESTORE LINK REGISTER           86400020
         BR    RETURN                   RETURN                          86460020
         DROP  PARMA                                                    86520020
         EJECT                                                          86580020
         LTORG                                                          86640020
         SPACE 3                                                        86700020
         JPATCH X3N00,E40               X3N PATCH AREA                  86760020
         END                                                            86820020
