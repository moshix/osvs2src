         MACRO                                                          00100002
&TAG     INS   &TREE,&A=,&R=,&#=,&T=,&C=,&SP=,&S=,&INSARG=,&MOVE=,     *00200002
               &RECL=,&TYPE=                                            00300002
.************************* SEPTEMBER 27,1973.************************** 00400002
.* THE INS MACRO-INSTRUCTION ASSOCIATES A KEY WITH A RECORD ADDRESS BY* 00500002
.* CHANGING THE RADIX PARTITION TREE OF ASSOCIATIONS.                 * 00600002
.*                                                                    * 00700002
.* THE ADDRESS USED IS OBTAINED IN EITHER ONE OF TWO WAYS:            * 00800002
.*                                                                    * 00900002
.* 0:    IF THE A-PARAMETER IS CODED AND THE R-PARAMETER IS NOT CODED,* 01000002
.*       THE ADDRESS IS AS SPECIFIED BY THE A-PARAMETER.              * 01100002
.*                                                                    * 01200002
.* 1:    IF BOTH THE A AND R PARAMETERS ARE CODED, SPACE IS ALLOCATED * 01300002
.*       FOR THE RECORD VIA THE GSPACE MACRO-INSTRUCTION, THE RECORD  * 01400002
.*       IS MOVED TO THE AREA ALLOCATED, AND THE ADDRESS OF THE       * 01500002
.*       ALLOCATED AREA IS USED. BY CODING THE R-PARAMETER THE RECORD * 01600002
.*       IS DEFINED SO IT CAN BE COLLECTED AT THE ALLOCATED AREA.     * 01700002
.*       IN EITHER CASE, AFTER THE INS MACRO HAS BEEN SUCCESSFULLY    * 01800002
.*       EXECUTED THE ADDRESS USED FOR THE ASSOCIATION IS RETURNED IN * 01900002
.*       REGISTER 15 AS THE RETURN CODE. IF THE INSERT IS NOT         * 02000002
.*       SUCCESSFUL FOR SOME REASON, THE RETURN CODE IN REGISTER 15 IS* 02100002
.*       NEGATIVE.                                                    * 02200002
.*                                                                    * 02300002
.* THE DESCRIPTIONS OF THE PARAMETERS FOR THE INS MACRO ARE AS        * 02400002
.* FOLLOWS:                                                           * 02500002
.*                                                                    * 02600002
.* TREE: THIS SPECIFIES THE ADDRESS OF THE RADIX PARTITION TREE USED  * 02700002
.*       TO STORE THE KEY-ADDRESS ASSOCIATIONS. IT MAY BE CODED TO    * 02800002
.*       SPECIFY EITHER A MAIN STORAGE LOCATION CONTAINING THE ADDRESS* 02900002
.*       OF THE RPT OR IN PARENTHESES TO INDICATE A GENERAL REGISTER  * 03000002
.*       CONTAINING THE ADDRESS OF THE RPT. IF "(1)" IS CODED, NO LOAD* 03100002
.*       REGISTER INSTRUCTION IS GENERATED BY THE INS MACRO, AS THE   * 03200002
.*       ADDRESS IS ALREADY IN THE APPROPRIATE PARAMETER LIST         * 03300002
.*       REGISTER.                                                    * 03400002
.*       THE TREE PARAMETER MAY BE OMITTED, IN WHICH CASE THE ADDRESS * 03500002
.*       OF THE RPT IS ASSUMED IN GPR 1.                              * 03600002
.*                                                                    * 03700002
.* A:    THE A-PARAMETER SPECIFIES THE ADDRESS OF THE RECORD          * 03800002
.*       CONTAINING THE KEY TO BE USED FOR THE ASSOCIATION. THE RECORD* 03900002
.*       ADDRESS MAY BE EITHER A MAIN STORAGE LOCATION OR MAY BE IN A * 04000002
.*       REGISTER, INDICATED BY ENCLOSING THE REGISTER NAME OR # IN   * 04100002
.*       PARENTHESES. FOR EXAMPLE, IF "A=LABEL" IS CODED, "LABEL" IS  * 04200002
.*       TAKEN AS THE SYMBOLIC NAME OF THE MAIN STORAGE LOCATION      * 04300002
.*       CONTAINING THE RECORD. THE A PARAMETER MAY BE USED IN        * 04400002
.*       CONJUNCTION WITH THE R PARAMETER TO SPECIFY A SCATTERED      * 04500002
.*       RECORD TO BE COLLECTED INTO A SPACE PROVIDED VIA THE GSPACE  * 04600002
.*       MACRO-INSTRUCTION.                                           * 04700002
.*                                                                    * 04800002
.* R:    THE R-PARAMETER IS USED TO SPECIFY THE RECORD WHEN IT IS     * 04900002
.*       DESIRED THAT THE INS MACRO ALLOCATE AN AREA TO HOLD THE      * 05000002
.*       RECORD VIA THE GSPACE MACRO AND MOVE THE RECORD TO THE AREA  * 05100002
.*       ALLOCATED BEFORE INSERTING THE ASSOCIATION IN THE RPT.       * 05200002
.*       THERE ARE TWO MODES FOR CODING THE R PARAMETER; THE FIRST WAY* 05300002
.*       IS IN CONJUNCTION WITH THE A PARAMETER, AND THE SECOND IS    * 05400002
.*       WITHOUT CODING THE A PARAMETER. IF BOTH THE A AND R          * 05500002
.*       PARAMETERS ARE CODED, THEN THE A PARAMETER PROVIDES THE      * 05600002
.*       ADDRESS OF A BASE AREA FROM WHICH TO COLLECT THE RECORD, AND * 05700002
.*       THE R-PARAMETER SPECIFIES THE RECORD IN THE BASE AREA BY     * 05800002
.*       PAIRS OF DISPLACEMENTS AND LENGTHS, ENCLOSED IN PARENTHESES. * 05900002
.*       THE DISPLACEMENT-LENGTH PAIRS ARE CODED AS ((D,L),(D,L),...  * 06000002
.*       ,(D,L)), WHERE EACH DISPLACEMENT AND LENGTH IS ENCLOSED IN   * 06100002
.*       PARENTHESES, AND THE ORDER THE PAIRS APPEAR IN THE LIST IS   * 06200002
.*       THE ORDER IN WHICH THE RECORD IS COLLECTED.                  * 06300002
.*       EACH DISPLACEMENT AND LENGTH MUST BE A SELF-DEFINING DECIMAL * 06400002
.*       NUMBER.                                                      * 06500002
.*       FOR EXAMPLE, CODING "A=(8),R=((10,3),(6,9))" CAUSES THE      * 06600002
.*       RECORD TO BE COLLECTED FROM THE TWO FIELDS AT OFFSETS 10 AND * 06700002
.*       6 RESPECTIVELY FROM THE BASE ADDRESS IN GPR 8. NOTE THAT NO  * 06800002
.*       CHECK IS MADE FOR OVERLAPPING FIELDS.                        * 06900002
.*       IF THERE IS ONLY ONE DISPLACEMENT-LENGTH PAIR, IT MAY BE     * 07000002
.*       CODED WITH ONLY ONE SET OF ENCLOSING PARENTHESES INSTEAD OF  * 07100002
.*       TWO.                                                         * 07200002
.*                                                                    * 07300002
.*       IF THE R PARAMETER IS CODED AND THE A PARAMETER IS NOT CODED,* 07400002
.*       THE ELEMENTS IN THE LIST FOR THE R PARAMETER MAY BE CODED AS * 07500002
.*       ADDRESS-LENGTH PAIRS. IN THIS CASE, EACH ADDRESS MAY EITHER  * 07600002
.*       BE A MAIN STORAGE LOCATION, OR IN A REGISTER. EACH ADDRESS   * 07700002
.*       MUST BE A RELOCATABLE EXPRESSION IF IT NOT IN A REGISTER.    * 07800002
.*       INSTEAD OF THE ADDRESS-LENGTH PAIR, A LABEL MAY BE CODED, AS * 07900002
.*       LONG AS THE LABEL HAS A LENGTH ATTRIBUTE THAT CAN BE USED TO * 08000002
.*       OBTAIN THE LENGTH OF THE CORRESPONDING FIELD.                * 08100002
.*                                                                    * 08200002
.* T:    THE T-PARAMETER IS USED TO SPECIFY THE RADIX PARTITION TREE  * 08300002
.*       TYPE FOR THE INSERTION. THE T-PARAMETER MUST BE CODED AS A   * 08400002
.*       SINGLE SELF-DEFINING DECMIAL NUMBER WITHOUT LEADING ZEROS.   * 08500002
.*       IF THE T-PARAMETER IS NOT CODED, THE TYPE WILL BE OBTAINED   * 08600002
.*       FROM THE GLOBAL VARIABLE &IGATYPE (IF IT IS A VALID RPT      * 08700002
.*       TYPE). IF IT IS NOT A VALID TREE TYPE, A TYPE 8 IS SUPPLIED, * 08800002
.*       AND THE GLOBAL VARIABLE &IGATYPE IS SET TO 8.                * 08900002
.*                                                                    * 09000002
.*       THE PARAMETERS INSARG, MOVE, RECL, AND TYPE SHOULD NOT BE    * 09100002
.*       USED, AS THEY ARE ONLY PRESENT FOR COMPATIBILITY WITH EARLIER* 09200002
.*       VERSIONS OF THE INSERT MACRO.                                * 09300002
         GBLC  &IGABLST  THE OFFSET INTO THE TREE HEADER FOR THE LIST  *09400002
                         OF RPT ENTRY POINTS.                           09500002
         GBLC  &IGAINS                                                  09600002
         GBLC  &IGARPT#  THE RADIX PARTITION TREE TYPE FROM EITHER THE *09700002
                         T OR TYPE PARAMETER.                           09800002
         GBLA  &IGARECL  THE LENGTH OF THE RECORD TO BE INSERTED BY THE*09900002
                         INSERT MACRO-INSTRUCTION.                      10000002
         GBLA  &IGALEFT(256)  LEFT INVERTIBLE SUBTRACTION EDGES FOR THE*10100002
                         BINARY PARSE TREE.                             10200002
         GBLA  &IGARGHT(256)  RIGHT INVERTIBLE SUBTRACTION EDGES FOR   *10300002
                         THE BINARY PARSE TREE.                         10400002
         GBLA  &IGAX     PENULTIMATE VERTEX ON PATH TO CURRENT ATOM    *10500002
                         WHEN SCANNING.                                 10600002
         GBLA  &IGAZ     LAST INNER VERTEX ON PATH TO ATOM.             10700002
         GBLA  &IGAPATH(16)  PATH VECTOR FOR THE SCANNING OPERATIONS ON*10800002
                         THE PARSE TREE.                                10900002
         GBLA  &IGALEVL  NUMBER OF NESTED LEVELS OF PARENTHESES FOR    *11000002
                         CURRENT ATOM.                                  11100002
         GBLB  &IGAOKAY  ON IF THE PARSE IN RPTDSECT DID NOT FIND ANY  *11200002
                SYNTAX ERRORS IN THE R PARAMETER LIST.                  11300002
         LCLA  &I        A LOCAL VARIABLE FOR KEEPING TRACK OF THE     *11400002
                         CURRENT ENTRY BEING SCANNED IN THE R PARAMETER*11500002
                         LIST.                                          11600002
         LCLA  &LNG      THE LENGTH OF THE CURRENT DISPLACEMENT-LENGTH *11700002
                         PAIR.                                          11800002
         LCLA  &TMPA     USED TO REMEMBER &IGAPATH(&IGALEVL-1).         11900002
         LCLC  &RC       USED TO SET THE REQUEST MODE FOR THE GSPACE   *12000002
                         MACRO TO CONDIRIONAL OR UNCONDITIONAL.         12100002
         LCLC  &X        JUST A LOCAL CHARACTER VECTOR FOR COLLECTING  *12200002
                         OPERANDS.                                      12300002
         LCLB  &REQUEST  ON IF THE GSPACE REQUEST IS A CONDITIONAL     *12400002
                         REQUEST.                                       12500002
         LCLB  &R1SAVED  ON IF REGISTER 1 IS SAVED THROUGH THE GSPACE  *12600002
                         OPERATION.                                     12700002
         LCLB  &FINEQU   ON IF THE EQUATE "FIN&SYSNDX EQU *" MUST BE   *12800002
                         GENERATED AT THE END OF THE MACRO EXECUTION.   12900002
         LCLB  &ERROR    THIS BIT IS TURNED ON WHENEVER AN MNOTE OF    *13000002
                         SUFFICIENT SEVERITY IS GENERATED.              13100002
         LCLA  &DSP      THIS IS USED FOR COLLECTING THE DISPLACEMENT  *13200002
                         AS A NUMBER.                                   13300002
         LCLC  &FIELD    THIS IS USED TO HOLD THE FIELD OF AN (F,L)    *13400002
                         PAIR WHILE GETTING THE L.                      13500002
         LCLB  &XFER     ON TO GENERATE THE MOVES WHEN IT IS THE RIGHT *13600002
               ITERATION THROUGH THE LOOP.                              13700002
.*A000000                                                        Y02147 13800002
.********************************************************************** 13900002
.* CHECK TO SEE WHETHER ANY OF THE OLD PARAMETERS ARE CODED, AND IF   * 14000002
.* THEY ARE THEN MAP THEM TO THE NEW PARAMETERS VIA MACRO RECURSION.  * 14100002
.********************************************************************** 14200002
.*                                                                    * 14300002
         AIF   ((K'&INSARG EQ 0)AND(K'&MOVE EQ 0)AND(K'&RECL EQ 0)).NEW*14400002
                         GO IF NONE OF THE OLD PARAMETERS ARE CODED.    14500002
         AIF   (K'&RECL EQ 0).NORECL  SEE IF THE RECORD LENGTH IS NOT  *14600002
                         CODED.                                         14700002
&TAG     INS   &TREE,A=&INSARG,T=&T,TYPE=&TYPE,R=(0,&RECL),C=1          14800002
         AGO   .FIN      ALL DONE, NOW EXIT.                            14900002
.NORECL  ANOP                                                           15000002
&TAG     INS   &TREE,A=&INSARG,T=&T,TYPE=&TYPE,C=1                      15100002
         AGO   .FIN  ALL DONE NOW, EXIT FROM THE INS MACRO-INSTRUCTION. 15200002
.********************************************************************** 15300002
.* ALL FINISHED WITH COMPATIBILITY PROCESSING WITH THE OLD FORMATS,   * 15400002
.* NOW REALLY DO IT.                                                  * 15500002
.********************************************************************** 15600002
.NEW     ANOP                                                           15700002
.********************************************************************** 15800002
.* CHECK TO SEE IF THE LABEL FIELD IS CODED AND GENERATE THE          * 15900002
.* APPROPRIATE EQUATE IF IT IS.                                       * 16000002
.********************************************************************** 16100002
         AIF   (K'&TAG EQ 0).NOTAG  GO AROUND THE EQUATE IF THE TAG IS *16200002
                         NOT PRESENT.                                   16300002
&TAG     EQU   *         PROVIDE THE LABEL.                             16400002
.NOTAG   ANOP                                                           16500002
.********************************************************************** 16600002
.* CHECK THE TYPE AND T PARAMETERS TO SEE IF A VALID RPT TYPE IS      * 16700002
.* SPECIFIED. IF NEITHER IS SPECIFIED, ASSUME IT IS TYPE 8 RPT. THE   * 16800002
.* TYPE IS PUT INTO THE GLOBAL VARIABLE &IGARPT# AT THE END OF THE    * 16900002
.* TYPE CHECKING SECTION.                                             * 17000002
.********************************************************************** 17100002
.RPT#    AIF   (K'&T EQ 0).RPT#TMT  SEE IF THE T PARAMETER IS CODED.    17200002
         AIF   (K'&TYPE EQ 0).RPT#TCK  USE THE T PARAMETER IF IT IS    *17300002
                         CODED AND THE TYPE PARAMETER IS NOT CODED.     17400002
.********************************************************************** 17500002
.* BOTH THE T AND TYPE PARAMETERS ARE CODED; SEE IF THEY ARE THE SAME,* 17600002
.* AND IF THEY ARE NOT THEN USE T.                                    * 17700002
.********************************************************************** 17800002
         AIF   ('&T' EQ '&TYPE').RPT#TCK  IF THEY ARE THE SAME THEN USE*17900002
                         T.                                             18000002
         MNOTE 4,'TYPE CONFLICT, ONLY T OR TYPE SHOULD BE CODED.'       18100002
.RPT#TCK ANOP                                                           18200002
&IGARPT# SETC  '&T'      GET THE RPT TYPE.                              18300002
         AGO   .RPT#CHK  GO TO CHECK THE VALIDITY OF THE RADIX         *18400002
                         PARTITION TREE TYPE.                           18500002
.********************************************************************** 18600002
.* THE T PARAMETER IS NOT CODED, SEE IF THE TYPE PARAMETER IS CODED.  * 18700002
.********************************************************************** 18800002
.RPT#TMT AIF   (K'&TYPE EQ 0).RPT#8  IF BOTH ARE LEFT OUT USE TYPE 8   *18900002
                         RPT.                                           19000002
&IGARPT# SETC  '&TYPE'   SET THE TYPE TO THE TYPE THAT IS SPECIFIED BY *19100002
                         THE TYPE PARAMETER.                            19200002
         AGO   .RPT#CHK  GO CHECK IT FOR VALIDITY.                      19300002
.RPT#CHK AIF   (('&IGARPT#' EQ '8')OR('&IGARPT#' EQ '5')OR('&IGARPT#' E*19400002
               Q '4')).RPT#FIN                                          19500002
         MNOTE 4,'INVALID RPT TYPE, TYPE 8 ASSUMED.'                    19600002
.RPT#8   ANOP                                                           19700002
&IGARPT# SETC  '8'       SET RPT TYPE TO THE DEFAULT.                   19800002
.RPT#FIN ANOP                                                           19900002
      RPTDSECT T=5,DS=NO                                                20000002
      RPTDSECT T=8,DS=NO                                                20100002
.********************************************************************** 20200002
.* INSERT INTO A TYPE 8 RADIX PARTITION TREE. FIRST CHECK TO SEE      * 20300002
.* WHETHER THE AREA TO HOLD THE NEW RECORD MUST BE ALLOCATED VIA THE  * 20400002
.* GSPACE MACRO-INSTRUCTION. IF THE R-PARAMETER IS CODED THEN THE AREA* 20500002
.* MUST BE ALLOCATED. IF THE AREA DOES NOT HAVE TO BE ALLOCATED GO    * 20600002
.* DIRECTLY TO .CHKA.                                                 * 20700002
.********************************************************************** 20800002
         AIF   (K'&R EQ 0).CHKA  SEE IF THERE IS NO RECORD SPECIFIED.   20900002
.********************************************************************** 21000002
.* CHECK TO SEE WHETHER THE TREE ADDRESS IS IN GPR 1 AND MUST BE      * 21100002
.* PRESERVED THROUGH THE GSPACE OPERATION.                            * 21200002
.********************************************************************** 21300002
         AIF   (K'&TREE EQ 0).TREEMT  GO IF THE TREE PARAMETER IS NOT  *21400002
                         CODED.                                         21500002
         AIF   ('&TREE'(1,1) NE '(').TREEOK  SEE IF IT IS NOT IN A     *21600002
                         REGISTER.                                      21700002
         AIF   ('&TREE' EQ '(1)').TREEMT  SEE IF IT IS SPECIFICALLY    *21800002
                         SPECIFIED IN REGISTER 1.                       21900002
         AGO   .TREEOK   IT IS APPARENTLY NOT IN REGISTER 1, ASSUME IT *22000002
                         IS OK.                                         22100002
.TREEMT  ST    1,((4*1)+20-64*((2+1)/16))(,13)  SAVE R1.                22200002
&R1SAVED SETB  (1)       SET THE BIT ON TO INDICATE R1 WAS STORED      *22300002
                         THROUGH THE GSPACE OPERATION.                  22400002
.TREEOK  ANOP                                                           22500002
.********************************************************************** 22600002
.* DETERMINE THE LENGTH OF THE AREA NEEDED FOR THE RECORD BY ADDING UP* 22700002
.* ALL THE INDIVIDUAL LENGTHS IN THE DISPLACEMENT-LENGTH PAIRS IN THE * 22800002
.* R-PARAMETER.                                                       * 22900002
.********************************************************************** 23000002
.* THE R PARAMETER HAS BEEN CHECKED AT THIS POINT, AND IS NOT THE     * 23100002
.* EMPTY STRING.                                                      * 23200002
.* THE FOLLOWING LOOP IS DONE TWICE; THE FIRST TIME THROUGH IT ONLY   * 23300002
.* CHECKS ALL THE R-PARAMETER ELEMENTS FOR VALIDITY AND ADDS UP ALL   * 23400002
.* THE FIELD LENGTHS FOR THE GSPACE, AND THE SECOND TIME THROUGH IT   * 23500002
.* GENERATES ALL THE MVC'S TO MOVE THE RECORD TO THE AREA ALLOCATED.  * 23600002
.* IF THE FIRST TIME THROUGH FINDS ERRORS, THEN THERE IS NO SECOND    * 23700002
.* TIME.                                                              * 23800002
.********************************************************************** 23900002
.LOOPAIR ANOP                                                           24000002
&IGARECL SETA  0         INITIALIZE THE RECORD LENGTH TO ZERO.          24100002
         AIF   (N'&R EQ 2).RHAS2  SEE IF THERE ARE EXACTLY TWO ELEMENTS*24200002
                         IN R ON PARENTHESIS LEVEL ONE.                 24300002
         AIF   (N'&R NE 1).RMIXED  SEE IF THERE ARE MORE THAN TWO      *24400002
                         ELEMENTS, FOR IF SO THE LIST CONSISTS OF A    *24500002
                         SERIES OF FIELD NAMES OR (D,L) PAIRS.          24600002
.********************************************************************** 24700002
.* R HAS ONLY ONE ELEMENT ON LEVEL 1. FIND OUT WHICH OF THE FOLLOWING * 24800002
.* CASES APPLIES, AND TAKE THE INDICATED ACTION:                      * 24900002
.* IN THE FOLLOWING DISCUSSION, )F" MEANS A FIELD NAME, "D" MEANS     * 25000002
.* DISPLACEMENT, "L" MEANS LENGTH, AND "X" MEANS ANY STRING. THE D AND* 25100002
.* L FIELDS MUST BE SELF-DEFINING TERMS,.                             * 25200002
.* IF:   THEN:                                                        * 25300002
.* R=F   ENTER THE ROUTINE AT .RMIXED TO PROCESS A LIST OF PAIRS OF   * 25400002
.*       F'S AND (D,L) PAIRS, SINCE THIS CASE WILL BE TREATED AS A    * 25500002
.*       SINGLE FIELD NAME BY THAT ROUTINE.                           * 25600002
.* R=(F) THIS IS AN ERROR, BECAUSE OF THE POSSIBLE FUTURE USE OF THIS * 25700002
.*       FORM TO INDICATE THE ADDRESS OF A LIST OF DISPLACEMENT-LENGTH* 25800002
.*       PAIRS IN A REGISTER.                                         * 25900002
.* R=L   L IS THE LENGTH OF THE RECORD TO BE INSERTED. THE A PARMAETER* 26000002
.*       MUST BE CODED FOR THIS TO BE VALID, BECAUSE OTHERWISE THERE  * 26100002
.*       IS NO WAY TO FIND OUT WHERE THE RECORD IS THAT IS TO BE      * 26200002
.*       INSERTED.                                                    * 26300002
.* R=(L) THIS IS AN ERROR, BECAUSE OF THE POSSIBILITY THAT IN THE     * 26400002
.*       FUTURE I WILL WANT TO PUT THE ADDRESS OF A LIST OF           * 26500002
.*       DISPLACEMENT-LENGTH PAIRS IN A REGISTER.                     * 26600002
.* R=((X)) ENTER THE .RMIXED ROUTINE, SINCE IT LOOKS LIKE A LIST OF   * 26700002
.*       DISPLACEMENT-LENGTH PAIRS WITH ONLY ONE PAIR.                * 26800002
.*       ANYTHING ELSE IS INVALID, AND PRODUCES THE MNOTE 12,'INVALID * 26900002
.*       R-PARAMETER.'                                                * 27000002
.********************************************************************** 27100002
         AIF   ('&R'(1,1) NE '(').RNOTLP  SEE IF THERE ARE NO          *27200002
                         PARENTHESES AROUND THE OPERAND.                27300002
         AIF   ('&R'(1,2) EQ '((').RMIXED  SEE IF THIS IS THE CASE     *27400002
                         R=((X)).                                       27500002
         MNOTE 12,'A REGISTER CANNOT BE SPECIFIED FOR THE LIST OF DISPL*27600002
               ACEMENT-LENGTH PAIRS.'                                   27700002
&ERROR   SETB  1         SET THE ERROR FLAG ON.                         27800002
         AGO   .RFIN     END THIS PART.                                 27900002
.********************************************************************** 28000002
.* THIS MUST BE ONE OF THE TWO CASES R=F OR R=L.                      * 28100002
.********************************************************************** 28200002
.RNOTLP  ANOP                                                           28300002
         AIF   (((T'&R(1) NE 'M')AND(T'&R(1) NE 'N')AND(T'&R(1) NE 'O')*28400002
               AND(T'&R(1) NE 'T')AND(T'&R(1) NE 'W')AND(T'&R(1) NE '$'*28500002
               )AND(T'&R(1) NE 'U'))).RMIXED                            28600002
.* THIS MUST BE THE CASE WHERE "R=L" IS CODED.                        * 28700002
         AIF   (T'&R(1) NE 'N').R1NOTN  SEE IF IT IS A SELF-DEFINING   *28800002
                         FIELD.                                         28900002
.********************************************************************** 29000002
.* R=L IS CODED, AND L IS A SELF-DEFINING TERM. USE L FOR THE RECORD  * 29100002
.* LENGTH, BUT FIRST CHECK TO SEE IF THE A PARAMETER IS CODED. IF THE * 29200002
.* A PARAMETER IS NOT CODED IT IS AN ERROR.                           * 29300002
.********************************************************************** 29400002
&IGARECL SETA  (&R(1))   GET THE RECORD LENGTH FROM THE L OF THE R     *29500002
                         PARAMETER.                                     29600002
         AIF   (K'&A EQ 0).R1AMT  SEE IF THE A PARAMETER HAS BEEN LEFT *29700002
                         OUT.                                           29800002
         AIF   (&IGARECL GT 256).R1LERR  FOR THE NONCE ONLY TAKE FIELDS*29900002
                         THAT ARE LESS THAN 257 BYTES LONG.             30000002
         AIF   (NOT &XFER).RFIN  SEE IF THIS IS THE MVC GENERATION     *30100002
                         LOOP, OR JUST THE VALIDATION AND ADDING UP    *30200002
                         FIELD LENGTHS LOOP.                            30300002
.* GENERATE THE MOVE OF THE RECORD TO THE AREA ALLOCATED VIA GSPACE.  * 30400002
         AIF   ('&A'(1,1) EQ '(').R1AGPR  SEE IF THE ADDRESS IS IN A   *30500002
                         GPR.                                           30600002
         MVC   0(&IGARECL,1),&A  MOVE THE RECORD.                       30700002
         AGO   .RFIN     ALL DONE NOW.                                  30800002
.R1AGPR  MVC   0(&IGARECL,1),0&A  MOVE THE RECORD.                      30900002
         AGO   .RFIN     GO TO THE END OF THE R PARAMETER PROCESSING.   31000002
.********************************************************************** 31100002
.* FOLLOWING ARE THE MISCELLANEOUS ERROR MNOTES FROM THE SINGLE       * 31200002
.* ELEMENT CASE OF THE R PARAMETER.                                   * 31300002
.********************************************************************** 31400002
.R1LERR  MNOTE 12,'THE LENGTH OF EACH FIELD DEFINED BY R CANNOT EXCEED *31500002
               256 BYTES.'                                              31600002
&ERROR   SETB  (1)       SET THE ERROR FLAG ON SO THE MVC'S DON'T GET  *31700002
                         GENERATED.                                     31800002
         AGO   .RFIN                                                    31900002
.R1AMT   MNOTE 12,'THE A PARAMETER MUST BE CODED WITH R AS CODED.'      32000002
&ERROR   SETB  (1)       SET THE ERROR FLAG ON.                         32100002
         AGO   .RFIN                                                    32200002
.R1NOTN  MNOTE 12,'THE LENGTH MUST BE A SELF-DEFINING TERM FOR THE R PA*32300002
               RAMETER.'                                                32400002
&ERROR   SETB  (1)       SET THE ERROR FLAG ON.                         32500002
         AGO   .RFIN                                                    32600002
.********************************************************************** 32700002
.* THE R PARAMETER HAS EXACTLY TWO ELEMENTS IN IT ON LEVEL 1. SEE IF  * 32800002
.* EITHER OF THESE TWO ELEMENTS STARTS WITH A LEFT PARENTHESIS, WHICH * 32900002
.* MEANS ONE OF THE CASES R=(X,(X)), R=((X),X), OR R=((X),(X)). IF IT * 33000002
.* IS ONE OF THESE CASES ENTER THE MIXED ROUTINE AT .RMIXED.          * 33100002
.* IF IT IS NOT ONE OF THOSE THREE CASES, THEN IT MUST BE ONE OF THE  * 33200002
.* CASES R=(F,F), R=(F,L), OR R=(D,L). NOTE THAT THE CASE R=(D,L) CAN * 33300002
.* BE CODED AS R=(,L).                                                * 33400002
.********************************************************************** 33500002
.RHAS2   AIF   (K'&R(2) NE 0).R2NOTMT  SEE IF THE SECOND ELEMENT IS THE*33600002
                         EMPTY STRING. THIS IS NO GOOD.                 33700002
         MNOTE 12,'THE SECOND ELEMENT OF A DISPLACEMENT-LENGTH PAIR MUS*33800002
               T BE CODED.'                                             33900002
&ERROR   SETB  (1)       SET THE ERROR FLAG ON.                         34000002
         AGO   .FIN      FORGET IT, CAN'T DO ANYTHING WITH AN EMPTY    *34100002
                         STRING FOR THE LENGTH.                         34200002
.R2DMT   ANOP                                                           34300002
&DSP     SETA  (0)       SET THE DISPLACEMENT TO ZERO, SINCE IT IS     *34400002
                         CODED AS THE EMPTY STRING.                     34500002
         AGO   .R2MERGE  MERGE WITH THE CASE WHERE THE DISPLACEMENT IS *34600002
                         NOT THE EMPTY STRING.                          34700002
.R2NOTMT AIF   (K'&R(1) EQ 0).R2DMT  SEE IF THE DISPLACEMENT IS THE    *34800002
                         EMPTY STRING.                                  34900002
         AIF   (('&R(1)'(1,1) EQ '(')OR('&R(2)'(1,1) EQ '(')).RMIXED   *35000002
                         LOOK FOR ONE OF THE CASES R=(X,(X)), R=((X),  *35100002
                         X), OR R=((X),(X)).                            35200002
         AIF   (((T'&R(2) NE 'M')AND(T'&R(2) NE 'N')AND(T'&R(2) NE 'O')*35300002
               AND(T'&R(2) NE 'T')AND(T'&R(2) NE 'W')AND(T'&R(2) NE '$'*35400002
               )AND(T'&R(2) NE 'U'))).RMIXED                            35500002
.* THE SECOND ELEMENT IS NOT A FIELD NAME, SO IT MUST EITHER BE ONE OF* 35600002
.* THE TWO CASES R=(F,L) OR R=(D,L), OR IT IS AN ERROR.               * 35700002
         AIF   ((T'&R(1) NE 'M')AND(T'&R(1) NE 'N')AND(T'&R(1) NE 'O')A*35800002
               ND(T'&R(1) NE 'T')AND(T'&R(1) NE 'W')AND(T'&R(1) NE '$')*35900002
               AND(T'&R(1) NE 'U')).R2F1                                36000002
         AIF   (T'&R(1) NE 'N').R2DTYPE  SEE IF THE FIRST ONE IS A     *36100002
                         VALID DISPLACEMENT.                            36200002
&DSP     SETA  (&R(1))   PICK UP THE DISPLACEMENT.                      36300002
.R2MERGE ANOP                                                           36400002
         AIF   (T'&R(2) EQ 'N').R2TSELF  SEE IF THE LENGTH IS A        *36500002
                         SELF-DEFINING FIELD.                           36600002
&I       SETA  (K'&R(2))  CHECK THE FIELD TO SEE IF IT ALL NUMERIC.     36700002
.R2LTKLP AIF   (('&R(2)'(&I,1) LT '0')OR('&R(2)'(&I,1) GT '9')).R2LTYPE*36800002
                         SEE IF IT IS NOT ONE OF THE DIGITS 0-9.        36900002
&I       SETA  (&I-1)    STEP DOWN TO THE NEXT CHARACTER.               37000002
         AIF   (&I GT 0).R2LTKLP  SEE IF ALL THE CHARACTERS HAVE BEEN  *37100002
                         CHECKED.                                       37200002
.R2TSELF ANOP                                                           37300002
&IGARECL SETA  (&R(2))   GET THE LENGTH AS A NUMBER.                    37400002
         AIF   (&IGARECL GT 256).R1LERR  SEE IF THE LENGTH IS MORE THAN*37500002
                         256 BYTES.                                     37600002
         AIF   (&DSP GT 4095).R2DERR  SEE IF THE DISPLACEMENT IS       *37700002
                         GREATER THAN 4095.                             37800002
         AIF   (K'&A EQ 0).R1AMT  SEE IF THE A PARAMETER IS LEFT OUT;  *37900002
                         THAT IS BAD.                                   38000002
         AIF   (NOT &XFER).RFIN  SEE IF THIS IS THE MVC GENERATING LOOP*38100002
                         OR NOT.                                        38200002
.********************************************************************** 38300002
.* GENERATE THE MOVE OF THE RECORD TO THE AREA ALLOCATED FOR IT VIA   * 38400002
.* THE GSPACE MACRO-INSTRUCTION.                                      * 38500002
.********************************************************************** 38600002
         AIF   ('&A'(1,1) EQ '(').R2AGPR  SEE IF THE ADDRESS IS IN A   *38700002
                         GPR.                                           38800002
         MVC   0(&IGARECL,1),&DSP+&A  MOVE THE RECORD.                  38900002
         AGO   .RFIN                                                    39000002
.R2AGPR  MVC   0(&IGARECL,1),&DSP&A  MOVE THE RECORD IN.                39100002
         AGO   .RFIN                                                    39200002
.********************************************************************** 39300002
.* IT IS AN (F,L) PAIR, NOW SEE IF THE SECOND ELEMENT IS A VALID L.   * 39400002
.********************************************************************** 39500002
.R2F1    AIF   (T'&R(2) NE 'N').R2LTYPE  SEE IF THE SECOND ELEMENT IS A*39600002
                         SELF-DEFINING TERM.                            39700002
&IGARECL SETA  (&R(2))   GET THE LENGTH OF THE (F,L) PAIR.              39800002
         AIF   (&IGARECL GT 256).R1LERR  SEE IF THE LENGTH OF THE FIELD*39900002
                         IS MORE THAN 256.                              40000002
         AIF   (NOT &XFER).RFIN  SEE IF THIS IS THE MOVE GENERATION    *40100002
                         LOOP.                                          40200002
         MVC   0(&IGARECL,1),&R(1)  MOVE THE RECORD.                    40300002
         AIF   (K'&A EQ 0).RFIN  SEE IF THE A PARAMETER IS CODED.       40400002
         MNOTE 4,'THE A PARAMETER IS REDUNDANT.'                        40500002
         AGO   .RFIN     ALL DONE NOW, GO CHECK FOR THE MOVE GENERATION*40600002
                         ITERATION.                                     40700002
.********************************************************************** 40800002
.* THE FOLLOWING ARE THE SUNDRY MNOTES FOR THE TWO ELEMENT CASE FOR   * 40900002
.* THE R PARAMETER.                                                   * 41000002
.********************************************************************** 41100002
.R2DERR  MNOTE 12,'DISPLACEMENT IN R PARAMETER CANNOT EXCEED 4095.'     41200002
&ERROR   SETB  (1)       SET THE ERROR FLAG ON.                         41300002
         AGO   .RFIN                                                    41400002
.R2DTYPE MNOTE 12,'THE DISPLACEMENT IN R MUST BE A SELF-DEFINING TERM.' 41500002
&ERROR   SETB  (1)       SET THE ERROR FLAG ON TO PREVENT THE MVC      *41600002
                         GENERATION.                                    41700002
         AGO   .RFIN                                                    41800002
.R2LTYPE MNOTE 12,'THE LENGTH IN R MUST BE A SELF-DEFINING TERM.'       41900002
&ERROR   SETB  1         SET THE ERROR FLAG ON.                         42000002
         AGO   .RFIN                                                    42100002
.********************************************************************** 42200002
.* THE R PARAMETER CONSISTS OF A LIST OF MIXED PAIRS OF FIELDS AND    * 42300002
.* DISPLACEMENT-LENGTH PAIRS. PICK OUT ALL THESE AND CHECK THEM FOR   * 42400002
.* VALIDITY, WHILE ADDING UP ALL THE LENGTHS OF THE INDIVIDUAL FIELDS * 42500002
.* FOR THE GSPACE MACRO-INSTRUCTION LATER. GENERATE THE MVC'S IF THIS * 42600002
.* IS THE SECOND TIME THROUGH THE LOOP.                               * 42700002
.********************************************************************** 42800002
.********************************************************************** 42900002
.* THIS IS THE SECTION TO PROCESS A MIXED LIST OF FIELD NAMES AND (D  * 43000002
.* ,L) PAIRS. PARSE THE OPERAND USING THE PARSE IN THE RPTDSECT       * 43100002
.* MACRO-INSTRUCTION, AND CHECK THE VARIABLE &IGAOKAY TO SEE IF THERE * 43200002
.* ARE NO SYNTAX ERRORS IN THE R PARAMETER.                           * 43300002
.********************************************************************** 43400002
.RMIXED  ANOP                                                           43500002
      RPTDSECT SCAN=PARSE,LIST=&R  PARSE THE OPERAND.                   43600002
         AIF   (&IGAOKAY).RMXOK  SEE IF THE PARSE DETECTED BAD SYNTAX.  43700002
         MNOTE 12,'INVALID SYNTAX IN THE R PARAMETER.'                  43800002
&ERROR   SETB  (1)       SET THE ERROR FLAG ON.                         43900002
         AGO   .RFIN     CAN'T DO ANYTHING WITH THIS.                   44000002
.********************************************************************** 44100002
.* THE SYNTAX APPEARS TO BE OK, NOW START SCANNING OUT THE ATOMS ONE  * 44200002
.* AT A TIME, ANALYZING EACH ONE INDIVIDUALLY IN CONTEXT WITH THE ONES* 44300002
.* ON EITHER SIDE OF IT.                                              * 44400002
.********************************************************************** 44500002
.RMXOK RPTDSECT SCAN=ISCAN  INITIALIZE FOR SUBSEQUENT SCANNING OF      *44600002
                         ATOMS.                                         44700002
.RMXMOR RPTDSECT SCAN=NEXT  GET THE CURSOR POSITIONED AT THE NEXT ATOM. 44800002
.RMXCHK  AIF   (&IGAX EQ 0).RFIN  SEE IF THERE ARE ANY MORE TO DO.      44900002
         AIF   (&IGALEVL EQ 2).RMXLVL2  SEE IF THIS ATOM IS ON LEVEL 2. 45000002
         AIF   (&IGALEVL LE 1).RMXL01  SEE IF THIS ATOM IS ON LEVEL 0  *45100002
                         OR 1.                                          45200002
.********************************************************************** 45300002
.* THE CURRENT ATOM HAS TOO MANY LEVELS OF PARENTHESES AROUND IT, GIVE* 45400002
.* THE ERROR MESSAGE AND GO LOOK FOR THE NEX THING THAT CHANGES LEVEL * 45500002
.* 1 IN THE PATH VECTOR.                                              * 45600002
.********************************************************************** 45700002
&I       SETA  &IGAPATH(1)+1  SET &I TO THE CURRENT OPERAND NUMBER.     45800002
         MNOTE 12,'TOO MANY () LEVELS IN OPERAND &I OF R.'              45900002
&ERROR   SETB  (1)       SET THE ERROR FLAG ON.                         46000002
.********************************************************************** 46100002
.* AN ERROR HAS BEEN DETECTED AND FLAGGED IN THE CURRENT OPERAND. SCAN* 46200002
.* OVER TO THE NEXT ATOM THAT IS NOT PART OF THE CURRENT ENTRY ON     * 46300002
.* LEVEL 1 IN THE PARAMETER.                                          * 46400002
.********************************************************************** 46500002
.SYNC    ANOP                                                           46600002
&I       SETA  &IGAPATH(1)  SET &I TO THE INDEX OF THE OPERAND ON LEVEL*46700002
                         1.                                             46800002
      RPTDSECT SCAN=NEXT  SET THE CURSOR TO THE NEXT ONE.               46900002
         AIF   (&IGAX EQ 0).RFIN  SEE IF THERE AREN'T ANY MORE.         47000002
         AIF   (&I EQ &IGAPATH(1)).SYNC  SEE IF IT IS STILL ON THE SAME*47100002
                         ONE.                                           47200002
         AGO   .RMXCHK   FINALLY GOT THE NEXT ATOM, NOW GO CHECK IT FOR*47300002
                         VALIDITY.                                      47400002
.********************************************************************** 47500002
.* THE CURRENT ATOM IS ON LEVEL 0 OR 1. THEREFORE IT SHOULD BE A VALID* 47600002
.* FIELD NAME; SEE IF IT IS.                                          * 47700002
.********************************************************************** 47800002
.RMXL01  ANOP                                                           47900002
.RMX01   ANOP                                                           48000002
&I       SETA  (1+&IGAPATH(1))  SET &I TO THE 1-ORIGIN INDEX OF THE    *48100002
                         FIELD NAME ON LEVEL 1.                         48200002
         AIF   ((T'&R(&I) NE 'M')AND(T'&R(&I) NE 'N')AND(T'&R(&I) NE 'O*48300002
               ')AND(T'&R(&I) NE 'T')AND(T'&R(&I) NE 'W')AND(T'&R(&I) N*48400002
               E '$')AND(T'&R(&I) NE 'U')).RMX01OK                      48500002
         MNOTE 12,'OPERAND &I OF R DOES NOT HAVE THE PROPER TYPE ATTRIB*48600002
               UTE.'                                                    48700002
&ERROR   SETB  (1)       SET THE ERROR FLAG.                            48800002
         AGO   .SYNC     GO POSITION THE CURSOR TO THE NEXT ONE.        48900002
.********************************************************************** 49000002
.* THE CURRENT ATOM LOOKS LIKE A VALIID FIELD NAME, GET ITS LENGTH    * 49100002
.* ATTRIBUTE AND SEE IF IT ACCEPTABLE.                                * 49200002
.********************************************************************** 49300002
.RMX01OK ANOP                                                           49400002
&LNG     SETA  (L'&R(&I))  CAPTURE IT AS A NUMBER.                      49500002
         AIF   (&LNG LE 256).RMX0LOK  SEE IF IT EXCEEDS 256.            49600002
         MNOTE 12,'THE LENGTH OF FIELD &I OF R EXCEEDS 256 BYTES.'      49700002
&ERROR   SETB  (1)       SET TEH ERROR FLAG.                            49800002
         AGO   .SYNC     GO LOOK AT THE NEXT ONE.                       49900002
.RMX0LOK ANOP                                                           50000002
.********************************************************************** 50100002
.* NOW SEE IF THIS IS THE MOVE GENERATION ITERATION.                  * 50200002
.********************************************************************** 50300002
         AIF   (NOT &XFER).RX0M  GO IF THIS ISN'T THE MOVE GENERATION  *50400002
                         ITERATION.                                     50500002
         MVC   &IGARECL.(&LNG,1),&R(&I)  MOVE THE FIELD.                50600002
.RX0M    ANOP                                                           50700002
&IGARECL SETA  (&IGARECL+&LNG)  EKE THE CUMMULATIVE RECORD LENGTH.      50800002
         AGO   .RMXMOR   GO LOKK FOR THE NEXT ONE.                      50900002
.********************************************************************** 51000002
.* THE CURRENT ATOM IS ON LEVEL 2. IT MUST THEREFORE BE THE FIRST     * 51100002
.* ELEMENT IN ONE OF THE CASES (F,L) OR (D,L).                        * 51200002
.* FIND OUT WHETHER THE CURRENT ATOM IS AN F OR A D.                  * 51300002
.********************************************************************** 51400002
.RMXLVL2 ANOP                                                           51500002
&X       SETC  '0'       SET THIS FOR THE CASE WHERE THE DISPLACEMENT  *51600002
                         IS AN EMPTY STRING.                            51700002
         AIF   (&IGAZ EQ 0).RMGDSP  GO IF IT IS AN EMPTY STRING, WHICH *51800002
                         MEANS A DISPLACEMENT OF 0.                     51900002
.********************************************************************** 52000002
.* SEE IF ALL THE CHARACTERS IN THE CURRENT ATOM ARE DIGITS 0 THROUGH * 52100002
.* 9, WHICH WOULD MAKE IT A SELF-DEFINING DECIMAL TERM.               * 52200002
.********************************************************************** 52300002
&I       SETA  0         INITIALIZE THE INDEX OF THE CURRENT CHARACTER *52400002
                         IN THE ATOM.                                   52500002
.RMCONT  AIF   (('&R'(&IGALEFT(&IGAZ)+&I,1) LT '0')OR('&R'(&IGALEFT(&IG*52600002
               AZ)+&I,1) GT '9')).RMNOTD                                52700002
&I       SETA  (&I+1)    EKE THE INDEX.                                 52800002
         AIF   (&I LT &IGARGHT(&IGAZ)).RMCONT  KEEP GOING UNTIL ALL    *52900002
                         DIGITS HAVE BEEN EXAMINED.                     53000002
         AIF   (&IGARGHT(&IGAZ) GT 4).RMXBADD  SEE IF THE DISPLACEMENT *53100002
                         HAS TOO MANY BYTES IN IT.                      53200002
&X       SETC  '&R'(&IGALEFT(&IGAZ),&I)  GET THE DISPLACEMENT AS A     *53300002
                         NUMBER.                                        53400002
.RMGDSP  ANOP                                                           53500002
&DSP     SETA  (&X)      GET THE NUMBER NOW.                            53600002
         AIF   (&DSP GT 4095).RMXDBAD  SEE IF THE DISPLACEMENT IS TOO  *53700002
                         BIG.                                           53800002
.********************************************************************** 53900002
.* THE CURRENT ATOM IS A VALID DISPLACEMENT OF A (D,L) PAIR, AND ITS  * 54000002
.* ARITHMETIC VALUE IS IN THE APPROPRIATE RANGE OF VALUES FOR A       * 54100002
.* DISPLACEMENT. ITS VALUE HAS BEEN CAPTURED IN &DSP. NOW LOOK FOR THE* 54200002
.* CORRESPONDING L OF THE PAIR.                                       * 54300002
.********************************************************************** 54400002
&I       SETA  (&IGAPATH(1))  SAVE THE CURRENT ATOM LEVEL 1 INDEX.      54500002
      RPTDSECT SCAN=NEXT  POSITION THE CURSOR TO THE NEXT ATOM.         54600002
         AIF   (&IGAX EQ 0).RMXNOLL  SEE IF THERE ISN'T ANY L FOR IT   *54700002
                         BECAUSE THERE AREN'T ANY MORE ATOMS.           54800002
         AIF   (&IGAPATH(1) NE &I).RMXNOL  SEE IF THE NEXT ATOM IS PART*54900002
                         OF A DIFFERENT ELEMENT ON LEVEL 1.             55000002
         AIF   (&IGALEVL NE 2).RMXPRN  SEE IF THERE ARE TOO MANY LEVELS*55100002
                         OF PARENTHESES.                                55200002
         AIF   (&IGAZ EQ 0).RMXLBAD  SEE IF THE L ATOM IS THE EMPTY    *55300002
                         STRING.                                        55400002
.********************************************************************** 55500002
.* THERE IS A NEXT ATOM IN THE SAME PAIR, NOW CHECK IT TO SEE IF IT IS* 55600002
.* A SELF-DEFINING DECIMAL TERM.                                      * 55700002
.********************************************************************** 55800002
&I       SETA  0  INITIALIZE THE INDEX OF THE CURRENT BYTE IN THE ATOM. 55900002
.RMCNT1  AIF   (('&R'(&IGALEFT(&IGAZ)+&I,1) LT '0')OR('&R'(&IGALEFT(&IG*56000002
               AZ)+&I,1) GT '9')).RMXBADL                               56100002
&I       SETA  (&I+1)    EKE THE INDEX TO THE NEXT BYTE.                56200002
         AIF   (&I LT &IGARGHT(&IGAZ)).RMCNT1  KEEP LOOKING UNTIL ALL  *56300002
                         THE BYTES ARE EXAMINED.                        56400002
         AIF   (&IGARGHT(&IGAZ) GT 4).RMXLERR  SEE IF THE LENGTH IS    *56500002
                         MORE THAN 4 CHARACTERS.                        56600002
&X       SETC  '&R'(&IGALEFT(&IGAZ),&IGARGHT(&IGAZ))  GET THE LENGTH.   56700002
&LNG     SETA  (&X)      TURN IT INTO A NUMBER.                         56800002
         AIF   (&LNG GT 256).RMXLERR  SEE IF IT IS TOO BIG TO DO WITH  *56900002
                         AN MVC.                                        57000002
.********************************************************************** 57100002
.* THE DISPLACEMENT OF THE DISPLACEMENT-LENGTH PAIR IS AT &DSP, AND   * 57200002
.* THE LENGTH IS AT &LNG. CHECK THE A PARAMETER TO SEE IF IT IS CODED,* 57300002
.* BECAUSE IF IT ISN'T CODED THERE IS NO WAY TO FIND OUT WHERE THE    * 57400002
.* RECORD REALLY IS.                                                  * 57500002
.********************************************************************** 57600002
         AIF   (K'&A EQ 0).RMXAMT  SEE IF IT ISN'T THERE.               57700002
.* NOW GENERATE THE MOVE OF THE FIELD IF THIS IS THE MOVE GENERATION  * 57800002
.* ITERATION.                                                         * 57900002
         AIF   (NOT &XFER).RMOVED  SEE IF IT ISN'T THE MOVE GENERATION *58000002
                         ITERATION.                                     58100002
&X       SETC  ''        SET IT UP FOR THE ADDRESS IN A REGISTER.       58200002
         AIF   ('&A'(1,1) EQ '(').RMAGPR  GO IF THE ADDRESS IS IN A    *58300002
                         REGISTER.                                      58400002
&X       SETC  '+'       SET IT UP FOR THE CASE EHERE THE ADDRESS IS   *58500002
                         SUPPLIED IN THE FORM OF A LABEL.               58600002
.RMAGPR  MVC   &IGARECL.(&LNG,1),&DSP&X&A  MOVE SUBFIELD.               58700002
.RMOVED  ANOP                                                           58800002
&IGARECL SETA  (&IGARECL+&LNG)  EKE THE CUMMULATIVE RECORD LENGTH.      58900002
.********************************************************************** 59000002
.* NOW SET THE CURSOR TO THE NEXT ATOM, AND SEE IF THE FIRST ELEMENT  * 59100002
.* IS PART OF THE SAME ELEMENT ON LEVEL 1 AS THE LAST (D,L) PAIR.     * 59200002
.********************************************************************** 59300002
&I       SETA  &IGAPATH(1)  PRESERVE THE CURRENT LEVEL 0 INDEX.         59400002
      RPTDSECT SCAN=NEXT  POSITION THE CURSOR TO THE NEXT ATOM.         59500002
         AIF   (&IGAX EQ 0).RFIN  GO IF THERE ISN'T ANY NEXT ATOM.      59600002
         AIF   (&I EQ &IGAPATH(1)).RMXSAME  SEE IF THE LEVEL 1 ELEMENT *59700002
                         IN THE PATH VECTOR DIDN'T CHANGE.              59800002
         AGO   .RMXCHK   GO CHECK THE NEXT ATOM, IT ISN'T PART OF THE  *59900002
                         LAST TWO.                                      60000002
.********************************************************************** 60100002
.* THE FOLLOWING ARE SUNDRY MNOTES FROM THE PROCESSING OF A LIST OF   * 60200002
.* MIXED PAIRS WHERE THE PAIRS ARE OF THE FORM (D,L).                 * 60300002
.********************************************************************** 60400002
.RMXSAME ANOP                                                           60500002
&I       SETA  (&IGAPATH(1)+1)  SET &I TO THE CURRENT OPERAND #.        60600002
         MNOTE 12,'TOO MANY ELEMENTS IN SUBLIST OPERAND &I IN R.'       60700002
&ERROR   SETB  (1)       SET THE ERROR FLAG ON.                         60800002
         AGO   .SYNC     GO LOOK FOR THE NEXT ONE.                      60900002
.RMXAMT  ANOP                                                           61000002
&I       SETA  (1+&IGAPATH(1))  GET THE CURRENT OPERAND NUMBER.         61100002
         MNOTE 12,'THE A PARAMETER MUST BE CODED TO USE A (D,L) PAIR FO*61200002
               R R(&I).'                                                61300002
&ERROR   SETB  (1)       SET THE ERROR FLAG ON.                         61400002
         AGO   .SYNC     GO LOOK FOR THE NEXT ONE.                      61500002
.RMXLERR ANOP                                                           61600002
&I       SETA  (&IGAPATH(1)+1)  GET THE CURRENT OPERAND NUMBER.         61700002
         MNOTE 12,'THE LENGTH OF THE FIELD DEFINED BY R(&I) EXCEEDS 256*61800002
                BYTES.'                                                 61900002
&ERROR   SETB  (1)       SET THE ERROR FLAG ON.                         62000002
         AGO   .SYNC     GO LOOK AT THE NEXT ONE.                       62100002
.RMXBADL ANOP                                                           62200002
&I       SETA  (1+&IGAPATH(1))                                          62300002
         MNOTE 12,'THE LENGTH FOR R(&I) MUST BE A SELF-DEFINING DECIMAL*62400002
                NUMBER.'                                                62500002
&ERROR   SETB  (1)                                                      62600002
         AGO   .SYNC                                                    62700002
.RMXLBAD ANOP                                                           62800002
&I       SETA  (1+&IGAPATH(1))                                          62900002
         MNOTE 12,'THE LENGTH FOR R(&I) CANNOT BE THE EMPTY STRING.'    63000002
&ERROR   SETB  (1)                                                      63100002
         AGO   .SYNC                                                    63200002
.RMXNOL  ANOP                                                           63300002
&I       SETA  (1+&IGAPATH(1))                                          63400002
         MNOTE 12,'LENGTH OF (D,L) PAIR MISSING IN R(&I).'              63500002
&ERROR   SETB  (1)                                                      63600002
         AGO   .RMXCHK   GO CHECK THE CURRENT ATOM FOR VALIDITY.        63700002
.RMXNOLL ANOP                                                           63800002
         MNOTE 12,'LENGTH OF LAST (D,L) PAIR IN R IS MISSING.'          63900002
&ERROR   SETB  (1)       SET THE ERROR FLAG ON.                         64000002
         AGO   .RFIN                                                    64100002
.RMXPRN  ANOP                                                           64200002
&I       SETA  (&IGAPATH(1)+1)                                          64300002
         MNOTE 12,'TOO MANY () LEVELS IN R(&I).'                        64400002
&ERROR   SETB  (1)       SET THE ERROR FLAG ON.                         64500002
         AGO   .SYNC                                                    64600002
.RMXBADD ANOP                                                           64700002
&I       SETA  (1+&IGAPATH(1))                                          64800002
         MNOTE 12,'DISPLACEMENT IN R(&I) EXCEEDS 4 DIGITS.'             64900002
&ERROR   SETB  (1)                                                      65000002
         AGO   .SYNC                                                    65100002
.RMXDBAD ANOP                                                           65200002
&I       SETA  (1+&IGAPATH(1))                                          65300002
         MNOTE 12,'DISPLACEMENT IN R(&I) EXCEEDS 4095.'                 65400002
&ERROR   SETB  (1)                                                      65500002
         AGO   .SYNC                                                    65600002
.********************************************************************** 65700002
.* THE CURRENT ATOM IS AN F OF A (F,L) PAIR.                          * 65800002
.********************************************************************** 65900002
.RMNOTD  AIF   (&IGARGHT(&IGAZ) LE 8).RMXBIGF  SEE IF THE STRING IS    *66000002
                         BIGGER THAN 8 CHARACTERS.                      66100002
&I       SETA  (1+&IGAPATH(1))                                          66200002
         MNOTE 12,'FIELD NAME IN R(&I) IS BIGGER THAN 8 CHARACTERS.'    66300002
&ERROR   SETB  (1)                                                      66400002
         AGO   .SYNC                                                    66500002
.RMXBIGF ANOP                                                           66600002
&FIELD   SETC  '&R'(&IGALEFT(&IGAZ),&IGARGHT(&IGAZ))  GET THE FIELD    *66700002
                         NAME.                                          66800002
.* NOW TRY TO GET THE L OF THE (F,L) PAIR.                            * 66900002
&I       SETA  (&IGAPATH(1))  PRESERVE THE CURRENT LEVEL 1 INDEX.       67000002
      RPTDSECT SCAN=NEXT  POSITION THE CURSOR TO THE NEXT ATOM.         67100002
         AIF   (&IGAX EQ 0).RFLNOL  SEE IF THERE IS NO LENGTH BECAUSE  *67200002
                         THERE ISN'T ANY NEXT ATOM.                     67300002
         AIF   (&IGAPATH(1) NE &I).RFNOL  SEE IF THE NEXT ATOM IS NOT  *67400002
                         PART OF THE SAME PAIR.                         67500002
         AIF   (&IGALEVL NE 2).RFNOLL  SEE IF THE NEXT ATOM HAS TOO    *67600002
                         MANY () LEVELS.                                67700002
         AIF   (&IGAZ EQ 0).RFLMT  SEE IF THE LENGTH ATOM IS THE EMPTY *67800002
                         STRING.                                        67900002
.********************************************************************** 68000002
.* THE CURRENT ATOM IS INDEED THE SECOND ELEMENT OF A (F,X) PAIR. NOW * 68100002
.* LET'S SEE IF X IS A VALID L.                                       * 68200002
.********************************************************************** 68300002
         AIF   (&IGARGHT(&IGAZ) GT 3).RFLLBAD  SEE IF THE LENGTH ATOM  *68400002
                         IS MORE THAN 3 DIGITS.                         68500002
&I       SETA  0         INITIALIZE THE INDEX OF THE CURRENT BYTE.      68600002
.RMXCNT2 AIF   (('&R'(&IGALEFT(&IGAZ)+&I,1) LT '0')OR('&R'(&IGALEFT(&IG*68700002
               AZ)+&I,1) GT '9')).RFLBAD                                68800002
&I       SETA  (&I+1)    STEP OVER TO THE NEXT DIGIT.                   68900002
         AIF   (&I LT &IGARGHT(&IGAZ)).RMXCNT2  KEEP GOING UNTIL ALL   *69000002
                         THE DIGITS HAVE BEEN SCANNED.                  69100002
&X       SETC  '&R'(&IGALEFT(&IGAZ),&IGARGHT(&IGAZ))  EXTRACT THE      *69200002
                         LENGTH.                                        69300002
&LNG     SETA  (&X)      CONVERT IT TO A NUMBER.                        69400002
         AIF   (&LNG GT 256).RFBADL  SEE IF THE LENGTH EXCEEDS 256     *69500002
                         BYTES.                                         69600002
.********************************************************************** 69700002
.* IT LOOKS LIKE A VALID (F,L) PAIR; GENERATE THE MOVE IF THIS IS THE * 69800002
.* MOVE GENERATION ITERATION.                                         * 69900002
.********************************************************************** 70000002
         AIF   (NOT &XFER).RMOVED  GO IF IT IS NOT THE MOVE ITERATION.  70100002
         MVC   &IGARECL.(&LNG,1),&FIELD  MOVE SUBFIELD.                 70200002
         AGO   .RMOVED   MERGE WITH THE COMMON PATH.                    70300002
.********************************************************************** 70400002
.* THE FOLLOWING ARE SUNDRY MNOTES FOR THE (F,L) CASE IN A MIXED LIST.* 70500002
.********************************************************************** 70600002
.RFBADL  ANOP                                                           70700002
&I       SETA  (&IGAPATH(1)+1)                                          70800002
         MNOTE 12,'LENGTH IN OPERAND &I OF R EXCEEDS 256 BYTES.'        70900002
&ERROR   SETB  (1)                                                      71000002
         AGO   .SYNC                                                    71100002
.RFLBAD  ANOP                                                           71200002
&I       SETA  (1+&IGAPATH(1))                                          71300002
         MNOTE 12,'THE LENGTH IN OPERAND R(&I) IS NOT A SELF-DEFINING D*71400002
               ECIMAL NUMBER.'                                          71500002
&ERROR   SETB  (1)                                                      71600002
         AGO   .SYNC                                                    71700002
.RFLLBAD ANOP                                                           71800002
&I       SETA  (1+&IGAPATH(1))                                          71900002
         MNOTE 12,'LENGTH IN OPERAND R(&I) IS MORE THAN 3 DIGITS.'      72000002
&ERROR   SETB  (1)                                                      72100002
         AGO   .SYNC                                                    72200002
.RFLMT   ANOP                                                           72300002
&I       SETA  (1+&IGAPATH(1))                                          72400002
         MNOTE 12,'LENGTH IN OPERAND &I OF R CANNOT BE THE EMPTY STRING*72500002
               .'                                                       72600002
&ERROR   SETB  (1)                                                      72700002
         AGO   .SYNC                                                    72800002
.RFNOL   ANOP                                                           72900002
         MNOTE 12,'LENGTH OF (F,L) PAIR IN OPERAND &I OF R IS MISSING.' 73000002
&ERROR   SETB  (1)                                                      73100002
         AGO   .RMXCHK                                                  73200002
.RFNOLL  ANOP                                                           73300002
&I       SETA  (1+&IGAPATH(1))                                          73400002
         MNOTE 12,'TOO MANY () LEVELS IN R(&I).'                        73500002
         AGO   .SYNC                                                    73600002
.RFLNOL  MNOTE 12,'LENGTH OF LAST (FIELD,LENGTH) PAIR IN R IS MISSING.' 73700002
&ERROR   SETB  (1)       SET THE ERROR FLAG ON TO PREVENT THE MOVES.    73800002
         AGO   .RFIN                                                    73900002
.********************************************************************** 74000002
.RFIN    ANOP                                                           74100002
         AIF   ((&XFER)OR(&ERROR)).MV#FIN  SEE IF THE MOVE GENERATION  *74200002
                         LOOP MUST BE DONE THIS TIME.                   74300002
&XFER    SETB  (1)       SET IT ON SO THE MOVES ONLY GET GENERATED ONCE 74400002
&RC      SETC  'C'                                                      74500002
         AIF   (K'&C EQ 0).GSPACE  SEE IF THE CONDITIONAL PARAMETER HAS*74600002
                         BEEN LEFT OUT.                                 74700002
         AIF  ((('&C' EQ 'C')OR('&C'(1,1) EQ 'Y')OR('&C'(1,1) EQ '1')))*74800002
               .GSPACE   SEE IF IT IS A CONDITIONAL REQUEST.            74900002
&RC      SETC  ''        IT IS AN UNCONDITIONAL REQUEST.                75000002
.GSPACE  ANOP                                                           75100002
        GSPACE R&RC,LV=&IGARECL,S=&S,SP=&SP  GET SPACE TO PUT RECORD.   75200002
         AIF   ('&RC' NE 'C').SKIPBNZ  SEE IF THE REQUEST IS COND.      75300002
         BNZ   SETR&SYSNDX BR IF ALLOCATION FAILED.                     75400002
.SKIPBNZ AGO   .LOOPAIR  GO GENERATE THE MOVE OF THE RECORD.            75500002
.MV#FIN  ANOP                                                           75600002
         LR    15,1      PUT THE RECORD ADDRESS IN R15.                 75700002
         AIF   (NOT &R1SAVED).R1ISOK  SEE IF R1 WAS SAVED THROUGH THE  *75800002
                         GSPACE OPERATION.                              75900002
         L     1,((4*1)+20-64*((2+1)/16))(,13)  RESTORE R1.             76000002
.R1ISOK  AGO   .CHK#     NOW GO CHECK THE # PARAMETER.                  76100002
.********************************************************************** 76200002
.* THERE IS NO NEED TO ALLOCATE A SPACE FOR THE RECORD VIA THE GSPACE * 76300002
.* MACRO-INSTRUCTION. GET THE ADDRESS OF THE RECORD IN REGISTER 15.   * 76400002
.********************************************************************** 76500002
.CHKA    AIF   (K'&A EQ 0).ASARG  SEE IF THE ADDRESS IS OMITTED; IF IT *76600002
                         IS GET IT OUT OF THE SEARCH ARGUMENT.          76700002
         AIF   ('&A'(1,1) EQ '(').AGPR  SEE IF THE ADDRESS IS IN A GPR. 76800002
         LA    15,&A     ADDRESS OF THE RECORD TO INSERT.               76900002
         AGO   .CHKAEND  GO TO THE END OF CHECKING THE A PARAMETER.     77000002
.AGPR    AIF   ('&A' EQ '(15)').CHKAEND  SEE IF IT IS ALREADY IN R15.   77100002
         LR    15,&A(1)  INSERT ADDRESS.                                77200002
         AGO   .CHKAEND  ALL DONE NOW EXIT FROM CHECKING THE A         *77300002
                         PARAMETER.                                     77400002
.ASARG   ANOP                                                           77500002
         MNOTE 12,'EITHER A OR R MUST BE CODED TO SPECIFY THE INS.ARG.' 77600002
.CHKAEND ANOP                                                           77700002
.********************************************************************** 77800002
.* CHECK THE # PARAMETER TO SEE IF A DIFFERENT ADDRESS THAN THE ONE   * 77900002
.* FURNISHED BY THE A PARAMETER IS TO BEBUSED BY THE INSERT ROUTINE.  * 78000002
.********************************************************************** 78100002
.CHK#    AIF   (K'&# EQ 0).#ZORRO  SEE IF THE # PARAMETER IS CODED.     78200002
         AIF   ('&#'(1,1) EQ '(').#GPR  SEE IF THE # PARAMETER IS IN A *78300002
                         GPR.                                           78400002
         L     0,&#      LOAD IN THE ERSATZ ADDRESS.                    78500002
         AGO   .#FIN     ALL DONE WITH THE ERSATZ ADDRESS.              78600002
.#GPR    DC    ((30-&#(1))/16)AL1(X'18',&#(1))  LOAD THE ERSATZ ADDRESS*78700002
                         IN GPR 0 UNLESS IT IS ALREADY IN GPR 0.        78800002
         AGO   .#FIN     ALL DONE WITH THE ERSATZ ADDRESS.              78900002
.#ZORRO  LR    0,15  # NOT CODED.                                       79000002
.#FIN    ANOP                                                           79100002
.********************************************************************** 79200002
.* SEE IF THE REQUEST IS CONDITIONAL OR UNCONDITIONAL, AND CALL THE   * 79300002
.* APPROPRIATE ROUTINE IN THE MODULE IGARPT01.                        * 79400002
.********************************************************************** 79500002
         AIF   (K'&TREE EQ 0).INGPR1  SEE IF THE TREE ADDRESS IS       *79600002
                         SPECIFIED.                                     79700002
         AIF   ('&TREE'(1,1) EQ '(').RPTGPR  SEE IF THE TREE ADDRESS IS*79800002
                         IN A GPR.                                      79900002
         L     1,&TREE   LOAD THE ADDRESS OF THE RPT.                   80000002
         AGO   .R1LOAD   SKIP AROUND THE GPR CASE.                      80100002
.RPTGPR  LR    1,&TREE(1)  GET THE RPT ADDRESS.                         80200002
.R1LOAD  ANOP                                                           80300002
.INGPR1  ANOP                                                           80400002
         L     14,(&IGABLST+&IGAINS)(,1)  ADDRESS OF INSERT ROUTINE.    80500002
.********************************************************************** 80600002
.* NOW GENERATE THE LINKAGE TO THE INSERT ROUTINE IN THE MODULE       * 80700002
.* IGARPT01.                                                          * 80800002
.********************************************************************** 80900002
&REQUEST SETB  (1)       SET THE REQUEST MODE TO CONDITIONAL.           81000002
         AIF   (K'&C EQ 0).LINKC  SEE IF IT IS A CONDITIONAL REQUEST.   81100002
         AIF (('&C'(1,1) EQ 'Y')OR('&C' EQ '1')OR('&C' EQ 'C')).LINKC  *81200002
                         SEE IF IT IS A CONDITIONAL REQUEST.            81300002
&REQUEST SETB  (0)       SET THE REQUEST MODE TO UNCONDITIONAL.         81400002
         BALR  14,14     INDICATE UNCONDITIONAL TYPE 8 INSERT.          81500002
         AGO   .LINKFIN  ALL DONE WITH THE LINKAGE.                     81600002
.LINKC   BAL   14,0(,14)  INDICATE CONDITIONAL INSERT.                  81700002
.LINKFIN ANOP                                                           81800002
         AIF   (K'&R EQ 0).FIN  SEE IF THE AREA WAS ALLOCATED VIA THE  *81900002
                         GSPACE MACRO-INSTRUCTION.                      82000002
         AIF   (NOT &REQUEST).FIN  SEE IF IT WAS AN UNCONDITIONAL      *82100002
                         REQUEST.                                       82200002
&FINEQU  SETB  (1)       SET THE BIT ON TO GENERATE THE EQUATE AT THE  *82300002
                         END OF THE MACRO EXECUTION.                    82400002
         BC    10,FIN&SYSNDX  BRANCH IF THE INSERT WAS SUCCESSFUL.      82500002
         L     1,X'10'(,13)  PUT THE ADDRESS IN R1 TO FREE IT UP.       82600002
        FSPACE LV=&IGARECL,A=(1),SP=&SP,S=&S                            82700002
SETR&SYSNDX LA 15,1      SET THE RETURN CODE NEGATIVE.                  82800002
         LNR   15,15     SET THE CONDITION CODE ALSO.                   82900002
.FIN     AIF   (NOT &FINEQU).END  SEE IF THE EQUATE MUST BE GENERATED.  83000002
FIN&SYSNDX EQU *         LABEL FOR THE BRANCH TO BRANCH TO.             83100002
.END     ANOP                                                           83200002
         MEND                                                           83300002
