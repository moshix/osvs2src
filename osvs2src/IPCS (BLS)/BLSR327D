         TITLE 'BLSR3270--BLSR327D--PRE-PROCESS CURSOR'                 00050000
*---------------------------------------------------------------------* 00100000
*                                                                     * 00150000
*BLSR327D--PRE-PROCESS CURSOR                                         * 00200000
*                                                                     * 00250000
*---------------------------------------------------------------------* 00300000
         SPACE                                                          00350000
BLSR327D BAL   RE,EA001400        DECOMPOSE CURSOR ADDR INTO ROW/COLM   00400000
         ALR   R5,R5              DOUBLE ROW ADDRESS TO GET YCON INDEX  00450000
         STM   R4,R5,WKACRPOS     SAVE INDICES FOR POST-PROCESS         00500000
         CH    R5,=H'10'          A ROLL/POINT OPERATION (IN DUMP       00550000
         BNL   LD000300           DATA DISPLAY AREA)                    00600000
         LH    RF,YD000200(R5)                                          00650000
         B     BLSR327B(RF)       GO TO APPROPRIATE ROUTINE             00700000
YD000200 DC    Y(LD000800-BLSR327B) CURSOR ON ROW1                      00750000
         DC    Y(LD000900-BLSR327B) CURSOR ON ROW2                      00800000
         DC    Y(LA001000-BLSR327B) CURSOR ON ROW3                      00850000
         DC    Y(LA001000-BLSR327B) CURSOR ON ROW4                      00900000
         DC    Y(LA001000-BLSR327B) CURSOR ON ROW5                      00950000
LD000300 SRL   R5,1               BACK TO A BYTE ROW INDEX              01000000
         LA    R6,15              WANT LOW ORDER 4 BITS                 01050000
         N     R6,WKALNCTL-8(R5)   OF THIS LINE CONTROL BYTE            01100000
         LTR   RE,R6              A NULL AREA?                          01150000
         LA    RF,LA001000        WHERE TO GO NEXT IF POINTING FAILS    01200000
         BZR   RF                 YES                                   01250000
         SLL   RE,2               DEVELOP WORD INDEX                    01300000
         LA    R2,WKAVCTA-4(RE)   ADDRESS CONTROL ARRAY, CORRECT        01350000
*                                 TO ZERO ORIGIN ADDRESSING             01400000
         TM    WKAVFLAG-WKAVCTA(R2),WKAVCTAI IS THIS AREA ACTIVE?       01450000
         BOR   RF                 NO                                    01500000
         LR    R0,R5              SAVE PREVIOUS LINE NUMBER             01550000
         SH    R0,=H'5'           GO FROM '5' ORIGIN TO 0-ORIGIN IN     01600000
*                                 DUMP DATA DISPLAY AREA                01650000
         SH    R4,=H'8'           WAS 0:79,-->-8:71; TEST FOR ROLL      01700000
         BM    LD000400           CURSOR UNDER #ADDRES## FIELD          01750000
         SPACE                                                          01800000
         SRDA  R4,32              PREPARE FOR DIVIDE - MAKE SIGN POS    01850000
         D     R4,=F'9'           DIVIDES COLUMN NUMBER                 01900000
         LTR   R4,R4              IF REMAINDER ZERO, CURSOR WAS UNDER   01950000
*                                 A SEPARATOR BYTE -- TO BE IGNORED     02000000
         BZR   RF                 JUST CHECK HIS INPUT                  02050000
         CLI   WKAVFMT-WKAVCTA(R2),C'C' IS THIS A CHARACTER DISPLAY     02100000
         BER   RF                 YES                                   02150000
         SPACE 2                                                        02200000
*---------------------------------------------------------------------* 02250000
*        CURSOR IS BENEATH A HEX DUMP WORD--INDIRECT ADDRESS REQUEST  * 02300000
*---------------------------------------------------------------------* 02350000
         SPACE                                                          02400000
*              R0 NOW HAS NUMBER FROM 0 - 18  (WAS 5-23 BEFORE)         02450000
         S     R0,WKALNCTV-4(RE) GET ROW DISPLACEMENT IN THIS AREA      02500000
         SLL   R0,5               BYTE DISPLACEMENT TO START OF ROW     02550000
         SLL   R5,2               BYTES TO INDENT                       02600000
         ALR   R0,R5              DISPLACEMENT PAST STARTING ADDR       02650000
         L     R4,0(0,R2)         PICK UP CURRENT START THIS AREA       02700000
         N     R4,=X'FFFFFFE0'    JUST IN CASE WE INDENTED              02750000
         ALR   R0,R4              DUMP ADDR TO FETCH FROM               02800000
         CL    R0,0(0,R2)         WAS CURSOR PLACED BEFORE START OF     02850000
         BLR   RF                 INDENTED FIRST LINE'S DATA? - YES     02900000
         SPACE 2                                                        02950000
*---------------------------------------------------------------------* 03000000
*        LOAD DATA FROM DUMP                                          * 03050000
*---------------------------------------------------------------------* 03100000
         SPACE                                                          03150000
         L     R1,ZZ2P            ->ZZ2                                 03200000
         MVC   ZZ2AMDA(2,R1),WKAVASI-WKAVCTA(R2) SET UP ASID            03250000
         L     RF,ZZ2AMDS(0,R1)   ->BLSRACCL                            03300000
         BALR  RE,RF              CALL BLSRACCL                         03350000
         LTR   RF,RF              OK?                                   03400000
         BNZ   LA001000           NO                                    03450000
         LR    RF,R0              PUT 'REAL' ADDRESS IN REG WE CAN USE  03500000
         L     RF,0(0,RF)         ACCESS DATA FROM DUMP                 03550000
         LA    RF,0(0,RF)         CLEAR HIGH ORDER BYTE                 03600000
         ST    RF,ESAULAD         TEMP SAVE FOR NEW ADDRESS TO USE      03650000
         OI    FLAG1,FLAG1BLA+FLAG1ADR CAN'T ACCEPT MANUAL ADDR INPT    03700000
         B     LA001000                                                 03750000
         SPACE 2                                                        03800000
*---------------------------------------------------------------------* 03850000
*        PERFORM A ROLL OPERATION WITHIN THIS AREA                    * 03900000
*---------------------------------------------------------------------* 03950000
         SPACE                                                          04000000
LD000400 LA    R6,C'A'-1(0,R6)    FORM CORRECT AREA-ID OF ROLL          04050000
         CLM   R6,B'0001',WKAAREA NEW AREA ID?                          04100000
         BE    LD000500           NO                                    04150000
         STCM  R6,B'0001',WKAAREA SET NEW AREA ID                       04200000
         OI    FLAG1,FLAG1ARE     DISPLAY NEW AREA ID                   04250000
LD000500 S     R0,WKALNCTV-4(RE)  GET ROW OFFSET WITHIN AREA            04300000
         SLL   R0,5               GET BYTE OFFSET FROM START OF AREA    04350000
         CLI   WKAVFMT-WKAVCTA(R2),C'C' IN CHARACTER DISPLAY?           04400000
         BE    LD000700           YES                                   04450000
         AL    R0,0(0,R2)         ADD CURRENT START ADDRESS             04500000
         N     R0,=X'00FFFFE0'    ROUND DOWN TO 32-BYTE BDY             04550000
LD000600 ST    R0,ESAULAD         SAVE RESULT                           04600000
         OI    FLAG1,FLAG1BLA+FLAG1ADR+FLAG1RLL                         04650000
         B     LA001000           GO SEE WHAT ELSE HE DID               04700000
LD000700 ALR   R0,R0              DOUBLE BYTE OFFSET FOR CHAR ROLL      04750000
         AL    R0,0(0,R2)         ADD CURRENT START ADDRESS             04800000
         N     R0,=X'00FFFFC0'    ROUND DOWN TO 64-BYTE BDY             04850000
         B     LD000600                                                 04900000
         SPACE 2                                                        04950000
*              R5 HAS A ZERO IN IT                                      05000000
*              R4 HAS THE COLUM NUMBER, 0-79 DECIMAL                    05050000
*                                 MUST CONVERT TO A COMMAND BRANCH      05100000
*                                 TABLE INDEX                           05150000
LD000800 IC    R4,AD001000(R4)    TRANSLATE TO INDEX (0-24 MAX)         05200000
         ST    R4,WKACRPOS        OVERLAY SAVED COLUMN                  05250000
         LH    RF,YD001100(R4)    INDEX TO ROUTINE                      05300000
         B     BLSR327B(RF)       GO TO APPROPRIATE ROUTINE             05350000
LD000900 LA    RF,LA001000        WHERE TO GO WHEN DONE                 05400000
         SH    R4,=H'3'           CAN'T USE ATTR, 'SK' FIELDS           05450000
         BMR   RF                                                       05500000
         SRDA  R4,32              PUT COLUMN IN RIGHT REG FOR DIVIDE    05550000
         D     R4,=F'7'           (0-76 ---->0-10)                      05600000
         LTR   R4,R4              CURSOR UNDER ATTRIBUTE BYTE?          05650000
         BZR   RF                 YES. AMBIGUOUS                        05700000
         IC    R4,WKASKNUM        MAKE SURE HE WAS UNDER AN ACTIVE      05750000
         BCTR  R4,0               STACK POSITION - GO TO 0-ORIGIN       05800000
         CLR   R4,R5              AND CHECK MAX POSITION VS PTR POS     05850000
         BLR   RF                 MAX LESS THAN WHERE HE WAS, IGNORE    05900000
         ALR   R5,R5              DOUBLE POSITION TO FORM ASID INDEX    05950000
         LH    R0,WKASKASI(R5)    PICK UP ASID FOR THIS STACK ENTRY     06000000
         ST    R0,ESAUAS2         INTO UPDATE AREA                      06050000
         OI    FLAG1,FLAG1ASI     MAKE SURE HE SEES THE CHANGE          06100000
         ALR   R5,R5              FORM INDEX TO 4-BYTE TABLE            06150000
         L     R0,WKASTACK(R5)    PICK UP CORRECT STACK ENTRY           06200000
         B     LD000600           AND PUT IT INTO INPUT AREA            06250000
         SPACE 2                                                        06300000
AD001000 DC    1AL1(0)            ATTRIBUTE-IGNORE                      06350000
         DC    4AL1(2)            3END                                  06400000
         DC    2AL1(0)            ATTRIBUTE OR BLANK - IGNORE           06450000
         DC    6AL1(4)            7<-SCR                                06500000
         DC    6AL1(6)            OLL+>8                                06550000
         DC    2AL1(0)            ATTRIBUTE OR BLANK - IGNORE           06600000
         DC    6AL1(8)            9STACK                                06650000
         DC    2AL1(0)            ATTRIBUTE OR BLANK - IGNORE           06700000
         DC    6AL1(10)           10<-SK                                06750000
         DC    6AL1(12)           IP+>11                                06800000
         DC    39AL1(0)           MESSAGE-IGNORE                        06850000
         SPACE 3                                                        06900000
YD001100 DC    Y(LA001000-BLSR327B) ATTRIBUTE BLANK OR MESSAGE          06950000
         DC    Y(LD001500-BLSR327B) END                                 07000000
         DC    Y(LD001800-BLSR327B) -SCROLL                             07050000
         DC    Y(LD001800-BLSR327B) +SCROLL                             07100000
         DC    Y(LD001700-BLSR327B) STACK                               07150000
         DC    Y(LD001800-BLSR327B) -SKIP                               07200000
         DC    Y(LD001800-BLSR327B) +SKIP                               07250000
         SPACE 2                                                        07300000
*---------------------------------------------------------------------* 07350000
*                                                                     * 07400000
* PRE-PROCESS PF3 = END                                               * 07450000
*                                                                     * 07500000
*---------------------------------------------------------------------* 07550000
LD001500 MVC   WKACORDS+1(2),PREVCURS RESTORE OLD CURSOR POSITION       07600000
         B     LA005600           LEAVE WITHOUT REALLY CLEANING UP      07650000
         SPACE 2                                                        07700000
*---------------------------------------------------------------------* 07750000
*                                                                     * 07800000
* PRE-PROCESS PF9 = STACK                                             * 07850000
*                                                                     * 07900000
*---------------------------------------------------------------------* 07950000
LD001700 MVC   WKACORDS+1(2),PREVCURS RESTORE OLD CURSOR POSITION       08000000
LD001800 OI    FLAG1,FLAG1BLA     SO THAT CURRENT CAN BE MOVED TO       08050000
         B     LA001000           THE STACK AFTER POSSIBLE PURGE        08100000
*                                 AND/OR ASID CHANGE.                   08150000
