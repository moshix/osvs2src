         TITLE 'IEFDB4D0 - DAIR                                        *00001000
                        '                                               00002000
IEFDB4D0 CSECT ,                                                01S0001 00003000
@MAINENT DS    0H                                               01S0001 00004000
         USING *,@15                                            01S0001 00005000
         B     @PROLOG                                          01S0001 00006000
         DC    AL1(16)                                          01S0001 00007000
         DC    C'IEFDB4D0  76.202'                              01S0001 00008000
         DROP  @15                                                      00009000
@PROLOG  STM   @14,@12,12(@13)                                  01S0001 00010000
         BALR  @09,0                                            01S0001 00011000
@PSTART  LA    @10,4095(,@09)                                   01S0001 00012000
         LA    @12,4095(,@10)                                   01S0001 00013000
         USING @PSTART,@09                                      01S0001 00014000
         USING @PSTART+4095,@10                                 01S0001 00015000
         USING @PSTART+8190,@12                                 01S0001 00016000
         L     @00,@SIZDATD                                     01S0001 00017000
         GETMAIN  R,LV=(0)                                              00018000
         LR    @11,@01                                          01S0001 00019000
         USING @DATD,@11                                        01S0001 00020000
         ST    @13,@SA00001+4                                   01S0001 00021000
         LM    @00,@01,20(@13)                                  01S0001 00022000
         ST    @11,8(,@13)                                      01S0001 00023000
         LR    @13,@11                                          01S0001 00024000
*DAPLPTR = R1;                         /* INCOMING R1 PTS TO DAPL    */ 00025000
         LR    DAPLPTR,R1                                       01S0083 00026000
*RESPECIFY R1 UNRESTRICTED;            /* RELEASE REG 1 USAGE        */ 00027000
*RETCODE = 0;                          /* INITIALIZE R15 RETURN CODE */ 00028000
*                                                               01S0085 00029000
         SLR   RETCODE,RETCODE                                  01S0085 00030000
*S99RBPTR = ADDR(S99RB);               /* BEGIN BUILDING THE SVC 99     00031000
*                                         PARM LIST                  */ 00032000
         LA    @08,S99RB                                        01S0086 00033000
         ST    @08,S99RBPTR                                     01S0086 00034000
*S99RBPND = '1'B;                                               01S0087 00035000
         OI    S99RBPND,B'10000000'                             01S0087 00036000
*S99RB = S99RB && S99RB;                                        01S0088 00037000
         XC    S99RB(20),S99RB                                  01S0088 00038000
*S99RBLN = LENGTH(S99RB);                                       01S0089 00039000
         MVI   S99RBLN,X'14'                                    01S0089 00040000
*S99TXTPP = ADDR(TUP(1));                                       01S0090 00041000
*                                                               01S0090 00042000
         LA    @08,TUP                                          01S0090 00043000
         ST    @08,S99TXTPP                                     01S0090 00044000
*QUIT = OFF;                           /* EXIT LOOP WHEN ON          */ 00045000
         NI    QUIT,B'01111111'                                 01S0091 00046000
*DO I=1 BY 1 WHILE(QUIT = OFF);        /* LOOP FOR EACH DAIR CODE,      00047000
*                                        I.E. ONCE, EXCEPT FOR DAIR28*/ 00048000
         LA    I,1                                              01S0092 00049000
         B     @DE00092                                         01S0092 00050000
@DL00092 DS    0H                                               01S0093 00051000
*  S99VERB = '00'X;                    /* FILLED IN BY INDIV. FUNCT  */ 00052000
         MVI   S99VERB,X'00'                                    01S0093 00053000
*  IF DAPLDAPB -> DAIRCODE = '0028'X THEN /* MULTIPLE FUNCTION CALL ?*/ 00054000
         L     @08,DAPLDAPB(,DAPLPTR)                           01S0094 00055000
         CLC   DAIRCODE(2,@08),@CB00173                         01S0094 00056000
         BNE   @RF00094                                         01S0094 00057000
*    IF DA28NOP = 0 THEN               /* VALID NUMBER IN DA28NOP ?  */ 00058000
         LH    @08,DA28NOP(,@08)                                01S0095 00059000
         LTR   @08,@08                                          01S0095 00060000
         BNZ   @RF00095                                         01S0095 00061000
*      DO;                             /* NO, INVALID DA28NOP        */ 00062000
*        QUIT = ON;                    /* EXIT LOOP                  */ 00063000
         OI    QUIT,B'10000000'                                 01S0097 00064000
*        RETCODE = DRINVLST;           /* INDICATE INVALID PARM LIST */ 00065000
         LA    RETCODE,4                                        01S0098 00066000
*      END;                            /* END OF INVALID DA28NOP     */ 00067000
*    ELSE                              /* VALID DA28NOP              */ 00068000
*      DO;                             /* PROCESS LIST               */ 00069000
         B     @RC00095                                         01S0100 00070000
@RF00095 DS    0H                                               01S0101 00071000
*        IF I > DA28NOP THEN           /* ALL PROCESSING DONE ?      */ 00072000
         L     @08,DAPLDAPB(,DAPLPTR)                           01S0101 00073000
         CH    I,DA28NOP(,@08)                                  01S0101 00074000
         BNH   @RF00101                                         01S0101 00075000
*          QUIT = ON;                  /* YES, EXIT LOOP             */ 00076000
         OI    QUIT,B'10000000'                                 01S0102 00077000
*        ELSE                          /* CHECK LIST FURTHER         */ 00078000
*          IF DA28OPTR(I) = 0 THEN     /* IS OPERATION PTR 0 ?       */ 00079000
         B     @RC00101                                         01S0103 00080000
@RF00101 LR    @08,I                                            01S0103 00081000
         SLA   @08,2                                            01S0103 00082000
         L     @04,DAPLDAPB(,DAPLPTR)                           01S0103 00083000
         LA    @04,DA28PFOP(,@04)                               01S0103 00084000
         L     @08,DA28OPTR(@08,@04)                            01S0103 00085000
         LTR   @08,@08                                          01S0103 00086000
         BNZ   @RF00103                                         01S0103 00087000
*            DO;                       /* YES, INVALID PTR           */ 00088000
*              QUIT = ON;              /* EXIT LOOP                  */ 00089000
         OI    QUIT,B'10000000'                                 01S0105 00090000
*              RETCODE = DRINVLST;     /* INDICATE INVALID PARM LIST */ 00091000
         LA    RETCODE,4                                        01S0106 00092000
*            END;                      /* END INVALID PTR            */ 00093000
*          ELSE                        /* MORE PROCESSING NEEDED     */ 00094000
*            DO;                       /* GET NEXT PTR               */ 00095000
         B     @RC00103                                         01S0108 00096000
@RF00103 DS    0H                                               01S0109 00097000
*              BLOCKPTR = DA28OPTR(I); /* GET NEXT ELEMENT IN LIST   */ 00098000
         LR    @08,I                                            01S0109 00099000
         SLA   @08,2                                            01S0109 00100000
         L     @04,DAPLDAPB(,DAPLPTR)                           01S0109 00101000
         LA    @15,DA28PFOP(,@04)                               01S0109 00102000
         L     BLOCKPTR,DA28OPTR(@08,@15)                       01S0109 00103000
*              DA28PFOP = 0;           /* ZERO FAILING FUNCTION PTR  */ 00104000
         SLR   @08,@08                                          01S0110 00105000
         ST    @08,DA28PFOP(,@04)                               01S0110 00106000
*            END;                      /* END PTR UPDATE             */ 00107000
*       END;                           /* END LIST PROCESSING        */ 00108000
*  ELSE                                /* CODE NOT 28                */ 00109000
*    BLOCKPTR = DAPLDAPB;              /* BASE FOR NON-28 PARM BLOCK */ 00110000
         B     @RC00094                                         01S0113 00111000
@RF00094 L     BLOCKPTR,DAPLDAPB(,DAPLPTR)                      01S0113 00112000
*  IF QUIT=OFF THEN                    /* OK TO PROCEED              */ 00113000
@RC00094 TM    QUIT,B'10000000'                                 01S0114 00114000
         BNZ   @RF00114                                         01S0114 00115000
*    DO;                                                        01S0115 00116000
*      TUPTRS = TUPTRS && TUPTRS;      /* INIT TEXT UNIT POINTERS    */ 00117000
         XC    TUPTRS(120),TUPTRS                               01S0116 00118000
*      IF BLOCKPTR->DAIRCODE='0000'X THEN /* IS DAIR CODE 00         */ 00119000
         CLC   DAIRCODE(2,BLOCKPTR),@CB01101                    01S0117 00120000
         BNE   @RF00117                                         01S0117 00121000
*        DO;                           /* YES, EXECUTE CODE          */ 00122000
*/********************************************************************/ 00123000
*/*                                                                  */ 00124000
*/* SEGMENT - DAIR00                                                 */ 00125000
*/*                                                                  */ 00126000
*/* DESCRIPTIVE NAME - DAIR CODE 00 PROCESSOR                        */ 00127000
*/*                                                                  */ 00128000
*/* FUNCTION - THIS ROUTINE IS INVOKED WHEN A DAIR00 PARM BLOCK      */ 00129000
*/*            IS PASSED TO IEFDB4D0(DAIR).  DAIR00 IS INVOKED       */ 00130000
*/*            IN ORDER TO SEARCH THE DSAB CHAIN BY DDNAME OR        */ 00131000
*/*            DSNAME FOR INFORMATION ABOUT A DATA SET.              */ 00132000
*/*                                                                  */ 00133000
*/* OPERATION - THE DSNAME CHECK ROUTINE IS INVOKED TO DETERMINE     */ 00134000
*/*             IF A VALID DATA SET NAME HAS BEEN SUPPLIED.  IF      */ 00135000
*/*             THE NAME IS INVALID, THEN THE RETURN CODE IS SET     */ 00136000
*/*             TO 4(INVALID PARAMETER LIST) AND NO FURTHER          */ 00137000
*/*             PROCESSING IS DONE.  IF NEITHER DSNAME NOR DDNAME    */ 00138000
*/*             IS SPECIFIED, THE RETURN CODE IS SET TO 4 AND        */ 00139000
*/*             NO FURTHER PROCESSING IS DONE.                       */ 00140000
*/*                                                                  */ 00141000
*/*             IF THE DSNAME IS VALID OR DDNAME WAS SPECIFIED,      */ 00142000
*/*             THEN PROCESSING CONTINUES.  THE INFORMATION          */ 00143000
*/*             RETRIEVAL VERB CODE IS SET.  TEXT UNITS ARE BUILT    */ 00144000
*/*             REQUESTING RETURN OF DSORG AND DYNAMIC ALLOCATION    */ 00145000
*/*             ATTRIBUTES.  IF THE SEARCH IS BY DSNAME, THE DSNAME  */ 00146000
*/*             TEXT UNIT IS BUILT AND DYNAMIC ALLOCATION IS INVOKED.*/ 00147000
*/*             IF THE SEARCH IS BY DDNAME, THE RETURN DATA SET TYPE */ 00148000
*/*             TEXT UNIT IS BUILT AND THE DDNAME TEXT UNIT          */ 00149000
*/*             IS BUILT.                                            */ 00150000
*/*                                                                  */ 00151000
*/*             IF SUCCESSFUL (R15 = 0) THEN DATA FROM THE TEXT      */ 00152000
*/*             UNITS IS STORED INTO THE DAIR PARM BLOCK, THE DA00DSE*/ 00153000
*/*             BIT IS TURNED ON (SET TO 1) TO INDICATE THE SEARCH BY*/ 00154000
*/*             DSNAME OR DDNAME WAS SUCCESSFUL (THE PROPER DSAB WAS */ 00155000
*/*             FOUND).                                              */ 00156000
*/*                                                                  */ 00157000
*/*             IF R15 ^= O AFTER INVOKING DYNAMIC ALLOCATION,       */ 00158000
*/*             THE DA00DSE BIT IS SET TO OFF(0) AND THE             */ 00159000
*/*             APPROPRIATE DAIR  RETURN CODE IS SET, (PLEASE SEE    */ 00160000
*/*             RETURN CODE SECTION).                                */ 00161000
*/*                                                                  */ 00162000
*/* ENTRY - DAIR00(INCLUDED SEGMENT)                                 */ 00163000
*/*                                                                  */ 00164000
*/* INPUT DATA - DAIR00 PARM BLOCK, SVC99 PARM LIST                  */ 00165000
*/*                                                                  */ 00166000
*/* EXITS - ALL ARE TO NEXT SEQUENTIAL INSTRUCTION                   */ 00167000
*/*                                                                  */ 00168000
*/*  NORMAL -                                                        */ 00169000
*/*                                                                  */ 00170000
*/*   OUTPUT - DA00DSE SET ON, DA00DSO                               */ 00171000
*/*                                                                  */ 00172000
*/*   RETURN CODE - REG 15 IS SET TO ZERO                            */ 00173000
*/*                                                                  */ 00174000
*/*  ERROR -                                                         */ 00175000
*/*                                                                  */ 00176000
*/*   OUTPUT - DA00DSE SET OFF                                       */ 00177000
*/*                                                                  */ 00178000
*/*   RETURN CODE - THE FOLLOWING RETURN CODE IS ISSUED              */ 00179000
*/*                                                                  */ 00180000
*/*                52 - REQUEST FAILED BY INSTALLATION EXIT          */ 00181000
*/*                                                                  */ 00182000
*/*                                                                  */ 00183000
*/********************************************************************/ 00184000
*CALL DSNCHECK (DA00CTL,DA00PDSN);     /* VALIDY CHECK DSNAME        */ 00185000
         LA    @08,DA00CTL(,BLOCKPTR)                           02S0119 00186000
         ST    @08,@AL00001                                     02S0119 00187000
         LA    @08,DA00PDSN(,BLOCKPTR)                          02S0119 00188000
         ST    @08,@AL00001+4                                   02S0119 00189000
         LA    @01,@AL00001                                     02S0119 00190000
         BAL   @14,DSNCHECK                                     02S0119 00191000
*IF R15 ^= 0                           /* IS DSNAME VALID ?          */ 00192000
*  | (DSNBUF(1) = ' ' & DA00DDN(1) = ' ') THEN /*  IS A DATA SET NAME   00193000
*                                              OR DDNAME PRESENT ?   */ 00194000
         LTR   R15,R15                                          02S0120 00195000
         BNZ   @RT00120                                         02S0120 00196000
         CLI   DSNBUF,C' '                                      02S0120 00197000
         BNE   @RF00120                                         02S0120 00198000
         CLI   DA00DDN(BLOCKPTR),C' '                           02S0120 00199000
         BNE   @RF00120                                         02S0120 00200000
@RT00120 DS    0H                                               02S0121 00201000
*  RETCODE = DRINVLST;                 /* INVALID PARM LIST RETCODE  */ 00202000
         LA    RETCODE,4                                        02S0121 00203000
*ELSE                                  /* VALID PARM LIST            */ 00204000
*  DO;                                 /* SET UP FOR DYNAMIC ALLOC   */ 00205000
         B     @RC00120                                         02S0122 00206000
@RF00120 DS    0H                                               02S0123 00207000
*    S99VERB = S99VRBIN;               /* SET INFORMATION RETRIEVAL     00208000
*                                         VERB CODE                  */ 00209000
         MVI   S99VERB,X'07'                                    02S0123 00210000
*                           /* GENERATE TEXT UNITS        */    02S0124 00211000
*                                                               02S0124 00212000
*       DO;                                                     02S0124 00213000
*         TUP(1) = ADDR(TU(1));                                 02S0125 00214000
         LA    @08,TU                                           02S0125 00215000
         ST    @08,TUP                                          02S0125 00216000
*         TUP(1)->S99TUKEY = DINRTORG;                          02S0126 00217000
         MVC   S99TUKEY(2,@08),@CB00910                         02S0126 00218000
*         TUP(1)->S99TUNUM = 1;                                 02S0127 00219000
         LA    @04,1                                            02S0127 00220000
         STCM  @04,3,S99TUNUM(@08)                              02S0127 00221000
*         TUP(1)->S99TULNG = 2;                                 02S0128 00222000
         MVC   S99TULNG(2,@08),@CH00062                         02S0128 00223000
*         TUP(1)->S99TUPAR(1:2) = ZERO;                         02S0129 00224000
         SLR   @03,@03                                          02S0129 00225000
         STCM  @03,3,S99TUPAR(@08)                              02S0129 00226000
*       END;                                                    02S0130 00227000
*                                                               02S0130 00228000
*       DO;                                                     02S0131 00229000
*         TUP(2) = ADDR(TU(2));                                 02S0132 00230000
         LA    @08,TU+14                                        02S0132 00231000
         ST    @08,TUP+4                                        02S0132 00232000
*         TUP(2)->S99TUKEY = DINRTATT;                          02S0133 00233000
         MVC   S99TUKEY(2,@08),@CB00159                         02S0133 00234000
*         TUP(2)->S99TUNUM = 1;                                 02S0134 00235000
         STCM  @04,3,S99TUNUM(@08)                              02S0134 00236000
*         TUP(2)->S99TULNG = 1;                                 02S0135 00237000
         STCM  @04,3,S99TULNG(@08)                              02S0135 00238000
*         TUP(2)->S99TUPAR(1:1) = ZERO;                         02S0136 00239000
         STC   @03,S99TUPAR(,@08)                               02S0136 00240000
*       END;                                                    02S0137 00241000
*    IF DSNBUF(1) ^= ' ' THEN          /* RETURN DSNAME IF PRESENT   */ 00242000
*                                                               02S0138 00243000
         CLI   DSNBUF,C' '                                      02S0138 00244000
         BE    @RF00138                                         02S0138 00245000
*         DO;                                                   02S0139 00246000
*           TUP(3) = ADDR(TUDSN);                               02S0140 00247000
         LA    @08,TUDSN                                        02S0140 00248000
         ST    @08,TUP+8                                        02S0140 00249000
*           TUP(3)->S99TUKEY = DINDSNAM;                        02S0141 00250000
         MVC   S99TUKEY(2,@08),@CB00896                         02S0141 00251000
*           TUP(3)->S99TUNUM = 1;                               02S0142 00252000
         STCM  @04,3,S99TUNUM(@08)                              02S0142 00253000
*           TUP(3)->S99TULNG = LENGTH(DSNBUF);                  02S0143 00254000
         MVC   S99TULNG(2,@08),@CH00092                         02S0143 00255000
*           TUP(3)->S99TUPAR(1:LENGTH(DSNBUF)) = DSNBUF;        02S0144 00256000
         MVC   S99TUPAR(44,@08),DSNBUF                          02S0144 00257000
*         END;                                                  02S0145 00258000
*    ELSE                              /* NO DSNAME PRESENT          */ 00259000
*      DO;                             /* SEARCH BY DDNAME           */ 00260000
*                                                               02S0146 00261000
         B     @RC00138                                         02S0146 00262000
@RF00138 DS    0H                                               02S0147 00263000
*           DO;                                                 02S0147 00264000
*             TUP(4) = ADDR(TU(4));                             02S0148 00265000
         LA    @08,TU+42                                        02S0148 00266000
         ST    @08,TUP+12                                       02S0148 00267000
*             TUP(4)->S99TUKEY = DINDDNAM;                      02S0149 00268000
         MVC   S99TUKEY(2,@08),@CB00894                         02S0149 00269000
*             TUP(4)->S99TUNUM = 1;                             02S0150 00270000
         LA    @04,1                                            02S0150 00271000
         STCM  @04,3,S99TUNUM(@08)                              02S0150 00272000
*             TUP(4)->S99TULNG = LENGTH(DA00DDN);               02S0151 00273000
         MVC   S99TULNG(2,@08),@CH00048                         02S0151 00274000
*             TUP(4)->S99TUPAR(1:LENGTH(DA00DDN)) = DA00DDN;    02S0152 00275000
         MVC   S99TUPAR(8,@08),DA00DDN(BLOCKPTR)                02S0152 00276000
*           END;                                                02S0153 00277000
*                                                               02S0153 00278000
*           DO;                                                 02S0154 00279000
*             TUP(5) = ADDR(TU(5));                             02S0155 00280000
         LA    @08,TU+56                                        02S0155 00281000
         ST    @08,TUP+16                                       02S0155 00282000
*             TUP(5)->S99TUKEY = DINRTTYP;                      02S0156 00283000
         MVC   S99TUKEY(2,@08),@CB00917                         02S0156 00284000
*             TUP(5)->S99TUNUM = 1;                             02S0157 00285000
         STCM  @04,3,S99TUNUM(@08)                              02S0157 00286000
*             TUP(5)->S99TULNG = 1;                             02S0158 00287000
         STCM  @04,3,S99TULNG(@08)                              02S0158 00288000
*             TUP(5)->S99TUPAR(1:1) = ZERO;                     02S0159 00289000
         MVI   S99TUPAR(@08),X'00'                              02S0159 00290000
*           END;                                                02S0160 00291000
*      END;                            /* END BUILDING DDN SRCH TEXT */ 00292000
*                                                               02S0161 00293000
*     TUP(5) = TUP(5) | '80000000'X;                            02S0162 00294000
@RC00138 L     @08,TUP+16                                       02S0162 00295000
         O     @08,@CF01105                                     02S0162 00296000
         ST    @08,TUP+16                                       02S0162 00297000
*    R1 = ADDR(S99RBPTR);              /* GET PARM PTR ADDRESS       */ 00298000
*                                                               02S0163 00299000
         LA    R1,S99RBPTR                                      02S0163 00300000
*     /*MACDATE Y-2 73082*/                                     02S0164 00301000
*     SVC (99);                                                 02S0164 00302000
         SVC   99                                               02S0164 00303000
*    RESPECIFY R15 RESTRICTED;         /* RESTRICT R15 USAGE         */ 00304000
*    IF R15 = 0 THEN                   /* WAS DYN/ALLOC SUCCESSFUL ? */ 00305000
         LTR   R15,R15                                          02S0166 00306000
         BNZ   @RF00166                                         02S0166 00307000
*      DO;                             /* YES,STORE RETURNED DATA IN    00308000
*                                         DAIR PARM LIST             */ 00309000
*        DA00DSE = ON;                 /* INDICATE DDNAME OR DSNAME     00310000
*                                         FOUND IN DSAB CHAIN        */ 00311000
         OI    DA00DSE(BLOCKPTR),B'00000010'                    02S0168 00312000
*        DA00DSO = TUP(1)->S99TUPAR(1); /* RETURN DSORG              */ 00313000
         L     @14,TUP                                          02S0169 00314000
         MVC   DA00DSO(1,BLOCKPTR),S99TUPAR(@14)                02S0169 00315000
*        IF TUP(2)->PERMALOC = ON THEN /* IS DSAB MARKED PERM ALLOC? */ 00316000
         L     @14,TUP+4                                        02S0170 00317000
         TM    PERMALOC(@14),B'00100000'                        02S0170 00318000
         BNO   @RF00170                                         02S0170 00319000
*          DA00PERM = ON;              /* YES, TURN ON DAIR PERM BIT */ 00320000
         OI    DA00PERM(BLOCKPTR),B'00001000'                   02S0171 00321000
*        IF DSNBUF(1) = ' ' THEN       /* WAS SEARCH BY DDNAME ?     */ 00322000
@RF00170 CLI   DSNBUF,C' '                                      02S0172 00323000
         BNE   @RF00172                                         02S0172 00324000
*          IF TUP(5)->TERMINAL = ON THEN /* TERM BIT ON IN TEXT ?    */ 00325000
         L     @14,TUP+16                                       02S0173 00326000
         TM    TERMINAL(@14),B'01000000'                        02S0173 00327000
         BNO   @RF00173                                         02S0173 00328000
*            DA00TERM = ON;            /* SET TERM BIT IN DAIR LIST  */ 00329000
         OI    DA00TERM(BLOCKPTR),B'00000001'                   02S0174 00330000
*      END;                            /* END PROCESSING SUCCESSFUL     00331000
*                                         RETURN OF DATA             */ 00332000
*    ELSE                              /* DYNAMIC ALLOCATION FAILED  */ 00333000
*      DA00DSE = OFF;                  /* INDICATE ENTRY NOT FOUND   */ 00334000
         B     @RC00166                                         02S0176 00335000
@RF00166 NI    DA00DSE(BLOCKPTR),B'11111101'                    02S0176 00336000
*      IF R15 = 8 THEN                 /* REQUEST DENIED BY     02S0177 00337000
*                                         INSTALLATION EXIT ?        */ 00338000
@RC00166 C     R15,@CF00048                                     02S0177 00339000
         BNE   @RF00177                                         02S0177 00340000
*        RETCODE = DRREQDEN;           /* SET DAIR RETURN CODE TO       00341000
*                                         INSTALLATION EXIT FAILURE  */ 00342000
         LA    RETCODE,52                                       02S0178 00343000
*  END;                                /* END DYN/ALLOC SETUP        */ 00344000
@RF00177 DS    0H                                               02S0180 00345000
*        END;                          /* END CODE 00                */ 00346000
@RC00120 DS    0H                                               01S0181 00347000
*      IF BLOCKPTR->DAIRCODE='0004'X THEN /* IS DAIR CODE 04         */ 00348000
@RF00117 CLC   DAIRCODE(2,BLOCKPTR),@CB00155                    01S0181 00349000
         BNE   @RF00181                                         01S0181 00350000
*        DO;                           /* YES, EXECUTE CODE          */ 00351000
*/********************************************************************/ 00352000
*/*                                                                  */ 00353000
*/* SEGMENT - DAIR04                                                 */ 00354000
*/*                                                                  */ 00355000
*/* DESCRIPTIVE NAME - DAIR CODE 04 PROCESSOR                        */ 00356000
*/*                                                                  */ 00357000
*/* FUNCTION - THIS ROUTINE IS INVOKED WHEN A DAIR04 PARM BLOCK      */ 00358000
*/*            IS PASSED TO IEFDB4D0(DAIR).  DAIR04 IS INVOKED       */ 00359000
*/*            IN ORDER TO SEARCH THE DSAB CHAIN OR CATALOG          */ 00360000
*/*            (USING LOCATE) BY DSNAME TO RETURN INFORMATION        */ 00361000
*/*            ABOUT THE DATA SET.                                   */ 00362000
*/*                                                                  */ 00363000
*/* OPERATION - THE DSNAME CHECK ROUTINE IS INVOKED TO DETERMINE     */ 00364000
*/*             IF A VALID DATA SET NAME HAS BEEN SUPPLIED.  IF      */ 00365000
*/*             THE NAME IS INVALID OR HAS NOT BEEN SPECIFIED, THE   */ 00366000
*/*             RETURN CODE IS SET TO 4(INVALID PARAMETER LIST) AND  */ 00367000
*/*             NO FURTHER PROCESSING IS DONE.                       */ 00368000
*/*                                                                  */ 00369000
*/*             IF THE DSNAME IS VALID, THE INFORMATION RETRIEVAL    */ 00370000
*/*             VERB CODE IS SET.  TEXT UNITS ARE BUILT REQUESTING   */ 00371000
*/*             RETURN OF THE DSORG AND DYNAMIC ALLOCATION IS        */ 00372000
*/*             INVOKED TO SEARCH THE DSAB CHAIN.                    */ 00373000
*/*                                                                  */ 00374000
*/*             IF SUCCESSFUL (R15=0), THE DA04DSE BIT IS TURNED     */ 00375000
*/*             ON(SET TO 1) INDICATING DSNAME FOUND IN DSAB CHAIN   */ 00376000
*/*             AND THE DSORG IS STORED IN THE DAIR PARM BLOCK.      */ 00377000
*/*                                                                  */ 00378000
*/*             IF THE RETURN CODE FROM DYNAMIC ALLOCATION WAS NOT   */ 00379000
*/*             ZERO(R15^=0), IT IS CHECKED FOR BEING 8 (REQUEST     */ 00380000
*/*             DENIED BY INSTALLATION EXIT).  IF SO, THE RETURN     */ 00381000
*/*             CODE IS SET TO 52(REQUEST DENIED BY INSTALLATION     */ 00382000
*/*             EXIT) AND NO FURTHER PROCESSING IS DONE.             */ 00383000
*/*                                                                  */ 00384000
*/*             IF THE RETURN CODE IS NOT 8, THE S99ERROR            */ 00385000
*/*             FIELD IS CHECKED FOR DSNAME NOT FOUND.               */ 00386000
*/*             IF THE DSNAME WAS NOT FOUND, A LOCATE IS ISSUED      */ 00387000
*/*             FOR THE DSNAME TO DETERMINE IF IT IS IN THE          */ 00388000
*/*             CATALOG.  THE RETURN CODE IN R15 IS STORED IN        */ 00389000
*/*             THE DA04CTRC FIELD.  IF DA04CTRC IS ZERO, THE        */ 00390000
*/*             DA04CAT BIT IS TURNED ON(SET TO 1) INDICATING        */ 00391000
*/*             DSNAME FOUND IN THE CATALOG.  IF DA04CTRC IS NOT     */ 00392000
*/*             ZERO, DA04CAT IS TURNED OFF(SET TO 0) AND THE        */ 00393000
*/*             RETURN CODE SET TO 8(INDICATING CATALOG MANAGEMENT   */ 00394000
*/*             ERROR).                                              */ 00395000
*/*                                                                  */ 00396000
*/* ENTRY - DAIR04(INCLUDED SEGMENT)                                 */ 00397000
*/*                                                                  */ 00398000
*/* INPUT DATA - DAIR04 PARM BLOCK, SVC99 PARM LIST                  */ 00399000
*/*                                                                  */ 00400000
*/* EXITS - ALL ARE TO NEXT SEQUENTIAL INSTRUCTION                   */ 00401000
*/*                                                                  */ 00402000
*/*  NORMAL -                                                        */ 00403000
*/*                                                                  */ 00404000
*/*   OUTPUT - DA04DSE SET ON IF DSNAME FOUND ALLOCATED, DA04DSO     */ 00405000
*/*            DA04CAT SET ON IF FOUND IN CATALOG                    */ 00406000
*/*                                                                  */ 00407000
*/*   RETURN CODE - REG 15 SET TO ZERO                               */ 00408000
*/*                                                                  */ 00409000
*/*  ERROR -                                                         */ 00410000
*/*                                                                  */ 00411000
*/*   OUTPUT - DA04DSE AND DA04CAT SET OFF                           */ 00412000
*/*                                                                  */ 00413000
*/*   RETURN CODE - THE FOLLOWING RETURN CODES ARE ISSUED            */ 00414000
*/*                                                                  */ 00415000
*/*                 8 - CATALOG MANAGEMENT ERROR, CATALOG RETURN     */ 00416000
*/*                     CODE IN DA04CTRC                             */ 00417000
*/*                                                                  */ 00418000
*/*                52 - REQUEST DENIED BY INSTALLATION EXIT          */ 00419000
*/********************************************************************/ 00420000
*DA04CTRC = 0;                         /* ZERO CATALOG ERROR CODE    */ 00421000
         SLR   @14,@14                                          02S0183 00422000
         STH   @14,DA04CTRC(,BLOCKPTR)                          02S0183 00423000
*CALL DSNCHECK (DA04CTL,DA04PDSN);     /* VALIDITY CHECK DSNAME      */ 00424000
         LA    @14,DA04CTL(,BLOCKPTR)                           02S0184 00425000
         ST    @14,@AL00001                                     02S0184 00426000
         LA    @14,DA04PDSN(,BLOCKPTR)                          02S0184 00427000
         ST    @14,@AL00001+4                                   02S0184 00428000
         LA    @01,@AL00001                                     02S0184 00429000
         BAL   @14,DSNCHECK                                     02S0184 00430000
*IF R15 ^= 0 | DSNBUF(1) = ' ' THEN    /* INVALID DSNAME OR DSNAME      00431000
*                                         NOT PRESENT                */ 00432000
         LTR   R15,R15                                          02S0185 00433000
         BNZ   @RT00185                                         02S0185 00434000
         CLI   DSNBUF,C' '                                      02S0185 00435000
         BNE   @RF00185                                         02S0185 00436000
@RT00185 DS    0H                                               02S0186 00437000
*  RETCODE = DRINVLST;                 /* INVALID PARM LIST RETCODE  */ 00438000
         LA    RETCODE,4                                        02S0186 00439000
*ELSE                                  /* VALID PARM LIST            */ 00440000
*  DO;                                 /* PROCESS VALID PARM LIST    */ 00441000
         B     @RC00185                                         02S0187 00442000
@RF00185 DS    0H                                               02S0188 00443000
*    S99VERB = S99VRBIN;               /* SET INFORMATION RETRIEVAL     00444000
*                                         VERB CODE                  */ 00445000
*                                                               02S0188 00446000
*                                                               02S0188 00447000
         MVI   S99VERB,X'07'                                    02S0188 00448000
*       DO;                                                     02S0189 00449000
*         TUP(1) = ADDR(TU(1));                                 02S0190 00450000
         LA    @14,TU                                           02S0190 00451000
         ST    @14,TUP                                          02S0190 00452000
*         TUP(1)->S99TUKEY = DINRTORG;                          02S0191 00453000
         MVC   S99TUKEY(2,@14),@CB00910                         02S0191 00454000
*         TUP(1)->S99TUNUM = 1;                                 02S0192 00455000
         LA    @08,1                                            02S0192 00456000
         STCM  @08,3,S99TUNUM(@14)                              02S0192 00457000
*         TUP(1)->S99TULNG = 2;                                 02S0193 00458000
         MVC   S99TULNG(2,@14),@CH00062                         02S0193 00459000
*         TUP(1)->S99TUPAR(1:2) = ZERO;                         02S0194 00460000
         SLR   @04,@04                                          02S0194 00461000
         STCM  @04,3,S99TUPAR(@14)                              02S0194 00462000
*       END;                                                    02S0195 00463000
*                                                               02S0195 00464000
*       DO;                                                     02S0196 00465000
*         TUP(2) = ADDR(TUDSN);                                 02S0197 00466000
         LA    @14,TUDSN                                        02S0197 00467000
         ST    @14,TUP+4                                        02S0197 00468000
*         TUP(2)->S99TUKEY = DINDSNAM;                          02S0198 00469000
         MVC   S99TUKEY(2,@14),@CB00896                         02S0198 00470000
*         TUP(2)->S99TUNUM = 1;                                 02S0199 00471000
         STCM  @08,3,S99TUNUM(@14)                              02S0199 00472000
*         TUP(2)->S99TULNG = LENGTH(DSNBUF);                    02S0200 00473000
         MVC   S99TULNG(2,@14),@CH00092                         02S0200 00474000
*         TUP(2)->S99TUPAR(1:LENGTH(DSNBUF)) = DSNBUF;          02S0201 00475000
         MVC   S99TUPAR(44,@14),DSNBUF                          02S0201 00476000
*       END;                                                    02S0202 00477000
*                                                               02S0202 00478000
*     TUP(2) = TUP(2) | '80000000'X;                            02S0203 00479000
         O     @14,@CF01105                                     02S0203 00480000
         ST    @14,TUP+4                                        02S0203 00481000
*    R1 = ADDR(S99RBPTR);              /* GET PARM PTR ADDRESS       */ 00482000
*                                                               02S0204 00483000
         LA    R1,S99RBPTR                                      02S0204 00484000
*     /*MACDATE Y-2 73082*/                                     02S0205 00485000
*     SVC (99);                                                 02S0205 00486000
         SVC   99                                               02S0205 00487000
*    RESPECIFY R15 RESTRICTED;         /* RESTRICT R15 USAGE         */ 00488000
*    IF R15 = 0 THEN                   /* WAS DSNAME FOUND ?         */ 00489000
         LTR   R15,R15                                          02S0207 00490000
         BNZ   @RF00207                                         02S0207 00491000
*      DO;                             /* YES, RETURN DSORG          */ 00492000
*        DA04DSE = ON;                 /* TURN ON DATA SET FOUND IN     00493000
*                                         DSAB CHAIN                 */ 00494000
         OI    DA04DSE(BLOCKPTR),B'00000010'                    02S0209 00495000
*        DA04DSO = TUP(1) -> S99TUPAR(1); /* RETURN DSORG            */ 00496000
         L     @14,TUP                                          02S0210 00497000
         MVC   DA04DSO(1,BLOCKPTR),S99TUPAR(@14)                02S0210 00498000
*      END;                            /* END DATA RETURN            */ 00499000
*    ELSE                              /* NOT SUCCESSFUL             */ 00500000
*      DO;                             /* PROCESS NON ZERO RETURN    */ 00501000
         B     @RC00207                                         02S0212 00502000
@RF00207 DS    0H                                               02S0213 00503000
*        DA04DSE = OFF;                /* NOT FOUND IN DSAB CHAIN    */ 00504000
         NI    DA04DSE(BLOCKPTR),B'11111101'                    02S0213 00505000
*        IF R15 = 8 THEN               /* WAS REQUEST FAILED BY 02S0214 00506000
*                                         INSTALLATION EXIT ?        */ 00507000
         C     R15,@CF00048                                     02S0214 00508000
         BNE   @RF00214                                         02S0214 00509000
*          RETCODE = DRREQDEN;         /* YES, SET DAIR INSTALLATION    00510000
*                                         EXIT RETURN CODE           */ 00511000
         LA    RETCODE,52                                       02S0215 00512000
*        ELSE                          /* NOT INSTALLATION EXIT ERROR*/ 00513000
*          IF S99ERROR = RCDSNFND THEN /* DATA SET NOT FOUND ?       */ 00514000
         B     @RC00214                                         02S0216 00515000
@RF00214 CLC   S99ERROR(2),@CB00292                             02S0216 00516000
         BNE   @RF00216                                         02S0216 00517000
*            DO;                       /* YES, BUILD LOCATE PARM LIST*/ 00518000
*              CTRL = '44000000'X;     /* INDICATE SEARCH BY DSNAME  */ 00519000
         MVC   CTRL(4),@CF01108                                 02S0218 00520000
*              LOCDSPTR = ADDR(DSNBUF);/* ADDRESS OF DSNAME          */ 00521000
         LA    @14,DSNBUF                                       02S0219 00522000
         ST    @14,LOCDSPTR                                     02S0219 00523000
*              NOPTION = 0;            /* ZERO OPTION FIELD          */ 00524000
         SLR   @14,@14                                          02S0220 00525000
         ST    @14,NOPTION                                      02S0220 00526000
*              AREAPTR = ADDR(LOCAREA);/* LOCATE WORK AREA ADDRESS   */ 00527000
         LA    @14,LOCAREA                                      02S0221 00528000
         ST    @14,AREAPTR                                      02S0221 00529000
*              R1 = ADDR(LOCPARM);     /* GET ADDRESS OF PARM LIST   */ 00530000
         LA    R1,LOCPARM                                       02S0222 00531000
*              GEN( LOCATE (1) );      /* ISSUE LOCATE               */ 00532000
          LOCATE (1)                                                    00533000
*              DA04CTRC = R15;         /* SAVE LOCATE RETURN CODE    */ 00534000
         STH   R15,DA04CTRC(,BLOCKPTR)                          02S0224 00535000
*              IF DA04CTRC = 0 THEN    /* WAS DATA SET FOUND ?       */ 00536000
         LH    @14,DA04CTRC(,BLOCKPTR)                          02S0225 00537000
         LTR   @14,@14                                          02S0225 00538000
         BNZ   @RF00225                                         02S0225 00539000
*                DA04CAT = ON;         /* YES,INDICATE FOUND IN CATLG*/ 00540000
         OI    DA04CAT(BLOCKPTR),B'00000100'                    02S0226 00541000
*              ELSE                    /* DATA SET NOT FOUND         */ 00542000
*                DO;                   /* INDICATE NOT FOUND         */ 00543000
         B     @RC00225                                         02S0227 00544000
@RF00225 DS    0H                                               02S0228 00545000
*                  DA04CAT = OFF;      /* INDICATE NOT FOUND IN CATLG*/ 00546000
         NI    DA04CAT(BLOCKPTR),B'11111011'                    02S0228 00547000
*                  RETCODE = DRCATMGT; /* CATLG MANAGEMENT ERROR     */ 00548000
         LA    RETCODE,8                                        02S0229 00549000
*                END;                  /* END CATLG MGT ERROR CODE   */ 00550000
*            END;                      /* END DSNAME NOT FOUND CODE  */ 00551000
*          ELSE;                       /* NOT DSNAME NOT FOUND       */ 00552000
@RF00216 DS    0H                                               02S0233 00553000
*      END;                            /* END NON ZERO RETURN        */ 00554000
@RC00216 DS    0H                                               02S0233 00555000
@RC00214 DS    0H                                               02S0234 00556000
*  END;                                /* END PROCESS VALID PARM LIST*/ 00557000
@RC00207 DS    0H                                               02S0235 00558000
*        END;                          /* END CODE 04                */ 00559000
@RC00185 DS    0H                                               01S0236 00560000
*      IF BLOCKPTR->DAIRCODE='0008'X THEN /* IS DAIR CODE 08         */ 00561000
@RF00181 CLC   DAIRCODE(2,BLOCKPTR),@CB00157                    01S0236 00562000
         BNE   @RF00236                                         01S0236 00563000
*        CALL DAIR08;                  /* YES, EXECUTE CODE          */ 00564000
         BAL   @14,DAIR08                                       01S0237 00565000
*      IF BLOCKPTR->DAIRCODE='000C'X THEN /* IS DAIR CODE 0C         */ 00566000
@RF00236 CLC   DAIRCODE(2,BLOCKPTR),@CB00159                    01S0238 00567000
         BNE   @RF00238                                         01S0238 00568000
*        DO;                           /* YES, EXECUTE CODE          */ 00569000
*/********************************************************************/ 00570000
*/*                                                                  */ 00571000
*/* SEGMENT - DAIR0C                                                 */ 00572000
*/*                                                                  */ 00573000
*/* DESCRIPTIVE NAME - DAIR CODE 0C PROCESSOR                        */ 00574000
*/*                                                                  */ 00575000
*/* FUNCTION - THIS ROUTINE IS INVOKED WHEN A DAIR0C PARM BLOCK      */ 00576000
*/*            IS PASSED TO IEFDB4D0(DAIR).  DAIR0C IS INVOKED       */ 00577000
*/*            IN ORDER TO CONCATENATE DATA SETS BY DDNAME.          */ 00578000
*/*                                                                  */ 00579000
*/* OPERATION - THE DA0CNUMB FIELD IS TESTED FOR 0(NO DDNAMES        */ 00580000
*/*             SUPPLIED).  IF 0, THE RETURN CODE IS SET TO 4        */ 00581000
*/*             (INVLAID PARAMETER LIST) AND NO FURTHER PROCESSING   */ 00582000
*/*             IS DONE.                                             */ 00583000
*/*                                                                  */ 00584000
*/*             IF THE DA0CNUMB FIELD IS 1, THERE IS NOTHING TO      */ 00585000
*/*             CONCATENATE, THE RETURN CODE IS SET TO 0 AND         */ 00586000
*/*             NO FURTHER PROCESSING IS DONE.                       */ 00587000
*/*                                                                  */ 00588000
*/*             IF NONE OF THE ABOVE CONDITIONS EXIST, THERE ARE     */ 00589000
*/*             DATA SETS TO CONCATENATE AND PROCESSING CONTINUES.   */ 00590000
*/*             THE DA0CNUMB IS USED IN A CALCULATION TO DETERMINE   */ 00591000
*/*             THE AMOUNT OF CORE NECESSARY TO BUILD TEXT UNITS     */ 00592000
*/*             FOR CONCATENATION.  A GETMAIN (R FORM) IS ISSUED     */ 00593000
*/*             AND THE TEXT UNIT IS BUILT IN THE GOTTEN CORE.       */ 00594000
*/*             DYNAMIC ALLOCATION IS THEN INVOKED.                  */ 00595000
*/*                                                                  */ 00596000
*/*             THE RETURN CODE(IN REG15) FROM DYNAMIC ALLOCATION    */ 00597000
*/*             IS THEN EXAMINED.                                    */ 00598000
*/*                                                                  */ 00599000
*/*             IF REG15 = 8, THE DAIR RETURN CODE IS SET TO 52      */ 00600000
*/*             (REQUEST DENIED BY INSTALLATION EXIT), THE GOTTEN    */ 00601000
*/*             CORE IS FREED AND NO FURTHER PROCESSING IS DONE.     */ 00602000
*/*                                                                  */ 00603000
*/*             IF R15 = 12, THE S99ERROR CODE IS TESTED FOR         */ 00604000
*/*             RCINPARM (INVALID PARM IN TEXT UNIT).  IF THE        */ 00605000
*/*             S99ERROR WAS RCINPARM, THE DA0CDARC FIELD IS SET     */ 00606000
*/*             TO DRDDNSPC (BLANK DDNAME SPECIFIED) OTHERWISE       */ 00607000
*/*             THE S99ERROR IS STORED IN THE DA0CDARC AND THE       */ 00608000
*/*             DAIR RETURN IS SET TO 12.  THE GOTTEN CORE IS        */ 00609000
*/*             FREED AND NO FURTHER PROCESSING IS DONE.             */ 00610000
*/*                                                                  */ 00611000
*/*             IF R15 = 4, THE S99ERROR CODE IS TESTED FOR RCDDNFND */ 00612000
*/*             (SPECIFIED DDNAME NOT FOUND).  IF THE S99ERROR       */ 00613000
*/*             WAS RCDDNFND, THE DA0CDARC FIELD IS SET TO DRDDNFND  */ 00614000
*/*             (DDNAME NOT FOUND).  OTHERWISE, THE S99ERROR         */ 00615000
*/*             CODE IS STORED IN DA0CDARC, AND THE RETURN CODE      */ 00616000
*/*             IS SET TO 12.  THE GOTTEN CORE IS FREED AND          */ 00617000
*/*             NO FURTHER PROCESSING IS DONE.                       */ 00618000
*/*                                                                  */ 00619000
*/*             IF NO ERROR CONDITION EXISTS, THE GOTTEN CORE        */ 00620000
*/*             IS FREED AND NO FURTHER PROCESSING IS DONE.          */ 00621000
*/*                                                                  */ 00622000
*/* ENTRY - DAIR0C(INCLUDED SEGMENT)                                 */ 00623000
*/*                                                                  */ 00624000
*/* INPUT DATA - DAIR0C PARM BLOCK, SVC99 PARM LIST                  */ 00625000
*/*                                                                  */ 00626000
*/* EXITS - ALL ARE TO NEXT SEQUENTIAL INSTRUCTION                   */ 00627000
*/*                                                                  */ 00628000
*/*  NORMAL -                                                        */ 00629000
*/*   RETURN CODE - REG15 SET TO ZERO(SUCCESSFUL CONCATENATION)      */ 00630000
*/*                                                                  */ 00631000
*/*  ERROR -                                                         */ 00632000
*/*   RETURN CODE - REG15 IS SET TO ONE OF THE FOLLOWING             */ 00633000
*/*                 4 - INVALID PARAMETER LIST                       */ 00634000
*/*                12 - DYNAMIC ALLOCATION ERROR                     */ 00635000
*/*                52 - REQUEST DENIED BY INSTALLATION EXIT          */ 00636000
*/*                                                                  */ 00637000
*/********************************************************************/ 00638000
*DA0CDARC = 0;                         /* ZERO DARC FIELD            */ 00639000
         SLR   @14,@14                                          02S0240 00640000
         STH   @14,DA0CDARC(,BLOCKPTR)                          02S0240 00641000
*S99VERB = S99VRBCC;                   /* SET VERB CODE TO CONCAT    */ 00642000
         MVI   S99VERB,X'03'                                    02S0241 00643000
*IF DA0CNUMB <= 0 THEN                 /* ARE THERE DD'S TO CONCAT ? */ 00644000
         CH    @14,DA0CNUMB(,BLOCKPTR)                          02S0242 00645000
         BL    @RF00242                                         02S0242 00646000
*  RETCODE = DRINVLST;                 /* NO, RETURN 4(INVALID PARM) */ 00647000
         LA    RETCODE,4                                        02S0243 00648000
*ELSE                                  /* DD COUNT GREATER THAN ZERO */ 00649000
*  IF DA0CNUMB = 1 THEN                /* IF COUNT= 1, NO PROCESSING */ 00650000
         B     @RC00242                                         02S0244 00651000
@RF00242 CLC   DA0CNUMB(2,BLOCKPTR),@CH00035                    02S0244 00652000
         BNE   @RF00244                                         02S0244 00653000
*    RETCODE = 0;                      /* RETURN 0(SUCCESSFUL)       */ 00654000
         SLR   RETCODE,RETCODE                                  02S0245 00655000
*  ELSE                                /* DD COUNT GREATER THAN ONE  */ 00656000
*    DO;                               /* PROCESS CONCAT REQUEST     */ 00657000
         B     @RC00244                                         02S0246 00658000
@RF00244 DS    0H                                               02S0247 00659000
*      RESPECIFY R0 RESTRICTED;        /* RESTRICT USAGE OF REG0     */ 00660000
*      R0 = (10 *DA0CNUMB) +4;         /* CALCULATE CORE FOR TEXT    */ 00661000
         LH    R0,DA0CNUMB(,BLOCKPTR)                           02S0248 00662000
         MH    R0,@CH00033                                      02S0248 00663000
         AL    R0,@CF00059                                      02S0248 00664000
*      R0 =R0 | SUBPOOL1;              /* SET SUBPOOL TO 1           */ 00665000
         O     R0,@CF00150                                      02S0249 00666000
*      CORESIZE = R0;                  /* SAVE SIZE AND SUBPOOL      */ 00667000
         ST    R0,CORESIZE                                      02S0250 00668000
*      GEN (GETMAIN R,LV=(0));         /* ISSUE R FORM GETMAIN       */ 00669000
         GETMAIN R,LV=(0)                                               00670000
*      RESPECIFY R0 UNRESTRICTED;                               02S0252 00671000
*      TUP(1) = R1;                    /* SAVE ADDRESS OF GOTTEN CORE*/ 00672000
         ST    R1,TUP                                           02S0253 00673000
*      TUP(1) = TUP(1) | '80000000'X;  /* INDICATE LAST TEXT UNIT    */ 00674000
         L     @14,TUP                                          02S0254 00675000
         O     @14,@CF01105                                     02S0254 00676000
         ST    @14,TUP                                          02S0254 00677000
*      TUP(1) ->S99TUKEY = DCCDDNAM;   /* DDNAME KEY                 */ 00678000
         MVC   S99TUKEY(2,@14),@CB00894                         02S0255 00679000
*      TUP(1) ->S99TUNUM = DA0CNUMB;   /* NUMBER OF TEXT ENTRIES     */ 00680000
         MVC   S99TUNUM(2,@14),DA0CNUMB(BLOCKPTR)               02S0256 00681000
*      S99TUFP = TUP(1) + 4;           /* GET ADDRESS TO MOVE DDNAMES*/ 00682000
         AL    @14,@CF00059                                     02S0257 00683000
         LR    S99TUFP,@14                                      02S0257 00684000
*      DO I = 1 BY 1 TO DA0CNUMB;      /* CONTROL # OF MOVES         */ 00685000
         LA    I,1                                              02S0258 00686000
         B     @DE00258                                         02S0258 00687000
@DL00258 DS    0H                                               02S0259 00688000
*        S99TULEN = 8;                 /* LENGTH OF DDNAME           */ 00689000
         MVC   S99TULEN(2,S99TUFP),@CH00048                     02S0259 00690000
*        S99TUPRM(1:8) = DA0CDDN(I);   /* MOVE DDNAME INTO TEXT UNIT */ 00691000
         LR    @14,I                                            02S0260 00692000
         SLA   @14,3                                            02S0260 00693000
         LA    @04,DA0CNUMB(,BLOCKPTR)                          02S0260 00694000
         ALR   @04,@14                                          02S0260 00695000
         AL    @04,@CF01192                                     02S0260 00696000
         MVC   S99TUPRM(8,S99TUFP),DA0CDDN(@04)                 02S0260 00697000
*        S99TUFP = S99TUFP + 10;       /* INCREMENT TO NEXT SLOT     */ 00698000
         AL    S99TUFP,@CF00033                                 02S0261 00699000
*      END;                            /* END DDNAME MOVES           */ 00700000
         AL    I,@CF00035                                       02S0262 00701000
@DE00258 CH    I,DA0CNUMB(,BLOCKPTR)                            02S0262 00702000
         BNH   @DL00258                                         02S0262 00703000
*      R1 = ADDR(S99RBPTR);            /* GET PARM PTR ADDRESS       */ 00704000
*                                                               02S0263 00705000
         LA    R1,S99RBPTR                                      02S0263 00706000
*       /*MACDATE Y-2 73082*/                                   02S0264 00707000
*       SVC (99);                                               02S0264 00708000
         SVC   99                                               02S0264 00709000
*      RESPECIFY R15 RESTRICTED;       /* RESTRICT REG15 USAGE       */ 00710000
*      IF R15 = 8 THEN                 /* REQUEST DENIED ?           */ 00711000
         C     R15,@CF00048                                     02S0266 00712000
         BNE   @RF00266                                         02S0266 00713000
*        RETCODE = DRREQDEN;           /* SET RETURN CODE TO REQUEST    00714000
*                                         DENIED BY INSTALLATION EXIT*/ 00715000
         LA    RETCODE,52                                       02S0267 00716000
*      IF R15 = 12 THEN                /* INVALID PARM LIST ?        */ 00717000
@RF00266 C     R15,@CF00034                                     02S0268 00718000
         BNE   @RF00268                                         02S0268 00719000
*        DO;                           /* YES, EXAMINE ERROR CODES   */ 00720000
*          IF S99ERROR = RCINPARM THEN /* INVALID PARM IN TEXT UNIT? */ 00721000
         CLC   S99ERROR(2),@CB00248                             02S0270 00722000
         BNE   @RF00270                                         02S0270 00723000
*            DA0CDARC = DRDDNSPC;      /* YES, SET ERROR CODE IN DARC*/ 00724000
         MVC   DA0CDARC(2,BLOCKPTR),@CH00179                    02S0271 00725000
*          ELSE                        /* NOT INVALID TEXT PARMS     */ 00726000
*            DA0CDARC = S99ERROR;      /* STORE DYNAMIC ALLOCATION      00727000
*                                         ERROR CODE IN DARC         */ 00728000
         B     @RC00270                                         02S0272 00729000
@RF00270 LH    @14,S99ERROR                                     02S0272 00730000
         N     @14,@CF01193                                     02S0272 00731000
         STH   @14,DA0CDARC(,BLOCKPTR)                          02S0272 00732000
*          RETCODE = DRDYNERR;         /* INDICATE DYNAMIC ALLOCATION   00733000
*                                         ERROR                      */ 00734000
@RC00270 LA    RETCODE,12                                       02S0273 00735000
*        END;                          /* END INVALID PARM LIST CODE */ 00736000
*      IF R15 = 4 THEN                 /* ENVIRONMENTAL ERROR ?      */ 00737000
@RF00268 C     R15,@CF00059                                     02S0275 00738000
         BNE   @RF00275                                         02S0275 00739000
*        DO;                           /* YES                        */ 00740000
*          IF S99ERROR = RCDDNFND THEN /* DDNAME NOT FOUND ?         */ 00741000
         CLC   S99ERROR(2),@CB00288                             02S0277 00742000
         BNE   @RF00277                                         02S0277 00743000
*            DA0CDARC = DRDDNFND;      /* YES,STORE ERRCODE INTO DARC*/ 00744000
         MVC   DA0CDARC(2,BLOCKPTR),@CH00181                    02S0278 00745000
*          ELSE                        /* NOT DDNAME NOT FOUND       */ 00746000
*            DA0CDARC = S99ERROR;      /* STORE DYNAMIC ALLOCATION      00747000
*                                         ERROR CODE INTO DARC       */ 00748000
         B     @RC00277                                         02S0279 00749000
@RF00277 LH    @14,S99ERROR                                     02S0279 00750000
         N     @14,@CF01193                                     02S0279 00751000
         STH   @14,DA0CDARC(,BLOCKPTR)                          02S0279 00752000
*          RETCODE = DRDYNERR;         /* INDICATE DYNAMIC ALLOCATION   00753000
*                                         ERROR                      */ 00754000
@RC00277 LA    RETCODE,12                                       02S0280 00755000
*        END;                          /* END DYNAMIC ALLOCATION        00756000
*                                         ERROR CODE                 */ 00757000
*      RESPECIFY R15 UNRESTRICTED;                              02S0282 00758000
@RF00275 DS    0H                                               02S0283 00759000
*      RESPECIFY (R0,R1) RESTRICTED;                            02S0283 00760000
*      R0 = CORESIZE;                  /* GET SIZE AND SUBPOOL       */ 00761000
         L     R0,CORESIZE                                      02S0284 00762000
*      R1 = TUP(1);                    /* GET ADDRESS OF GOTTEN CORE */ 00763000
         L     R1,TUP                                           02S0285 00764000
*      GEN ( FREEMAIN R,LV=(0),A=(1)); /* FREE CORE GOTTEN FOR TEXT     00765000
*                                         UNIT                       */ 00766000
          FREEMAIN R,LV=(0),A=(1)                                       00767000
*      RESPECIFY (R0,R1) UNRESTRICTED;                          02S0287 00768000
*    END;                              /* END PROCESSING CONCAT CODE */ 00769000
*        END;                          /* END CODE 0C                */ 00770000
@RC00244 DS    0H                                               01S0289 00771000
@RC00242 DS    0H                                               01S0290 00772000
*      IF BLOCKPTR->DAIRCODE='0010'X THEN /* IS DAIR CODE 10         */ 00773000
@RF00238 CLC   DAIRCODE(2,BLOCKPTR),@CB00161                    01S0290 00774000
         BNE   @RF00290                                         01S0290 00775000
*        DO;                           /* YES, EXECUTE CODE          */ 00776000
*/********************************************************************/ 00777000
*/*                                                                  */ 00778000
*/* SEGMENT - DAIR10                                                 */ 00779000
*/*                                                                  */ 00780000
*/* DESCRIPTIVE NAME - DAIR CODE 10 PROCESSOR                        */ 00781000
*/*                                                                  */ 00782000
*/* FUNCTION - THIS ROUTINE IS INVOKED WHEN A DAIR10 PARM BLOCK      */ 00783000
*/*            IS PASSED TO IEFDB4D0(DAIR).  DAIR10 IS INVOKED       */ 00784000
*/*            IN ORDER TO DECONCATENATE DATA SETS BY DDNAME.        */ 00785000
*/*                                                                  */ 00786000
*/* OPERATION - THE DA10DDN FIELD IS CHECKED FOR BEING BLANK.  IF    */ 00787000
*/*             BLANK, THE RETURN CODE IS SET TO 4(INVALID           */ 00788000
*/*             PARAMETER LIST) AND NO FURTHER PROCESSING IS DONE.   */ 00789000
*/*                                                                  */ 00790000
*/*             IF THE DA10DDN FIELD IS NOT BLANK, THE S99VERB       */ 00791000
*/*             CODE(IN THE DYNAMIC ALLOCATION PARM LIST) IS SET     */ 00792000
*/*             TO DECONCAT.  A TEXT UNIT IS BUILT USING THE DDNAME  */ 00793000
*/*             SUPPLIED IN THE DAIR10 PARM BLOCK(DA10DDN).          */ 00794000
*/*             DYNAMIC ALLOCATION IS THEN INVOKED.                  */ 00795000
*/*                                                                  */ 00796000
*/*             THE RETURN CODE(IN REG15) FROM DYNAMIC ALLOCATION    */ 00797000
*/*             IS THEN EXAMINED.                                    */ 00798000
*/*                                                                  */ 00799000
*/*             IF R15 = 4, THE S99ERROR CODE IS TESTED FOR RCDCONDD */ 00800000
*/*             (DECONCATENATION WOULD CAUSE DUPLICATE DDNAMES).  IF */ 00801000
*/*             THE S99ERROR WAS RCDCONDD, THE DA10DARC FIELD IS SET */ 00802000
*/*             TO DRDUPEDD.  IF THE S99ERROR CODE WASN'T RCDCONDD,  */ 00803000
*/*             BUT WAS RCDDNFND (DDNAME NOT FOUND), THE DA10DARC IS */ 00804000
*/*             SET TO DRDDNFND.  IF NONE OF THE ABOVE, THE S99ERROR */ 00805000
*/*             CODE IS STORED IN THE DA10DARC.  THE RETURN CODE IS  */ 00806000
*/*             SET TO 12(DYNAMIC ALLOCATION ERROR) FOR ANY OF THE   */ 00807000
*/*             ABOVE CONDITIONS.                                    */ 00808000
*/*                                                                  */ 00809000
*/*             IF R15 = 8(REQUEST DENIED BY INSTALLATION EXIT),THE  */ 00810000
*/*             RETURN CODE SET TO 52.                               */ 00811000
*/*                                                                  */ 00812000
*/*             IF R15 = 12(INVALID PARAMETER LIST) THE S99ERROR     */ 00813000
*/*             FIELD IS STORED INTO DA10DARC AND THE RETURN CODE    */ 00814000
*/*             IS SET TO 4.                                         */ 00815000
*/*                                                                  */ 00816000
*/* ENTRY - DAIR10(INCLUDED SEGMENT)                                 */ 00817000
*/*                                                                  */ 00818000
*/* INPUT DATA - DAIR10 PARM BLOCK, SVC99 PARM LIST                  */ 00819000
*/*                                                                  */ 00820000
*/* EXITS - ALL ARE TO NEXT SEQUENTIAL INSTRUCTION                   */ 00821000
*/*                                                                  */ 00822000
*/*  NORMAL -                                                        */ 00823000
*/*   RETURN CODE - REG15 SET TO ZERO(SUCCESSFUL DECONCATENATION)    */ 00824000
*/*                                                                  */ 00825000
*/*  ERROR -                                                         */ 00826000
*/*   RETURN CODE - REG15 IS SET TO ONE OF THE FOLLOWING             */ 00827000
*/*                 4 - INVALID PARAMETER LIST                       */ 00828000
*/*                12 - DYNAMIC ALLOCATION ERROR                     */ 00829000
*/*                52 - REQUEST DENIED BY INSTALLATION EXIT          */ 00830000
*/*                                                                  */ 00831000
*/********************************************************************/ 00832000
*DA10DARC = 0;                         /* ZERO DARC FILED            */ 00833000
         SLR   @08,@08                                          02S0292 00834000
         STH   @08,DA10DARC(,BLOCKPTR)                          02S0292 00835000
*IF DA10DDN(1) = ' ' THEN              /* WAS DDNAME SUPPLIED        */ 00836000
         CLI   DA10DDN(BLOCKPTR),C' '                           02S0293 00837000
         BNE   @RF00293                                         02S0293 00838000
*  RETCODE = DRINVLST;                 /* YES, RETURN 4(INVALID PARM)*/ 00839000
         LA    RETCODE,4                                        02S0294 00840000
*ELSE                                  /* PARM LIST VALID            */ 00841000
*  DO;                                 /* PROCESS DECONCAT REQUEST   */ 00842000
         B     @RC00293                                         02S0295 00843000
@RF00293 DS    0H                                               02S0296 00844000
*    S99VERB = S99VRBDC;               /* SET VERB CODE TO DECONCAT  */ 00845000
*                                                               02S0296 00846000
*                                                               02S0296 00847000
         MVI   S99VERB,X'04'                                    02S0296 00848000
*       DO;                                                     02S0297 00849000
*         TUP(1) = ADDR(TU(1));                                 02S0298 00850000
         LA    @08,TU                                           02S0298 00851000
         ST    @08,TUP                                          02S0298 00852000
*         TUP(1)->S99TUKEY = DDCDDNAM;                          02S0299 00853000
         MVC   S99TUKEY(2,@08),@CB00894                         02S0299 00854000
*         TUP(1)->S99TUNUM = 1;                                 02S0300 00855000
         MVC   S99TUNUM(2,@08),@CH00035                         02S0300 00856000
*         TUP(1)->S99TULNG = LENGTH(DA10DDN);                   02S0301 00857000
         MVC   S99TULNG(2,@08),@CH00048                         02S0301 00858000
*         TUP(1)->S99TUPAR(1:LENGTH(DA10DDN)) = DA10DDN;        02S0302 00859000
         MVC   S99TUPAR(8,@08),DA10DDN(BLOCKPTR)                02S0302 00860000
*       END;                                                    02S0303 00861000
*                                                               02S0303 00862000
*     TUP(1) = TUP(1) | '80000000'X;                            02S0304 00863000
         O     @08,@CF01105                                     02S0304 00864000
         ST    @08,TUP                                          02S0304 00865000
*    R1 = ADDR(S99RBPTR);              /* GET PARM PTR ADDRESS       */ 00866000
*                                                               02S0305 00867000
         LA    R1,S99RBPTR                                      02S0305 00868000
*     /*MACDATE Y-2 73082*/                                     02S0306 00869000
*     SVC (99);                                                 02S0306 00870000
         SVC   99                                               02S0306 00871000
*    RESPECIFY R15 RESTRICTED;         /* RESTRICT REG15 USAGE       */ 00872000
*    IF R15 = 4 THEN                   /* ENVIRONMENTAL ERROR ?      */ 00873000
         C     R15,@CF00059                                     02S0308 00874000
         BNE   @RF00308                                         02S0308 00875000
*      DO;                             /* YES, EXAMINE S99ERROR CODE */ 00876000
*        IF S99ERROR = RCDCONDD THEN   /* WOULD DECONCAT CAUSE  02S0310 00877000
*                                         DUPLICATE DDNAMES          */ 00878000
         CLC   S99ERROR(2),@CB00284                             02S0310 00879000
         BNE   @RF00310                                         02S0310 00880000
*          DA10DARC = DRDUPEDD;        /* SET ERROR CODE IN DARC     */ 00881000
         MVC   DA10DARC(2,BLOCKPTR),@CH00183                    02S0311 00882000
*        ELSE                          /* S99ERROR IS NOT RCDCONDD   */ 00883000
*          IF S99ERROR = RCDDNFND THEN /* DDNAME NOT FOUND ?         */ 00884000
         B     @RC00310                                         02S0312 00885000
@RF00310 CLC   S99ERROR(2),@CB00288                             02S0312 00886000
         BNE   @RF00312                                         02S0312 00887000
*            DA10DARC = DRDDNFND;      /* SET ERROR CODE IN DARC     */ 00888000
         MVC   DA10DARC(2,BLOCKPTR),@CH00181                    02S0313 00889000
*          ELSE                        /* S99ERROR IS NOT RCDDNFND   */ 00890000
*            DA10DARC = S99ERROR;      /* STORE DYNAMIC ALLOCATION      00891000
*                                         ERROR CODE IN DARC         */ 00892000
         B     @RC00312                                         02S0314 00893000
@RF00312 LH    @14,S99ERROR                                     02S0314 00894000
         N     @14,@CF01193                                     02S0314 00895000
         STH   @14,DA10DARC(,BLOCKPTR)                          02S0314 00896000
*        RETCODE = DRDYNERR;           /* INDICATE DYNAMIC ALLOCATION   00897000
*                                         ERROR                      */ 00898000
@RC00312 DS    0H                                               02S0315 00899000
@RC00310 LA    RETCODE,12                                       02S0315 00900000
*      END;                            /* END ENVIRONMENTAL ERR CODE */ 00901000
*    IF R15 = 8 THEN                   /* WAS REQUEST DENIED BY 02S0317 00902000
*                                         INSTALLATION EXIT ?        */ 00903000
@RF00308 C     R15,@CF00048                                     02S0317 00904000
         BNE   @RF00317                                         02S0317 00905000
*      RETCODE = DRREQDEN;             /* YES,SET RETURN CODE        */ 00906000
         LA    RETCODE,52                                       02S0318 00907000
*    IF R15  = 12 THEN                 /* INVALID DYNAMIC ALLOCATION    00908000
*                                         PARM LIST ?                */ 00909000
@RF00317 C     R15,@CF00034                                     02S0319 00910000
         BNE   @RF00319                                         02S0319 00911000
*      DO;                             /* YES, RETURN S99ERROR       */ 00912000
*        DA10DARC = S99ERROR;          /* STORE DYNAMIC ALLOCATION      00913000
*                                         ERROR CODE IN DARC         */ 00914000
         LH    @14,S99ERROR                                     02S0321 00915000
         N     @14,@CF01193                                     02S0321 00916000
         STH   @14,DA10DARC(,BLOCKPTR)                          02S0321 00917000
*        RETCODE = DRDYNERR;           /* INDICATE DYNAMIC      02S0322 00918000
*                                         ALLOCATION ERROR           */ 00919000
         LA    RETCODE,12                                       02S0322 00920000
*      END;                            /* END INVALID PARM LIST CODE */ 00921000
*    RESPECIFY R15 UNRESTRICTED;                                02S0324 00922000
@RF00319 DS    0H                                               02S0325 00923000
*  END;                                /* END DECONCAT REQUEST  02S0325 00924000
*                                         PROCESSING                 */ 00925000
*        END;                          /* END CODE 10                */ 00926000
@RC00293 DS    0H                                               01S0327 00927000
*      IF BLOCKPTR->DAIRCODE='0014'X & /* IS DAIR CODE 14            */ 00928000
*         DAPLDAPB->DAIRCODE^='0028'X THEN                      01S0327 00929000
@RF00290 CLC   DAIRCODE(2,BLOCKPTR),@CB00163                    01S0327 00930000
         BNE   @RF00327                                         01S0327 00931000
         L     @08,DAPLDAPB(,DAPLPTR)                           01S0327 00932000
         CLC   DAIRCODE(2,@08),@CB00173                         01S0327 00933000
         BE    @RF00327                                         01S0327 00934000
*        DO;                           /* YES, EXECUTE CODE          */ 00935000
*/********************************************************************/ 00936000
*/*                                                                  */ 00937000
*/* SEGMENT NAME - DAIR14                                            */ 00938000
*/*                                                                  */ 00939000
*/* DESCRIPTIVE NAME - DAIR ENTRY CODE 14 PROCESSING                 */ 00940000
*/*                                                                  */ 00941000
*/* FUNCTION - TO PERFORM DAIR ENTRY CODE 14 PROCESSING, I.E., RETURN*/ 00942000
*/*   LOW LEVEL QUALIFIERS FOR THE INPUT DSNAME.                     */ 00943000
*/*                                                                  */ 00944000
*/*   OPERATION - DETERMINE THE VALIDITY OF THE INPUT PARAMETER LIST.*/ 00945000
*/*     IF IT IS INCORRECT, SET RETURN CODE 4. IF THE PARAMETERS ARE */ 00946000
*/*     CORRECT, INVOKE THE DSNCHECK ROUTINE TO PREFIX THE USERID TO */ 00947000
*/*     THE DSNAME IF NECESSARY. AN ERROR FROM THE ROUTINE CAUSES    */ 00948000
*/*     PROCESSING TO TERMINATE. IF NO ERROR OCCURRED, THE NUMBER OF */ 00949000
*/*     QUALIFIERS WHICH WILL FIT IN THE RETURN AREA PASSED BY THE   */ 00950000
*/*     USER IS DETERMINED, AND THE ENTIRE RETURN AREA IS ZEROED.    */ 00951000
*/*     CORE IS THEN OBTAINED FOR A WORK AREA INTO WHICH IKJEHCIR    */ 00952000
*/*     (CIR) CAN RETURN THE LEVELS.  (A GETMAIN IS NECESSARY SINCE  */ 00953000
*/*     EACH ENTRY RETURNED BY CIR CONTAINS AN IDENTIFIER AND THE    */ 00954000
*/*     LEVEL, WHILE THE DAIR RETURN AREA CONTAINS ONLY A LEVEL.)    */ 00955000
*/*     THE CIR PARAMETER LIST IS INITIALIZED AND IKJEHCIR IS        */ 00956000
*/*     INVOKED. IF THE CIR RETURN CODE IS ZERO OR FOUR, MOVE ALL    */ 00957000
*/*     THE LEVELS FROM THE CIR RETURN AREA TO THE DAIR RETURN       */ 00958000
*/*     AREA.  IF THE CIR RETURN CODE IS FOUR AND THE LOCATE         */ 00959000
*/*     RETURN CODE IS 44 (AREA PROVIDED IS NOT LARGE                */ 00960000
*/*     ENOUGH TO CONTAIN ALL THE LEVELS), SET THE DAIR RETURN       */ 00961000
*/*     CODE TO 40.   FOR ALL OTHER CIR RETURN CODES SET THE         */ 00962000
*/*     DAIR RETURN CODE TO 36.                                      */ 00963000
*/*     IN ALL CASES, THE CIR WORK AREA IS FREED.                    */ 00964000
*/*                                                                  */ 00965000
*/* INPUT - DAIR14 PARAMETER BLOCK                                   */ 00966000
*/*                                                                  */ 00967000
*/* OUTPUT - RETURN AREA OF DAIR14 PARAMETER BLOCK FILLED IN WITH    */ 00968000
*/*          THE RETURNED LEVELS.                                    */ 00969000
*/*          THE DAIR RETURN CODE IS SET TO FORTY IF THE DAIR14      */ 00970000
*/*          RETURN AREA IS NOT LARGE ENOUGH FOR ALL THE LEVELS.     */ 00971000
*/*          THE DAIR RETURN CODE IS SET TO FOUR FOR AN INVALID      */ 00972000
*/*          PARAMETER LIST.                                         */ 00973000
*/*          THE DAIR RETURN CODE IS SET TO THIRTY-SIX IF AN ERROR   */ 00974000
*/*          WAS ENCOUNTERED BY THE IKJEHCIR ROUTINE.                */ 00975000
*/********************************************************************/ 00976000
*CALL DSNCHECK(DA14CTL,DA14PDSN);      /*VALIDATE INPUT DSNAME       */ 00977000
         LA    @08,DA14CTL(,BLOCKPTR)                           02S0329 00978000
         ST    @08,@AL00001                                     02S0329 00979000
         LA    @08,DA14PDSN(,BLOCKPTR)                          02S0329 00980000
         ST    @08,@AL00001+4                                   02S0329 00981000
         LA    @01,@AL00001                                     02S0329 00982000
         BAL   @14,DSNCHECK                                     02S0329 00983000
*RESPECIFY R15 RESTRICTED;             /*RESTRICT REG 15 USAGE       */ 00984000
*IF R15^=ZERO THEN                     /*ANY ERROR                   */ 00985000
         LTR   R15,R15                                          02S0331 00986000
         BZ    @RF00331                                         02S0331 00987000
*  RETCODE=4;                          /*YES, SET DAIR RETURN CODE   */ 00988000
         LA    RETCODE,4                                        02S0332 00989000
*ELSE                                                           02S0333 00990000
*  DO;                                 /*NO, CONTINUE PARM CHECK     */ 00991000
         B     @RC00331                                         02S0333 00992000
@RF00331 DS    0H                                               02S0334 00993000
*    RESPECIFY R15 UNRESTRICTED;       /*RELEASE REG 15 USAGE        */ 00994000
*    IF DSNBUF(1)=' ' |                /*DSNAME NOT SPECIFIED        */ 00995000
*       DA14PRET=ZERO |                /*RETURN AREA NOT SPECIFIED   */ 00996000
*       DA14QLEN<8 THEN                /*RETURN AREA FOR LESS THAN      00997000
*                                        ONE LEVEL OF QUALIFICATION  */ 00998000
         CLI   DSNBUF,C' '                                      02S0335 00999000
         BE    @RT00335                                         02S0335 01000000
         L     @08,DA14PRET(,BLOCKPTR)                          02S0335 01001000
         LTR   @08,@08                                          02S0335 01002000
         BZ    @RT00335                                         02S0335 01003000
         LH    @08,DA14QLEN(,@08)                               02S0335 01004000
         C     @08,@CF00048                                     02S0335 01005000
         BNL   @RF00335                                         02S0335 01006000
@RT00335 DS    0H                                               02S0336 01007000
*      RETCODE=4;                      /*SET DAIR RETURN CODE        */ 01008000
         LA    RETCODE,4                                        02S0336 01009000
*    ELSE                                                       02S0337 01010000
*      DO;                             /*PARAMETER LIST IS VALID     */ 01011000
         B     @RC00335                                         02S0337 01012000
@RF00335 DS    0H                                               02S0338 01013000
*        NUMLEVEL=DA14QLEN/8;          /*NUMBER OF LEVELS WHICH CAN     01014000
*                                        BE PLACED IN USER AREA      */ 01015000
         L     @06,DA14PRET(,BLOCKPTR)                          02S0338 01016000
         LH    @06,DA14QLEN(,@06)                               02S0338 01017000
         LR    @00,@06                                          02S0338 01018000
         SRDA  @00,32                                           02S0338 01019000
         D     @00,@CF00048                                     02S0338 01020000
         LR    NUMLEVEL,@01                                     02S0338 01021000
*        RTRNLEN=DA14QLEN;             /*LENGTH OF DAIR14 RETURN AREA   01022000
*                                        WHICH WILL BE OVERLAYED BY     01023000
*                                        FIRST QUALIFIER RETURNED    */ 01024000
         LR    RTRNLEN,@06                                      02S0339 01025000
*        DO I=1 BY 256 WHILE(RTRNLEN>ZERO); /*CLEAR DAIR14 RETRN AREA*/ 01026000
         LA    I,1                                              02S0340 01027000
         B     @DE00340                                         02S0340 01028000
@DL00340 DS    0H                                               02S0341 01029000
*          DA14AREA(I:I+MIN(RTRNLEN,256))=                      02S0341 01030000
*          DA14AREA(I:I+MIN(RTRNLEN,256))  &&                   02S0341 01031000
*          DA14AREA(I:I+MIN(RTRNLEN,256));                      02S0341 01032000
         L     @04,DA14PRET(,BLOCKPTR)                          02S0341 01033000
         ALR   @04,I                                            02S0341 01034000
         BCTR  @04,0                                            02S0341 01035000
         LA    @15,256                                          02S0341 01036000
         LR    @14,@15                                          02S0341 01037000
         CR    @14,RTRNLEN                                      02S0341 01038000
         BNH   *+6                                                      01039000
         LR    @14,RTRNLEN                                      02S0341 01040000
         EX    @14,@SX01194                                     02S0341 01041000
*          RTRNLEN=RTRNLEN-256;        /*DECREMENT CHARS MOVED BY THE   01042000
*                                        MAXIMUM LENGTH              */ 01043000
         SLR   RTRNLEN,@15                                      02S0342 01044000
*        END;                                                   02S0343 01045000
         AL    I,@CF01110                                       02S0343 01046000
@DE00340 LTR   RTRNLEN,RTRNLEN                                  02S0343 01047000
         BP    @DL00340                                         02S0343 01048000
*        CIRPARMS=CIRPARMS&&CIRPARMS;  /*ZERO IKJEFCIR(CIR) PARM LIST*/ 01049000
         XC    CIRPARMS(100),CIRPARMS                           02S0344 01050000
*        CORELEN=LENGTH(CIRHDR)+(NUMLEVEL*LENGTH(CIRENT))+1; /*LENGTH   01051000
*                                        OF CIR WORK AREA VARIES BASED  01052000
*                                        ON THE SIZE OF THE DAIR14 AREA 01053000
*                                                            @ZA10507*/ 01054000
         LR    @04,NUMLEVEL                                     02S0345 01055000
         MH    @04,@CH00032                                     02S0345 01056000
         AL    @04,@CF01104                                     02S0345 01057000
         ST    @04,CORELEN                                      02S0345 01058000
*        RFY (R0,R1) RESTRICTED;       /*RESTRICT REG 0 AND 1 USAGE  */ 01059000
*        R0=CORELEN;                   /*LENGTH OF AREA              */ 01060000
         LR    R0,@04                                           02S0347 01061000
*        R0=R0 | SUBPOOL1;             /*SET SUBPOOL NUMBER          */ 01062000
         O     R0,@CF00150                                      02S0348 01063000
*        CORESIZE=R0;                  /*SAVE LENGTH AND SUBPOOL FOR    01064000
*                                        FREEMAIN                    */ 01065000
         ST    R0,CORESIZE                                      02S0349 01066000
*        GEN REFS(R0) SETS(R1);        /*CORE FOR CIR RETURN AREA    */ 01067000
        GETMAIN R,LV=(0)                                                01068000
*        CIRWA=R1;                     /*PLACE ADDR IN CIR LIST      */ 01069000
         ST    R1,CIRWA                                         02S0351 01070000
*        RFY (R0,R1) UNRESTRICTED;     /*RELEASE REG 0 AND 1 USAGE   */ 01071000
*        CIRLEN=CORELEN;               /*PUT LENGTH IN RETURN ADDR   */ 01072000
         L     @04,CIRWA                                        02S0353 01073000
         L     @03,CORELEN                                      02S0353 01074000
         STH   @03,CIRLEN(,@04)                                 02S0353 01075000
*        CIROPT=DSNOPT;                /*RETURN LOW LEVEL FOR DSNAME */ 01076000
         MVI   CIROPT,X'01'                                     02S0354 01077000
*        CIRSRCH=ADDR(DSNBUF);         /*ADDR OF DSNAME FOR SEARCH   */ 01078000
         LA    @04,DSNBUF                                       02S0355 01079000
         ST    @04,CIRSRCH                                      02S0355 01080000
*        CIRSAVE=ADDR(CIRRSA);         /*ADDR OF RSA                 */ 01081000
         LA    @04,CIRRSA                                       02S0356 01082000
         ST    @04,CIRSAVE                                      02S0356 01083000
*        R1=ADDR(CIRPARMS);            /*ADDRESS OF CIR PARAMETERS   */ 01084000
         LA    R1,CIRPARMS                                      02S0357 01085000
*        GEN (LINK EP=IKJEHCIR);       /*INVOKE CIR                  */ 01086000
         LINK EP=IKJEHCIR                                               01087000
*        RFY R15 RESTRICTED;           /*RESTRICT RETURN CODE REG    */ 01088000
*        IF R15=ZERO |                 /*CIR WORK AREA HAS LEVELS    */ 01089000
*           (R15=4 & CIRLOCRC=44) THEN /*BUT NEEDED MORE ROOM        */ 01090000
         LTR   R15,R15                                          02S0360 01091000
         BZ    @RT00360                                         02S0360 01092000
         C     R15,@CF00059                                     02S0360 01093000
         BNE   @RF00360                                         02S0360 01094000
         CLI   CIRLOCRC,44                                      02S0360 01095000
         BNE   @RF00360                                         02S0360 01096000
@RT00360 DS    0H                                               02S0361 01097000
*          DO;                         /*YES,MOVE INFO TO USER AREA  */ 01098000
*            DO I=1 TO NUMLEVEL BY 1 WHILE(CIRID(I)^=FINISH);   02S0362 01099000
         LA    I,1                                              02S0362 01100000
         B     @DE00362                                         02S0362 01101000
@DL00362 L     @14,CIRWA                                        02S0362 01102000
         LR    @04,I                                            02S0362 01103000
         MH    @04,@CH00032                                     02S0362 01104000
         ST    @04,@TF00001                                     02S0362 01105000
         ALR   @04,@14                                          02S0362 01106000
         AL    @04,@CF01196                                     02S0362 01107000
         CLI   CIRID-4(@04),X'FF'                               02S0362 01108000
         BE    @DC00362                                         02S0362 01109000
*                                      /*RETURN LEVELS               */ 01110000
*              DA14LEVL(I)=CIRNAME(I); /*MOVE LEVEL TO DIAR14 AREA   */ 01111000
         LR    @04,I                                            02S0363 01112000
         SLA   @04,3                                            02S0363 01113000
         L     @03,DA14PRET(,BLOCKPTR)                          02S0363 01114000
         ALR   @03,@04                                          02S0363 01115000
         AL    @03,@CF01197                                     02S0363 01116000
         AL    @14,@TF00001                                     02S0363 01117000
         AL    @14,@CF01192                                     02S0363 01118000
         MVC   DA14LEVL(8,@03),CIRNAME-5(@14)                   02S0363 01119000
*            END;                                               02S0364 01120000
         AL    I,@CF00035                                       02S0364 01121000
@DE00362 CR    I,NUMLEVEL                                       02S0364 01122000
         BNH   @DL00362                                         02S0364 01123000
@DC00362 DS    0H                                               02S0365 01124000
*            IF R15=4 THEN             /*RETURN AREA NOT LARGE ENOUGH*/ 01125000
         C     R15,@CF00059                                     02S0365 01126000
         BNE   @RF00365                                         02S0365 01127000
*              RETCODE=DRRTAREA;       /*YES, SET DAIR RETURN CODE   */ 01128000
         LA    RETCODE,40                                       02S0366 01129000
*          END;                                                 02S0367 01130000
*        ELSE                          /*CIR RETURN NOT ZERO OR FOUR */ 01131000
*          RETCODE=DRCIRERR;           /*SET DAIR RETURN CODE        */ 01132000
         B     @RC00360                                         02S0368 01133000
@RF00360 LA    RETCODE,36                                       02S0368 01134000
*        RFY R15 UNRESTRICTED;         /*RELEASE RETURN CODE REG     */ 01135000
@RC00360 DS    0H                                               02S0370 01136000
*        RFY (R0,R1) RESTRICTED;       /*RESTRICT REG 0 AND 1 USAGE  */ 01137000
*        R0=CORESIZE;                  /*LENGTH AND SUBPOOL OF CIR      01138000
*                                        WORK AREA                   */ 01139000
         L     R0,CORESIZE                                      02S0371 01140000
*        R1=CIRWA;                     /*ADDRESS OF CIR WORK AREA    */ 01141000
         L     R1,CIRWA                                         02S0372 01142000
*        GEN (FREEMAIN R,LV=(0),A=(1)); /*FREE CIR WORK AREA         */ 01143000
         FREEMAIN R,LV=(0),A=(1)                                        01144000
*        RFY (R0,R1) UNRESTRICTED;     /*RELEASE REG 0 AND 1 USAGE   */ 01145000
*      END;                                                     02S0375 01146000
*  END;                                                         02S0376 01147000
@RC00335 DS    0H                                               02S0377 01148000
*        END;                          /* END CODE 14                */ 01149000
@RC00331 DS    0H                                               01S0378 01150000
*      IF BLOCKPTR->DAIRCODE='0018'X THEN /* IS DAIR CODE 18         */ 01151000
@RF00327 CLC   DAIRCODE(2,BLOCKPTR),@CB00165                    01S0378 01152000
         BNE   @RF00378                                         01S0378 01153000
*        DO;                           /* YES, EXECUTE CODE          */ 01154000
*/********************************************************************/ 01155000
*/*                                                                  */ 01156000
*/* SEGMENT - DAIR18                                                 */ 01157000
*/*                                                                  */ 01158000
*/* DESCRIPTIVE NAME - DAIR CODE 18 PROCESSOR                        */ 01159000
*/*                                                                  */ 01160000
*/* FUNCTION - THIS ROUTINE IS INVOKED WHEN A DAIR18 PARM BLOCK      */ 01161000
*/*            IS PASSED TO IEFDB4D0(DAIR).  DAIR18 IS INVOKED       */ 01162000
*/*            IN ORDER TO FREE A DATA SET BY DDNAME OR BY DATA      */ 01163000
*/*            SET NAME.                                             */ 01164000
*/*                                                                  */ 01165000
*/* OPERATION - THE DSNAME CHECK ROUTINE IS INVOKED TO DETERMINE     */ 01166000
*/*             IF A VALID DATA SET NAME HAS BEEN SUPPLIED.  IF      */ 01167000
*/*             THE NAME IS INVALID, THE RETURN CODE IS SET TO       */ 01168000
*/*             4(INVALID PARAMETER LIST) AND NO FURTHER PROCESSING  */ 01169000
*/*             IS DONE.                                             */ 01170000
*/*                                                                  */ 01171000
*/*             IF THE DSNAME IS VALID OR NO DSNAME WAS SPECIFIED    */ 01172000
*/*             PROCESSING CONTINUES.                                */ 01173000
*/*                                                                  */ 01174000
*/*             IF THE DSNAME IS PRESENT, A TEXT UNIT IS BUILT       */ 01175000
*/*             TO FREE BY DATA SET NAME.  A TEXT UNIT FOR MEMBER    */ 01176000
*/*             NAME IS ALSO BUILT IF MEMBER NAME IS SUPPLIED.       */ 01177000
*/*                                                                  */ 01178000
*/*             IF THE DSNAME IS NOT PRESENT,  A TEXT UNIT TO        */ 01179000
*/*             FREE BY DDNAME IS BUILT IF THE DDNAME IS PRESENT.    */ 01180000
*/*             IF THE DSNAME AND DDNAME ARE NOT PRESENT, THE        */ 01181000
*/*             RETURN CODE IS SET TO 4.  NO FURTHER PROCESSING      */ 01182000
*/*             IS THEN DONE.                                        */ 01183000
*/*                                                                  */ 01184000
*/*             IF AN OVERRIDING DISPOSITION WAS SUPPLIED IN THE     */ 01185000
*/*             DAIR18 PARM BLOCK, A TEXT UNIT IS BUILT FOR THIS     */ 01186000
*/*             PARAMETER.                                           */ 01187000
*/*                                                                  */ 01188000
*/*             IF THE DA18PERM BIT IN DA18CTL IS ON, A TEXT         */ 01189000
*/*             UNIT SPECIFYING FREE PERMANENTLY ALLOCATED DATA      */ 01190000
*/*             SETS IS BUILT.                                       */ 01191000
*/*                                                                  */ 01192000
*/*             IF THE SYSOUT CLASS WAS SPECIFIED, A TEXT UNIT       */ 01193000
*/*             SPECIFYING THE SYSOUT CLASS IS BUILT.                */ 01194000
*/*                                                                  */ 01195000
*/*             DYNAMIC ALLOCATION IS NOW INVOKED TO DO THE          */ 01196000
*/*             UNALLOCATION.                                        */ 01197000
*/*                                                                  */ 01198000
*/*             UPON RETURN, THE RETURN CODE IN REG 15 IS TESTED     */ 01199000
*/*             TO DETERMINE IF AN ERROR OCCURRED.  THE FOLLOWING    */ 01200000
*/*             TESTS ARE DONE.                                      */ 01201000
*/*                                                                  */ 01202000
*/*             IF R15 = 0 AND S99INFO CODE IS NON-ZERO(^=0), A      */ 01203000
*/*             BIT IN DA18FLG(DA18FPE) IS TURNED ON AND THE         */ 01204000
*/*             S99INFO DATA IS STORED IN THE DARC.                  */ 01205000
*/*                                                                  */ 01206000
*/*             IF AN ENVIRONMENTAL ERROR WAS FOUND(R15=4), THE      */ 01207000
*/*             S99ERROR FIELD IS EXAMINED FOR DDNAME AND            */ 01208000
*/*             DSNAME NOT FOUND.  IF EITHER  IS FOUND, THE          */ 01209000
*/*             DAIR RETURN CODE IS SET TO 28.  IF THE DSNAME WAS    */ 01210000
*/*             A MEMBER OF A PERMANENTLY CONCATENATED GROUP,        */ 01211000
*/*             THE DAIR RETURN CODE IS SET TO 24. IF DECONCATENATION*/ 01212000
*/*             WOULD CREATE DUPLICATE DDNAMES THE DAIR RETURN CODE  */ 01213000
*/*             IS SET TO 12 AND DRDUPEDD IS STORED IN THE DA18DARC  */ 01214000
*/*             FIELD.  IF THE DAIR RETURN CODE IS UNDETERMINED      */ 01215000
*/*             AFTER THE ABOVE TESTS, THE RETURN CODE IS SET TO     */ 01216000
*/*             12 AND THE S99ERROR DATA STORED IN DA18DARC.         */ 01217000
*/*                                                                  */ 01218000
*/*             IF R15 = 8(REQUEST DENIED BY INSTALLATION EXIT),     */ 01219000
*/*             THE DAIR RETURN CODE IS SET TO 52.                   */ 01220000
*/*                                                                  */ 01221000
*/*             IF R15 = 12(INVALID PARM LIST), THE S99ERROR FIELD   */ 01222000
*/*             IS TESTED FOR INVALID PARM IN TEXT.  IF              */ 01223000
*/*             INVALID PARM, THE S99INFO FIELD IS TESTED TO         */ 01224000
*/*             DETERMINE IF THE ERROR WAS IN OVERRIDING SYSOUT      */ 01225000
*/*             CLASS OR INVALID DISPOSITION.  IF SYSOUT CLASS,      */ 01226000
*/*             THE DARC IS SET TO DRSYSCLS.  IF INVALID DISPOSITION,*/ 01227000
*/*             THE DARC IS SET TO DRDSPINV.  IN EITHER CASE, THE    */ 01228000
*/*             DAIR RETURN CODE IS SET TO 12.                       */ 01229000
*/*                                                                  */ 01230000
*/* ENTRY - DAIR18(INCLUDED SEGMENT)                                 */ 01231000
*/*                                                                  */ 01232000
*/* INPUT DATA - DAIR18 PARM BLOCK, SVC99 PARM LIST                  */ 01233000
*/*                                                                  */ 01234000
*/* EXITS - ALL ARE TO NEXT SEQUENTIAL INSTRUCTION                   */ 01235000
*/*                                                                  */ 01236000
*/*  NORMAL -                                                        */ 01237000
*/*                                                                  */ 01238000
*/*   OUTPUT - REG 15 SET TO 0, IF SECONDARY ERROR REG 15 IS SET     */ 01239000
*/*            TO 12 AND S99INFO DATA IS STORED IN DA18DARC, AND     */ 01240000
*/*            DA18FPE IS SET ON.                                    */ 01241000
*/*                                                                  */ 01242000
*/*   RETURN CODE - 0 - SUCCESSFUL UNALLOCATION                      */ 01243000
*/*                                                                  */ 01244000
*/*  ERROR -                                                         */ 01245000
*/*                                                                  */ 01246000
*/*   OUTPUT - DA18DARC (SEE OPERATION TEXT)                         */ 01247000
*/*                                                                  */ 01248000
*/*   RETURN CODE - THE FOLLOWING RETURN CODES ARE ISSUED            */ 01249000
*/*                 4 - INVALID PARM LIST                            */ 01250000
*/*                12 - ERROR IN DYNAMIC ALLOCATION                  */ 01251000
*/*                24 - DSNAME REQUESTED IS MEMBER OF CONCAT GROUP   */ 01252000
*/*                28 - DDNAME OR DSNAME NOT CURRENTLY               */ 01253000
*/*                     ALLOCATED                                    */ 01254000
*/*                52 - REQUEST FAILED BY INSTALLATION EXIT          */ 01255000
*/*                                                                  */ 01256000
*/*   OUTPUT - DA18DARC (SEE OPERATION TEXT)                         */ 01257000
*/*                                                                  */ 01258000
*/* CHANGE LEVEL - OZ06629                                           */ 01259000
*/*                                                                  */ 01260000
*/********************************************************************/ 01261000
*DA18DARC = 0;                         /* ZERO DARC FIELD            */ 01262000
         SLR   @08,@08                                          02S0380 01263000
         STH   @08,DA18DARC(,BLOCKPTR)                          02S0380 01264000
*DA18CTRC = 0;                         /* ZERO CTRC FIELD            */ 01265000
         STH   @08,DA18CTRC(,BLOCKPTR)                          02S0381 01266000
*DA18FLG = 0;                          /* ZERO FLAG FIELD            */ 01267000
         STH   @08,DA18FLG(,BLOCKPTR)                           02S0382 01268000
*S99VERB = S99VRBUN;                   /* SET VERB CODE TO UNALLOC   */ 01269000
*                                                               02S0383 01270000
         MVI   S99VERB,X'02'                                    02S0383 01271000
*CALL DSNCHECK(DA18CTL,DA18PDSN);      /* VALIDITY CHECK DSNAME      */ 01272000
         LA    @08,DA18CTL(,BLOCKPTR)                           02S0384 01273000
         ST    @08,@AL00001                                     02S0384 01274000
         LA    @08,DA18PDSN(,BLOCKPTR)                          02S0384 01275000
         ST    @08,@AL00001+4                                   02S0384 01276000
         LA    @01,@AL00001                                     02S0384 01277000
         BAL   @14,DSNCHECK                                     02S0384 01278000
*RETCODE = R15;                        /* SAVE RET CODE FROM DSNCHECK*/ 01279000
         LR    RETCODE,R15                                      02S0385 01280000
*IF RETCODE = 0 THEN                   /* IS DSNAME VALID ?          */ 01281000
         LTR   RETCODE,RETCODE                                  02S0386 01282000
         BNZ   @RF00386                                         02S0386 01283000
*  IF DSNBUF(1) ^= ' ' THEN            /* YES, WAS DSNAME SUPPLIED ? */ 01284000
         CLI   DSNBUF,C' '                                      02S0387 01285000
         BE    @RF00387                                         02S0387 01286000
*    DO;                               /* YES, DSNAME SUPPLIED       */ 01287000
*                                                               02S0388 01288000
*         DO;                                                   02S0389 01289000
*           TUP(1) = ADDR(TUDSN);                               02S0390 01290000
         LA    @08,TUDSN                                        02S0390 01291000
         ST    @08,TUP                                          02S0390 01292000
*           TUP(1)->S99TUKEY = DUNDSNAM;                        02S0391 01293000
         MVC   S99TUKEY(2,@08),@CB00896                         02S0391 01294000
*           TUP(1)->S99TUNUM = 1;                               02S0392 01295000
         LA    @04,1                                            02S0392 01296000
         STCM  @04,3,S99TUNUM(@08)                              02S0392 01297000
*           TUP(1)->S99TULNG = LENGTH(DSNBUF);                  02S0393 01298000
         MVC   S99TULNG(2,@08),@CH00092                         02S0393 01299000
*           TUP(1)->S99TUPAR(1:LENGTH(DSNBUF)) = DSNBUF;        02S0394 01300000
         MVC   S99TUPAR(44,@08),DSNBUF                          02S0394 01301000
*         END;                                                  02S0395 01302000
*                                                               02S0395 01303000
*       IF DA18MNM^=' ' THEN                                    02S0396 01304000
         CLI   DA18MNM(BLOCKPTR),C' '                           02S0396 01305000
         BE    @RF00396                                         02S0396 01306000
*         DO;                                                   02S0397 01307000
*           TUP(2) = ADDR(TU(2));                               02S0398 01308000
         LA    @08,TU+14                                        02S0398 01309000
         ST    @08,TUP+4                                        02S0398 01310000
*           TUP(2)->S99TUKEY = DUNMEMBR;                        02S0399 01311000
         MVC   S99TUKEY(2,@08),@CB00898                         02S0399 01312000
*           TUP(2)->S99TUNUM = 1;                               02S0400 01313000
         STCM  @04,3,S99TUNUM(@08)                              02S0400 01314000
*           TUP(2)->S99TULNG = LENGTH(DA18MNM);                 02S0401 01315000
         MVC   S99TULNG(2,@08),@CH00048                         02S0401 01316000
*           TUP(2)->S99TUPAR(1:LENGTH(DA18MNM)) = DA18MNM;      02S0402 01317000
         MVC   S99TUPAR(8,@08),DA18MNM(BLOCKPTR)                02S0402 01318000
*         END;                                                  02S0403 01319000
*    END;                              /* END BUILDING TEXT UNITS    */ 01320000
*  ELSE                                /* DSNAME NOT SUPPLIED        */ 01321000
*    IF DA18DDN(1) ^= ' ' THEN         /* WAS DDNAME SUPPLIED ?      */ 01322000
*                                                               02S0405 01323000
         B     @RC00387                                         02S0405 01324000
@RF00387 CLI   DA18DDN(BLOCKPTR),C' '                           02S0405 01325000
         BE    @RF00405                                         02S0405 01326000
*         DO;                                                   02S0406 01327000
*           TUP(2) = ADDR(TU(2));                               02S0407 01328000
         LA    @08,TU+14                                        02S0407 01329000
         ST    @08,TUP+4                                        02S0407 01330000
*           TUP(2)->S99TUKEY = DUNDDNAM;                        02S0408 01331000
         MVC   S99TUKEY(2,@08),@CB00894                         02S0408 01332000
*           TUP(2)->S99TUNUM = 1;                               02S0409 01333000
         MVC   S99TUNUM(2,@08),@CH00035                         02S0409 01334000
*           TUP(2)->S99TULNG = LENGTH(DA18DDN);                 02S0410 01335000
         MVC   S99TULNG(2,@08),@CH00048                         02S0410 01336000
*           TUP(2)->S99TUPAR(1:LENGTH(DA18DDN)) = DA18DDN;      02S0411 01337000
         MVC   S99TUPAR(8,@08),DA18DDN(BLOCKPTR)                02S0411 01338000
*         END;                                                  02S0412 01339000
*    ELSE                              /* DSNAME & DDNAME NOT PRESENT*/ 01340000
*      RETCODE = DRINVLST;             /* SET INVALID PARM LIST 02S0413 01341000
*                                         RETURN CODE                */ 01342000
         B     @RC00405                                         02S0413 01343000
@RF00405 LA    RETCODE,4                                        02S0413 01344000
*IF RETCODE = 0 THEN                   /* ANY ERROR FOUND ?          */ 01345000
@RC00405 DS    0H                                               02S0414 01346000
@RC00387 DS    0H                                               02S0414 01347000
@RF00386 LTR   RETCODE,RETCODE                                  02S0414 01348000
         BNZ   @RF00414                                         02S0414 01349000
*  DO;                                 /* NO ERROR                   */ 01350000
*                                                               02S0415 01351000
*     IF DA18DPS2^=ZERO THEN                                    02S0416 01352000
         CLI   DA18DPS2(BLOCKPTR),0                             02S0416 01353000
         BE    @RF00416                                         02S0416 01354000
*       DO;                                                     02S0417 01355000
*         TUP(3) = ADDR(TU(3));                                 02S0418 01356000
         LA    @08,TU+28                                        02S0418 01357000
         ST    @08,TUP+8                                        02S0418 01358000
*         TUP(3)->S99TUKEY = DUNOVDSP;                          02S0419 01359000
         MVC   S99TUKEY(2,@08),@CB00901                         02S0419 01360000
*         TUP(3)->S99TUNUM = 1;                                 02S0420 01361000
         LA    @04,1                                            02S0420 01362000
         STCM  @04,3,S99TUNUM(@08)                              02S0420 01363000
*         TUP(3)->S99TULNG = LENGTH(DA18DPS2);                  02S0421 01364000
         STCM  @04,3,S99TULNG(@08)                              02S0421 01365000
*         TUP(3)->S99TUPAR(1:LENGTH(DA18DPS2)) = DA18DPS2;      02S0422 01366000
         MVC   S99TUPAR(1,@08),DA18DPS2(BLOCKPTR)               02S0422 01367000
*       END;                                                    02S0423 01368000
*                                                               02S0423 01369000
*     IF DA18PERM^='0'B THEN                                    02S0424 01370000
@RF00416 TM    DA18PERM(BLOCKPTR),B'00010000'                   02S0424 01371000
         BZ    @RF00424                                         02S0424 01372000
*       DO;                                                     02S0425 01373000
*         TUP(4) = ADDR(TU(4));                                 02S0426 01374000
         LA    @08,TU+42                                        02S0426 01375000
         ST    @08,TUP+12                                       02S0426 01376000
*         TUP(4)->S99TUKEY = DUNUNALC;                          02S0427 01377000
         MVC   S99TUKEY(2,@08),@CB00905                         02S0427 01378000
*         TUP(4)->S99TUNUM = 0;                                 02S0428 01379000
         SLR   @04,@04                                          02S0428 01380000
         STCM  @04,3,S99TUNUM(@08)                              02S0428 01381000
*         TUP(4)->S99TULNG = 0;                                 02S0429 01382000
         STCM  @04,3,S99TULNG(@08)                              02S0429 01383000
*       END;                                                    02S0430 01384000
*    IF DA18SCLS(1)^=' ' & DA18SCLS(1)^='00'X THEN /*SYSOUT CLASS       01385000
*                                        1ST CHAR?           @ZA06629*/ 01386000
*                                                               02S0431 01387000
@RF00424 CLI   DA18SCLS(BLOCKPTR),C' '                          02S0431 01388000
         BE    @RF00431                                         02S0431 01389000
         CLI   DA18SCLS(BLOCKPTR),X'00'                         02S0431 01390000
         BE    @RF00431                                         02S0431 01391000
*         DO;                                                   02S0432 01392000
*           TUP(5) = ADDR(TU(5));                               02S0433 01393000
         LA    @08,TU+56                                        02S0433 01394000
         ST    @08,TUP+16                                       02S0433 01395000
*           TUP(5)->S99TUKEY = DUNOVCLS;                        02S0434 01396000
         MVC   S99TUKEY(2,@08),@CB00165                         02S0434 01397000
*           TUP(5)->S99TUNUM = 1;                               02S0435 01398000
         LA    @04,1                                            02S0435 01399000
         STCM  @04,3,S99TUNUM(@08)                              02S0435 01400000
*           TUP(5)->S99TULNG = 1;                               02S0436 01401000
         STCM  @04,3,S99TULNG(@08)                              02S0436 01402000
*           TUP(5)->S99TUPAR(1:1) = DA18SCLS;                   02S0437 01403000
         MVC   S99TUPAR(1,@08),DA18SCLS(BLOCKPTR)               02S0437 01404000
*         END;                                                  02S0438 01405000
*                                                               02S0438 01406000
*     TUP(5) = TUP(5) | '80000000'X;                            02S0439 01407000
@RF00431 L     @08,TUP+16                                       02S0439 01408000
         O     @08,@CF01105                                     02S0439 01409000
         ST    @08,TUP+16                                       02S0439 01410000
*    R1 = ADDR(S99RBPTR);              /* GET PARM PTR ADDRESS       */ 01411000
*                                                               02S0440 01412000
         LA    R1,S99RBPTR                                      02S0440 01413000
*     /*MACDATE Y-2 73082*/                                     02S0441 01414000
*     SVC (99);                                                 02S0441 01415000
         SVC   99                                               02S0441 01416000
*    RESPECIFY R15 RESTRICTED;         /* RESTRICT REG15 USAGE       */ 01417000
*    IF R15 = 0                        /* WAS DATA SET UNALLOCATED ? */ 01418000
*      & S99INFO ^= 0 THEN             /* YES, WAS THERE A SECONDARY    01419000
*                                         ERROR ?                    */ 01420000
         SLR   @14,@14                                          02S0443 01421000
         CR    R15,@14                                          02S0443 01422000
         BNE   @RF00443                                         02S0443 01423000
         LH    @08,S99INFO                                      02S0443 01424000
         N     @08,@CF01193                                     02S0443 01425000
         CR    @08,@14                                          02S0443 01426000
         BE    @RF00443                                         02S0443 01427000
*      DO;                             /* YES                        */ 01428000
*        DA18FPE = ON;                 /* INDICATE SECONDARY ERROR   */ 01429000
         OI    DA18FPE(BLOCKPTR),B'10000000'                    02S0445 01430000
*        DA18DARC = S99INFO;           /* STORE DYNAMIC ALLOCATION      01431000
*                                         INFO  CODE IN DARC         */ 01432000
         STH   @08,DA18DARC(,BLOCKPTR)                          02S0446 01433000
*      END;                            /* END PROCESSING SECONDARY      01434000
*                                         ERROR                      */ 01435000
*    IF R15 = 4 THEN                   /* ENVIRONMENTAL ERROR        */ 01436000
@RF00443 C     R15,@CF00059                                     02S0448 01437000
         BNE   @RF00448                                         02S0448 01438000
*      DO;                             /* YES, RETURN APPROPRIATE       01439000
*                                         ERROR CODES                */ 01440000
*        IF S99ERROR = RCDDNFND        /* DDNAME NOT FOUND ?         */ 01441000
*         | S99ERROR = RCDSNFND  THEN  /* DSNAME NOT FOUND ?         */ 01442000
         CLC   S99ERROR(2),@CB00288                             02S0450 01443000
         BE    @RT00450                                         02S0450 01444000
         CLC   S99ERROR(2),@CB00292                             02S0450 01445000
         BNE   @RF00450                                         02S0450 01446000
@RT00450 DS    0H                                               02S0451 01447000
*          RETCODE = 28;               /* INDICATE DDNAME OR DSNAME     01448000
*                                         NOT CURRENTLY ALLOCATED    */ 01449000
         LA    RETCODE,28                                       02S0451 01450000
*        IF S99ERROR = RCPRMCAT THEN   /* DSNAME MEMBER OF PERM 02S0452 01451000
*                                         CONCATENATED GROUP ?       */ 01452000
@RF00450 CLC   S99ERROR(2),@CB00306                             02S0452 01453000
         BNE   @RF00452                                         02S0452 01454000
*          RETCODE = DRDSCCAT;         /* INDICATE DSNAME MEMBER OF     01455000
*                                         A CONCATENATED GROUP       */ 01456000
         LA    RETCODE,24                                       02S0453 01457000
*        IF S99ERROR = RCDCONDD THEN   /* WOULD DECONCATENATION CREATE  01458000
*                                         DUPLICATE DDNAMES ?        */ 01459000
@RF00452 CLC   S99ERROR(2),@CB00284                             02S0454 01460000
         BNE   @RF00454                                         02S0454 01461000
*          DO;                         /* YES                        */ 01462000
*            RETCODE = DRDYNERR;       /* INDICATE DYN ALLOC ERROR   */ 01463000
         LA    RETCODE,12                                       02S0456 01464000
*            DA18DARC = DRDUPEDD;      /* RESTORING DDNAMES WOULD       01465000
*                                         CREATE DUPLICATE DDNAMES   */ 01466000
         MVC   DA18DARC(2,BLOCKPTR),@CH00183                    02S0457 01467000
*          END;                        /* END DECONCAT ERROR CODE    */ 01468000
*        IF RETCODE = 0 THEN           /* HAS ERROR BEEN DETERMINED  */ 01469000
@RF00454 LTR   RETCODE,RETCODE                                  02S0459 01470000
         BNZ   @RF00459                                         02S0459 01471000
*          DO;                         /* NO, RETURN S99ERROR IN DARC*/ 01472000
*            DA18DARC = S99ERROR;      /* STORE S99ERROR IN DA18DARC */ 01473000
         LH    @14,S99ERROR                                     02S0461 01474000
         N     @14,@CF01193                                     02S0461 01475000
         STH   @14,DA18DARC(,BLOCKPTR)                          02S0461 01476000
*            RETCODE = DRDYNERR;       /* INDICATE DYN ALLOC ERROR   */ 01477000
         LA    RETCODE,12                                       02S0462 01478000
*          END;                        /* END RETURN S99ERROR        */ 01479000
*      END;                            /* END ENVIRONMENTAL ERROR       01480000
*                                         PROCESSING                 */ 01481000
@RF00459 DS    0H                                               02S0465 01482000
*    IF R15 = 8 THEN                   /* WAS REQUEST DENIED BY 02S0465 01483000
*                                         INSTALLATION EXIT ?        */ 01484000
@RF00448 C     R15,@CF00048                                     02S0465 01485000
         BNE   @RF00465                                         02S0465 01486000
*      RETCODE = DRREQDEN;             /* YES, SET RETURN CODE TO 52 */ 01487000
         LA    RETCODE,52                                       02S0466 01488000
*    IF R15 = 12 THEN                  /* INVALID PARM LIST TO  02S0467 01489000
*                                         DYNAMIC ALLOCATION ?       */ 01490000
@RF00465 C     R15,@CF00034                                     02S0467 01491000
         BNE   @RF00467                                         02S0467 01492000
*      DO;                             /* YES                        */ 01493000
*        IF S99ERROR = RCINPARM THEN   /* INVALID PARM SPECIFIED IN     01494000
*                                         TEXT ?                     */ 01495000
         CLC   S99ERROR(2),@CB00248                             02S0469 01496000
         BNE   @RF00469                                         02S0469 01497000
*          IF S99INFO = DUNOVCLS THEN  /* YES, WAS IT OUTPUT CLASS   */ 01498000
         CLC   S99INFO(2),@CB00165                              02S0470 01499000
         BNE   @RF00470                                         02S0470 01500000
*            DA18DARC = DRSYSCLS;      /* YES, RETURN INVALID   02S0471 01501000
*                                         CHARACTERS IN OUTPUT CLASS */ 01502000
         MVC   DA18DARC(2,BLOCKPTR),@CH00195                    02S0471 01503000
*          ELSE                        /* OTHERWISE, INVALID DISP    */ 01504000
*            DA18DARC = DRDSPINV;      /* RETURN INVALID DISPOSITION */ 01505000
         B     @RC00470                                         02S0472 01506000
@RF00470 MVC   DA18DARC(2,BLOCKPTR),@CH00201                    02S0472 01507000
*        ELSE                          /* OTHERWISE, RETURN S99ERROR    01508000
*                                         ERROR CODE                 */ 01509000
*          DA18DARC = S99ERROR;        /* RETURN DYNAMIC ALLOCATION     01510000
*                                         ERROR CODE                 */ 01511000
         B     @RC00469                                         02S0473 01512000
@RF00469 LH    @14,S99ERROR                                     02S0473 01513000
         N     @14,@CF01193                                     02S0473 01514000
         STH   @14,DA18DARC(,BLOCKPTR)                          02S0473 01515000
*        RETCODE = DRDYNERR;           /* INDICATE DYNAMIC ALLOCATION   01516000
*                                         ERROR                      */ 01517000
@RC00469 LA    RETCODE,12                                       02S0474 01518000
*      END;                            /* END INVALID PARM LIST CODE */ 01519000
*    RESPECIFY R15 UNRESTRICTED;                                02S0476 01520000
@RF00467 DS    0H                                               02S0477 01521000
*  END;                                /* END PROCESSING VALID DAIR     01522000
*                                         18 PARM LIST               */ 01523000
*        END;                          /* END CODE 18                */ 01524000
@RF00414 DS    0H                                               01S0479 01525000
*      IF BLOCKPTR->DAIRCODE='001C'X THEN /* IS DAIR CODE 1C         */ 01526000
@RF00378 CLC   DAIRCODE(2,BLOCKPTR),@CB00167                    01S0479 01527000
         BNE   @RF00479                                         01S0479 01528000
*        DO;                           /* YES, EXECUTE CODE          */ 01529000
*/********************************************************************/ 01530000
*/*                                                                  */ 01531000
*/* SEGMENT - DAIR1C                                                 */ 01532000
*/*                                                                  */ 01533000
*/* DESCRIPTIVE NAME - DAIR CODE 1C PROCESSOR                        */ 01534000
*/*                                                                  */ 01535000
*/* FUNCTION - THIS ROUTINE IS INVOKED WHEN A DAIR1C PARM BLOCK      */ 01536000
*/*            IS PASSED TO IEFDB4D0(DAIR).  DAIR1C IS INVOKED       */ 01537000
*/*            IN ORDER TO ALLOCATE A DDNAME TO A TERMINAL.          */ 01538000
*/*                                                                  */ 01539000
*/* OPERATION - THE DAIR1C PARM BLOCK IS EXAMINED TO DETERMINE IF    */ 01540000
*/*             AN ATTRIBUTE LIST IS PRESENT.  IF DA1CATRL BIT IS    */ 01541000
*/*             ON (1) AND DA1CALN (ATTRIBUTE LIST NAME) IS NOT      */ 01542000
*/*             BLANK, A TEXT UNIT IS BUILT FOR A DCB DDNAME         */ 01543000
*/*             REFERENCE.  IF THE DA1CATRL BIT IS ON AND THE        */ 01544000
*/*             DA1CALN IS BLANK THE RETURN CODE IS SET TO 4         */ 01545000
*/*             (INVALID PARAMETER LIST) AND NO FURTHER PROCESSING   */ 01546000
*/*             IS DONE.                                             */ 01547000
*/*                                                                  */ 01548000
*/*             IF A DDNAME IS PRESENT, A TEXT UNIT IS BUILT         */ 01549000
*/*             REQUESTING TERMINAL ALLOCATION TO THE SPECIFIED      */ 01550000
*/*             DDNAME.  IF THE DDNAME IS NOT PRESENT, A TEXT        */ 01551000
*/*             UNIT IS BUILT REQUESTING TERMINAL ALLOCATION         */ 01552000
*/*             AND RETURN OF THE DDNAME ASSOCIATED WITH IT.         */ 01553000
*/*                                                                  */ 01554000
*/*             A TEXT UNIT IS BUILT REQUESTING PERMANENT            */ 01555000
*/*             ALLOCATION, IF THE DA1CPERM BIT(IN DA1CCTL) IS ON.   */ 01556000
*/*                                                                  */ 01557000
*/*             DYNAMIC ALLOCATION IS INVOKED TO DO THE ALLOCATION   */ 01558000
*/*             OF THE TERMINAL.                                     */ 01559000
*/*                                                                  */ 01560000
*/*             UPON RETURN, THE DYNAMIC ALLOCATION RETURN CODE      */ 01561000
*/*             (IN REG 15) IS EXAMINED TO DETERMINE IF AN ERROR     */ 01562000
*/*             OCCURRED.  THE FOLLOWING TESTS ARE MADE.             */ 01563000
*/*                                                                  */ 01564000
*/*             IF R15 = 0, THE DAIR RETURN CODE IS 0 AND THE        */ 01565000
*/*             DDNAME ASSOCIATED WITH THE ALLOCATION IS RETURNED.   */ 01566000
*/*             (ONLY IF A DDNAME WAS NOT SUPPLIED.)                 */ 01567000
*/*                                                                  */ 01568000
*/*             IF R15 = 4, AN ENVIRONMENTAL ERROR OCCURRED, AND     */ 01569000
*/*             FURTHER TESTING IS DONE IN ORDER TO RETURN THE       */ 01570000
*/*             PROPER CODES.  THE FOLLOWING TESTS ARE DONE:         */ 01571000
*/*               1. IF S99ERROR = RCDDUNAV THE DAIR RETURN CODE     */ 01572000
*/*                  IS 20.  THE SPECIFIED DDNAME IS UNAVAILABLE.    */ 01573000
*/*               2. IF S99ERROR = RCNTUNLC OR RCLIMITS THE DAIR     */ 01574000
*/*                  RETURN CODE IS 16.  THE RESOURCES COULD NOT BE  */ 01575000
*/*                  UNALLOCATED TO DECREASE THE NUMBER OF RESOURCES */ 01576000
*/*                  TO THE CONTROL VALUE OR THE LIMIT OF 1635       */ 01577000
*/*                  CONCURRENT ALLOCATIONS HAS BEEN REACHED.        */ 01578000
*/*               3. IF S99ERROR = RCDCBRNF THE DAIR RETURN CODE     */ 01579000
*/*                  IS 28.  THE DDNAME SPECIFIED IS NOT CURRENTLY   */ 01580000
*/*                  ALLOCATED  (OBJECT OF DCB REFERBACK NOT FOUND). */ 01581000
*/*               4. IF THE DAIR RETURN CODE HAS NOT YET BEEN        */ 01582000
*/*                  DETERMINED, THE S99ERROR IS STORED IN DA1CDARC  */ 01583000
*/*                  AND THE DAIR RETURN CODE IS 12.  DYNAMIC        */ 01584000
*/*                  ALLOCATION ERROR.                               */ 01585000
*/*                                                                  */ 01586000
*/*             IF R15 = 8, THE DAIR RETURN CODE IS 52.  REQUEST     */ 01587000
*/*             DENIED BY INSTALLATION EXIT.                         */ 01588000
*/*                                                                  */ 01589000
*/*             IF R15 = 12, THE S99ERROR CODE IS TESTED FOR         */ 01590000
*/*             INVALID PARM IN THE TEXT UNIT AND THE                */ 01591000
*/*             S99INFO CODE IS TESTED FOR THE DDNAME TEXT           */ 01592000
*/*             KEY.  IF BOTH CONDITIONS EXIST, THE DA1CDARC IS SET  */ 01593000
*/*             TO DRDDNINV (INVALID CHARACTERS IN DDNAME).          */ 01594000
*/*             OTHERWISE, THE S99ERROR IS STORED IN DA1CDARC.  IN   */ 01595000
*/*             ANY EVENT, THE DAIR RETURN CODE IS SET TO 12.        */ 01596000
*/*                                                                  */ 01597000
*/* ENTRY - DAIR1C(INCLUDED SEGMENT)                                 */ 01598000
*/*                                                                  */ 01599000
*/* INPUT DATA - DAIR1C PARM BLOCK, SVC99 PARM LIST                  */ 01600000
*/*                                                                  */ 01601000
*/* EXITS - ALL ARE TO NEXT SEQUENTIAL INSTRUCTION                   */ 01602000
*/*                                                                  */ 01603000
*/*  NORMAL -                                                        */ 01604000
*/*                                                                  */ 01605000
*/*   OUTPUT - REG 15 IS 0, IF DDNAME WAS NOT SUPPLIED IN THE DAIR   */ 01606000
*/*            PARM BLOCK, THE DDNAME ASSOCIATED WITH THE ALLOCATION */ 01607000
*/*            IS RETURNED.                                          */ 01608000
*/*                                                                  */ 01609000
*/*  ERROR -                                                         */ 01610000
*/*                                                                  */ 01611000
*/*   RETURN CODE - THE FOLLOWING RETURN CODES ARE ISSUED            */ 01612000
*/*                 4 - INVALID PARM LIST                            */ 01613000
*/*                12 - ERROR IN DYNAMIC ALLOCATION                  */ 01614000
*/*                16 - RESOURCES COULD NOT BE UNALLOCATED TO        */ 01615000
*/*                     DECREASE THE NUMBER OF RESOURCES HELD IN     */ 01616000
*/*                     ANTICIPATION OF REUSE TO THE CONTROL VALUE   */ 01617000
*/*                     OR THE ALLOCATION LIMIT OF 1635 CONCURRENT   */ 01618000
*/*                     ALLOCATION HAS BEEN REACHED                  */ 01619000
*/*                20 - THE DDNAME REQUESTED IS UNAVAILABLE          */ 01620000
*/*                28 - THE DDNAME OR DSNAME SPECIFIED IS NOT        */ 01621000
*/*                     CURRENTLY ALLOCATED                          */ 01622000
*/*                52 - REQUEST DENIED BY INSTALLATION EXIT          */ 01623000
*/*                                                                  */ 01624000
*/*   OUTPUT - DA1CDARC (SEE OPERATION TEXT)                         */ 01625000
*/*                                                                  */ 01626000
*/********************************************************************/ 01627000
*DA1CDARC = 0;                         /* ZERO DARC FIELD            */ 01628000
         SLR   @08,@08                                          02S0481 01629000
         STH   @08,DA1CDARC(,BLOCKPTR)                          02S0481 01630000
*S99VERB = S99VRBAL;                   /* SET VERB CODE TO ALLOC     */ 01631000
*                                                               02S0482 01632000
*                                                               02S0482 01633000
         MVI   S99VERB,X'01'                                    02S0482 01634000
*   DO;                                                         02S0483 01635000
*     TUP(1) = ADDR(TU(1));                                     02S0484 01636000
         LA    @04,TU                                           02S0484 01637000
         ST    @04,TUP                                          02S0484 01638000
*     TUP(1)->S99TUKEY = DALTERM;                               02S0485 01639000
         MVC   S99TUKEY(2,@04),@CB00173                         02S0485 01640000
*     TUP(1)->S99TUNUM = 0;                                     02S0486 01641000
         STCM  @08,3,S99TUNUM(@04)                              02S0486 01642000
*     TUP(1)->S99TULNG = 0;                                     02S0487 01643000
         STCM  @08,3,S99TULNG(@04)                              02S0487 01644000
*   END;                                                        02S0488 01645000
*IF DA1CATRL = '1'B THEN               /* WAS ATTRIBUTE NAME SUPPLIED*/ 01646000
         TM    DA1CATRL(BLOCKPTR),B'00000010'                   02S0489 01647000
         BNO   @RF00489                                         02S0489 01648000
*  IF DA1CALN(1) ^= ' ' THEN           /* IS ATTRIBUTE NAME BLANK ?  */ 01649000
*                                                               02S0490 01650000
         CLI   DA1CALN(BLOCKPTR),C' '                           02S0490 01651000
         BE    @RF00490                                         02S0490 01652000
*       DO;                                                     02S0491 01653000
*         TUP(2) = ADDR(TU(2));                                 02S0492 01654000
         LA    @08,TU+14                                        02S0492 01655000
         ST    @08,TUP+4                                        02S0492 01656000
*         TUP(2)->S99TUKEY = DALDCBDD;                          02S0493 01657000
         MVC   S99TUKEY(2,@08),@CB00971                         02S0493 01658000
*         TUP(2)->S99TUNUM = 1;                                 02S0494 01659000
         MVC   S99TUNUM(2,@08),@CH00035                         02S0494 01660000
*         TUP(2)->S99TULNG = LENGTH(DA1CALN);                   02S0495 01661000
         MVC   S99TULNG(2,@08),@CH00048                         02S0495 01662000
*         TUP(2)->S99TUPAR(1:LENGTH(DA1CALN)) = DA1CALN;        02S0496 01663000
         MVC   S99TUPAR(8,@08),DA1CALN(BLOCKPTR)                02S0496 01664000
*       END;                                                    02S0497 01665000
*  ELSE                                /* BLANK ATTRIBUTE NAME       */ 01666000
*    RETCODE = DRINVLST;               /* INVALID PARM LIST          */ 01667000
         B     @RC00490                                         02S0498 01668000
@RF00490 LA    RETCODE,4                                        02S0498 01669000
*ELSE;                                 /* NO ATTRIBUTE LIST          */ 01670000
@RF00489 DS    0H                                               02S0500 01671000
*IF RETCODE = 0 THEN                   /* ANY ERROR ?                */ 01672000
@RC00489 LTR   RETCODE,RETCODE                                  02S0500 01673000
         BNZ   @RF00500                                         02S0500 01674000
*  DO;                                 /* NO                         */ 01675000
*    IF DA1CDDN(1) ^= ' ' THEN         /* IS DDNAME PRESENT          */ 01676000
*                                                               02S0502 01677000
         CLI   DA1CDDN(BLOCKPTR),C' '                           02S0502 01678000
         BE    @RF00502                                         02S0502 01679000
*         DO;                                                   02S0503 01680000
*           TUP(3) = ADDR(TU(3));                               02S0504 01681000
         LA    @08,TU+28                                        02S0504 01682000
         ST    @08,TUP+8                                        02S0504 01683000
*           TUP(3)->S99TUKEY = DALDDNAM;                        02S0505 01684000
         MVC   S99TUKEY(2,@08),@CB00894                         02S0505 01685000
*           TUP(3)->S99TUNUM = 1;                               02S0506 01686000
         MVC   S99TUNUM(2,@08),@CH00035                         02S0506 01687000
*           TUP(3)->S99TULNG = LENGTH(DA1CDDN);                 02S0507 01688000
         MVC   S99TULNG(2,@08),@CH00048                         02S0507 01689000
*           TUP(3)->S99TUPAR(1:LENGTH(DA1CDDN)) = DA1CDDN;      02S0508 01690000
         MVC   S99TUPAR(8,@08),DA1CDDN(BLOCKPTR)                02S0508 01691000
*         END;                                                  02S0509 01692000
*    ELSE                              /* RETURN DDNAME              */ 01693000
*                                                               02S0510 01694000
*       DO;                                                     02S0510 01695000
         B     @RC00502                                         02S0510 01696000
@RF00502 DS    0H                                               02S0511 01697000
*         TUP(3) = ADDR(TU(3));                                 02S0511 01698000
         LA    @08,TU+28                                        02S0511 01699000
         ST    @08,TUP+8                                        02S0511 01700000
*         TUP(3)->S99TUKEY = DALRTDDN;                          02S0512 01701000
         MVC   S99TUKEY(2,@08),@CB01049                         02S0512 01702000
*         TUP(3)->S99TUNUM = 1;                                 02S0513 01703000
         MVC   S99TUNUM(2,@08),@CH00035                         02S0513 01704000
*         TUP(3)->S99TULNG = 8;                                 02S0514 01705000
         MVC   S99TULNG(2,@08),@CH00048                         02S0514 01706000
*         TUP(3)->S99TUPAR(1:8) = '';                           02S0515 01707000
         MVI   S99TUPAR(@08),C' '                               02S0515 01708000
         MVC   S99TUPAR+1(7,@08),S99TUPAR(@08)                  02S0515 01709000
*       END;                                                    02S0516 01710000
*                                                               02S0516 01711000
*     IF DA1CPERM^='0'B THEN                                    02S0517 01712000
@RC00502 TM    DA1CPERM(BLOCKPTR),B'00001000'                   02S0517 01713000
         BZ    @RF00517                                         02S0517 01714000
*       DO;                                                     02S0518 01715000
*         TUP(4) = ADDR(TU(4));                                 02S0519 01716000
         LA    @08,TU+42                                        02S0519 01717000
         ST    @08,TUP+12                                       02S0519 01718000
*         TUP(4)->S99TUKEY = DALPERMA;                          02S0520 01719000
         MVC   S99TUKEY(2,@08),@CB01043                         02S0520 01720000
*         TUP(4)->S99TUNUM = 0;                                 02S0521 01721000
         SLR   @04,@04                                          02S0521 01722000
         STCM  @04,3,S99TUNUM(@08)                              02S0521 01723000
*         TUP(4)->S99TULNG = 0;                                 02S0522 01724000
         STCM  @04,3,S99TULNG(@08)                              02S0522 01725000
*       END;                                                    02S0523 01726000
*                                                               02S0523 01727000
*     TUP(4) = TUP(4) | '80000000'X;                            02S0524 01728000
@RF00517 L     @08,TUP+12                                       02S0524 01729000
         O     @08,@CF01105                                     02S0524 01730000
         ST    @08,TUP+12                                       02S0524 01731000
*    R1 = ADDR(S99RBPTR);              /* GET PARM PTR ADDRESS       */ 01732000
*                                                               02S0525 01733000
         LA    R1,S99RBPTR                                      02S0525 01734000
*     /*MACDATE Y-2 73082*/                                     02S0526 01735000
*     SVC (99);                                                 02S0526 01736000
         SVC   99                                               02S0526 01737000
*    RESPECIFY R15 RESTRICTED;         /* RESTRICT R15 USAGE         */ 01738000
*    IF R15 = 0 THEN                   /* ALLOCATION SUCCESSFUL ?    */ 01739000
         LTR   R15,R15                                          02S0528 01740000
         BNZ   @RF00528                                         02S0528 01741000
*      DA1CDDN = TUP(3) -> S99TUPAR(1:8); /* YES, RETURN DDNAME      */ 01742000
         L     @14,TUP+8                                        02S0529 01743000
         MVC   DA1CDDN(8,BLOCKPTR),S99TUPAR(@14)                02S0529 01744000
*    ELSE                              /* RETURN CODE NOT 0          */ 01745000
*      DO;                             /* PROCESS RETURN CODE        */ 01746000
         B     @RC00528                                         02S0530 01747000
@RF00528 DS    0H                                               02S0531 01748000
*        IF R15 = 4 THEN               /* ENVIRONMENTAL ERROR ?      */ 01749000
         C     R15,@CF00059                                     02S0531 01750000
         BNE   @RF00531                                         02S0531 01751000
*          DO;                         /* YES                        */ 01752000
*            IF S99ERROR = RCDDUNAV THEN /* DDNAME UNAVAILABLE ?     */ 01753000
         CLC   S99ERROR(2),@CB00280                             02S0533 01754000
         BNE   @RF00533                                         02S0533 01755000
*              RETCODE = DRDDUNAV;     /* YES, RETURN CODE = 20      */ 01756000
         LA    RETCODE,20                                       02S0534 01757000
*            IF S99ERROR = RCNTUNLC | S99ERROR = RCLIMITS THEN  02S0535 01758000
@RF00533 CLC   S99ERROR(2),@CB00290                             02S0535 01759000
         BE    @RT00535                                         02S0535 01760000
         CLC   S99ERROR(2),@CB00300                             02S0535 01761000
         BNE   @RF00535                                         02S0535 01762000
@RT00535 DS    0H                                               02S0536 01763000
*              RETCODE =16;            /* LIMIT EXCEEDED ?           */ 01764000
         LA    RETCODE,16                                       02S0536 01765000
*            IF S99ERROR = RCDCBRNF THEN /* DCB REFERBACK NOT FOUND ?*/ 01766000
@RF00535 CLC   S99ERROR(2),@CB00302                             02S0537 01767000
         BNE   @RF00537                                         02S0537 01768000
*              RETCODE = 28;           /* YES, RETURN CODE = 28      */ 01769000
         LA    RETCODE,28                                       02S0538 01770000
*            IF RETCODE = 0 THEN       /* ERROR DETERMINED ?         */ 01771000
@RF00537 LTR   RETCODE,RETCODE                                  02S0539 01772000
         BNZ   @RF00539                                         02S0539 01773000
*              DO;                     /* NO                         */ 01774000
*                DA1CDARC = S99ERROR;  /* RETURN DYN ALLOC ERROR     */ 01775000
         LH    @14,S99ERROR                                     02S0541 01776000
         N     @14,@CF01193                                     02S0541 01777000
         STH   @14,DA1CDARC(,BLOCKPTR)                          02S0541 01778000
*                RETCODE = DRDYNERR;   /* INDICATE DYN ALLOC ERROR   */ 01779000
         LA    RETCODE,12                                       02S0542 01780000
*              END;                    /* END RETURN DYN ALLOC ERROR */ 01781000
*          END;                        /* END ENVIRONMENTAL ERROR    */ 01782000
@RF00539 DS    0H                                               02S0545 01783000
*        IF R15 = 8 THEN               /* REQUEST DENIED ?           */ 01784000
@RF00531 C     R15,@CF00048                                     02S0545 01785000
         BNE   @RF00545                                         02S0545 01786000
*          RETCODE = DRREQDEN;         /* RETURN 52 REQUEST DENIED      01787000
*                                         BY INSTALLATION EXIT       */ 01788000
         LA    RETCODE,52                                       02S0546 01789000
*        IF R15 = 12 THEN              /* INVALID PARM LIST          */ 01790000
@RF00545 C     R15,@CF00034                                     02S0547 01791000
         BNE   @RF00547                                         02S0547 01792000
*          DO;                         /* PROCESS INVALID CODE       */ 01793000
*            IF S99ERROR = RCINPARM & S99INFO = DALDDNAM THEN   02S0549 01794000
         CLC   S99ERROR(2),@CB00248                             02S0549 01795000
         BNE   @RF00549                                         02S0549 01796000
         CLC   S99INFO(2),@CB00894                              02S0549 01797000
         BNE   @RF00549                                         02S0549 01798000
*              DA1CDARC = DRDDNINV;    /* INVALID CHARACTER IN DDNAME*/ 01799000
         MVC   DA1CDARC(2,BLOCKPTR),@CH00185                    02S0550 01800000
*            ELSE                      /* OTHERWISE NOT DETERMINED   */ 01801000
*              DA1CDARC = S99ERROR;    /* RETURN S99ERROR            */ 01802000
         B     @RC00549                                         02S0551 01803000
@RF00549 LH    @14,S99ERROR                                     02S0551 01804000
         N     @14,@CF01193                                     02S0551 01805000
         STH   @14,DA1CDARC(,BLOCKPTR)                          02S0551 01806000
*            RETCODE = DRDYNERR;       /* INDICATE DYNAMIC ALLOCATION   01807000
*                                         ERROR                      */ 01808000
@RC00549 LA    RETCODE,12                                       02S0552 01809000
*          END;                        /* END INVALID CODE PROCESSING*/ 01810000
*      END;                            /* END UNSUCCESSFUL ALLOCATION*/ 01811000
@RF00547 DS    0H                                               02S0555 01812000
*    RESPECIFY R15 UNRESTRICTED;       /* RELEASE R15 USAGE          */ 01813000
@RC00528 DS    0H                                               02S0556 01814000
*  END;                                /* END NO ERROR PROCESSING    */ 01815000
*        END;                          /* END CODE 1C                */ 01816000
@RF00500 DS    0H                                               01S0558 01817000
*      IF BLOCKPTR->DAIRCODE='0024'X THEN /* IS DAIR CODE 24         */ 01818000
@RF00479 CLC   DAIRCODE(2,BLOCKPTR),@CB00171                    01S0558 01819000
         BNE   @RF00558                                         01S0558 01820000
*        DO;                           /* YES, EXECUTE CODE          */ 01821000
*/********************************************************************/ 01822000
*/*                                                                  */ 01823000
*/* SEGMENT - DAIR24                                                 */ 01824000
*/*                                                                  */ 01825000
*/* DESCRIPTIVE NAME - DAIR CODE 24 PROCESSOR                        */ 01826000
*/*                                                                  */ 01827000
*/* FUNCTION - THIS ROUTINE IS INVOKED WHEN A DAIR24 PARM BLOCK      */ 01828000
*/*            IS PASSED TO IEFDB4D0(DAIR).  DAIR24 IS INVOKED       */ 01829000
*/*            IN ORDER TO ALLOCATE BY DDNAME(IE. MARK IN USE)       */ 01830000
*/*            OR, IF THE DDNAME IS NOT FOUND, ALLOCATE BY DSNAME.   */ 01831000
*/*                                                                  */ 01832000
*/* OPERATION - THE DSNAME CHECK ROUTINE IS INVOKED TO DETERMINE     */ 01833000
*/*             IF A VALID DATA SET NAME HAS BEEN SUPPLIED.  IF      */ 01834000
*/*             THE NAME IS INVALID, THE RETURN CODE IS SET TO       */ 01835000
*/*             4(INVALID PARAMETER LIST) AND NO FURTHER PROCESSING  */ 01836000
*/*             IS DONE.                                             */ 01837000
*/*                                                                  */ 01838000
*/*             THE DDNAME AND DATA SET NAME ARE REQUIRED AND, IF    */ 01839000
*/*             NOT SUPPLIED, THE RETURN CODE IS SET TO 4 AND NO     */ 01840000
*/*             FURTHER PROCESSING IS DONE.                          */ 01841000
*/*                                                                  */ 01842000
*/*             IF NONE OF THE ABOVE ERROR CONDITIONS EXIST, TEXT    */ 01843000
*/*             UNITS ARE BUILT TO ALLOCATE BY DDNAME AND RETURN     */ 01844000
*/*             A DUMMY DATA SET INDICATOR.  DYNAMIC ALLOCATION IS   */ 01845000
*/*             INVOKED TO ALLOCATE BY DDNAME.                       */ 01846000
*/*                                                                  */ 01847000
*/*             IF THE ALLOCATION WAS SUCCESSFUL, THE DUMMY          */ 01848000
*/*             INDICATOR IS TESTED AND IF DUMMY, THE DA24DMY BIT    */ 01849000
*/*             IN DA24FLG IS TURNED ON(SET TO 1).  RETCODE IS SET   */ 01850000
*/*             TO 20 AND TEXT UNITS ARE BUILT TO UNALLOCATE BY      */ 01851000
*/*             DDNAME.  DYNAMIC ALLOCATION IS THEN INVOKED TO       */ 01852000
*/*             UNALLOCATE BY DDNAME.  THE UNALLOCATION IS DONE IN   */ 01853000
*/*             ORDER TO BE COMPATIBLE WITH PREVIOUS RELEASES OF     */ 01854000
*/*             DAIR.  THE PREVIOUS RELEASES OF DAIR DETERMINED      */ 01855000
*/*             A DUMMY PRIOR TO ALLOCATION AND HENCE, NO            */ 01856000
*/*             ALLOCATION WAS DONE.                                 */ 01857000
*/*                                                                  */ 01858000
*/*             IF THE ALLOCATION WAS SUCCESSFUL AND THE DATA SET    */ 01859000
*/*             WASN'T A DUMMY, TEXT UNITS ARE BUILT TO RETRIEVE THE */ 01860000
*/*             DATA SET NAME AND DATA SET ORGANIZATION.  DYNAMIC    */ 01861000
*/*             ALLOCATION IS INVOKED FOR RETRIEVAL.  UPON RETURN,   */ 01862000
*/*             THE DSNAME LENGTH, DSNAME AND DATA SET ORGANIZATION  */ 01863000
*/*             ARE STORED IN THE DAIR24 PARM LIST.                  */ 01864000
*/*                                                                  */ 01865000
*/*             IF THE ALLOCATION WAS NOT SUCCESSFUL(REG 15 ^= 0),   */ 01866000
*/*             THE FOLLOWING TESTS ARE MADE:                        */ 01867000
*/*             1. IF R15 = 8 THEN RETCODE IS SET TO 52.  REQUEST    */ 01868000
*/*                DENIED BY INSTALLATION EXIT.                      */ 01869000
*/*             2. IF R15 ^= 8, THE FOLLOWING TESTS ARE MADE:        */ 01870000
*/*                A. IF S99ERROR = RCDDUNAV, RETCODE IS SET TO 20.  */ 01871000
*/*                   THE DDNAME SPECIFIED IS UNAVAILABLE.           */ 01872000
*/*                B. IF S99ERROR = RCDDNFND OR RCDDCONV (DDNAME     */ 01873000
*/*                   NOT FOUND   OR ASSOCIATED WITH A CONVERTIBLE   */ 01874000
*/*                   OR NON-PERMANENTLY CONCATENATED RESOURCE),     */ 01875000
*/*                   THE DA24DDN FIELD IS BLANKED(IN ORDER TO       */ 01876000
*/*                   GET A GENERATED DDNAME RETURNED).  A CALL TO   */ 01877000
*/*                   DAIR08 IS THEN MADE IN ORDER TO ALLOCATE       */ 01878000
*/*                   BY DSNAME.                                     */ 01879000
*/*                   (NOTE: THE DAIR08 AND DAIR24 PARM BLOCKS ARE   */ 01880000
*/*                   IDENTICAL. THE DIFFERENCE IN PROCESSING IS THAT*/ 01881000
*/*                   DAIR24 ALLOCATES BY DDNAME FIRST.  IF THE      */ 01882000
*/*                   DDNAME IS FOUND, THE DSORG OF THE DATA SET     */ 01883000
*/*                   ASSOCIATED WITH THE DDNAME IS RETURNED.        */ 01884000
*/*                   ONLY IF THE DDNAME IS NOT FOUND, DOES          */ 01885000
*/*                   DSNAME ALLOCATION TAKE PLACE.)  THE DDNAME     */ 01886000
*/*                   ASSOCIATED WITH THE DSNAME ALLOCATION          */ 01887000
*/*                   IS THEN RETURNED.                              */ 01888000
*/*                C. IF NONE OF THE ABOVE ERRORS EXIST, THE         */ 01889000
*/*                   S99ERROR CODE IS STORED IN DA24DARC AND        */ 01890000
*/*                   RETCODE IS SET TO 12.                          */ 01891000
*/*                                                                  */ 01892000
*/* ENTRY - DAIR24(INCLUDED SEGMENT)                                 */ 01893000
*/*                                                                  */ 01894000
*/* INPUT DATA - DAIR24 PARM BLOCK, SVC99 PARM LIST                  */ 01895000
*/*                                                                  */ 01896000
*/* EXITS - ALL ARE TO NEXT SEQUENTIAL INSTRUCTION                   */ 01897000
*/*                                                                  */ 01898000
*/*  NORMAL -                                                        */ 01899000
*/*   OUTPUT - DSORG & DA24DMY BIT OFF                               */ 01900000
*/*                                                                  */ 01901000
*/*   RETURN CODE - RETCODE = 0 SUCCESSFUL                           */ 01902000
*/*                                                                  */ 01903000
*/*  ERROR -                                                         */ 01904000
*/*   OUTPUT - DA24DARC (SEE OPERATION TEXT) AND DA24DMY ON (IF      */ 01905000
*/*            ASSOCIATED WITH A DUMMY ALLOCATION)                   */ 01906000
*/*                                                                  */ 01907000
*/*   RETURN CODE - RETCODE = 4 INVALID PARAMETER LIST               */ 01908000
*/*                 RETCODE = 12 DYNAMIC ALLOCATION ERROR            */ 01909000
*/*                 RETCODE = 20 DDNAME REQUESTED IS UNAVAILABLE     */ 01910000
*/*                              OR ASSOCIATED WITH A DUMMY          */ 01911000
*/*                              ALLOCATION                          */ 01912000
*/*                 RETCODE = 52 REQUEST DENIED BY INSTALLATION EXIT */ 01913000
*/*                                                                  */ 01914000
*/********************************************************************/ 01915000
*DA24DARC = 0;                         /* ZERO DARC FIELD            */ 01916000
         SLR   @08,@08                                          02S0560 01917000
         STH   @08,DA24DARC(,BLOCKPTR)                          02S0560 01918000
*DA24CTRC = 0;                         /* ZERO CTRC FIELD            */ 01919000
         STH   @08,DA24CTRC(,BLOCKPTR)                          02S0561 01920000
*DA24DMY = OFF;                        /* ZERO DUMMY INDICATOR       */ 01921000
         NI    DA24DMY(BLOCKPTR),B'11110111'                    02S0562 01922000
*CALL DSNCHECK(DA24CTL,DA24PDSN);      /* VALIDITY CHECK DSNAME      */ 01923000
         LA    @08,DA24CTL(,BLOCKPTR)                           02S0563 01924000
         ST    @08,@AL00001                                     02S0563 01925000
         LA    @08,DA24PDSN(,BLOCKPTR)                          02S0563 01926000
         ST    @08,@AL00001+4                                   02S0563 01927000
         LA    @01,@AL00001                                     02S0563 01928000
         BAL   @14,DSNCHECK                                     02S0563 01929000
*RETCODE = R15;                        /* SAVE DSNCHECK RETURN CODE  */ 01930000
         LR    RETCODE,R15                                      02S0564 01931000
*IF RETCODE ^= 0                       /* VALID DSNAME ?             */ 01932000
*  | (DA24DDN(1) = ' ' | DSNBUF(1) = ' ') THEN /* BLANK DSNAME OR       01933000
*                                                 DDNAME IS INVALID  */ 01934000
         LTR   RETCODE,RETCODE                                  02S0565 01935000
         BNZ   @RT00565                                         02S0565 01936000
         CLI   DA24DDN(BLOCKPTR),C' '                           02S0565 01937000
         BE    @RT00565                                         02S0565 01938000
         CLI   DSNBUF,C' '                                      02S0565 01939000
         BNE   @RF00565                                         02S0565 01940000
@RT00565 DS    0H                                               02S0566 01941000
*  RETCODE = DRINVLST;                 /* SET INVALID PARM LIST CODE */ 01942000
         LA    RETCODE,4                                        02S0566 01943000
*ELSE                                  /* RETURN CODE IS 0 AND DDNAME   01944000
*                                         AND DSNAME SPECIFIED       */ 01945000
*  DO;                                 /* PROCESS VALID REQUEST      */ 01946000
         B     @RC00565                                         02S0567 01947000
@RF00565 DS    0H                                               02S0568 01948000
*    S99VERB = S99VRBDN;               /* SET VERB TO DDNAME ALLOC   */ 01949000
*                                                               02S0568 01950000
*                                                               02S0568 01951000
         MVI   S99VERB,X'06'                                    02S0568 01952000
*       DO;                                                     02S0569 01953000
*         TUP(1) = ADDR(TU(1));                                 02S0570 01954000
         LA    @08,TU                                           02S0570 01955000
         ST    @08,TUP                                          02S0570 01956000
*         TUP(1)->S99TUKEY = DDNDDNAM;                          02S0571 01957000
         MVC   S99TUKEY(2,@08),@CB00894                         02S0571 01958000
*         TUP(1)->S99TUNUM = 1;                                 02S0572 01959000
         LA    @04,1                                            02S0572 01960000
         STCM  @04,3,S99TUNUM(@08)                              02S0572 01961000
*         TUP(1)->S99TULNG = LENGTH(DA24DDN);                   02S0573 01962000
         MVC   S99TULNG(2,@08),@CH00048                         02S0573 01963000
*         TUP(1)->S99TUPAR(1:LENGTH(DA24DDN)) = DA24DDN;        02S0574 01964000
         MVC   S99TUPAR(8,@08),DA24DDN(BLOCKPTR)                02S0574 01965000
*       END;                                                    02S0575 01966000
*                                                               02S0575 01967000
*       DO;                                                     02S0576 01968000
*         TUP(2) = ADDR(TU(2));                                 02S0577 01969000
         LA    @08,TU+14                                        02S0577 01970000
         ST    @08,TUP+4                                        02S0577 01971000
*         TUP(2)->S99TUKEY = DDNRTDUM;                          02S0578 01972000
         MVC   S99TUKEY(2,@08),@CB00896                         02S0578 01973000
*         TUP(2)->S99TUNUM = 1;                                 02S0579 01974000
         STCM  @04,3,S99TUNUM(@08)                              02S0579 01975000
*         TUP(2)->S99TULNG = 1;                                 02S0580 01976000
         STCM  @04,3,S99TULNG(@08)                              02S0580 01977000
*         TUP(2)->S99TUPAR(1:1) = ZERO;                         02S0581 01978000
         MVI   S99TUPAR(@08),X'00'                              02S0581 01979000
*       END;                                                    02S0582 01980000
*                                                               02S0582 01981000
*     TUP(2) = TUP(2) | '80000000'X;                            02S0583 01982000
         O     @08,@CF01105                                     02S0583 01983000
         ST    @08,TUP+4                                        02S0583 01984000
*    R1 = ADDR(S99RBPTR);              /* GET PARM PTR ADDRESS       */ 01985000
*                                                               02S0584 01986000
         LA    R1,S99RBPTR                                      02S0584 01987000
*     /*MACDATE Y-2 73082*/                                     02S0585 01988000
*     SVC (99);                                                 02S0585 01989000
         SVC   99                                               02S0585 01990000
*    RESPECIFY R15 RESTRICTED;         /* RESTRICT REG 15 USAGE      */ 01991000
*    IF R15 = 0 THEN                   /* SUCCESSFUL ALLOCATION ?    */ 01992000
         SLR   @14,@14                                          02S0587 01993000
         CR    R15,@14                                          02S0587 01994000
         BNE   @RF00587                                         02S0587 01995000
*      IF TUP(2) -> S99TUPAR(1) = '80'X THEN /* WAS DD A DUMMY ?     */ 01996000
         L     @08,TUP+4                                        02S0588 01997000
         CLI   S99TUPAR(@08),X'80'                              02S0588 01998000
         BNE   @RF00588                                         02S0588 01999000
*        DO;                           /* YES, DUMMY RETURNED        */ 02000000
*          DA24DMY = ON;               /* INDICATE DUMMY ALLOCATION  */ 02001000
         OI    DA24DMY(BLOCKPTR),B'00001000'                    02S0590 02002000
*          RETCODE = DRDDUNAV;         /* SET DAIR RETURN CODE       */ 02003000
         LA    RETCODE,20                                       02S0591 02004000
*          S99VERB = S99VRBUN;         /* SET VERB CODE TO UNALLOC   */ 02005000
*                                                               02S0592 02006000
*                                                               02S0592 02007000
         MVI   S99VERB,X'02'                                    02S0592 02008000
*             DO;                                               02S0593 02009000
*               TUP(1) = ADDR(TU(1));                           02S0594 02010000
         LA    @08,TU                                           02S0594 02011000
         ST    @08,TUP                                          02S0594 02012000
*               TUP(1)->S99TUKEY = DUNDDNAM;                    02S0595 02013000
         MVC   S99TUKEY(2,@08),@CB00894                         02S0595 02014000
*               TUP(1)->S99TUNUM = 1;                           02S0596 02015000
         MVC   S99TUNUM(2,@08),@CH00035                         02S0596 02016000
*               TUP(1)->S99TULNG = LENGTH(DA24DDN);             02S0597 02017000
         MVC   S99TULNG(2,@08),@CH00048                         02S0597 02018000
*               TUP(1)->S99TUPAR(1:LENGTH(DA24DDN)) = DA24DDN;  02S0598 02019000
         MVC   S99TUPAR(8,@08),DA24DDN(BLOCKPTR)                02S0598 02020000
*             END;                                              02S0599 02021000
*                                                               02S0599 02022000
*             DO;                                               02S0600 02023000
*               TUP(2) = ADDR(TU(2));                           02S0601 02024000
         LA    @08,TU+14                                        02S0601 02025000
         ST    @08,TUP+4                                        02S0601 02026000
*               TUP(2)->S99TUKEY = DUNREMOV;                    02S0602 02027000
         MVC   S99TUKEY(2,@08),@CB00157                         02S0602 02028000
*               TUP(2)->S99TUNUM = 0;                           02S0603 02029000
         STCM  @14,3,S99TUNUM(@08)                              02S0603 02030000
*               TUP(2)->S99TULNG = 0;                           02S0604 02031000
         STCM  @14,3,S99TULNG(@08)                              02S0604 02032000
*             END;                                              02S0605 02033000
*                                                               02S0605 02034000
*           TUP(2) = TUP(2) | '80000000'X;                      02S0606 02035000
         O     @08,@CF01105                                     02S0606 02036000
         ST    @08,TUP+4                                        02S0606 02037000
*          R1 = ADDR(S99RBPTR);        /* GET PARM PTR ADDRESS       */ 02038000
*                                                               02S0607 02039000
         LA    R1,S99RBPTR                                      02S0607 02040000
*           /*MACDATE Y-2 73082*/                               02S0608 02041000
*           SVC (99);                                           02S0608 02042000
         SVC   99                                               02S0608 02043000
*        END;                          /* END DUMMY PROCESSING       */ 02044000
*      ELSE                            /* NOT DUMMY                  */ 02045000
*        DO;                           /* RETRIEVE DATA              */ 02046000
         B     @RC00588                                         02S0610 02047000
@RF00588 DS    0H                                               02S0611 02048000
*          S99VERB = S99VRBIN;         /* SET VERB CODE TO RETRIEVAL */ 02049000
*                                                               02S0611 02050000
*                                                               02S0611 02051000
         MVI   S99VERB,X'07'                                    02S0611 02052000
*             DO;                                               02S0612 02053000
*               TUP(1) = ADDR(TU(1));                           02S0613 02054000
         LA    @14,TU                                           02S0613 02055000
         ST    @14,TUP                                          02S0613 02056000
*               TUP(1)->S99TUKEY = DINRTORG;                    02S0614 02057000
         MVC   S99TUKEY(2,@14),@CB00910                         02S0614 02058000
*               TUP(1)->S99TUNUM = 1;                           02S0615 02059000
         LA    @08,1                                            02S0615 02060000
         STCM  @08,3,S99TUNUM(@14)                              02S0615 02061000
*               TUP(1)->S99TULNG = 2;                           02S0616 02062000
         MVC   S99TULNG(2,@14),@CH00062                         02S0616 02063000
*               TUP(1)->S99TUPAR(1:2) = ZERO;                   02S0617 02064000
         SLR   @04,@04                                          02S0617 02065000
         STCM  @04,3,S99TUPAR(@14)                              02S0617 02066000
*             END;                                              02S0618 02067000
*                                                               02S0618 02068000
*             DO;                                               02S0619 02069000
*               TUP(2) = ADDR(TU(2));                           02S0620 02070000
         LA    @14,TU+14                                        02S0620 02071000
         ST    @14,TUP+4                                        02S0620 02072000
*               TUP(2)->S99TUKEY = DINDDNAM;                    02S0621 02073000
         MVC   S99TUKEY(2,@14),@CB00894                         02S0621 02074000
*               TUP(2)->S99TUNUM = 1;                           02S0622 02075000
         STCM  @08,3,S99TUNUM(@14)                              02S0622 02076000
*               TUP(2)->S99TULNG = LENGTH(DA24DDN);             02S0623 02077000
         MVC   S99TULNG(2,@14),@CH00048                         02S0623 02078000
*               TUP(2)->S99TUPAR(1:LENGTH(DA24DDN)) = DA24DDN;  02S0624 02079000
         MVC   S99TUPAR(8,@14),DA24DDN(BLOCKPTR)                02S0624 02080000
*             END;                                              02S0625 02081000
*                                                               02S0625 02082000
*           TUP(2) = TUP(2) | '80000000'X;                      02S0626 02083000
         O     @14,@CF01105                                     02S0626 02084000
         ST    @14,TUP+4                                        02S0626 02085000
*          R1 = ADDR(S99RBPTR);        /* GET PARM PTR ADDRESS       */ 02086000
*                                                               02S0627 02087000
         LA    R1,S99RBPTR                                      02S0627 02088000
*           /*MACDATE Y-2 73082*/                               02S0628 02089000
*           SVC (99);                                           02S0628 02090000
         SVC   99                                               02S0628 02091000
*          DA24DSO = TUP(1) -> S99TUPAR(1:2); /* RETURN DSORG        */ 02092000
         L     @14,TUP                                          02S0629 02093000
         MVC   DA24DSO(1,BLOCKPTR),S99TUPAR(@14)                02S0629 02094000
*        END;                          /* END DATA RETRIEVAL         */ 02095000
*    ELSE                              /* ALLOCATION NOT SUCCESSFUL  */ 02096000
*      DO;                             /* DETERMINE TYPE OF ERROR    */ 02097000
         B     @RC00587                                         02S0631 02098000
@RF00587 DS    0H                                               02S0632 02099000
*        IF R15 = 8 THEN               /* WAS REQUEST DENIED BY 02S0632 02100000
*                                         INSTALLATION EXIT ?        */ 02101000
         C     R15,@CF00048                                     02S0632 02102000
         BNE   @RF00632                                         02S0632 02103000
*          RETCODE = DRREQDEN;         /* YES, SET RETCODE TO 52     */ 02104000
         LA    RETCODE,52                                       02S0633 02105000
*        ELSE                          /* R15 IS NOT 8               */ 02106000
*          IF S99ERROR = RCDDUNAV THEN /* DDNAME UNAVAILABLE ?       */ 02107000
         B     @RC00632                                         02S0634 02108000
@RF00632 CLC   S99ERROR(2),@CB00280                             02S0634 02109000
         BNE   @RF00634                                         02S0634 02110000
*            RETCODE = DRDDUNAV;       /* YES, SET RETCODE TO 20     */ 02111000
         LA    RETCODE,20                                       02S0635 02112000
*          ELSE                        /* S99ERROR IS NOT '0410'X    */ 02113000
*            IF S99ERROR = RCDDNFND    /* DDNAME NOT FOUND ?         */ 02114000
*              | S99ERROR =RCDDCONV THEN /* DDNAME ASSOCIATED WITH A    02115000
*                                          CONVERTIBLE OR NON- PERM     02116000
*                                          CONCAT RESOURCE ?         */ 02117000
         B     @RC00634                                         02S0636 02118000
@RF00634 CLC   S99ERROR(2),@CB00288                             02S0636 02119000
         BE    @RT00636                                         02S0636 02120000
         CLC   S99ERROR(2),@CB00286                             02S0636 02121000
         BNE   @RF00636                                         02S0636 02122000
@RT00636 DS    0H                                               02S0637 02123000
*              DO;                     /* YES, ALLOC BY DSNAME       */ 02124000
*                DA24DDN = '';         /* BLANK DDNAME               */ 02125000
         MVI   DA24DDN(BLOCKPTR),C' '                           02S0638 02126000
         MVC   DA24DDN+1(7,BLOCKPTR),DA24DDN(BLOCKPTR)          02S0638 02127000
*                CALL DAIR08;          /* CALL DAIR08 TO ALLOCATE    */ 02128000
         BAL   @14,DAIR08                                       02S0639 02129000
*              END;                    /* END CALL TO DAIR08         */ 02130000
*            ELSE                      /* ERROR NOT DETERMINED       */ 02131000
*              DO;                     /* SET RETURN CODE            */ 02132000
         B     @RC00636                                         02S0641 02133000
@RF00636 DS    0H                                               02S0642 02134000
*                RETCODE = DRDYNERR;   /* INDICATE DYN/ALLOC ERROR   */ 02135000
         LA    RETCODE,12                                       02S0642 02136000
*                DA24DARC = S99ERROR;  /* STORE S99ERROR CODE IN DARC*/ 02137000
         LH    @14,S99ERROR                                     02S0643 02138000
         N     @14,@CF01193                                     02S0643 02139000
         STH   @14,DA24DARC(,BLOCKPTR)                          02S0643 02140000
*              END;                    /* END UNDETERMINED ERROR     */ 02141000
*      END;                            /* END ALLOCATION FAILURE        02142000
*                                         PROCESSING                 */ 02143000
@RC00636 DS    0H                                               02S0645 02144000
@RC00634 DS    0H                                               02S0645 02145000
@RC00632 DS    0H                                               02S0646 02146000
*  END;                                /* END VALID REQUEST          */ 02147000
@RC00587 DS    0H                                               02S0647 02148000
*        END;                          /* END CODE 24                */ 02149000
@RC00565 DS    0H                                               01S0648 02150000
*      IF BLOCKPTR->DAIRCODE='002C'X THEN /* IS DAIR CODE 2C         */ 02151000
@RF00558 CLC   DAIRCODE(2,BLOCKPTR),@CB00175                    01S0648 02152000
         BNE   @RF00648                                         01S0648 02153000
*        DO;                           /* YES, EXECUTE CODE          */ 02154000
*/********************************************************************/ 02155000
*/*                                                                  */ 02156000
*/* SEGMENT - DAIR2C                                                 */ 02157000
*/*                                                                  */ 02158000
*/* DESCRIPTIVE NAME - DAIR CODE 2C PROCESSOR                        */ 02159000
*/*                                                                  */ 02160000
*/* FUNCTION - THIS ROUTINE IS INVOKED WHEN A DAIR2C PARM BLOCK      */ 02161000
*/*            IS PASSED TO IEFDB4D0(DAIR).  DAIR2C IS INVOKED       */ 02162000
*/*            IN ORDER TO MARK DSABS NOT IN USE.                    */ 02163000
*/*                                                                  */ 02164000
*/* OPERATION - THE DA2CFLG FIELD IS TESTED FOR '0001'X(MARK DSAB    */ 02165000
*/*             ASSOCIATED WITH SUPPLIED DDNAME NOT IN USE).  IF     */ 02166000
*/*             THE DA2CFLG FIELD IS '0001'X AND A DDNAME IS PRESENT,*/ 02167000
*/*             TEXT UNITS ARE BUILT TO MARK THE DSAB NOT IN USE.    */ 02168000
*/*             DYNAMIC ALLOCATION IS INVOKED.  IF THE RETURN CODE   */ 02169000
*/*             FROM DYNAMIC ALLOCATION IS 8, RETCODE IS SET TO      */ 02170000
*/*             52(REQUEST DENIED BY INSTALLATION EXIT).  NO OTHER   */ 02171000
*/*             RETURN CODES FROM DYNAMIC ALLOCATION ARE TESTED FOR. */ 02172000
*/*             IF THE DA2CFLG IS '0001'X AND THE DDNAME IS NOT      */ 02173000
*/*             SUPPLIED, RETCODE IS SET TO 4(INVALID PARM LIST).    */ 02174000
*/*                                                                  */ 02175000
*/*             IF DA2CFLG FIELD IS NOT '0001'X, IT IS TESTED FOR    */ 02176000
*/*             '0002'X(MARK ALL DSABS ASSOCIATED WITH LOWER TASKS   */ 02177000
*/*             NOT IN USE).  IF THE DA2CFLG FIELD IS '0002'X, A     */ 02178000
*/*             TEXT UNIT IS BUILT TO MARK DSABS OF LOWER TASKS      */ 02179000
*/*             NOT IN USE.  DYNAMIC ALLOCATION IS INVOKED.  IF      */ 02180000
*/*             THE RETURN CODE FROM DYNAMIC ALLOCATION IS 8,        */ 02181000
*/*             RETCODE IS SET TO 52(REQUEST DENIED BY INSTALLATION  */ 02182000
*/*             EXIT).  NO OTHER DYNAMIC ALLOCATION RETURN CODES ARE */ 02183000
*/*             TESTED FOR.                                          */ 02184000
*/*                                                                  */ 02185000
*/*             IF DA2CFLG FIELD IS NOT '0001'X OR '0002'X, IT IS    */ 02186000
*/*             TESTED FOR '0000'X.  IF IT IS NOT '0000', RETCODE    */ 02187000
*/*             IS SET TO 4(INVALID PARM LIST).  IF DA2CFLG IS       */ 02188000
*/*             '0000'X BUT THE TCB ADDRESS IS NOT PRESENT, RETCODE  */ 02189000
*/*             IS SET TO 4 ALSO.  IF NONE OF THE ABOVE ERRORS       */ 02190000
*/*             EXIST, A TEXT UNIT IS BUILT TO MARK ALL DSABS        */ 02191000
*/*             ASSOCIATED WITH THE SPECIFIED TCB NOT IN USE.        */ 02192000
*/*             DYNAMIC ALLOCATION IS INVOKED.  IF THE RETURN CODE   */ 02193000
*/*             FROM DYNAMIC ALLOCATION IS 8, RETCODE IS SET TO 52   */ 02194000
*/*             (REQUEST DENIED BY INSTALLATION EXIT).  NO OTHER     */ 02195000
*/*             DYNAMIC ALLOCATION RETURN CODES ARE TESTED FOR.      */ 02196000
*/*             NOTE: TO REMOVE THE IN-USE ATTRIBUTE, UNALLOCATION   */ 02197000
*/*                   IS USED FOR DDNAME(DA2CFLG = '0001'X),         */ 02198000
*/*                   OTHERWISE THE REMOVE IN USE FUNCTION OF        */ 02199000
*/*                   DYNAMIC ALLOCATION IS USED(DA2CFLG = '0000'X   */ 02200000
*/*                   OR '0002'X).                                   */ 02201000
*/*                                                                  */ 02202000
*/* ENTRY - DAIR2C(INCLUDED SEGMENT)                                 */ 02203000
*/*                                                                  */ 02204000
*/* INPUT DATA - DAIR2C PARM BLOCK,SVC99 PARM LIST                   */ 02205000
*/*                                                                  */ 02206000
*/* EXITS - ALL ARE TO NEXT SEQUENTIAL INSTRUCTION                   */ 02207000
*/*                                                                  */ 02208000
*/*  NORMAL -                                                        */ 02209000
*/*   RETURN CODE - RETCODE = 0 SUCCESSFUL                           */ 02210000
*/*                                                                  */ 02211000
*/*  ERROR -                                                         */ 02212000
*/*   RETURN CODE - RETCODE = 4 INVALID PARM LIST                    */ 02213000
*/*                 RETCODE = 52 REQUEST DENIED BY INSTALLATION      */ 02214000
*/*                              EXIT                                */ 02215000
*/*                                                                  */ 02216000
*/********************************************************************/ 02217000
*IF DA2CFLG = '0001'X THEN             /* MARK SPECIFIED DDNAME ?    */ 02218000
         CLC   DA2CFLG(2,BLOCKPTR),@CH00894                     02S0650 02219000
         BNE   @RF00650                                         02S0650 02220000
*  IF DA2CDDN(1) ^= ' ' THEN           /* IS DDNAME PRESENT ?        */ 02221000
         CLI   DA2CDDN(BLOCKPTR),C' '                           02S0651 02222000
         BE    @RF00651                                         02S0651 02223000
*    DO;                               /* YES, CONTINUE PROCESSING   */ 02224000
*      S99VERB = S99VRBUN;             /* SET VERB CODE TO UNALLOC   */ 02225000
*                                                               02S0653 02226000
*                                                               02S0653 02227000
         MVI   S99VERB,X'02'                                    02S0653 02228000
*         DO;                                                   02S0654 02229000
*           TUP(1) = ADDR(TU(1));                               02S0655 02230000
         LA    @14,TU                                           02S0655 02231000
         ST    @14,TUP                                          02S0655 02232000
*           TUP(1)->S99TUKEY = DUNDDNAM;                        02S0656 02233000
         MVC   S99TUKEY(2,@14),@CB00894                         02S0656 02234000
*           TUP(1)->S99TUNUM = 1;                               02S0657 02235000
         MVC   S99TUNUM(2,@14),@CH00035                         02S0657 02236000
*           TUP(1)->S99TULNG = LENGTH(DA2CDDN);                 02S0658 02237000
         MVC   S99TULNG(2,@14),@CH00048                         02S0658 02238000
*           TUP(1)->S99TUPAR(1:LENGTH(DA2CDDN)) = DA2CDDN;      02S0659 02239000
         MVC   S99TUPAR(8,@14),DA2CDDN(BLOCKPTR)                02S0659 02240000
*         END;                                                  02S0660 02241000
*                                                               02S0660 02242000
*         DO;                                                   02S0661 02243000
*           TUP(2) = ADDR(TU(2));                               02S0662 02244000
         LA    @14,TU+14                                        02S0662 02245000
         ST    @14,TUP+4                                        02S0662 02246000
*           TUP(2)->S99TUKEY = DUNREMOV;                        02S0663 02247000
         MVC   S99TUKEY(2,@14),@CB00157                         02S0663 02248000
*           TUP(2)->S99TUNUM = 0;                               02S0664 02249000
         SLR   @08,@08                                          02S0664 02250000
         STCM  @08,3,S99TUNUM(@14)                              02S0664 02251000
*           TUP(2)->S99TULNG = 0;                               02S0665 02252000
         STCM  @08,3,S99TULNG(@14)                              02S0665 02253000
*         END;                                                  02S0666 02254000
*                                                               02S0666 02255000
*       TUP(2) = TUP(2) | '80000000'X;                          02S0667 02256000
         O     @14,@CF01105                                     02S0667 02257000
         ST    @14,TUP+4                                        02S0667 02258000
*      R1 = ADDR(S99RBPTR);            /* GET PARM PTR ADDRESS       */ 02259000
*                                                               02S0668 02260000
         LA    R1,S99RBPTR                                      02S0668 02261000
*       /*MACDATE Y-2 73082*/                                   02S0669 02262000
*       SVC (99);                                               02S0669 02263000
         SVC   99                                               02S0669 02264000
*      IF R15 = 8 THEN                 /* WAS REQUEST DENIED BY 02S0670 02265000
*                                         INSTALLATION EXIT ?        */ 02266000
         C     R15,@CF00048                                     02S0670 02267000
         BNE   @RF00670                                         02S0670 02268000
*        RETCODE = DRREQDEN;           /* SET RETCODE TO 52          */ 02269000
         LA    RETCODE,52                                       02S0671 02270000
*    END;                              /* END MARK DDNAME NOT IN USE */ 02271000
*  ELSE                                /* DDNAME NOT SUPPLIED        */ 02272000
*    RETCODE = DRINVLST;               /* INVALID PARAMETER LIST     */ 02273000
         B     @RC00651                                         02S0673 02274000
@RF00651 LA    RETCODE,4                                        02S0673 02275000
*ELSE                                  /* DA2CFLG FIELD ISN'T '0001'X*/ 02276000
*  IF DA2CFLG = '0002'X THEN           /* MARK DSABS ASSOCIATED WITH    02277000
*                                         LOWER TASKS NOT IN USE     */ 02278000
         B     @RC00650                                         02S0674 02279000
@RF00650 CLC   DA2CFLG(2,BLOCKPTR),@CH00896                     02S0674 02280000
         BNE   @RF00674                                         02S0674 02281000
*    DO;                               /* YES, CONTINUE PROCESSING   */ 02282000
*      S99VERB = S99VRBRI;             /* SET VERB CODE TO REMOVE       02283000
*                                         IN USE                     */ 02284000
*                                                               02S0676 02285000
*                                                               02S0676 02286000
         MVI   S99VERB,X'05'                                    02S0676 02287000
*         DO;                                                   02S0677 02288000
*           TUP(1) = ADDR(TU(1));                               02S0678 02289000
         LA    @14,TU                                           02S0678 02290000
         ST    @14,TUP                                          02S0678 02291000
*           TUP(1)->S99TUKEY = DRICURNT;                        02S0679 02292000
         MVC   S99TUKEY(2,@14),@CB00896                         02S0679 02293000
*           TUP(1)->S99TUNUM = 0;                               02S0680 02294000
         SLR   @08,@08                                          02S0680 02295000
         STCM  @08,3,S99TUNUM(@14)                              02S0680 02296000
*           TUP(1)->S99TULNG = 0;                               02S0681 02297000
         STCM  @08,3,S99TULNG(@14)                              02S0681 02298000
*         END;                                                  02S0682 02299000
*                                                               02S0682 02300000
*       TUP(1) = TUP(1) | '80000000'X;                          02S0683 02301000
         O     @14,@CF01105                                     02S0683 02302000
         ST    @14,TUP                                          02S0683 02303000
*      R1 = ADDR(S99RBPTR);            /* GET PARM PTR ADDRESS       */ 02304000
*                                                               02S0684 02305000
         LA    R1,S99RBPTR                                      02S0684 02306000
*       /*MACDATE Y-2 73082*/                                   02S0685 02307000
*       SVC (99);                                               02S0685 02308000
         SVC   99                                               02S0685 02309000
*      IF R15 = 8 THEN                 /* WAS REQUEST DENIED BY 02S0686 02310000
*                                         INSTALLATION EXIT ?        */ 02311000
         C     R15,@CF00048                                     02S0686 02312000
         BNE   @RF00686                                         02S0686 02313000
*        RETCODE = DRREQDEN;           /* YES, SET RETCODE TO 52     */ 02314000
         LA    RETCODE,52                                       02S0687 02315000
*    END;                              /* END MARK DSABS OF LOWER       02316000
*                                         TASKS NOT IN USE           */ 02317000
*  ELSE                                /* DA2CFLG FIELD ISN'T '0002'X*/ 02318000
*    IF DA2CFLG = '0000'X              /* MARK ALL DSABS ASSOCIATED     02319000
*                                         WITH SUPPLIED TCB NOT INUSE*/ 02320000
*      & DA2CTCB ^= 0 THEN             /* TCB ADDRESS SUPPLIED ?     */ 02321000
         B     @RC00674                                         02S0689 02322000
@RF00674 LH    @14,DA2CFLG(,BLOCKPTR)                           02S0689 02323000
         LTR   @14,@14                                          02S0689 02324000
         BNZ   @RF00689                                         02S0689 02325000
         L     @14,DA2CTCB(,BLOCKPTR)                           02S0689 02326000
         LTR   @14,@14                                          02S0689 02327000
         BZ    @RF00689                                         02S0689 02328000
*      DO;                             /* GENERATE TEXT UNITS        */ 02329000
*        S99VERB = S99VRBRI;           /* SET VERB CODE TO REMOVE       02330000
*                                         IN USE                     */ 02331000
*                                                               02S0691 02332000
*                                                               02S0691 02333000
         MVI   S99VERB,X'05'                                    02S0691 02334000
*           DO;                                                 02S0692 02335000
*             TUP(1) = ADDR(TU(1));                             02S0693 02336000
         LA    @08,TU                                           02S0693 02337000
         ST    @08,TUP                                          02S0693 02338000
*             TUP(1)->S99TUKEY = DRITCBAD;                      02S0694 02339000
         MVC   S99TUKEY(2,@08),@CB00894                         02S0694 02340000
*             TUP(1)->S99TUNUM = 1;                             02S0695 02341000
         MVC   S99TUNUM(2,@08),@CH00035                         02S0695 02342000
*             TUP(1)->S99TULNG = LENGTH(DA2CTCB);               02S0696 02343000
         MVC   S99TULNG(2,@08),@CH00059                         02S0696 02344000
*             TUP(1)->S99TUPAR(1:LENGTH(DA2CTCB)) = DA2CTCB;    02S0697 02345000
         STCM  @14,15,S99TUPAR(@08)                             02S0697 02346000
*           END;                                                02S0698 02347000
*                                                               02S0698 02348000
*         TUP(1) = TUP(1) | '80000000'X;                        02S0699 02349000
         O     @08,@CF01105                                     02S0699 02350000
         ST    @08,TUP                                          02S0699 02351000
*        R1 = ADDR(S99RBPTR);          /* GET PARM PTR ADDRESS       */ 02352000
*                                                               02S0700 02353000
         LA    R1,S99RBPTR                                      02S0700 02354000
*         /*MACDATE Y-2 73082*/                                 02S0701 02355000
*         SVC (99);                                             02S0701 02356000
         SVC   99                                               02S0701 02357000
*        IF R15 = 8 THEN               /* WAS REQUEST DENIED BY 02S0702 02358000
*                                         INSTALLATION EXIT ?        */ 02359000
         C     R15,@CF00048                                     02S0702 02360000
         BNE   @RF00702                                         02S0702 02361000
*          RETCODE = DRREQDEN;         /* YES, SET RETCODE TO 52     */ 02362000
         LA    RETCODE,52                                       02S0703 02363000
*      END;                            /* END MARKING DSABS ASSOCIATED  02364000
*                                         WITH SUPPLIED TCB ADDRESS     02365000
*                                         NOT IN USE                 */ 02366000
*    ELSE                              /* DA2CFLG IS NOT VALID       */ 02367000
*      RETCODE = DRINVLST;             /* INDICATE INVALID PARM LIST */ 02368000
         B     @RC00689                                         02S0705 02369000
@RF00689 LA    RETCODE,4                                        02S0705 02370000
*        END;                          /* END CODE 2C                */ 02371000
@RC00689 DS    0H                                               01S0706 02372000
@RC00674 DS    0H                                               01S0706 02373000
@RC00650 DS    0H                                               01S0707 02374000
*      IF BLOCKPTR->DAIRCODE='0030'X THEN /* IS DAIR CODE 30         */ 02375000
@RF00648 CLC   DAIRCODE(2,BLOCKPTR),@CB00210                    01S0707 02376000
         BNE   @RF00707                                         01S0707 02377000
*        DO;                           /* YES, EXECUTE CODE          */ 02378000
*/********************************************************************/ 02379000
*/*                                                                  */ 02380000
*/* SEGMENT - DAIR30                                                 */ 02381000
*/*                                                                  */ 02382000
*/* DESCRIPTIVE NAME - DAIR CODE 30 PROCESSOR                        */ 02383000
*/*                                                                  */ 02384000
*/* FUNCTION - DAIR30 IS INVOKED WHEN A DAIR30 PARM BLOCK            */ 02385000
*/*            IS PASSED TO IEFDB4D0(DAIR).  DAIR30 IS INVOKED       */ 02386000
*/*            IN ORDER TO ALLOCATE A SYSOUT DATA SET.               */ 02387000
*/*                                                                  */ 02388000
*/* OPERATION - THE DAIR30 PARM BLOCK IS EXAMINED FOR THE FOLLOWING  */ 02389000
*/*             INVALID CONDITIONS:                                  */ 02390000
*/*              1. DA30ATRL BIT ON AND ATTRIBUTE LIST NAME BLANK    */ 02391000
*/*              2. DA30UNIT = 0  ZERO IN UNIT NAME                  */ 02392000
*/*              3. DA30PDSN ^= 0  DSNAME BUFFER NOT SUPPLIED        */ 02393000
*/*                 DA30DSNL NOT 44  DSNAME BUFFER LENGTH NOT 44     */ 02394000
*/*                 DA30DSN NOT BLANK  DSNAME BUFFER NOT BLANK       */ 02395000
*/*             IF ANY OF THE ABOVE ERROR CONDITIONS ARE FOUND,      */ 02396000
*/*             RETCODE IS SET TO 4 AND NO FURTHER PROCESSING        */ 02397000
*/*             IS DONE.                                             */ 02398000
*/*                                                                  */ 02399000
*/*             IF NONE OF THE ABOVE ERRORS ARE FOUND, TEXT UNITS    */ 02400000
*/*             ARE BUILT USING DATA FROM THE DAIR30 PARM BLOCK.     */ 02401000
*/*             AFTER THE TEXT UNITS ARE COMPLETED, DYNAMIC          */ 02402000
*/*             ALLOCATION IS INVOKED TO ALLOCATE THE SYSOUT         */ 02403000
*/*             DATA SET.                                            */ 02404000
*/*                                                                  */ 02405000
*/*             THE DYNAMIC ALLOCATION RETURN CODE (IN REG15) IS     */ 02406000
*/*             EXAMINED TO DETERMINE IF THERE WERE ANY ERRORS.      */ 02407000
*/*                                                                  */ 02408000
*/*             IF REG 15 = 8 AFTER INVOKING DYNAMIC ALLOCATION,     */ 02409000
*/*             RETCODE IS SET TO 52.  THIS INDICATES THE REQUEST    */ 02410000
*/*             WAS DENIED BY THE INSTALLATION EXIT ROUTINE.         */ 02411000
*/*                                                                  */ 02412000
*/*             IF REG 15 = 12 AFTER INVOKING DYNAMIC ALLOCATION     */ 02413000
*/*             (INDICATING INVALID DYN/ALLOC PARMS), THE S99ERROR   */ 02414000
*/*             AND S99INFO CODES ARE EXAMINED TO DETERMINE WHICH    */ 02415000
*/*             DYNAMIC ALLOCATION REASON CODE TO RETURN IN THE      */ 02416000
*/*             DA30DARC.  THE FOLLOWING TESTS ARE DONE              */ 02417000
*/*              1. IF S99ERROR IS RCINPARM THE S99INFO CODE IS      */ 02418000
*/*                 EXAMINED AND THE DARC IS SET IN THE FOLLOWING    */ 02419000
*/*                 MANNER:                                          */ 02420000
*/*                  A. IF S99INFO = DALDDNAM KEY, THE DDNAME HAS    */ 02421000
*/*                     INVALID CHARACTERS AND THE DARC IS SET TO    */ 02422000
*/*                     DRDDNINV.                                    */ 02423000
*/*                  B. IF S99INFO = DALSPGMN KEY, THE SYSOUT        */ 02424000
*/*                     PROGRAM NAME HAS INVALID CHARACTERS AND      */ 02425000
*/*                     THE DARC IS SET TO DRSYSPGM.                 */ 02426000
*/*                  C. IF S99INFO = DALSFORM KEY, THE FORM          */ 02427000
*/*                     NUMBER HAS INVALID CHARACTERS AND THE        */ 02428000
*/*                     DARC IS SET TO DRSYSFRM.                     */ 02429000
*/*                  D. IF NONE OF THE ABOVE ERRORS EXIST, THE       */ 02430000
*/*                     S99ERROR CODE IS STORED INTO DA30DARC.       */ 02431000
*/*              2. IF THE S99ERROR CODE WAS NOT RCINPARM, THE       */ 02432000
*/*                 S99ERROR IS STORED IN THE DARC.                  */ 02433000
*/*             ANY OF THE ABOVE ERRORS RESULT IN RETCODE BEING      */ 02434000
*/*             SET TO 12.                                           */ 02435000
*/*                                                                  */ 02436000
*/*             IF REG 15 = 4 AFTER INVOKING DYNAMIC ALLOCATION      */ 02437000
*/*             (ENVIRONMENTAL ERROR), THE S99ERROR CODE IS          */ 02438000
*/*             EXAMINED TO DETERMINE WHICH DYNAMIC ALLOCATION       */ 02439000
*/*             REASON CODE TO RETURN IN THE DA30DARC.  THE          */ 02440000
*/*             FOLLOWING TESTS ARE DONE.                            */ 02441000
*/*              1. IF S99ERROR = RCDDUNAV THE DDNAME IS UNAVAILABLE */ 02442000
*/*                 AND RETCODE IS SET TO 20.                        */ 02443000
*/*              2. IF S99ERROR = RCNTUNLC(RESOURCES COULD NOT BE    */ 02444000
*/*                 UNALLOCATED TO THE CONTROL VALUE) OR RCLIMITS    */ 02445000
*/*                 (REQUEST WOULD EXCEED LIMIT OF 1635 ALLOCATIONS),*/ 02446000
*/*                 RETCODE IS SET TO 16.                            */ 02447000
*/*              3. IF S99ERROR = RCDCBRNF(DCB REFERBACK NOT FOUND), */ 02448000
*/*                 RETCODE IS SET TO 28.                            */ 02449000
*/*             IF RETCODE IS STILL 0 AFTER THE ABOVE TESTS,         */ 02450000
*/*             THE S99ERROR CODE IS STORED IN THE DARC AND          */ 02451000
*/*             RETCODE IS SET TO 12.                                */ 02452000
*/*                                                                  */ 02453000
*/*             IF THE RETURN CODE FROM DYNAMIC ALLOCATION IS ZERO,  */ 02454000
*/*             THE DSNAME LENGTH, DSNAME AND DDNAME ARE             */ 02455000
*/*             STORED INTO THE DAIR30 PARM BLOCK.                   */ 02456000
*/*                                                                  */ 02457000
*/* ENTRY - DAIR30(INCLUDED SEGMENT)                                 */ 02458000
*/*                                                                  */ 02459000
*/* INPUT DATA - DAIR30 PARM BLOCK, SVC99 PARM LIST                  */ 02460000
*/*                                                                  */ 02461000
*/* EXITS - ALL ARE TO NEXT SEQUENTIAL INSTRUCTION                   */ 02462000
*/*                                                                  */ 02463000
*/*  NORMAL -                                                        */ 02464000
*/*   OUTPUT - DSNAME LENGTH,DSNAME AND DDNAME RETURNED              */ 02465000
*/*                                                                  */ 02466000
*/*   RETURN CODE - RETCODE = 0 SUCCESSFUL ALLOCATION                */ 02467000
*/*                                                                  */ 02468000
*/*  ERROR -                                                         */ 02469000
*/*   OUTPUT - DA30DARC (SEE OPERATION TEXT)                         */ 02470000
*/*                                                                  */ 02471000
*/*   RETURN CODE - RETCODE = 4 INVALID PARAMETER LIST               */ 02472000
*/*                          12 DYNAMIC ALLOCATION ERROR             */ 02473000
*/*                          16 RESOURCES COULD NOT BE UNALLOCATED   */ 02474000
*/*                             TO LIMIT OR REQUEST WOULD EXCEED     */ 02475000
*/*                             1635 CONCURRENT ALLOCATIONS          */ 02476000
*/*                          20 DDNAME REQUESTED IS UNAVAILABLE      */ 02477000
*/*                          28 DDNAME SPECIFIED IS NOT ALLOCATED    */ 02478000
*/*                          52 REQUEST DENIED BY INSTALLATION EXIT  */ 02479000
*/*                                                                  */ 02480000
*/********************************************************************/ 02481000
*IF (DA30ATRL = ON & DA30ALN(1) = ' ') /* TEST FOR INVALID PARAMETERS*/ 02482000
*  | (DA30PDSN ^= 0 & (DA30DSNL ^= 44 | DA30DSN(1) ^= ' '))     02S0709 02483000
*  | DA30UNIT(1) = '00'X THEN                                   02S0709 02484000
         TM    DA30ATRL(BLOCKPTR),B'00000010'                   02S0709 02485000
         BNO   @GL00019                                         02S0709 02486000
         CLI   DA30ALN(BLOCKPTR),C' '                           02S0709 02487000
         BE    @RT00709                                         02S0709 02488000
@GL00019 L     @14,DA30PDSN(,BLOCKPTR)                          02S0709 02489000
         LTR   @14,@14                                          02S0709 02490000
         BZ    @GL00018                                         02S0709 02491000
         CLC   DA30DSNL(2,@14),@CH00092                         02S0709 02492000
         BNE   @RT00709                                         02S0709 02493000
         CLI   DA30DSN(@14),C' '                                02S0709 02494000
         BNE   @RT00709                                         02S0709 02495000
@GL00018 CLI   DA30UNIT(BLOCKPTR),X'00'                         02S0709 02496000
         BNE   @RF00709                                         02S0709 02497000
@RT00709 DS    0H                                               02S0710 02498000
*  RETCODE = DRINVLST;                                          02S0710 02499000
         LA    RETCODE,4                                        02S0710 02500000
*ELSE                                  /* NOTHING INVALID            */ 02501000
*  DO;                                 /* CONTINUE PROCESSING REQUEST*/ 02502000
         B     @RC00709                                         02S0711 02503000
@RF00709 DS    0H                                               02S0712 02504000
*    S99VERB = S99VRBAL;               /* SET VERB CODE TO ALLOCATE  */ 02505000
*                                                               02S0712 02506000
         MVI   S99VERB,X'01'                                    02S0712 02507000
*    IF DA30PDSN ^= 0 THEN             /* IS DSNAME BUFFER PRESENT ? */ 02508000
*                                                               02S0713 02509000
         L     @14,DA30PDSN(,BLOCKPTR)                          02S0713 02510000
         LTR   @14,@14                                          02S0713 02511000
         BZ    @RF00713                                         02S0713 02512000
*         DO;                                                   02S0714 02513000
*           TUP(1) = ADDR(TUDSN);                               02S0715 02514000
         LA    @14,TUDSN                                        02S0715 02515000
         ST    @14,TUP                                          02S0715 02516000
*           TUP(1)->S99TUKEY = DALRTDSN;                        02S0716 02517000
         MVC   S99TUKEY(2,@14),@CB01051                         02S0716 02518000
*           TUP(1)->S99TUNUM = 1;                               02S0717 02519000
         MVC   S99TUNUM(2,@14),@CH00035                         02S0717 02520000
*           TUP(1)->S99TULNG = 44;                              02S0718 02521000
         MVC   S99TULNG(2,@14),@CH00092                         02S0718 02522000
*           TUP(1)->S99TUPAR(1:44) = '';                        02S0719 02523000
         MVI   S99TUPAR(@14),C' '                               02S0719 02524000
         MVC   S99TUPAR+1(43,@14),S99TUPAR(@14)                 02S0719 02525000
*         END;                                                  02S0720 02526000
*    IF DA30DDN(1) = ' ' THEN                                   02S0721 02527000
*                                                               02S0721 02528000
@RF00713 CLI   DA30DDN(BLOCKPTR),C' '                           02S0721 02529000
         BNE   @RF00721                                         02S0721 02530000
*         DO;                                                   02S0722 02531000
*           TUP(2) = ADDR(TU(2));                               02S0723 02532000
         LA    @14,TU+14                                        02S0723 02533000
         ST    @14,TUP+4                                        02S0723 02534000
*           TUP(2)->S99TUKEY = DALRTDDN;                        02S0724 02535000
         MVC   S99TUKEY(2,@14),@CB01049                         02S0724 02536000
*           TUP(2)->S99TUNUM = 1;                               02S0725 02537000
         MVC   S99TUNUM(2,@14),@CH00035                         02S0725 02538000
*           TUP(2)->S99TULNG = 8;                               02S0726 02539000
         MVC   S99TULNG(2,@14),@CH00048                         02S0726 02540000
*           TUP(2)->S99TUPAR(1:8) = '';                         02S0727 02541000
         MVI   S99TUPAR(@14),C' '                               02S0727 02542000
         MVC   S99TUPAR+1(7,@14),S99TUPAR(@14)                  02S0727 02543000
*         END;                                                  02S0728 02544000
*    ELSE                                                       02S0729 02545000
*                                                               02S0729 02546000
*         DO;                                                   02S0729 02547000
         B     @RC00721                                         02S0729 02548000
@RF00721 DS    0H                                               02S0730 02549000
*           TUP(2) = ADDR(TU(2));                               02S0730 02550000
         LA    @14,TU+14                                        02S0730 02551000
         ST    @14,TUP+4                                        02S0730 02552000
*           TUP(2)->S99TUKEY = DALDDNAM;                        02S0731 02553000
         MVC   S99TUKEY(2,@14),@CB00894                         02S0731 02554000
*           TUP(2)->S99TUNUM = 1;                               02S0732 02555000
         MVC   S99TUNUM(2,@14),@CH00035                         02S0732 02556000
*           TUP(2)->S99TULNG = LENGTH(DA30DDN);                 02S0733 02557000
         MVC   S99TULNG(2,@14),@CH00048                         02S0733 02558000
*           TUP(2)->S99TUPAR(1:LENGTH(DA30DDN)) = DA30DDN;      02S0734 02559000
         MVC   S99TUPAR(8,@14),DA30DDN(BLOCKPTR)                02S0734 02560000
*         END;                                                  02S0735 02561000
*                                                               02S0735 02562000
*     IF DA30UNIT^=' ' THEN                                     02S0736 02563000
@RC00721 CLI   DA30UNIT(BLOCKPTR),C' '                          02S0736 02564000
         BE    @RF00736                                         02S0736 02565000
*       DO;                                                     02S0737 02566000
*         TUP(3) = ADDR(TU(3));                                 02S0738 02567000
         LA    @14,TU+28                                        02S0738 02568000
         ST    @14,TUP+8                                        02S0738 02569000
*         TUP(3)->S99TUKEY = DALUNIT;                           02S0739 02570000
         MVC   S99TUKEY(2,@14),@CB00929                         02S0739 02571000
*         TUP(3)->S99TUNUM = 1;                                 02S0740 02572000
         MVC   S99TUNUM(2,@14),@CH00035                         02S0740 02573000
*         TUP(3)->S99TULNG = LENGTH(DA30UNIT);                  02S0741 02574000
         MVC   S99TULNG(2,@14),@CH00048                         02S0741 02575000
*         TUP(3)->S99TUPAR(1:LENGTH(DA30UNIT)) = DA30UNIT;      02S0742 02576000
         MVC   S99TUPAR(8,@14),DA30UNIT(BLOCKPTR)               02S0742 02577000
*       END;                                                    02S0743 02578000
*                                                               02S0743 02579000
*     IF DA30ATRL^='0'B THEN                                    02S0744 02580000
@RF00736 TM    DA30ATRL(BLOCKPTR),B'00000010'                   02S0744 02581000
         BZ    @RF00744                                         02S0744 02582000
*       DO;                                                     02S0745 02583000
*         TUP(4) = ADDR(TU(4));                                 02S0746 02584000
         LA    @14,TU+42                                        02S0746 02585000
         ST    @14,TUP+12                                       02S0746 02586000
*         TUP(4)->S99TUKEY = DALDCBDD;                          02S0747 02587000
         MVC   S99TUKEY(2,@14),@CB00971                         02S0747 02588000
*         TUP(4)->S99TUNUM = 1;                                 02S0748 02589000
         MVC   S99TUNUM(2,@14),@CH00035                         02S0748 02590000
*         TUP(4)->S99TULNG = LENGTH(DA30ALN);                   02S0749 02591000
         MVC   S99TULNG(2,@14),@CH00048                         02S0749 02592000
*         TUP(4)->S99TUPAR(1:LENGTH(DA30ALN)) = DA30ALN;        02S0750 02593000
         MVC   S99TUPAR(8,@14),DA30ALN(BLOCKPTR)                02S0750 02594000
*       END;                                                    02S0751 02595000
*    IF DA30PQTY(2:4) ^= ZERO THEN     /* WAS PRIMARY SPACE SUPPLIED?*/ 02596000
@RF00744 SLR   @14,@14                                          02S0752 02597000
         SLR   @08,@08                                          02S0752 02598000
         ICM   @08,7,DA30PQTY+1(BLOCKPTR)                       02S0752 02599000
         CR    @14,@08                                          02S0752 02600000
         BE    @RF00752                                         02S0752 02601000
*      DO;                             /* YES, PROCESS ALL SPACE        02602000
*                                         RELATED DATA               */ 02603000
*                                                               02S0753 02604000
*           DO;                                                 02S0754 02605000
*             TUP(5) = ADDR(TU(5));                             02S0755 02606000
         LA    @08,TU+56                                        02S0755 02607000
         ST    @08,TUP+16                                       02S0755 02608000
*             TUP(5)->S99TUKEY = DALPRIME;                      02S0756 02609000
         MVC   S99TUKEY(2,@08),@CB00910                         02S0756 02610000
*             TUP(5)->S99TUNUM = 1;                             02S0757 02611000
         LA    @04,1                                            02S0757 02612000
         STCM  @04,3,S99TUNUM(@08)                              02S0757 02613000
*             TUP(5)->S99TULNG = 3;                             02S0758 02614000
         LA    @03,3                                            02S0758 02615000
         STCM  @03,3,S99TULNG(@08)                              02S0758 02616000
*             TUP(5)->S99TUPAR(1:3) = DA30PQTY(2:4);            02S0759 02617000
         MVC   S99TUPAR(3,@08),DA30PQTY+1(BLOCKPTR)             02S0759 02618000
*           END;                                                02S0760 02619000
*                                                               02S0760 02620000
*         IF DA30SQTY(2:4)^=ZERO THEN                           02S0761 02621000
         SLR   @08,@08                                          02S0761 02622000
         ICM   @08,7,DA30SQTY+1(BLOCKPTR)                       02S0761 02623000
         CR    @14,@08                                          02S0761 02624000
         BE    @RF00761                                         02S0761 02625000
*           DO;                                                 02S0762 02626000
*             TUP(6) = ADDR(TU(6));                             02S0763 02627000
         LA    @14,TU+70                                        02S0763 02628000
         ST    @14,TUP+20                                       02S0763 02629000
*             TUP(6)->S99TUKEY = DALSECND;                      02S0764 02630000
         MVC   S99TUKEY(2,@14),@CB00912                         02S0764 02631000
*             TUP(6)->S99TUNUM = 1;                             02S0765 02632000
         STCM  @04,3,S99TUNUM(@14)                              02S0765 02633000
*             TUP(6)->S99TULNG = 3;                             02S0766 02634000
         STCM  @03,3,S99TULNG(@14)                              02S0766 02635000
*             TUP(6)->S99TUPAR(1:3) = DA30SQTY(2:4);            02S0767 02636000
         MVC   S99TUPAR(3,@14),DA30SQTY+1(BLOCKPTR)             02S0767 02637000
*           END;                                                02S0768 02638000
*        IF DA30TRKS = ON & DA30ABKL = ON THEN/* CYLINDER ALLOCATION?*/ 02639000
*                                                               02S0769 02640000
@RF00761 TM    DA30TRKS(BLOCKPTR),B'11000000'                   02S0769 02641000
         BNO   @RF00769                                         02S0769 02642000
*              DO;                                              02S0770 02643000
*                TUP(7) = ADDR(TU(7));                          02S0771 02644000
         LA    @14,TU+84                                        02S0771 02645000
         ST    @14,TUP+24                                       02S0771 02646000
*                TUP(7)->S99TUKEY = DALCYL;                     02S0772 02647000
         MVC   S99TUKEY(2,@14),@CB00157                         02S0772 02648000
*                TUP(7)->S99TUNUM = 0;                          02S0773 02649000
         SLR   @08,@08                                          02S0773 02650000
         STCM  @08,3,S99TUNUM(@14)                              02S0773 02651000
*                TUP(7)->S99TULNG = 0;                          02S0774 02652000
         STCM  @08,3,S99TULNG(@14)                              02S0774 02653000
*              END;                                             02S0775 02654000
*        ELSE                          /* NOT CYLINDER ALLOCATION    */ 02655000
*          DO;                         /* DETERMINE TYPE OF UNITS    */ 02656000
*                                                               02S0776 02657000
         B     @RC00769                                         02S0776 02658000
@RF00769 DS    0H                                               02S0777 02659000
*             IF DA30TRKS^='0'B THEN                            02S0777 02660000
         TM    DA30TRKS(BLOCKPTR),B'10000000'                   02S0777 02661000
         BZ    @RF00777                                         02S0777 02662000
*               DO;                                             02S0778 02663000
*                 TUP(7) = ADDR(TU(7));                         02S0779 02664000
         LA    @14,TU+84                                        02S0779 02665000
         ST    @14,TUP+24                                       02S0779 02666000
*                 TUP(7)->S99TUKEY = DALTRK;                    02S0780 02667000
         MVC   S99TUKEY(2,@14),@CB00905                         02S0780 02668000
*                 TUP(7)->S99TUNUM = 0;                         02S0781 02669000
         SLR   @08,@08                                          02S0781 02670000
         STCM  @08,3,S99TUNUM(@14)                              02S0781 02671000
*                 TUP(7)->S99TULNG = 0;                         02S0782 02672000
         STCM  @08,3,S99TULNG(@14)                              02S0782 02673000
*               END;                                            02S0783 02674000
*                                                               02S0783 02675000
*             IF DA30ABKL^='0'B THEN                            02S0784 02676000
@RF00777 TM    DA30ABKL(BLOCKPTR),B'01000000'                   02S0784 02677000
         BZ    @RF00784                                         02S0784 02678000
*               DO;                                             02S0785 02679000
*                 TUP(8) = ADDR(TU(8));                         02S0786 02680000
         LA    @14,TU+98                                        02S0786 02681000
         ST    @14,TUP+28                                       02S0786 02682000
*                 TUP(8)->S99TUKEY = DALBLKLN;                  02S0787 02683000
         MVC   S99TUKEY(2,@14),@CB00908                         02S0787 02684000
*                 TUP(8)->S99TUNUM = 1;                         02S0788 02685000
         MVC   S99TUNUM(2,@14),@CH00035                         02S0788 02686000
*                 TUP(8)->S99TULNG = 3;                         02S0789 02687000
         MVC   S99TULNG(2,@14),@CH00079                         02S0789 02688000
*                 TUP(8)->S99TUPAR(1:3) = DA30BLK(2:4);         02S0790 02689000
         MVC   S99TUPAR(3,@14),DA30BLK+1(BLOCKPTR)              02S0790 02690000
*               END;                                            02S0791 02691000
*          END;                        /* END UNITS DETERMINATION    */ 02692000
*                                                               02S0792 02693000
@RF00784 DS    0H                                               02S0793 02694000
*         IF DA30RLSE^='0'B THEN                                02S0793 02695000
@RC00769 TM    DA30RLSE(BLOCKPTR),B'00010000'                   02S0793 02696000
         BZ    @RF00793                                         02S0793 02697000
*           DO;                                                 02S0794 02698000
*             TUP(9) = ADDR(TU(9));                             02S0795 02699000
         LA    @14,TU+112                                       02S0795 02700000
         ST    @14,TUP+32                                       02S0795 02701000
*             TUP(9)->S99TUKEY = DALRLSE;                       02S0796 02702000
         MVC   S99TUKEY(2,@14),@CB00915                         02S0796 02703000
*             TUP(9)->S99TUNUM = 0;                             02S0797 02704000
         SLR   @08,@08                                          02S0797 02705000
         STCM  @08,3,S99TUNUM(@14)                              02S0797 02706000
*             TUP(9)->S99TULNG = 0;                             02S0798 02707000
         STCM  @08,3,S99TULNG(@14)                              02S0798 02708000
*           END;                                                02S0799 02709000
*        IF DA30BLK(2:4) ^= 0                                   02S0800 02710000
*          & DA30ATRL = OFF THEN                                02S0800 02711000
*                                                               02S0800 02712000
@RF00793 ICM   @14,7,DA30BLK+1(BLOCKPTR)                        02S0800 02713000
         BZ    @RF00800                                         02S0800 02714000
         TM    DA30ATRL(BLOCKPTR),B'00000010'                   02S0800 02715000
         BNZ   @RF00800                                         02S0800 02716000
*             DO;                                               02S0801 02717000
*               TUP(10) = ADDR(TU(10));                         02S0802 02718000
         LA    @14,TU+126                                       02S0802 02719000
         ST    @14,TUP+36                                       02S0802 02720000
*               TUP(10)->S99TUKEY = DALBLKSZ;                   02S0803 02721000
         MVC   S99TUKEY(2,@14),@CB00210                         02S0803 02722000
*               TUP(10)->S99TUNUM = 1;                          02S0804 02723000
         MVC   S99TUNUM(2,@14),@CH00035                         02S0804 02724000
*               TUP(10)->S99TULNG = 2;                          02S0805 02725000
         MVC   S99TULNG(2,@14),@CH00062                         02S0805 02726000
*               TUP(10)->S99TUPAR(1:2) = DA30BLK(3:4);          02S0806 02727000
         MVC   S99TUPAR(2,@14),DA30BLK+2(BLOCKPTR)              02S0806 02728000
*             END;                                              02S0807 02729000
*      END;                            /* END PROCESSING SPACE DATA  */ 02730000
*                                                               02S0808 02731000
@RF00800 DS    0H                                               02S0809 02732000
*     IF DA30PERM^='0'B THEN                                    02S0809 02733000
@RF00752 TM    DA30PERM(BLOCKPTR),B'00001000'                   02S0809 02734000
         BZ    @RF00809                                         02S0809 02735000
*       DO;                                                     02S0810 02736000
*         TUP(11) = ADDR(TU(11));                               02S0811 02737000
         LA    @14,TU+140                                       02S0811 02738000
         ST    @14,TUP+40                                       02S0811 02739000
*         TUP(11)->S99TUKEY = DALPERMA;                         02S0812 02740000
         MVC   S99TUKEY(2,@14),@CB01043                         02S0812 02741000
*         TUP(11)->S99TUNUM = 0;                                02S0813 02742000
         SLR   @08,@08                                          02S0813 02743000
         STCM  @08,3,S99TUNUM(@14)                              02S0813 02744000
*         TUP(11)->S99TULNG = 0;                                02S0814 02745000
         STCM  @08,3,S99TULNG(@14)                              02S0814 02746000
*       END;                                                    02S0815 02747000
*                                                               02S0815 02748000
*     IF DA30DMMY^='0'B THEN                                    02S0816 02749000
@RF00809 TM    DA30DMMY(BLOCKPTR),B'00000100'                   02S0816 02750000
         BZ    @RF00816                                         02S0816 02751000
*       DO;                                                     02S0817 02752000
*         TUP(12) = ADDR(TU(12));                               02S0818 02753000
         LA    @14,TU+154                                       02S0818 02754000
         ST    @14,TUP+44                                       02S0818 02755000
*         TUP(12)->S99TUKEY = DALDUMMY;                         02S0819 02756000
         MVC   S99TUKEY(2,@14),@CB00171                         02S0819 02757000
*         TUP(12)->S99TUNUM = 0;                                02S0820 02758000
         SLR   @08,@08                                          02S0820 02759000
         STCM  @08,3,S99TUNUM(@14)                              02S0820 02760000
*         TUP(12)->S99TULNG = 0;                                02S0821 02761000
         STCM  @08,3,S99TULNG(@14)                              02S0821 02762000
*       END;                                                    02S0822 02763000
*                                                               02S0822 02764000
*     IF DA30PGNM^=' ' THEN                                     02S0823 02765000
@RF00816 CLI   DA30PGNM(BLOCKPTR),C' '                          02S0823 02766000
         BE    @RF00823                                         02S0823 02767000
*       DO;                                                     02S0824 02768000
*         TUP(13) = ADDR(TU(13));                               02S0825 02769000
         LA    @14,TU+168                                       02S0825 02770000
         ST    @14,TUP+48                                       02S0825 02771000
*         TUP(13)->S99TUKEY = DALSPGNM;                         02S0826 02772000
         MVC   S99TUKEY(2,@14),@CB00936                         02S0826 02773000
*         TUP(13)->S99TUNUM = 1;                                02S0827 02774000
         MVC   S99TUNUM(2,@14),@CH00035                         02S0827 02775000
*         TUP(13)->S99TULNG = LENGTH(DA30PGNM);                 02S0828 02776000
         MVC   S99TULNG(2,@14),@CH00048                         02S0828 02777000
*         TUP(13)->S99TUPAR(1:LENGTH(DA30PGNM)) = DA30PGNM;     02S0829 02778000
         MVC   S99TUPAR(8,@14),DA30PGNM(BLOCKPTR)               02S0829 02779000
*       END;                                                    02S0830 02780000
*                                                               02S0830 02781000
*     IF DA30FORM^=' ' THEN                                     02S0831 02782000
@RF00823 CLI   DA30FORM(BLOCKPTR),C' '                          02S0831 02783000
         BE    @RF00831                                         02S0831 02784000
*       DO;                                                     02S0832 02785000
*         TUP(14) = ADDR(TU(14));                               02S0833 02786000
         LA    @14,TU+182                                       02S0833 02787000
         ST    @14,TUP+52                                       02S0833 02788000
*         TUP(14)->S99TUKEY = DALSFMNO;                         02S0834 02789000
         MVC   S99TUKEY(2,@14),@CB00938                         02S0834 02790000
*         TUP(14)->S99TUNUM = 1;                                02S0835 02791000
         MVC   S99TUNUM(2,@14),@CH00035                         02S0835 02792000
*         TUP(14)->S99TULNG = LENGTH(DA30FORM);                 02S0836 02793000
         MVC   S99TULNG(2,@14),@CH00059                         02S0836 02794000
*         TUP(14)->S99TUPAR(1:LENGTH(DA30FORM)) = DA30FORM;     02S0837 02795000
         MVC   S99TUPAR(4,@14),DA30FORM(BLOCKPTR)               02S0837 02796000
*       END;                                                    02S0838 02797000
*                                                               02S0838 02798000
*       DO;                                                     02S0839 02799000
@RF00831 DS    0H                                               02S0840 02800000
*         TUP(15) = ADDR(TU(15));                               02S0840 02801000
         LA    @14,TU+196                                       02S0840 02802000
         ST    @14,TUP+56                                       02S0840 02803000
*         TUP(15)->S99TUKEY = DALSYSOU;                         02S0841 02804000
         MVC   S99TUKEY(2,@14),@CB00165                         02S0841 02805000
*         TUP(15)->S99TUNUM = 0;                                02S0842 02806000
         SLR   @08,@08                                          02S0842 02807000
         STCM  @08,3,S99TUNUM(@14)                              02S0842 02808000
*         TUP(15)->S99TULNG = 0;                                02S0843 02809000
         STCM  @08,3,S99TULNG(@14)                              02S0843 02810000
*       END;                                                    02S0844 02811000
*                                                               02S0844 02812000
*     TUP(15) = TUP(15) | '80000000'X;                          02S0845 02813000
         O     @14,@CF01105                                     02S0845 02814000
         ST    @14,TUP+56                                       02S0845 02815000
*    R1 = ADDR(S99RBPTR);              /* GET PARM PTR ADDRESS       */ 02816000
*                                                               02S0846 02817000
         LA    R1,S99RBPTR                                      02S0846 02818000
*     /*MACDATE Y-2 73082*/                                     02S0847 02819000
*     SVC (99);                                                 02S0847 02820000
         SVC   99                                               02S0847 02821000
*    RESPECIFY R15 RESTRICTED;                                  02S0848 02822000
*    IF R15 = 0 THEN                   /* WAS ALLOCATION SUCCESSFUL  */ 02823000
         SLR   @14,@14                                          02S0849 02824000
         CR    R15,@14                                          02S0849 02825000
         BNE   @RF00849                                         02S0849 02826000
*      DO;                             /* YES, RETURN DATA           */ 02827000
*        IF TUP(1) ^= 0 THEN           /* RETURN DSN REQUEST PRESENT?*/ 02828000
         L     @08,TUP                                          02S0851 02829000
         CR    @08,@14                                          02S0851 02830000
         BE    @RF00851                                         02S0851 02831000
*          DO;                         /* YES, RETURN DSNAME         */ 02832000
*            DA30PDSN -> DSNL = TUP(1) -> S99TULNG; /* RETURN DSN LEN*/ 02833000
         L     @14,DA30PDSN(,BLOCKPTR)                          02S0853 02834000
         ICM   @04,12,S99TULNG(@08)                             02S0853 02835000
         SRA   @04,16                                           02S0853 02836000
         STH   @04,DSNL(,@14)                                   02S0853 02837000
*            DA30PDSN -> DSN (1:DA30PDSN -> DSNL) =             02S0854 02838000
*             TUP(1) -> S99TUPAR(1:DA30PDSN -> DSNL);           02S0854 02839000
         BCTR  @04,0                                            02S0854 02840000
         EX    @04,@SM01199                                     02S0854 02841000
*          END;                        /* END RETURN DSNAME          */ 02842000
*        DA30DDN = TUP(2) -> S99TUPAR(1:8); /* RETURN DDNAME         */ 02843000
@RF00851 L     @14,TUP+4                                        02S0856 02844000
         MVC   DA30DDN(8,BLOCKPTR),S99TUPAR(@14)                02S0856 02845000
*      END;                            /* END RETURN OF DATA         */ 02846000
*    ELSE                              /* ALLOCATION NOT SUCCESSFUL  */ 02847000
*      DO;                             /* EXAMINE DYN/ALLOC RTRN CODE*/ 02848000
         B     @RC00849                                         02S0858 02849000
@RF00849 DS    0H                                               02S0859 02850000
*        IF R15 = 8 THEN               /* REQUEST DENIED ?           */ 02851000
         C     R15,@CF00048                                     02S0859 02852000
         BNE   @RF00859                                         02S0859 02853000
*          RETCODE = DRREQDEN;         /* SET RETCODE TO 52          */ 02854000
         LA    RETCODE,52                                       02S0860 02855000
*        IF R15 = 12 THEN              /* INVALID DYN/ALLOC PARMS ?  */ 02856000
@RF00859 C     R15,@CF00034                                     02S0861 02857000
         BNE   @RF00861                                         02S0861 02858000
*          DO;                         /* EXAMINE S99ERROR CODES     */ 02859000
*            IF S99ERROR = RCINPARM THEN /*INVALID PARM IN TEXT UNIT?*/ 02860000
         CLC   S99ERROR(2),@CB00248                             02S0863 02861000
         BNE   @RF00863                                         02S0863 02862000
*              DO;                     /* YES, EXAMINE S99INFO CODE  */ 02863000
*                IF S99INFO = DALDDNAM THEN /* INVALID DDNAME ?      */ 02864000
         CLC   S99INFO(2),@CB00894                              02S0865 02865000
         BNE   @RF00865                                         02S0865 02866000
*                  DA30DARC = DRDDNINV; /* SET DARC TO DRDDNINV      */ 02867000
         MVC   DA30DARC(2,BLOCKPTR),@CH00185                    02S0866 02868000
*                IF S99INFO = DALSPGNM THEN /* INVALID PROGRAM NAME ?*/ 02869000
@RF00865 CLC   S99INFO(2),@CB00936                              02S0867 02870000
         BNE   @RF00867                                         02S0867 02871000
*                  DA30DARC = DRSYSPGM; /* SET DARC TO DRSYSPGM      */ 02872000
         MVC   DA30DARC(2,BLOCKPTR),@CH00191                    02S0868 02873000
*                IF S99INFO = DALSFMNO THEN /* INVALID FORM NUMBER ? */ 02874000
@RF00867 CLC   S99INFO(2),@CB00938                              02S0869 02875000
         BNE   @RF00869                                         02S0869 02876000
*                  DA30DARC = DRSYSFRM; /* SET DARC TO DRSYSFRM      */ 02877000
         MVC   DA30DARC(2,BLOCKPTR),@CH00193                    02S0870 02878000
*              END;                    /* END S99INFO TESTS          */ 02879000
*            ELSE;                     /* NOT INVALID PARM IN TEXT   */ 02880000
@RF00863 DS    0H                                               02S0873 02881000
*              IF DA30DARC = ZERO THEN /* WAS ERROR DETERMINED ?     */ 02882000
@RC00863 LH    @14,DA30DARC(,BLOCKPTR)                          02S0873 02883000
         LTR   @14,@14                                          02S0873 02884000
         BNZ   @RF00873                                         02S0873 02885000
*                DA30DARC = S99ERROR;  /* STORE S99ERROR CODE        */ 02886000
         LH    @14,S99ERROR                                     02S0874 02887000
         N     @14,@CF01193                                     02S0874 02888000
         STH   @14,DA30DARC(,BLOCKPTR)                          02S0874 02889000
*            RETCODE = DRDYNERR;       /* SET DYN/ALLOC RETURN CODE  */ 02890000
@RF00873 LA    RETCODE,12                                       02S0875 02891000
*          END;                        /* END PROCESSING INVALID PARM*/ 02892000
*        IF R15 = 4 THEN               /* ENVIRONMENTAL ERROR ?      */ 02893000
@RF00861 C     R15,@CF00059                                     02S0877 02894000
         BNE   @RF00877                                         02S0877 02895000
*          DO;                         /* YES, DETERMINE TYPE        */ 02896000
*            IF S99ERROR = RCDDUNAV THEN /* DDNAME UNAVAILABLE ?     */ 02897000
         CLC   S99ERROR(2),@CB00280                             02S0879 02898000
         BNE   @RF00879                                         02S0879 02899000
*              RETCODE = DRDDUNAV;     /* SET RETCODE TO 20          */ 02900000
         LA    RETCODE,20                                       02S0880 02901000
*            IF S99ERROR = RCNTUNLC    /* CAN'T UNALLOC TO CONTROL #?*/ 02902000
*              | S99ERROR = RCLIMITS THEN /*WOULD REQUEST EXCEED 1635*/ 02903000
@RF00879 CLC   S99ERROR(2),@CB00290                             02S0881 02904000
         BE    @RT00881                                         02S0881 02905000
         CLC   S99ERROR(2),@CB00300                             02S0881 02906000
         BNE   @RF00881                                         02S0881 02907000
@RT00881 DS    0H                                               02S0882 02908000
*              RETCODE = 16;           /* SET RETCODE TO 16          */ 02909000
         LA    RETCODE,16                                       02S0882 02910000
*            IF S99ERROR = RCDCBRNF THEN /* DCB REFERBACK NOT FOUND ?*/ 02911000
@RF00881 CLC   S99ERROR(2),@CB00302                             02S0883 02912000
         BNE   @RF00883                                         02S0883 02913000
*              RETCODE = 28;           /* SET RETCODE TO 28          */ 02914000
         LA    RETCODE,28                                       02S0884 02915000
*            IF RETCODE = 0 THEN       /* UNDETERMINED ERROR ?       */ 02916000
@RF00883 LTR   RETCODE,RETCODE                                  02S0885 02917000
         BNZ   @RF00885                                         02S0885 02918000
*              DO;                     /* YES                        */ 02919000
*                DA30DARC = S99ERROR;  /* STORE S99ERROR DATA IN DARC*/ 02920000
         LH    @14,S99ERROR                                     02S0887 02921000
         N     @14,@CF01193                                     02S0887 02922000
         STH   @14,DA30DARC(,BLOCKPTR)                          02S0887 02923000
*                RETCODE = DRDYNERR;   /* SET RETCODE TO 12          */ 02924000
         LA    RETCODE,12                                       02S0888 02925000
*              END;                    /* END UNDETERMINED ERROR     */ 02926000
*          END;                        /* END ENVIRONMENTAL ERROR    */ 02927000
@RF00885 DS    0H                                               02S0891 02928000
*      END;                            /* END DYN/ALLOC ERROR PROCESS*/ 02929000
@RF00877 DS    0H                                               02S0892 02930000
*  END;                                /* END VALID PARM LIST PROCESS*/ 02931000
@RC00849 DS    0H                                               02S0893 02932000
*        END;                          /* END CODE 30                */ 02933000
@RC00709 DS    0H                                               01S0894 02934000
*      IF BLOCKPTR->DAIRCODE='0034'X THEN /* IS DAIR CODE 34         */ 02935000
@RF00707 CLC   DAIRCODE(2,BLOCKPTR),@CB00177                    01S0894 02936000
         BNE   @RF00894                                         01S0894 02937000
*        DO;                           /* YES, EXECUTE CODE          */ 02938000
*/********************************************************************/ 02939000
*/*                                                                  */ 02940000
*/* SEGMENT - DAIR34                                                 */ 02941000
*/*                                                                  */ 02942000
*/* DESCRIPTIVE NAME - DAIR CODE 34 PROCESSOR                        */ 02943000
*/*                                                                  */ 02944000
*/* FUNCTION - THIS ROUTINE IS INVOKED WHEN A DAIR34 PARM BLOCK      */ 02945000
*/*            IS PASSED TO IEFDB4D0(DAIR).  DAIR34 IS INVOKED       */ 02946000
*/*            IN ORDER TO ALLOCATE A DUMMY DATA SET USING THE       */ 02947000
*/*            SUPPLIED DCB PARAMETERS AND DDNAME.  THE PURPOSE OF   */ 02948000
*/*            ALLOCATING A DUMMY DD WITH DCB PARMS IS TO PROVIDE    */ 02949000
*/*            AN OBJECT FOR A DCB REFERBACK.  DAIR34 IS ALSO        */ 02950000
*/*            INVOKED TO SEARCH FOR A DDNAME OR DELETE A DD ENTRY.  */ 02951000
*/*                                                                  */ 02952000
*/* OPERATION - IF THE FIRST BYTE OF THE DA34NAME FIELD CONTAINS     */ 02953000
*/*             BLANK OR ZERO, RETCODE IS SET TO 4 (INVALID          */ 02954000
*/*             PARAMETER LIST) AND NO FURTHER PROCESSING IS DONE.   */ 02955000
*/*                                                                  */ 02956000
*/*             IF THE DA34SRCH BIT IN THE DA34CTRL FIELD IS ON,     */ 02957000
*/*             THE DYNAMIC ALLOCATION VERB CODE IS SET TO           */ 02958000
*/*             INFORMATION RETRIEVAL.  TEXT UNITS ARE BUILT TO      */ 02959000
*/*             SEARCH BY DDNAME(THE DA34NAME FIELD).  DYNAMIC       */ 02960000
*/*             ALLOCATION IS INVOKED.  THE RETURN CODE(IN REG 15)   */ 02961000
*/*             IS TESTED TO DETERMINE IF THE DDNAME WAS FOUND.      */ 02962000
*/*             IF FOUND, THE DA34FIND BIT IS TURNED ON.             */ 02963000
*/*             IF REG 15 IS NON-ZERO, DA34FIND BIT IS SET TO OFF (0)*/ 02964000
*/*             IF REG 15 IS 8, RETCODE IS SET                       */ 02965000
*/*             TO 52(REQUEST DENIED BY INSTALLATION EXIT).          */ 02966000
*/*                                                                  */ 02967000
*/*             IF THE DA34CHN BIT IN THE DA34CTRL FIELD IS ON,      */ 02968000
*/*             THE DYNAMIC ALLOCATION VERB CODE IS SET TO           */ 02969000
*/*             ALLOCATION.  TEXT UNITS ARE BUILT TO ALLOCATE A      */ 02970000
*/*             DUMMY DATA SET USING THE SUPPLIED DCB PARAMETERS     */ 02971000
*/*             AND DDNAME.  DYNAMIC ALLOCATION IS INVOKED.  THE     */ 02972000
*/*             RETURN CODE(IN REG 15) IS TESTED FOR NON-ZERO        */ 02973000
*/*             (FAILURE).  IF NON-ZERO RETURN CODE, THE S99ERROR    */ 02974000
*/*             CODE IS TESTED FOR RCDDUNAV. IF S99ERROR WAS RCDDUNAV*/ 02975000
*/*             RETCODE IS SET TO 20(DDNAME REQUESTED IS UNAVAILABLE)*/ 02976000
*/*             IF S99ERROR WAS NOT RCDDUNAV, THE RETURN CODE IS     */ 02977000
*/*             TESTED FOR 8 AND IF 8, RETCODE IS SET TO 52(REQUEST  */ 02978000
*/*             DENIED BY INSTALLATION EXIT).  IF THE RETURN CODE    */ 02979000
*/*             WAS NOT 8, THE S99ERROR IS TESTED FOR INVALID        */ 02980000
*/*             PARAMETER LIST(S99ERROR = RCINPARM).  IF THE ERROR   */ 02981000
*/*             WAS INVALID PARAMETER LIST, THE S99INFO CODE         */ 02982000
*/*             IS EXAMINED TO DETERMINE IF THE FAILING KEY WAS      */ 02983000
*/*             THE DDNAME KEY, IF SO THE DA34DARC IS SET TO         */ 02984000
*/*             DRDDNINV (INVALID DDNAME) AND THE RETCODE IS SET     */ 02985000
*/*             TO 12.  IF NONE OF THE ABOVE ERRORS, THE S99ERROR    */ 02986000
*/*             CODE IS STORED INTO THE DA34DARC FIELD AND           */ 02987000
*/*             RETCODE IS SET TO 12(DYNAMIC ALLOCATION ERROR).      */ 02988000
*/*                                                                  */ 02989000
*/*             IF THE DA34UNCH BIT IN THE DA34CTRL FIELD IS ON,     */ 02990000
*/*             THE DYNAMIC ALLOCATION VERB CODE IS SET TO           */ 02991000
*/*             UNALLOCATION.  TEXT UNITS ARE BUILT TO UNALLOCATE    */ 02992000
*/*             BY DDNAME.  DYNAMIC ALLOCATION IS INVOKED.  THE      */ 02993000
*/*             RETURN CODE(IN REG 15) IS TESTED FOR NON-ZERO        */ 02994000
*/*             (FAILURE).  IF NON-ZERO, THE RETURN CODE IS TESTED   */ 02995000
*/*             FOR 8(REQUEST DENIED BY INSTALLATION EXIT) AND IF    */ 02996000
*/*             FOUND, RETCODE IS SET TO 52.  OTHERWISE, RETCODE     */ 02997000
*/*             IS SET TO 28(DDNAME NOT FOUND).                      */ 02998000
*/*                                                                  */ 02999000
*/*             IF NONE OF THE FUNCTION BITS IN THE DA34CTRL FIELD   */ 03000000
*/*             ARE ON, RETCODE IS SET TO 4(INVALID PARAMETER LIST). */ 03001000
*/*                                                                  */ 03002000
*/* ENTRY - DAIR34(INCLUDED SEGMENT)                                 */ 03003000
*/*                                                                  */ 03004000
*/* INPUT DATA - DAIR34 PARM BLOCK, SVC99 PARM LIST                  */ 03005000
*/*                                                                  */ 03006000
*/* EXITS - ALL ARE TO NEXT SEQUENTIAL INSTRUCTION                   */ 03007000
*/*                                                                  */ 03008000
*/*  NORMAL -                                                        */ 03009000
*/*   OUTPUT - DA34FIND BIT SET FOR SEARCH FUNCTION                  */ 03010000
*/*                                                                  */ 03011000
*/*   RETURN CODE - RETCODE = 0 SUCCESSFUL                           */ 03012000
*/*                                                                  */ 03013000
*/*  ERROR                                                           */ 03014000
*/*   OUTPUT - DA34DARC(SEE OPERATION TEXT)                          */ 03015000
*/*                                                                  */ 03016000
*/*   RETURN CODE - RETCODE = 4 INVALID PARAMETER LIST               */ 03017000
*/*                          12 DYNAMIC ALLOCATION ERROR             */ 03018000
*/*                          52 REQUEST DENIED BY INSTALLATION EXIT  */ 03019000
*/*                                                                  */ 03020000
*/********************************************************************/ 03021000
*IF DA34NAME(1) = ' ' | DA34NAME(1) = '00'X THEN /* VALID LIST NAME ?*/ 03022000
         CLI   DA34NAME(BLOCKPTR),C' '                          02S0896 03023000
         BE    @RT00896                                         02S0896 03024000
         CLI   DA34NAME(BLOCKPTR),X'00'                         02S0896 03025000
         BNE   @RF00896                                         02S0896 03026000
@RT00896 DS    0H                                               02S0897 03027000
*  RETCODE = DRINVLST;                 /* NO, INDICATE INVALID LIST  */ 03028000
         LA    RETCODE,4                                        02S0897 03029000
*ELSE                                  /* LIST NAME PRESENT          */ 03030000
*  DO;                                 /* PROCESS LIST               */ 03031000
         B     @RC00896                                         02S0898 03032000
@RF00896 DS    0H                                               02S0899 03033000
*    IF DA34SRCH = ON THEN             /* SEARCH FOR DDNAME ?        */ 03034000
         TM    DA34SRCH(BLOCKPTR),B'10000000'                   02S0899 03035000
         BNO   @RF00899                                         02S0899 03036000
*      DO;                             /* YES                        */ 03037000
*        S99VERB = S99VRBIN;           /* SET VERB TO INFO RETRIEVAL */ 03038000
*                                                               02S0901 03039000
*                                                               02S0901 03040000
         MVI   S99VERB,X'07'                                    02S0901 03041000
*           DO;                                                 02S0902 03042000
*             TUP(1) = ADDR(TU(1));                             02S0903 03043000
         LA    @14,TU                                           02S0903 03044000
         ST    @14,TUP                                          02S0903 03045000
*             TUP(1)->S99TUKEY = DINDDNAM;                      02S0904 03046000
         MVC   S99TUKEY(2,@14),@CB00894                         02S0904 03047000
*             TUP(1)->S99TUNUM = 1;                             02S0905 03048000
         MVC   S99TUNUM(2,@14),@CH00035                         02S0905 03049000
*             TUP(1)->S99TULNG = LENGTH(DA34NAME);              02S0906 03050000
         MVC   S99TULNG(2,@14),@CH00048                         02S0906 03051000
*             TUP(1)->S99TUPAR(1:LENGTH(DA34NAME)) = DA34NAME;  02S0907 03052000
         MVC   S99TUPAR(8,@14),DA34NAME(BLOCKPTR)               02S0907 03053000
*           END;                                                02S0908 03054000
*                                                               02S0908 03055000
*         TUP(1) = TUP(1) | '80000000'X;                        02S0909 03056000
         O     @14,@CF01105                                     02S0909 03057000
         ST    @14,TUP                                          02S0909 03058000
*        R1 = ADDR(S99RBPTR);          /* GET PARM PTR ADDRESS       */ 03059000
*                                                               02S0910 03060000
         LA    R1,S99RBPTR                                      02S0910 03061000
*         /*MACDATE Y-2 73082*/                                 02S0911 03062000
*         SVC (99);                                             02S0911 03063000
         SVC   99                                               02S0911 03064000
*        RESPECIFY R15 RESTRICTED;     /* RESTRICT REG 15 USAGE      */ 03065000
*        IF R15 = 0 THEN               /* WAS DDNAME FOUND ?         */ 03066000
         LTR   R15,R15                                          02S0913 03067000
         BNZ   @RF00913                                         02S0913 03068000
*          DA34FIND = ON;              /* YES, INDICATE DDNAME FOUND */ 03069000
         OI    DA34FIND(BLOCKPTR),B'10000000'                   02S0914 03070000
*        ELSE                          /* ERROR ENCOUNTERED          */ 03071000
*          DA34FIND = OFF;             /* INDICATE NOT FOUND         */ 03072000
         B     @RC00913                                         02S0915 03073000
@RF00913 NI    DA34FIND(BLOCKPTR),B'01111111'                   02S0915 03074000
*        IF R15 = 8 THEN               /* REQUEST DENIED ?           */ 03075000
@RC00913 C     R15,@CF00048                                     02S0916 03076000
         BNE   @RF00916                                         02S0916 03077000
*          RETCODE = DRREQDEN;         /* INDICATE REQUEST DENIED       03078000
*                                         BY INSTALLATION EXIT       */ 03079000
         LA    RETCODE,52                                       02S0917 03080000
*      END;                            /* END DDNAME SEARCH          */ 03081000
*    ELSE                              /* NOT DDNAME SEARCH          */ 03082000
*      IF DA34CHN = ON THEN            /* ADD NEW DDNAME ?           */ 03083000
         B     @RC00899                                         02S0919 03084000
@RF00899 TM    DA34CHN(BLOCKPTR),B'01000000'                    02S0919 03085000
         BNO   @RF00919                                         02S0919 03086000
*        DO;                           /* BUILD TEXT UNITS           */ 03087000
*          S99VERB = S99VRBAL;         /* SET VERB CODE TO ALLOCATE  */ 03088000
*                                                               02S0921 03089000
*                                                               02S0921 03090000
         MVI   S99VERB,X'01'                                    02S0921 03091000
*             DO;                                               02S0922 03092000
*               TUP(1) = ADDR(TU(1));                           02S0923 03093000
         LA    @14,TU                                           02S0923 03094000
         ST    @14,TUP                                          02S0923 03095000
*               TUP(1)->S99TUKEY = DALDDNAM;                    02S0924 03096000
         MVC   S99TUKEY(2,@14),@CB00894                         02S0924 03097000
*               TUP(1)->S99TUNUM = 1;                           02S0925 03098000
         LA    @08,1                                            02S0925 03099000
         STCM  @08,3,S99TUNUM(@14)                              02S0925 03100000
*               TUP(1)->S99TULNG = LENGTH(DA34NAME);            02S0926 03101000
         MVC   S99TULNG(2,@14),@CH00048                         02S0926 03102000
*               TUP(1)->S99TUPAR(1:LENGTH(DA34NAME)) = DA34NAME;        03103000
         MVC   S99TUPAR(8,@14),DA34NAME(BLOCKPTR)               02S0927 03104000
*             END;                                              02S0928 03105000
*                                                               02S0928 03106000
*             DO;                                               02S0929 03107000
*               TUP(2) = ADDR(TU(2));                           02S0930 03108000
         LA    @14,TU+14                                        02S0930 03109000
         ST    @14,TUP+4                                        02S0930 03110000
*               TUP(2)->S99TUKEY = DALDUMMY;                    02S0931 03111000
         MVC   S99TUKEY(2,@14),@CB00171                         02S0931 03112000
*               TUP(2)->S99TUNUM = 0;                           02S0932 03113000
         SLR   @04,@04                                          02S0932 03114000
         STCM  @04,3,S99TUNUM(@14)                              02S0932 03115000
*               TUP(2)->S99TULNG = 0;                           02S0933 03116000
         STCM  @04,3,S99TULNG(@14)                              02S0933 03117000
*             END;                                              02S0934 03118000
*                                                               02S0934 03119000
*             DO;                                               02S0935 03120000
*               TUP(3) = ADDR(TU(3));                           02S0936 03121000
         LA    @14,TU+28                                        02S0936 03122000
         ST    @14,TUP+8                                        02S0936 03123000
*               TUP(3)->S99TUKEY = DALPERMA;                    02S0937 03124000
         MVC   S99TUKEY(2,@14),@CB01043                         02S0937 03125000
*               TUP(3)->S99TUNUM = 0;                           02S0938 03126000
         STCM  @04,3,S99TUNUM(@14)                              02S0938 03127000
*               TUP(3)->S99TULNG = 0;                           02S0939 03128000
         STCM  @04,3,S99TULNG(@14)                              02S0939 03129000
*             END;                                              02S0940 03130000
*                                                               02S0940 03131000
*           IF DAILABEL^=ZERO THEN                              02S0941 03132000
         L     @14,DA34ADDR(,BLOCKPTR)                          02S0941 03133000
         CLI   DAILABEL(@14),0                                  02S0941 03134000
         BE    @RF00941                                         02S0941 03135000
*             DO;                                               02S0942 03136000
*               TUP(4) = ADDR(TU(4));                           02S0943 03137000
         LA    @04,TU+42                                        02S0943 03138000
         ST    @04,TUP+12                                       02S0943 03139000
*               TUP(4)->S99TUKEY = DALINOUT;                    02S0944 03140000
         MVC   S99TUKEY(2,@04),@CB00950                         02S0944 03141000
*               TUP(4)->S99TUNUM = 1;                           02S0945 03142000
         STCM  @08,3,S99TUNUM(@04)                              02S0945 03143000
*               TUP(4)->S99TULNG = LENGTH(DAILABEL);            02S0946 03144000
         STCM  @08,3,S99TULNG(@04)                              02S0946 03145000
*               TUP(4)->S99TUPAR(1:LENGTH(DAILABEL)) = DAILABEL;        03146000
         MVC   S99TUPAR(1,@04),DAILABEL(@14)                    02S0947 03147000
*             END;                                              02S0948 03148000
*          IF DAIEXPDT ^= ZERO THEN    /* EXPIRATION DATE PRESENT ?  */ 03149000
@RF00941 L     @14,DA34ADDR(,BLOCKPTR)                          02S0949 03150000
         ICM   @08,7,DAIEXPDT(@14)                              02S0949 03151000
         BZ    @RF00949                                         02S0949 03152000
*            DO;                       /* YES, CONVERT TO USABLE FORM*/ 03153000
*              CVD (DAIYEAR,TEMPAREA(1:2)); /* CONVERT TO DECIMAL    */ 03154000
         SLR   @08,@08                                          02S0951 03155000
         IC    @08,DAIYEAR(,@14)                                02S0951 03156000
         CVD   @08,@TS00001                                     02S0951 03157000
         MVC   TEMPAREA(2),@TS00001+6                           02S0951 03158000
*              TEMPAREA(2) = TEMPAREA(2) | '0F'X;               02S0952 03159000
         OI    TEMPAREA+1,X'0F'                                 02S0952 03160000
*              UNPK (YY,TEMPAREA(1:2)); /* UNPACK TO EBCDIC          */ 03161000
         UNPK  YY(2),TEMPAREA(2)                                02S0953 03162000
*              CVD (DAIDAY,TEMPAREA);  /* CONVERT TO DECIMAL         */ 03163000
         LH    @14,DAIDAY(,@14)                                 02S0954 03164000
         CVD   @14,@TS00001                                     02S0954 03165000
         MVC   TEMPAREA(3),@TS00001+5                           02S0954 03166000
*              TEMPAREA(3) = TEMPAREA(3) | '0F'X;               02S0955 03167000
         OI    TEMPAREA+2,X'0F'                                 02S0955 03168000
*              UNPK (DDD,TEMPAREA);    /* UNPACK TO EBCDIC           */ 03169000
*                                                               02S0956 03170000
         UNPK  DDD(3),TEMPAREA(3)                               02S0956 03171000
*                 DO;                                           02S0957 03172000
*                   TUP(5) = ADDR(TUEXPDT);                     02S0958 03173000
         LA    @14,TUEXPDT                                      02S0958 03174000
         ST    @14,TUP+16                                       02S0958 03175000
*                   TUP(5)->S99TUKEY = DALEXPDT;                02S0959 03176000
         MVC   S99TUKEY(2,@14),@CB00952                         02S0959 03177000
*                   TUP(5)->S99TUNUM = 1;                       02S0960 03178000
         MVC   S99TUNUM(2,@14),@CH00035                         02S0960 03179000
*                   TUP(5)->S99TULNG = LENGTH(EXPDTPAR);        02S0961 03180000
         MVC   S99TULNG(2,@14),@CH01104                         02S0961 03181000
*                   TUP(5)->S99TUPAR(1:LENGTH(EXPDTPAR)) = EXPDTPAR;    03182000
         MVC   S99TUPAR(5,@14),EXPDTPAR                         02S0962 03183000
*                 END;                                          02S0963 03184000
*            END;                      /* END PROCESSING EXPIRATION  */ 03185000
*                                                               02S0964 03186000
*           IF DAIBUFNO^=ZERO THEN                              02S0965 03187000
@RF00949 L     @14,DA34ADDR(,BLOCKPTR)                          02S0965 03188000
         CLI   DAIBUFNO(@14),0                                  02S0965 03189000
         BE    @RF00965                                         02S0965 03190000
*             DO;                                               02S0966 03191000
*               TUP(6) = ADDR(TU(6));                           02S0967 03192000
         LA    @08,TU+70                                        02S0967 03193000
         ST    @08,TUP+20                                       02S0967 03194000
*               TUP(6)->S99TUKEY = DALBUFNO;                    02S0968 03195000
         MVC   S99TUKEY(2,@08),@CB00177                         02S0968 03196000
*               TUP(6)->S99TUNUM = 1;                           02S0969 03197000
         LA    @04,1                                            02S0969 03198000
         STCM  @04,3,S99TUNUM(@08)                              02S0969 03199000
*               TUP(6)->S99TULNG = LENGTH(DAIBUFNO);            02S0970 03200000
         STCM  @04,3,S99TULNG(@08)                              02S0970 03201000
*               TUP(6)->S99TUPAR(1:LENGTH(DAIBUFNO)) = DAIBUFNO;        03202000
         MVC   S99TUPAR(1,@08),DAIBUFNO(@14)                    02S0971 03203000
*             END;                                              02S0972 03204000
*          WORK = DAIBFTEK & 'FC'X;    /* CLEAR BFALN BITS           */ 03205000
*                                                               02S0973 03206000
@RF00965 L     @14,DA34ADDR(,BLOCKPTR)                          02S0973 03207000
         MVC   WORK(1),DAIBFTEK(@14)                            02S0973 03208000
         NI    WORK,X'FC'                                       02S0973 03209000
*           IF WORK^=ZERO THEN                                  02S0974 03210000
         CLI   WORK,0                                           02S0974 03211000
         BE    @RF00974                                         02S0974 03212000
*             DO;                                               02S0975 03213000
*               TUP(7) = ADDR(TU(7));                           02S0976 03214000
         LA    @14,TU+84                                        02S0976 03215000
         ST    @14,TUP+24                                       02S0976 03216000
*               TUP(7)->S99TUKEY = DALBFTEK;                    02S0977 03217000
         MVC   S99TUKEY(2,@14),@CB00975                         02S0977 03218000
*               TUP(7)->S99TUNUM = 1;                           02S0978 03219000
         LA    @08,1                                            02S0978 03220000
         STCM  @08,3,S99TUNUM(@14)                              02S0978 03221000
*               TUP(7)->S99TULNG = LENGTH(WORK);                02S0979 03222000
         STCM  @08,3,S99TULNG(@14)                              02S0979 03223000
*               TUP(7)->S99TUPAR(1:LENGTH(WORK)) = WORK;        02S0980 03224000
         MVC   S99TUPAR(1,@14),WORK                             02S0980 03225000
*             END;                                              02S0981 03226000
*          WORK = DAIBFTEK & '03'X;    /* CLEAR BFTEK BITS           */ 03227000
*                                                               02S0982 03228000
@RF00974 L     @14,DA34ADDR(,BLOCKPTR)                          02S0982 03229000
         MVC   WORK(1),DAIBFTEK(@14)                            02S0982 03230000
         NI    WORK,X'03'                                       02S0982 03231000
*           IF WORK^=ZERO THEN                                  02S0983 03232000
         CLI   WORK,0                                           02S0983 03233000
         BE    @RF00983                                         02S0983 03234000
*             DO;                                               02S0984 03235000
*               TUP(8) = ADDR(TU(8));                           02S0985 03236000
         LA    @14,TU+98                                        02S0985 03237000
         ST    @14,TUP+28                                       02S0985 03238000
*               TUP(8)->S99TUKEY = DALBFALN;                    02S0986 03239000
         MVC   S99TUKEY(2,@14),@CB00973                         02S0986 03240000
*               TUP(8)->S99TUNUM = 1;                           02S0987 03241000
         LA    @08,1                                            02S0987 03242000
         STCM  @08,3,S99TUNUM(@14)                              02S0987 03243000
*               TUP(8)->S99TULNG = LENGTH(WORK);                02S0988 03244000
         STCM  @08,3,S99TULNG(@14)                              02S0988 03245000
*               TUP(8)->S99TUPAR(1:LENGTH(WORK)) = WORK;        02S0989 03246000
         MVC   S99TUPAR(1,@14),WORK                             02S0989 03247000
*             END;                                              02S0990 03248000
*                                                               02S0990 03249000
*           IF DAIBUFL^=ZERO THEN                               02S0991 03250000
@RF00983 L     @14,DA34ADDR(,BLOCKPTR)                          02S0991 03251000
         LH    @14,DAIBUFL(,@14)                                02S0991 03252000
         LTR   @14,@14                                          02S0991 03253000
         BZ    @RF00991                                         02S0991 03254000
*             DO;                                               02S0992 03255000
*               TUP(9) = ADDR(TU(9));                           02S0993 03256000
         LA    @08,TU+112                                       02S0993 03257000
         ST    @08,TUP+32                                       02S0993 03258000
*               TUP(9)->S99TUKEY = DALBUFL;                     02S0994 03259000
         MVC   S99TUKEY(2,@08),@CB00980                         02S0994 03260000
*               TUP(9)->S99TUNUM = 1;                           02S0995 03261000
         MVC   S99TUNUM(2,@08),@CH00035                         02S0995 03262000
*               TUP(9)->S99TULNG = LENGTH(DAIBUFL);             02S0996 03263000
         MVC   S99TULNG(2,@08),@CH00062                         02S0996 03264000
*               TUP(9)->S99TUPAR(1:LENGTH(DAIBUFL)) = DAIBUFL;  02S0997 03265000
         STCM  @14,3,S99TUPAR(@08)                              02S0997 03266000
*             END;                                              02S0998 03267000
*                                                               02S0998 03268000
*           IF DAIEROPT^=ZERO THEN                              02S0999 03269000
@RF00991 L     @14,DA34ADDR(,BLOCKPTR)                          02S0999 03270000
         CLI   DAIEROPT(@14),0                                  02S0999 03271000
         BE    @RF00999                                         02S0999 03272000
*             DO;                                               02S1000 03273000
*               TUP(10) = ADDR(TU(10));                         02S1001 03274000
         LA    @08,TU+126                                       02S1001 03275000
         ST    @08,TUP+36                                       02S1001 03276000
*               TUP(10)->S99TUKEY = DALEROPT;                   02S1002 03277000
         MVC   S99TUKEY(2,@08),@CB01001                         02S1002 03278000
*               TUP(10)->S99TUNUM = 1;                          02S1003 03279000
         LA    @04,1                                            02S1003 03280000
         STCM  @04,3,S99TUNUM(@08)                              02S1003 03281000
*               TUP(10)->S99TULNG = LENGTH(DAIEROPT);           02S1004 03282000
         STCM  @04,3,S99TULNG(@08)                              02S1004 03283000
*               TUP(10)->S99TUPAR(1:LENGTH(DAIEROPT)) = DAIEROPT;       03284000
         MVC   S99TUPAR(1,@08),DAIEROPT(@14)                    02S1005 03285000
*             END;                                              02S1006 03286000
*                                                               02S1006 03287000
*           IF DAIKEYLE^=ZERO THEN                              02S1007 03288000
@RF00999 L     @14,DA34ADDR(,BLOCKPTR)                          02S1007 03289000
         CLI   DAIKEYLE(@14),0                                  02S1007 03290000
         BE    @RF01007                                         02S1007 03291000
*             DO;                                               02S1008 03292000
*               TUP(11) = ADDR(TU(11));                         02S1009 03293000
         LA    @08,TU+140                                       02S1009 03294000
         ST    @08,TUP+40                                       02S1009 03295000
*               TUP(11)->S99TUKEY = DALKYLEN;                   02S1010 03296000
         MVC   S99TUKEY(2,@08),@CB01007                         02S1010 03297000
*               TUP(11)->S99TUNUM = 1;                          02S1011 03298000
         LA    @04,1                                            02S1011 03299000
         STCM  @04,3,S99TUNUM(@08)                              02S1011 03300000
*               TUP(11)->S99TULNG = LENGTH(DAIKEYLE);           02S1012 03301000
         STCM  @04,3,S99TULNG(@08)                              02S1012 03302000
*               TUP(11)->S99TUPAR(1:LENGTH(DAIKEYLE)) = DAIKEYLE;       03303000
         MVC   S99TUPAR(1,@08),DAIKEYLE(@14)                    02S1013 03304000
*             END;                                              02S1014 03305000
*                                                               02S1014 03306000
*           IF DAIRECFM^=ZERO THEN                              02S1015 03307000
@RF01007 L     @14,DA34ADDR(,BLOCKPTR)                          02S1015 03308000
         CLI   DAIRECFM(@14),0                                  02S1015 03309000
         BE    @RF01015                                         02S1015 03310000
*             DO;                                               02S1016 03311000
*               TUP(12) = ADDR(TU(12));                         02S1017 03312000
         LA    @08,TU+154                                       02S1017 03313000
         ST    @08,TUP+44                                       02S1017 03314000
*               TUP(12)->S99TUKEY = DALRECFM;                   02S1018 03315000
         MVC   S99TUKEY(2,@08),@CB01025                         02S1018 03316000
*               TUP(12)->S99TUNUM = 1;                          02S1019 03317000
         LA    @04,1                                            02S1019 03318000
         STCM  @04,3,S99TUNUM(@08)                              02S1019 03319000
*               TUP(12)->S99TULNG = LENGTH(DAIRECFM);           02S1020 03320000
         STCM  @04,3,S99TULNG(@08)                              02S1020 03321000
*               TUP(12)->S99TUPAR(1:LENGTH(DAIRECFM)) = DAIRECFM;       03322000
         MVC   S99TUPAR(1,@08),DAIRECFM(@14)                    02S1021 03323000
*             END;                                              02S1022 03324000
*                                                               02S1022 03325000
*           IF DAIOPTCD^=ZERO THEN                              02S1023 03326000
@RF01015 L     @14,DA34ADDR(,BLOCKPTR)                          02S1023 03327000
         CLI   DAIOPTCD(@14),0                                  02S1023 03328000
         BE    @RF01023                                         02S1023 03329000
*             DO;                                               02S1024 03330000
*               TUP(13) = ADDR(TU(13));                         02S1025 03331000
         LA    @08,TU+168                                       02S1025 03332000
         ST    @08,TUP+48                                       02S1025 03333000
*               TUP(13)->S99TUKEY = DALOPTCD;                   02S1026 03334000
         MVC   S99TUKEY(2,@08),@CB01017                         02S1026 03335000
*               TUP(13)->S99TUNUM = 1;                          02S1027 03336000
         LA    @04,1                                            02S1027 03337000
         STCM  @04,3,S99TUNUM(@08)                              02S1027 03338000
*               TUP(13)->S99TULNG = LENGTH(DAIOPTCD);           02S1028 03339000
         STCM  @04,3,S99TULNG(@08)                              02S1028 03340000
*               TUP(13)->S99TUPAR(1:LENGTH(DAIOPTCD)) = DAIOPTCD;       03341000
         MVC   S99TUPAR(1,@08),DAIOPTCD(@14)                    02S1029 03342000
*             END;                                              02S1030 03343000
*                                                               02S1030 03344000
*           IF DAIBLKSI^=ZERO THEN                              02S1031 03345000
@RF01023 L     @14,DA34ADDR(,BLOCKPTR)                          02S1031 03346000
         LH    @14,DAIBLKSI(,@14)                               02S1031 03347000
         LTR   @14,@14                                          02S1031 03348000
         BZ    @RF01031                                         02S1031 03349000
*             DO;                                               02S1032 03350000
*               TUP(14) = ADDR(TU(14));                         02S1033 03351000
         LA    @08,TU+182                                       02S1033 03352000
         ST    @08,TUP+52                                       02S1033 03353000
*               TUP(14)->S99TUKEY = DALBLKSZ;                   02S1034 03354000
         MVC   S99TUKEY(2,@08),@CB00210                         02S1034 03355000
*               TUP(14)->S99TUNUM = 1;                          02S1035 03356000
         MVC   S99TUNUM(2,@08),@CH00035                         02S1035 03357000
*               TUP(14)->S99TULNG = LENGTH(DAIBLKSI);           02S1036 03358000
         MVC   S99TULNG(2,@08),@CH00062                         02S1036 03359000
*               TUP(14)->S99TUPAR(1:LENGTH(DAIBLKSI)) = DAIBLKSI;       03360000
         STCM  @14,3,S99TUPAR(@08)                              02S1037 03361000
*             END;                                              02S1038 03362000
*                                                               02S1038 03363000
*           IF DAILRECL^=ZERO THEN                              02S1039 03364000
@RF01031 L     @14,DA34ADDR(,BLOCKPTR)                          02S1039 03365000
         LH    @14,DAILRECL(,@14)                               02S1039 03366000
         LTR   @14,@14                                          02S1039 03367000
         BZ    @RF01039                                         02S1039 03368000
*             DO;                                               02S1040 03369000
*               TUP(15) = ADDR(TU(15));                         02S1041 03370000
         LA    @08,TU+196                                       02S1041 03371000
         ST    @08,TUP+56                                       02S1041 03372000
*               TUP(15)->S99TUKEY = DALLRECL;                   02S1042 03373000
         MVC   S99TUKEY(2,@08),@CB01011                         02S1042 03374000
*               TUP(15)->S99TUNUM = 1;                          02S1043 03375000
         MVC   S99TUNUM(2,@08),@CH00035                         02S1043 03376000
*               TUP(15)->S99TULNG = LENGTH(DAILRECL);           02S1044 03377000
         MVC   S99TULNG(2,@08),@CH00062                         02S1044 03378000
*               TUP(15)->S99TUPAR(1:LENGTH(DAILRECL)) = DAILRECL;       03379000
         STCM  @14,3,S99TUPAR(@08)                              02S1045 03380000
*             END;                                              02S1046 03381000
*                                                               02S1046 03382000
*           IF DAINCP^=ZERO THEN                                02S1047 03383000
@RF01039 L     @14,DA34ADDR(,BLOCKPTR)                          02S1047 03384000
         CLI   DAINCP(@14),0                                    02S1047 03385000
         BE    @RF01047                                         02S1047 03386000
*             DO;                                               02S1048 03387000
*               TUP(16) = ADDR(TU(16));                         02S1049 03388000
         LA    @08,TU+210                                       02S1049 03389000
         ST    @08,TUP+60                                       02S1049 03390000
*               TUP(16)->S99TUKEY = DALNCP;                     02S1050 03391000
         MVC   S99TUKEY(2,@08),@CB01015                         02S1050 03392000
*               TUP(16)->S99TUNUM = 1;                          02S1051 03393000
         LA    @04,1                                            02S1051 03394000
         STCM  @04,3,S99TUNUM(@08)                              02S1051 03395000
*               TUP(16)->S99TULNG = LENGTH(DAINCP);             02S1052 03396000
         STCM  @04,3,S99TULNG(@08)                              02S1052 03397000
*               TUP(16)->S99TUPAR(1:LENGTH(DAINCP)) = DAINCP;   02S1053 03398000
         MVC   S99TUPAR(1,@08),DAINCP(@14)                      02S1053 03399000
*             END;                                              02S1054 03400000
*                                                               02S1054 03401000
*           TUP(16) = TUP(16) | '80000000'X;                    02S1055 03402000
@RF01047 L     @14,TUP+60                                       02S1055 03403000
         O     @14,@CF01105                                     02S1055 03404000
         ST    @14,TUP+60                                       02S1055 03405000
*          R1 = ADDR(S99RBPTR);        /* GET PARM PTR ADDRESS       */ 03406000
*                                                               02S1056 03407000
         LA    R1,S99RBPTR                                      02S1056 03408000
*           /*MACDATE Y-2 73082*/                               02S1057 03409000
*           SVC (99);                                           02S1057 03410000
         SVC   99                                               02S1057 03411000
*          RESPECIFY R15 RESTRICTED;   /* RESTRICT REG 15 USAGE      */ 03412000
*          IF R15 ^= 0 THEN            /* WAS DYN/ALLOC SUCCESSFUL ? */ 03413000
         LTR   R15,R15                                          02S1059 03414000
         BZ    @RF01059                                         02S1059 03415000
*            IF S99ERROR = RCDDUNAV THEN /* IS DDNAME UNAVAILABLE ?  */ 03416000
         CLC   S99ERROR(2),@CB00280                             02S1060 03417000
         BNE   @RF01060                                         02S1060 03418000
*              RETCODE = DRDDUNAV;     /* SET RETCODE TO 20          */ 03419000
         LA    RETCODE,20                                       02S1061 03420000
*            ELSE                      /* NOT DDNAME UNAVAILABLE     */ 03421000
*              IF R15 = 8 THEN         /* WAS REQUEST DENIED         */ 03422000
         B     @RC01060                                         02S1062 03423000
@RF01060 C     R15,@CF00048                                     02S1062 03424000
         BNE   @RF01062                                         02S1062 03425000
*                RETCODE = DRREQDEN;   /* SET RETCODE TO 52          */ 03426000
         LA    RETCODE,52                                       02S1063 03427000
*              ELSE                    /* NOT REQUEST DENIED         */ 03428000
*                DO;                   /* DETERMINE TYPE OF ERROR    */ 03429000
         B     @RC01062                                         02S1064 03430000
@RF01062 DS    0H                                               02S1065 03431000
*                  IF S99ERROR = RCINPARM & /* WAS LIST INVALID ?    */ 03432000
*                    S99INFO = DALDDNAM THEN /* INVALID DDNAME ?     */ 03433000
         CLC   S99ERROR(2),@CB00248                             02S1065 03434000
         BNE   @RF01065                                         02S1065 03435000
         CLC   S99INFO(2),@CB00894                              02S1065 03436000
         BNE   @RF01065                                         02S1065 03437000
*                    DA34DARC = DRDDNINV; /* INDICATE INVALID DDNAME */ 03438000
         MVC   DA34DARC(2,BLOCKPTR),@CH00185                    02S1066 03439000
*                  ELSE                /* NOT INVALID DDNAME         */ 03440000
*                    DA34DARC = S99ERROR; /* STORE S99ERROR IN DARC  */ 03441000
         B     @RC01065                                         02S1067 03442000
@RF01065 LH    @14,S99ERROR                                     02S1067 03443000
         N     @14,@CF01193                                     02S1067 03444000
         STH   @14,DA34DARC(,BLOCKPTR)                          02S1067 03445000
*                  RETCODE = DRDYNERR; /* INDICATE DYN/ALLOC ERROR   */ 03446000
@RC01065 LA    RETCODE,12                                       02S1068 03447000
*                END;                  /* END ERROR DETERMINATION    */ 03448000
*        END;                          /* END ADDING NEW DDNAME      */ 03449000
*      ELSE                            /* ELSE NOT CHAIN             */ 03450000
*        IF DA34UNCH = ON THEN         /* DELETE DDNAME ?            */ 03451000
         B     @RC00919                                         02S1071 03452000
@RF00919 TM    DA34UNCH(BLOCKPTR),B'00100000'                   02S1071 03453000
         BNO   @RF01071                                         02S1071 03454000
*          DO;                         /* YES                        */ 03455000
*            S99VERB = S99VRBUN;       /* SET VERB CODE TO UNALLOC   */ 03456000
*                                                               02S1073 03457000
*                                                               02S1073 03458000
         MVI   S99VERB,X'02'                                    02S1073 03459000
*               DO;                                             02S1074 03460000
*                 TUP(1) = ADDR(TU(1));                         02S1075 03461000
         LA    @14,TU                                           02S1075 03462000
         ST    @14,TUP                                          02S1075 03463000
*                 TUP(1)->S99TUKEY = DUNDDNAM;                  02S1076 03464000
         MVC   S99TUKEY(2,@14),@CB00894                         02S1076 03465000
*                 TUP(1)->S99TUNUM = 1;                         02S1077 03466000
         MVC   S99TUNUM(2,@14),@CH00035                         02S1077 03467000
*                 TUP(1)->S99TULNG = LENGTH(DA34NAME);          02S1078 03468000
         MVC   S99TULNG(2,@14),@CH00048                         02S1078 03469000
*                 TUP(1)->S99TUPAR(1:LENGTH(DA34NAME)) = DA34NAME;      03470000
         MVC   S99TUPAR(8,@14),DA34NAME(BLOCKPTR)               02S1079 03471000
*               END;                                            02S1080 03472000
*                                                               02S1080 03473000
*               DO;                                             02S1081 03474000
*                 TUP(2) = ADDR(TU(2));                         02S1082 03475000
         LA    @14,TU+14                                        02S1082 03476000
         ST    @14,TUP+4                                        02S1082 03477000
*                 TUP(2)->S99TUKEY = DUNUNALC;                  02S1083 03478000
         MVC   S99TUKEY(2,@14),@CB00905                         02S1083 03479000
*                 TUP(2)->S99TUNUM = 0;                         02S1084 03480000
         SLR   @08,@08                                          02S1084 03481000
         STCM  @08,3,S99TUNUM(@14)                              02S1084 03482000
*                 TUP(2)->S99TULNG = 0;                         02S1085 03483000
         STCM  @08,3,S99TULNG(@14)                              02S1085 03484000
*               END;                                            02S1086 03485000
*                                                               02S1086 03486000
*             TUP(2) = TUP(2) | '80000000'X;                    02S1087 03487000
         O     @14,@CF01105                                     02S1087 03488000
         ST    @14,TUP+4                                        02S1087 03489000
*            R1 = ADDR(S99RBPTR);      /* GET PARM PTR ADDRESS       */ 03490000
*                                                               02S1088 03491000
         LA    R1,S99RBPTR                                      02S1088 03492000
*             /*MACDATE Y-2 73082*/                             02S1089 03493000
*             SVC (99);                                         02S1089 03494000
         SVC   99                                               02S1089 03495000
*            RESPECIFY R15 RESTRICTED; /* RESTRICT REG 15 USAGE      */ 03496000
*            IF R15 ^= 0 THEN          /* WAS DYN/ALLOC SUCCESSFUL ? */ 03497000
         LTR   R15,R15                                          02S1091 03498000
         BZ    @RF01091                                         02S1091 03499000
*              IF R15 = 8 THEN         /* WAS REQUEST DENIED ?       */ 03500000
         C     R15,@CF00048                                     02S1092 03501000
         BNE   @RF01092                                         02S1092 03502000
*                RETCODE = DRREQDEN;   /* INDICATE REQUEST DENIED       03503000
*                                         BY INSTALLATION EXIT       */ 03504000
         LA    RETCODE,52                                       02S1093 03505000
*              ELSE                    /* NOT REQUEST DENIED         */ 03506000
*                RETCODE = DRNOTALC;   /* INDICATE DD NOT FOUND      */ 03507000
         B     @RC01092                                         02S1094 03508000
@RF01092 LA    RETCODE,28                                       02S1094 03509000
*          END;                        /* END DELETE DDNAME          */ 03510000
*        ELSE                          /* NO FUNCTION SPECIFIED      */ 03511000
*          RETCODE = DRINVLST;         /* SET RETCODE TO 4(INVALID      03512000
*                                         PARAMETER LIST)            */ 03513000
         B     @RC01071                                         02S1096 03514000
@RF01071 LA    RETCODE,4                                        02S1096 03515000
*      END;                            /* END OF PARM LIST PROCESSING*/ 03516000
@RC01071 DS    0H                                               02S1097 03517000
@RC00919 DS    0H                                               02S1097 03518000
@RC00899 DS    0H                                               02S1098 03519000
*        END;                          /* END CODE 34                */ 03520000
*                                                               01S1098 03521000
@RC00896 DS    0H                                               01S1099 03522000
*      IF S99VERB='00'X                /* NOT FILLED BECAUSE CODE BAD*/ 03523000
*         & (BLOCKPTR->DAIRCODE^='0028'X &  /* CODE 28 IGNORED       */ 03524000
*            BLOCKPTR->DAIRCODE^='0014'X)   /* CODE 14 IGNORED       */ 03525000
*         & RETCODE = 0 THEN           /* HAS RETCODE BEEN SET ?     */ 03526000
@RF00894 CLI   S99VERB,X'00'                                    01S1099 03527000
         BNE   @RF01099                                         01S1099 03528000
         CLC   DAIRCODE(2,BLOCKPTR),@CB00173                    01S1099 03529000
         BE    @RF01099                                         01S1099 03530000
         CLC   DAIRCODE(2,BLOCKPTR),@CB00163                    01S1099 03531000
         BE    @RF01099                                         01S1099 03532000
         LTR   RETCODE,RETCODE                                  01S1099 03533000
         BNZ   @RF01099                                         01S1099 03534000
*        DO;                                                    01S1100 03535000
*          RETCODE = DRINVLST;         /* R15 RETURN CODE            */ 03536000
         LA    RETCODE,4                                        01S1101 03537000
*          QUIT = ON;                  /* FORCE LOOP EXIT            */ 03538000
         OI    QUIT,B'10000000'                                 01S1102 03539000
*        END;                                                   01S1103 03540000
*      IF DAPLDAPB->DAIRCODE^='0028'X THEN/*NOT MULT-FUNCTION REQUEST*/ 03541000
@RF01099 L     @14,DAPLDAPB(,DAPLPTR)                           01S1104 03542000
         CLC   DAIRCODE(2,@14),@CB00173                         01S1104 03543000
         BE    @RF01104                                         01S1104 03544000
*        QUIT = ON;                    /* FORCE LOOP EXIT            */ 03545000
         OI    QUIT,B'10000000'                                 01S1105 03546000
*      ELSE                            /* CODE IS 28 (MULT FUNCT.)   */ 03547000
*        IF RETCODE^=0 THEN            /* BUT LAST FUNCT. FAILED     */ 03548000
         B     @RC01104                                         01S1106 03549000
@RF01104 LTR   RETCODE,RETCODE                                  01S1106 03550000
         BZ    @RF01106                                         01S1106 03551000
*          DO;                                                  01S1107 03552000
*            QUIT = ON;                /* FORCE LOOP EXIT            */ 03553000
         OI    QUIT,B'10000000'                                 01S1108 03554000
*            DA28PFOP = BLOCKPTR;      /* ADDR OF FAILING FCT BLOCK  */ 03555000
         L     @14,DAPLDAPB(,DAPLPTR)                           01S1109 03556000
         ST    BLOCKPTR,DA28PFOP(,@14)                          01S1109 03557000
*          END;                                                 01S1110 03558000
*    END;                                                       01S1111 03559000
@RF01106 DS    0H                                               01S1111 03560000
@RC01104 DS    0H                                               01S1112 03561000
*    RESPECIFY R15 UNRESTRICTED;       /* RELEASE REG 15 USAGE       */ 03562000
@RF00114 DS    0H                                               01S1113 03563000
*END;                                  /* END MAJOR DO-LOOP          */ 03564000
*                                                               01S1113 03565000
         AL    I,@CF00035                                       01S1113 03566000
@DE00092 TM    QUIT,B'10000000'                                 01S1113 03567000
         BZ    @DL00092                                         01S1113 03568000
*RETURN CODE(RETCODE);                 /* RETURN TO CALLER           */ 03569000
         L     @13,4(,@13)                                      01S1114 03570000
         L     @00,@SIZDATD                                     01S1114 03571000
         LR    @01,@11                                          01S1114 03572000
         FREEMAIN R,LV=(0),A=(1)                                        03573000
         LR    @15,@05                                          01S1114 03574000
         L     @14,12(,@13)                                     01S1114 03575000
         LM    @00,@12,20(@13)                                  01S1114 03576000
         BR    @14                                              01S1114 03577000
*/********************************************************************/ 03578000
*/*                                                                  */ 03579000
*/* SEGMENT NAME - DAIR08                                            */ 03580000
*/*                                                                  */ 03581000
*/* DESCRIPTIVE - DAIR CODE 08 ROUTINE                               */ 03582000
*/*                                                                  */ 03583000
*/* FUNCTION - THIS ROUTINE IS INVOKED WHEN ALLOCATION OF A DATA SET */ 03584000
*/*      IS DESIRED.                                                 */ 03585000
*/*                                                                  */ 03586000
*/* OPERATION - THIS ROUTINE CHECKS FOR THE ATTRIBUTE LIST SUPPLIED  */ 03587000
*/*             BIT IN THE CONTROL FIELD AND A BLANK ATTRIBUTE NAME, */ 03588000
*/*             ZERO IN THE UNIT NAME FIELD OR ZERO IN THE VOLSER    */ 03589000
*/*             FIELD. IF ANY OF THE ABOVE CONDITIONS ARE TRUE, THE  */ 03590000
*/*             RETURN CODE IS SET TO 4. OTHERWISE, THE DSNAME CHECK */ 03591000
*/*             ROUTINE IS INVOKED TO VALIDITY CHECK THE DSNAME.     */ 03592000
*/*             IF THE DSNAME IS VALID(ZERO RETURN CODE), THEN THE   */ 03593000
*/*             FOLLOWING VALIDITY TESTS ARE DONE:                   */ 03594000
*/*               1. IF NEW STATUS, THEN KEEP AND UNCATLG ARE INVALID*/ 03595000
*/*                  DISPOSITIONS.                                   */ 03596000
*/*               2. IF STATUS IS NOT NEW OR MOD AND THE DSNAME IS   */ 03597000
*/*                  BLANK, THIS IS AN ERROR CONDITION.              */ 03598000
*/*             EITHER OF THE ABOVE CONDITIONS RESULT IN A RETURN    */ 03599000
*/*             CODE OF 4.                                           */ 03600000
*/*                                                                  */ 03601000
*/*             IF THE RETURN CODE IS ZERO AFTER ALL THE ABOVE       */ 03602000
*/*             TESTS, THE DSNAME,STATUS AND DISPOSITION ARE VALID.  */ 03603000
*/*             IN ORDER TO DO AN ALLOCATION, TEXT UNITS ARE BUILT   */ 03604000
*/*             USING DATA SUPPLIED IN THE DAIR08 PARM BLOCK OR      */ 03605000
*/*             DATA FROM THE DEFAULT CSECT IEFAB445.  TEXT  @YM06251*/ 03606000
*/*             UNITS ARE ALSO BUILT REQUESTING THE RETURN OF CERTAIN*/ 03607000
*/*             DATA(SEE BELOW).                                     */ 03608000
*/*               1. DSORG                                           */ 03609000
*/*               2. DDNAME(IF NOT SUPPLIED).                        */ 03610000
*/*               3. DSNAME(IF NOT SUPPLIED).                        */ 03611000
*/*             AFTER THE TEXT UNITS ARE BUILT, DYNAMIC ALLOCATION   */ 03612000
*/*             IS INVOKED (SVC 99).                                 */ 03613000
*/*                                                                  */ 03614000
*/*             IF DYNAMIC ALLOCATION WAS SUCCESSFUL(REG 15 IS ZERO),*/ 03615000
*/*             THE FOLLOWING ERROR CONDITION IS TESTED FOR:         */ 03616000
*/*               1. MEMBERNAME SUPPLIED AND DSORG RETURNED IS       */ 03617000
*/*                  NOT PARTITIONED.                                */ 03618000
*/*             IF THE ABOVE ERROR CONDITION IS FOUND, TEXT UNITS    */ 03619000
*/*             ARE BUILT TO UNALLOCATE THE DATASET BY DDNAME AND    */ 03620000
*/*             DYNAMIC UNALLOCATION(SVC 99) IS INVOKED, THE         */ 03621000
*/*             DA08DARC IS SET TO DRNOMBRP.                         */ 03622000
*/*                                                                  */ 03623000
*/*             IF THE ABOVE ERROR CONDITION WAS NOT FOUND, THE      */ 03624000
*/*             DSORG, DDNAME, DSNAME AND DSNAME LENGTH ARE STORED   */ 03625000
*/*             INTO THE DAIR08 PARM BLOCK.                          */ 03626000
*/*             IF REG 15 IS NOT ZERO AFTER INVOKING DYNAMIC         */ 03627000
*/*             ALLOCATION, REG 15 AND S99ERROR FIELD(FROM SVC 99    */ 03628000
*/*             PARAMETER LIST) ARE INTERROGATED IN ORDER TO         */ 03629000
*/*             GENERATE PROPER DARC,CTRC AND RETURN CODES.  PLEASE  */ 03630000
*/*             SEE RETURN CODE SECTION.                             */ 03631000
*/*                                                                  */ 03632000
*/* ENTRY - DAIR08 (INTERNAL PROCEDURE)                              */ 03633000
*/*                                                                  */ 03634000
*/*  PURPOSE - SEE FUNCTION                                          */ 03635000
*/*                                                                  */ 03636000
*/*  INPUT DATA - DAIR PARM BLOCK, SVC 99 PARM LIST                  */ 03637000
*/*                                                                  */ 03638000
*/* EXITS - ALL ARE TO NEXT SEQUENTIAL INSTRUCTION                   */ 03639000
*/*                                                                  */ 03640000
*/*  NORMAL - RETURN VIA REG 14                                      */ 03641000
*/*                                                                  */ 03642000
*/*   RETURN CODE - REG 15 SET TO ZERO                               */ 03643000
*/*                                                                  */ 03644000
*/*  ERROR - RETURN VIA REG 14                                       */ 03645000
*/*                                                                  */ 03646000
*/*   RETURN CODE - THE FOLLOWING RETURN, DARC AND CTRC CODES ARE    */ 03647000
*/*                 RETURNED                                         */ 03648000
*/*                                                                  */ 03649000
*/*      THE FOLLOWING RETURN CODES(WITH EXPLANATION OF EACH CODE)   */ 03650000
*/*      WILL BE ISSUED:                                             */ 03651000
*/*        0 - SUCCESS                                               */ 03652000
*/*        4 - INVALID PARAMETER LIST PASSED TO DAIR                 */ 03653000
*/*        8 - ERROR IN CATALOG MANAGEMENT ROUTINE, ERROR CODE       */ 03654000
*/*            STORED IN CTRC OF DAIR PARM BLOCK                     */ 03655000
*/*       12 - ERROR IN DYNAMIC ALLOCATION, ERROR CODE STORED IN     */ 03656000
*/*            DARC OF DAIR PARM BLOCK                               */ 03657000
*/*       16 - RESOURCES COULD NOT BE UNALLOCATED TO DECREASE THE    */ 03658000
*/*            NUMBER OF RESOURCES HELD IN ANTICIPATION OF REUSE     */ 03659000
*/*            TO THE CONTROL VALUE, OR THE LIMIT OF 1635 CONCURRENT */ 03660000
*/*            ALLOCATIONS HAS BEEN REACHED                          */ 03661000
*/*       20 - THE DDNAME REQUESTED IS UNAVAILABLE                   */ 03662000
*/*       28 - THE DDNAME OR DSNAME SPECIFIED IS NOT CURRENTLY       */ 03663000
*/*            ALLOCATED                                             */ 03664000
*/*       32 - THE DATA REQUESTED AS NEW WAS FOUND ALLOCATED         */ 03665000
*/*       44 - THE EXISTING DATA SET REQUESTED WAS FOUND ALLOCATED   */ 03666000
*/*            AS ELIGIBLE FOR DELETION                              */ 03667000
*/*       48 - RESERVED                                              */ 03668000
*/*       52 - REQUEST FAILED BY INSTALLATION EXIT                   */ 03669000
*/*                                                                  */ 03670000
*/*      REG 15 = 0 AFTER CALL TO DYNAMIC ALLOCATION                 */ 03671000
*/*                                                                  */ 03672000
*/*       CONDITION - MEMBERNAME SPECIFIED BUT DSORG RETURNED IS     */ 03673000
*/*                   NOT PARTITIONED                                */ 03674000
*/*       DARC = DRNOMBRP                                            */ 03675000
*/*       RETCODE = 12                                               */ 03676000
*/*                                                                  */ 03677000
*/*      REG 15 = 4 AFTER CALL TO DYNAMIC ALLOCATION                 */ 03678000
*/*                                                                  */ 03679000
*/*       CONDITIONS                                                 */ 03680000
*/*        1. S99ERROR = RCDDUNAV AFTER CALL TO DYNAMIC ALLOCATION   */ 03681000
*/*           RETCODE IS SET TO 20                                   */ 03682000
*/*           MEANING - DDNAME REQUESTED IS UNAVAILABLE              */ 03683000
*/*                                                                  */ 03684000
*/*        2. S99ERROR = RCDCONDD AFTER CALL TO DYNAMIC ALLOCATION   */ 03685000
*/*           DARC IS SET DRDUPEDD                                   */ 03686000
*/*           RETCODE IS SET TO 12                                   */ 03687000
*/*           MEANING - RESTORING DDNAMES FOR DECONCATENATION PROCESS*/ 03688000
*/*                     WOULD RESULT IN DUPLICATE DDNAMES            */ 03689000
*/*                                                                  */ 03690000
*/*       3. S99ERROR = RCNTUNLC OR RCLIMITS AFTER CALL TO DYNAMIC   */ 03691000
*/*                     ALLOCATION                                   */ 03692000
*/*          RETCODE IS SET TO 16                                    */ 03693000
*/*          MEANING - RCNTUNLC = RESOURCES COULD NOT BE UNALLOCATED */ 03694000
*/*                          TO DECREASE THE NUMBER OF RESOURCES HELD*/ 03695000
*/*                          IN ANTICIPATION OF REUSE TO THE CONTROL */ 03696000
*/*                          VALUE                                   */ 03697000
*/*                    RCLIMITS = REQUEST WOULD CAUSE THE LIMIT OF   */ 03698000
*/*                          1635 CONCURRENT ALLOCATIONS TO BE       */ 03699000
*/*                          EXCEEDED                                */ 03700000
*/*                                                                  */ 03701000
*/*        4. S99ERROR = RCNEWFND AFTER CALL TO DYNAMIC ALLOCATION   */ 03702000
*/*           RETCODE IS SET TO 32                                   */ 03703000
*/*           MEANING - THE DATA SET REQUESTED AS NEW WAS FOUND      */ 03704000
*/*                     ALLOCATED                                    */ 03705000
*/*                                                                  */ 03706000
*/*        5. S99ERROR = RCDELETE AFTER CALL TO DYNAMIC ALLOCATION   */ 03707000
*/*           RETCODE IS SET TO 44                                   */ 03708000
*/*           MEANING - THE EXISTING DATA SET REQUESTED WAS FOUND    */ 03709000
*/*                     ALLOCATED AS ELIGIBLE FOR DELETION           */ 03710000
*/*                                                                  */ 03711000
*/*        6. S99ERROR = RCDCBRNF AFTER CALL TO DYNAMIC ALLOCATION   */ 03712000
*/*           RETCODE IS SET TO 28                                   */ 03713000
*/*           MEANING - OBJECT OF DCB REFERBACK NOT FOUND            */ 03714000
*/*                                                                  */ 03715000
*/*        7. S99ERROR - IF THE 1ST BYTE OF THE S99ERROR FIELD       */ 03716000
*/*                      CONTAINS '17'X (LOCATE ERROR) OR '57'X(CATLG*/ 03717000
*/*                      ERROR), THE 2ND BYTE OF THE S99ERROR FIELD  */ 03718000
*/*                      IS MOVED TO THE CTRC. IN ADDITION, IF A     */ 03719000
*/*                      LOCATE ERROR IS FOUND, THE WHOLE S99ERROR   */ 03720000
*/*                      FIELD IS MOVED INTO THE DARC.               */ 03721000
*/*           RETCODE IS SET TO 8                                    */ 03722000
*/*           MEANING - AN ERROR OCCURRED IN A CATALOG MANAGEMENT    */ 03723000
*/*                     ROUTINE                                      */ 03724000
*/*                                                                  */ 03725000
*/*        8. IF RETCODE IS ZERO AFTER THE ABOVE TESTS, THE          */ 03726000
*/*           S99ERROR FIELD DATA IS MOVED TO THE DARC.              */ 03727000
*/*           RETCODE IS SET TO 12                                   */ 03728000
*/*           MEANING - A DYNAMIC ALLOCATION ERROR HAS OCCURRED, THE */ 03729000
*/*                     ERROR CODE IS STORED IN THE DARC             */ 03730000
*/*                                                                  */ 03731000
*/*      REG 15 = 8 AFTER CALL TO DYNAMIC ALLOCATION                 */ 03732000
*/*        RETCODE IS SET TO 52                                      */ 03733000
*/*        MEANING - THE REQUEST WAS FAILED BY THE INSTALLATION      */ 03734000
*/*                  EXIT ROUTINE                                    */ 03735000
*/*                                                                  */ 03736000
*/*      REG 15 = 12 AFTER CALL TO DYNAMIC ALLOCATION                */ 03737000
*/*                                                                  */ 03738000
*/*       CONDITIONS                                                 */ 03739000
*/*        1. S99ERROR = RCINPARM AFTER CALL TO DYNAMIC ALLOCATION   */ 03740000
*/*                      THE S99INFO FIELD MUST ALSO BE EXAMINED     */ 03741000
*/*                      TO DETERMINE WHICH CODE SHOULD BE RETURNED  */ 03742000
*/*                      IN THE DARC.  AFTER EXAMINING THE S99INFO   */ 03743000
*/*                      FIELD, THE DARC WILL BE SET TO ONE OF THE   */ 03744000
*/*                      FOLLOWING CODES                             */ 03745000
*/*                      DRDDNINV - INVALID CHARACTERS IN DDNAME     */ 03746000
*/*                      DRDSNINV - INVALID CHARACTERS IN DSNAME     */ 03747000
*/*                      DRMBRINV - INVALID CHARACTERS IN MEMBER NAME*/ 03748000
*/*                      DRDSPINV - INVALID DISPOSITION              */ 03749000
*/*                                                                  */ 03750000
*/*        2. S99ERROR = RCINKEYL AFTER CALL TO DYNAMIC ALLOCATION.  */ 03751000
*/*                      THE S99INFO FIELD IS EXAMINED TO DETERMINE  */ 03752000
*/*                      IF THE DSNAME TEXT UNIT IS IN ERROR.  IF    */ 03753000
*/*                      THE DSNAME TEXT UNIT IS IN ERROR THE        */ 03754000
*/*                      DARC=DRDSNLEN - DSNAME LENGTH GREATER THAN  */ 03755000
*/*                      44 CHARACTERS.                              */ 03756000
*/*                                                                  */ 03757000
*/*        3. IF THE DARC IS ZERO AFTER THE ABOVE TESTS, THE         */ 03758000
*/*           S99ERROR FIELD DATA IS STORED IN THE DARC.             */ 03759000
*/*                                                                  */ 03760000
*/*       AS A RESULT OF REG15 = 12 AFTER INVOKING DYNAMIC           */ 03761000
*/*       ALLOCATION, RETCODE IS SET TO 12(ERROR OCCURRED IN         */ 03762000
*/*       DYNAMIC ALLOCATION, THE DYNAMIC ALLOCATION ERROR           */ 03763000
*/*       CODE IS STORED IN THE DARC).                               */ 03764000
*/*                                                                  */ 03765000
*/* OUTPUT DATA - DSORG,DDNAME DSNAME & DSNAME LENGTH STORED INTO    */ 03766000
*/*               DAIR PARM BLOCK, RETCODE, DARC & CTRC CODES SET    */ 03767000
*/*                                                                  */ 03768000
*/********************************************************************/ 03769000
*DAIR08: PROC;                                                  02S1115 03770000
@EL00001 L     @13,4(,@13)                                      02S1115 03771000
@EF00001 L     @00,@SIZDATD                                     02S1115 03772000
         LR    @01,@11                                          02S1115 03773000
         FREEMAIN R,LV=(0),A=(1)                                        03774000
@ER00001 LM    @14,@12,12(@13)                                  02S1115 03775000
         BR    @14                                              02S1115 03776000
DAIR08   STM   @14,@04,@SA00002                                 02S1115 03777000
         STM   @06,@12,@SA00002+28                              02S1115 03778000
*DA08DARC=ZERO;                        /*CLEAR REASON CODE FIELD     */ 03779000
         SLR   @08,@08                                          02S1116 03780000
         STH   @08,DA08DARC(,BLOCKPTR)                          02S1116 03781000
*DA08CTRC=ZERO;                        /*CLEAR CATALOG RTN CODE FIELD*/ 03782000
         STH   @08,DA08CTRC(,BLOCKPTR)                          02S1117 03783000
*DEFADDR = ZERO;                       /* CLEAR DEFAULT CSECT(IEFAB445) 03784000
*                                         BASE PTR           @YM06251*/ 03785000
         SLR   DEFADDR,DEFADDR                                  02S1118 03786000
*DDBLANK = OFF;                        /* TURN OFF SWITCH            */ 03787000
         NI    DDBLANK,B'01111111'                              02S1119 03788000
*IF (DA08ATRL='1'B & DA08ALN(1)=' ')   /*BLANK ATTRIBUTE LIST NAME?  */ 03789000
*  | DA08UNIT(1)='00'X                 /*ZERO IN UNIT NAME FIELD?    */ 03790000
*  | DA08SER(1)='00'X THEN             /*ZERO IN VOL SER FIELD?      */ 03791000
         TM    DA08ATRL(BLOCKPTR),B'00000010'                   02S1120 03792000
         BNO   @GL00031                                         02S1120 03793000
         CLI   DA08ALN(BLOCKPTR),C' '                           02S1120 03794000
         BE    @RT01120                                         02S1120 03795000
@GL00031 CLI   DA08UNIT(BLOCKPTR),X'00'                         02S1120 03796000
         BE    @RT01120                                         02S1120 03797000
         CLI   DA08SER(BLOCKPTR),X'00'                          02S1120 03798000
         BNE   @RF01120                                         02S1120 03799000
@RT01120 DS    0H                                               02S1121 03800000
*  RETCODE=4;                          /*YES,BAD PARM LIST ERROR CODE*/ 03801000
         LA    RETCODE,4                                        02S1121 03802000
*ELSE                                                           02S1122 03803000
*  DO;                                                          02S1122 03804000
         B     @RC01120                                         02S1122 03805000
@RF01120 DS    0H                                               02S1123 03806000
*    CALL DSNCHECK (DA08CTL,DA08PDSN); /*DSNAME PROCESSING           */ 03807000
         LA    @08,DA08CTL(,BLOCKPTR)                           02S1123 03808000
         ST    @08,@AL00001                                     02S1123 03809000
         LA    @08,DA08PDSN(,BLOCKPTR)                          02S1123 03810000
         ST    @08,@AL00001+4                                   02S1123 03811000
         LA    @01,@AL00001                                     02S1123 03812000
         BAL   @14,DSNCHECK                                     02S1123 03813000
*    RETCODE=R15;                      /*SAVE RETURN CODE            */ 03814000
         LR    RETCODE,R15                                      02S1124 03815000
*  END;                                                         02S1125 03816000
*IF RETCODE=ZERO THEN                  /*SUCCESSFUL SO FAR?          */ 03817000
@RC01120 LTR   RETCODE,RETCODE                                  02S1126 03818000
         BNZ   @RF01126                                         02S1126 03819000
*  IF DA08DSP1 = NEW THEN              /*YES,NEW SPECIFIED?          */ 03820000
         CLI   DA08DSP1(BLOCKPTR),X'04'                         02S1127 03821000
         BNE   @RF01127                                         02S1127 03822000
*    IF DA08DPS2 = KEEP                /*YES,KEEP SPECIFIED?         */ 03823000
*      | DA08DPS2 = UNCATLG THEN       /*OR UNCATALOG SPECIFIED?     */ 03824000
         CLI   DA08DPS2(BLOCKPTR),X'08'                         02S1128 03825000
         BE    @RT01128                                         02S1128 03826000
         CLI   DA08DPS2(BLOCKPTR),X'01'                         02S1128 03827000
         BNE   @RF01128                                         02S1128 03828000
@RT01128 DS    0H                                               02S1129 03829000
*      RETCODE=4;                      /*YES,SET PARM LIST ERROR CODE*/ 03830000
         LA    RETCODE,4                                        02S1129 03831000
*    ELSE;                                                      02S1130 03832000
@RF01128 DS    0H                                               02S1131 03833000
*  ELSE                                /*NEW NOT SPECIFIED           */ 03834000
*    IF DSNBUF(1) = ' '                /*DSNAME NOT SPECIFIED        */ 03835000
*      & DA08DSP1 ^= MOD               /*AND STATUS NOT MOD          */ 03836000
*      & DA08DMMY = OFF THEN           /* AND NOT DUMMY ?            */ 03837000
         B     @RC01127                                         02S1131 03838000
@RF01127 CLI   DSNBUF,C' '                                      02S1131 03839000
         BNE   @RF01131                                         02S1131 03840000
         CLI   DA08DSP1(BLOCKPTR),X'02'                         02S1131 03841000
         BE    @RF01131                                         02S1131 03842000
         TM    DA08DMMY(BLOCKPTR),B'00000100'                   02S1131 03843000
         BNZ   @RF01131                                         02S1131 03844000
*      RETCODE=4;                      /*YES,SET PARM LIST ERROR CODE*/ 03845000
         LA    RETCODE,4                                        02S1132 03846000
*    ELSE;                                                      02S1133 03847000
@RF01131 DS    0H                                               02S1134 03848000
*ELSE;                                                          02S1134 03849000
@RF01126 DS    0H                                               02S1135 03850000
*IF RETCODE=ZERO THEN                  /*SUCCESSFUL SO FAR?          */ 03851000
@RC01126 SLR   @08,@08                                          02S1135 03852000
         CR    RETCODE,@08                                      02S1135 03853000
         BNE   @RF01135                                         02S1135 03854000
*  DO;                                 /*YES                         */ 03855000
*    S99VERB=S99VRBAL;                 /*SET DSNAME ALLOC VERB CODE     03856000
*                                        IN SVC 99 PARMLIST          */ 03857000
         MVI   S99VERB,X'01'                                    02S1137 03858000
*                           /*TEXT UNIT MACRO INIT        */    02S1138 03859000
*                                                               02S1138 03860000
*       DO;                                                     02S1138 03861000
*         TUP(1) = ADDR(TU(1));                                 02S1139 03862000
         LA    @07,TU                                           02S1139 03863000
         ST    @07,TUP                                          02S1139 03864000
*         TUP(1)->S99TUKEY = DALRTORG;                          02S1140 03865000
         MVC   S99TUKEY(2,@07),@CB01053                         02S1140 03866000
*         TUP(1)->S99TUNUM = 1;                                 02S1141 03867000
         LA    @04,1                                            02S1141 03868000
         STCM  @04,3,S99TUNUM(@07)                              02S1141 03869000
*         TUP(1)->S99TULNG = 2;                                 02S1142 03870000
         MVC   S99TULNG(2,@07),@CH00062                         02S1142 03871000
*         TUP(1)->S99TUPAR(1:2) = ZERO;                         02S1143 03872000
         STCM  @08,3,S99TUPAR(@07)                              02S1143 03873000
*       END;                /*RETURN DSORG TEXT UNIT   */       02S1144 03874000
*    IF DA08DDN(1)=' ' THEN            /*DDNAME SPECIFIED?           */ 03875000
*                                                               02S1145 03876000
         CLI   DA08DDN(BLOCKPTR),C' '                           02S1145 03877000
         BNE   @RF01145                                         02S1145 03878000
*         DO;                                                   02S1146 03879000
*           TUP(2) = ADDR(TU(2));                               02S1147 03880000
         LA    @08,TU+14                                        02S1147 03881000
         ST    @08,TUP+4                                        02S1147 03882000
*           TUP(2)->S99TUKEY = DALRTDDN;                        02S1148 03883000
         MVC   S99TUKEY(2,@08),@CB01049                         02S1148 03884000
*           TUP(2)->S99TUNUM = 1;                               02S1149 03885000
         STCM  @04,3,S99TUNUM(@08)                              02S1149 03886000
*           TUP(2)->S99TULNG = 8;                               02S1150 03887000
         MVC   S99TULNG(2,@08),@CH00048                         02S1150 03888000
*           TUP(2)->S99TUPAR(1:8) = '';                         02S1151 03889000
         MVI   S99TUPAR(@08),C' '                               02S1151 03890000
         MVC   S99TUPAR+1(7,@08),S99TUPAR(@08)                  02S1151 03891000
*         END;                /*NO, RETURN DDNAME TEXT U.*/     02S1152 03892000
*    ELSE                              /*DDNAME WAS SPECIFIED        */ 03893000
*                                                               02S1153 03894000
*         DO;                                                   02S1153 03895000
         B     @RC01145                                         02S1153 03896000
@RF01145 DS    0H                                               02S1154 03897000
*           TUP(2) = ADDR(TU(2));                               02S1154 03898000
         LA    @08,TU+14                                        02S1154 03899000
         ST    @08,TUP+4                                        02S1154 03900000
*           TUP(2)->S99TUKEY = DALDDNAM;                        02S1155 03901000
         MVC   S99TUKEY(2,@08),@CB00894                         02S1155 03902000
*           TUP(2)->S99TUNUM = 1;                               02S1156 03903000
         MVC   S99TUNUM(2,@08),@CH00035                         02S1156 03904000
*           TUP(2)->S99TULNG = LENGTH(DA08DDN);                 02S1157 03905000
         MVC   S99TULNG(2,@08),@CH00048                         02S1157 03906000
*           TUP(2)->S99TUPAR(1:LENGTH(DA08DDN)) = DA08DDN;      02S1158 03907000
         MVC   S99TUPAR(8,@08),DA08DDN(BLOCKPTR)                02S1158 03908000
*         END;                /*DDNAME TEXT UNIT */             02S1159 03909000
*    IF DSNBUF(1)=' ' THEN             /*DSNAME SPECIFIED?           */ 03910000
*                                                               02S1160 03911000
@RC01145 CLI   DSNBUF,C' '                                      02S1160 03912000
         BNE   @RF01160                                         02S1160 03913000
*         DO;                                                   02S1161 03914000
*           TUP(3) = ADDR(TUDSN);                               02S1162 03915000
         LA    @08,TUDSN                                        02S1162 03916000
         ST    @08,TUP+8                                        02S1162 03917000
*           TUP(3)->S99TUKEY = DALRTDSN;                        02S1163 03918000
         MVC   S99TUKEY(2,@08),@CB01051                         02S1163 03919000
*           TUP(3)->S99TUNUM = 1;                               02S1164 03920000
         MVC   S99TUNUM(2,@08),@CH00035                         02S1164 03921000
*           TUP(3)->S99TULNG = 44;                              02S1165 03922000
         MVC   S99TULNG(2,@08),@CH00092                         02S1165 03923000
*           TUP(3)->S99TUPAR(1:44) = '';                        02S1166 03924000
         MVI   S99TUPAR(@08),C' '                               02S1166 03925000
         MVC   S99TUPAR+1(43,@08),S99TUPAR(@08)                 02S1166 03926000
*         END;                /*RETURN DSNAME  */               02S1167 03927000
*    ELSE                              /*DSNAME WAS SPECIFIED        */ 03928000
*                                                               02S1168 03929000
*         DO;                                                   02S1168 03930000
         B     @RC01160                                         02S1168 03931000
@RF01160 DS    0H                                               02S1169 03932000
*           TUP(3) = ADDR(TUDSN);                               02S1169 03933000
         LA    @08,TUDSN                                        02S1169 03934000
         ST    @08,TUP+8                                        02S1169 03935000
*           TUP(3)->S99TUKEY = DALDSNAM;                        02S1170 03936000
         MVC   S99TUKEY(2,@08),@CB00896                         02S1170 03937000
*           TUP(3)->S99TUNUM = 1;                               02S1171 03938000
         MVC   S99TUNUM(2,@08),@CH00035                         02S1171 03939000
*           TUP(3)->S99TULNG = LENGTH(DSNBUF);                  02S1172 03940000
         MVC   S99TULNG(2,@08),@CH00092                         02S1172 03941000
*           TUP(3)->S99TUPAR(1:LENGTH(DSNBUF)) = DSNBUF;        02S1173 03942000
         MVC   S99TUPAR(44,@08),DSNBUF                          02S1173 03943000
*         END;                /* DSN TU */                      02S1174 03944000
*                                                               02S1174 03945000
*     IF DA08MNM^=' ' THEN                                      02S1175 03946000
@RC01160 CLI   DA08MNM(BLOCKPTR),C' '                           02S1175 03947000
         BE    @RF01175                                         02S1175 03948000
*       DO;                                                     02S1176 03949000
*         TUP(4) = ADDR(TU(4));                                 02S1177 03950000
         LA    @08,TU+42                                        02S1177 03951000
         ST    @08,TUP+12                                       02S1177 03952000
*         TUP(4)->S99TUKEY = DALMEMBR;                          02S1178 03953000
         MVC   S99TUKEY(2,@08),@CB00898                         02S1178 03954000
*         TUP(4)->S99TUNUM = 1;                                 02S1179 03955000
         MVC   S99TUNUM(2,@08),@CH00035                         02S1179 03956000
*         TUP(4)->S99TULNG = LENGTH(DA08MNM);                   02S1180 03957000
         MVC   S99TULNG(2,@08),@CH00048                         02S1180 03958000
*         TUP(4)->S99TUPAR(1:LENGTH(DA08MNM)) = DA08MNM;        02S1181 03959000
         MVC   S99TUPAR(8,@08),DA08MNM(BLOCKPTR)                02S1181 03960000
*       END;                   /* MEMBER NAME TEXT UNIT */      02S1182 03961000
*                                                               02S1182 03962000
*     IF DA08UNIT^=' ' THEN                                     02S1183 03963000
@RF01175 CLI   DA08UNIT(BLOCKPTR),C' '                          02S1183 03964000
         BE    @RF01183                                         02S1183 03965000
*       DO;                                                     02S1184 03966000
*         TUP(5) = ADDR(TU(5));                                 02S1185 03967000
         LA    @08,TU+56                                        02S1185 03968000
         ST    @08,TUP+16                                       02S1185 03969000
*         TUP(5)->S99TUKEY = DALUNIT;                           02S1186 03970000
         MVC   S99TUKEY(2,@08),@CB00929                         02S1186 03971000
*         TUP(5)->S99TUNUM = 1;                                 02S1187 03972000
         MVC   S99TUNUM(2,@08),@CH00035                         02S1187 03973000
*         TUP(5)->S99TULNG = LENGTH(DA08UNIT);                  02S1188 03974000
         MVC   S99TULNG(2,@08),@CH00048                         02S1188 03975000
*         TUP(5)->S99TUPAR(1:LENGTH(DA08UNIT)) = DA08UNIT;      02S1189 03976000
         MVC   S99TUPAR(8,@08),DA08UNIT(BLOCKPTR)               02S1189 03977000
*       END;                   /* UNIT NAME TEXT UNIT   */      02S1190 03978000
*                                                               02S1190 03979000
*     IF DA08SER^=' ' THEN                                      02S1191 03980000
@RF01183 CLI   DA08SER(BLOCKPTR),C' '                           02S1191 03981000
         BE    @RF01191                                         02S1191 03982000
*       DO;                                                     02S1192 03983000
*         TUP(6) = ADDR(TU(6));                                 02S1193 03984000
         LA    @08,TU+70                                        02S1193 03985000
         ST    @08,TUP+20                                       02S1193 03986000
*         TUP(6)->S99TUKEY = DALVLSER;                          02S1194 03987000
         MVC   S99TUKEY(2,@08),@CB00161                         02S1194 03988000
*         TUP(6)->S99TUNUM = 1;                                 02S1195 03989000
         MVC   S99TUNUM(2,@08),@CH00035                         02S1195 03990000
*         TUP(6)->S99TULNG = 6;                                 02S1196 03991000
         MVC   S99TULNG(2,@08),@CH00090                         02S1196 03992000
*         TUP(6)->S99TUPAR(1:6) = DA08SER;                      02S1197 03993000
         MVC   S99TUPAR(6,@08),DA08SER(BLOCKPTR)                02S1197 03994000
*       END;                /* VOLSER TEXT UNIT    */           02S1198 03995000
*    STATBUF=DA08DSP1;                 /*STATUS TO WORK BUFFER       */ 03996000
@RF01191 MVC   STATBUF(1),DA08DSP1(BLOCKPTR)                    02S1199 03997000
*    IF STATBUF='00'X THEN             /*STATUS SPECIFIED?           */ 03998000
         CLI   STATBUF,X'00'                                    02S1200 03999000
         BNE   @RF01200                                         02S1200 04000000
*      STATBUF=OLD;                    /*DEFAULT TO OLD              */ 04001000
*                                                               02S1201 04002000
         MVI   STATBUF,X'01'                                    02S1201 04003000
*       DO;                                                     02S1202 04004000
@RF01200 DS    0H                                               02S1203 04005000
*         TUP(7) = ADDR(TU(7));                                 02S1203 04006000
         LA    @08,TU+84                                        02S1203 04007000
         ST    @08,TUP+24                                       02S1203 04008000
*         TUP(7)->S99TUKEY = DALSTATS;                          02S1204 04009000
         MVC   S99TUKEY(2,@08),@CB00155                         02S1204 04010000
*         TUP(7)->S99TUNUM = 1;                                 02S1205 04011000
         LA    @07,1                                            02S1205 04012000
         STCM  @07,3,S99TUNUM(@08)                              02S1205 04013000
*         TUP(7)->S99TULNG = LENGTH(STATBUF);                   02S1206 04014000
         STCM  @07,3,S99TULNG(@08)                              02S1206 04015000
*         TUP(7)->S99TUPAR(1:LENGTH(STATBUF)) = STATBUF;        02S1207 04016000
         MVC   S99TUPAR(1,@08),STATBUF                          02S1207 04017000
*       END;                /*BUILD STATUS TEXT UNIT     */     02S1208 04018000
*                                                               02S1208 04019000
*     IF DA08DPS2^=ZERO THEN                                    02S1209 04020000
         CLI   DA08DPS2(BLOCKPTR),0                             02S1209 04021000
         BE    @RF01209                                         02S1209 04022000
*       DO;                                                     02S1210 04023000
*         TUP(8) = ADDR(TU(8));                                 02S1211 04024000
         LA    @08,TU+98                                        02S1211 04025000
         ST    @08,TUP+28                                       02S1211 04026000
*         TUP(8)->S99TUKEY = DALNDISP;                          02S1212 04027000
         MVC   S99TUKEY(2,@08),@CB00901                         02S1212 04028000
*         TUP(8)->S99TUNUM = 1;                                 02S1213 04029000
         STCM  @07,3,S99TUNUM(@08)                              02S1213 04030000
*         TUP(8)->S99TULNG = LENGTH(DA08DPS2);                  02S1214 04031000
         STCM  @07,3,S99TULNG(@08)                              02S1214 04032000
*         TUP(8)->S99TUPAR(1:LENGTH(DA08DPS2)) = DA08DPS2;      02S1215 04033000
         MVC   S99TUPAR(1,@08),DA08DPS2(BLOCKPTR)               02S1215 04034000
*       END;                     /*NORMAL DISP TEXT UNIT      */        04035000
*                                                               02S1216 04036000
*     IF DA08DPS3^=ZERO THEN                                    02S1217 04037000
@RF01209 CLI   DA08DPS3(BLOCKPTR),0                             02S1217 04038000
         BE    @RF01217                                         02S1217 04039000
*       DO;                                                     02S1218 04040000
*         TUP(9) = ADDR(TU(9));                                 02S1219 04041000
         LA    @08,TU+112                                       02S1219 04042000
         ST    @08,TUP+32                                       02S1219 04043000
*         TUP(9)->S99TUKEY = DALCDISP;                          02S1220 04044000
         MVC   S99TUKEY(2,@08),@CB00903                         02S1220 04045000
*         TUP(9)->S99TUNUM = 1;                                 02S1221 04046000
         LA    @07,1                                            02S1221 04047000
         STCM  @07,3,S99TUNUM(@08)                              02S1221 04048000
*         TUP(9)->S99TULNG = LENGTH(DA08DPS3);                  02S1222 04049000
         STCM  @07,3,S99TULNG(@08)                              02S1222 04050000
*         TUP(9)->S99TUPAR(1:LENGTH(DA08DPS3)) = DA08DPS3;      02S1223 04051000
         MVC   S99TUPAR(1,@08),DA08DPS3(BLOCKPTR)               02S1223 04052000
*       END;                    /*CONDITIONAL DISP TEXT UNIT  */        04053000
*    IF DA08ATRL='1'B THEN             /*ATTRIBUTE LIST NAME SPECIF'D*/ 04054000
*                                                               02S1225 04055000
@RF01217 TM    DA08ATRL(BLOCKPTR),B'00000010'                   02S1225 04056000
         BNO   @RF01225                                         02S1225 04057000
*         DO;                                                   02S1226 04058000
*           TUP(10) = ADDR(TU(10));                             02S1227 04059000
         LA    @08,TU+126                                       02S1227 04060000
         ST    @08,TUP+36                                       02S1227 04061000
*           TUP(10)->S99TUKEY = DALDCBDD;                       02S1228 04062000
         MVC   S99TUKEY(2,@08),@CB00971                         02S1228 04063000
*           TUP(10)->S99TUNUM = 1;                              02S1229 04064000
         MVC   S99TUNUM(2,@08),@CH00035                         02S1229 04065000
*           TUP(10)->S99TULNG = LENGTH(DA08ALN);                02S1230 04066000
         MVC   S99TULNG(2,@08),@CH00048                         02S1230 04067000
*           TUP(10)->S99TUPAR(1:LENGTH(DA08ALN)) = DA08ALN;     02S1231 04068000
         MVC   S99TUPAR(8,@08),DA08ALN(BLOCKPTR)                02S1231 04069000
*         END;                /*DCB DD REF TEXT UNIT     */     02S1232 04070000
*                                                               02S1232 04071000
*     IF DA08PSWD^=' ' THEN                                     02S1233 04072000
@RF01225 CLI   DA08PSWD(BLOCKPTR),C' '                          02S1233 04073000
         BE    @RF01233                                         02S1233 04074000
*       DO;                                                     02S1234 04075000
*         TUP(11) = ADDR(TU(11));                               02S1235 04076000
         LA    @08,TU+140                                       02S1235 04077000
         ST    @08,TUP+40                                       02S1235 04078000
*         TUP(11)->S99TUKEY = DALPASSW;                         02S1236 04079000
         MVC   S99TUKEY(2,@08),@CB01039                         02S1236 04080000
*         TUP(11)->S99TUNUM = 1;                                02S1237 04081000
         MVC   S99TUNUM(2,@08),@CH00035                         02S1237 04082000
*         TUP(11)->S99TULNG = LENGTH(DA08PSWD);                 02S1238 04083000
         MVC   S99TULNG(2,@08),@CH00048                         02S1238 04084000
*         TUP(11)->S99TUPAR(1:LENGTH(DA08PSWD)) = DA08PSWD;     02S1239 04085000
         MVC   S99TUPAR(8,@08),DA08PSWD(BLOCKPTR)               02S1239 04086000
*       END;                /*BUILD PASSWORD TU        */       02S1240 04087000
*    IF DA08DMMY = '0'B &              /* NON DUMMY ?        @YM07275*/ 04088000
*      (DA08DQTY(2:4) ^= ZERO & DA08PQTY = ZERO &               02S1241 04089000
*       (DA08DSP1 = NEW | DA08DSP1 = MOD)) THEN /* IS ALLOCATION NEW    04090000
*                                       OR MOD AND IS DIRECTORY 02S1241 04091000
*                                       SPACE SPECIFIED AND NO PRIMARY  04092000
*                                       QUANTITY SUPPLIED ?  @YM06251*/ 04093000
@RF01233 TM    DA08DMMY(BLOCKPTR),B'00000100'                   02S1241 04094000
         BNZ   @RF01241                                         02S1241 04095000
         SLR   @08,@08                                          02S1241 04096000
         SLR   @07,@07                                          02S1241 04097000
         ICM   @07,7,DA08DQTY+1(BLOCKPTR)                       02S1241 04098000
         CR    @08,@07                                          02S1241 04099000
         BE    @RF01241                                         02S1241 04100000
         CL    @08,DA08PQTY(,BLOCKPTR)                          02S1241 04101000
         BNE   @RF01241                                         02S1241 04102000
         CLI   DA08DSP1(BLOCKPTR),X'04'                         02S1241 04103000
         BE    @RT01241                                         02S1241 04104000
         CLI   DA08DSP1(BLOCKPTR),X'02'                         02S1241 04105000
         BNE   @RF01241                                         02S1241 04106000
@RT01241 DS    0H                                               02S1242 04107000
*      DO;                             /* DEFAULT SPACE      @YM06251*/ 04108000
*        GEN (LOAD EP=IEFAB445);       /* GET ADDRESSABILITY TO DEFAULT 04109000
*                                         SPACE CSECT        @YM06251*/ 04110000
         LOAD EP=IEFAB445                                               04111000
*        DEFADDR = R0;                 /* SAVE ADDRESS       @YM06251*/ 04112000
*                                                               02S1244 04113000
         LR    DEFADDR,R0                                       02S1244 04114000
*           DO;                                                 02S1245 04115000
*             TUP(12) = ADDR(TU(12));                           02S1246 04116000
         LA    @08,TU+154                                       02S1246 04117000
         ST    @08,TUP+44                                       02S1246 04118000
*             TUP(12)->S99TUKEY = DALDIR;                       02S1247 04119000
         MVC   S99TUKEY(2,@08),@CB00159                         02S1247 04120000
*             TUP(12)->S99TUNUM = 1;                            02S1248 04121000
         LA    @07,1                                            02S1248 04122000
         STCM  @07,3,S99TUNUM(@08)                              02S1248 04123000
*             TUP(12)->S99TULNG = 3;                            02S1249 04124000
         LA    @04,3                                            02S1249 04125000
         STCM  @04,3,S99TULNG(@08)                              02S1249 04126000
*             TUP(12)->S99TUPAR(1:3) = DA08DQTY(2:4);           02S1250 04127000
         MVC   S99TUPAR(3,@08),DA08DQTY+1(BLOCKPTR)             02S1250 04128000
*           END;                /* BUILD DIR                    02S1251 04129000
*                 SPACE TU              @YM06251*/              02S1251 04130000
*                                                               02S1251 04131000
*         IF DEFPQTY^=ZERO THEN                                 02S1252 04132000
         ICM   @08,7,DEFPQTY(DEFADDR)                           02S1252 04133000
         BZ    @RF01252                                         02S1252 04134000
*           DO;                                                 02S1253 04135000
*             TUP(13) = ADDR(TU(13));                           02S1254 04136000
         LA    @08,TU+168                                       02S1254 04137000
         ST    @08,TUP+48                                       02S1254 04138000
*             TUP(13)->S99TUKEY = DALPRIME;                     02S1255 04139000
         MVC   S99TUKEY(2,@08),@CB00910                         02S1255 04140000
*             TUP(13)->S99TUNUM = 1;                            02S1256 04141000
         STCM  @07,3,S99TUNUM(@08)                              02S1256 04142000
*             TUP(13)->S99TULNG = 3;                            02S1257 04143000
         STCM  @04,3,S99TULNG(@08)                              02S1257 04144000
*             TUP(13)->S99TUPAR(1:3) = DEFPQTY;                 02S1258 04145000
         MVC   S99TUPAR(3,@08),DEFPQTY(DEFADDR)                 02S1258 04146000
*           END;                /* PRIMARY SPACE                02S1259 04147000
*                           DEFAULT TU            @YM06251*/    02S1259 04148000
*                                                               02S1259 04149000
*         IF DEFSQTY^=ZERO THEN                                 02S1260 04150000
@RF01252 ICM   @08,7,DEFSQTY(DEFADDR)                           02S1260 04151000
         BZ    @RF01260                                         02S1260 04152000
*           DO;                                                 02S1261 04153000
*             TUP(14) = ADDR(TU(14));                           02S1262 04154000
         LA    @08,TU+182                                       02S1262 04155000
         ST    @08,TUP+52                                       02S1262 04156000
*             TUP(14)->S99TUKEY = DALSECND;                     02S1263 04157000
         MVC   S99TUKEY(2,@08),@CB00912                         02S1263 04158000
*             TUP(14)->S99TUNUM = 1;                            02S1264 04159000
         MVC   S99TUNUM(2,@08),@CH00035                         02S1264 04160000
*             TUP(14)->S99TULNG = 3;                            02S1265 04161000
         MVC   S99TULNG(2,@08),@CH00079                         02S1265 04162000
*             TUP(14)->S99TUPAR(1:3) = DEFSQTY;                 02S1266 04163000
         MVC   S99TUPAR(3,@08),DEFSQTY(DEFADDR)                 02S1266 04164000
*           END;                /* SECONDARY SPACE              02S1267 04165000
*                           DEFAULT TU            @YM06251*/    02S1267 04166000
*        IF DEFTRK = '1'B THEN         /* TRK ALLOC DEFAULT? @YM06251*/ 04167000
*                                                               02S1268 04168000
@RF01260 TM    DEFTRK(DEFADDR),B'10000000'                      02S1268 04169000
         BNO   @RF01268                                         02S1268 04170000
*             DO;                                               02S1269 04171000
*               TUP(15) = ADDR(TU(15));                         02S1270 04172000
         LA    @08,TU+196                                       02S1270 04173000
         ST    @08,TUP+56                                       02S1270 04174000
*               TUP(15)->S99TUKEY = DALTRK;                     02S1271 04175000
         MVC   S99TUKEY(2,@08),@CB00905                         02S1271 04176000
*               TUP(15)->S99TUNUM = 0;                          02S1272 04177000
         SLR   @07,@07                                          02S1272 04178000
         STCM  @07,3,S99TUNUM(@08)                              02S1272 04179000
*               TUP(15)->S99TULNG = 0;                          02S1273 04180000
         STCM  @07,3,S99TULNG(@08)                              02S1273 04181000
*             END;                      /* BUILD TRK TU       @YM06251* 04182000
*        ELSE                          /* TRK NOT DEFAULT    @YM06251*/ 04183000
*          IF DEFCYL = '1'B THEN       /* CYL ALLOC DEFAULT? @YM06251*/ 04184000
*                                                               02S1275 04185000
         B     @RC01268                                         02S1275 04186000
@RF01268 TM    DEFCYL(DEFADDR),B'01000000'                      02S1275 04187000
         BNO   @RF01275                                         02S1275 04188000
*               DO;                                             02S1276 04189000
*                 TUP(15) = ADDR(TU(15));                       02S1277 04190000
         LA    @08,TU+196                                       02S1277 04191000
         ST    @08,TUP+56                                       02S1277 04192000
*                 TUP(15)->S99TUKEY = DALCYL;                   02S1278 04193000
         MVC   S99TUKEY(2,@08),@CB00157                         02S1278 04194000
*                 TUP(15)->S99TUNUM = 0;                        02S1279 04195000
         SLR   @07,@07                                          02S1279 04196000
         STCM  @07,3,S99TUNUM(@08)                              02S1279 04197000
*                 TUP(15)->S99TULNG = 0;                        02S1280 04198000
         STCM  @07,3,S99TULNG(@08)                              02S1280 04199000
*               END;                /* BUILD CYL TU   @YM06251*/        04200000
*          ELSE                        /* CYL NOT DEFAULT    @YM06251*/ 04201000
*            IF DEFBLKLN = '1'B THEN   /* AVG BLOCK LENGTH AS   02S1282 04202000
*                                         DEFAULT?           @YM06251*/ 04203000
         B     @RC01275                                         02S1282 04204000
@RF01275 TM    DEFBLKLN(DEFADDR),B'00100000'                    02S1282 04205000
         BNO   @RF01282                                         02S1282 04206000
*              DO;                                              02S1283 04207000
*                IF DA08BLK(2:4) ^= ZERO THEN /*             @ZA03233*/ 04208000
         ICM   @08,7,DA08BLK+1(BLOCKPTR)                        02S1284 04209000
         BZ    @RF01284                                         02S1284 04210000
*                                      /* USE SPECIFIED BLK  @ZA03233*/ 04211000
*                                                               02S1285 04212000
*                     DO;                                       02S1285 04213000
*                       TUP(15) = ADDR(TU(15));                 02S1286 04214000
         LA    @08,TU+196                                       02S1286 04215000
         ST    @08,TUP+56                                       02S1286 04216000
*                       TUP(15)->S99TUKEY = DALBLKLN;           02S1287 04217000
         MVC   S99TUKEY(2,@08),@CB00908                         02S1287 04218000
*                       TUP(15)->S99TUNUM = 1;                  02S1288 04219000
         MVC   S99TUNUM(2,@08),@CH00035                         02S1288 04220000
*                       TUP(15)->S99TULNG = 3;                  02S1289 04221000
         MVC   S99TULNG(2,@08),@CH00079                         02S1289 04222000
*                       TUP(15)->S99TUPAR(1:3) = DA08BLK(2:4);  02S1290 04223000
         MVC   S99TUPAR(3,@08),DA08BLK+1(BLOCKPTR)              02S1290 04224000
*                     END;                                      02S1291 04225000
*                ELSE                  /*                    @ZA03233*/ 04226000
*                                      /* USE DEFAULT BLK    @ZA03233*/ 04227000
*                                                               02S1292 04228000
*                 DO;                                           02S1292 04229000
         B     @RC01284                                         02S1292 04230000
@RF01284 DS    0H                                               02S1293 04231000
*                   TUP(15) = ADDR(TU(15));                     02S1293 04232000
         LA    @08,TU+196                                       02S1293 04233000
         ST    @08,TUP+56                                       02S1293 04234000
*                   TUP(15)->S99TUKEY = DALBLKLN;               02S1294 04235000
         MVC   S99TUKEY(2,@08),@CB00908                         02S1294 04236000
*                   TUP(15)->S99TUNUM = 1;                      02S1295 04237000
         MVC   S99TUNUM(2,@08),@CH00035                         02S1295 04238000
*                   TUP(15)->S99TULNG = 3;                      02S1296 04239000
         MVC   S99TULNG(2,@08),@CH00079                         02S1296 04240000
*                   TUP(15)->S99TUPAR(1:3) = DEFDRLH;           02S1297 04241000
         MVC   S99TUPAR(3,@08),DEFDRLH(DEFADDR)                 02S1297 04242000
*                 END;                                          02S1298 04243000
*              END;                    /* END BLKSIZE TU     @ZA03233*/ 04244000
@RC01284 DS    0H                                               02S1300 04245000
*                                      /* BUILD AVG BLOCK TU @YM06251*/ 04246000
*        IF DEFRLSE = '1'B THEN        /* RELEASE A DEFAULT? @YM06251*/ 04247000
*                                                               02S1300 04248000
@RF01282 DS    0H                                               02S1300 04249000
@RC01275 DS    0H                                               02S1300 04250000
@RC01268 TM    DEFRLSE(DEFADDR),B'00010000'                     02S1300 04251000
         BNO   @RF01300                                         02S1300 04252000
*             DO;                                               02S1301 04253000
*               TUP(16) = ADDR(TU(16));                         02S1302 04254000
         LA    @08,TU+210                                       02S1302 04255000
         ST    @08,TUP+60                                       02S1302 04256000
*               TUP(16)->S99TUKEY = DALRLSE;                    02S1303 04257000
         MVC   S99TUKEY(2,@08),@CB00915                         02S1303 04258000
*               TUP(16)->S99TUNUM = 0;                          02S1304 04259000
         SLR   @07,@07                                          02S1304 04260000
         STCM  @07,3,S99TUNUM(@08)                              02S1304 04261000
*               TUP(16)->S99TULNG = 0;                          02S1305 04262000
         STCM  @07,3,S99TULNG(@08)                              02S1305 04263000
*             END;                     /* BUILD RELEASE TU   @YM06251*/ 04264000
*        IF DEFCONTG = '1'B THEN       /* CONTIGUOUS SPACE A    02S1307 04265000
*                                         DEFAULT?           @YM06251*/ 04266000
*                                                               02S1307 04267000
@RF01300 TM    DEFCONTG(DEFADDR),B'00001000'                    02S1307 04268000
         BNO   @RF01307                                         02S1307 04269000
*             DO;                                               02S1308 04270000
*               TUP(17) = ADDR(TU(17));                         02S1309 04271000
         LA    @08,TU+224                                       02S1309 04272000
         ST    @08,TUP+64                                       02S1309 04273000
*               TUP(17)->S99TUKEY = DALSPFRM;                   02S1310 04274000
         MVC   S99TUKEY(2,@08),@CB00917                         02S1310 04275000
*               TUP(17)->S99TUNUM = 1;                          02S1311 04276000
         LA    @07,1                                            02S1311 04277000
         STCM  @07,3,S99TUNUM(@08)                              02S1311 04278000
*               TUP(17)->S99TULNG = 1;                          02S1312 04279000
         STCM  @07,3,S99TULNG(@08)                              02S1312 04280000
*               TUP(17)->S99TUPAR(1:1) = '08'X;                 02S1313 04281000
         MVI   S99TUPAR(@08),X'08'                              02S1313 04282000
*             END;                /* DEFAULT CONTIGUOUS         02S1314 04283000
*                       SPACE                 @YM06251*/        02S1314 04284000
*        ELSE                          /* CONTIG NOT DEFAULT @YM06251*/ 04285000
*          IF DEFMIXG = '1'B THEN      /* MAXIMUM CONTIGUOUS SPACE      04286000
*                                         A DEFAULT?         @YM06251*/ 04287000
*                                                               02S1315 04288000
         B     @RC01307                                         02S1315 04289000
@RF01307 TM    DEFMIXG(DEFADDR),B'00000100'                     02S1315 04290000
         BNO   @RF01315                                         02S1315 04291000
*               DO;                                             02S1316 04292000
*                 TUP(17) = ADDR(TU(17));                       02S1317 04293000
         LA    @08,TU+224                                       02S1317 04294000
         ST    @08,TUP+64                                       02S1317 04295000
*                 TUP(17)->S99TUKEY = DALSPFRM;                 02S1318 04296000
         MVC   S99TUKEY(2,@08),@CB00917                         02S1318 04297000
*                 TUP(17)->S99TUNUM = 1;                        02S1319 04298000
         LA    @07,1                                            02S1319 04299000
         STCM  @07,3,S99TUNUM(@08)                              02S1319 04300000
*                 TUP(17)->S99TULNG = 1;                        02S1320 04301000
         STCM  @07,3,S99TULNG(@08)                              02S1320 04302000
*                 TUP(17)->S99TUPAR(1:1) = '04'X;               02S1321 04303000
         MVI   S99TUPAR(@08),X'04'                              02S1321 04304000
*               END;                /* DEFAULT                  02S1322 04305000
*               MAX CONTIGUOUS SPACE  @YM06251*/                02S1322 04306000
*          ELSE                        /* NOT MAX CONTIG     @YM06251*/ 04307000
*            IF DEFALX = '1'B THEN     /* ALX DEFAULT?       @YM06251*/ 04308000
*                                                               02S1323 04309000
         B     @RC01315                                         02S1323 04310000
@RF01315 TM    DEFALX(DEFADDR),B'00000010'                      02S1323 04311000
         BNO   @RF01323                                         02S1323 04312000
*                 DO;                                           02S1324 04313000
*                   TUP(17) = ADDR(TU(17));                     02S1325 04314000
         LA    @08,TU+224                                       02S1325 04315000
         ST    @08,TUP+64                                       02S1325 04316000
*                   TUP(17)->S99TUKEY = DALSPFRM;               02S1326 04317000
         MVC   S99TUKEY(2,@08),@CB00917                         02S1326 04318000
*                   TUP(17)->S99TUNUM = 1;                      02S1327 04319000
         LA    @07,1                                            02S1327 04320000
         STCM  @07,3,S99TUNUM(@08)                              02S1327 04321000
*                   TUP(17)->S99TULNG = 1;                      02S1328 04322000
         STCM  @07,3,S99TULNG(@08)                              02S1328 04323000
*                   TUP(17)->S99TUPAR(1:1) = '02'X;             02S1329 04324000
         MVI   S99TUPAR(@08),X'02'                              02S1329 04325000
*                 END;                /* BUILD                  02S1330 04326000
*                ALX DEFAULT TU        @YM06251*/               02S1330 04327000
*        IF DEFROUND = '1'B THEN       /* IS DEFAULT ROUND?  @YM06251*/ 04328000
*                                                               02S1331 04329000
@RF01323 DS    0H                                               02S1331 04330000
@RC01315 DS    0H                                               02S1331 04331000
@RC01307 TM    DEFROUND(DEFADDR),B'00000001'                    02S1331 04332000
         BNO   @RF01331                                         02S1331 04333000
*             DO;                                               02S1332 04334000
*               TUP(18) = ADDR(TU(18));                         02S1333 04335000
         LA    @08,TU+238                                       02S1333 04336000
         ST    @08,TUP+68                                       02S1333 04337000
*               TUP(18)->S99TUKEY = DALROUND;                   02S1334 04338000
         MVC   S99TUKEY(2,@08),@CB00919                         02S1334 04339000
*               TUP(18)->S99TUNUM = 0;                          02S1335 04340000
         SLR   @07,@07                                          02S1335 04341000
         STCM  @07,3,S99TUNUM(@08)                              02S1335 04342000
*               TUP(18)->S99TULNG = 0;                          02S1336 04343000
         STCM  @07,3,S99TULNG(@08)                              02S1336 04344000
*             END;                    /* BUILD ROUND TU     @YM06251*/  04345000
*      END;                            /* END SPACE DEFAULT  @YM06251*/ 04346000
*    ELSE                              /* NOT A DEFAULT CASE @YM06251*/ 04347000
*      IF DA08DMMY = '0'B &            /* NON DUMMY ?        @YM07275*/ 04348000
*        DA08PQTY(2:4) ^= ZERO &       /* WAS PRIMARY SPACE SUPPLIED?*/ 04349000
*         (DA08DSP1 =NEW | DA08DSP1 = MOD) THEN /* AND IS STATUS NEW    04350000
*                                                  OR MOD?   @YM06251*/ 04351000
         B     @RC01241                                         02S1339 04352000
@RF01241 TM    DA08DMMY(BLOCKPTR),B'00000100'                   02S1339 04353000
         BNZ   @RF01339                                         02S1339 04354000
         ICM   @08,7,DA08PQTY+1(BLOCKPTR)                       02S1339 04355000
         BZ    @RF01339                                         02S1339 04356000
         CLI   DA08DSP1(BLOCKPTR),X'04'                         02S1339 04357000
         BE    @RT01339                                         02S1339 04358000
         CLI   DA08DSP1(BLOCKPTR),X'02'                         02S1339 04359000
         BNE   @RF01339                                         02S1339 04360000
@RT01339 DS    0H                                               02S1340 04361000
*        DO;                           /* YES, PROCESS ALL SPACE        04362000
*                                         RELATED DATA               */ 04363000
*                                                               02S1340 04364000
*             DO;                                               02S1341 04365000
*               TUP(19) = ADDR(TU(19));                         02S1342 04366000
         LA    @08,TU+252                                       02S1342 04367000
         ST    @08,TUP+72                                       02S1342 04368000
*               TUP(19)->S99TUKEY = DALPRIME;                   02S1343 04369000
         MVC   S99TUKEY(2,@08),@CB00910                         02S1343 04370000
*               TUP(19)->S99TUNUM = 1;                          02S1344 04371000
         LA    @07,1                                            02S1344 04372000
         STCM  @07,3,S99TUNUM(@08)                              02S1344 04373000
*               TUP(19)->S99TULNG = 3;                          02S1345 04374000
         LA    @04,3                                            02S1345 04375000
         STCM  @04,3,S99TULNG(@08)                              02S1345 04376000
*               TUP(19)->S99TUPAR(1:3) = DA08PQTY(2:4);         02S1346 04377000
         MVC   S99TUPAR(3,@08),DA08PQTY+1(BLOCKPTR)             02S1346 04378000
*             END;               /*PRIMARY SPC*/                02S1347 04379000
*                                                               02S1347 04380000
*           IF DA08SQTY(2:4)^=ZERO THEN                         02S1348 04381000
         ICM   @08,7,DA08SQTY+1(BLOCKPTR)                       02S1348 04382000
         BZ    @RF01348                                         02S1348 04383000
*             DO;                                               02S1349 04384000
*               TUP(20) = ADDR(TU(20));                         02S1350 04385000
         LA    @08,TU+266                                       02S1350 04386000
         ST    @08,TUP+76                                       02S1350 04387000
*               TUP(20)->S99TUKEY = DALSECND;                   02S1351 04388000
         MVC   S99TUKEY(2,@08),@CB00912                         02S1351 04389000
*               TUP(20)->S99TUNUM = 1;                          02S1352 04390000
         STCM  @07,3,S99TUNUM(@08)                              02S1352 04391000
*               TUP(20)->S99TULNG = 3;                          02S1353 04392000
         STCM  @04,3,S99TULNG(@08)                              02S1353 04393000
*               TUP(20)->S99TUPAR(1:3) = DA08SQTY(2:4);         02S1354 04394000
         MVC   S99TUPAR(3,@08),DA08SQTY+1(BLOCKPTR)             02S1354 04395000
*             END;               /* SECONDARY SPACE */          02S1355 04396000
*                                                               02S1355 04397000
*           IF DA08DQTY(2:4)^=ZERO THEN                         02S1356 04398000
@RF01348 ICM   @08,7,DA08DQTY+1(BLOCKPTR)                       02S1356 04399000
         BZ    @RF01356                                         02S1356 04400000
*             DO;                                               02S1357 04401000
*               TUP(21) = ADDR(TU(21));                         02S1358 04402000
         LA    @08,TU+280                                       02S1358 04403000
         ST    @08,TUP+80                                       02S1358 04404000
*               TUP(21)->S99TUKEY = DALDIR;                     02S1359 04405000
         MVC   S99TUKEY(2,@08),@CB00159                         02S1359 04406000
*               TUP(21)->S99TUNUM = 1;                          02S1360 04407000
         MVC   S99TUNUM(2,@08),@CH00035                         02S1360 04408000
*               TUP(21)->S99TULNG = 3;                          02S1361 04409000
         MVC   S99TULNG(2,@08),@CH00079                         02S1361 04410000
*               TUP(21)->S99TUPAR(1:3) = DA08DQTY(2:4);         02S1362 04411000
         MVC   S99TUPAR(3,@08),DA08DQTY+1(BLOCKPTR)             02S1362 04412000
*             END;                /*DIRECTORY SPACE   */        02S1363 04413000
*          IF DA08TRKS=ON & DA08ABKL=ON THEN /* CYLINDER SPECIFIED   */ 04414000
*                                                               02S1364 04415000
@RF01356 TM    DA08TRKS(BLOCKPTR),B'11000000'                   02S1364 04416000
         BNO   @RF01364                                         02S1364 04417000
*               DO;                                             02S1365 04418000
*                 TUP(22) = ADDR(TU(22));                       02S1366 04419000
         LA    @08,TU+294                                       02S1366 04420000
         ST    @08,TUP+84                                       02S1366 04421000
*                 TUP(22)->S99TUKEY = DALCYL;                   02S1367 04422000
         MVC   S99TUKEY(2,@08),@CB00157                         02S1367 04423000
*                 TUP(22)->S99TUNUM = 0;                        02S1368 04424000
         SLR   @07,@07                                          02S1368 04425000
         STCM  @07,3,S99TUNUM(@08)                              02S1368 04426000
*                 TUP(22)->S99TULNG = 0;                        02S1369 04427000
         STCM  @07,3,S99TULNG(@08)                              02S1369 04428000
*               END;                    /* CYLINDER TU                * 04429000
*          ELSE                        /* CYLINDER NOT SPECIFIED     */ 04430000
*            DO;                                                02S1371 04431000
*                                                               02S1371 04432000
         B     @RC01364                                         02S1371 04433000
@RF01364 DS    0H                                               02S1372 04434000
*               IF DA08TRKS^='0'B THEN                          02S1372 04435000
         TM    DA08TRKS(BLOCKPTR),B'10000000'                   02S1372 04436000
         BZ    @RF01372                                         02S1372 04437000
*                 DO;                                           02S1373 04438000
*                   TUP(22) = ADDR(TU(22));                     02S1374 04439000
         LA    @08,TU+294                                       02S1374 04440000
         ST    @08,TUP+84                                       02S1374 04441000
*                   TUP(22)->S99TUKEY = DALTRK;                 02S1375 04442000
         MVC   S99TUKEY(2,@08),@CB00905                         02S1375 04443000
*                   TUP(22)->S99TUNUM = 0;                      02S1376 04444000
         SLR   @07,@07                                          02S1376 04445000
         STCM  @07,3,S99TUNUM(@08)                              02S1376 04446000
*                   TUP(22)->S99TULNG = 0;                      02S1377 04447000
         STCM  @07,3,S99TULNG(@08)                              02S1377 04448000
*                 END;                /* TRK TU */              02S1378 04449000
*                                                               02S1378 04450000
*               IF DA08ABKL^='0'B THEN                          02S1379 04451000
@RF01372 TM    DA08ABKL(BLOCKPTR),B'01000000'                   02S1379 04452000
         BZ    @RF01379                                         02S1379 04453000
*                 DO;                                           02S1380 04454000
*                   TUP(23) = ADDR(TU(23));                     02S1381 04455000
         LA    @08,TU+308                                       02S1381 04456000
         ST    @08,TUP+88                                       02S1381 04457000
*                   TUP(23)->S99TUKEY = DALBLKLN;               02S1382 04458000
         MVC   S99TUKEY(2,@08),@CB00908                         02S1382 04459000
*                   TUP(23)->S99TUNUM = 1;                      02S1383 04460000
         MVC   S99TUNUM(2,@08),@CH00035                         02S1383 04461000
*                   TUP(23)->S99TULNG = 3;                      02S1384 04462000
         MVC   S99TULNG(2,@08),@CH00079                         02S1384 04463000
*                   TUP(23)->S99TUPAR(1:3) = DA08BLK(2:4);      02S1385 04464000
         MVC   S99TUPAR(3,@08),DA08BLK+1(BLOCKPTR)              02S1385 04465000
*                 END;                                          02S1386 04466000
*                                      /* OR AVG BLOCK TU            */ 04467000
*            END;                                               02S1387 04468000
@RF01379 DS    0H                                               02S1388 04469000
*        END;                          /* END PROCESSING SPACE DATA  */ 04470000
@RC01364 DS    0H                                               02S1389 04471000
*        IF (DA08DSP1 = NEW | DA08DSP1 = MOD) &                 02S1389 04472000
*           DA08ATRL = OFF THEN        /* BUILD DCB BLKSIZE TU ONLY     04473000
*                                         FOR A NEW OR MOD ALLOCATION   04474000
*                                         WITHOUT AN ATTRIBUTE LIST     04475000
*                                                            @YM06251*/ 04476000
@RF01339 DS    0H                                               02S1389 04477000
@RC01241 CLI   DA08DSP1(BLOCKPTR),X'04'                         02S1389 04478000
         BE    @GL00043                                         02S1389 04479000
         CLI   DA08DSP1(BLOCKPTR),X'02'                         02S1389 04480000
         BNE   @RF01389                                         02S1389 04481000
@GL00043 TM    DA08ATRL(BLOCKPTR),B'00000010'                   02S1389 04482000
         BNZ   @RF01389                                         02S1389 04483000
*          DO;                         /*                    @ZA03233*/ 04484000
*            IF DA08BLK(3:4) ^= ZERO THEN /* BLKSIZE GIVEN   @ZA03233*/ 04485000
*                                                               02S1391 04486000
         ICM   @08,3,DA08BLK+2(BLOCKPTR)                        02S1391 04487000
         BZ    @RF01391                                         02S1391 04488000
*                 DO;                                           02S1392 04489000
*                   TUP(24) = ADDR(TU(24));                     02S1393 04490000
         LA    @08,TU+322                                       02S1393 04491000
         ST    @08,TUP+92                                       02S1393 04492000
*                   TUP(24)->S99TUKEY = DALBLKSZ;               02S1394 04493000
         MVC   S99TUKEY(2,@08),@CB00210                         02S1394 04494000
*                   TUP(24)->S99TUNUM = 1;                      02S1395 04495000
         MVC   S99TUNUM(2,@08),@CH00035                         02S1395 04496000
*                   TUP(24)->S99TULNG = 2;                      02S1396 04497000
         MVC   S99TULNG(2,@08),@CH00062                         02S1396 04498000
*                   TUP(24)->S99TUPAR(1:2) = DA08BLK(3:4);      02S1397 04499000
         MVC   S99TUPAR(2,@08),DA08BLK+2(BLOCKPTR)              02S1397 04500000
*                 END;                                          02S1398 04501000
*          END;                        /*                    @ZA03233*/ 04502000
*                                                               02S1399 04503000
@RF01391 DS    0H                                               02S1400 04504000
*     IF DA08PERM^='0'B THEN                                    02S1400 04505000
@RF01389 TM    DA08PERM(BLOCKPTR),B'00001000'                   02S1400 04506000
         BZ    @RF01400                                         02S1400 04507000
*       DO;                                                     02S1401 04508000
*         TUP(25) = ADDR(TU(25));                               02S1402 04509000
         LA    @08,TU+336                                       02S1402 04510000
         ST    @08,TUP+96                                       02S1402 04511000
*         TUP(25)->S99TUKEY = DALPERMA;                         02S1403 04512000
         MVC   S99TUKEY(2,@08),@CB01043                         02S1403 04513000
*         TUP(25)->S99TUNUM = 0;                                02S1404 04514000
         SLR   @07,@07                                          02S1404 04515000
         STCM  @07,3,S99TUNUM(@08)                              02S1404 04516000
*         TUP(25)->S99TULNG = 0;                                02S1405 04517000
         STCM  @07,3,S99TULNG(@08)                              02S1405 04518000
*       END;                /*PERM ALLOC'D TU         */        02S1406 04519000
*    IF DA08RLSE='1'B & ((DEFADDR^=ZERO & DEFRLSE='0'B)|        02S1407 04520000
*       DEFADDR=ZERO) THEN                                      02S1407 04521000
@RF01400 TM    DA08RLSE(BLOCKPTR),B'00010000'                   02S1407 04522000
         BNO   @RF01407                                         02S1407 04523000
         LTR   DEFADDR,DEFADDR                                  02S1407 04524000
         BZ    @GL00046                                         02S1407 04525000
         TM    DEFRLSE(DEFADDR),B'00010000'                     02S1407 04526000
         BZ    @RT01407                                         02S1407 04527000
@GL00046 LTR   DEFADDR,DEFADDR                                  02S1407 04528000
         BNZ   @RF01407                                         02S1407 04529000
@RT01407 DS    0H                                               02S1408 04530000
*            /* NO DEFAULT CSECT LOADED, NO RLSE DEFAULT, RLSE  02S1408 04531000
*               SPECIFIED, THEN BUILD RELEASE TEXT UNIT.     @ZA08639*/ 04532000
*                                                               02S1408 04533000
*       DO;                                                     02S1408 04534000
*         TUP(26) = ADDR(TU(26));                               02S1409 04535000
         LA    @08,TU+350                                       02S1409 04536000
         ST    @08,TUP+100                                      02S1409 04537000
*         TUP(26)->S99TUKEY = DALRLSE;                          02S1410 04538000
         MVC   S99TUKEY(2,@08),@CB00915                         02S1410 04539000
*         TUP(26)->S99TUNUM = 0;                                02S1411 04540000
         SLR   @07,@07                                          02S1411 04541000
         STCM  @07,3,S99TUNUM(@08)                              02S1411 04542000
*         TUP(26)->S99TULNG = 0;                                02S1412 04543000
         STCM  @07,3,S99TULNG(@08)                              02S1412 04544000
*       END;                 /* RELEASE SPACE TU.            @ZA08639*/ 04545000
*                                                               02S1413 04546000
*     IF DA08DMMY^='0'B THEN                                    02S1414 04547000
@RF01407 TM    DA08DMMY(BLOCKPTR),B'00000100'                   02S1414 04548000
         BZ    @RF01414                                         02S1414 04549000
*       DO;                                                     02S1415 04550000
*         TUP(27) = ADDR(TU(27));                               02S1416 04551000
         LA    @08,TU+364                                       02S1416 04552000
         ST    @08,TUP+104                                      02S1416 04553000
*         TUP(27)->S99TUKEY = DALDUMMY;                         02S1417 04554000
         MVC   S99TUKEY(2,@08),@CB00171                         02S1417 04555000
*         TUP(27)->S99TUNUM = 0;                                02S1418 04556000
         SLR   @07,@07                                          02S1418 04557000
         STCM  @07,3,S99TUNUM(@08)                              02S1418 04558000
*         TUP(27)->S99TULNG = 0;                                02S1419 04559000
         STCM  @07,3,S99TULNG(@08)                              02S1419 04560000
*       END;                /* DUMMY DATASET TU       */        02S1420 04561000
*                                                               02S1420 04562000
*     TUP(27) = TUP(27) | '80000000'X;                        /* END OF 04563000
* BTU'S FOR 08       */                                         02S1421 04564000
@RF01414 L     @08,TUP+104                                      02S1421 04565000
         O     @08,@CF01105                                     02S1421 04566000
         ST    @08,TUP+104                                      02S1421 04567000
*    R1 = ADDR(S99RBPTR);              /* PT TO ADDR OF S99RB        */ 04568000
*                                                               02S1422 04569000
         LA    R1,S99RBPTR                                      02S1422 04570000
*     /*MACDATE Y-2 73082*/                                     02S1423 04571000
*     SVC (99);                        /* INVOKE DYNAMIC ALLOCATION  */ 04572000
*                                                               02S1423 04573000
         SVC   99                                               02S1423 04574000
*    RFY R15 RESTRICTED;                                        02S1424 04575000
*    IF R15=ZERO THEN                  /* ALLOC SUCCESSFUL           */ 04576000
         LTR   R15,R15                                          02S1425 04577000
         BNZ   @RF01425                                         02S1425 04578000
*      DO;                             /* YES                        */ 04579000
*        IF DA08DDN(1) = ' ' THEN      /* WAS DDNAME SUPPLIED ?      */ 04580000
         CLI   DA08DDN(BLOCKPTR),C' '                           02S1427 04581000
         BNE   @RF01427                                         02S1427 04582000
*          DDBLANK = ON;               /* SET SWITCH ON              */ 04583000
         OI    DDBLANK,B'10000000'                              02S1428 04584000
*        DA08DSO=TUP(1)->S99TUPAR(1:LENGTH(DA08DSO)); /*RET DSORG    */ 04585000
@RF01427 L     @14,TUP                                          02S1429 04586000
         MVC   DA08DSO(1,BLOCKPTR),S99TUPAR(@14)                02S1429 04587000
*        DA08DDN=TUP(2)->S99TUPAR(1:LENGTH(DA08DDN)); /* RET DDN     */ 04588000
         L     @14,TUP+4                                        02S1430 04589000
         MVC   DA08DDN(8,BLOCKPTR),S99TUPAR(@14)                02S1430 04590000
*        IF DA08PDSN ^= ZERO &         /* IS PTR TO DSNBUF 0 ?       */ 04591000
*          DA08PDSN -> DSNL = '2C'X &  /* IS DSNBUFFER 44 CHAR LONG? */ 04592000
*          DA08PDSN -> DSN(1) = ' ' THEN /* IS BUFFER BLANK ?        */ 04593000
         L     @14,DA08PDSN(,BLOCKPTR)                          02S1431 04594000
         LTR   @14,@14                                          02S1431 04595000
         BZ    @RF01431                                         02S1431 04596000
         CLC   DSNL(2,@14),@CH01134                             02S1431 04597000
         BNE   @RF01431                                         02S1431 04598000
         CLI   DSN(@14),C' '                                    02S1431 04599000
         BNE   @RF01431                                         02S1431 04600000
*          DO;                         /* RETURN DSNAME              */ 04601000
*            DA08PDSN->DSNL=TUP(3)->S99TULNG; /* RETURN DSNAME LENGTH*/ 04602000
         L     @08,TUP+8                                        02S1433 04603000
         ICM   @07,12,S99TULNG(@08)                             02S1433 04604000
         SRA   @07,16                                           02S1433 04605000
         STH   @07,DSNL(,@14)                                   02S1433 04606000
*            DA08PDSN->DSN(1:DA08PDSN->DSNL) =                  02S1434 04607000
*             TUP(3)->S99TUPAR(1:DA08PDSN->DSNL); /* RETURN DSNAME   */ 04608000
         BCTR  @07,0                                            02S1434 04609000
         EX    @07,@SM01199                                     02S1434 04610000
*          END;                        /* END RETURN DSNAME          */ 04611000
*        IF DA08MNM(1)^=' '            /* MEMBER NAME SPECIFIED      */ 04612000
*          & TUP(1)->PODSORG^=ON THEN  /* AND DS NOT PARTITIONED     */ 04613000
@RF01431 CLI   DA08MNM(BLOCKPTR),C' '                           02S1436 04614000
         BE    @RF01436                                         02S1436 04615000
         L     @14,TUP                                          02S1436 04616000
         TM    PODSORG(@14),B'00000010'                         02S1436 04617000
         BO    @RF01436                                         02S1436 04618000
*          DO;                         /* YES,MUST UNALLOC           */ 04619000
*            S99VERB=S99VRBUN;         /* SET SVC 99 VERB CODE       */ 04620000
*                                                               02S1438 04621000
*                                                               02S1438 04622000
         MVI   S99VERB,X'02'                                    02S1438 04623000
*               DO;                                             02S1439 04624000
*                 TUP(1) = ADDR(TU(1));                         02S1440 04625000
         LA    @14,TU                                           02S1440 04626000
         ST    @14,TUP                                          02S1440 04627000
*                 TUP(1)->S99TUKEY = DUNDDNAM;                  02S1441 04628000
         MVC   S99TUKEY(2,@14),@CB00894                         02S1441 04629000
*                 TUP(1)->S99TUNUM = 1;                         02S1442 04630000
         MVC   S99TUNUM(2,@14),@CH00035                         02S1442 04631000
*                 TUP(1)->S99TULNG = LENGTH(DA08DDN);           02S1443 04632000
         MVC   S99TULNG(2,@14),@CH00048                         02S1443 04633000
*                 TUP(1)->S99TUPAR(1:LENGTH(DA08DDN)) = DA08DDN;        04634000
         MVC   S99TUPAR(8,@14),DA08DDN(BLOCKPTR)                02S1444 04635000
*               END;                /* DDNAME TEXT UNIT  */     02S1445 04636000
*                                                               02S1445 04637000
*               DO;                                             02S1446 04638000
*                 TUP(2) = ADDR(TU(2));                         02S1447 04639000
         LA    @14,TU+14                                        02S1447 04640000
         ST    @14,TUP+4                                        02S1447 04641000
*                 TUP(2)->S99TUKEY = DUNREMOV;                  02S1448 04642000
         MVC   S99TUKEY(2,@14),@CB00157                         02S1448 04643000
*                 TUP(2)->S99TUNUM = 0;                         02S1449 04644000
         SLR   @08,@08                                          02S1449 04645000
         STCM  @08,3,S99TUNUM(@14)                              02S1449 04646000
*                 TUP(2)->S99TULNG = 0;                         02S1450 04647000
         STCM  @08,3,S99TULNG(@14)                              02S1450 04648000
*               END;                  /* UNALLOC OPTION             */  04649000
*                                                               02S1451 04650000
*             TUP(2) = TUP(2) | '80000000'X;                    02S1452 04651000
         O     @14,@CF01105                                     02S1452 04652000
         ST    @14,TUP+4                                        02S1452 04653000
*            R1=ADDR(S99RBPTR);        /* POINT TO ADDR OF S99RB     */ 04654000
*                                                               02S1453 04655000
         LA    R1,S99RBPTR                                      02S1453 04656000
*             /*MACDATE Y-2 73082*/                             02S1454 04657000
*             SVC (99);                /* ISSUE SVC 99               */ 04658000
         SVC   99                                               02S1454 04659000
*            DA08DARC=DRNOMBRP;        /* MEM SPEC,DS NOT PO RET CODE*/ 04660000
         MVC   DA08DARC(2,BLOCKPTR),@CH00197                    02S1455 04661000
*            RETCODE=DRDYNERR;         /* DYN ALLOC RETURN CODE      */ 04662000
         LA    RETCODE,12                                       02S1456 04663000
*            IF DDBLANK = ON THEN      /* WAS DDNAME SUPPLIED ?      */ 04664000
         TM    DDBLANK,B'10000000'                              02S1457 04665000
         BNO   @RF01457                                         02S1457 04666000
*              DA08DDN = '';           /* NO, SET TO BLANKS AGAIN    */ 04667000
         MVI   DA08DDN(BLOCKPTR),C' '                           02S1458 04668000
         MVC   DA08DDN+1(7,BLOCKPTR),DA08DDN(BLOCKPTR)          02S1458 04669000
*          END;                                                 02S1459 04670000
@RF01457 DS    0H                                               02S1460 04671000
*      END;                                                     02S1460 04672000
*                                                               02S1460 04673000
@RF01436 DS    0H                                               02S1461 04674000
*    IF R15=4 THEN                     /* ENVIRONMENT ERROR?         */ 04675000
@RF01425 C     R15,@CF00059                                     02S1461 04676000
         BNE   @RF01461                                         02S1461 04677000
*      DO;                             /* YES, TRANSLATE CODE        */ 04678000
*        IF S99ERROR=RCDDUNAV THEN     /* DDNAME UNAVAILABLE         */ 04679000
         CLC   S99ERROR(2),@CB00280                             02S1463 04680000
         BNE   @RF01463                                         02S1463 04681000
*          RETCODE=20;                                          02S1464 04682000
         LA    RETCODE,20                                       02S1464 04683000
*        IF S99ERROR=RCDCONDD THEN     /* DUPLICATE DDN IF DECONCAT  */ 04684000
@RF01463 CLC   S99ERROR(2),@CB00284                             02S1465 04685000
         BNE   @RF01465                                         02S1465 04686000
*          DO;                                                  02S1466 04687000
*            DA08DARC=DRDUPEDD;                                 02S1467 04688000
         MVC   DA08DARC(2,BLOCKPTR),@CH00183                    02S1467 04689000
*            RETCODE=DRDYNERR;                                  02S1468 04690000
         LA    RETCODE,12                                       02S1468 04691000
*          END;                                                 02S1469 04692000
*        IF S99ERROR=RCNTUNLC          /* NOT-IN-USE LIMIT           */ 04693000
*          | S99ERROR=RCLIMITS THEN    /* OR AT ALLOC LIMIT          */ 04694000
@RF01465 CLC   S99ERROR(2),@CB00290                             02S1470 04695000
         BE    @RT01470                                         02S1470 04696000
         CLC   S99ERROR(2),@CB00300                             02S1470 04697000
         BNE   @RF01470                                         02S1470 04698000
@RT01470 DS    0H                                               02S1471 04699000
*          RETCODE=16;                                          02S1471 04700000
         LA    RETCODE,16                                       02S1471 04701000
*        IF S99ERROR=RCNEWFND THEN     /* NEW D.S. EXIST             */ 04702000
@RF01470 CLC   S99ERROR(2),@CB00296                             02S1472 04703000
         BNE   @RF01472                                         02S1472 04704000
*          RETCODE=32;                                          02S1473 04705000
         LA    RETCODE,32                                       02S1473 04706000
*        IF S99ERROR=RCDELETE THEN     /* OLD D.S. ELIGIBLE FOR DELET*/ 04707000
@RF01472 CLC   S99ERROR(2),@CB00298                             02S1474 04708000
         BNE   @RF01474                                         02S1474 04709000
*          RETCODE=44;                                          02S1475 04710000
         LA    RETCODE,44                                       02S1475 04711000
*        IF S99ERROR=RCDCBRNF THEN     /* DCB REF NOT FOUND          */ 04712000
@RF01474 CLC   S99ERROR(2),@CB00302                             02S1476 04713000
         BNE   @RF01476                                         02S1476 04714000
*          RETCODE=28;                                          02S1477 04715000
         LA    RETCODE,28                                       02S1477 04716000
*        IF S99ERROR(1)='17'X          /* LOCATE ERROR               */ 04717000
*          | S99ERROR(1)='57'X THEN    /* OR CATALOG ERROR           */ 04718000
@RF01476 CLI   S99ERROR,X'17'                                   02S1478 04719000
         BE    @RT01478                                         02S1478 04720000
         CLI   S99ERROR,X'57'                                   02S1478 04721000
         BNE   @RF01478                                         02S1478 04722000
@RT01478 DS    0H                                               02S1479 04723000
*          DO;                                                  02S1479 04724000
*            DA08CTRC=S99ERROR(2);                              02S1480 04725000
         SLR   @14,@14                                          02S1480 04726000
         IC    @14,S99ERROR+1                                   02S1480 04727000
         STH   @14,DA08CTRC(,BLOCKPTR)                          02S1480 04728000
*            RETCODE=DRCATMGT;                                  02S1481 04729000
         LA    RETCODE,8                                        02S1481 04730000
*            IF S99ERROR(1)='17'X THEN /* LOCATE ERROR               */ 04731000
         CLI   S99ERROR,X'17'                                   02S1482 04732000
         BNE   @RF01482                                         02S1482 04733000
*              DA08DARC=S99ERROR;      /* SET SVC 99 RET CODE ALSO   */ 04734000
         LH    @14,S99ERROR                                     02S1483 04735000
         N     @14,@CF01193                                     02S1483 04736000
         STH   @14,DA08DARC(,BLOCKPTR)                          02S1483 04737000
*          END;                                                 02S1484 04738000
@RF01482 DS    0H                                               02S1485 04739000
*        IF RETCODE=ZERO THEN          /* RETURN CODE SET YET?       */ 04740000
@RF01478 LTR   RETCODE,RETCODE                                  02S1485 04741000
         BNZ   @RF01485                                         02S1485 04742000
*          DO;                         /* NO                         */ 04743000
*            DA08DARC=S99ERROR;        /* SET REASON CODE            */ 04744000
         LH    @14,S99ERROR                                     02S1487 04745000
         N     @14,@CF01193                                     02S1487 04746000
         STH   @14,DA08DARC(,BLOCKPTR)                          02S1487 04747000
*            RETCODE =DRDYNERR;        /* SET SVC 99 RETCODE CODE    */ 04748000
         LA    RETCODE,12                                       02S1488 04749000
*          END;                                                 02S1489 04750000
*      END;                                                     02S1490 04751000
*                                                               02S1490 04752000
@RF01485 DS    0H                                               02S1491 04753000
*    IF R15=8 THEN                     /* INSTALLATION EXIT FAIL     */ 04754000
@RF01461 C     R15,@CF00048                                     02S1491 04755000
         BNE   @RF01491                                         02S1491 04756000
*      RETCODE=DRREQDEN;               /* SET RETURN CODE TO 52   */    04757000
*                                                               02S1492 04758000
         LA    RETCODE,52                                       02S1492 04759000
*    IF R15=12 THEN                    /* SVC99 PARAMETER ERROR      */ 04760000
@RF01491 C     R15,@CF00034                                     02S1493 04761000
         BNE   @RF01493                                         02S1493 04762000
*      DO;                                                      02S1494 04763000
*        IF S99ERROR=RCINPARM THEN     /* INVALID TEXT UNIT PARM     */ 04764000
         CLC   S99ERROR(2),@CB00248                             02S1495 04765000
         BNE   @RF01495                                         02S1495 04766000
*          DO;                                                  02S1496 04767000
*            IF S99INFO=DALDDNAM THEN  /* INVALID DDNAME PARM        */ 04768000
         CLC   S99INFO(2),@CB00894                              02S1497 04769000
         BNE   @RF01497                                         02S1497 04770000
*              DA08DARC=DRDDNINV;                               02S1498 04771000
         MVC   DA08DARC(2,BLOCKPTR),@CH00185                    02S1498 04772000
*            IF S99INFO=DALDSNAM THEN  /* INVALID DSNAME PARM        */ 04773000
@RF01497 CLC   S99INFO(2),@CB00896                              02S1499 04774000
         BNE   @RF01499                                         02S1499 04775000
*              DA08DARC=DRDSNINV;                               02S1500 04776000
         MVC   DA08DARC(2,BLOCKPTR),@CH00189                    02S1500 04777000
*            IF S99INFO=DALMEMBR THEN  /* INVALID MEMBER NAME PARM   */ 04778000
@RF01499 CLC   S99INFO(2),@CB00898                              02S1501 04779000
         BNE   @RF01501                                         02S1501 04780000
*              DA08DARC=DRMBRINV;                               02S1502 04781000
         MVC   DA08DARC(2,BLOCKPTR),@CH00187                    02S1502 04782000
*            IF S99INFO=DALSTATS       /* INVALID STATUS             */ 04783000
*              | S99INFO=DALNDISP      /* OR INVALID NORMAL DISP     */ 04784000
*              | S99INFO=DALCDISP THEN /* OR INVALID CONDITIONAL DISP*/ 04785000
@RF01501 CLC   S99INFO(2),@CB00155                              02S1503 04786000
         BE    @RT01503                                         02S1503 04787000
         CLC   S99INFO(2),@CB00901                              02S1503 04788000
         BE    @RT01503                                         02S1503 04789000
         CLC   S99INFO(2),@CB00903                              02S1503 04790000
         BNE   @RF01503                                         02S1503 04791000
@RT01503 DS    0H                                               02S1504 04792000
*              DA08DARC=DRDSPINV;                               02S1504 04793000
         MVC   DA08DARC(2,BLOCKPTR),@CH00201                    02S1504 04794000
*          END;                                                 02S1505 04795000
@RF01503 DS    0H                                               02S1506 04796000
*        IF S99ERROR=RCINKEYL          /* INVALID DSNAME TU LENGTH   */ 04797000
*          & S99INFO=DALDSNAM THEN                              02S1506 04798000
@RF01495 CLC   S99ERROR(2),@CB00262                             02S1506 04799000
         BNE   @RF01506                                         02S1506 04800000
         CLC   S99INFO(2),@CB00896                              02S1506 04801000
         BNE   @RF01506                                         02S1506 04802000
*          DA08DARC=DRDSNLEN;                                   02S1507 04803000
         MVC   DA08DARC(2,BLOCKPTR),@CH00199                    02S1507 04804000
*        IF DA08DARC=ZERO THEN         /* REASON CODE SET YET?       */ 04805000
@RF01506 LH    @14,DA08DARC(,BLOCKPTR)                          02S1508 04806000
         LTR   @14,@14                                          02S1508 04807000
         BNZ   @RF01508                                         02S1508 04808000
*          RETCODE = 4;                /* INVALID PARMS      @YM07275*/ 04809000
         LA    RETCODE,4                                        02S1509 04810000
*        ELSE                          /* ALLOCATION ERROR   @YM07275*/ 04811000
*          RETCODE=DRDYNERR;           /* SET RETURN CODE            */ 04812000
         B     @RC01508                                         02S1510 04813000
@RF01508 LA    RETCODE,12                                       02S1510 04814000
*      END;                                                     02S1511 04815000
@RC01508 DS    0H                                               02S1512 04816000
*    RFY R15 UNRESTRICTED;                                      02S1512 04817000
@RF01493 DS    0H                                               02S1513 04818000
*  END;                                                         02S1513 04819000
*IF DEFADDR ^= ZERO THEN                /* WAS DEFAULT CSECT LOADED?    04820000
*                                                            @YM06251*/ 04821000
@RF01135 LTR   DEFADDR,DEFADDR                                  02S1514 04822000
         BZ    @RF01514                                         02S1514 04823000
*  GEN (DELETE EP=IEFAB445);            /* YES, DELETE IT    @YM06251*/ 04824000
         DELETE EP=IEFAB445                                             04825000
*END DAIR08;                                                    02S1516 04826000
@EL00002 DS    0H                                               02S1516 04827000
@EF00002 DS    0H                                               02S1516 04828000
@ER00002 LM    @14,@04,@SA00002                                 02S1516 04829000
         LM    @06,@12,@SA00002+28                              02S1516 04830000
         BR    @14                                              02S1516 04831000
*/********************************************************************/ 04832000
*/*                                                                  */ 04833000
*/* SEGMENT NAME - DSNCHECK                                          */ 04834000
*/* DESCRIPTIVE NAME - DATA SET NAME CHECK ROUTINE                   */ 04835000
*/*                                                                  */ 04836000
*/* FUNCTION - THIS ROUTINE IS INVOKED TO DETERMINE:                 */ 04837000
*/*            1. IF THE DATA SET NAME LENGTH IS A LEAST 1           */ 04838000
*/*               CHARACTER AND NOT GREATER THAN 44 CHARACTERS.      */ 04839000
*/*            2. IF THE USERID SHOULD PREFIX THE DATA SET NAME AND  */ 04840000
*/*               IF SO, WILL THE RESULTING DATA SET NAME BE TOO     */ 04841000
*/*               LONG(GREATER THAN 44 CHARACTERS).                  */ 04842000
*/*                                                                  */ 04843000
*/*            THIS ROUTINE ALSO PREFIXES THE USERID TO THE DATA     */ 04844000
*/*            SET NAME IF NECESSARY.                                */ 04845000
*/*                                                                  */ 04846000
*/* OPERATION - IF THE PREFIX USERID BIT IS ON, THE FOLLOWING TESTS  */ 04847000
*/*             ARE DONE BEFORE ANY SUBSEQUENT TESTS.                */ 04848000
*/*             1. IS PTR TO DSNAME ZERO ?                           */ 04849000
*/*             2. IS THE 1ST CHARACTER OF THE DSNAME BLANK ?        */ 04850000
*/*             3. IS THE 1ST CHARACTER & (TEMPORARY DSNAME) ?       */ 04851000
*/*             IF ANY OF THE ABOVE CONDITIONS EXIST, THIS IS AN     */ 04852000
*/*             ERROR AND A RETURN CODE OF 4 IS RETURNED IN REG 15.  */ 04853000
*/*                                                                  */ 04854000
*/*             THE FOLLOWING TESTS ARE ALWAYS DONE:                 */ 04855000
*/*             1. IS THE DSNAME LENGTH GREATER THAN 44 ?            */ 04856000
*/*             2. IS THE DSNAME LENGTH LESS THAN 1 ?                */ 04857000
*/*             3. IF THE USERID IS TO PREFIX THE DSNAME, WILL THE   */ 04858000
*/*                RESULTING LENGTH EXCEED 44 CHARACTERS ?           */ 04859000
*/*             4. IS THE 1ST CHARACTER OF THE DSNAME BLANK AND      */ 04860000
*/*                THE DSNAME LENGTH NOT EQUAL TO 44 ?               */ 04861000
*/*             IF ANY OF THE ABOVE CONDITIONS EXIST, THIS IS AN     */ 04862000
*/*             ERROR AND A RETURN CODE OF 4 IS RETURNED IN REG 15.  */ 04863000
*/*                                                                  */ 04864000
*/*             IF NO ERROR CONDITIONS EXIST AND THE USERID IS TO    */ 04865000
*/*             PREFIX THE DSNAME, THE USERID(FROM THE UPT) IS       */ 04866000
*/*             MOVED TO THE DAIR DSNAME BUFFER, A PERIOD IS         */ 04867000
*/*             INSERTED AFTER THE USERID AND THE DSNAME IS THEN     */ 04868000
*/*             MOVED.                                               */ 04869000
*/*                                                                  */ 04870000
*/*             IF THE USERID IS NOT TO PREFIX THE DSNAME, ONLY THE  */ 04871000
*/*             DSNAME IS MOVED INTO THE DAIR DSNAME BUFFER.         */ 04872000
*/*                                                                  */ 04873000
*/* ENTRY - DSNCHECK (INTERNAL PROCEDURE)                            */ 04874000
*/*                                                                  */ 04875000
*/* PURPOSE - SEE FUNCTION                                           */ 04876000
*/*                                                                  */ 04877000
*/* INPUT DATA - DANNCTL(NN = THE DAIR CODE NUMBER) THE DAIR         */ 04878000
*/*              CONTROL BYTE FIELD                                  */ 04879000
*/*              DANNPDSN(NN = THE DAIR CODE NUMBER) THE POINTER     */ 04880000
*/*              TO THE DSNAME                                       */ 04881000
*/* EXITS - ALL ARE TO THE NEXT SEQUENTIAL INSTRUCTION               */ 04882000
*/*                                                                  */ 04883000
*/*  NORMAL - RETURN VIA REG 14                                      */ 04884000
*/*                                                                  */ 04885000
*/*  ERROR - RETURN VIA REG 14                                       */ 04886000
*/*                                                                  */ 04887000
*/* OUTPUT DATA - DSNAME IS IN DAIR DSNAME BUFFER.                   */ 04888000
*/*               0 IN REG 15 IF EVERYTHING IS VALID                 */ 04889000
*/*               4 IN REG 15 IF INVALID CONDITION                   */ 04890000
*/*                                                                  */ 04891000
*/********************************************************************/ 04892000
*DSNCHECK: PROC (UBYTE,DSNP);                                   02S1517 04893000
*                                                               02S1517 04894000
DSNCHECK STM   @14,@12,12(@13)                                  02S1517 04895000
         MVC   @PC00003(8),0(@01)                               02S1517 04896000
*DSNRTCD = 0;                          /* INIT R15 RETURN CODE       */ 04897000
         SLR   DSNRTCD,DSNRTCD                                  02S1518 04898000
*DSNBUF = '';                          /* INIT DSNBUF TO BLANKS      */ 04899000
         MVI   DSNBUF,C' '                                      02S1519 04900000
         MVC   DSNBUF+1(43),DSNBUF                              02S1519 04901000
*IF PREFIXU='1'B                       /* PREFIX TSO USERID REQUESTED*/ 04902000
*   & (DSNP=0                          /* ERR IF NO DSNAME SUPPLIED  */ 04903000
*      | DSN(1)=' '                    /* ERR IF DSNAME IS BLANK     */ 04904000
*      | DSN(1)='&') THEN              /* ERR IF TEMP. DSNAME        */ 04905000
         L     @08,@PC00003                                     02S1520 04906000
         TM    PREFIXU(@08),B'00100000'                         02S1520 04907000
         BNO   @RF01520                                         02S1520 04908000
         L     @08,@PC00003+4                                   02S1520 04909000
         L     @08,DSNP(,@08)                                   02S1520 04910000
         LTR   @08,@08                                          02S1520 04911000
         BZ    @RT01520                                         02S1520 04912000
         CLI   DSN(@08),C' '                                    02S1520 04913000
         BE    @RT01520                                         02S1520 04914000
         CLI   DSN(@08),C'&&'                                   02S1520 04915000
         BNE   @RF01520                                         02S1520 04916000
@RT01520 DS    0H                                               02S1521 04917000
*   DSNRTCD = 4;                       /* WILL RETURN WITH R15=4     */ 04918000
         LA    DSNRTCD,4                                        02S1521 04919000
*IF DSNP^=0 THEN                       /* DSNAME SUPPLIED            */ 04920000
@RF01520 L     @08,@PC00003+4                                   02S1522 04921000
         L     @08,DSNP(,@08)                                   02S1522 04922000
         LTR   @08,@08                                          02S1522 04923000
         BZ    @RF01522                                         02S1522 04924000
*  DO;                                                          02S1523 04925000
*    IF DSNL>44 | DSNL<1               /* DSNAME LENGTH INVALID      */ 04926000
*      | (PREFIXU='1'B & (UPTPREFL+DSNL+1>44))  /* OR CONCAT'D NAME     04927000
*                                                  TOO BIG           */ 04928000
*      | (DSN(1)=' ' & DSNL^=44) THEN  /* INVALID RETN FIELD         */ 04929000
         LA    @06,44                                           02S1524 04930000
         LH    @08,DSNL(,@08)                                   02S1524 04931000
         CR    @08,@06                                          02S1524 04932000
         BH    @RT01524                                         02S1524 04933000
         LA    @15,1                                            02S1524 04934000
         CR    @08,@15                                          02S1524 04935000
         BL    @RT01524                                         02S1524 04936000
         L     @14,@PC00003                                     02S1524 04937000
         TM    PREFIXU(@14),B'00100000'                         02S1524 04938000
         BNO   @GL00059                                         02S1524 04939000
         L     @01,DAPLUPT(,DAPLPTR)                            02S1524 04940000
         SLR   @00,@00                                          02S1524 04941000
         IC    @00,UPTPREFL(,@01)                               02S1524 04942000
         ALR   @08,@00                                          02S1524 04943000
         ALR   @08,@15                                          02S1524 04944000
         CR    @08,@06                                          02S1524 04945000
         BH    @RT01524                                         02S1524 04946000
@GL00059 L     @08,@PC00003+4                                   02S1524 04947000
         L     @08,DSNP(,@08)                                   02S1524 04948000
         CLI   DSN(@08),C' '                                    02S1524 04949000
         BNE   @RF01524                                         02S1524 04950000
         CLC   DSNL(2,@08),@CH00092                             02S1524 04951000
         BE    @RF01524                                         02S1524 04952000
@RT01524 DS    0H                                               02S1525 04953000
*      DSNRTCD = 4;                    /* RETURN R15=4 TO CALLER     */ 04954000
*                                                               02S1525 04955000
         LA    DSNRTCD,4                                        02S1525 04956000
*    IF DSNRTCD=0 THEN                 /* NO ERR & DSNAME GIVEN      */ 04957000
@RF01524 LTR   DSNRTCD,DSNRTCD                                  02S1526 04958000
         BNZ   @RF01526                                         02S1526 04959000
*      IF PREFIXU='1'B &               /* PREFIX USERID REQUESTED ?  */ 04960000
*         UPTPREFL ^= 0 THEN           /* IS USERID PRESENT ?@YM05038*/ 04961000
         L     @08,@PC00003                                     02S1527 04962000
         TM    PREFIXU(@08),B'00100000'                         02S1527 04963000
         BNO   @RF01527                                         02S1527 04964000
         L     @08,DAPLUPT(,DAPLPTR)                            02S1527 04965000
         CLI   UPTPREFL(@08),0                                  02S1527 04966000
         BE    @RF01527                                         02S1527 04967000
*          DO;                         /* PREFIX THE USERID          */ 04968000
*            DSNBUF(1:UPTPREFL) = UPTPREFX(1:UPTPREFL);/* MOVE USERID*/ 04969000
         SLR   @06,@06                                          02S1529 04970000
         IC    @06,UPTPREFL(,@08)                               02S1529 04971000
         LR    @15,@06                                          02S1529 04972000
         BCTR  @15,0                                            02S1529 04973000
         EX    @15,@SM01201                                     02S1529 04974000
*            DSNBUF(UPTPREFL+1) = '.'; /* SEPARATOR                  */ 04975000
         LA    @08,DSNBUF(@06)                                  02S1530 04976000
         MVI   0(@08),C'.'                                      02S1530 04977000
*            DSNBUF(UPTPREFL+2:UPTPREFL+1+DSNL) = DSN(1:DSNL);  02S1531 04978000
         LA    @08,DSNBUF+1(@06)                                02S1531 04979000
         LA    @15,1                                            02S1531 04980000
         ALR   @15,@06                                          02S1531 04981000
         L     @14,@PC00003+4                                   02S1531 04982000
         L     @14,DSNP(,@14)                                   02S1531 04983000
         AH    @15,DSNL(,@14)                                   02S1531 04984000
         SLR   @15,@06                                          02S1531 04985000
         BCTR  @15,0                                            02S1531 04986000
         BCTR  @15,0                                            02S1531 04987000
         EX    @15,@SM01203                                     02S1531 04988000
*                                      /* MOVE DATA SET NAME         */ 04989000
*          END;                        /* END PREFIX USERID          */ 04990000
*      ELSE                            /* DON'T PREFIX USERID        */ 04991000
*        DSNBUF(1:DSNL) = DSN(1:DSNL); /* DSNAME ONLY IS RESULT      */ 04992000
         B     @RC01527                                         02S1533 04993000
@RF01527 L     @08,@PC00003+4                                   02S1533 04994000
         L     @08,DSNP(,@08)                                   02S1533 04995000
         LH    @06,DSNL(,@08)                                   02S1533 04996000
         BCTR  @06,0                                            02S1533 04997000
         EX    @06,@SM01205                                     02S1533 04998000
*  END;                                                         02S1534 04999000
*                                                               02S1534 05000000
@RC01527 DS    0H                                               02S1534 05001000
@RF01526 DS    0H                                               02S1535 05002000
*RETURN CODE(DSNRTCD);                 /* RETURN TO CALLER           */ 05003000
@RF01522 LR    @15,DSNRTCD                                      02S1535 05004000
         L     @14,12(,@13)                                     02S1535 05005000
         LM    @00,@12,20(@13)                                  02S1535 05006000
         BR    @14                                              02S1535 05007000
*END DSNCHECK;                                                  02S1536 05008000
*RESPECIFY R4 UNRESTRICTED;            /* RELEASE USE OF R4          */ 05009000
*END IEFDB4D0                                                   01S1538 05010000
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      * 05011000
*/*%INCLUDE SYSLIB  (DAIRSPEC)                                        * 05012000
*/*%INCLUDE SYSLIB  (DAIRDATA)                                        * 05013000
*/*%INCLUDE SYSLIB  (IKJDAPL )                                        * 05014000
*/*%INCLUDE SYSLIB  (IEFZB4DA)                                        * 05015000
*/*%INCLUDE SYSLIB  (BTUMACRO)                                        * 05016000
*/*%INCLUDE SYSLIB  (IKJUPT  )                                        * 05017000
*/*%INCLUDE SYSLIB  (IKJDAP00)                                        * 05018000
*/*%INCLUDE SYSLIB  (IKJDAP04)                                        * 05019000
*/*%INCLUDE SYSLIB  (IKJDAP08)                                        * 05020000
*/*%INCLUDE SYSLIB  (IKJDAP0C)                                        * 05021000
*/*%INCLUDE SYSLIB  (IKJDAP10)                                        * 05022000
*/*%INCLUDE SYSLIB  (IKJDAP14)                                        * 05023000
*/*%INCLUDE SYSLIB  (IKJDAP18)                                        * 05024000
*/*%INCLUDE SYSLIB  (IKJDAP1C)                                        * 05025000
*/*%INCLUDE SYSLIB  (IKJDAP24)                                        * 05026000
*/*%INCLUDE SYSLIB  (IKJDAP28)                                        * 05027000
*/*%INCLUDE SYSLIB  (IKJDAP2C)                                        * 05028000
*/*%INCLUDE SYSLIB  (IKJDAP30)                                        * 05029000
*/*%INCLUDE SYSLIB  (IKJDAP34)                                        * 05030000
*/*%INCLUDE SYSLIB  (IKJDACB )                                        * 05031000
*/*%INCLUDE SYSLIB  (IKJPSCB )                                        * 05032000
*/*%INCLUDE SYSLIB  (IEFZB4D0)                                        * 05033000
*/*%INCLUDE SYSLIB  (IEFZB4D2)                                        * 05034000
*/*%INCLUDE SYSLIB  (DAIR00  )                                        * 05035000
*/*%INCLUDE SYSLIB  (DAIR00SP)                                        * 05036000
*/*%INCLUDE SYSLIB  (DAIR04  )                                        * 05037000
*/*%INCLUDE SYSLIB  (DAIR04SP)                                        * 05038000
*/*%INCLUDE SYSLIB  (DAIR0C  )                                        * 05039000
*/*%INCLUDE SYSLIB  (DAIR0CSP)                                        * 05040000
*/*%INCLUDE SYSLIB  (DAIR10  )                                        * 05041000
*/*%INCLUDE SYSLIB  (DAIR10SP)                                        * 05042000
*/*%INCLUDE SYSLIB  (DAIR14  )                                        * 05043000
*/*%INCLUDE SYSLIB  (DAIR14SP)                                        * 05044000
*/*%INCLUDE SYSLIB  (DAIR18  )                                        * 05045000
*/*%INCLUDE SYSLIB  (DAIR18SP)                                        * 05046000
*/*%INCLUDE SYSLIB  (DAIR1C  )                                        * 05047000
*/*%INCLUDE SYSLIB  (DAIR1CSP)                                        * 05048000
*/*%INCLUDE SYSLIB  (DAIR24  )                                        * 05049000
*/*%INCLUDE SYSLIB  (DAIR24SP)                                        * 05050000
*/*%INCLUDE SYSLIB  (DAIR2C  )                                        * 05051000
*/*%INCLUDE SYSLIB  (DAIR2CSP)                                        * 05052000
*/*%INCLUDE SYSLIB  (DAIR30  )                                        * 05053000
*/*%INCLUDE SYSLIB  (DAIR30SP)                                        * 05054000
*/*%INCLUDE SYSLIB  (DAIR34  )                                        * 05055000
*/*%INCLUDE SYSLIB  (DAIR34SP)                                        * 05056000
*/*%INCLUDE SYSLIB  (DAIR08  )                                        * 05057000
*/*%INCLUDE SYSLIB  (DAIR08SP)                                        * 05058000
*/*%INCLUDE SYSLIB  (DSNCHECK)                                        * 05059000
*/*%INCLUDE SYSLIB  (DSNCHKSP)                                        * 05060000
*;                                                              01S1538 05061000
@DATA    DS    0H                                                       05062000
@CH00062 DC    H'2'                                                     05063000
@CH00079 DC    H'3'                                                     05064000
@CH00090 DC    H'6'                                                     05065000
@CH00032 DC    H'9'                                                     05066000
@CH00092 DC    H'44'                                                    05067000
@CH00179 DC    XL2'0304'                                                05068000
@CH00181 DC    XL2'0308'                                                05069000
@CH00183 DC    XL2'0314'                                                05070000
@CH00185 DC    XL2'0318'                                                05071000
@CH00187 DC    XL2'031C'                                                05072000
@CH00189 DC    XL2'0320'                                                05073000
@CH00191 DC    XL2'0324'                                                05074000
@CH00193 DC    XL2'0328'                                                05075000
@CH00195 DC    XL2'032C'                                                05076000
@CH00197 DC    XL2'0330'                                                05077000
@CH00199 DC    XL2'0334'                                                05078000
@CH00201 DC    XL2'0338'                                                05079000
@CH00894 DC    XL2'0001'                                                05080000
@CH00896 DC    XL2'0002'                                                05081000
@CH01134 DC    XL2'2C'                                                  05082000
@SX01194 XC    DA14AREA(0,@04),DA14AREA(@04)                            05083000
@SM01199 MVC   DSN(0,@14),S99TUPAR(@08)                                 05084000
@SM01201 MVC   DSNBUF(0),UPTPREFX(@08)                                  05085000
@SM01203 MVC   0(0,@08),DSN(@14)                                        05086000
@SM01205 MVC   DSNBUF(0),DSN(@08)                                       05087000
@DATD    DSECT                                                          05088000
         DS    0F                                                       05089000
@SA00001 DS    18F                                                      05090000
@PC00003 DS    2F                                                       05091000
@SA00002 DS    14F                                                      05092000
@AL00001 DS    2A                                                       05093000
@TF00001 DS    F                                                        05094000
IEFDB4D0 CSECT                                                          05095000
         DS    0F                                                       05096000
@CF00035 DC    F'1'                                                     05097000
@CH00035 EQU   @CF00035+2                                               05098000
@CF00059 DC    F'4'                                                     05099000
@CH00059 EQU   @CF00059+2                                               05100000
@CF01104 DC    F'5'                                                     05101000
@CH01104 EQU   @CF01104+2                                               05102000
@CF00048 DC    F'8'                                                     05103000
@CH00048 EQU   @CF00048+2                                               05104000
@CF00033 DC    F'10'                                                    05105000
@CH00033 EQU   @CF00033+2                                               05106000
@CF00034 DC    F'12'                                                    05107000
@CF01110 DC    F'256'                                                   05108000
@CF01197 DC    F'-8'                                                    05109000
@CF01196 DC    F'-5'                                                    05110000
@CF01192 DC    F'-4'                                                    05111000
@CF00150 DC    XL4'01000000'                                            05112000
@CF01105 DC    XL4'80000000'                                            05113000
@CF01108 DC    XL4'44000000'                                            05114000
@CF01193 DC    XL4'0000FFFF'                                            05115000
@DATD    DSECT                                                          05116000
         DS    0D                                                       05117000
CORELEN  DS    F                                                        05118000
CORESIZE DS    F                                                        05119000
UPTPTR   DS    A                                                        05120000
DAPB0PTR DS    A                                                        05121000
DAPB1PTR DS    A                                                        05122000
DAPB2PTR DS    A                                                        05123000
DAPB3PTR DS    A                                                        05124000
DACBPTR  DS    A                                                        05125000
PSCBPTR  DS    A                                                        05126000
S99RBPTR DS    AL4                                                      05127000
         ORG   S99RBPTR                                                 05128000
S99RBPND DS    BL1                                                      05129000
         ORG   S99RBPTR+4                                               05130000
         DS    0D                                                       05131000
@TS00001 DS    CL8                                                      05132000
STATBUF  DS    CL1                                                      05133000
TEMPAREA DS    CL3                                                      05134000
SW       DS    BL1                                                      05135000
         ORG   SW                                                       05136000
QUIT     DS    BL1                                                      05137000
         ORG   SW+1                                                     05138000
         DS    CL3                                                      05139000
TUPTRS   DS    CL120                                                    05140000
         ORG   TUPTRS                                                   05141000
TUP      DS    30A                                                      05142000
         ORG   TUPTRS+120                                               05143000
TUDSN    DS    CL50                                                     05144000
         ORG   TUDSN                                                    05145000
@NM00003 DS    CL6                                                      05146000
DSNBUF   DS    CL44                                                     05147000
         ORG   TUDSN+50                                                 05148000
TUEXPDT  DS    CL11                                                     05149000
         ORG   TUEXPDT                                                  05150000
@NM00004 DS    CL6                                                      05151000
EXPDTPAR DS    CL5                                                      05152000
         ORG   EXPDTPAR                                                 05153000
YY       DS    CL2                                                      05154000
DDD      DS    CL3                                                      05155000
         ORG   TUEXPDT+11                                               05156000
         DS    CL3                                                      05157000
CIRPARMS DS    CL100                                                    05158000
         ORG   CIRPARMS                                                 05159000
CIROPT   DS    CL1                                                      05160000
@NM00005 DS    CL2                                                      05161000
CIRLOCRC DS    AL1                                                      05162000
CIRSRCH  DS    AL4                                                      05163000
CIRCVOL  DS    AL4                                                      05164000
CIRWA    DS    AL4                                                      05165000
CIRSAVE  DS    AL4                                                      05166000
CIRPSWD  DS    AL4                                                      05167000
CIRRSA   DS    19A                                                      05168000
         ORG   CIRPARMS+100                                             05169000
         DS    CL4                                                      05170000
LOCPARM  DS    CL281                                                    05171000
         ORG   LOCPARM                                                  05172000
CTRL     DS    FL4                                                      05173000
LOCDSPTR DS    AL4                                                      05174000
NOPTION  DS    FL4                                                      05175000
AREAPTR  DS    AL4                                                      05176000
LOCAREA  DS    CL265                                                    05177000
         ORG   LOCPARM+281                                              05178000
DDBLANK  DS    BL1                                                      05179000
WORK     DS    CL1                                                      05180000
         DS    CL1                                                      05181000
S99RB    DS    CL20                                                     05182000
         ORG   S99RB                                                    05183000
S99RBLN  DS    CL1                                                      05184000
S99VERB  DS    CL1                                                      05185000
S99FLAG1 DS    CL2                                                      05186000
         ORG   S99FLAG1                                                 05187000
S99FLG11 DS    CL1                                                      05188000
         ORG   S99FLG11                                                 05189000
S99ONCNV DS    BL1                                                      05190000
S99NOCNV EQU   S99FLG11+0                                               05191000
S99NOMNT EQU   S99FLG11+0                                               05192000
S99JBSYS EQU   S99FLG11+0                                               05193000
         ORG   S99FLAG1+1                                               05194000
S99FLG12 DS    CL1                                                      05195000
         ORG   S99RB+4                                                  05196000
S99RSC   DS    CL4                                                      05197000
         ORG   S99RSC                                                   05198000
S99ERROR DS    CL2                                                      05199000
S99INFO  DS    CL2                                                      05200000
         ORG   S99RB+8                                                  05201000
S99TXTPP DS    AL4                                                      05202000
S99RSV01 DS    FL4                                                      05203000
S99FLAG2 DS    CL4                                                      05204000
         ORG   S99FLAG2                                                 05205000
S99FLG21 DS    CL1                                                      05206000
         ORG   S99FLG21                                                 05207000
S99WTVOL DS    BL1                                                      05208000
S99WTDSN EQU   S99FLG21+0                                               05209000
S99NORES EQU   S99FLG21+0                                               05210000
S99WTUNT EQU   S99FLG21+0                                               05211000
S99OFFLN EQU   S99FLG21+0                                               05212000
S99TIONQ EQU   S99FLG21+0                                               05213000
S99CATLG EQU   S99FLG21+0                                               05214000
S99MOUNT EQU   S99FLG21+0                                               05215000
         ORG   S99FLAG2+1                                               05216000
S99FLG22 DS    CL1                                                      05217000
         ORG   S99FLG22                                                 05218000
S99UDEVT DS    BL1                                                      05219000
S99PCINT EQU   S99FLG22+0                                               05220000
         ORG   S99FLAG2+2                                               05221000
S99FLG23 DS    CL1                                                      05222000
S99FLG24 DS    CL1                                                      05223000
         ORG   S99RB+20                                                 05224000
DISPBUF  DS    CL1                                                      05225000
TU       DS    30CL14                                                   05226000
IEFDB4D0 CSECT                                                          05227000
         DS    0F                                                       05228000
@SIZDATD DC    AL1(1)                                                   05229000
         DC    AL3(@ENDDATD-@DATD)                                      05230000
         DS    0D                                                       05231000
@CB00155 DC    X'0004'                                                  05232000
@CB00157 DC    X'0008'                                                  05233000
@CB00159 DC    X'000C'                                                  05234000
@CB00161 DC    X'0010'                                                  05235000
@CB00163 DC    X'0014'                                                  05236000
@CB00165 DC    X'0018'                                                  05237000
@CB00167 DC    X'001C'                                                  05238000
@CB00171 DC    X'0024'                                                  05239000
@CB00173 DC    X'0028'                                                  05240000
@CB00175 DC    X'002C'                                                  05241000
@CB00177 DC    X'0034'                                                  05242000
@CB00210 DC    X'0030'                                                  05243000
@CB00248 DC    X'035C'                                                  05244000
@CB00262 DC    X'037C'                                                  05245000
@CB00280 DC    X'0410'                                                  05246000
@CB00284 DC    X'0424'                                                  05247000
@CB00286 DC    X'0434'                                                  05248000
@CB00288 DC    X'0438'                                                  05249000
@CB00290 DC    X'043C'                                                  05250000
@CB00292 DC    X'0440'                                                  05251000
@CB00296 DC    X'0448'                                                  05252000
@CB00298 DC    X'044C'                                                  05253000
@CB00300 DC    X'0450'                                                  05254000
@CB00302 DC    X'0454'                                                  05255000
@CB00306 DC    X'045C'                                                  05256000
@CB00894 DC    X'0001'                                                  05257000
@CB00896 DC    X'0002'                                                  05258000
@CB00898 DC    X'0003'                                                  05259000
@CB00901 DC    X'0005'                                                  05260000
@CB00903 DC    X'0006'                                                  05261000
@CB00905 DC    X'0007'                                                  05262000
@CB00908 DC    X'0009'                                                  05263000
@CB00910 DC    X'000A'                                                  05264000
@CB00912 DC    X'000B'                                                  05265000
@CB00915 DC    X'000D'                                                  05266000
@CB00917 DC    X'000E'                                                  05267000
@CB00919 DC    X'000F'                                                  05268000
@CB00929 DC    X'0015'                                                  05269000
@CB00936 DC    X'0019'                                                  05270000
@CB00938 DC    X'001A'                                                  05271000
@CB00950 DC    X'0021'                                                  05272000
@CB00952 DC    X'0022'                                                  05273000
@CB00971 DC    X'002D'                                                  05274000
@CB00973 DC    X'002E'                                                  05275000
@CB00975 DC    X'002F'                                                  05276000
@CB00980 DC    X'0032'                                                  05277000
@CB01001 DC    X'003D'                                                  05278000
@CB01007 DC    X'0040'                                                  05279000
@CB01011 DC    X'0042'                                                  05280000
@CB01015 DC    X'0044'                                                  05281000
@CB01017 DC    X'0045'                                                  05282000
@CB01025 DC    X'0049'                                                  05283000
@CB01039 DC    X'0050'                                                  05284000
@CB01043 DC    X'0052'                                                  05285000
@CB01049 DC    X'0055'                                                  05286000
@CB01051 DC    X'0056'                                                  05287000
@CB01053 DC    X'0057'                                                  05288000
@CB01101 DC    X'0000'                                                  05289000
IEFDB4D0 CSECT                                                          05290000
         DS   0H                                                        05291000
PATCHLOC DC ((@DATA-@PSTART)/20)X'00'                                   05292000
@DATD    DSECT                                                          05293000
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA                05294000
@ENDDATD EQU   *                                                        05295000
IEFDB4D0 CSECT                                                          05296000
@00      EQU   00                      EQUATES FOR REGISTERS 0-15       05297000
@01      EQU   01                                                       05298000
@02      EQU   02                                                       05299000
@03      EQU   03                                                       05300000
@04      EQU   04                                                       05301000
@05      EQU   05                                                       05302000
@06      EQU   06                                                       05303000
@07      EQU   07                                                       05304000
@08      EQU   08                                                       05305000
@09      EQU   09                                                       05306000
@10      EQU   10                                                       05307000
@11      EQU   11                                                       05308000
@12      EQU   12                                                       05309000
@13      EQU   13                                                       05310000
@14      EQU   14                                                       05311000
@15      EQU   15                                                       05312000
S99TUFP  EQU   @08                                                      05313000
DSNRTCD  EQU   @03                                                      05314000
DEFADDR  EQU   @06                                                      05315000
RTRNLEN  EQU   @03                                                      05316000
NUMLEVEL EQU   @08                                                      05317000
RETCODE  EQU   @05                                                      05318000
I        EQU   @06                                                      05319000
DAPLPTR  EQU   @07                                                      05320000
BLOCKPTR EQU   @02                                                      05321000
R0       EQU   @00                                                      05322000
R1       EQU   @01                                                      05323000
R4       EQU   @04                                                      05324000
R15      EQU   @15                                                      05325000
DAPL     EQU   0                                                        05326000
DAPLUPT  EQU   DAPL                                                     05327000
DAPLPSCB EQU   DAPL+12                                                  05328000
DAPLDAPB EQU   DAPL+16                                                  05329000
@NM00001 EQU   0                                                        05330000
DA14AREA EQU   @NM00001                                                 05331000
DA14LEVL EQU   DA14AREA                                                 05332000
@NM00002 EQU   0                                                        05333000
DA30DSNL EQU   @NM00002                                                 05334000
DA30DSN  EQU   @NM00002+2                                               05335000
DA28OPTR EQU   0                                                        05336000
DAIRCODE EQU   0                                                        05337000
DSNB     EQU   0                                                        05338000
DSNL     EQU   DSNB                                                     05339000
DSN      EQU   DSNB+2                                                   05340000
CIRRETRN EQU   0                                                        05341000
CIRHDR   EQU   CIRRETRN                                                 05342000
CIRLEN   EQU   CIRHDR                                                   05343000
CIRENT   EQU   CIRRETRN+4                                               05344000
CIRID    EQU   CIRENT                                                   05345000
CIRNAME  EQU   CIRENT+1                                                 05346000
DEFAULTS EQU   0                                                        05347000
DEFSPACE EQU   DEFAULTS                                                 05348000
DEFPQTY  EQU   DEFSPACE                                                 05349000
DEFSQTY  EQU   DEFSPACE+3                                               05350000
DEFDRLH  EQU   DEFSPACE+6                                               05351000
@NM00006 EQU   DEFSPACE+12                                              05352000
DEFTRK   EQU   @NM00006                                                 05353000
DEFCYL   EQU   @NM00006                                                 05354000
DEFBLKLN EQU   @NM00006                                                 05355000
DEFRLSE  EQU   @NM00006                                                 05356000
DEFCONTG EQU   @NM00006                                                 05357000
DEFMIXG  EQU   @NM00006                                                 05358000
DEFALX   EQU   @NM00006                                                 05359000
DEFROUND EQU   @NM00006                                                 05360000
DA0CDDN  EQU   0                                                        05361000
DAPB00   EQU   0                                                        05362000
DA00FLG  EQU   DAPB00+2                                                 05363000
DA00PERM EQU   DA00FLG                                                  05364000
DA00DSE  EQU   DA00FLG                                                  05365000
DA00TERM EQU   DA00FLG                                                  05366000
DA00PDSN EQU   DAPB00+4                                                 05367000
DA00DDN  EQU   DAPB00+8                                                 05368000
DA00CTL  EQU   DAPB00+16                                                05369000
DA00DSO  EQU   DAPB00+19                                                05370000
UPT      EQU   0                                                        05371000
UPTSWS   EQU   UPT+12                                                   05372000
UPTPREFX EQU   UPT+16                                                   05373000
UPTPREFL EQU   UPT+23                                                   05374000
DAPB04   EQU   0                                                        05375000
DA04FLG  EQU   DAPB04+2                                                 05376000
DA04CAT  EQU   DA04FLG                                                  05377000
DA04DSE  EQU   DA04FLG                                                  05378000
DA04CTRC EQU   DAPB04+6                                                 05379000
DA04PDSN EQU   DAPB04+8                                                 05380000
DA04CTL  EQU   DAPB04+12                                                05381000
DA04DSO  EQU   DAPB04+15                                                05382000
DAPB08   EQU   0                                                        05383000
DA08FLG  EQU   DAPB08+2                                                 05384000
DA08DARC EQU   DAPB08+4                                                 05385000
DA08CTRC EQU   DAPB08+6                                                 05386000
DA08PDSN EQU   DAPB08+8                                                 05387000
DA08DDN  EQU   DAPB08+12                                                05388000
DA08UNIT EQU   DAPB08+20                                                05389000
DA08SER  EQU   DAPB08+28                                                05390000
DA08BLK  EQU   DAPB08+36                                                05391000
DA08PQTY EQU   DAPB08+40                                                05392000
DA08SQTY EQU   DAPB08+44                                                05393000
DA08DQTY EQU   DAPB08+48                                                05394000
DA08MNM  EQU   DAPB08+52                                                05395000
DA08PSWD EQU   DAPB08+60                                                05396000
DA08DSP1 EQU   DAPB08+68                                                05397000
DA08DPS2 EQU   DAPB08+69                                                05398000
DA08DPS3 EQU   DAPB08+70                                                05399000
DA08CTL  EQU   DAPB08+71                                                05400000
DA08TRKS EQU   DA08CTL                                                  05401000
DA08ABKL EQU   DA08CTL                                                  05402000
DA08RLSE EQU   DA08CTL                                                  05403000
DA08PERM EQU   DA08CTL                                                  05404000
DA08DMMY EQU   DA08CTL                                                  05405000
DA08ATRL EQU   DA08CTL                                                  05406000
DA08DSO  EQU   DAPB08+75                                                05407000
DA08ALN  EQU   DAPB08+76                                                05408000
DAPB0C   EQU   0                                                        05409000
DA0CDARC EQU   DAPB0C+4                                                 05410000
DA0CNUMB EQU   DAPB0C+8                                                 05411000
DAPB10   EQU   0                                                        05412000
DA10DARC EQU   DAPB10+4                                                 05413000
DA10DDN  EQU   DAPB10+8                                                 05414000
DAPB14   EQU   0                                                        05415000
DA14PDSN EQU   DAPB14+4                                                 05416000
DA14PRET EQU   DAPB14+8                                                 05417000
DA14CTL  EQU   DAPB14+12                                                05418000
DAPB18   EQU   0                                                        05419000
DA18FLG  EQU   DAPB18+2                                                 05420000
DA18FPE  EQU   DA18FLG                                                  05421000
DA18DARC EQU   DAPB18+4                                                 05422000
DA18CTRC EQU   DAPB18+6                                                 05423000
DA18PDSN EQU   DAPB18+8                                                 05424000
DA18DDN  EQU   DAPB18+12                                                05425000
DA18MNM  EQU   DAPB18+20                                                05426000
DA18SCLS EQU   DAPB18+28                                                05427000
DA18DPS2 EQU   DAPB18+30                                                05428000
DA18CTL  EQU   DAPB18+31                                                05429000
DA18PERM EQU   DA18CTL                                                  05430000
DAPB1C   EQU   0                                                        05431000
DA1CDARC EQU   DAPB1C+4                                                 05432000
DA1CCTL  EQU   DAPB1C+7                                                 05433000
DA1CPERM EQU   DA1CCTL                                                  05434000
DA1CATRL EQU   DA1CCTL                                                  05435000
DA1CDDN  EQU   DAPB1C+8                                                 05436000
DA1CALN  EQU   DAPB1C+16                                                05437000
DAPB24   EQU   0                                                        05438000
DA24FLG  EQU   DAPB24+2                                                 05439000
DA24DMY  EQU   DA24FLG                                                  05440000
DA24DARC EQU   DAPB24+4                                                 05441000
DA24CTRC EQU   DAPB24+6                                                 05442000
DA24PDSN EQU   DAPB24+8                                                 05443000
DA24DDN  EQU   DAPB24+12                                                05444000
DA24DSP1 EQU   DAPB24+68                                                05445000
DA24DPS2 EQU   DAPB24+69                                                05446000
DA24DPS3 EQU   DAPB24+70                                                05447000
DA24CTL  EQU   DAPB24+71                                                05448000
DA24DSO  EQU   DAPB24+75                                                05449000
DAPB28   EQU   0                                                        05450000
DA28NOP  EQU   DAPB28+2                                                 05451000
DA28PFOP EQU   DAPB28+4                                                 05452000
DAPB2C   EQU   0                                                        05453000
DA2CFLG  EQU   DAPB2C+2                                                 05454000
DA2CTCB  EQU   DAPB2C+4                                                 05455000
DA2CDDN  EQU   DAPB2C+8                                                 05456000
DAPB30   EQU   0                                                        05457000
DA30FLG  EQU   DAPB30+2                                                 05458000
DA30DARC EQU   DAPB30+4                                                 05459000
DA30PDSN EQU   DAPB30+8                                                 05460000
DA30DDN  EQU   DAPB30+12                                                05461000
DA30UNIT EQU   DAPB30+20                                                05462000
DA30BLK  EQU   DAPB30+36                                                05463000
DA30PQTY EQU   DAPB30+40                                                05464000
DA30SQTY EQU   DAPB30+44                                                05465000
DA30PGNM EQU   DAPB30+48                                                05466000
DA30FORM EQU   DAPB30+56                                                05467000
DA30CTL  EQU   DAPB30+63                                                05468000
DA30TRKS EQU   DA30CTL                                                  05469000
DA30ABKL EQU   DA30CTL                                                  05470000
DA30RLSE EQU   DA30CTL                                                  05471000
DA30PERM EQU   DA30CTL                                                  05472000
DA30DMMY EQU   DA30CTL                                                  05473000
DA30ATRL EQU   DA30CTL                                                  05474000
DA30ALN  EQU   DAPB30+64                                                05475000
DAPB34   EQU   0                                                        05476000
DA34FLG  EQU   DAPB34+2                                                 05477000
DA34FIND EQU   DA34FLG                                                  05478000
DA34DARC EQU   DAPB34+4                                                 05479000
DA34CTRL EQU   DAPB34+6                                                 05480000
DA34SRCH EQU   DA34CTRL                                                 05481000
DA34CHN  EQU   DA34CTRL                                                 05482000
DA34UNCH EQU   DA34CTRL                                                 05483000
DA34NAME EQU   DAPB34+8                                                 05484000
DA34ADDR EQU   DAPB34+16                                                05485000
DAIRACB  EQU   0                                                        05486000
DAIMASK  EQU   DAIRACB+8                                                05487000
DAILABEL EQU   DAIMASK+6                                                05488000
DAIEXPDT EQU   DAIRACB+19                                               05489000
DAIYEAR  EQU   DAIEXPDT                                                 05490000
DAIDAY   EQU   DAIEXPDT+1                                               05491000
DAIBUFNO EQU   DAIRACB+24                                               05492000
DAIBFTEK EQU   DAIRACB+25                                               05493000
DAIBFALN EQU   DAIBFTEK                                                 05494000
DAIAUTO  EQU   DAIBFALN                                                 05495000
DAIBUFL  EQU   DAIRACB+26                                               05496000
DAIEROPT EQU   DAIRACB+28                                               05497000
DAIKEYLE EQU   DAIRACB+29                                               05498000
DAIRECFM EQU   DAIRACB+36                                               05499000
DAIUNDEF EQU   DAIRECFM                                                 05500000
DAIOPTCD EQU   DAIRACB+37                                               05501000
DAIBLKSI EQU   DAIRACB+38                                               05502000
DAILRECL EQU   DAIRACB+40                                               05503000
DAINCP   EQU   DAIRACB+42                                               05504000
PSCB     EQU   0                                                        05505000
PSCBATR1 EQU   PSCB+16                                                  05506000
S99TUPL  EQU   0                                                        05507000
S99TUPTR EQU   S99TUPL                                                  05508000
S99TUP   EQU   0                                                        05509000
S99TUNIT EQU   0                                                        05510000
S99TUKEY EQU   S99TUNIT                                                 05511000
S99TUNUM EQU   S99TUNIT+2                                               05512000
S99TUENT EQU   S99TUNIT+4                                               05513000
S99TULNG EQU   S99TUENT                                                 05514000
S99TUPAR EQU   S99TUENT+2                                               05515000
S99TUFLD EQU   0                                                        05516000
S99TULEN EQU   S99TUFLD                                                 05517000
S99TUPRM EQU   S99TUFLD+2                                               05518000
DSNP     EQU   0                                                        05519000
UBYTE    EQU   0                                                        05520000
PREFIXU  EQU   UBYTE                                                    05521000
DA14QLEN EQU   DA14AREA                                                 05522000
@NM00007 EQU   S99TUPAR                                                 05523000
PODSORG  EQU   @NM00007                                                 05524000
@NM00010 EQU   S99TUPAR                                                 05525000
PERMALOC EQU   @NM00010                                                 05526000
@NM00012 EQU   S99TUPAR                                                 05527000
TERMINAL EQU   @NM00012                                                 05528000
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS    05529000
@NM00013 EQU   @NM00012                                                 05530000
@NM00011 EQU   @NM00010                                                 05531000
@NM00008 EQU   @NM00007                                                 05532000
@NM00009 EQU   UBYTE                                                    05533000
S99TUPND EQU   S99TUP                                                   05534000
S99TUPLN EQU   S99TUPTR                                                 05535000
PSCBU    EQU   PSCB+64                                                  05536000
PSCBRSZ  EQU   PSCB+60                                                  05537000
PSCBLINE EQU   PSCB+59                                                  05538000
PSCBCHAR EQU   PSCB+58                                                  05539000
PSCBUPTL EQU   PSCB+56                                                  05540000
PSCBUPT  EQU   PSCB+52                                                  05541000
PSCBRLGB EQU   PSCB+48                                                  05542000
PSCBDEST EQU   PSCB+40                                                  05543000
@NM00145 EQU   PSCB+36                                                  05544000
@NM00144 EQU   PSCB+32                                                  05545000
@NM00143 EQU   PSCB+28                                                  05546000
PSCBLTI2 EQU   PSCB+24                                                  05547000
PSCBLTIM EQU   PSCB+20                                                  05548000
PSCBATR2 EQU   PSCB+18                                                  05549000
@NM00142 EQU   PSCBATR1                                                 05550000
@NM00141 EQU   PSCBATR1                                                 05551000
@NM00140 EQU   PSCBATR1                                                 05552000
PSCBATTN EQU   PSCBATR1                                                 05553000
PSCBVMNT EQU   PSCBATR1                                                 05554000
PSCBJCL  EQU   PSCBATR1                                                 05555000
PSCBACCT EQU   PSCBATR1                                                 05556000
PSCBCTRL EQU   PSCBATR1                                                 05557000
PSCBGPNM EQU   PSCB+8                                                   05558000
PSCBUSRL EQU   PSCB+7                                                   05559000
PSCBUSER EQU   PSCB                                                     05560000
@NM00139 EQU   DAIRACB+43                                               05561000
DAIUSERT EQU   DAIOPTCD                                                 05562000
@NM00138 EQU   DAIOPTCD                                                 05563000
DAIANSI  EQU   DAIOPTCD                                                 05564000
@NM00137 EQU   DAIOPTCD                                                 05565000
DAISCHED EQU   DAIOPTCD                                                 05566000
@NM00136 EQU   DAIOPTCD                                                 05567000
DAIWRTCK EQU   DAIOPTCD                                                 05568000
DAIMACH  EQU   DAIRECFM                                                 05569000
DAIASA   EQU   DAIRECFM                                                 05570000
DAISTAND EQU   DAIRECFM                                                 05571000
DAIBLOCK EQU   DAIRECFM                                                 05572000
DAITRKOV EQU   DAIRECFM                                                 05573000
DAIVARIB EQU   DAIUNDEF                                                 05574000
DAIFIXED EQU   DAIUNDEF                                                 05575000
@NM00135 EQU   DAIRACB+30                                               05576000
DAIABNOR EQU   DAIEROPT                                                 05577000
DAISKIP  EQU   DAIEROPT                                                 05578000
DAIACEPT EQU   DAIEROPT                                                 05579000
DAIFULL  EQU   DAIBFALN                                                 05580000
DAIDOUBL EQU   DAIBFALN                                                 05581000
@NM00134 EQU   DAIBFALN                                                 05582000
DAIEXC   EQU   DAIBFALN                                                 05583000
DAIRECRD EQU   DAIAUTO                                                  05584000
DAISIMPL EQU   DAIAUTO                                                  05585000
@NM00133 EQU   DAIBFALN                                                 05586000
@NM00132 EQU   DAIRACB+22                                               05587000
@NM00131 EQU   DAIRACB+16                                               05588000
@NM00130 EQU   DAIMASK+7                                                05589000
DAIOUTIN EQU   DAILABEL                                                 05590000
DAIINOUT EQU   DAILABEL                                                 05591000
@NM00129 EQU   DAIMASK                                                  05592000
@NM00128 EQU   DAIRACB                                                  05593000
@NM00127 EQU   DAPB34+7                                                 05594000
DA34CD   EQU   DAPB34                                                   05595000
@NM00126 EQU   DA30CTL                                                  05596000
DA30UID  EQU   DA30CTL                                                  05597000
@NM00125 EQU   DAPB30+62                                                05598000
DA30OCLS EQU   DAPB30+60                                                05599000
DA30SER  EQU   DAPB30+28                                                05600000
@NM00124 EQU   DAPB30+6                                                 05601000
@NM00123 EQU   DA30FLG                                                  05602000
@NM00122 EQU   DA30FLG                                                  05603000
@NM00121 EQU   DA30FLG                                                  05604000
@NM00120 EQU   DA30FLG                                                  05605000
@NM00119 EQU   DA30FLG                                                  05606000
@NM00118 EQU   DA30FLG                                                  05607000
@NM00117 EQU   DA30FLG                                                  05608000
DA30FPE  EQU   DA30FLG                                                  05609000
DA30CD   EQU   DAPB30                                                   05610000
DA2CCD   EQU   DAPB2C                                                   05611000
DA28CD   EQU   DAPB28                                                   05612000
DA24ALN  EQU   DAPB24+76                                                05613000
@NM00116 EQU   DAPB24+72                                                05614000
@NM00115 EQU   DA24CTL                                                  05615000
DA24ATRL EQU   DA24CTL                                                  05616000
DA24DMMY EQU   DA24CTL                                                  05617000
DA24PERM EQU   DA24CTL                                                  05618000
DA24RLSE EQU   DA24CTL                                                  05619000
DA24UID  EQU   DA24CTL                                                  05620000
DA24ABKL EQU   DA24CTL                                                  05621000
DA24TRKS EQU   DA24CTL                                                  05622000
DA24UNCT EQU   DA24DPS3                                                 05623000
DA24CATL EQU   DA24DPS3                                                 05624000
DA24DELE EQU   DA24DPS3                                                 05625000
DA24KEP  EQU   DA24DPS3                                                 05626000
@NM00114 EQU   DA24DPS3                                                 05627000
@NM00113 EQU   DA24DPS3                                                 05628000
@NM00112 EQU   DA24DPS3                                                 05629000
@NM00111 EQU   DA24DPS3                                                 05630000
DA24UCAT EQU   DA24DPS2                                                 05631000
DA24CAT  EQU   DA24DPS2                                                 05632000
DA24DEL  EQU   DA24DPS2                                                 05633000
DA24KEEP EQU   DA24DPS2                                                 05634000
@NM00110 EQU   DA24DPS2                                                 05635000
@NM00109 EQU   DA24DPS2                                                 05636000
@NM00108 EQU   DA24DPS2                                                 05637000
@NM00107 EQU   DA24DPS2                                                 05638000
DA24OLD  EQU   DA24DSP1                                                 05639000
DA24MOD  EQU   DA24DSP1                                                 05640000
DA24NEW  EQU   DA24DSP1                                                 05641000
DA24SHR  EQU   DA24DSP1                                                 05642000
@NM00106 EQU   DA24DSP1                                                 05643000
@NM00105 EQU   DA24DSP1                                                 05644000
@NM00104 EQU   DA24DSP1                                                 05645000
@NM00103 EQU   DA24DSP1                                                 05646000
DA24PSWD EQU   DAPB24+60                                                05647000
DA24MNM  EQU   DAPB24+52                                                05648000
DA24DQTY EQU   DAPB24+48                                                05649000
DA24SQTY EQU   DAPB24+44                                                05650000
DA24PQTY EQU   DAPB24+40                                                05651000
DA24BLK  EQU   DAPB24+36                                                05652000
DA24SER  EQU   DAPB24+28                                                05653000
DA24UNIT EQU   DAPB24+20                                                05654000
@NM00102 EQU   DA24FLG                                                  05655000
@NM00101 EQU   DA24FLG                                                  05656000
@NM00100 EQU   DA24FLG                                                  05657000
@NM00099 EQU   DA24FLG                                                  05658000
@NM00098 EQU   DA24FLG                                                  05659000
@NM00097 EQU   DA24FLG                                                  05660000
DA24FPE  EQU   DA24FLG                                                  05661000
DA24CD   EQU   DAPB24                                                   05662000
@NM00096 EQU   DA1CCTL                                                  05663000
@NM00095 EQU   DA1CCTL                                                  05664000
@NM00094 EQU   DA1CCTL                                                  05665000
@NM00093 EQU   DAPB1C+6                                                 05666000
DA1CFLG  EQU   DAPB1C+2                                                 05667000
DA1CCD   EQU   DAPB1C                                                   05668000
DA18JBNM EQU   DAPB18+32                                                05669000
@NM00092 EQU   DA18CTL                                                  05670000
@NM00091 EQU   DA18CTL                                                  05671000
@NM00090 EQU   DA18CTL                                                  05672000
@NM00089 EQU   DA18CTL                                                  05673000
DA18UID  EQU   DA18CTL                                                  05674000
@NM00088 EQU   DA18CTL                                                  05675000
@NM00087 EQU   DA18CTL                                                  05676000
DA18UCAT EQU   DA18DPS2                                                 05677000
DA18CAT  EQU   DA18DPS2                                                 05678000
DA18DEL  EQU   DA18DPS2                                                 05679000
DA18KEEP EQU   DA18DPS2                                                 05680000
@NM00086 EQU   DA18DPS2                                                 05681000
@NM00085 EQU   DA18DPS2                                                 05682000
@NM00084 EQU   DA18DPS2                                                 05683000
@NM00083 EQU   DA18DPS2                                                 05684000
@NM00082 EQU   DA18FLG                                                  05685000
@NM00081 EQU   DA18FLG                                                  05686000
@NM00080 EQU   DA18FLG                                                  05687000
@NM00079 EQU   DA18FLG                                                  05688000
@NM00078 EQU   DA18FLG                                                  05689000
@NM00077 EQU   DA18FLG                                                  05690000
@NM00076 EQU   DA18FLG                                                  05691000
DA18CD   EQU   DAPB18                                                   05692000
@NM00075 EQU   DAPB14+13                                                05693000
@NM00074 EQU   DA14CTL                                                  05694000
@NM00073 EQU   DA14CTL                                                  05695000
@NM00072 EQU   DA14CTL                                                  05696000
@NM00071 EQU   DA14CTL                                                  05697000
@NM00070 EQU   DA14CTL                                                  05698000
DA14UID  EQU   DA14CTL                                                  05699000
@NM00069 EQU   DA14CTL                                                  05700000
@NM00068 EQU   DA14CTL                                                  05701000
DA14FLG  EQU   DAPB14+2                                                 05702000
DA14CD   EQU   DAPB14                                                   05703000
@NM00067 EQU   DAPB10+6                                                 05704000
DA10FLG  EQU   DAPB10+2                                                 05705000
DA10CD   EQU   DAPB10                                                   05706000
@NM00066 EQU   DAPB0C+10                                                05707000
@NM00065 EQU   DAPB0C+6                                                 05708000
DA0CFLG  EQU   DAPB0C+2                                                 05709000
DA0CCD   EQU   DAPB0C                                                   05710000
@NM00064 EQU   DAPB08+72                                                05711000
@NM00063 EQU   DA08CTL                                                  05712000
DA08UID  EQU   DA08CTL                                                  05713000
DA08UNCT EQU   DA08DPS3                                                 05714000
DA08CATL EQU   DA08DPS3                                                 05715000
DA08DELE EQU   DA08DPS3                                                 05716000
DA08KEP  EQU   DA08DPS3                                                 05717000
@NM00062 EQU   DA08DPS3                                                 05718000
@NM00061 EQU   DA08DPS3                                                 05719000
@NM00060 EQU   DA08DPS3                                                 05720000
@NM00059 EQU   DA08DPS3                                                 05721000
DA08UCAT EQU   DA08DPS2                                                 05722000
DA08CAT  EQU   DA08DPS2                                                 05723000
DA08DEL  EQU   DA08DPS2                                                 05724000
DA08KEEP EQU   DA08DPS2                                                 05725000
@NM00058 EQU   DA08DPS2                                                 05726000
@NM00057 EQU   DA08DPS2                                                 05727000
@NM00056 EQU   DA08DPS2                                                 05728000
@NM00055 EQU   DA08DPS2                                                 05729000
DA08OLD  EQU   DA08DSP1                                                 05730000
DA08MOD  EQU   DA08DSP1                                                 05731000
DA08NEW  EQU   DA08DSP1                                                 05732000
DA08SHR  EQU   DA08DSP1                                                 05733000
@NM00054 EQU   DA08DSP1                                                 05734000
@NM00053 EQU   DA08DSP1                                                 05735000
@NM00052 EQU   DA08DSP1                                                 05736000
@NM00051 EQU   DA08DSP1                                                 05737000
@NM00050 EQU   DA08FLG                                                  05738000
@NM00049 EQU   DA08FLG                                                  05739000
@NM00048 EQU   DA08FLG                                                  05740000
@NM00047 EQU   DA08FLG                                                  05741000
@NM00046 EQU   DA08FLG                                                  05742000
@NM00045 EQU   DA08FLG                                                  05743000
@NM00044 EQU   DA08FLG                                                  05744000
DA08FPE  EQU   DA08FLG                                                  05745000
DA08CD   EQU   DAPB08                                                   05746000
@NM00043 EQU   DAPB04+13                                                05747000
@NM00042 EQU   DA04CTL                                                  05748000
@NM00041 EQU   DA04CTL                                                  05749000
@NM00040 EQU   DA04CTL                                                  05750000
@NM00039 EQU   DA04CTL                                                  05751000
@NM00038 EQU   DA04CTL                                                  05752000
DA04UID  EQU   DA04CTL                                                  05753000
@NM00037 EQU   DA04CTL                                                  05754000
@NM00036 EQU   DA04CTL                                                  05755000
@NM00035 EQU   DAPB04+4                                                 05756000
@NM00034 EQU   DA04FLG                                                  05757000
@NM00033 EQU   DA04FLG                                                  05758000
@NM00032 EQU   DA04FLG                                                  05759000
@NM00031 EQU   DA04FLG                                                  05760000
@NM00030 EQU   DA04FLG                                                  05761000
@NM00029 EQU   DA04FLG                                                  05762000
DA04CD   EQU   DAPB04                                                   05763000
@NM00016 EQU   UPT+15                                                   05764000
UPTLDEL  EQU   UPT+14                                                   05765000
UPTCDEL  EQU   UPT+13                                                   05766000
UPTWTP   EQU   UPTSWS                                                   05767000
UPTMODE  EQU   UPTSWS                                                   05768000
UPTALD   EQU   UPTSWS                                                   05769000
UPTPAUS  EQU   UPTSWS                                                   05770000
UPTNCOM  EQU   UPTSWS                                                   05771000
UPTMID   EQU   UPTSWS                                                   05772000
UPTNPRM  EQU   UPTSWS                                                   05773000
@NM00015 EQU   UPTSWS                                                   05774000
UPTUSER  EQU   UPT+2                                                    05775000
@NM00014 EQU   UPT                                                      05776000
@NM00028 EQU   DAPB00+17                                                05777000
@NM00027 EQU   DA00CTL                                                  05778000
@NM00026 EQU   DA00CTL                                                  05779000
@NM00025 EQU   DA00CTL                                                  05780000
@NM00024 EQU   DA00CTL                                                  05781000
@NM00023 EQU   DA00CTL                                                  05782000
DA00UID  EQU   DA00CTL                                                  05783000
@NM00022 EQU   DA00CTL                                                  05784000
@NM00021 EQU   DA00CTL                                                  05785000
DA00DYNM EQU   DA00FLG                                                  05786000
@NM00020 EQU   DA00FLG                                                  05787000
@NM00019 EQU   DA00FLG                                                  05788000
@NM00018 EQU   DA00FLG                                                  05789000
@NM00017 EQU   DA00FLG                                                  05790000
DA00CD   EQU   DAPB00                                                   05791000
DEFUNIT  EQU   DEFAULTS+13                                              05792000
DEFDQTY  EQU   DEFSPACE+9                                               05793000
CIRRLEN  EQU   CIRHDR+2                                                 05794000
DAPLECB  EQU   DAPL+8                                                   05795000
DAPLECT  EQU   DAPL+4                                                   05796000
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS      05797000
@RC00095 EQU   @RC00094                                                 05798000
@RC00103 EQU   @RC00094                                                 05799000
@RC00101 EQU   @RC00094                                                 05800000
@RF00173 EQU   @RC00166                                                 05801000
@RF00172 EQU   @RC00166                                                 05802000
@RC00225 EQU   @RC00216                                                 05803000
@RF00365 EQU   @RC00360                                                 05804000
@RF00396 EQU   @RC00387                                                 05805000
@RC00470 EQU   @RC00469                                                 05806000
@RC00490 EQU   @RC00489                                                 05807000
@RC00588 EQU   @RC00587                                                 05808000
@RC00651 EQU   @RC00650                                                 05809000
@RF00686 EQU   @RC00674                                                 05810000
@RF00702 EQU   @RC00689                                                 05811000
@RF00869 EQU   @RC00863                                                 05812000
@RF00916 EQU   @RC00899                                                 05813000
@RC01062 EQU   @RC00919                                                 05814000
@RC01060 EQU   @RC00919                                                 05815000
@RF01059 EQU   @RC00919                                                 05816000
@RC01092 EQU   @RC01071                                                 05817000
@RF01091 EQU   @RC01071                                                 05818000
@RC01127 EQU   @RC01126                                                 05819000
@RF01331 EQU   @RC01241                                                 05820000
@RF01514 EQU   @EL00002                                                 05821000
@RF00670 EQU   @RC00651                                                 05822000
@ENDDATA EQU   *                                                        05823000
         END   IEFDB4D0,(C'PLS1813',0701,76202)                         05824000
