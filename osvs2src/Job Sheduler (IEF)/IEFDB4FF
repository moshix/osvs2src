         TITLE 'IEFDB4FF-SYNTAX CHECKER                                *00001000
                        '                                               00002000
IEFDB4FF CSECT ,                                                01S0001 00003000
@MAINENT DS    0H                                               01S0001 00004000
         USING *,@15                                            01S0001 00005000
         B     @PROLOG                                          01S0001 00006000
         DC    AL1(16)                                          01S0001 00007000
         DC    C'IEFDB4FF  73.325'                              01S0001 00008000
         DROP  @15                                                      00009000
@PROLOG  STM   @14,@12,12(@13)                                  01S0001 00010000
         BALR  @12,0                                            01S0001 00011000
@PSTART  DS    0H                                               01S0001 00012000
         USING @PSTART,@12                                      01S0001 00013000
         L     @00,@SIZDATD                                     01S0001 00014000
         GSPACE  R,LV=(0)                                               00015000
         LR    @11,@01                                          01S0001 00016000
         USING @DATD,@11                                        01S0001 00017000
         ST    @13,@SA00001+4                                   01S0001 00018000
         LM    @00,@01,20(@13)                                  01S0001 00019000
         ST    @11,8(,@13)                                      01S0001 00020000
         LR    @13,@11                                          01S0001 00021000
         MVC   @PC00001(24),0(@01)                              01S0001 00022000
*ENDSW=OFF;                            /* INITIALIZE STOP LOOP SWITCH*/ 00023000
         NI    ENDSW,B'01111111'                                01S0023 00024000
*OFFSET=ONE;                           /* INITIALIZE LIST PTR OFFSET */ 00025000
         LA    OFFSET,1                                         01S0024 00026000
*S99TXTPP=SYNTXTP;                     /* ADDR CURRENT TEXT UNIT PTR */ 00027000
         L     @10,@PC00001                                     01S0025 00028000
         L     S99TXTPP,SYNTXTP(,@10)                           01S0025 00029000
*RESPECIFY TXTUPELM BASED(TEXTPTR);                             01S0026 00030000
*/********************************************************************/ 00031000
*/* MAIN PROCESSING LOOP. PROCESS UNTIL END OF TEXT UNITS OR AN      */ 00032000
*/* ERROR IS FOUND.                                                  */ 00033000
*/********************************************************************/ 00034000
*DO WHILE (ERRCODE=ZERO & ENDSW=OFF);  /* LOOP TILL LIST END OR ERROR*/ 00035000
         B     @DE00027                                         01S0027 00036000
@DL00027 DS    0H                                               01S0028 00037000
*  TEXTPTR=ADDR(TXTUNITP(OFFSET));                              01S0028 00038000
         LR    @10,OFFSET                                       01S0028 00039000
         SLA   @10,2                                            01S0028 00040000
         AL    @10,@CF00307                                     01S0028 00041000
         LA    @10,TXTUNITP(@10,S99TXTPP)                       01S0028 00042000
         ST    @10,TEXTPTR                                      01S0028 00043000
*  IF TXTPLEND=ON THEN                 /* LAST TEXT UNIT ADDRESS?    */ 00044000
         TM    TXTPLEND(@10),B'10000000'                        01S0029 00045000
         BNO   @RF00029                                         01S0029 00046000
*    ENDSW=ON;                         /* SET TO END PROCESSING.     */ 00047000
         OI    ENDSW,B'10000000'                                01S0030 00048000
*  ELSE                                                         01S0031 00049000
*    OFFSET=OFFSET + ONE ;             /* OTHERWISE, GET OFFSET FOR     00050000
*                                         THE NEXT TEXT UNIT ADDR.   */ 00051000
         B     @RC00029                                         01S0031 00052000
@RF00029 AH    OFFSET,@CH00056                                  01S0031 00053000
*  IF (TXTPLENT & '7FFFFFFF'X)^=ZERO   /* PROCESS ONLY W/NONZERO PTR */ 00054000
*  & TEXTUKEY^=HEX0 THEN               /* AND NONZERO KEY            */ 00055000
@RC00029 L     @10,TEXTPTR                                      01S0032 00056000
         L     @10,TXTPLENT(,@10)                               01S0032 00057000
         LR    @09,@10                                          01S0032 00058000
         N     @09,@CF00302                                     01S0032 00059000
         LTR   @09,@09                                          01S0032 00060000
         BZ    @RF00032                                         01S0032 00061000
         CLC   TEXTUKEY(2,@10),@CB00108                         01S0032 00062000
         BE    @RF00032                                         01S0032 00063000
*    DO;                               /* PROCESSING.                */ 00064000
*      /**************************************************************/ 00065000
*      /*  DETERMINE IF THE SPECIFIED KEY IS INVALID, DUPLICATE, OR  */ 00066000
*      /*  MUTUALLY EXCLUSIVE.                                       */ 00067000
*      /**************************************************************/ 00068000
*/********************************************************************/ 00069000
*/*                                                                  */ 00070000
*/* SEGMENT - CHECKKYS                                               */ 00071000
*/*                                                                  */ 00072000
*/* DESCRIPTIVE NAME- CHECK KEY SYNTAX                               */ 00073000
*/*                                                                  */ 00074000
*/* FUNCTION - TO DETERMINE IF THE SPECIFIED KEY IS INVALID,         */ 00075000
*/*            DUPLICATE, OR MUTUALLY EXCLUSIVE.                     */ 00076000
*/*                                                                  */ 00077000
*/* ENTRY - CHECKKYS (INCLUDED SEGMENT)                              */ 00078000
*/*                                                                  */ 00079000
*/*  INPUT DATA - TEXTPTR CONTAINS THE ADDRESS OF THE TEXT UNIT TO   */ 00080000
*/*                       BE SYNTAX CHECKED.                         */ 00081000
*/*                                                                  */ 00082000
*/* EXIT - TO NEXT SEQUENTIAL INSTRUCTION                            */ 00083000
*/*                                                                  */ 00084000
*/*  OUTPUT DATA - IF NO ERROR IS FOUND, ERRCODE IS ZERO AND         */ 00085000
*/*                  APPROPRIATE BIT SET IN KEY MASK 1 (DUPLICATE    */ 00086000
*/*                  MASK) TO INDICATE THIS KEY HAS BEEN SPECIFIED.  */ 00087000
*/*                IF AN ERROR IS FOUND, ERRCODE HAS ONE OF THESE    */ 00088000
*/*                VALUES -                                          */ 00089000
*/*                  RCMUTUAL - IF THE KEY IN THE TEXT UNIT IS       */ 00090000
*/*                             MUTUALLY EXCLUSIVE WITH A KEY        */ 00091000
*/*                             PREVIOUSLY SPECIFIED.                */ 00092000
*/*                  RCDUPKEY - IF THE KEY IN THE TEXT UNIT HAS      */ 00093000
*/*                             ALREADY BEEN SPECIFIED.              */ 00094000
*/*                  RCINVKEY - IF THE KEY IN THE TEXT UNIT DOES NOT */ 00095000
*/*                             MATCH ANY OF THE KEYS IN THE KEY     */ 00096000
*/*                             DICTIONARY.                          */ 00097000
*/*                                                                  */ 00098000
*/********************************************************************/ 00099000
*KEYDICTP=SYNKDCTP;                   /* ADDRESS OF KEY DICTIONARY   */ 00100000
         L     @10,@PC00001+4                                   02S0034 00101000
         L     KEYDICTP,SYNKDCTP(,@10)                          02S0034 00102000
*FOUNDSW=NO;                          /* INIT. KEY-FOUND SWITCH      */ 00103000
*STOPSW=NO;                           /* INIT. END OF DICT'NARY SW.  */ 00104000
         NI    FOUNDSW,B'10011111'                              02S0036 00105000
*WORKMASK=HEX0;                                                 02S0037 00106000
         MVC   WORKMASK(2),@CB00108                             02S0037 00107000
*SAVEMASK=HEX0;                                                 02S0038 00108000
         MVC   SAVEMASK(2),@CB00108                             02S0038 00109000
*DO WHILE (FOUNDSW=NO & STOPSW=NO);                             02S0039 00110000
         B     @DE00039                                         02S0039 00111000
@DL00039 DS    0H                                               02S0040 00112000
*  IF ENTKEY^=DCTENDKY THEN           /* FF IS DICTIONARY END        */ 00113000
         CLC   ENTKEY(2,KEYDICTP),@CB00104                      02S0040 00114000
         BE    @RF00040                                         02S0040 00115000
*    IF ENTKEY=TEXTUKEY THEN          /* ENTRY=SPECIFIED KEY?        */ 00116000
         L     @10,TEXTPTR                                      02S0041 00117000
         L     @10,TXTPLENT(,@10)                               02S0041 00118000
         CLC   ENTKEY(2,KEYDICTP),TEXTUKEY(@10)                 02S0041 00119000
         BNE   @RF00041                                         02S0041 00120000
*      DO;                            /* MAKE OTHER CHECKS           */ 00121000
*        FOUNDSW=YES;                 /* KEY FOUND IN KEY DICTIONARY */ 00122000
         OI    FOUNDSW,B'01000000'                              02S0043 00123000
*        SAVEKEY=(TEXTUKEY/EIGHT)+ONE;/* FIND OFFSET IN KEYMASK1     */ 00124000
         LA    @09,1                                            02S0044 00125000
         SLR   @07,@07                                          02S0044 00126000
         ICM   @07,3,TEXTUKEY(@10)                              02S0044 00127000
         LR    SAVEKEY,@07                                      02S0044 00128000
         SRL   SAVEKEY,3                                        02S0044 00129000
         ALR   SAVEKEY,@09                                      02S0044 00130000
*        SAVEOFF=(TEXTUKEY//EIGHT)+ONE;/*FIND POSITION IN STATMASK   */ 00131000
         LR    @00,@07                                          02S0045 00132000
         SRDA  @00,32                                           02S0045 00133000
         D     @00,@CF00074                                     02S0045 00134000
         ALR   @00,@09                                          02S0045 00135000
         LR    SAVEOFF,@00                                      02S0045 00136000
*        WORKMASK=KEYMASK1(SAVEKEY)                             02S0046 00137000
*         & STATMASK(SAVEOFF);        /* SET FOR DUPLICATE TEST      */ 00138000
         MVI   WORKMASK+1,X'00'                                 02S0046 00139000
         L     @10,@PC00001+8                                   02S0046 00140000
         L     @10,SYNKM1P(,@10)                                02S0046 00141000
         LR    @09,@10                                          02S0046 00142000
         ALR   @09,SAVEKEY                                      02S0046 00143000
         AL    @09,@CF00310                                     02S0046 00144000
         MVC   WORKMASK(1),KEYMASK1(@09)                        02S0046 00145000
         LA    @09,STATMASK-1(SAVEOFF)                          02S0046 00146000
         NC    WORKMASK(1),0(@09)                               02S0046 00147000
*        IF WORKMASK=HEX0 THEN        /* TEST FOR DUPLICATE KEY      */ 00148000
         CLC   WORKMASK(2),@CB00108                             02S0047 00149000
         BNE   @RF00047                                         02S0047 00150000
*          DO;                        /* NO DUPLICATE FOUND          */ 00151000
*            KEYMASK1(SAVEKEY)=KEYMASK1(SAVEKEY)                02S0049 00152000
*             | STATMASK(SAVEOFF);    /* SET THIS KEY AS SPECIFIED   */ 00153000
         ALR   @10,SAVEKEY                                      02S0049 00154000
         AL    @10,@CF00310                                     02S0049 00155000
         LA    @09,STATMASK-1(SAVEOFF)                          02S0049 00156000
         OC    KEYMASK1(1,@10),0(@09)                           02S0049 00157000
*            WORKMASK=KEYMASK2(SAVEKEY)                         02S0050 00158000
*             & STATMASK(SAVEOFF);    /* SET FOR MUTUALLY EXCL TEST  */ 00159000
         MVI   WORKMASK+1,X'00'                                 02S0050 00160000
         L     @10,@PC00001+12                                  02S0050 00161000
         L     @10,SYNKM2P(,@10)                                02S0050 00162000
         ALR   @10,SAVEKEY                                      02S0050 00163000
         AL    @10,@CF00310                                     02S0050 00164000
         MVC   WORKMASK(1),KEYMASK2(@10)                        02S0050 00165000
         LA    @10,STATMASK-1(SAVEOFF)                          02S0050 00166000
         NC    WORKMASK(1),0(@10)                               02S0050 00167000
*            IF WORKMASK^=HEX0 THEN                             02S0051 00168000
         CLC   WORKMASK(2),@CB00108                             02S0051 00169000
         BE    @RF00051                                         02S0051 00170000
*              ERRCODE=RCMUTUAL;      /* MUTUALLY EXCLUSIVE ERROR    */ 00171000
         L     @10,@PC00001+20                                  02S0052 00172000
         MVC   ERRCODE(2,@10),@CB00175                          02S0052 00173000
*            ELSE                     /* NOT MUTUALLY EXCLUSIVE KEY  */ 00174000
*              DO;                    /* CONTINUE CHECKS             */ 00175000
         B     @RC00051                                         02S0053 00176000
@RF00051 DS    0H                                               02S0054 00177000
*/********************************************************************/ 00178000
*/*                                                                  */ 00179000
*/* SEGMENT - MXMNCHK                                                */ 00180000
*/*                                                                  */ 00181000
*/* DESCRIPTIVE NAME - MAXIMUM AND MINIMUM CHECKS                    */ 00182000
*/*                                                                  */ 00183000
*/* FUNCTION - TO ENSURE THAT THE NUMBER OF PARAMETERS SPECIFIED AND */ 00184000
*/*            THE LENGTH OF EACH PARAMETER IS WITHIN THE ACCEPTABLE */ 00185000
*/*            RANGE.                                                */ 00186000
*/*                                                                  */ 00187000
*/* ENTRY - MXMNCHK (INCLUDED SEGMENT)                               */ 00188000
*/*                                                                  */ 00189000
*/*  INPUT DATA - TXTPLENT CONTAINS THE ADDRESS OF THE TEXT UNIT TO  */ 00190000
*/*                        BE SYNTAX CHECKED.                        */ 00191000
*/*               KEYDICTP CONTAINS THE ADDRESS OF THE CURRENT ENTRY */ 00192000
*/*                        IN THE KEY DICTIONARY.                    */ 00193000
*/*                                                                  */ 00194000
*/* EXIT - TO NEXT SEQUENTIAL INSTRUCTION                            */ 00195000
*/*                                                                  */ 00196000
*/*  OUTPUT DATA - IF NO ERROR IS FOUND, ERRCODE IS ZERO.            */ 00197000
*/*                IF AN ERROR IS FOUND, ERRCODE HAS ONE OF THESE    */ 00198000
*/*                VALUES -                                          */ 00199000
*/*                  RCINNUMB - IF THE NUMBER OF PARAMETERS IS LESS  */ 00200000
*/*                             THAN THE MINIMUM OR GREATER THAN THE */ 00201000
*/*                             MAXIMUM.                             */ 00202000
*/*                  RCINKEYL - IF THE LENGTH OF ANY PARAMETER IS    */ 00203000
*/*                             LESS THAN THE MINIMUM OR GREATER     */ 00204000
*/*                             THAN THE MAXIMUM.                    */ 00205000
*/*                                                                  */ 00206000
*/********************************************************************/ 00207000
*IF TEXTUNUM > ENTMAXNO |              /*IS NO. OF PARMS GREATER THAN*/ 00208000
*   TEXTUNUM < ENTMINNO THEN           /*MAX OR LESS THAN MINIMUM    */ 00209000
         L     @10,TEXTPTR                                      03S0054 00210000
         L     @10,TXTPLENT(,@10)                               03S0054 00211000
         LH    @10,TEXTUNUM(,@10)                               03S0054 00212000
         SLR   @09,@09                                          03S0054 00213000
         ICM   @09,3,ENTMAXNO(KEYDICTP)                         03S0054 00214000
         CR    @10,@09                                          03S0054 00215000
         BH    @RT00054                                         03S0054 00216000
         SLR   @09,@09                                          03S0054 00217000
         ICM   @09,3,ENTMINNO(KEYDICTP)                         03S0054 00218000
         CR    @10,@09                                          03S0054 00219000
         BNL   @RF00054                                         03S0054 00220000
@RT00054 DS    0H                                               03S0055 00221000
*  ERRCODE = RCINNUMB;                 /*YES,INVALID NUMBER ERROR    */ 00222000
         L     @10,@PC00001+20                                  03S0055 00223000
         MVC   ERRCODE(2,@10),@CB00169                          03S0055 00224000
*ELSE                                  /*NO, CHECK LENGTHS OF PARMS  */ 00225000
*   DO;                                                         03S0056 00226000
         B     @RC00054                                         03S0056 00227000
@RF00054 DS    0H                                               03S0057 00228000
*     TXTUFLDP = ADDR(TEXTUENT);       /*POINT PAST KEY + NUM FLDS TO   00229000
*                                        FIRST PARM LENGTH FIELD     */ 00230000
         L     @10,TEXTPTR                                      03S0057 00231000
         L     @10,TXTPLENT(,@10)                               03S0057 00232000
         LA    TXTUFLDP,TEXTUENT(,@10)                          03S0057 00233000
*     NUMCOUNT = TEXTUNUM;             /*INIT. COUNT OF PARMS ENTERED*/ 00234000
         LH    NUMCOUNT,TEXTUNUM(,@10)                          03S0058 00235000
*     DO WHILE (NUMCOUNT> 0 &          /*CHECK LNGTHS UNTIL LAST PARM*/ 00236000
*               ERRCODE = 0);          /*OR WHEN ERROR IS FOUND      */ 00237000
         B     @DE00059                                         03S0059 00238000
@DL00059 DS    0H                                               03S0060 00239000
*       IF TEXTULEN > ENTMAXLN |       /*IS PARM LNGTH GREATER THAN  */ 00240000
*          TEXTULEN < ENTMINLN THEN    /*MAX OR LESS THAN MINIMUM    */ 00241000
         LH    @10,TEXTULEN(,TXTUFLDP)                          03S0060 00242000
         SLR   @09,@09                                          03S0060 00243000
         ICM   @09,3,ENTMAXLN(KEYDICTP)                         03S0060 00244000
         CR    @10,@09                                          03S0060 00245000
         BH    @RT00060                                         03S0060 00246000
         SLR   @09,@09                                          03S0060 00247000
         ICM   @09,3,ENTMINLN(KEYDICTP)                         03S0060 00248000
         CR    @10,@09                                          03S0060 00249000
         BNL   @RF00060                                         03S0060 00250000
@RT00060 DS    0H                                               03S0061 00251000
*           ERRCODE = RCINKEYL;        /*YES,INVALID PARM LENGTH ERR */ 00252000
         L     @10,@PC00001+20                                  03S0061 00253000
         MVC   ERRCODE(2,@10),@CB00173                          03S0061 00254000
*       ELSE                           /*PARM LENGTH OK              */ 00255000
*         DO;                          /*SET UP FOR NEXT PARM IF ANY */ 00256000
         B     @RC00060                                         03S0062 00257000
@RF00060 DS    0H                                               03S0063 00258000
*           NUMCOUNT = NUMCOUNT - 1;   /*DECREMENT CTR OF PARMS LEFT */ 00259000
         BCTR  NUMCOUNT,0                                       03S0063 00260000
*           TXTUFLDP = TXTUFLDP + TEXTULEN                      03S0064 00261000
*                      + LENGTH(TEXTULEN); /*UPDATE PTR TO NEXT KEY     00262000
*                                            PARM IN TEXT ENTRY      */ 00263000
         LR    @10,TXTUFLDP                                     03S0064 00264000
         AH    @10,TEXTULEN(,TXTUFLDP)                          03S0064 00265000
         AH    @10,@CH00048                                     03S0064 00266000
         LR    TXTUFLDP,@10                                     03S0064 00267000
*         END;                         /*END VALID PARM LNGTH PROCESS*/ 00268000
*     END;                             /*END LOOP SCAN OF PARM LNGTHS*/ 00269000
@RC00060 DS    0H                                               03S0066 00270000
@DE00059 SLR   @10,@10                                          03S0066 00271000
         CR    NUMCOUNT,@10                                     03S0066 00272000
         BNH   @DC00059                                         03S0066 00273000
         L     @09,@PC00001+20                                  03S0066 00274000
         SLR   @07,@07                                          03S0066 00275000
         ICM   @07,3,ERRCODE(@09)                               03S0066 00276000
         CR    @10,@07                                          03S0066 00277000
         BE    @DL00059                                         03S0066 00278000
@DC00059 DS    0H                                               03S0067 00279000
*   END;                               /*END PARM LNGTH PROCESS      */ 00280000
*                                     /* CHECK FOR MAX + MIN NUMBER     00281000
*                                        OF PARMS AND LENGTHS OF EACH*/ 00282000
*              END;                                             02S0068 00283000
*          END;                       /* COMPLETED CHECKS            */ 00284000
*        ELSE                                                   02S0070 00285000
*          ERRCODE=RCDUPKEY;          /* DUPLICATE KEY RETURN CODE   */ 00286000
         B     @RC00047                                         02S0070 00287000
@RF00047 L     @10,@PC00001+20                                  02S0070 00288000
         MVC   ERRCODE(2,@10),@CB00171                          02S0070 00289000
*      END;                                                     02S0071 00290000
*    ELSE                                                       02S0072 00291000
*      KEYDICTP=KEYDICTP+ENTLEN;      /* KEY NOT FOUND YET, NEXT ENT */ 00292000
         B     @RC00041                                         02S0072 00293000
@RF00041 SLR   @10,@10                                          02S0072 00294000
         IC    @10,ENTLEN(,KEYDICTP)                            02S0072 00295000
         ALR   KEYDICTP,@10                                     02S0072 00296000
*  ELSE                                                         02S0073 00297000
*    STOPSW=ON;                       /* END OF KEY DICT'NRY SEARCH  */ 00298000
         B     @RC00040                                         02S0073 00299000
@RF00040 OI    STOPSW,B'00100000'                               02S0073 00300000
*END;                                 /* ENDWHILE                    */ 00301000
@RC00040 DS    0H                                               02S0074 00302000
@DE00039 TM    FOUNDSW,B'01100000'                              02S0074 00303000
         BZ    @DL00039                                         02S0074 00304000
*IF FOUNDSW=OFF THEN                  /* KEY NOT FOUND IN DICTIONARY */ 00305000
         TM    FOUNDSW,B'01000000'                              02S0075 00306000
         BNZ   @RF00075                                         02S0075 00307000
*  ERRCODE=RCINVKEY;                  /* INVALID KEY RETURN CODE     */ 00308000
*                                                               02S0076 00309000
         L     @10,@PC00001+20                                  02S0076 00310000
         MVC   ERRCODE(2,@10),@CB00161                          02S0076 00311000
*      /**************************************************************/ 00312000
*      /* IF NO ERROR WAS FOUND, PROCESS THE RETURN AREA AND MUTUALLY*/ 00313000
*      /* EXCLUSIVE KEYS.                                            */ 00314000
*      /**************************************************************/ 00315000
*      IF ERRCODE =ZERO THEN           /* NO ERROR WAS FOUND.        */ 00316000
@RF00075 L     @10,@PC00001+20                                  01S0077 00317000
         ICM   @09,3,ERRCODE(@10)                               01S0077 00318000
         BNZ   @RF00077                                         01S0077 00319000
*        DO;                                                    01S0078 00320000
*          KEYTP=SYNRTAP+ENTRTAP;      /* FIND POSITION IN KEYTABLE  */ 00321000
         L     @10,@PC00001+16                                  01S0079 00322000
         SLR   KEYTP,KEYTP                                      01S0079 00323000
         ICM   KEYTP,3,ENTRTAP(KEYDICTP)                        01S0079 00324000
         AL    KEYTP,SYNRTAP(,@10)                              01S0079 00325000
*          KYADDRP=TXTPLENT;           /* PUT TEXT UNIT ADDR IN TABLE*/ 00326000
         L     @10,TEXTPTR                                      01S0080 00327000
         MVC   KYADDRP(4,KEYTP),TXTPLENT(@10)                   01S0080 00328000
*          /**********************************************************/ 00329000
*          /* PROCESS MUTUALLY EXCLUSIVE KEYS BY SETTING BITS IN THE */ 00330000
*          /* KEYMASK2 AREA.                                         */ 00331000
*          /**********************************************************/ 00332000
*/********************************************************************/ 00333000
*/*                                                                  */ 00334000
*/* SEGMENT - SETMUTEX                                               */ 00335000
*/*                                                                  */ 00336000
*/* DESCRIPTIVE NAME - SET BITS FOR MUTUALLY EXCLUSIVE KEYS          */ 00337000
*/*                                                                  */ 00338000
*/* FUNCTION - PROCESS MUTUALLY EXCLUSIVE KEYS BY SETTING BITS IN    */ 00339000
*/*            THE KEY MASK 2 (MUTUALLY EXCLUSIVE) AREA.             */ 00340000
*/*                                                                  */ 00341000
*/* ENTRY - SETMUTEX (INCLUDED SEGMENT)                              */ 00342000
*/*                                                                  */ 00343000
*/*  INPUT DATA - KEYDICTP CONTAINS THE ADDRESS OF THE CURRENT       */ 00344000
*/*                        ENTRY IN THE KEY DICTIONARY.              */ 00345000
*/*                                                                  */ 00346000
*/* EXIT - TO NEXT SEQUENTIAL INSTRUCTION                            */ 00347000
*/*                                                                  */ 00348000
*/*  OUTPUT DATA - APPROPRIATE BITS SET IN THE KEY MASK 2 AREA FOR   */ 00349000
*/*                ANY KEYS MUTUALLY EXCLUSIVE WITH THID KEY.        */ 00350000
*/*                                                                  */ 00351000
*/********************************************************************/ 00352000
*MUTEXKCT=(ENTLEN -(ADDR(MUTEXKY)-ADDR(ENTLEN)))/TWO;           02S0081 00353000
         LA    MUTEXKCT,MUTEXKY(,KEYDICTP)                      02S0081 00354000
         SLR   MUTEXKCT,KEYDICTP                                02S0081 00355000
         LR    @00,MUTEXKCT                                     02S0081 00356000
         LCR   @00,@00                                          02S0081 00357000
         SLR   MUTEXKCT,MUTEXKCT                                02S0081 00358000
         IC    MUTEXKCT,ENTLEN(,KEYDICTP)                       02S0081 00359000
         ALR   @00,MUTEXKCT                                     02S0081 00360000
         SRDA  @00,32                                           02S0081 00361000
         D     @00,@CF00048                                     02S0081 00362000
         LR    MUTEXKCT,@01                                     02S0081 00363000
*                                      /* GET NUMBER OF THE MUTUALLY    00364000
*                                         EXCLUSIVE KEYS             */ 00365000
*DO I=ONE BY ONE WHILE (MUTEXKCT^=ZERO);                        02S0082 00366000
         LA    I,1                                              02S0082 00367000
         B     @DE00082                                         02S0082 00368000
@DL00082 DS    0H                                               02S0083 00369000
*  WORKMASK=MUTEXKY(I);                /* GET MUTEXCL. KEY (NEXT)    */ 00370000
         LR    @10,I                                            02S0083 00371000
         ALR   @10,@10                                          02S0083 00372000
         ALR   @10,KEYDICTP                                     02S0083 00373000
         MVC   WORKMASK(2),MUTEXKY-2(@10)                       02S0083 00374000
*  SAVEKEY=(WORKMASK/EIGHT)+ONE;       /* FIND OFFSET IN KEYMASK2    */ 00375000
         LA    @10,1                                            02S0084 00376000
         SLR   @09,@09                                          02S0084 00377000
         ICM   @09,3,WORKMASK                                   02S0084 00378000
         LR    SAVEKEY,@09                                      02S0084 00379000
         SRL   SAVEKEY,3                                        02S0084 00380000
         ALR   SAVEKEY,@10                                      02S0084 00381000
*  SAVEOFF=(WORKMASK//EIGHT)+ONE;      /* FIND OFFSET IN STATUS MASK */ 00382000
         LR    @00,@09                                          02S0085 00383000
         SRDA  @00,32                                           02S0085 00384000
         D     @00,@CF00074                                     02S0085 00385000
         ALR   @00,@10                                          02S0085 00386000
         LR    SAVEOFF,@00                                      02S0085 00387000
*  KEYMASK2(SAVEKEY)=KEYMASK2(SAVEKEY)                          02S0086 00388000
*   | STATMASK(SAVEOFF);               /* TURN ON MUTEXCL. BITS      */ 00389000
         L     @10,@PC00001+12                                  02S0086 00390000
         L     @10,SYNKM2P(,@10)                                02S0086 00391000
         ALR   @10,SAVEKEY                                      02S0086 00392000
         AL    @10,@CF00310                                     02S0086 00393000
         LA    @09,STATMASK-1(SAVEOFF)                          02S0086 00394000
         OC    KEYMASK2(1,@10),0(@09)                           02S0086 00395000
*  MUTEXKCT=MUTEXKCT-ONE;              /* DECREMENT KEYS TO PROCESS  */ 00396000
         BCTR  MUTEXKCT,0                                       02S0087 00397000
*END;                                  /* ENDWHILE                   */ 00398000
         AH    I,@CH00056                                       02S0088 00399000
@DE00082 LTR   MUTEXKCT,MUTEXKCT                                02S0088 00400000
         BNZ   @DL00082                                         02S0088 00401000
*        END;                                                   01S0089 00402000
*      ELSE;                                                    01S0090 00403000
@RF00077 DS    0H                                               01S0091 00404000
*    END;                                                       01S0091 00405000
*  ELSE;                                                        01S0092 00406000
@RF00032 DS    0H                                               01S0093 00407000
*END;                                  /* ENDWHILE                   */ 00408000
@DE00027 L     @10,@PC00001+20                                  01S0093 00409000
         ICM   @09,3,ERRCODE(@10)                               01S0093 00410000
         BNZ   @DC00027                                         01S0093 00411000
         TM    ENDSW,B'10000000'                                01S0093 00412000
         BZ    @DL00027                                         01S0093 00413000
@DC00027 DS    0H                                               01S0094 00414000
*IF ERRCODE^=0 THEN                    /* WAS SYNTAX GOOD ?          */ 00415000
         L     @10,@PC00001+20                                  01S0094 00416000
         ICM   @15,3,ERRCODE(@10)                               01S0094 00417000
         BZ    @RF00094                                         01S0094 00418000
*  INFOCODE = TEXTUKEY;                /* RETURN FAILING TEXT KEY    */ 00419000
*                                                               01S0095 00420000
         L     @01,TEXTPTR                                      01S0095 00421000
         L     @01,TXTPLENT(,@01)                               01S0095 00422000
         MVC   INFOCODE(2,@10),TEXTUKEY(@01)                    01S0095 00423000
*RETURN CODE(0);                                                01S0096 00424000
@RF00094 L     @13,4(,@13)                                      01S0096 00425000
         L     @00,@SIZDATD                                     01S0096 00426000
         LR    @01,@11                                          01S0096 00427000
         FSPACE   R,LV=(0),A=(1)                                        00428000
         SLR   @15,@15                                          01S0096 00429000
         L     @14,12(,@13)                                     01S0096 00430000
         LM    @00,@12,20(@13)                                  01S0096 00431000
         BR    @14                                              01S0096 00432000
*END IEFDB4FF                                                   01S0097 00433000
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      * 00434000
*/*%INCLUDE SYSLIB  (SYNCKDAT)                                        * 00435000
*/*%INCLUDE SYSLIB  (IEFZB4D1)                                        * 00436000
*/*%INCLUDE SYSLIB  (IEFZB4DA)                                        * 00437000
*/*%INCLUDE SYSLIB  (CHECKKYS)                                        * 00438000
*/*%INCLUDE SYSLIB  (MXMNCHK )                                        * 00439000
*/*%INCLUDE SYSLIB  (SETMUTEX)                                        * 00440000
*;                                                              01S0097 00441000
@DATA    DS    0H                                                       00442000
@CH00056 DC    H'1'                                                     00443000
@DATD    DSECT                                                          00444000
         DS    0F                                                       00445000
@SA00001 DS    18F                                                      00446000
@PC00001 DS    6F                                                       00447000
IEFDB4FF CSECT                                                          00448000
         DS    0F                                                       00449000
@CF00048 DC    F'2'                                                     00450000
@CH00048 EQU   @CF00048+2                                               00451000
@CF00074 DC    F'8'                                                     00452000
@CF00307 DC    F'-4'                                                    00453000
@CF00310 DC    F'-1'                                                    00454000
@CF00302 DC    XL4'7FFFFFFF'                                            00455000
@DATD    DSECT                                                          00456000
         DS    0D                                                       00457000
TEXTPTR  DS    A                                                        00458000
SAVEMASK DS    CL2                                                      00459000
WORKMASK DS    CL2                                                      00460000
SWITCHES DS    CL1                                                      00461000
         ORG   SWITCHES                                                 00462000
ENDSW    DS    BL1                                                      00463000
FOUNDSW  EQU   SWITCHES+0                                               00464000
STOPSW   EQU   SWITCHES+0                                               00465000
@NM00001 EQU   SWITCHES+0                                               00466000
         ORG   SWITCHES+1                                               00467000
IEFDB4FF CSECT                                                          00468000
         DS    0F                                                       00469000
@SIZDATD DC    AL1(230)                                                 00470000
         DC    AL3(@ENDDATD-@DATD)                                      00471000
         DS    0D                                                       00472000
@CB00161 DC    X'0360'                                                  00473000
@CB00169 DC    X'0374'                                                  00474000
@CB00171 DC    X'0378'                                                  00475000
@CB00173 DC    X'037C'                                                  00476000
@CB00175 DC    X'0380'                                                  00477000
@CB00104 DC    B'1111111111111111'                                      00478000
@CB00108 DC    B'0000000000000000'                                      00479000
STATMASK DC    X'8040201008040201'                                      00480000
IEFDB4FF CSECT                                                          00481000
         DS   0H                                                        00482000
PATCHLOC DC (50)X'00'                                                   00483000
@DATD    DSECT                                                          00484000
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA                00485000
@ENDDATD EQU   *                                                        00486000
IEFDB4FF CSECT                                                          00487000
@00      EQU   00                      EQUATES FOR REGISTERS 0-15       00488000
@01      EQU   01                                                       00489000
@02      EQU   02                                                       00490000
@03      EQU   03                                                       00491000
@04      EQU   04                                                       00492000
@05      EQU   05                                                       00493000
@06      EQU   06                                                       00494000
@07      EQU   07                                                       00495000
@08      EQU   08                                                       00496000
@09      EQU   09                                                       00497000
@10      EQU   10                                                       00498000
@11      EQU   11                                                       00499000
@12      EQU   12                                                       00500000
@13      EQU   13                                                       00501000
@14      EQU   14                                                       00502000
@15      EQU   15                                                       00503000
NUMCOUNT EQU   @04                                                      00504000
SAVEOFF  EQU   @04                                                      00505000
SAVEKEY  EQU   @02                                                      00506000
OFFSET   EQU   @06                                                      00507000
MUTEXKCT EQU   @05                                                      00508000
I        EQU   @07                                                      00509000
KEYTP    EQU   @02                                                      00510000
KEYDICTP EQU   @03                                                      00511000
TXTUFLDP EQU   @02                                                      00512000
S99TXTPP EQU   @08                                                      00513000
TXTUPLST EQU   0                                                        00514000
TXTUNITP EQU   TXTUPLST                                                 00515000
TXTUPELM EQU   0                                                        00516000
TXTPLENT EQU   TXTUPELM                                                 00517000
TXTPLEND EQU   TXTPLENT                                                 00518000
TEXTUNIT EQU   0                                                        00519000
TEXTUKEY EQU   TEXTUNIT                                                 00520000
TEXTUNUM EQU   TEXTUNIT+2                                               00521000
TEXTUENT EQU   TEXTUNIT+4                                               00522000
TEXTUFLD EQU   0                                                        00523000
TEXTULEN EQU   TEXTUFLD                                                 00524000
KEYDICT  EQU   0                                                        00525000
ENTLEN   EQU   KEYDICT                                                  00526000
ENTKEY   EQU   KEYDICT+1                                                00527000
ENTMAXLN EQU   KEYDICT+3                                                00528000
ENTMINLN EQU   KEYDICT+5                                                00529000
ENTMAXNO EQU   KEYDICT+7                                                00530000
ENTMINNO EQU   KEYDICT+9                                                00531000
ENTRTAP  EQU   KEYDICT+11                                               00532000
MUTEXKY  EQU   KEYDICT+13                                               00533000
KYADDRP  EQU   0                                                        00534000
KEYMASK1 EQU   0                                                        00535000
KEYMASK2 EQU   0                                                        00536000
SYNTXTP  EQU   0                                                        00537000
SYNKDCTP EQU   0                                                        00538000
SYNKM1P  EQU   0                                                        00539000
SYNKM2P  EQU   0                                                        00540000
SYNRTAP  EQU   0                                                        00541000
SYNRSNCD EQU   0                                                        00542000
ERRCODE  EQU   SYNRSNCD                                                 00543000
INFOCODE EQU   SYNRSNCD+2                                               00544000
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS    00545000
TEXTUPRM EQU   TEXTUFLD+2                                               00546000
TEXTUPAR EQU   TEXTUENT+2                                               00547000
TEXTULNG EQU   TEXTUENT                                                 00548000
TXTUPEND EQU   TXTUNITP                                                 00549000
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS      00550000
@RC00041 EQU   @RC00040                                                 00551000
@RC00047 EQU   @RC00041                                                 00552000
@RC00051 EQU   @RC00047                                                 00553000
@RC00054 EQU   @RC00047                                                 00554000
@ENDDATA EQU   *                                                        00555000
         END   IEFDB4FF                                                 00556000
