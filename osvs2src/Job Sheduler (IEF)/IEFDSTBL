         TITLE 'IEFDSTBL - DATA SET TREE CREATE                        *00001000
                        '                                               00002000
IEFDSTBL CSECT ,                                                   0001 00003000
@MAINENT DS    0H                                                  0001 00004000
         USING *,@15                                               0001 00005000
         B     @PROLOG                                             0001 00006000
         DC    AL1(16)                                             0001 00007000
         DC    C'IEFDSTBL  73.321'                                 0001 00008000
         DROP  @15                                                      00009000
@PROLOG  STM   @14,@12,12(@13)                                     0001 00010000
         BALR  @12,0                                               0001 00011000
@PSTART  DS    0H                                                  0001 00012000
         USING @PSTART,@12                                         0001 00013000
*                                                                    */ 00014000
*                                                                  0003 00015000
*   /*****************************************************************/ 00016000
*   /*                                                               */ 00017000
*   /* THIS SECTION CHECKS FOR FIRST ENTRY. IF IT IS THE FIRST ENTRY */ 00018000
*   /* THEN THE FIRST 1024 BYTE SEGMENT OF THE TREE MUST BE GOTTEN.  */ 00019000
*   /* THE POINTERS ARE SET UP AND THE FIRST DATA SET ENTRY IS ADDED */ 00020000
*   /* TO THE TREE. IF IT IS NOT THE FIRST ENTRY THEN THE CURRENT    */ 00021000
*   /* POINTER HAS TO BE SET TO POINT TO THE FIRST ENTRY AND ALSO THE*/ 00022000
*   /* TREEPTR MUST BE SAVED.                                        */ 00023000
*   /*                                                               */ 00024000
*   /*****************************************************************/ 00025000
*                                                                  0003 00026000
*   PARMPTR=R1;                     /* SET UP POINTER TO PARAMTER  0003 00027000
*                                      LIST                          */ 00028000
         LR    PARMPTR,R1                                          0003 00029000
*   INDICT=16;                      /* SET UP INDICATOR              */ 00030000
         LA    INDICT,16                                           0004 00031000
*   IF TREEPTR=0 THEN               /* IF ZERO THEN THIS IS FIRST  0005 00032000
*                                      ENTRY                         */ 00033000
         ICM   @00,15,TREEPTR(PARMPTR)                             0005 00034000
         BNZ   @RF00005                                            0005 00035000
*     DO;                                                          0006 00036000
*       CALL GETFIRST;              /* FIRST ENTRY, GET THE FIRST  0007 00037000
*                                      SEGMENT                       */ 00038000
         BAL   @14,GETFIRST                                        0007 00039000
*       IF STEP>STEP1 THEN          /* CHECK RESTARTING STEP         */ 00040000
         L     @05,DATASET(,PARMPTR)                               0008 00041000
         CLC   STEP(1,PARMPTR),STEP1(@05)                          0008 00042000
         BNH   @RF00008                                            0008 00043000
*         INDICT=4;                 /* SET INDICATOR                 */ 00044000
         LA    INDICT,4                                            0009 00045000
*     END;                                                         0010 00046000
*   ELSE                                                           0011 00047000
*     DO;                                                          0011 00048000
         B     @RC00005                                            0011 00049000
@RF00005 DS    0H                                                  0012 00050000
*       CURRENT=FIRSTSVA;           /* SET CURRENT TO POINT TO FIRST    00051000
*                                      ENTRY                         */ 00052000
         L     @05,TREEPTR(,PARMPTR)                               0012 00053000
         MVC   CURRENT(4,@05),FIRSTSVA(@05)                        0012 00054000
*       SAVETREE=TREEPTR;           /* SAVE THE TREE POINTER         */ 00055000
         LR    SAVETREE,@05                                        0013 00056000
*     END;                                                         0014 00057000
*                                                                  0015 00058000
*   /*****************************************************************/ 00059000
*   /*                                                               */ 00060000
*   /* THIS DO WHILE LOOP INDEXS THROUGH THE TREE TO FIND AN EQUAL   */ 00061000
*   /* DATA SET NAME. IF AN EQUAL LENGTH IS FOUND THEN THE NAME IS   */ 00062000
*   /* CHECKED. IF THE NAME IS EQUAL THEN SWAUPDTE IS CALLED TO      */ 00063000
*   /* UPDATE THE STEP NUMBER OUT ON SWA. IF THE LENGTH IS NOT EQUAL */ 00064000
*   /* THEN CURRENT IS UPDATED TO POINT TO THE NEXT DATA SET ENTRY IN*/ 00065000
*   /* THE TREE. IF CURRENT POINTS TO FOXES THEN WE MUST GO TO THE   */ 00066000
*   /* NEXT 1024 SEGMENT AND REBASE TREEPTR. IF CURRENT IS ZERO THEN */ 00067000
*   /* WE CAN ADD THE DATA SET TO THE TREE.                          */ 00068000
*   /*                                                               */ 00069000
*   /*****************************************************************/ 00070000
*                                                                  0015 00071000
*   DO WHILE INDICT=16;             /* FIND AN EQUAL OR THE END OF 0015 00072000
*                                      THE TREE                      */ 00073000
@RC00005 B     @DE00015                                            0015 00074000
@DL00015 DS    0H                                                  0016 00075000
*     IF STEP>STEP1 THEN                                           0016 00076000
         L     @05,DATASET(,PARMPTR)                               0016 00077000
         CLC   STEP(1,PARMPTR),STEP1(@05)                          0016 00078000
         BNH   @RF00016                                            0016 00079000
*       DO;                                                        0017 00080000
*         TREEPTR=SAVETREE;         /* RESTORE THE TREE POINTER      */ 00081000
         ST    SAVETREE,TREEPTR(,PARMPTR)                          0018 00082000
*         RETURN CODE(4);           /* INDICATE DUPLICATE ,        0019 00083000
*                                      RESTARTING STEP GREATER THAN     00084000
*                                      THIS STEP                     */ 00085000
         LA    @15,4                                               0019 00086000
         L     @14,12(,@13)                                        0019 00087000
         LM    @00,@12,20(@13)                                     0019 00088000
         BR    @14                                                 0019 00089000
*       END;                                                       0020 00090000
*     IF DSLGH^=0 THEN                                             0021 00091000
@RF00016 L     @05,TREEPTR(,PARMPTR)                               0021 00092000
         L     @05,CURRENT(,@05)                                   0021 00093000
         CLI   DSLGH(@05),0                                        0021 00094000
         BE    @RF00021                                            0021 00095000
*       DO;                         /* NOT FIRST ENTRY IN TABLE ,GO     00096000
*                                      ON                            */ 00097000
*         IF DSLGH=DSLGH1 THEN      /* ARE THE DATA SET NAMES LENGTH    00098000
*                                      EQUAL                         */ 00099000
         L     @15,DATASET(,PARMPTR)                               0023 00100000
         CLC   DSLGH(1,@05),DSLGH1(@15)                            0023 00101000
         BNE   @RF00023                                            0023 00102000
*           DO;                     /* YES, THEN ARE THE NAMES THE 0024 00103000
*                                      SAME?                         */ 00104000
*             IF NEW(1:DSLGH)=DATASETN(1:DSLGH) THEN               0025 00105000
*                                                                  0025 00106000
         SLR   @14,@14                                             0025 00107000
         IC    @14,DSLGH(,@05)                                     0025 00108000
         BCTR  @14,0                                               0025 00109000
         EX    @14,@SC00106                                        0025 00110000
         BNE   @RF00025                                            0025 00111000
*               /*****************************************************/ 00112000
*               /*                                                   */ 00113000
*               /* THE NAME IS VARIABLE LENGTH, INDEX BY THE LENGTH  */ 00114000
*               /* FOR THE COMPARE                                   */ 00115000
*               /*                                                   */ 00116000
*               /*****************************************************/ 00117000
*                                                                  0026 00118000
*               CALL SWAUPDTE;      /* UPDATE THE COUNT FIELD ON SWA */ 00119000
         BAL   @14,SWAUPDTE                                        0026 00120000
*           END;                                                   0027 00121000
@RF00025 DS    0H                                                  0028 00122000
*         IF INDICT=16 THEN                                        0028 00123000
@RF00023 CH    INDICT,@CH00088                                     0028 00124000
         BNE   @RF00028                                            0028 00125000
*           DO;                     /* UPDATE CURRENT AND CKECK FOR     00126000
*                                      END OF TREE                   */ 00127000
*             CURRENT=CURRENT+7+DSLGH;/* UPDATE CURRENT TO POINT TO     00128000
*                                      NEXT ENTRY                    */ 00129000
         L     @05,TREEPTR(,PARMPTR)                               0030 00130000
         L     @15,CURRENT(,@05)                                   0030 00131000
         LA    @00,7                                               0030 00132000
         ALR   @00,@15                                             0030 00133000
         SLR   @14,@14                                             0030 00134000
         IC    @14,DSLGH(,@15)                                     0030 00135000
         ALR   @00,@14                                             0030 00136000
         ST    @00,CURRENT(,@05)                                   0030 00137000
*             IF SVA=FOXES THEN     /* IS THIS THE END OF THIS     0031 00138000
*                                      SEGMENT?                      */ 00139000
         LR    @15,@00                                             0031 00140000
         CLC   SVA(4,@15),FOXES                                    0031 00141000
         BNE   @RF00031                                            0031 00142000
*               DO;                                                0032 00143000
*                 TREEPTR=TREE2;    /* YES, INDEX TO NEXT     SEGMENT*/ 00144000
         L     @05,TREE2(,@05)                                     0033 00145000
         ST    @05,TREEPTR(,PARMPTR)                               0033 00146000
*                 CURRENT=FIRSTSVA; /* POINT TO FIRST DSNAME         */ 00147000
         MVC   CURRENT(4,@05),FIRSTSVA(@05)                        0034 00148000
*               END;                                               0035 00149000
*             IF SVA=0 THEN         /* END OF TREE IS FOUND IF SVA IS   00150000
*                                      ZERO                          */ 00151000
@RF00031 SLR   @05,@05                                             0036 00152000
         L     @15,TREEPTR(,PARMPTR)                               0036 00153000
         L     @15,CURRENT(,@15)                                   0036 00154000
         C     @05,SVA(,@15)                                       0036 00155000
         BNE   @RF00036                                            0036 00156000
*               INDICT=0;           /* SET INDICTOR                  */ 00157000
         LR    INDICT,@05                                          0037 00158000
*           END;                                                   0038 00159000
*       END;                                                       0039 00160000
*     ELSE                                                         0040 00161000
*       INDICT=0;                   /* INDICATE ADD ENTRY            */ 00162000
         B     @RC00021                                            0040 00163000
@RF00021 SLR   INDICT,INDICT                                       0040 00164000
*   END;                                                           0041 00165000
@RC00021 DS    0H                                                  0041 00166000
@DE00015 CH    INDICT,@CH00088                                     0041 00167000
         BE    @DL00015                                            0041 00168000
*                                                                  0042 00169000
*   /*****************************************************************/ 00170000
*   /*                                                               */ 00171000
*   /* THIS SECTION OF CODE ADDS THE DATA SET ENTRY TO THE TREE OR   */ 00172000
*   /* FALLS THROUGH IF THE DATA SET PROCESSED IS A DUPLICATE ENTRY. */ 00173000
*   /* IF THERE IS NOT ENOUGH ROOM IN THE 1024 BYTE SEGMENT THEN     */ 00174000
*   /* GETNEWAR IS CALLED TO GET A NEW SEGMENT AND CHAIN THEM        */ 00175000
*   /* TOGETHER.                                                     */ 00176000
*   /*                                                               */ 00177000
*   /*****************************************************************/ 00178000
*                                                                  0042 00179000
*   IF INDICT=0 THEN                /* IF ZERO, ADD DATA SET ENTRY   */ 00180000
         CH    INDICT,@CH00089                                     0042 00181000
         BNE   @RF00042                                            0042 00182000
*     DO;                                                          0043 00183000
*       IF LASTWORD-CURRENT<52 THEN                                0044 00184000
*                                                                  0044 00185000
         L     @05,TREEPTR(,PARMPTR)                               0044 00186000
         L     @03,LASTWORD(,@05)                                  0044 00187000
         SL    @03,CURRENT(,@05)                                   0044 00188000
         CH    @03,@CH00094                                        0044 00189000
         BNL   @RF00044                                            0044 00190000
*         /***********************************************************/ 00191000
*         /*                                                         */ 00192000
*         /* IF LESS THEN 52 BYTES IN SEGMENT THEN GET A NEW SEGMENT */ 00193000
*         /*                                                         */ 00194000
*         /***********************************************************/ 00195000
*                                                                  0045 00196000
*         CALL GETNEWAR;            /* GET A NEW SEGMENT             */ 00197000
         BAL   @14,GETNEWAR                                        0045 00198000
*       SVA=SVADSET;                /* ADD THE SWA VIRTUAL ADDRESS TO   00199000
*                                      TREE                          */ 00200000
@RF00044 L     @05,TREEPTR(,PARMPTR)                               0046 00201000
         L     @05,CURRENT(,@05)                                   0046 00202000
         MVC   SVA(4,@05),SVADSET(PARMPTR)                         0046 00203000
*       STEP3=STEP1;                /* MOVE IN THE STEP NUMBER       */ 00204000
         L     @03,DATASET(,PARMPTR)                               0047 00205000
         MVC   STEP3(1,@05),STEP1(@03)                             0047 00206000
*       EXSHR=EXSHR1;               /* SET THE EXCLUSIVE OR SHARED 0048 00207000
*                                      BYTE                          */ 00208000
         MVC   EXSHR(1,@05),EXSHR1(@03)                            0048 00209000
*       DSLGH=DSLGH1;               /* MOVE IN DATA SET LENGTH       */ 00210000
         MVC   DSLGH(1,@05),DSLGH1(@03)                            0049 00211000
*       NEW(1:DSLGH)=DATASETN;      /* MOVE IN VARIABLE DSNAME       */ 00212000
         SLR   @15,@15                                             0050 00213000
         IC    @15,DSLGH(,@05)                                     0050 00214000
         BCTR  @15,0                                               0050 00215000
         EX    @15,@SM00108                                        0050 00216000
*       TREEPTR=SAVETREE;           /* RESTORE BEGINNING TREE POINTER*/ 00217000
         ST    SAVETREE,TREEPTR(,PARMPTR)                          0051 00218000
*       RETURN CODE(0);             /* INDICATE DATA SET ENTRY ADDED */ 00219000
         SLR   @15,@15                                             0052 00220000
         L     @14,12(,@13)                                        0052 00221000
         LM    @00,@12,20(@13)                                     0052 00222000
         BR    @14                                                 0052 00223000
*     END;                                                         0053 00224000
*   TREEPTR=SAVETREE;               /* RESTORE TREE POINTER          */ 00225000
@RF00042 ST    SAVETREE,TREEPTR(,PARMPTR)                          0054 00226000
*   RETURN CODE(4);                 /* INDICATE DUPLICATE DSNAME   0055 00227000
*                                                                    */ 00228000
         LA    @15,4                                               0055 00229000
         L     @14,12(,@13)                                        0055 00230000
         LM    @00,@12,20(@13)                                     0055 00231000
         BR    @14                                                 0055 00232000
*                                                                  0056 00233000
*   /*****************************************************************/ 00234000
*   /*                                                               */ 00235000
*   /* THIS SUBROUTINE GETS THE FIRST 1024 BYTE SEGMENT FOR THE TREE.*/ 00236000
*   /* IT SETS UP THE POINTERS IN THE TREE AND PUTS THE ADDRESS OF   */ 00237000
*   /* THE TREE IN THE PARAMETER LIST PASSED TO IEFDSTBL. IT SAVES   */ 00238000
*   /* THE TREE POINTER TO BE RESTORED LATER.                        */ 00239000
*   /*                                                               */ 00240000
*   /*****************************************************************/ 00241000
*                                                                  0056 00242000
*GETFIRST:                                                         0056 00243000
*   PROC OPTIONS(NOSAVEAREA,NOSAVE);                               0056 00244000
@EL00001 DS    0H                                                  0056 00245000
@EF00001 DS    0H                                                  0056 00246000
@ER00001 LM    @14,@12,12(@13)                                     0056 00247000
         BR    @14                                                 0056 00248000
@PB00001 DS    0H                                                  0056 00249000
GETFIRST DS    0H                                                  0057 00250000
*   RFY                                                            0057 00251000
*    (R14) RSTD;                                                   0057 00252000
*   GEN(GETMAIN  R,LV=1024,SP=0);                                  0058 00253000
         GETMAIN  R,LV=1024,SP=0                                        00254000
*   TREEPTR=R1;                     /* BASE THE TREE ON THE AREA   0059 00255000
*                                      GOTTEN                        */ 00256000
         ST    R1,TREEPTR(,PARMPTR)                                0059 00257000
*   TREE2=TREE2&&TREE2;             /* CLEAR POINTER TO NEXT SEGMENT */ 00258000
         L     @15,TREEPTR(,PARMPTR)                               0060 00259000
         L     @05,TREE2(,@15)                                     0060 00260000
         LR    @00,@05                                             0060 00261000
         XR    @00,@05                                             0060 00262000
         ST    @00,TREE2(,@15)                                     0060 00263000
*   AREA=AREA&&AREA;                /* CLEAR AREA                    */ 00264000
         XC    AREA(250,@15),AREA(@15)                             0061 00265000
*   AREA1=AREA1&&AREA1;             /* CLEAR AREA                    */ 00266000
         XC    AREA1(250,@15),AREA1(@15)                           0062 00267000
*   AREA2=AREA2&&AREA2;             /* CLEAR AREA                    */ 00268000
         XC    AREA2(250,@15),AREA2(@15)                           0063 00269000
*   AREA3=AREA3&&AREA3;             /* CLEAR AREA                    */ 00270000
         XC    AREA3(250,@15),AREA3(@15)                           0064 00271000
*   ENDTREE=ENDTREE&&ENDTREE;       /* CLEAR LAST WORD IN TREE       */ 00272000
         L     @05,ENDTREE(,@15)                                   0065 00273000
         LR    @00,@05                                             0065 00274000
         XR    @00,@05                                             0065 00275000
         ST    @00,ENDTREE(,@15)                                   0065 00276000
*   FIRSTSVA=ADDR(AREA);            /* SET UP POINTER TO FIRST AREA  */ 00277000
         LA    @05,AREA(,@15)                                      0066 00278000
         ST    @05,FIRSTSVA(,@15)                                  0066 00279000
*   LASTWORD=ADDR(ENDTREE);         /* FIND THE LAST ADDRESS IN    0067 00280000
*                                      SEGMENT                       */ 00281000
         LA    @00,ENDTREE(,@15)                                   0067 00282000
         ST    @00,LASTWORD(,@15)                                  0067 00283000
*   CURRENT=FIRSTSVA;               /* SET UP CURRENT                */ 00284000
         ST    @05,CURRENT(,@15)                                   0068 00285000
*   INDICT=0;                       /* INDICATE ADD THE DATA SET   0069 00286000
*                                      ENTRY                         */ 00287000
         SLR   INDICT,INDICT                                       0069 00288000
*   SAVETREE=TREEPTR;               /* SAVE THE TREE POINTER         */ 00289000
         LR    SAVETREE,@15                                        0070 00290000
*   RFY                                                            0071 00291000
*    (R14) UNRSTD;                                                 0071 00292000
*   END;                                                           0072 00293000
@EL00002 DS    0H                                                  0072 00294000
@EF00002 DS    0H                                                  0072 00295000
@ER00002 BR    @14                                                 0072 00296000
*                                                                  0073 00297000
*   /*****************************************************************/ 00298000
*   /*                                                               */ 00299000
*   /* THIS SUBROUTINE GETS A NEW 1024 BYTE SEGMENT FOR THE TREE. IT */ 00300000
*   /* PUTS THE FOXES IN THE LAST SEGMENT TO INDICATE THE END OF IT  */ 00301000
*   /* AND SETS UP THE POINTERS IN THE NEW SEGMENT.                  */ 00302000
*   /*                                                               */ 00303000
*   /*****************************************************************/ 00304000
*                                                                  0073 00305000
*GETNEWAR:                                                         0073 00306000
*   PROC OPTIONS(NOSAVEAREA,NOSAVE);                               0073 00307000
GETNEWAR DS    0H                                                  0074 00308000
*   RFY                                                            0074 00309000
*    (R14) RSTD;                                                   0074 00310000
*   SVA=FOXES;                      /* INDICATE END OF SEGMENT       */ 00311000
         L     @15,TREEPTR(,PARMPTR)                               0075 00312000
         L     @15,CURRENT(,@15)                                   0075 00313000
         MVC   SVA(4,@15),FOXES                                    0075 00314000
*   GEN(GETMAIN  R,LV=1024,SP=0);                                  0076 00315000
         GETMAIN  R,LV=1024,SP=0                                        00316000
*   TREE2=R1;                       /* SET POINTER TO OTHER SEGMENT     00317000
*                                      IN TREE                       */ 00318000
         L     @15,TREEPTR(,PARMPTR)                               0077 00319000
         ST    R1,TREE2(,@15)                                      0077 00320000
*   TREEPTR=TREE2;                  /* REBASE TREE POINTER TO NEW  0078 00321000
*                                      SEGMENT                       */ 00322000
         L     @15,TREEPTR(,PARMPTR)                               0078 00323000
         L     @15,TREE2(,@15)                                     0078 00324000
         ST    @15,TREEPTR(,PARMPTR)                               0078 00325000
*   AREA=AREA&&AREA;                /* CLEAR THE AREA                */ 00326000
         XC    AREA(250,@15),AREA(@15)                             0079 00327000
*   AREA1=AREA1&&AREA1;             /* CLEAR THE AREA                */ 00328000
         XC    AREA1(250,@15),AREA1(@15)                           0080 00329000
*   AREA2=AREA2&&AREA2;             /* CLEAR THE AREA                */ 00330000
         XC    AREA2(250,@15),AREA2(@15)                           0081 00331000
*   AREA3=AREA3&&AREA3;             /* CLEAR THE AREA                */ 00332000
         XC    AREA3(250,@15),AREA3(@15)                           0082 00333000
*   TREE2=TREE2&&TREE2;             /* CLEAR POINTER TO NEXT SEGMENT */ 00334000
         L     @05,TREE2(,@15)                                     0083 00335000
         LR    @03,@05                                             0083 00336000
         XR    @03,@05                                             0083 00337000
         ST    @03,TREE2(,@15)                                     0083 00338000
*   ENDTREE=ENDTREE&&ENDTREE;       /* CLEAR LAST WORD IN TREE       */ 00339000
         L     @05,ENDTREE(,@15)                                   0084 00340000
         LR    @03,@05                                             0084 00341000
         XR    @03,@05                                             0084 00342000
         ST    @03,ENDTREE(,@15)                                   0084 00343000
*   FIRSTSVA=ADDR(AREA);            /* SET POINTER TO FIRST AREA     */ 00344000
         LA    @05,AREA(,@15)                                      0085 00345000
         ST    @05,FIRSTSVA(,@15)                                  0085 00346000
*   LASTWORD=ADDR(ENDTREE);         /* PUT END OF SEGMENT ADDR IN  0086 00347000
*                                      TREE                          */ 00348000
         LA    @03,ENDTREE(,@15)                                   0086 00349000
         ST    @03,LASTWORD(,@15)                                  0086 00350000
*   CURRENT=FIRSTSVA;               /* SET CURRENT POINTER           */ 00351000
         ST    @05,CURRENT(,@15)                                   0087 00352000
*   RFY                                                            0088 00353000
*    (R14) UNRSTD;                                                 0088 00354000
*   END;                                                           0089 00355000
@EL00003 DS    0H                                                  0089 00356000
@EF00003 DS    0H                                                  0089 00357000
@ER00003 BR    @14                                                 0089 00358000
*                                                                  0090 00359000
*   /*****************************************************************/ 00360000
*   /*                                                               */ 00361000
*   /* THIS SUBROUTINE IS CALLED TO UPDATE THE STEP FIELD FOR THE    */ 00362000
*   /* DATA SET ENTRY OUT ON SWA. THE DATA SET ENQ BLOCK ON SWA IS   */ 00363000
*   /* INDEXED UNTIL THE DATA SET ENTRY IS FOUND. THEN THE HIGHEST   */ 00364000
*   /* STEP NUMBER IS PUT IN THE ENTRY ON SWA.                       */ 00365000
*   /*                                                               */ 00366000
*   /*****************************************************************/ 00367000
*                                                                  0090 00368000
*SWAUPDTE:                                                         0090 00369000
*   PROC OPTIONS(NOSAVEAREA,NOSAVE);                               0090 00370000
SWAUPDTE DS    0H                                                  0091 00371000
*   RFY                                                            0091 00372000
*    (R14) RSTD;                                                   0091 00373000
*   SWAPTR=ADDR(NEW1);              /* POINT TO FIRST ENTRY IN SWA   */ 00374000
         L     @15,TREEPTR(,PARMPTR)                               0092 00375000
         L     @05,CURRENT(,@15)                                   0092 00376000
         L     @05,SVA(,@05)                                       0092 00377000
         LA    @05,NEW1(,@05)                                      0092 00378000
         ST    @05,SWAPTR(,@15)                                    0092 00379000
*   DO WHILE INDICT^=4;             /* SET UP TO LOOP THROUGH SWA  0093 00380000
*                                      BLOCK                         */ 00381000
         B     @DE00093                                            0093 00382000
@DL00093 DS    0H                                                  0094 00383000
*     IF DSLGH=DSLGH2 THEN          /* IS THIS DATA SET LENGTH EQUAL?*/ 00384000
         L     @15,TREEPTR(,PARMPTR)                               0094 00385000
         L     @05,CURRENT(,@15)                                   0094 00386000
         L     @15,SWAPTR(,@15)                                    0094 00387000
         CLC   DSLGH(1,@05),DSLGH2(@15)                            0094 00388000
         BNE   @RF00094                                            0094 00389000
*       DO;                                                        0095 00390000
*                                                                  0095 00391000
*         /***********************************************************/ 00392000
*         /*                                                         */ 00393000
*         /* YES, ARE DATA SET NAMES EQUAL??                         */ 00394000
*         /*                                                         */ 00395000
*         /***********************************************************/ 00396000
*                                                                  0096 00397000
*         IF NEW(1:DSLGH)=DSNAME(1:DSLGH) THEN                     0096 00398000
         SLR   @11,@11                                             0096 00399000
         IC    @11,DSLGH(,@05)                                     0096 00400000
         BCTR  @11,0                                               0096 00401000
         EX    @11,@SC00110                                        0096 00402000
         BNE   @RF00096                                            0096 00403000
*           DO;                                                    0097 00404000
*             IF STEP2<STEP3 THEN   /* PUT IN SWA HIGHEST STEP NUMBER*/ 00405000
         CLC   STEP2(1,@15),STEP3(@05)                             0098 00406000
         BNL   @RF00098                                            0098 00407000
*               STEP2=STEP3;        /* HIGHEST IS ONE NOT ON SWA     */ 00408000
         MVC   STEP2(1,@15),STEP3(@05)                             0099 00409000
*             EXSHR2=EXSHR2&EXSHR1; /* SET THE MOST RESTRICTIVE    0100 00410000
*                                      ATTRIBUTE                     */ 00411000
@RF00098 L     @15,TREEPTR(,PARMPTR)                               0100 00412000
         L     @05,SWAPTR(,@15)                                    0100 00413000
         L     @11,DATASET(,PARMPTR)                               0100 00414000
         NC    EXSHR2(1,@05),EXSHR1(@11)                           0100 00415000
*             EXSHR=EXSHR2;         /* PUT THIS ATTRIBUTE IN THE TREE   00416000
*                                      ALSO                          */ 00417000
         L     @15,CURRENT(,@15)                                   0101 00418000
         MVC   EXSHR(1,@15),EXSHR2(@05)                            0101 00419000
*             INDICT=4;             /* SET INDICTOR TO STOP DO LOOP  */ 00420000
         LA    INDICT,4                                            0102 00421000
*           END;                                                   0103 00422000
*       END;                                                       0104 00423000
@RF00096 DS    0H                                                  0105 00424000
*     SWAPTR=SWAPTR+3+DSLGH2;       /* UPDATE PTR IN TREE TO SWA     */ 00425000
@RF00094 L     @15,TREEPTR(,PARMPTR)                               0105 00426000
         L     @05,SWAPTR(,@15)                                    0105 00427000
         LA    @00,3                                               0105 00428000
         ALR   @00,@05                                             0105 00429000
         SLR   @11,@11                                             0105 00430000
         IC    @11,DSLGH2(,@05)                                    0105 00431000
         ALR   @00,@11                                             0105 00432000
         ST    @00,SWAPTR(,@15)                                    0105 00433000
*   END;                                                           0106 00434000
@DE00093 CH    INDICT,@CH00091                                     0106 00435000
         BNE   @DL00093                                            0106 00436000
*   RFY                                                            0107 00437000
*    (R14) UNRSTD;                                                 0107 00438000
*   END;                                                           0108 00439000
@EL00004 DS    0H                                                  0108 00440000
@EF00004 DS    0H                                                  0108 00441000
@ER00004 BR    @14                                                 0108 00442000
*   END IEFDSTBL;                                                  0109 00443000
@DATA    DS    0H                                                       00444000
@CH00089 DC    H'0'                                                     00445000
@CH00091 DC    H'4'                                                     00446000
@CH00088 DC    H'16'                                                    00447000
@CH00094 DC    H'52'                                                    00448000
@SC00106 CLC   NEW(0,@05),DATASETN(@15)                                 00449000
@SM00108 MVC   NEW(0,@05),DATASETN(@03)                                 00450000
@SC00110 CLC   NEW(0,@05),DSNAME(@15)                                   00451000
@DATD    DSECT                                                          00452000
         DS    0F                                                       00453000
IEFDSTBL CSECT                                                          00454000
         DS    0F                                                       00455000
@DATD    DSECT                                                          00456000
         DS    0D                                                       00457000
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA                00458000
@ENDDATD EQU   *                                                        00459000
IEFDSTBL CSECT                                                          00460000
         DS    0F                                                       00461000
@SIZDATD DC    AL1(0)                                                   00462000
         DC    AL3(@ENDDATD-@DATD)                                      00463000
         DS    0D                                                       00464000
FOXES    DC    XL4'FFFFFFFF'                                            00465000
PATCH    DC    X'00'                                                    00466000
         DS    44XL1                                                    00467000
@00      EQU   00                      EQUATES FOR REGISTERS 0-15       00468000
@01      EQU   01                                                       00469000
@02      EQU   02                                                       00470000
@03      EQU   03                                                       00471000
@04      EQU   04                                                       00472000
@05      EQU   05                                                       00473000
@06      EQU   06                                                       00474000
@07      EQU   07                                                       00475000
@08      EQU   08                                                       00476000
@09      EQU   09                                                       00477000
@10      EQU   10                                                       00478000
@11      EQU   11                                                       00479000
@12      EQU   12                                                       00480000
@13      EQU   13                                                       00481000
@14      EQU   14                                                       00482000
@15      EQU   15                                                       00483000
SAVETREE EQU   @04                                                      00484000
PARMPTR  EQU   @02                                                      00485000
INDICT   EQU   @03                                                      00486000
R1       EQU   @01                                                      00487000
R13      EQU   @13                                                      00488000
R14      EQU   @14                                                      00489000
PARMLST  EQU   0                                                        00490000
SVADSET  EQU   PARMLST                                                  00491000
DATASET  EQU   PARMLST+4                                                00492000
TREEPTR  EQU   PARMLST+8                                                00493000
STEP     EQU   PARMLST+15                                               00494000
TREE     EQU   0                                                        00495000
TREE2    EQU   TREE                                                     00496000
FIRSTSVA EQU   TREE+4                                                   00497000
LASTWORD EQU   TREE+8                                                   00498000
CURRENT  EQU   TREE+12                                                  00499000
SWAPTR   EQU   TREE+16                                                  00500000
AREA     EQU   TREE+20                                                  00501000
AREA1    EQU   TREE+270                                                 00502000
AREA2    EQU   TREE+520                                                 00503000
AREA3    EQU   TREE+770                                                 00504000
ENDTREE  EQU   TREE+1020                                                00505000
DSENTRY  EQU   0                                                        00506000
STEP1    EQU   DSENTRY                                                  00507000
EXSHR1   EQU   DSENTRY+1                                                00508000
DSLGH1   EQU   DSENTRY+2                                                00509000
DATASETN EQU   DSENTRY+3                                                00510000
DATATREE EQU   0                                                        00511000
SVA      EQU   DATATREE                                                 00512000
STEP3    EQU   DATATREE+4                                               00513000
EXSHR    EQU   DATATREE+5                                               00514000
DSLGH    EQU   DATATREE+6                                               00515000
NEW      EQU   DATATREE+7                                               00516000
DSENQ    EQU   0                                                        00517000
NEW1     EQU   DSENQ+30                                                 00518000
DSENQTRY EQU   0                                                        00519000
STEP2    EQU   DSENQTRY                                                 00520000
EXSHR2   EQU   DSENQTRY+1                                               00521000
DSLGH2   EQU   DSENQTRY+2                                               00522000
DSNAME   EQU   DSENQTRY+3                                               00523000
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS    00524000
HEADER   EQU   DSENQ                                                    00525000
@NM00001 EQU   PARMLST+12                                               00526000
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS      00527000
@RF00008 EQU   @RC00005                                                 00528000
@RF00028 EQU   @RC00021                                                 00529000
@RF00036 EQU   @RC00021                                                 00530000
@PB00004 EQU   @EL00001                                                 00531000
@PB00003 EQU   @PB00004                                                 00532000
@PB00002 EQU   @PB00003                                                 00533000
@ENDDATA EQU   *                                                        00534000
         END   IEFDSTBL                                                 00535000
