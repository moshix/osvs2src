         TITLE 'IEFVAMP - AMP PARAMETER INTERPRETER                    *00001000
                        '                                               00002000
IEFNB902 CSECT ,                                                   0001 00003000
@MAINENT DS    0H                                                  0001 00004000
         USING *,@15                                               0001 00005000
         B     @PROLOG                                             0001 00006000
         DC    AL1(16)                                             0001 00007000
         DC    C'IEFNB902  76.254'                                 0001 00008000
         DROP  @15                                                      00009000
@PROLOG  STM   @14,@12,12(@13)                                     0001 00010000
         BALR  @12,0                                               0001 00011000
@PSTART  DS    0H                                                  0001 00012000
         USING @PSTART,@12                                         0001 00013000
         EJECT                                                          00014000
         EJECT                                                          00015000
         EJECT                                                          00016000
*        /* THIS IS THE ROOT SEGMENT OF IEFVAMP                     */  00017000
*    CALL INITIALZ;                         /* CORE FOR THE DATA    */  00018000
         BAL   @14,INITIALZ                                        0012 00019000
*                                           /* AREA MUST BE GOTTEN  */  00020000
*                                           /* AND THE REGISTERS    */  00021000
*                                           /* INITIALIZED          */  00022000
*    GEN(USING  @DATD,DATAPTR);             /* INITIALZ GETS DATA   */  00023000
         USING  @DATD,DATAPTR                                           00024000
*                                           /* CODE AND INIT DATAPTR*/  00025000
*                                           /* USING MUST BE PLACED */  00026000
*                                           /* AT START OF IEFVAMP  */  00027000
*    IF REG15 = 0 THEN                      /* CHECK FOR SUCCESS INI*/  00028000
         LTR   REG15,REG15                                         0014 00029000
         BNZ   @RF00014                                            0014 00030000
*      DO;                                  /* PROCEED IF OK GETCORE*/  00031000
*                                                                  0015 00032000
*        DO WHILE STRINGPT < PARMLENG;      /* CONTINUE PROCESSING  */  00033000
         B     @DE00016                                            0016 00034000
@DL00016 DS    0H                                                  0017 00035000
*                                           /* UNTIL END OF STRING  */  00036000
*          CALL GETWORD;                    /* GET A WORD FROM THE  */  00037000
         BAL   @14,GETWORD                                         0017 00038000
*                                           /* PARAMETER STRING     */  00039000
*                                                                  0018 00040000
*          IF LENGST = 0 THEN               /* IF 0 THEN A NULL WORD*/  00041000
         LTR   LENGST,LENGST                                       0018 00042000
         BNZ   @RF00018                                            0018 00043000
*                                           /* WAS DISCOVERED ,     */  00044000
*            DO;                            /* INDICATE ERROR TYPE  */  00045000
*                                           /* AND GOTO ERROR RTN   */  00046000
*              MSGCODE = 1;                 /* INVALID KEYWORD MSG  */  00047000
         MVC   MSGCODE(4,DATAPTR),@CF00045                         0020 00048000
*              CALL ERROR;                  /* BUILD ERROR MSG RTN  */  00049000
         BAL   @14,ERROR                                           0021 00050000
*            END;                           /* END PROCESSING FOR   */  00051000
*                                           /* THIS KEYWORD OF ,    */  00052000
*                                                                  0023 00053000
*          ELSE                             /* WORD FOUND, BEGIN    */  00054000
*            DO;                            /* NORMAL PROCESSING    */  00055000
         B     @RC00018                                            0023 00056000
@RF00018 DS    0H                                                  0024 00057000
*              ENTRYPTR = ADDR(TABLE1);     /* POINT TO MAIN KEYWORD*/  00058000
         LA    ENTRYPTR,TABLE1                                     0024 00059000
*                                           /* TABLE                */  00060000
*              CALL FINDKEY;                /* SEARCH TABLE FOR KEY */  00061000
         BAL   @14,FINDKEY                                         0025 00062000
*              IF FINDERR = '1'B THEN       /* IF END THEN NO KEY   */  00063000
         TM    FINDERR(DATAPTR),B'10000000'                        0026 00064000
         BNO   @RF00026                                            0026 00065000
*                DO;                        /* WAS FOUND IN TABLE   */  00066000
*                  CALL ERROR;              /* BUILD ERROR MSG RTN  */  00067000
         BAL   @14,ERROR                                           0028 00068000
*                END;                       /* END PROCESSING FOR   */  00069000
*                                           /* THIS KEYWORD         */  00070000
*              ELSE                         /* CHECKS FLAGS FOR TYPE*/  00071000
*                DO;                        /* OF PROCESSING REQUIRD*/  00072000
         B     @RC00026                                            0030 00073000
@RF00026 DS    0H                                                  0031 00074000
*                  IF SUBWORDS = '1'B   THEN/* KEYWORD HAVE KEYWORD */  00075000
         TM    SUBWORDS(ENTRYPTR),B'10000000'                      0031 00076000
         BNO   @RF00031                                            0031 00077000
*                    DO;                    /* PROCESS SUB KEYWORDS */  00078000
*                      ENTRYPTR = ENTCHAIN; /* GET SUB KEYS TABLE   */  00079000
         L     ENTRYPTR,ENTCHAIN(,ENTRYPTR)                        0033 00080000
*                      CALL GETWORD;        /* GET THE SUB KEYWORD  */  00081000
         BAL   @14,GETWORD                                         0034 00082000
*                      CALL FINDKEY;        /* CHECK IF DEFINED     */  00083000
         BAL   @14,FINDKEY                                         0035 00084000
*                      IF FINDERR= '1'B THEN/*                     0036 00085000
*                                             WAS KEY FOUND @Y30LSPS*/  00086000
         TM    FINDERR(DATAPTR),B'10000000'                        0036 00087000
         BNO   @RF00036                                            0036 00088000
*                        DO;                /* ERROR IF NOT FOUND   */  00089000
*                          CALL ERROR;      /* BUILT THE ERROR MSG  */  00090000
         BAL   @14,ERROR                                           0038 00091000
*                        END;               /* END IF NOT FOUND     */  00092000
*                                                                  0039 00093000
*                      ELSE                 /* IF A KEYWORD ENTRY   */  00094000
*                                           /* WAS FOUND, THE BIT IN*/  00095000
*                        DO;                /* THE JFCB FOR THIS KEY*/  00096000
         B     @RC00036                                            0040 00097000
@RF00036 DS    0H                                                  0041 00098000
*                                           /* WILL BE UPDATED      */  00099000
*                          IF OVERFLOW = '1'B   THEN/*             0041 00100000
*                                                     JFCB EXTENSION*/  00101000
         TM    OVERFLOW(ENTRYPTR),B'00000010'                      0041 00102000
         BNO   @RF00041                                            0041 00103000
*                            CALL ADDJFCB;  /* GET EXT IF JFCB OVER */  00104000
         BAL   @14,ADDJFCB                                         0042 00105000
*                          ELSE JFCBREG = JFCBPTR; /* USE JFCB IF OK*/  00106000
         B     @RC00041                                            0043 00107000
@RF00041 L     JFCBREG,JFCBPTR(,PARMPTR)                           0043 00108000
*                                           /* ORING IN OF A BIT IS */  00109000
*                                           /* THE ONLY TYPE OF OP  */  00110000
*                                           /* SUPPORTED            */  00111000
*                                           /* IF MORE THAN ONE KEY */  00112000
*                                           /* CAN BE SPECIFIED, IT */  00113000
*                                           /* IS HANDLED UNDER     */  00114000
*                                           /* POSITIONAL KEYWORDS  */  00115000
*                          WORKREG = JFCBREG + JFCBDISP -1; /*  ADDR*/  00116000
@RC00041 LR    WORKREG,JFCBREG                                     0044 00117000
         SLR   @09,@09                                             0044 00118000
         IC    @09,JFCBDISP(,ENTRYPTR)                             0044 00119000
         ALR   WORKREG,@09                                         0044 00120000
         BCTR  WORKREG,0                                           0044 00121000
*                                           /* IF BIT TO OR INTO    */  00122000
*                          GEN(OC  0(1,WORKREG),BYTEMASK(ENTRYPTR));    00123000
         OC  0(1,WORKREG),BYTEMASK(ENTRYPTR)                            00124000
*                                           /* THE BYTEMASK IN THE  */  00125000
*                                           /* ENTRY MUST BE ORED IN*/  00126000
*                                           /* TO THE JFCB          */  00127000
*                        END;               /* END VALID SUB KEYWORD*/  00128000
*                    END;                   /* END SUB KEYWORDS RTN */  00129000
*                                                                  0047 00130000
*                  ELSE                     /* CHECK FOR OR REQUEST */  00131000
*                    IF ORMASK = '1'B   THEN/* OR A BIT INTO JFCB RQ*/  00132000
         B     @RC00031                                            0048 00133000
@RF00031 TM    ORMASK(ENTRYPTR),B'01000000'                        0048 00134000
         BNO   @RF00048                                            0048 00135000
*                      DO;                  /* OR BITS INTO THE JFCB*/  00136000
*                        IF OVERFLOW = '1'B   THEN/*               0050 00137000
*                                                   JFCB EXTENSION  */  00138000
         TM    OVERFLOW(ENTRYPTR),B'00000010'                      0050 00139000
         BNO   @RF00050                                            0050 00140000
*                          CALL ADDJFCB;    /* GET EXT IF OVERFLOW  */  00141000
         BAL   @14,ADDJFCB                                         0051 00142000
*                        ELSE JFCBREG = JFCBPTR; /* USE JFCB IF OK  */  00143000
*                                                                  0052 00144000
         B     @RC00050                                            0052 00145000
@RF00050 L     JFCBREG,JFCBPTR(,PARMPTR)                           0052 00146000
*                        WORKREG = JFCBREG + JFCBDISP -1; /*   ADDR */  00147000
@RC00050 LR    WORKREG,JFCBREG                                     0053 00148000
         SLR   @09,@09                                             0053 00149000
         IC    @09,JFCBDISP(,ENTRYPTR)                             0053 00150000
         ALR   WORKREG,@09                                         0053 00151000
         BCTR  WORKREG,0                                           0053 00152000
*                                           /* OF BYTE TO OR INTO   */  00153000
*                        GEN(OC  0(1,WORKREG),BYTEMASK(ENTRYPTR)); 0054 00154000
         OC  0(1,WORKREG),BYTEMASK(ENTRYPTR)                            00155000
*                                           /* THE BYTEMASK IN THE  */  00156000
*                                           /* ENTRY MUST BE ORED IN*/  00157000
*                                           /* TO THE JFCB          */  00158000
*                      END;                 /* END OF OR REQUEST    */  00159000
*                                                                  0055 00160000
*                    ELSE                   /* CHECK IF MOVE REQUEST*/  00161000
*                      IF MOVECHAR = '1'B   THEN/*                 0056 00162000
*                                                 MOVE WORD TO JFCB */  00163000
         B     @RC00048                                            0056 00164000
@RF00048 TM    MOVECHAR(ENTRYPTR),B'00100000'                      0056 00165000
         BNO   @RF00056                                            0056 00166000
*                        DO;                /* GET CHARACTER AND MOV*/  00167000
*                          CALL GETWORD;    /* GET A WORD FROM STRNG*/  00168000
         BAL   @14,GETWORD                                         0058 00169000
*                          IF LENGST = 0 THEN     /* CHECK FOR NULL */  00170000
         LTR   LENGST,LENGST                                       0059 00171000
         BNZ   @RF00059                                            0059 00172000
*                            DO;            /* ERROR OF NULL WORD   */  00173000
*                              MSGCODE = 1;   /* NULL OR INVALID MSG*/  00174000
         MVC   MSGCODE(4,DATAPTR),@CF00045                         0061 00175000
*                              CALL ERROR;  /* BUILD THE ERROR MSG  */  00176000
         BAL   @14,ERROR                                           0062 00177000
*                            END;           /* END NULL PROCESSING  */  00178000
*                                                                  0063 00179000
*                          ELSE             /* MOVE 8 CHARATERS INTO*/  00180000
*                            DO;            /* JFCB OR JFCB EXTENSIO*/  00181000
         B     @RC00059                                            0064 00182000
@RF00059 DS    0H                                                  0065 00183000
*                              IF OVERFLOW = '1'B   THEN/*         0065 00184000
*                                                         JFCB EXT  */  00185000
         TM    OVERFLOW(ENTRYPTR),B'00000010'                      0065 00186000
         BNO   @RF00065                                            0065 00187000
*                                CALL ADDJFCB; /* GET EXT IF OFL    */  00188000
         BAL   @14,ADDJFCB                                         0066 00189000
*                              ELSE JFCBREG = JFCBPTR; /* USE JFCB  */  00190000
         B     @RC00065                                            0067 00191000
@RF00065 L     JFCBREG,JFCBPTR(,PARMPTR)                           0067 00192000
*                              JFCB(JFCBDISP:JFCBDISP+SIZE-1)=KEYBUF8;  00193000
@RC00065 SLR   @09,@09                                             0068 00194000
         IC    @09,JFCBDISP(,ENTRYPTR)                             0068 00195000
         ALR   @09,JFCBREG                                         0068 00196000
         BCTR  @09,0                                               0068 00197000
         SLR   @15,@15                                             0068 00198000
         IC    @15,SIZE(,ENTRYPTR)                                 0068 00199000
         BCTR  @15,0                                               0068 00200000
         EX    @15,@SM00739                                        0068 00201000
*                            END;           /* END VALID MVC        */  00202000
*                                           /* THE JFCB FROM THE    */  00203000
*                                           /* KEYWORD BUFFER       */  00204000
*                        END;               /* END OF MOVE CHAR PROC*/  00205000
*                                                                  0070 00206000
*                      ELSE                 /* CHECK IF VALUE       */  00207000
*                        IF CONVERT = '1'B   THEN/*                0071 00208000
*                                                  CONVERT TO BINARY*/  00209000
         B     @RC00056                                            0071 00210000
@RF00056 TM    CONVERT(ENTRYPTR),B'00010000'                       0071 00211000
         BNO   @RF00071                                            0071 00212000
*                          DO;              /* VALIDITY CHECK AND   */  00213000
*                            CALL GETWORD;  /* GET THE VALUE FROM ST*/  00214000
         BAL   @14,GETWORD                                         0073 00215000
*                            IF LENGST = 0 THEN    /* CHECK FOR NULL*/  00216000
         LTR   LENGST,LENGST                                       0074 00217000
         BNZ   @RF00074                                            0074 00218000
*                              DO;          /* ERROR OF NULL WORD   */  00219000
*                                MSGCODE = 1;   /* NULL INVALID MSG */  00220000
         MVC   MSGCODE(4,DATAPTR),@CF00045                         0076 00221000
*                                CALL ERROR; /* BUILD THE ERROR MSG */  00222000
         BAL   @14,ERROR                                           0077 00223000
*                              END;         /* END NULL PROCESSING  */  00224000
*                            ELSE CALL VALUE; /* CHECK CVB, AND MVC */  00225000
         B     @RC00074                                            0079 00226000
@RF00074 BAL   @14,VALUE                                           0079 00227000
*                          END;             /* END DECIMAL VALUE P  */  00228000
*                                                                  0080 00229000
*                        ELSE               /* CHECK IF POSITIONAL  */  00230000
*                          IF POSITKEY = '1'B   THEN/*             0081 00231000
*                                                      POSITIONL KEY*/  00232000
         B     @RC00071                                            0081 00233000
@RF00071 TM    POSITKEY(ENTRYPTR),B'00001000'                      0081 00234000
         BNO   @RF00081                                            0081 00235000
*                            CALL POSITINL; /* THE FOR PROCESSING   */  00236000
*                                                                  0082 00237000
         BAL   @14,POSITINL                                        0082 00238000
*                          ELSE             /* CHECK IF AND BITS OFF*/  00239000
*                            IF ANDIT = '1'B THEN/*                0083 00240000
*                                                  AND INDICATOR    */  00241000
         B     @RC00081                                            0083 00242000
@RF00081 TM    ANDIT(ENTRYPTR),B'00000001'                         0083 00243000
         BNO   @RF00083                                            0083 00244000
*                              DO;          /* AND THE BITS OFF     */  00245000
*                                WORKREG = JFCBPTR + JFCBDISP - 1; 0085 00246000
         SLR   WORKREG,WORKREG                                     0085 00247000
         IC    WORKREG,JFCBDISP(,ENTRYPTR)                         0085 00248000
         AL    WORKREG,JFCBPTR(,PARMPTR)                           0085 00249000
         BCTR  WORKREG,0                                           0085 00250000
*                             GEN(NC 0(1,WORKREG),BYTEMASK(ENTRYPTR));  00251000
         NC 0(1,WORKREG),BYTEMASK(ENTRYPTR)                             00252000
*                              END;         /* END IF AND BITS OFF  */  00253000
*                            ELSE;          /* NO MORE BITS DEFINED */  00254000
*                                                                  0088 00255000
@RF00083 DS    0H                                                  0089 00256000
*                END;                       /* END OF PROCESS IF IN */  00257000
@RC00081 DS    0H                                                  0089 00258000
@RC00071 DS    0H                                                  0089 00259000
@RC00056 DS    0H                                                  0089 00260000
@RC00048 DS    0H                                                  0089 00261000
@RC00031 DS    0H                                                  0090 00262000
*                                           /* THE KEYWORD TABLE    */  00263000
*                                                                  0090 00264000
*            END;                           /* END OF NORMAL PROCESS*/  00265000
@RC00026 DS    0H                                                  0091 00266000
*                                           /* FOR THIS JCL KEYWORD */  00267000
*                                                                  0091 00268000
*        END;                               /* END OF DO WHILE LOOP */  00269000
@RC00018 DS    0H                                                  0091 00270000
@DE00016 L     @09,STRINGS(,PARMPTR)                               0091 00271000
         CH    STRINGPT,PARMLENG(,@09)                             0091 00272000
         BL    @DL00016                                            0091 00273000
*        /* THIS LOOP WILL CONTINUE UNTIL THE ENTIRE STRING PASSED  */  00274000
*        /* TO THIS MODULE BY THE SCHEDULER HAS BEEN PROCESSED      */  00275000
*                                                                  0092 00276000
*        /* IF A JFCB EXTENSION HAS BEEN GOTTEN, THE JFCB TTR OFSET */  00277000
*        /* FOR THE TTR POINTER TO THE EXTENSION MUST BE SET IN LIST*/  00278000
*        IF OVERPTR ^= 0 THEN               /* IS THERE A EXTENSION */  00279000
         L     @09,OVERPTR(,PARMPTR)                               0092 00280000
         LTR   @09,@09                                             0092 00281000
         BZ    @RF00092                                            0092 00282000
*          JFCBOFST = ADDR(JFCAMPTR) - ADDR(INFMJFCB); /* JFCB FOR  */  00283000
         MVC   JFCBOFST(2,PARMPTR),@CH00737                        0093 00284000
*                                           /* TTR PTR TO EXTENSION */  00285000
*                                                                  0094 00286000
*        /* THE CORE GOTTEN DURING INITIALIZATION MUST BE FREED     */  00287000
*        LENGST = LENGTH(DATAREA);          /* GET LENGTH OF CORE   */  00288000
@RF00092 LA    LENGST,83                                           0094 00289000
*        WORKREG = RETCODE;                 /* SAVE IEFVAMP RET CODE*/  00290000
         L     WORKREG,RETCODE(,DATAPTR)                           0095 00291000
*        ENTRYPTR = SUBPONL;                /* GET SUBPOOL NUMBER   */  00292000
         SLR   ENTRYPTR,ENTRYPTR                                   0096 00293000
         IC    ENTRYPTR,SUBPONL(,PARMPTR)                          0096 00294000
*        GEN(FREEMAIN  R,LV=(LENGST),A=(DATAPTR),SP=(ENTRYPTR));   0097 00295000
         FREEMAIN  R,LV=(LENGST),A=(DATAPTR),SP=(ENTRYPTR)              00296000
*        REG15 = WORKREG;                   /* PUT RET CODE IN 15   */  00297000
         LR    REG15,WORKREG                                       0098 00298000
*                                           /* IF AN ERROR IS FOUND */  00299000
*                                           /* THE RETURN CODE IS 4 */  00300000
*                                           /* FOR NO ERROR IT IS 0 */  00301000
*                                                                  0099 00302000
*      END;                                 /* END IF INITIAL OK    */  00303000
*    ELSE;                                  /* NOTHING IF INIT   BAD*/  00304000
@RF00014 DS    0H                                                  0101 00305000
*    REG1 = PARMPTR;                        /* POINT TO PARM LIST   */  00306000
         LR    REG1,PARMPTR                                        0101 00307000
*    RETURN CODE(REG15);                     /* EXIT FROM IEFVAMP    */ 00308000
         L     @14,12(,@13)                                        0102 00309000
         LM    @00,@12,20(@13)                                     0102 00310000
         BR    @14                                                 0102 00311000
*        GEN(EJECT);                                               0103 00312000
*                                                                  0103 00313000
*                                                                  0103 00314000
         EJECT                                                          00315000
*ADDJFCB:         /* THE ADDJFCB INTERNAL PROCEDURE                 */  00316000
*PROC   OPTIONS(NOSAVEAREA,DONTSAVE,RETREG);                       0104 00317000
*                                                                  0104 00318000
         B     @PB00002                                            0104 00319000
ADDJFCB  DS    0H                                                  0105 00320000
*        /* THE ADDJFCB INTERNAL PROCEDURE IS CALLED TO PUT THE     */  00321000
*        /* ADDRESS OF AN AVAILABLE JFCB EXTENSION INTO JFCBREG     */  00322000
*        /* WHEN A JFCB EXTENSION IS TO BE UPDATED. IF NO JFCB      */  00323000
*        /* EXTENSION IS AVAILABLE, A GETMAIN IS ISSUED TO OBTAIN   */  00324000
*        /* A NEW ONE.                                              */  00325000
*                                                                  0105 00326000
*        JFCBREG = ADDR(OVERPTR);           /* GET FIRST EXTENSION  */  00327000
         LA    JFCBREG,OVERPTR(,PARMPTR)                           0105 00328000
*        DO WHILE OVERFULL = '1'B   &       /* FIND LAST EXTENSION  */  00329000
*                 JFCBCHAN ^= 0;            /* STOP AT LAST EXT     */  00330000
         B     @DE00106                                            0106 00331000
@DL00106 DS    0H                                                  0107 00332000
*          JFCBREG = JFCBCHAN;              /* GET NEXT EXTENSION   */  00333000
         L     JFCBREG,JFCBCHAN(,JFCBREG)                          0107 00334000
*        END;                               /* END OF FIND LAST     */  00335000
*                                                                  0108 00336000
@DE00106 TM    OVERFULL(JFCBREG),B'10000000'                       0108 00337000
         BNO   @DC00106                                            0108 00338000
         L     @09,JFCBCHAN(,JFCBREG)                              0108 00339000
         LTR   @09,@09                                             0108 00340000
         BNZ   @DL00106                                            0108 00341000
@DC00106 DS    0H                                                  0109 00342000
*        IF OVERFULL = '1'B   THEN          /* IS LAST ALSO FULL    */  00343000
         TM    OVERFULL(JFCBREG),B'10000000'                       0109 00344000
         BNO   @RF00109                                            0109 00345000
*          DO;                              /* GET NEW IF FULL      */  00346000
*            REG1 = ADDR(GETLIST);          /* POINT TO GETMAIN LIST*/  00347000
         LA    REG1,GETLIST(,DATAPTR)                              0111 00348000
*            WORKREG = ADDR(JFCBCHAN);      /* RESULT IN EXT CHAIN  */  00349000
         LR    WORKREG,JFCBREG                                     0112 00350000
*            GEN(GETMAIN A=(WORKREG),MF=(E,(1)),LV=180); /* GET EXT */  00351000
         GETMAIN A=(WORKREG),MF=(E,(1)),LV=180                          00352000
*            IF REG15 = 0 THEN              /* IF GETMAIN SUCCESSFUL*/  00353000
         SLR   @14,@14                                             0114 00354000
         CR    REG15,@14                                           0114 00355000
         BNE   @RF00114                                            0114 00356000
*              DO;                          /* POINT TO NEW EXTENSN */  00357000
*                JFCBREG = JFCBCHAN;        /* GET NEW GOTTEN EXT   */  00358000
         L     JFCBREG,JFCBCHAN(,JFCBREG)                          0116 00359000
*                JFCBCHAN = 0;              /* INDICATE THIS IS LAST*/  00360000
         ST    @14,JFCBCHAN(,JFCBREG)                              0117 00361000
*                OVERFULL = '0'B;           /* INDICATE EMPTY       */  00362000
         NI    OVERFULL(JFCBREG),B'01111111'                       0118 00363000
*              END;                         /* END SUCCESSFUL GET   */  00364000
*            ELSE RETCODE = 4;              /* NO CORE FOR NEW EXT  */  00365000
         B     @RC00114                                            0120 00366000
@RF00114 MVC   RETCODE(4,DATAPTR),@CF00083                         0120 00367000
*          END;                             /* END OF LAST WAS FULL */  00368000
*                                                                  0121 00369000
*        ELSE;                              /* LAST WAS NOT FULL, NO*/  00370000
@RF00109 DS    0H                                                  0123 00371000
*                                           /* GETMAIN NECESSARY    */  00372000
*        END   ADDJFCB;                     /* END OF THE PROCEDURE */  00373000
@EL00002 DS    0H                                                  0123 00374000
@EF00002 DS    0H                                                  0123 00375000
@ER00002 BR    @14                                                 0123 00376000
@PB00002 DS    0H                                                  0124 00377000
*                                           /* JFCBREG POINTS TO A  */  00378000
*                                           /* AVAILABLE EXTENSION  */  00379000
*                                                                  0124 00380000
*        GEN(EJECT);                                               0124 00381000
         EJECT                                                          00382000
*ERROR:           /* THE ERROR MESSAGE INTERNAL PROCEDURE           */  00383000
*PROC   OPTIONS(NOSAVEAREA,DONTSAVE,RETREG);                       0125 00384000
*                                                                  0125 00385000
         B     @PB00003                                            0125 00386000
ERROR    DS    0H                                                  0126 00387000
*        /* THE ERROR PROCEDURE IS CALLED WHENEVER AN ERROR IS      */  00388000
*        /* DISCOVERED. IT DOES A GETMAIN FOR 88 BYTES AND BUILDS   */  00389000
*        /* AN ERROR MESSAGE IN THE GOTTEN CORE. RETURN IS THEN     */  00390000
*        /* PASSED TO THE CALLER                                    */  00391000
*        /* THIS ROUTINE MAY CALL GETWORD AS AN INTERNAL PROCEDURE  */  00392000
*                                                                  0126 00393000
*        LINKSAV3 = REG14;                  /* SAVE THE RETURN REG  */  00394000
         ST    REG14,LINKSAV3(,DATAPTR)                            0126 00395000
*        REG1 = ADDR(GETLIST);              /* POINT TO GETMAIN LIST*/  00396000
         LA    REG1,GETLIST(,DATAPTR)                              0127 00397000
*        LENGST = LENGTH(MESSAGE);          /* GET LENGTH OF MSG    */  00398000
         LA    LENGST,88                                           0128 00399000
*        WORKREG = ADDR(RETURNS);           /* POINT TO RETURN AREA */  00400000
         LA    WORKREG,RETURNS(,DATAPTR)                           0129 00401000
*        GEN(GETMAIN A=(WORKREG),MF=(E,(1)),LV=(LENGST)); /* GET MSG*/  00402000
*                                                                  0130 00403000
         GETMAIN A=(WORKREG),MF=(E,(1)),LV=(LENGST)                     00404000
*        /* THE SYSTEM RETURNS A POINTER TO 88 BYTES OF CORE IN     */  00405000
*        /* RETURNS IF THE GETMAIN WAS SUCCESSFUL, OTHERWISE        */  00406000
*        /* REGISTER 15 CONTAINS A NON ZERO VALUE                   */  00407000
*                                                                  0131 00408000
*        IF REG15 = 0 THEN                  /* CHECK IF SUCCESSFUL  */  00409000
         LTR   REG15,REG15                                         0131 00410000
         BNZ   @RF00131                                            0131 00411000
*          DO;                              /* BUILD MSG IF OK      */  00412000
*            WORKREG = ADDR(JFCBPTR);       /* GET FIRST MSG FROM   */  00413000
         LA    WORKREG,JFCBPTR(,PARMPTR)                           0133 00414000
*                                           /* PARAMETER LIST       */  00415000
*            DO WHILE MSGCHAIN ^= 0;        /* FIND LAST ENTRY      */  00416000
         B     @DE00134                                            0134 00417000
@DL00134 DS    0H                                                  0135 00418000
*              WORKREG = MSGCHAIN;          /* CONTINUE DOWN CHAIN  */  00419000
         L     WORKREG,MSGCHAIN(,WORKREG)                          0135 00420000
*            END;                           /* REMAIN IN DO WHILE   */  00421000
@DE00134 SLR   @09,@09                                             0136 00422000
         C     @09,MSGCHAIN(,WORKREG)                              0136 00423000
         BNE   @DL00134                                            0136 00424000
*                                           /* LOOP UNTIL END       */  00425000
*            MSGCHAIN = RETURNS;            /* CHAIN NEW BUFFER TO  */  00426000
         L     @15,RETURNS(,DATAPTR)                               0137 00427000
         ST    @15,MSGCHAIN(,WORKREG)                              0137 00428000
*                                           /* PREVIOUS CHAIN       */  00429000
*            WORKREG = MSGCHAIN;            /* POINT TO NEW BUFFER  */  00430000
         LR    WORKREG,@15                                         0138 00431000
*            MSGCHAIN = 0;                  /* MAKE THIS BUFFER LAST*/  00432000
         ST    @09,MSGCHAIN(,WORKREG)                              0139 00433000
*            MSGLEN = LENGTH(MESSAGE);      /* PUT LENGTH IN MSG BUF*/  00434000
         MVC   MSGLEN(2,WORKREG),@CH00737                          0140 00435000
*            MSGZERO = 0;                   /* RESERVED FIELD ZERO  */  00436000
*                                                                  0141 00437000
         STH   @09,MSGZERO(,WORKREG)                               0141 00438000
*        /* CHECK FOR THE ERROR TYPE AND GET THE APPROPRIATE        */  00439000
*        /* SKELETON FOR THE MESSAGE                                */  00440000
*            MSGPREF = MSGP1;               /* GET IEFXXXI PREFIX   */  00441000
         MVC   MSGPREF(21,WORKREG),MSGP1                           0142 00442000
*            MSGNOTE = MSGP9;               /* GET STEP NOT EXECUTED*/  00443000
*                                                                  0143 00444000
         MVC   MSGNOTE(19,WORKREG),MSGP9                           0143 00445000
*            IF MSGCODE = 1 THEN            /* INVALID KEYWORD MSG  */  00446000
         CLC   MSGCODE(4,DATAPTR),@CF00045                         0144 00447000
         BNE   @RF00144                                            0144 00448000
*              DO;                          /* SETUP THE MSG        */  00449000
*                MSGWORD = KEYBUFER;        /* GET THE KEYWORD      */  00450000
         MVC   MSGWORD(9,WORKREG),KEYBUFER(DATAPTR)                0146 00451000
*                MSGNBR  = MSGNBR1;         /* GET THE MSG NUMBER   */  00452000
         MVC   MSGNBR(7,WORKREG),MSGNBR1                           0147 00453000
*                MSGMDLE = MSGMDL1;         /* GET INVALID MSG      */  00454000
         MVC   MSGMDLE(31,WORKREG),MSGMDL1                         0148 00455000
*              END;                         /* END OF THE INVALID   */  00456000
*                                           /* KEYWORD MSG PROCESS  */  00457000
*            ELSE                                                  0150 00458000
*              IF MSGCODE = 2 THEN          /* TOO LARGE VALUE MSG  */  00459000
         B     @RC00144                                            0150 00460000
@RF00144 CLC   MSGCODE(4,DATAPTR),@CF00104                         0150 00461000
         BNE   @RF00150                                            0150 00462000
*                DO;                        /* SETUP THE MSG        */  00463000
*                  MSGWORD = KEYWORD;       /* GET THE KEYWORD      */  00464000
         MVC   MSGWORD(9,WORKREG),KEYWORD(ENTRYPTR)                0152 00465000
*                  MSGNBR  = MSGNBR2;       /* GET THE MSG NUMBER   */  00466000
         MVC   MSGNBR(7,WORKREG),MSGNBR2                           0153 00467000
*                  MSGMDLE = MSGMDL2;       /* GET VALUE ERROR MSG  */  00468000
         MVC   MSGMDLE(31,WORKREG),MSGMDL2                         0154 00469000
*                  MSGVAL = KEYBUFER;       /* GET THE KEYWORD      */  00470000
         MVC   MSGVAL(9,WORKREG),KEYBUFER(DATAPTR)                 0155 00471000
*                END;                       /* END OF THE INVALID   */  00472000
*                                           /* KEYWORD MSG PROCESS  */  00473000
*              ELSE                                                0157 00474000
*                IF MSGCODE = 3 THEN        /* INVALID VALUE MSG    */  00475000
         B     @RC00150                                            0157 00476000
@RF00150 CLC   MSGCODE(4,DATAPTR),@CF00109                         0157 00477000
         BNE   @RF00157                                            0157 00478000
*                  DO;                      /* SETUP THE MSG        */  00479000
*                    MSGWORD = KEYWORD;     /* GET THE KEYWORD      */  00480000
         MVC   MSGWORD(9,WORKREG),KEYWORD(ENTRYPTR)                0159 00481000
*                    MSGNBR  = MSGNBR3;     /* GET THE MSG NUMBER   */  00482000
         MVC   MSGNBR(7,WORKREG),MSGNBR3                           0160 00483000
*                    MSGMDLE = MSGMDL3;     /* GET DECIMAL ERROR MSG*/  00484000
         MVC   MSGMDLE(31,WORKREG),MSGMDL3                         0161 00485000
*                  END;                     /* END OF THE INVALID   */  00486000
*                                           /* KEYWORD MSG PROCESS  */  00487000
*                ELSE                                              0163 00488000
*                  IF MSGCODE = 4 THEN      /* IF DUPLICATE MESSAGE */  00489000
         B     @RC00157                                            0163 00490000
@RF00157 CLC   MSGCODE(4,DATAPTR),@CF00083                         0163 00491000
         BNE   @RF00163                                            0163 00492000
*                    DO;                    /* BUILD THE DUP MSG    */  00493000
*                      MSGWORD = KEYWORD;   /* GET KEYWORD IN ERROR */  00494000
         MVC   MSGWORD(9,WORKREG),KEYWORD(ENTRYPTR)                0165 00495000
*                      MSGNBR = MSGNBR4;    /* PUT MSG NUMBER IN    */  00496000
         MVC   MSGNBR(7,WORKREG),MSGNBR4                           0166 00497000
*                      MSGMDLE = MSGMDL4;   /* GET TEXT OF MESSAGE  */  00498000
         MVC   MSGMDLE(31,WORKREG),MSGMDL4                         0167 00499000
*                    END;                   /* END DUP OR CONFLICT  */  00500000
*                  ELSE;                    /* MSG 5 NOT YET DEFINED*/  00501000
@RF00163 DS    0H                                                  0170 00502000
*          END;                             /* END OF MSG PROCESSING*/  00503000
*                                                                  0170 00504000
*        ELSE;                                                     0171 00505000
*                                                                  0171 00506000
@RF00131 DS    0H                                                  0172 00507000
*        /* THE ERROR KEYWORD AND PARAMETERS MUST BE FLUSHED        */  00508000
*        TEMPSAVE = PARENCNT;               /* SAVE START ( COUNT   */  00509000
@RC00131 L     @09,PARENCNT(,DATAPTR)                              0172 00510000
         ST    @09,TEMPSAVE(,DATAPTR)                              0172 00511000
*        DO WHILE STRING(STRINGPT-1) ^= ',' & /* SCAN FOR A ,       */  00512000
*                 STRINGPT < PARMLENG;      /* DO NOT EXCEED STRING */  00513000
         B     @DE00173                                            0173 00514000
@DL00173 DS    0H                                                  0174 00515000
*          CALL GETWORD;                    /* SCAN FOR A WORD      */  00516000
         BAL   @14,GETWORD                                         0174 00517000
*        END;                               /* END WHEN , FOUND     */  00518000
*                                                                  0175 00519000
@DE00173 L     @09,STRINGS(,PARMPTR)                               0175 00520000
         LR    @01,@09                                             0175 00521000
         ALR   @01,STRINGPT                                        0175 00522000
         CLI   STRING-2(@01),C','                                  0175 00523000
         BE    @DC00173                                            0175 00524000
         CH    STRINGPT,PARMLENG(,@09)                             0175 00525000
         BL    @DL00173                                            0175 00526000
@DC00173 DS    0H                                                  0176 00527000
*        DO WHILE PARENCNT > TEMPSAVE &     /* FIND TERMINATING )   */  00528000
*                 STRINGPT < PARMLENG;      /* DO NOT EXCEED STRING */  00529000
         B     @DE00176                                            0176 00530000
@DL00176 DS    0H                                                  0177 00531000
*          CALL GETWORD;                    /* SCAN FOR A WORD      */  00532000
         BAL   @14,GETWORD                                         0177 00533000
*        END;                               /* THE ERROR HAS BEEN   */  00534000
@DE00176 L     @09,PARENCNT(,DATAPTR)                              0178 00535000
         C     @09,TEMPSAVE(,DATAPTR)                              0178 00536000
         BNH   @DC00176                                            0178 00537000
         L     @09,STRINGS(,PARMPTR)                               0178 00538000
         CH    STRINGPT,PARMLENG(,@09)                             0178 00539000
         BL    @DL00176                                            0178 00540000
@DC00176 DS    0H                                                  0179 00541000
*                                           /* FLUSHED FROM STRING  */  00542000
*        RETCODE = 4;                       /* INDICATE THAT A ERROR*/  00543000
         MVC   RETCODE(4,DATAPTR),@CF00083                         0179 00544000
*                                           /* HAS OCCURED IN THE   */  00545000
*                                           /* AMP JCL PROCESSING   */  00546000
*                                                                  0180 00547000
*        REG14 = LINKSAV3;                  /* RESTORE RETURN REG   */  00548000
         L     REG14,LINKSAV3(,DATAPTR)                            0180 00549000
*        END ERROR;                         /* END OF THIS INTERNAL */  00550000
@EL00003 DS    0H                                                  0181 00551000
@EF00003 DS    0H                                                  0181 00552000
@ER00003 BR    @14                                                 0181 00553000
@PB00003 DS    0H                                                  0182 00554000
*                                           /* PROCEDURE            */  00555000
*        GEN(EJECT);                                               0182 00556000
*                                                                  0182 00557000
         EJECT                                                          00558000
*FINDKEY:         /* THE FINDKEY INTERNAL PROCEDURE                 */  00559000
*PROC    OPTIONS(NOSAVEAREA,DONTSAVE,RETREG);                      0183 00560000
*                                                                  0183 00561000
         B     @PB00004                                            0183 00562000
FINDKEY  DS    0H                                                  0184 00563000
*        /* THE FINDKEY PROCEDURE IS CALLED TO SEARCH THE INTERNAL  */  00564000
*        /* KEYWORD TABLES FOR A KEYWORD ENTRY CORESPONDING TO THE  */  00565000
*        /* WORD PASSED IN THE KEYBUFFER                            */  00566000
*                                                                  0184 00567000
*        FINDERR = '0'B;                    /*  RESET FINDKEY ERROR */  00568000
         NI    FINDERR(DATAPTR),B'01111111'                        0184 00569000
*        DO WHILE KEYBUFER ^= KEYWORD &     /* SCAN TABLE FOR WORD  */  00570000
*                 FLAGS1 ^= 'FF'X;          /* STOP AT END OF TABLE */  00571000
         B     @DE00185                                            0185 00572000
@DL00185 DS    0H                                                  0186 00573000
*          ENTRYPTR = ENTRYPTR + LENGTH(TENTRY);                   0186 00574000
         AL    ENTRYPTR,@CF00210                                   0186 00575000
*                                           /* THIS ROUTINE         */  00576000
*                                           /* INCREMENTS THROUGH   */  00577000
*                                           /* A TABLE UNTIL A MATCH*/  00578000
*                                           /* IS FOUND OR THE END  */  00579000
*                                           /* OF THE TABLE IS      */  00580000
*                                           /* REACHED              */  00581000
*        END;                               /* END OF THE SCAN LOOP */  00582000
*                                                                  0187 00583000
@DE00185 CLC   KEYBUFER(9,DATAPTR),KEYWORD(ENTRYPTR)               0187 00584000
         BE    @DC00185                                            0187 00585000
         CLI   FLAGS1(ENTRYPTR),X'FF'                              0187 00586000
         BNE   @DL00185                                            0187 00587000
@DC00185 DS    0H                                                  0188 00588000
*        IF FLAGS1 = 'FF'X THEN             /* CHECK IF NOT FOUND   */  00589000
         CLI   FLAGS1(ENTRYPTR),X'FF'                              0188 00590000
         BNE   @RF00188                                            0188 00591000
*          DO;                              /* SET MSG CODE AND ERRO*/  00592000
*            FINDERR = '1'B;                /* SET ERROR ON FIND    */  00593000
         OI    FINDERR(DATAPTR),B'10000000'                        0190 00594000
*            MSGCODE = 1;                   /* SET INVALID KEYWORD  */  00595000
         MVC   MSGCODE(4,DATAPTR),@CF00045                         0191 00596000
*          END;                             /* END IF NOT FOUND     */  00597000
*                                                                  0192 00598000
*        ELSE                               /* A KEYWORD WAS FOUND  */  00599000
*          DO;                              /* CHECK FOR CONFLICTS  */  00600000
         B     @RC00188                                            0193 00601000
@RF00188 DS    0H                                                  0194 00602000
*            TEMPFLD = DUPBITS & CONFLICT;  /* CHECK FOR DUP BITS   */  00603000
         MVC   TEMPFLD(4,DATAPTR),DUPBITS(DATAPTR)                 0194 00604000
         NC    TEMPFLD(4,DATAPTR),CONFLICT(ENTRYPTR)               0194 00605000
*            IF TEMPFLD = '00000000'X THEN  /* NO ERROR OR CONFLICT */  00606000
         CLC   TEMPFLD(4,DATAPTR),@CB00127                         0195 00607000
         BNE   @RF00195                                            0195 00608000
*              DO;                          /* NO CONFLICTS FOUND   */  00609000
*                TEMPFLD2 = COMPAT & DSORGS; /* COMPARE COMPAT DSORG*/  00610000
         MVC   TEMPFLD2(1,DATAPTR),COMPAT(DATAPTR)                 0197 00611000
         NC    TEMPFLD2(1,DATAPTR),DSORGS(ENTRYPTR)                0197 00612000
*                IF TEMPFLD2 ^= 0 THEN      /* ANY POSSIBLE DSORGS  */  00613000
         CLI   TEMPFLD2(DATAPTR),0                                 0198 00614000
         BE    @RF00198                                            0198 00615000
*                  DO;                      /* PROCEED IF POSSIBLE  */  00616000
*                    COMPAT = TEMPFLD2;     /* GET NEW COMPATIBLE   */  00617000
         MVC   COMPAT(1,DATAPTR),TEMPFLD2(DATAPTR)                 0200 00618000
*                    DUPBITS = DUPBITS | CONFLICT; /* OR NEW DUP BIT*/  00619000
         OC    DUPBITS(4,DATAPTR),CONFLICT(ENTRYPTR)               0201 00620000
*                  END;                     /* END IF STILL COMPATBL*/  00621000
*                ELSE                       /* NO POSSIBLE COMPATIBL*/  00622000
*                  DO;                      /* INDICATE ERROR       */  00623000
         B     @RC00198                                            0203 00624000
@RF00198 DS    0H                                                  0204 00625000
*                    MSGCODE = 4;           /* CONFLICT MSG  @Y30LSPS*/ 00626000
         MVC   MSGCODE(4,DATAPTR),@CF00083                         0204 00627000
*                    FINDERR = '1'B;        /* ERROR ON FIND KEY    */  00628000
         OI    FINDERR(DATAPTR),B'10000000'                        0205 00629000
*                  END;                     /* END IF NO COMPATIBLE */  00630000
*              END;                         /* END IF NO CONFLICTS  */  00631000
*                                                                  0207 00632000
*            ELSE                           /* A CONFLICT WAS FOUND */  00633000
*              DO;                          /* SETUP FOR CONFLICT ER*/  00634000
         B     @RC00195                                            0208 00635000
@RF00195 DS    0H                                                  0209 00636000
*                MSGCODE = 4;               /* DUP OR CONFLICT MSG  */  00637000
         MVC   MSGCODE(4,DATAPTR),@CF00083                         0209 00638000
*                FINDERR = '1'B;            /* ERROR ON FIND KEY    */  00639000
         OI    FINDERR(DATAPTR),B'10000000'                        0210 00640000
*              END;                         /* END IF DUP OR CONFLIC*/  00641000
*          END;                             /* END CHECK FOR CONFLCT*/  00642000
*        END FINDKEY;                       /* END OF THIS INTERNAL */  00643000
@EL00004 DS    0H                                                  0213 00644000
@EF00004 DS    0H                                                  0213 00645000
@ER00004 BR    @14                                                 0213 00646000
@PB00004 DS    0H                                                  0214 00647000
*                                           /* PROCEDURE     @Y30LSPS*/ 00648000
*        GEN(EJECT);                                               0214 00649000
*                                                                  0214 00650000
         EJECT                                                          00651000
*GETWORD:         /* THE GETWORD FROM THE STRING INTERNAL PROCEDURE */  00652000
*PROC    OPTIONS(NOSAVEAREA,DONTSAVE,RETREG);                      0215 00653000
*                                                                  0215 00654000
         B     @PB00005                                            0215 00655000
GETWORD  DS    0H                                                  0216 00656000
*        /* THE GETWORD PROCEDURE IS CALLED TO PUT THE NEXT WORD IN */  00657000
*        /* CHARACTER STRING PASSED TO IEFVAMP UPON ENTRY INTO THE  */  00658000
*        /* KEYBUFFER. THIS ROUTINE ALSO KEEPS TRACK OF PARENTHESES */  00659000
*                                                                  0216 00660000
*        LINKSAV4 = REG14;                  /* SAVE THE RETURN REG  */  00661000
         ST    REG14,LINKSAV4(,DATAPTR)                            0216 00662000
*        LENGST = 1;                        /* INITIALIZE TO FIRST  */  00663000
         LA    LENGST,1                                            0217 00664000
*        MSGCODE = 0;                       /* CLEAR ERROR CODE     */  00665000
         SLR   @09,@09                                             0218 00666000
         ST    @09,MSGCODE(,DATAPTR)                               0218 00667000
*        KEYBUFER = ' ';                    /* CLEAR THE KEYWORD BUF*/  00668000
         MVI   KEYBUFER+1(DATAPTR),C' '                            0219 00669000
         MVC   KEYBUFER+2(7,DATAPTR),KEYBUFER+1(DATAPTR)           0219 00670000
         MVI   KEYBUFER(DATAPTR),C' '                              0219 00671000
*        /* LEADING PARENTHESES MUST BE REMOVED AND A COUNT KEPT    */  00672000
*        DO WHILE STRING(STRINGPT) = '(';   /* SCAN AND COUNT 9     */  00673000
         B     @DE00220                                            0220 00674000
@DL00220 DS    0H                                                  0221 00675000
*          STRINGPT = STRINGPT + 1;         /* INCR STRING POINTER  */  00676000
         LA    @09,1                                               0221 00677000
         ALR   STRINGPT,@09                                        0221 00678000
*          PARENCNT = PARENCNT + 1;         /* INCR PARENTH COUNT   */  00679000
         AL    @09,PARENCNT(,DATAPTR)                              0222 00680000
         ST    @09,PARENCNT(,DATAPTR)                              0222 00681000
*        END;                               /* END OF LEADING       */  00682000
@DE00220 L     @09,STRINGS(,PARMPTR)                               0223 00683000
         ALR   @09,STRINGPT                                        0223 00684000
         CLI   STRING-1(@09),C'('                                  0223 00685000
         BE    @DL00220                                            0223 00686000
*                                           /* PARENTHESES REMOVAL  */  00687000
*                                                                  0224 00688000
*        /* CHARACTERS ARE PLACED IN THE KEYBUFFER UNTIL A          */  00689000
*        /* TERMINATING CHARACTER IS DISCOVERED OR UNTIL THE BUFFER */  00690000
*        /* IS FULL                                                 */  00691000
*        DO WHILE STRINGPT^> PARMLENG &     /* END OF STRING @ZA11651*/ 00692000
*                 STRING(STRINGPT) ^= ',' & /* A COMA IS A TERMINATE*/  00693000
*                 STRING(STRINGPT) ^= ')' & /* A PAREN TERMINATES   */  00694000
*                 STRING(STRINGPT) ^= '(' & /* SAME AS ABOVE        */  00695000
*                 STRING(STRINGPT) ^= '=';  /* = IS A LAST CHARACTER*/  00696000
*                                                                  0224 00697000
         B     @DE00224                                            0224 00698000
@DL00224 DS    0H                                                  0225 00699000
*          KEYBUF(LENGST) = STRING(STRINGPT); /* MOVE VALID CHARACTR*/  00700000
         LR    @09,DATAPTR                                         0225 00701000
         ALR   @09,LENGST                                          0225 00702000
         L     @01,STRINGS(,PARMPTR)                               0225 00703000
         ALR   @01,STRINGPT                                        0225 00704000
         MVC   KEYBUF-1(1,@09),STRING-1(@01)                       0225 00705000
*          STRINGPT = STRINGPT + 1;         /* INCR STRING POINTER  */  00706000
         LA    @09,1                                               0226 00707000
         ALR   STRINGPT,@09                                        0226 00708000
*          LENGST = LENGST + 1;             /* INCR BUFFER INDEX    */  00709000
         ALR   LENGST,@09                                          0227 00710000
*          IF LENGST > LENGTH(KEYBUFER) THEN /* CHECK FOR FULL BUFER*/  00711000
         LA    @15,9                                               0228 00712000
         CR    LENGST,@15                                          0228 00713000
         BNH   @RF00228                                            0228 00714000
*            DO;                            /* ERROR MSG IF TOO LONG*/  00715000
*              MSGCODE = 1;                 /* KEYWORD TOO LONG MSG */  00716000
         ST    @09,MSGCODE(,DATAPTR)                               0230 00717000
*              LENGST = LENGTH(KEYBUFER);   /* REUSE LAST CHAR CONT */  00718000
         LR    LENGST,@15                                          0231 00719000
*            END;                           /* END OF TOO LONG WORD */  00720000
*                                                                  0232 00721000
*          ELSE;                                                   0233 00722000
@RF00228 DS    0H                                                  0234 00723000
*        END;                               /* END OF STRING SCAN   */  00724000
@DE00224 L     @09,STRINGS(,PARMPTR)                               0234 00725000
         CH    STRINGPT,PARMLENG(,@09)                             0234 00726000
         BH    @DC00224                                            0234 00727000
         LR    @01,@09                                             0234 00728000
         ALR   @01,STRINGPT                                        0234 00729000
         CLI   STRING-1(@01),C','                                  0234 00730000
         BE    @DC00224                                            0234 00731000
         LR    @01,@09                                             0234 00732000
         ALR   @01,STRINGPT                                        0234 00733000
         CLI   STRING-1(@01),C')'                                  0234 00734000
         BE    @DC00224                                            0234 00735000
         LR    @01,@09                                             0234 00736000
         ALR   @01,STRINGPT                                        0234 00737000
         CLI   STRING-1(@01),C'('                                  0234 00738000
         BE    @DC00224                                            0234 00739000
         ALR   @09,STRINGPT                                        0234 00740000
         CLI   STRING-1(@09),C'='                                  0234 00741000
         BNE   @DL00224                                            0234 00742000
@DC00224 DS    0H                                                  0235 00743000
*        IF STRINGPT ^> PARMLENG &          /* END OF PARMS @ZA11651*/  00744000
*           STRING(STRINGPT) = '=' THEN     /* STOP ON = FOR KEYWORD*/  00745000
         L     @09,STRINGS(,PARMPTR)                               0235 00746000
         CH    STRINGPT,PARMLENG(,@09)                             0235 00747000
         BH    @RF00235                                            0235 00748000
         ALR   @09,STRINGPT                                        0235 00749000
         CLI   STRING-1(@09),C'='                                  0235 00750000
         BNE   @RF00235                                            0235 00751000
*          DO;                              /* = IS PART OF THIS WRD*/  00752000
*            KEYBUF(LENGST) = '=';          /* PUT == IN BUFFER     */  00753000
         LR    @09,DATAPTR                                         0237 00754000
         ALR   @09,LENGST                                          0237 00755000
         MVI   KEYBUF-1(@09),C'='                                  0237 00756000
*            LENGST = LENGST + 1;           /* THIS IS PART OF LENG */  00757000
         AL    LENGST,@CF00045                                     0238 00758000
*          END;                             /* END KEYWORD= PROCESS */  00759000
*        ELSE;                                                     0240 00760000
@RF00235 DS    0H                                                  0241 00761000
*        DO WHILE STRINGPT ^> PARMLENG &    /* END OF STRING @ZA11651*/ 00762000
*                 STRING(STRINGPT) = ')';   /* SCAN AND COUNT TRAILING  00763000
*                                              PARENTHESES.  @ZA11651*/ 00764000
         B     @DE00241                                            0241 00765000
@DL00241 DS    0H                                                  0242 00766000
*          STRINGPT = STRINGPT + 1;         /* INCR STRING POINTER  */  00767000
         AL    STRINGPT,@CF00045                                   0242 00768000
*          PARENCNT = PARENCNT - 1;         /* DECREMENT ) COUNT    */  00769000
         L     @09,PARENCNT(,DATAPTR)                              0243 00770000
         BCTR  @09,0                                               0243 00771000
         ST    @09,PARENCNT(,DATAPTR)                              0243 00772000
*        END;                               /* END OF TRAILING )    */  00773000
*                                                                  0244 00774000
@DE00241 L     @09,STRINGS(,PARMPTR)                               0244 00775000
         CH    STRINGPT,PARMLENG(,@09)                             0244 00776000
         BH    @DC00241                                            0244 00777000
         ALR   @09,STRINGPT                                        0244 00778000
         CLI   STRING-1(@09),C')'                                  0244 00779000
         BE    @DL00241                                            0244 00780000
@DC00241 DS    0H                                                  0245 00781000
*        STRINGPT = STRINGPT + 1;       /* INCR PAST WORD IN STRING */  00782000
         LA    @09,1                                               0245 00783000
         ALR   STRINGPT,@09                                        0245 00784000
*        /* IF AN ERROR OCCURED, THE LENGTH IS SET TO ZERO, IF NOT  */  00785000
*        /* THEN THE LENGTH IS  SET TO THE KEYWORD LENGTH           */  00786000
*        IF MSGCODE = 1 THEN                /* CHECK IF ERROR OCCUR */  00787000
         C     @09,MSGCODE(,DATAPTR)                               0246 00788000
         BNE   @RF00246                                            0246 00789000
*          LENGST = 0;                      /* ZERO LENGTH IF ERROR */  00790000
         SLR   LENGST,LENGST                                       0247 00791000
*        ELSE LENGST = LENGST - 1;          /* INDEX = LENGTH + 1   */  00792000
*                                                                  0248 00793000
         B     @RC00246                                            0248 00794000
@RF00246 BCTR  LENGST,0                                            0248 00795000
*        REG14 = LINKSAV4;                  /* RESTORE RETURN REG   */  00796000
@RC00246 L     REG14,LINKSAV4(,DATAPTR)                            0249 00797000
*        END GETWORD;                       /* THE END OF THE       */  00798000
@EL00005 DS    0H                                                  0250 00799000
@EF00005 DS    0H                                                  0250 00800000
@ER00005 BR    @14                                                 0250 00801000
@PB00005 DS    0H                                                  0251 00802000
*                                           /* GETWORD INTERNAL     */  00803000
*                                           /* PROCEDURE            */  00804000
*        GEN(EJECT);                                               0251 00805000
         EJECT                                                          00806000
*INITIALZ:       /* THE INITIALIZATION INTERNAL PROCEDURE           */  00807000
*PROC   OPTIONS(NOSAVEAREA,DONTSAVE,RETREG);                       0252 00808000
*                                                                  0252 00809000
         B     @PB00006                                            0252 00810000
INITIALZ DS    0H                                                  0253 00811000
*        /* THIS PROCEDURE DOES A GETMAIN FOR A DATA AREA AND       */  00812000
*        /* INITIALIZES THIS AREA AND ANY REGISTERS NEEDING INITIAL */  00813000
*                                                                  0253 00814000
*        PARMPTR = LISTPTR;                 /* GET PTR TO LIST      */  00815000
         L     PARMPTR,LISTPTR(,REG1)                              0253 00816000
*        TEMPLIST = GETMAIN2;               /* COND GETMAIN IN PARM */  00817000
         LA    @09,GETDATA                                         0254 00818000
         MVC   TEMPLIST(12,PARMPTR),GETMAIN2(@09)                  0254 00819000
*                                           /* LIST LAST 3 WORDS    */  00820000
*        LENGST = LENGTH(DATAREA);          /* GET LENGTH OF CORE   */  00821000
         LA    LENGST,83                                           0255 00822000
*        REG1 = ADDR(TEMPLIST);             /* POINT TO TEMP LIST   */  00823000
         LA    REG1,TEMPLIST(,PARMPTR)                             0256 00824000
*        WORKREG = SUBPONL;                 /* GET SUBPOOL NUMBER   */  00825000
         SLR   WORKREG,WORKREG                                     0257 00826000
         IC    WORKREG,SUBPONL(,PARMPTR)                           0257 00827000
*                     RESPECIFY (REG15,REG14) RESTRICTED ;         0258 00828000
*                                                                  0258 00829000
*        GEN(GETMAIN A=(13),MF=(E,(1)),LV=(LENGST),SP=(WORKREG));  0259 00830000
         GETMAIN A=(13),MF=(E,(1)),LV=(LENGST),SP=(WORKREG)             00831000
*        IF REG15 = 0 THEN                  /* CHECK IF GETCORE GOOD*/  00832000
         LTR   REG15,REG15                                         0260 00833000
         BNZ   @RF00260                                            0260 00834000
*          DO;                              /* INITIALIZE IF GOOD   */  00835000
*                                                                  0261 00836000
*        /* THE ADDRESS OF THE GOTTEN CORE IS RETURNED IN THE FIRST */  00837000
*        /* WORD OF THE SAVE AREA POINTED TO BY REG 13              */  00838000
*            DATAPTR = RETURNED;            /* GET THE GOTTEN CORE  */  00839000
         L     DATAPTR,RETURNED(,REG13)                            0262 00840000
*            DATAREA = DATAREA && DATAREA;  /* CLEAR GOTTEN CORE    */  00841000
         XC    DATAREA(83,DATAPTR),DATAREA(DATAPTR)                0263 00842000
*            GETLIST = TEMPLIST;            /* PUT GETMAIN LIST IN  */  00843000
         MVC   GETLIST(12,DATAPTR),TEMPLIST(PARMPTR)               0264 00844000
*                                           /* WORD AREA FOR MSG C  */  00845000
*            ZEROINIT = ZEROINIT && ZEROINIT; /* INIT ZERO AREAS    */  00846000
         XC    ZEROINIT(12,DATAPTR),ZEROINIT(DATAPTR)              0265 00847000
*            STRINGPT = 1;                  /* POINT TO START OF DAT*/  00848000
         LA    STRINGPT,1                                          0266 00849000
*          END;                             /* END SUCCESSFUL INIT  */  00850000
*        ELSE;                              /* NO INITIALIZATION ERR*/  00851000
@RF00260 DS    0H                                                  0269 00852000
*        TEMPLIST = TEMPLIST && TEMPLIST;   /* CLEAR TEMP LIST AREA */  00853000
         XC    TEMPLIST(12,PARMPTR),TEMPLIST(PARMPTR)              0269 00854000
*        COMPAT = 'FF'X;                    /* SETUP AS ALL COMPATBL*/  00855000
         MVI   COMPAT(DATAPTR),X'FF'                               0270 00856000
*        JFCORGAM = '1'B;                   /* INDICATE AMO ORGANIZ */  00857000
         L     @09,JFCBPTR(,PARMPTR)                               0271 00858000
         OI    JFCORGAM(@09),B'00001000'                           0271 00859000
*                     RESPECIFY (REG15,REG14) UNRESTRICTED;        0272 00860000
*        END INITIALZ;                      /* END OF THE IEFVAMP   */  00861000
@EL00006 DS    0H                                                  0273 00862000
@EF00006 DS    0H                                                  0273 00863000
@ER00006 BR    @14                                                 0273 00864000
@PB00006 DS    0H                                                  0274 00865000
*                                           /* INITIALIZATION PROC  */  00866000
*        GEN(EJECT);                                               0274 00867000
*                                                                  0274 00868000
         EJECT                                                          00869000
*POSITINL:         /* THE POSITIONAL PARAMETER INTERNAL PROCEDURE   */  00870000
*PROC    OPTIONS(NOSAVEAREA,DONTSAVE,RETREG);                      0275 00871000
*                                                                  0275 00872000
         B     @PB00007                                            0275 00873000
POSITINL DS    0H                                                  0276 00874000
*        /* THE POSITINL PROCEDURE PROCESSES KEYWORDS THAT CONTAIN  */  00875000
*        /* POSITIONAL PARAMETERS. IT MAY CALL  GETWORD, FINDKEY   */   00876000
*        /* VALUE AND ERROR AS INTERNAL PROCEDURES. UPON EXIT FROM  */  00877000
*        /* THIS PROCEDURE, THE JFCB HAS BEEN UPDATED BY THE KEYWORD*/  00878000
*        /* INFORMATION                                             */  00879000
*                                                                  0276 00880000
*        LINKSAV2 = REG14;                  /* SAVE RETURN REG      */  00881000
         ST    REG14,LINKSAV2(,DATAPTR)                            0276 00882000
*        NUMBER = 1;                        /* INIT TO FIRST POSITN */  00883000
         LA    @09,1                                               0277 00884000
         ST    @09,NUMBER(,DATAPTR)                                0277 00885000
*        PARENCNT = 1;                      /* INIT TO 1 FOR THE DO */  00886000
         ST    @09,PARENCNT(,DATAPTR)                              0278 00887000
*                                           /* WHILE LOOP. REMOVE IF*/  00888000
*                                           /* DO UNTIL POSSIBLE    */  00889000
*        ENTRYPTR = ENTCHAIN;               /* GET TABLE OF PARMS   */  00890000
*                                                                  0279 00891000
         L     ENTRYPTR,ENTCHAIN(,ENTRYPTR)                        0279 00892000
*        DO WHILE NUMBER ^> MAXPOS &        /* DO NOT EXCEED NUMBER */  00893000
*                 PARENCNT ^= 0;            /* STOP IF LAST ) REACH */  00894000
         B     @DE00280                                            0280 00895000
@DL00280 DS    0H                                                  0281 00896000
*          CALL GETWORD;                    /* GET A PARAMETER      */  00897000
         BAL   @14,GETWORD                                         0281 00898000
*          IF NUMBER = 1 THEN               /* DECR PARENCNT IF FIRS*/  00899000
         CLC   NUMBER(4,DATAPTR),@CF00045                          0282 00900000
         BNE   @RF00282                                            0282 00901000
*            PARENCNT = PARENCNT - 1;       /* ONE TIME DECREMENT   */  00902000
         L     @09,PARENCNT(,DATAPTR)                              0283 00903000
         BCTR  @09,0                                               0283 00904000
         ST    @09,PARENCNT(,DATAPTR)                              0283 00905000
*          IF LENGST ^= 0 THEN              /* CHECK FOR NULL PARM  */  00906000
@RF00282 LTR   LENGST,LENGST                                       0284 00907000
         BZ    @RF00284                                            0284 00908000
*            DO;                            /* PROCESS IF NOT NULL  */  00909000
*              IF CONVERT = '1'B   THEN     /* CHECK IF NUMBER      */  00910000
         TM    CONVERT(ENTRYPTR),B'00010000'                       0286 00911000
         BNO   @RF00286                                            0286 00912000
*                CALL VALUE;                /* CVB AND PUT IN JFCB  */  00913000
*                                                                  0287 00914000
         BAL   @14,VALUE                                           0287 00915000
*              ELSE                         /* CHECK FOR KEYWORDS   */  00916000
*                IF SUBWORDS = '1'B   THEN  /* KEYWORD HAVE KEYWORDS*/  00917000
         B     @RC00286                                            0288 00918000
@RF00286 TM    SUBWORDS(ENTRYPTR),B'10000000'                      0288 00919000
         BNO   @RF00288                                            0288 00920000
*                  DO;                      /* GET SUB-KEYWORD PROC */  00921000
*                    ENTSAVE = ENTRYPTR;    /* SAVE THIS POSITIONAL */  00922000
         ST    ENTRYPTR,ENTSAVE(,DATAPTR)                          0290 00923000
*                                           /* ENTRY POINTER        */  00924000
*                    ENTRYPTR = ENTCHAIN;   /* GET SUBKEY TABLE     */  00925000
         L     ENTRYPTR,ENTCHAIN(,ENTRYPTR)                        0291 00926000
*                    CALL FINDKEY;          /* SCAN TABLE FOR KEY   */  00927000
         BAL   @14,FINDKEY                                         0292 00928000
*                    IF FINDERR = '1'B  THEN/* IF END THEN NOT FOUND*/  00929000
         TM    FINDERR(DATAPTR),B'10000000'                        0293 00930000
         BNO   @RF00293                                            0293 00931000
*                      DO;                  /* BUILD AN ERROR MSG   */  00932000
*                        CALL ERROR;        /* MSG BUILD RTN        */  00933000
         BAL   @14,ERROR                                           0295 00934000
*                      END;                 /* END NOT FOUND KEY    */  00935000
*                                                                  0296 00936000
*                    ELSE                   /* A KEY WAS FOUND      */  00937000
*                      DO;                  /* PREPARE TO PUT BIT   */  00938000
         B     @RC00293                                            0297 00939000
@RF00293 DS    0H                                                  0298 00940000
*                        IF OVERFLOW = '1'B   THEN/*               0298 00941000
*                                                   JFCB EXT        */  00942000
         TM    OVERFLOW(ENTRYPTR),B'00000010'                      0298 00943000
         BNO   @RF00298                                            0298 00944000
*                          CALL ADDJFCB;    /* GET EXT IF JFCB OFL  */  00945000
         BAL   @14,ADDJFCB                                         0299 00946000
*                        ELSE JFCBREG = JFCBPTR; /* USE JFCB IF OK  */  00947000
         B     @RC00298                                            0300 00948000
@RF00298 L     JFCBREG,JFCBPTR(,PARMPTR)                           0300 00949000
*                        WORKREG = JFCBREG + JFCBDISP -1; /* A OF OR*/  00950000
@RC00298 LR    WORKREG,JFCBREG                                     0301 00951000
         SLR   @09,@09                                             0301 00952000
         IC    @09,JFCBDISP(,ENTRYPTR)                             0301 00953000
         ALR   WORKREG,@09                                         0301 00954000
         BCTR  WORKREG,0                                           0301 00955000
*                        GEN(OC  0(1,WORKREG),BYTEMASK(ENTRYPTR)); 0302 00956000
         OC  0(1,WORKREG),BYTEMASK(ENTRYPTR)                            00957000
*                      END;                 /* END OF OR REQUEST    */  00958000
*                                                                  0303 00959000
*                    ENTRYPTR = ENTSAVE;    /* RESTORE ENTRY PTR    */  00960000
@RC00293 L     ENTRYPTR,ENTSAVE(,DATAPTR)                          0304 00961000
*                  END;                     /* END SUB-KEYWORDS     */  00962000
*                                                                  0305 00963000
*              ELSE;                        /* ONLY TWO TYPES SUPPOR*/  00964000
@RF00288 DS    0H                                                  0307 00965000
*            END;                           /* END FOR NON NULL VAL */  00966000
*          ELSE;                            /* NOP IF LENGTH = 0    */  00967000
*                                                                  0308 00968000
@RF00284 DS    0H                                                  0309 00969000
*          NUMBER = NUMBER + 1;             /* INCR POSITION NUMBER */  00970000
@RC00284 LA    @09,1                                               0309 00971000
         AL    @09,NUMBER(,DATAPTR)                                0309 00972000
         ST    @09,NUMBER(,DATAPTR)                                0309 00973000
*          IF SAMENTRY = '0'B  THEN         /* CHECK IF INCR NECESRY*/  00974000
         TM    SAMENTRY(ENTRYPTR),B'00000100'                      0310 00975000
         BNZ   @RF00310                                            0310 00976000
*            ENTRYPTR = ENTRYPTR + LENGTH(TENTRY); /* GET NEXT ENTRY*/  00977000
         AL    ENTRYPTR,@CF00210                                   0311 00978000
*          ELSE;                            /* USE THE SAME TABLE   */  00979000
@RF00310 DS    0H                                                  0313 00980000
*                                           /* ENTRY. THIS IS USED  */  00981000
*                                           /* FOR MULTIPLE SUB KEY */  00982000
*                                           /* WORDS                */  00983000
*        END;                               /* END OF DO WHILE LOOP */  00984000
*                                                                  0313 00985000
@DE00280 L     @09,NUMBER(,DATAPTR)                                0313 00986000
         CH    @09,MAXPOS(,DATAPTR)                                0313 00987000
         BH    @DC00280                                            0313 00988000
         L     @09,PARENCNT(,DATAPTR)                              0313 00989000
         LTR   @09,@09                                             0313 00990000
         BNZ   @DL00280                                            0313 00991000
@DC00280 DS    0H                                                  0314 00992000
*        REG14 = LINKSAV2;                  /* RESTORE LINK REG     */  00993000
         L     REG14,LINKSAV2(,DATAPTR)                            0314 00994000
*        END POSITINL;                      /* END POSITION SUB RTN */  00995000
@EL00007 DS    0H                                                  0315 00996000
@EF00007 DS    0H                                                  0315 00997000
@ER00007 BR    @14                                                 0315 00998000
@PB00007 DS    0H                                                  0316 00999000
*        GEN(EJECT);                                               0316 01000000
         EJECT                                                          01001000
*VALUE:            /* THE VALUE OF A NUMBER IN A KEYWORD PROCEDURE  */  01002000
*PROC    OPTIONS(NOSAVEAREA,DONTSAVE,RETREG);                      0317 01003000
*                                                                  0317 01004000
         B     @PB00008                                            0317 01005000
VALUE    DS    0H                                                  0318 01006000
*        /* THE VALUE PROCEDURE IS CALLED WHEN THE KEYWORD CONTAINS */  01007000
*        /* A VALUE THAT MUST BE CONVERTED TO BINARY AND PLACED INTO*/  01008000
*        /* THE JFCB. THE VALUE IS CHECKED FOR VALIDITY, AND IF OK, */  01009000
*        /* IT IS PLACED INTO THE JFCB. THIS ROUTINE MAY CALL       */  01010000
*        /* ERROR AS AN INTERNAL PROCEDURE.                         */  01011000
*                                                                  0318 01012000
*        LINKSAV1 = REG14;                  /* SAVE THE RETURN REG  */  01013000
         ST    REG14,LINKSAV1(,DATAPTR)                            0318 01014000
*        WORKREG = 1;                       /* POSITION TO FIRST CHR*/  01015000
         LA    WORKREG,1                                           0319 01016000
*        MSGCODE = 0;                       /* INIT FOR NO ERROR    */  01017000
         SLR   @09,@09                                             0320 01018000
         ST    @09,MSGCODE(,DATAPTR)                               0320 01019000
*        IF LENGST > 8 THEN                 /* CHECK IF NO. TOO LARG*/  01020000
         C     LENGST,@CF00162                                     0321 01021000
         BNH   @RF00321                                            0321 01022000
*          MSGCODE = 2;                     /* TOO LARGE MSG CODE   */  01023000
*                                                                  0322 01024000
         MVC   MSGCODE(4,DATAPTR),@CF00104                         0322 01025000
*        DO WHILE WORKREG ^> LENGST;        /* PROCESS ONE VALUE    */  01026000
@RF00321 B     @DE00323                                            0323 01027000
@DL00323 DS    0H                                                  0324 01028000
*          IF KEYBUF(WORKREG) > 'F9'X |     /* CHECK GREATER 9      */  01029000
*             KEYBUF(WORKREG) < 'F0'X THEN  /* CHECK LESS THAN 0    */  01030000
         LR    @09,DATAPTR                                         0324 01031000
         ALR   @09,WORKREG                                         0324 01032000
         CLI   KEYBUF-1(@09),X'F9'                                 0324 01033000
         BH    @RT00324                                            0324 01034000
         LR    @09,DATAPTR                                         0324 01035000
         ALR   @09,WORKREG                                         0324 01036000
         CLI   KEYBUF-1(@09),X'F0'                                 0324 01037000
         BNL   @RF00324                                            0324 01038000
@RT00324 DS    0H                                                  0325 01039000
*              MSGCODE = 3;                 /* INDICATE CONVERT ERR */  01040000
         MVC   MSGCODE(4,DATAPTR),@CF00109                         0325 01041000
*          ELSE;                            /* NO ERROR IF VALID 0-9*/  01042000
*                                                                  0326 01043000
@RF00324 DS    0H                                                  0327 01044000
*          WORKREG = WORKREG + 1;           /* INCR INDEX TO NEXT C */  01045000
         AL    WORKREG,@CF00045                                    0327 01046000
*        END;                               /* END VALIDITY CHECK   */  01047000
*                                                                  0328 01048000
@DE00323 CR    WORKREG,LENGST                                      0328 01049000
         BNH   @DL00323                                            0328 01050000
*        IF MSGCODE = 0 THEN                /* IS THIS A VALID NO.  */  01051000
         L     @09,MSGCODE(,DATAPTR)                               0329 01052000
         LTR   @09,@09                                             0329 01053000
         BNZ   @RF00329                                            0329 01054000
*          DO;                              /* PACK AND CVB IF OK   */  01055000
*            WORKREG = LENGST - 1;          /* LENGTH-1 FOR PACK EX */  01056000
         LR    WORKREG,LENGST                                      0331 01057000
         BCTR  WORKREG,0                                           0331 01058000
*            GEN(EX  WORKREG,PACK);         /* PACK INTO DOUBLE AREA*/  01059000
         EX  WORKREG,PACK                                               01060000
*            GEN(CVB WORKREG,DOUBLE(DATAPTR)); /* GET BINARY VAL RG */  01061000
         CVB WORKREG,DOUBLE(DATAPTR)                                    01062000
*            DOUBLE4 = WORKREG;             /* USE CVB AREA AS WORK */  01063000
         ST    WORKREG,DOUBLE4(,DATAPTR)                           0334 01064000
*            IF SIZE = 3 THEN               /* CHECK 3 BYTE SIZE    */  01065000
         CLI   SIZE(ENTRYPTR),3                                    0335 01066000
         BNE   @RF00335                                            0335 01067000
*              DO;                          /* 3 BYTE SIZE CHECK    */  01068000
*                IF WORKREG > 8388607 THEN  /* MAX 3 BYTE VALUE     */  01069000
         C     WORKREG,@CF00166                                    0337 01070000
         BNH   @RF00337                                            0337 01071000
*                  MSGCODE = 2;             /* INDICATE TOO LARGE   */  01072000
         MVC   MSGCODE(4,DATAPTR),@CF00104                         0338 01073000
*              END;                         /* END 3 BYTE VALUE CHEK*/  01074000
*            ELSE                                                  0340 01075000
*              IF SIZE = 2 THEN             /* CHECK 2 BYTE SIZE    */  01076000
         B     @RC00335                                            0340 01077000
@RF00335 CLI   SIZE(ENTRYPTR),2                                    0340 01078000
         BNE   @RF00340                                            0340 01079000
*                DO;                        /* 2 BYTE SIZE CHECK    */  01080000
*                  IF WORKREG > 32767 THEN  /* MAX 2 BYTE VALUE     */  01081000
         C     WORKREG,@CF00167                                    0342 01082000
         BNH   @RF00342                                            0342 01083000
*                    MSGCODE = 2;           /* INDICATE TOO LARGE   */  01084000
         MVC   MSGCODE(4,DATAPTR),@CF00104                         0343 01085000
*                END;                       /* END 3 BYTE VALUE CHEK*/  01086000
*              ELSE;                                               0345 01087000
@RF00340 DS    0H                                                  0346 01088000
*            IF OVERFLOW = '1'B   THEN      /* JFCB EXTENSION CK    */  01089000
@RC00340 DS    0H                                                  0346 01090000
@RC00335 TM    OVERFLOW(ENTRYPTR),B'00000010'                      0346 01091000
         BNO   @RF00346                                            0346 01092000
*              CALL ADDJFCB;                /* GET EXTENSION IF YES */  01093000
         BAL   @14,ADDJFCB                                         0347 01094000
*            ELSE JFCBREG = JFCBPTR;        /* USE JFCB IF OK       */  01095000
         B     @RC00346                                            0348 01096000
@RF00346 L     JFCBREG,JFCBPTR(,PARMPTR)                           0348 01097000
*            JFCB(JFCBDISP:JFCBDISP+SIZE-1) = DOUBLE4(5-SIZE:SIZE);     01098000
@RC00346 SLR   @09,@09                                             0349 01099000
         IC    @09,JFCBDISP(,ENTRYPTR)                             0349 01100000
         ALR   @09,JFCBREG                                         0349 01101000
         BCTR  @09,0                                               0349 01102000
         SLR   @15,@15                                             0349 01103000
         IC    @15,SIZE(,ENTRYPTR)                                 0349 01104000
         LR    @14,@15                                             0349 01105000
         BCTR  @14,0                                               0349 01106000
         LCR   @15,@15                                             0349 01107000
         AL    @15,@CF00168                                        0349 01108000
         ALR   @15,DATAPTR                                         0349 01109000
         BCTR  @15,0                                               0349 01110000
         EX    @14,@SM00744                                        0349 01111000
*          END;                             /* END VALID DECIMAL #  */  01112000
*                                                                  0350 01113000
*        ELSE;                              /* PROC IF ERROR VALID  */  01114000
@RF00329 DS    0H                                                  0352 01115000
*          IF MSGCODE ^= 0 THEN             /* CHECK IF AN ERROR    */  01116000
         L     @09,MSGCODE(,DATAPTR)                               0352 01117000
         LTR   @09,@09                                             0352 01118000
         BZ    @RF00352                                            0352 01119000
*            CALL ERROR;                    /* INVALID NUMBER MSG   */  01120000
*                                                                  0353 01121000
         BAL   @14,ERROR                                           0353 01122000
*        REG14 = LINKSAV1;                  /* RESTORE LINK REG     */  01123000
@RF00352 L     REG14,LINKSAV1(,DATAPTR)                            0354 01124000
*        RETURN;                            /* RETURN TO CALLER     */  01125000
@EL00008 DS    0H                                                  0355 01126000
@EF00008 DS    0H                                                  0355 01127000
@ER00008 BR    @14                                                 0355 01128000
*PACK:   /* THIS INSTRUCTION IS USED BY AN ASSEMBLER EXECUTE INST   */  01129000
*        GEN(PACK  DOUBLE(8,DATAPTR),KEYBUFER(0,DATAPTR));  /* PACK */  01130000
PACK     PACK  DOUBLE(8,DATAPTR),KEYBUFER(0,DATAPTR)                    01131000
*        END  VALUE;                        /* END OF VALUE INTERNAL*/  01132000
         B     @EL00008                                            0357 01133000
@PB00008 DS    0H                                                  0358 01134000
*        GEN(EJECT);                                               0358 01135000
*                                                                  0358 01136000
         EJECT                                                          01137000
*        /* THE FOLLOWING REGISTERS ARE USED BY IEFVAMP             */  01138000
*        DCL                                /* DEFINE THE REGS      */  01139000
*         (REG1      REG(1)            ,    /* CONTAINS PARM LIST   */  01140000
*          REG13     REG(13)           ,    /* SAVE AREA REG        */  01141000
*          REG14     REG(14)           ,    /* SUBROUTINE LINK REG  */  01142000
*          REG15     REG(15)) PTR(31);      /* RETURN CODE REGISTER */  01143000
*                                                                  0359 01144000
*        DCL                                /* DEFINE RESTRICTED REG*/  01145000
*         (WORKREG   REG(2)  ,              /* GENERAL WORK REG     */  01146000
*          PARMPTR   REG(3)  ,              /* SAVES THE PARM LIST  */  01147000
*          LENGST    REG(4)  ,              /* LENGTH OF A WORD     */  01148000
*          DATAPTR   REG(5)  ,              /* PTR TO WORK AREA     */  01149000
*          STRINGPT  REG(6)  ,              /* INDEX FOR PARM STRING*/  01150000
*          ENTRYPTR  REG(7) ,               /* TABLE ENTRY POINTER  */  01151000
*          JFCBREG   REG(8) )               /* JFCB OR JFCB EXT PTR */  01152000
*                  RESTRICTED PTR(31);      /* RESTRICT POINTERS    */  01153000
*                                                                  0360 01154000
*        GEN(EJECT);                                               0361 01155000
*                                                                  0361 01156000
         EJECT                                                          01157000
*        /* THE FOLLOWING PARAMETER LIST IS PASSED TO IEFVAMP BY    */  01158000
*        /* THE SCHEDULER IN REGISTER 1 UPON ENTRY                  */  01159000
*                                                                  0362 01160000
*        DCL   LISTPTR PTR(31) BASED(REG1); /* POINTER TO PARMLIST  */  01161000
*                                                                  0362 01162000
*        DCL 1 PARMLIST  BASED(PARMPTR),    /* PTR KEPT IN PARMPTR  */  01163000
*              2 STRINGS     PTR(31),       /* PTR TO AMP CHAR STRNG*/  01164000
*              2 JFCBPTR     PTR(31),       /* PTR TO THE JFCB      */  01165000
*              2 TEMPLIST    CHAR(12) BDY(WORD), /* COND GETMAIN LST*/  01166000
*                3 MSGPTR    PTR(31),       /* PTR TO ERROR MSGS    */  01167000
*                3 OVERPTR   PTR(31),       /* OVERFLOW JFCB PTR    */  01168000
*                3 JFCBOFST  PTR(15),       /* JFCB OVERFLOW TTR DSP*/  01169000
*                3 OVEROFST  PTR(15),       /* OVERFLOW TTR DISPLACE*/  01170000
*              2 *           PTR(15),       /* RESERVED             */  01171000
*              2 OVERID      PTR(8),        /* OVERFLOW REC ID      */  01172000
*              2 SUBPONL     PTR(8);        /* SUBPOOL NUMBER FOR GT*/  01173000
*                                                                  0363 01174000
*        GEN(EJECT);                                               0364 01175000
*                                                                  0364 01176000
         EJECT                                                          01177000
*        /* THE FOLLOWING DCL DEFINES THE ERROR MESSAGE BUFFER      */  01178000
*                                                                  0365 01179000
*        DCL 1 MESSAGE BASED(WORKREG),      /* GOTTEN CORE PTR IN RG*/  01180000
*              2 MSGLEN      FIXED(15),     /* MESSAGE LENGTH       */  01181000
*              2 MSGZERO     PTR(15),       /* RESERVED             */  01182000
*              2 MSGCHAIN    PTR(31),       /* CHAIN TO NEXT MSG OR */  01183000
*              2 MSGBUF      CHAR(80),      /* TEXT OF ERROR MSG    */  01184000
*                3 MSGPREF   CHAR(21),      /* IEFXXXI KEYWORD PREFX*/  01185000
*                  4 MSGNBR  CHAR(7),       /* MSG NUMBER           */  01186000
*                3 MSGWORD   CHAR(9),       /* ERROR KEYWORD        */  01187000
*                3 MSGMDLE   CHAR(31),      /* UNIQUE PART OF MSG   */  01188000
*                  4 *       CHAR(7),       /* VALUE                */  01189000
*                  4 MSGVAL  CHAR(9),       /* VALUE IN ERROR       */  01190000
*                3 MSGNOTE   CHAR(19);      /* STEP NOT EXECUTED MSG*/  01191000
*                                                                  0365 01192000
*        /* THE FOLLOWING DCL DEFINES THE CHARACTER STRING          */  01193000
*        /* CONTAINING THE PARAMETERS SPECIFIED ON THE AMP KEYWORD  */  01194000
*                                                                  0366 01195000
*        DCL 1 DSTRING BASED(STRINGS),      /* BASED ON PARM LIST   */  01196000
*              2 PARMLENG    FIXED(15),     /* LENGTH OF STRING     */  01197000
*              2 STRING(*)   CHAR(1);       /* INDEXED STRING OF CHR*/  01198000
*                                                                  0366 01199000
*        /* THE FOLLOWING DCL DEFINES A 176 BYTE JFCB               */  01200000
*                                                                  0367 01201000
*        DCL   JFCB  CHAR(176) BASED(JFCBREG); /* BASED ON PARM LIST*/  01202000
*                                                                  0367 01203000
*        /* THE FOLLOWING DCL DEFINES THE 180 BYTE JFCB EXTENSION   */  01204000
*                                                                  0368 01205000
*        DCL 1 JFCBEXT BASED(JFCBREG),      /* ACCESSED BY JFCBREG  */  01206000
*              2 JFCBCHAN    PTR(31),       /* CHAIN TO NEXT OR 0   */  01207000
*              2 OVERFULL    BIT(1);        /* EXTENSION IS FULL    */  01208000
*                                                                  0368 01209000
*        DCL RETURNED PTR(31) BASED(REG13); /* RETURN GOT CORE PTR  */  01210000
*        GEN(EJECT);                                               0370 01211000
*                                                                  0370 01212000
         EJECT                                                          01213000
*        /* THE FOLLOWING WORK AREA IS IN CORE OBTAINED BY A GETMAIN*/  01214000
*        /* DURING THE INITIALIZATION PROCEDURE. IT IS POINTED TO BY*/  01215000
*        /* DATAPTR.                                                */  01216000
*                                                                  0371 01217000
*        DCL 1 DATAREA BASED(DATAPTR) BDY(DWORD), /* GETMAINED CORE */  01218000
*              2 DOUBLE      CHAR(8) BDY(DWORD), /* CVB WORK AREA   */  01219000
*                3 DOUBLE4   CHAR(4),      /* WORD CVB WORK AREA   */   01220000
*              2 GETLIST     CHAR(12) BDY(DWORD), /* GETMAIN LIST   */  01221000
*                3 MAXPOS    FIXED(15) BDY(HWORD), /* # OF KEYS     */  01222000
*              2 TEMPSAVE    PTR(31),       /* TEMPORARY SAVE AREA  */  01223000
*              2 ZEROINIT    CHAR(12) BDY(WORD),   /* INIT TO 0     */  01224000
*                3 RETURNS   PTR(31),       /* RETURN PTR TO CORE   */  01225000
*                3 MSGCODE   FIXED(31),     /* ERROR MSG NUMBER     */  01226000
*                3 RETCODE   FIXED(31),     /* IEFVAMP RETURN CODE  */  01227000
*              2 PARENCNT    FIXED(31),     /* NO. OF PARENTHESES   */  01228000
*              2 ENTSAVE     PTR(31),       /* TABLE ENTRY SAVE AREA*/  01229000
*              2 LINKSAV1    PTR(31),       /* LINKREG SAVE AREA    */  01230000
*              2 LINKSAV2    PTR(31),       /* LINKREG SAVE AREA    */  01231000
*              2 LINKSAV3    PTR(31),       /* LINKREG SAVE AREA    */  01232000
*              2 LINKSAV4    PTR(31),       /* LINKREG SAVE AREA    */  01233000
*              2 NUMBER      FIXED(31),     /* POSITIONAL PARM NO.  */  01234000
*              2 KEYBUFER    CHAR(9),       /* KEYWORD BUFFER       */  01235000
*                3 KEYBUF8   CHAR(8),       /* 8 BYTE SUBSET OF KEY */  01236000
*                  4 KEYBUF(*) CHAR(1),     /* INDEXED KEYWORD BYTE */  01237000
*              2 ERRBITS    BIT(8),         /* ERROR COND BITS      */  01238000
*                3 FINDERR  BIT(1),         /* ERROR ON FINDKEY RTN */  01239000
*              2 TEMPFLD      BIT(32),      /* AND AREA FOR DUP BITS*/  01240000
*                3 TEMPFLD2    BIT(8),      /* AREA FOR COMPATIBLE  */  01241000
*              2 DUPBITS      BIT(32),      /* DUP OR CONFLICT BITS */  01242000
*              2 COMPAT       BIT(8);       /* COMPATBL DSORG BITS  */  01243000
*                                                                  0371 01244000
*        GEN(EJECT);                                               0372 01245000
*                                                                  0372 01246000
         EJECT                                                          01247000
*        /* THE FOLLOWING DCL DEFINES AN ENTRY IN THE KEYWORD TABLE */  01248000
*                                                                  0373 01249000
*        DCL 1 TENTRY BASED(ENTRYPTR),      /* ENTRYPTR KEEP ADDR   */  01250000
*              2 FLAGS1      BIT(8),        /* TYPE OF KEY AND PROC */  01251000
*                3 SUBWORDS  BIT(1),        /* KEYWORD HAS SUB KEYS */  01252000
*                3 ORMASK    BIT(1),        /* OR BITS INTO JFCB    */  01253000
*                3 MOVECHAR  BIT(1),        /* MOVE WORD INTO JFCB  */  01254000
*                3 CONVERT   BIT(1),        /* CVB DECIMAL TO BINARY*/  01255000
*                3 POSITKEY  BIT(1),        /* POSITIONAL PARMS     */  01256000
*                3 SAMENTRY  BIT(1),        /* DO NOT INCR POS ENTRY*/  01257000
*                3 OVERFLOW  BIT(1),        /* JFCB EXT NEEDED      */  01258000
*                3 ANDIT     BIT(1),        /* AND BITS OFF  @Y30LSPS*/ 01259000
*              2 KEYWORD     CHAR(9),       /* KEYWORD FOR THIS ENTY*/  01260000
*              2 BYTEMASK    BIT(8),        /* BITS TO OR INTO JFCB */  01261000
*                3 SIZE      PTR(8),        /* SIZE OF FIELD IF CVB */  01262000
*              2 JFCBDISP    PTR(8),        /* DISPLACEMENT IN JFCB */  01263000
*                3 MAXKEYS   PTR(8),        /* MAX NO. KEY IF SUBWDS*/  01264000
*              2 CONFLICT    BIT(32),       /* DUPLICATE OF CONFLICT*/  01265000
*                3 BUFSP     BIT(1),        /* BUFSP IS A DUPLICATE */  01266000
*                3 BUFND     BIT(1),        /* BUFND IS A DUPLICATE */  01267000
*                3 BUFNI     BIT(1),        /* BUFNI IS A DUPLICATE */  01268000
*                3 STRNO     BIT(1),        /* STRNO IS A DUPLICATE */  01269000
*                3 SYNAD     BIT(1),        /* SYNAD IS A DUPLICATE */  01270000
*                3 CROPS     BIT(1),        /* CROPS IS A DUPLICATE */  01271000
*                3 RECFM     BIT(1),        /* RECFM IS A DUPLICATE */  01272000
*                3 AMORG     BIT(1),        /* AMORG IS A DUPLICATE */  01273000
*                3 TRACE     BIT(1),        /* TRACE IS A DUPLICATE */  01274000
*                3 OPTCD     BIT(1),        /* OPTCD IS A DUPLICATE */  01275000
*                3 *         BIT(22),       /* RESERVED BITS @Y30LSPS*/ 01276000
*              2 DSORGS      BIT(8),        /* REQ DSORGS BIT       */  01277000
*                3 VSAM      BIT(1),        /* COMPATIBLE WITH VSAM */  01278000
*              2 *           BIT(24),       /* RESERVED FOR EXPANS  */  01279000
*              2 ENTCHAIN    PTR(31) BDY(WORD); /* CHAIN PTR IF SUB */  01280000
*                                                                  0373 01281000
*        GEN(EJECT);                                               0374 01282000
*                                                                  0374 01283000
         EJECT                                                          01284000
*        /* THE FOLLOWING DECLARES ARE LOCATED AT THE END OF THIS   */  01285000
*        /* MODULE. IF THEY BECOME TO LARGE THEY CAN BE PLACED INTO */  01286000
*        /* A SEPARATE CSECT.                                       */  01287000
*                                                                  0375 01288000
*        DCL MSGP1 CHAR(21) INIT            /* PREFIX FOR ERROR MSG */  01289000
*         ('IEFXXXI AMP KEYWORD ');                                0375 01290000
*                                                                  0375 01291000
*        DCL MSGP9 CHAR(19) INIT            /* END OF ERROR MSG     */  01292000
*         (' STEP NOT EXECUTED ');                                 0376 01293000
*                                                                  0376 01294000
*        DCL MSGMDL1 CHAR(31) INIT          /* INVALID KEYWORD MSG  */  01295000
*         (' IS INVALID ');                                        0377 01296000
*                                                                  0377 01297000
*        DCL MSGMDL2 CHAR(31) INIT          /* VALUE ERROR MSG      */  01298000
*         (' VALUE            IS TOO LARGE ');                     0378 01299000
*                                                                  0378 01300000
*        DCL MSGMDL3 CHAR(31) INIT          /* NON DECIMAL ERROR MSG*/  01301000
*         (' REQUIRES A DECIMAL VALUE ');                          0379 01302000
*                                                                  0379 01303000
*        DCL MSGMDL4 CHAR(31) INIT          /* DUPLICATE OR CONFLICT*/  01304000
*          ('DUPLICATE OR CONFLICTING PARM');              /*@Y30LSPS*/ 01305000
*                                                                  0380 01306000
*        DCL MSGNBR1 CHAR(7) INIT           /* MESSAGE NUMBER       */  01307000
*         ('IEF447I');                                             0381 01308000
*                                                                  0381 01309000
*        DCL MSGNBR2 CHAR(7) INIT           /* MESSAGE NUMBER       */  01310000
*         ('IEF448I');                                             0382 01311000
*                                                                  0382 01312000
*        DCL MSGNBR3 CHAR(7) INIT           /* MESSAGE NUMBER       */  01313000
*         ('IEF449I');                                             0383 01314000
*                                                                  0383 01315000
*        DCL MSGNBR4 CHAR(7) INIT           /* DUPLICATE OR CONFLICT*/  01316000
*          ('IEF175I');                                    /*@Y30LSPS*/ 01317000
*                                                                  0384 01318000
*        GEN(EJECT);                                               0385 01319000
*                                                                  0385 01320000
*                                                                  0385 01321000
         EJECT                                                          01322000
*/* **************************************************************** */ 01323000
*/*                                                                  */ 01324000
*/*                    JOB FILE CONTROL BLOCK                        */ 01325000
*/*                                                                  */ 01326000
*/*  OS/VS2 RELEASE 4, 06/24/75, LEVEL=1                             */ 01327000
*/*                                                                  */ 01328000
*/*  METHOD OF ACCESS                                                */ 01329000
*/*      BAL  - A DSECT CARD SHOULD PRECEDE MACRO CALL.  USING ON    */ 01330000
*/*             INFMJFCB GIVES ADDRESSABILITY FOR ALL SYMBOLS.       */ 01331000
*/*      PL/S - DCL JFCBPTR PTR                                      */ 01332000
*/*                                                                  */ 01333000
*/*  F.E.'S                                                          */ 01334000
*/*      MICROFICHE LISTING - IEFJFCBN                               */ 01335000
*/*                                                                  */ 01336000
*/*  DEVELOPERS                                                      */ 01337000
*/*      BAL LISTING  - SPECIFY LIST=YES ON MACRO CALL.              */ 01338000
*/*      PL/S LISTING - SPECIFY %IHALIST='YES' BEFORE INCLUDE.       */ 01339000
*/*                                                                  */ 01340000
*/*      FOR INTEGRATION A LISTING SHOULD NOT BE REQUESTED.          */ 01341000
*/* **************************************************************** */ 01342000
*                                                                  0386 01343000
*DECLARE                                                           0386 01344000
*  1 INFMJFCB BASED(JFCBPTR) BDY(WORD),                            0386 01345000
*   2 JFCBDSNM CHAR(44) BDY(WORD), /* DATA SET NAME                  */ 01346000
*    3 JFCBQNAM CHAR(8) BDY(WORD), /* PROCESS QUEUE NAME SPECIFIED BY   01347000
*                                     THE QNAME KEYWORD  (TCAM)      */ 01348000
*   2 JFCBELNM CHAR(8) BDY(WORD),  /* ELEMENT NAME OR RELATIVE     0386 01349000
*                                     GENERATION NUMBER.  TYPE OF  0386 01350000
*                                     AREA (INDEX, PRIME OR OVERFLOW)   01351000
*                                     FOR AN INDEXED SEQUENTIAL DATA    01352000
*                                     SET ONLY.                      */ 01353000
*    3 JFCIPLTX CHAR(7) BDY(WORD), /* MODULE NAME OF NETWORK CONTROL    01354000
*                                     PROGRAM  (TCAM)          ICB391*/ 01355000
*   2 JFCBTSDM BIT(8),             /* JOB MANAGEMENT/DATA MANAGEMENT    01356000
*                                     INTERFACE                      */ 01357000
*    3 JFCCAT   BIT(1),            /* DATA SET IS CATALOGED          */ 01358000
*    3 JFCVSL   BIT(1),            /* VOLUME SERIAL LIST HAS BEEN  0386 01359000
*                                     CHANGED                        */ 01360000
*    3 JFCSDS   BIT(1),            /* DATA SET IS A SYSIN OR SYSOUT     01361000
*                                     DATA SET                       */ 01362000
*    3 JFCTTR   BIT(1),            /* A JOB STEP IS TO BE RESTARTED.    01363000
*                                     USE JFCBOTTR INSTEAD OF      0386 01364000
*                                     DS1LSTAR FIELD TO REPOSITION 0386 01365000
*                                     DATA SET IF AUTOMATIC STEP   0386 01366000
*                                     RESTART OCCURS.  (THIS JOB HAD    01367000
*                                     ABEND PROCESSING FOR A DATA SET   01368000
*                                     OPENED FOR MOD.)               */ 01369000
*    3 JFCNWRIT BIT(1),            /* DO NOT WRITE BACK THE JFCB   0386 01370000
*                                     DURING OPEN PROCESSING         */ 01371000
*    3 JFCNDSCB BIT(1),            /* DO NOT MERGE DSCB OR LABEL   0386 01372000
*                                     FIELDS INTO THIS JFCB          */ 01373000
*    3 JFCNDCB  BIT(1),            /* DO NOT MERGE DCB FIELDS INTO 0386 01374000
*                                     THIS JFCB                      */ 01375000
*    3 JFCPAT   BIT(1),            /* THE PATTERNING DSCB IS COMPLETE*/ 01376000
*   2 JFCBDSCB CHAR(3) BDY(WORD,2),/* TTR ADDRESS OF THE FORMAT 1  0386 01377000
*                                     DSCB FOR DATA SET PART ON THE     01378000
*                                     FIRST VOLUME OF THE DATA SET 0386 01379000
*                                                              ICB398*/ 01380000
*   2 JFCFCBID CHAR(4) BDY(WORD),  /* FORMS CONTROL BUFFER IMAGE   0386 01381000
*                                     IDENTIFICATION FOR THE 3211  0386 01382000
*                                     PRINTER OR DATA PROTECTION   0386 01383000
*                                     IMAGE IDENTIFICATION FOR THE 0386 01384000
*                                     3525 CARD PUNCH WITH THE READ     01385000
*                                     AND PRINT FEATURES OR FORMAT 0386 01386000
*                                     RECORD ID                MDC007*/ 01387000
*    3 JFCBFRID CHAR(4) BDY(WORD), /* LAST 4 CHARACTERS OF A PDS   0386 01388000
*                                     MEMBER TO BE USED IN THE     0386 01389000
*                                     INTERPRETATION OF DOCUMENTS  0386 01390000
*                                     READ BY 3886 DEVICE FOR THIS 0386 01391000
*                                     STEP                     MDC024*/ 01392000
*     4 JFCAMCRO CHAR(2) BDY(WORD), /* VSAM CHECKPOINT/RESTART OPTION   01393000
*                                     INDICATORS               ICB438*/ 01394000
*     4 JFCAMSTR FIXED(15) BDY(WORD,3), /* NUMBER OF STRINGS   ICB438*/ 01395000
*   2 JFCBADBF FIXED(15) BDY(WORD), /* NUMBER OF DATA BUFFERS  ICB438*/ 01396000
*   2 JFCNLREC FIXED(15) BDY(WORD,3), /* LOGICAL RECORD LENGTH FOR 0386 01397000
*                                     VSAM                     ICB438*/ 01398000
*   2 JFCVINDX FIXED(15) BDY(WORD), /* MASS STORAGE SYSTEM         0386 01399000
*                                     COMMUNICATOR (MSSC) VOLUME   0386 01400000
*                                     SELECTION INDEX              0386 01401000
*                                     (MDC308)               @Z30LP9A*/ 01402000
*   2 JFCBLTYP BIT(8) BDY(WORD,3), /* LABEL TYPE                     */ 01403000
*    3 JFCRSV38 BIT(1),            /* RESERVED                       */ 01404000
*    3 JFCBAL   BIT(1),            /* AMERICAN NATIONAL STANDARD TAPE   01405000
*                                     LABELS (AL OR IF BIT 4 IS ALSO    01406000
*                                     ON, AUL)                       */ 01407000
*    3 JFCBLTM  BIT(1),            /* UNLABELLED TAPE CREATED BY DOS    01408000
*                                     MAY HAVE LEADING TAPE MARK.  0386 01409000
*                                     OPEN/CLOSE/EOV AND RESTART MUST   01410000
*                                     SPACE OVER A TAPE MARK IF ONE     01411000
*                                     EXISTS.                  ICB398*/ 01412000
*    3 JFCBLP   BIT(1),            /* BYPASS LABEL PROCESSING        */ 01413000
*    3 JFCSUL   BIT(1),            /* USER LABEL                     */ 01414000
*    3 JFCNSL   BIT(1),            /* NONSTANDARD LABEL              */ 01415000
*    3 JFCSL    BIT(1),            /* STANDARD LABEL                 */ 01416000
*    3 JFCNL    BIT(1),            /* NO LABEL                       */ 01417000
*   2 JFCBOTTR CHAR(3) BDY(WORD,4),/* DASD MOD DATA SET - IF AUTOMATIC  01418000
*                                     STEP RESTART WAS REQUESTED, TTR   01419000
*                                     OF THE END-OF-DATA INDICATOR 0386 01420000
*                                     EXISTING WHEN THE DATA SET WAS    01421000
*                                     FIRST OPENED DURING THE      0386 01422000
*                                     ORIGINAL EXECUTION OF THE    0386 01423000
*                                     CURRENT STEP                   */ 01424000
*    3 JFCBUFOF PTR(8),            /* TAPE DATA SET - THIS FIELD   0386 01425000
*                                     CONTAINS THE BUFFER OFFSET (DCB   01426000
*                                     SUBPARAMETER VALUE)            */ 01427000
*     4 JFCBFOFL BIT(1),           /* IF 1, THE OFFSET EQUALS FOUR 0386 01428000
*                                     AND THE BUFFER OFFSET FIELD OF    01429000
*                                     EACH BLOCK (D-FORMAT RECORDS)     01430000
*                                     CONTAINS THE BLOCK LENGTH    0386 01431000
*                                     (SPECIFIED BY BUFOFF=L).     0386 01432000
*                                     IF 0, THE OFFSET IS AS       0386 01433000
*                                     SPECIFIED IN THE REMAINING   0386 01434000
*                                     SEVEN BITS AND THE BUFFER    0386 01435000
*                                     OFFSET FIELD OF EACH BLOCK DOES   01436000
*                                     NOT CONTAIN THE BLOCK LENGTH.  */ 01437000
*    3 JFCBFLSQ FIXED(15),         /* FOR MAGNETIC TAPE DEVICES,   0386 01438000
*                                     FILE SEQUENCE NUMBER           */ 01439000
*     4 JFCFUNC  BIT(8),           /* FUNCTION INDICATORS FOR THE  0386 01440000
*                                     3525 CARD PUNCH (SPECIFIED BY     01441000
*                                     THE FUNC PARAMETER)      ICB392*/ 01442000
*      5 JFCFNCBI BIT(1),          /* I - INTERPRET (PUNCH AND PRINT    01443000
*                                     TWO LINES)               ICB392*/ 01444000
*      5 JFCFNCBR BIT(1),          /* R - READ                 ICB392*/ 01445000
*      5 JFCFNCBP BIT(1),          /* P - PUNCH                ICB392*/ 01446000
*      5 JFCFNCBW BIT(1),          /* W - PRINT                ICB392*/ 01447000
*      5 JFCFNCBD BIT(1),          /* D - DATA PROTECTION      ICB392*/ 01448000
*      5 JFCFNCBX BIT(1),          /* X - THIS DATA SET IS TO BE   0386 01449000
*                                     PRINTED.  THIS MAY BE CODED  0386 01450000
*                                     WITH PW OR RPW TO DISTINGUISH     01451000
*                                     THE DATA SET TO BE PRINTED FROM   01452000
*                                     THE DATA SET TO BE PUNCHED.  0386 01453000
*                                                              ICB392*/ 01454000
*      5 JFCFNCBT BIT(1),          /* T - TWO-LINE PRINT SUPPORT   0386 01455000
*                                     REQUEST.  THE SECOND PRINT LINE   01456000
*                                     IS LOCATED ON CARD LINE THREE.    01457000
*                                                              ICB392*/ 01458000
*      5 JFCRSV31 BIT(1),          /* RESERVED                 ICB392*/ 01459000
*   2 JFCBVLSQ FIXED(15),          /* VOLUME SEQUENCE NUMBER         */ 01460000
*   2 JFCBMASK CHAR(8) BDY(WORD),  /* DATA MANAGEMENT TASK           */ 01461000
*    3 JFCBOPS1 CHAR(5),           /* OPEN ROUTINE INTERNAL SWITCHES */ 01462000
*    3 JFCBFLG1 BIT(8),            /* FLAG BYTE                      */ 01463000
*     4 JFCSTAND BIT(1),           /* VOLUME LABEL PROCESSING      0386 01464000
*                                     STANDARD                       */ 01465000
*     4 JFCSLCRE BIT(1),           /* CREATION OF A STANDARD LABEL 0386 01466000
*                                     IS NECESSARY                   */ 01467000
*     4 JFCSLDES BIT(1),           /* DESTRUCTION OF A STANDARD LABEL   01468000
*                                     IS NECESSARY                   */ 01469000
*     4 JFCDUAL  BIT(1),           /* DUAL-DENSITY CHECK DETECTED    */ 01470000
*     4 JFCOPEN  BIT(4),           /* OPEN ROUTINE INTERNAL SWITCHES */ 01471000
*      5 *        BIT(3),          /* OPEN ROUTINE INTERNAL SWITCHES */ 01472000
*      5 JFCBPWBP BIT(1),          /* PASSWORD BYPASS INDICATOR    0386 01473000
*                                                              MDC010*/ 01474000
*    3 JFCBFLG2 BIT(8),            /* FLAG BYTE OF OPEN SWITCHES     */ 01475000
*     4 JFCINOP  BIT(1),           /* TREAT THE INOUT OPTION OF OPEN    01476000
*                                     AS INPUT                       */ 01477000
*     4 JFCOUTOP BIT(1),           /* TREAT THE OUTIN OPTION OF OPEN    01478000
*                                     AS OUTPUT                      */ 01479000
*     4 JFCDEFER BIT(1),           /* SET ONLY IN A JFCB RECORDED IN    01480000
*                                     A DATA SET DESCRIPTOR RECORD 0386 01481000
*                                     (DSDR) BY THE CHECKPOINT     0386 01482000
*                                     ROUTINE.  INDICATES THAT THE 0386 01483000
*                                     DATA SET RELATED TO THE JFCB IS   01484000
*                                     BEING PROCESSED SEQUENTIALLY,     01485000
*                                     AT THE CHECKPOINT, ON A VOLUME    01486000
*                                     OTHER THAN THE VOLUME ON WHICH    01487000
*                                     PROCESSING BEGAN IN THE CURRENT   01488000
*                                     STEP.  WHEN RESTART OCCURS,  0386 01489000
*                                     THIS BIT CAUSES DEFERRED VOLUME   01490000
*                                     MOUNTING.                      */ 01491000
*      5 JFCNRPS  BIT(1),          /* USE BY OPEN ROUTINES - SET TO     01492000
*                                     INDICATE THAT THIS DATA SET  0386 01493000
*                                     RESIDES ON A NON-RPS DEVICE. 0386 01494000
*                                     RESET TO ZERO WHEN OPEN      0386 01495000
*                                     PROCESSING IS COMPLETED. ICB495*/ 01496000
*     4 JFCMODNW BIT(1),           /* DISPOSITION OF THIS DATA SET 0386 01497000
*                                     HAS BEEN CHANGED FROM MOD TO 0386 01498000
*                                     NEW.  DISPOSITION (IN JFCBIND2)   01499000
*                                     WILL BE RESTORED TO MOD AFTER     01500000
*                                     OPEN.                          */ 01501000
*     4 JFCSDRPS BIT(1),           /* USE SEARCH DIRECT FOR        0386 01502000
*                                     ROTATIONAL POSITION SENSING  0386 01503000
*                                     (RPS) DEVICES            ICB398*/ 01504000
*     4 JFCTRACE BIT(1),           /* GTF TRACE IS TO OCCUR DURING 0386 01505000
*                                     OPEN/CLOSE/EOV AND DYNAMIC   0386 01506000
*                                     ALLOCATION PROCESSING OF DCB 0386 01507000
*                                                              ICB392*/ 01508000
*     4 JFCBBUFF BIT(1),           /* INDICATOR TO OPEN THAT A     0386 01509000
*                                     NON-ZERO VALUE IN JFCBOTTR IS     01510000
*                                     NOT TO PREVENT THE NORMAL    0386 01511000
*                                     STORING BY OPEN OF A TTR IN  0386 01512000
*                                     JFCBOTTR.  BEFORE OPEN -     0386 01513000
*                                     JFCBUFOF (OFFSET 67) CONTAINS     01514000
*                                     A BUFFER OFFSET OR INVALID   0386 01515000
*                                     INFORMATION RESULTING FROM A 0386 01516000
*                                     JFCB-TO-JFCB MERGE.  AFTER   0386 01517000
*                                     OPEN - OPEN MAY HAVE STORED A     01518000
*                                     TTR IN JFCBOTTR (OFFSET 67), IN   01519000
*                                     WHICH CASE OPEN WILL HAVE SET     01520000
*                                     THIS BIT TO ZERO.              */ 01521000
*     4 JFCRCTLG BIT(1),           /* OPEN HAS UPDATED THE TTR.    0386 01522000
*                                     SCHEDULER STEP TERMINATION   0386 01523000
*                                     ROUTINE IS TO RECATALOG THIS 0386 01524000
*                                     DATA SET AND PLACE IN THE    0386 01525000
*                                     CATALOG ENTRY THE DSCB TTR   0386 01526000
*                                     CONTAINED IN JFCBDSCB IF THIS     01527000
*                                     DATA SET IS CATALOGED.   ICB398*/ 01528000
*    3 JFCBOPS2 BIT(8),            /* OPEN ROUTINE INTERNAL SWITCHES */ 01529000
*   2 JFCBCRDT CHAR(3) BDY(WORD),  /* DATA SET CREATION DATE (YDD, 0386 01530000
*                                     Y=YEAR AND DD=DAY)             */ 01531000
*   2 JFCBXPDT CHAR(3) BDY(WORD,4),/* DATA SET EXPIRATION DATE (YDD) */ 01532000
*   2 JFCBIND1 BIT(8),             /* INDICATOR BYTE 1               */ 01533000
*    3 JFCRLSE  BIT(2),            /* RELEASE EXTERNAL STORAGE       */ 01534000
*    3 JFCLOC   BIT(2),            /* DATA SET HAS BEEN LOCATED      */ 01535000
*    3 JFCADDED BIT(2),            /* NEW VOLUME HAS BEEN ADDED TO 0386 01536000
*                                     THE DATA SET                   */ 01537000
*    3 JFCGDG   BIT(1),            /* DATA SET IS A MEMBER OF A    0386 01538000
*                                     GENERATION DATA GROUP          */ 01539000
*    3 JFCPDS   BIT(1),            /* DATA SET IS A MEMBER OF A    0386 01540000
*                                     PARTITIONED DATA SET           */ 01541000
*   2 JFCBIND2 BIT(8),             /* INDICATOR BYTE 2               */ 01542000
*    3 JFCDISP  BIT(2),            /* BIT PATTERN FOR NEW, MOD, OLD  */ 01543000
*    3 JFCSECUR BIT(2),            /* DATA SET SECURITY              */ 01544000
*    3 JFCSHARE BIT(1),            /* SHARED DATA SET                */ 01545000
*    3 JFCENT   BIT(1),            /* DELETE THIS JFCB BEFORE      0386 01546000
*                                     ALLOCATION FOR A RESTARTED   0386 01547000
*                                     GENERATION DATA GROUP          */ 01548000
*    3 JFCREQ   BIT(1),            /* STORAGE VOLUME REQUESTED       */ 01549000
*    3 JFCTEMP  BIT(1),            /* TEMPORARY DATA SET             */ 01550000
*   2 JFCAMPTR PTR(31),            /* POINTER TO AMPBLK FOR        0386 01551000
*                                     ADDITIONAL VSAM PARAMETERS   0386 01552000
*                                                              ICB438*/ 01553000
*    3 JFCBUFRQ CHAR(1),           /* NUMBER OF BUFFERS REQUIRED FOR    01554000
*                                     EACH LINE (QTAM)               */ 01555000
*     4 JFCBUFNO CHAR(1),          /* NUMBER OF BUFFERS REQUIRED FOR    01556000
*                                     THIS DATA SET (ACCESS METHODS     01557000
*                                     OTHER THAN TCAM AND QTAM)      */ 01558000
*      5 JFCBUFIN BIT(4),          /* THE NUMBER OF BUFFERS ASSIGNED    01559000
*                                     INITIALLY FOR RECEIVING      0386 01560000
*                                     OPERATIONS FOR EACH LINE IN A     01561000
*                                     LINE GROUP  (TCAM)       MDC021*/ 01562000
*      5 JFCBFOUT BIT(4),          /* THE NUMBER OF BUFFERS ASSIGNED    01563000
*                                     INITIALLY FOR SENDING        0386 01564000
*                                     OPERATIONS FOR EACH LINE IN A     01565000
*                                     LINE GROUP  (TCAM)       MDC022*/ 01566000
*    3 JFCBGNCP PTR(8),            /* FOR GAM, THIS FIELD IS USED FOR   01567000
*                                     THE NUMBER OF IOB'S CONSTRUCTED   01568000
*                                     BY THE OPEN ROUTINE.  MAXIMUM     01569000
*                                     NUMBER IS 99.            MDC025*/ 01570000
*     4 JFCBHIAR CHAR(1),          /* BUFFER POOL LOCATION IN MAIN 0386 01571000
*                                     STORAGE (HIERARCHY)            */ 01572000
*      5 JFCBFALN CHAR(1),         /* BUFFER ALIGNMENT               */ 01573000
*       6 JFCBFTEK BIT(8),         /* BUFFERING TECHNIQUE            */ 01574000
*        7 JFCHIER  BIT(1),        /* BITS 0 AND 5 DESCRIBE MAIN   0386 01575000
*                                     STORAGE HIERARCHY.  BOTH BITS     01576000
*                                     OFF, HIERARCHY 0.  BIT 0 OFF 0386 01577000
*                                     AND BIT 5 ON, HIERARCHY 1.     */ 01578000
*        7 JFCBBFTA BIT(2),        /* A - FOR QSAM LOCATE MODE     0386 01579000
*                                     PROCESSING OF SPANNED RECORDS,    01580000
*                                     AUTOMATIC RECORD AREA        0386 01581000
*                                     CONSTRUCTION DURING LOGICAL  0386 01582000
*                                     RECORD INTERFACE PROCESSING. 0386 01583000
*                                     OPEN IS TO CONSTRUCT A RECORD     01584000
*                                     AREA IF IT AUTOMATICALLY     0386 01585000
*                                     CONSTRUCTS BUFFERS.            */ 01586000
*         8 JFCSIM   BIT(1),       /* S - SIMPLE BUFFERING           */ 01587000
*         8 JFCBBFTR BIT(1),       /* R - FOR BSAM CREATE BDAM     0386 01588000
*                                     PROCESSING OR BDAM PROCESSING     01589000
*                                     OF UNBLOCKED SPANNED RECORDS,     01590000
*                                     SOFTWARE TRACK OVERFLOW.  OPEN    01591000
*                                     FORMS A SEGMENT WORK AREA POOL    01592000
*                                     AND STORES THE ADDRESS OF THE     01593000
*                                     SEGMENT WORK AREA CONTROL BLOCK   01594000
*                                     IN THE DCBEOBW FIELD OF THE  0386 01595000
*                                     DATA CONTROL BLOCK.  WRITE USES   01596000
*                                     A SEGMENT WORK AREA TO WRITE A    01597000
*                                     RECORD AS ONE OR MORE SEGMENTS.   01598000
*                                     FOR BSAM INPUT PROCESSING OF 0386 01599000
*                                     UNBLOCKED SPANNED RECORDS WITH    01600000
*                                     KEYS, RECORD OFFSET PROCESSING.   01601000
*                                     READ READS ONE RECORD SEGMENT     01602000
*                                     INTO THE RECORD AREA.  THE   0386 01603000
*                                     FIRST SEGMENT OF A RECORD IS 0386 01604000
*                                     PRECEDED IN THE RECORD AREA BY    01605000
*                                     THE KEY.  SUBSEQUENT SEGMENTS     01606000
*                                     ARE AT AN OFFSET EQUAL TO THE     01607000
*                                     KEY LENGTH.                    */ 01608000
*        7 JFCEXC   BIT(1),        /* E - EXCHANGE BUFFERING         */ 01609000
*        7 JFCDYN   BIT(1),        /* DYNAMIC BUFFERING              */ 01610000
*        7 JFCHIER1 BIT(1),        /* HIERARCHY 1 MAIN STORAGE       */ 01611000
*        7 JFCDWORD BIT(1),        /* D - DOUBLE WORD BOUNDARY       */ 01612000
*        7 JFCFWORD BIT(1),        /* F - FULL WORD NOT A DOUBLE   0386 01613000
*                                     WORD BOUNDARY                  */ 01614000
*    3 JFCBUFL  FIXED(15) BDY(WORD,3), /* BUFFER LENGTH              */ 01615000
*   2 JFCEROPT BIT(8),             /* ERROR OPTION.  DISPOSITION OF     01616000
*                                     PERMANENT ERRORS IF USER     0386 01617000
*                                     RETURNS FROM A SYNCHRONOUS   0386 01618000
*                                     ERROR EXIT  (QSAM)             */ 01619000
*    3 JFCACC   BIT(1),            /* ACCEPT                         */ 01620000
*    3 JFCSKP   BIT(1),            /* SKIP                           */ 01621000
*    3 JFCABN   BIT(1),            /* ABNORMAL END OF TASK           */ 01622000
*    3 JFCTOPT  BIT(1),            /* ON-LINE TERMINAL TEST        0386 01623000
*                                     (BTAM)                   ICB349*/ 01624000
*    3 JFCRSV02 BIT(1),            /* RESERVED                       */ 01625000
*    3 JFCRSV03 BIT(1),            /* RESERVED                       */ 01626000
*    3 JFCRSV04 BIT(1),            /* RESERVED                       */ 01627000
*    3 JFCRSV05 BIT(1),            /* RESERVED                       */ 01628000
*   2 JFCTRTCH CHAR(1) BDY(WORD,2);/* TAPE RECORDING TECHNIQUE     0386 01629000
*                                     FOR 7-TRACK TAPE               */ 01630000
*                                                                  0386 01631000
*DECLARE                                                           0387 01632000
*  1 JFCKEYLE CHAR(1) DEF(JFCTRTCH) BDY(WORD,2),                   0387 01633000
*                                  /* DIRECT ACCESS KEY LENGTH       */ 01634000
*   2 JFCCODE  BIT(8) BDY(BYTE),   /* CONVERSION CODE (PAPER TAPE)   */ 01635000
*    3 JFCNOCON BIT(1),            /* N - NO CONVERSION              */ 01636000
*    3 JFCBCD   BIT(1),            /* I - IBM BCD                    */ 01637000
*    3 JFCFRI   BIT(1),            /* F - FRIDEN                     */ 01638000
*    3 JFCBUR   BIT(1),            /* B - BURROUGHS                  */ 01639000
*    3 JFCNCR   BIT(1),            /* C - NATIONAL CASH REGISTER     */ 01640000
*    3 JFCASCII BIT(1),            /* A - ASCII (8-TRACK)            */ 01641000
*    3 JFCTTY   BIT(1),            /* T - TELETYPE                   */ 01642000
*    3 JFCRSV32 BIT(1);            /* RESERVED                       */ 01643000
*                                                                  0387 01644000
*DECLARE                                                           0388 01645000
*  1 JFCSTACK BIT(8) DEF(JFCTRTCH) BDY(WORD,2),                    0388 01646000
*                                  /* STACKER SELECTION (CARD READER,   01647000
*                                     (CARD PUNCH)                   */ 01648000
*   2 JFCMODE  BIT(8) BDY(WORD,2), /* MODE OF OPERATION (CARD READER,   01649000
*                                     (CARD PUNCH)             ICB394*/ 01650000
*    3 JFCBIN   BIT(1),            /* C - COLUMN BINARY MODE         */ 01651000
*    3 JFCEBCD  BIT(1),            /* E - EBCDIC MODE                */ 01652000
*    3 JFCMODEO BIT(1),            /* O - OPTICAL MARK READ MODE   0388 01653000
*                                     (3505 ONLY)              ICB394*/ 01654000
*    3 JFCMODER BIT(1),            /* R - READ COLUMN ELIMINATE MODE    01655000
*                                     (3505 AND 3525 WITH READ     0388 01656000
*                                     FEATURE)                 ICB394*/ 01657000
*    3 JFCRSV06 BIT(1),            /* RESERVED                       */ 01658000
*    3 JFCRSV07 BIT(1),            /* RESERVED                       */ 01659000
*    3 JFCTWO   BIT(1),            /* 2 - STACKER TWO                */ 01660000
*    3 JFCONE   BIT(1);            /* 1 - STACKER ONE                */ 01661000
*                                                                  0388 01662000
*DECLARE                                                           0389 01663000
*  1 JFCSPPRT DEF(JFCTRTCH) BDY(WORD,2),                           0389 01664000
*   2 JFCPRTSP BIT(8) BDY(WORD,2), /* NORMAL PRINTER SPACING         */ 01665000
*   2 JFCDEN   BIT(8),             /* TAPE DENSITY - 2400/3400 SERIES   01666000
*                                     MAGNETIC TAPE UNITS            */ 01667000
*   2 JFCBABFS PTR(24) BDY(WORD,4),/* TOTAL BUFFER SIZE FOR ALL VSAM    01668000
*                                     BUFFERS                  ICB438*/ 01669000
*    3 JFCLIMCT CHAR(3) BDY(WORD,4),/* SEARCH LIMIT (BDAM)           */ 01670000
*     4 *        CHAR(1),          /* RESERVED                       */ 01671000
*     4 JFCTRKBL CHAR(2) BDY(WORD),/* DATA SET OPENED FOR MOD - IF 0389 01672000
*                                     AUTOMATIC STEP RESTART WAS   0389 01673000
*                                     REQUESTED, TRACK BALANCE     0389 01674000
*                                     EXISTING WHEN THE DATA SET WAS    01675000
*                                     FIRST OPENED DURING THE      0389 01676000
*                                     ORIGINAL EXECUTION OF THE    0389 01677000
*                                     CURRENT STEP                   */ 01678000
*   2 JFCDSORG BIT(16) BDY(WORD,3),/* DATA SET ORGANIZATION BEING  0389 01679000
*                                     USED                           */ 01680000
*    3 JFCDSRG1 BIT(8),            /* BYTE 1 OF JFCDSORG             */ 01681000
*     4 JFCORGIS BIT(1),           /* INDEXED SEQUENTIAL             */ 01682000
*     4 JFCORGPS BIT(1),           /* PHYSICAL SEQUENTIAL            */ 01683000
*     4 JFCORGDA BIT(1),           /* DIRECT                         */ 01684000
*     4 JFCORGCX BIT(1),           /* BTAM OR QTAM LINE GROUP  MDC011*/ 01685000
*     4 JFCORGCQ BIT(1),           /* QTAM DIRECT ACCESS MESSAGE   0389 01686000
*                                     QUEUE                    MDC012*/ 01687000
*     4 JFCORGMQ BIT(1),           /* QTAM PROBLEM PROGRAM MESSAGE 0389 01688000
*                                     QUEUE                    MDC013*/ 01689000
*     4 JFCORGPO BIT(1),           /* PARTITIONED                    */ 01690000
*     4 JFCORGU  BIT(1),           /* UNMOVABLE - THE DATA CONTAINS     01691000
*                                     LOCATION DEPENDENT INFORMATION */ 01692000
*    3 JFCDSRG2 BIT(8),            /* BYTE 2 OF JFCDSORG             */ 01693000
*     4 JFCORGGS BIT(1),           /* GRAPHICS                       */ 01694000
*     4 JFCORGTX BIT(1),           /* TCAM LINE GROUP          MDC014*/ 01695000
*     4 JFCORGTQ BIT(1),           /* TCAM MESSAGE QUEUE       MDC015*/ 01696000
*     4 JFCRSV13 BIT(1),           /* RESERVED, BINARY ZERO          */ 01697000
*     4 JFCORGAM BIT(1),           /* VSAM                     ICB438*/ 01698000
*     4 JFCORGTR BIT(1),           /* TCAM 3705                MDC016*/ 01699000
*     4 JFCRSV15 BIT(1),           /* RESERVED, BINARY ZERO          */ 01700000
*     4 JFCRSV16 BIT(1),           /* RESERVED, BINARY ZERO          */ 01701000
*   2 JFCRECFM BIT(8) BDY(WORD),   /* RECORD FORMAT                  */ 01702000
*    3 JFCRCFM  BIT(3),            /* RECORD FORMAT (USASI/USASCII)     01703000
*                                                              MDC023*/ 01704000
*     4 JFCFMREC BIT(2),           /* BITS INDICATING RECORD FORMAT  */ 01705000
*     4 JFCRFO   BIT(1),           /* T - TRACK OVERFLOW             */ 01706000
*    3 JFCRFB   BIT(1),            /* B - BLOCKED - MAY NOT OCCUR  0389 01707000
*                                     WITH UNDEFINED                 */ 01708000
*    3 JFCRFS   BIT(1),            /* S - FOR FIXED LENGTH RECORD  0389 01709000
*                                     FORMAT, STANDARD BLOCKS.  NO 0389 01710000
*                                     TRUNCATED BLOCKS OR UNFILLED 0389 01711000
*                                     TRACKS ARE EMBEDDED IN THE DATA   01712000
*                                     SET.                         0389 01713000
*                                     FOR VARIABLE LENGTH RECORD   0389 01714000
*                                     FORMAT, SPANNED RECORDS.       */ 01715000
*    3 JFCCHAR  BIT(2),            /* CONTROL CHARACTER              */ 01716000
*    3 *        BIT(1),            /* RESERVED                       */ 01717000
*   2 JFCOPTCD BIT(8) BDY(WORD,2), /* OPTION CODES                   */ 01718000
*    3 JFCWVCSP BIT(1),            /* QSAM-BSAM-BPAM - W - WRITE   0389 01719000
*                                     VALIDITY CHECK                 */ 01720000
*     4 JFCWVCIS BIT(1),           /* BISAM-QISAM - W - WRITE      0389 01721000
*                                     VALIDITY CHECK                 */ 01722000
*      5 JFCWVCBD BIT(1),          /* BDAM - W - WRITE VALIDITY    0389 01723000
*                                     CHECK                          */ 01724000
*       6 JFCSDNAM BIT(1),         /* TCAM - SOURCE OR DESTINATION 0389 01725000
*                                     NAME PRECEDES MESSAGE (AFTER 0389 01726000
*                                     CONTROL BYTE)                  */ 01727000
*    3 JFCALLOW BIT(1),            /* QSAM-BSAM-BPAM - U - ALLOW A 0389 01728000
*                                     DATA CHECK CAUSED BY AN      0389 01729000
*                                     INVALID CHARACTER (1403      0389 01730000
*                                     PRINTER WITH UCS FEATURE)      */ 01731000
*     4 JFCRSV17 BIT(1),           /* RESERVED                       */ 01732000
*      5 JFCOVER  BIT(1),          /* BDAM - TRACK OVERFLOW          */ 01733000
*       6 JFCWUMSG BIT(1),         /* TCAM - WORK UNIT IS A MESSAGE     01734000
*                                     (DEFAULT WORK UNIT IS A RECORD)*/ 01735000
*    3 JFCPCIBT BIT(1),            /* QSAM-BSAM-BPAM - C - CHAINED 0389 01736000
*                                     SCHEDULING USING THE PROGRAM 0389 01737000
*                                     CONTROLLED INTERRUPTION        */ 01738000
*     4 JFCMAST  BIT(1),           /* BISAM-QISAM - M - MASTER     0389 01739000
*                                     INDEXES                        */ 01740000
*      5 JFCEXT   BIT(1),          /* BDAM - E - EXTENDED SEARCH     */ 01741000
*       6 JFCCBWU  BIT(1),         /* TCAM - CONTROL BYTE PRECEDES 0389 01742000
*                                     WORK UNIT                      */ 01743000
*    3 JFCBCKPT BIT(1),            /* QSAM-BSAM-BPAM - BYPASS      0389 01744000
*                                     EMBEDDED DOS CHECKPOINT      0389 01745000
*                                     RECORDS ON TAPE         ICB398*/  01746000
*     4 JFCIND   BIT(1),           /* BISAM-QISAM - I - INDEPENDENT     01747000
*                                     OVERFLOW AREA                  */ 01748000
*      5 JFCFEED  BIT(1),          /* BDAM - F - FEEDBACK            */ 01749000
*    3 JFCRSV18 BIT(1),            /* RESERVED                       */ 01750000
*     4 JFCCYL   BIT(1),           /* BISAM-QISAM - Y - CYLINDER   0389 01751000
*                                     OVERFLOW AREA                  */ 01752000
*      5 JFCACT   BIT(1),          /* BDAM - A - ACTUAL ADRESSING    */ 01753000
*       6 JFCOPTQ  BIT(1),         /* USASI/USASCII - EBCDIC TO ASCII   01754000
*                                     OR ASCII TO EBCDIC TRANSLATION    01755000
*                                     REQUIRED                       */ 01756000
*    3 JFCREDUC BIT(1),            /* QSAM-BSAM-BPAM-EXCP - Z -    0389 01757000
*                                     USE REDUCED ERROR RECOVERY   0389 01758000
*                                     PROCEDURE (MAGNETIC TAPE)      */ 01759000
*     4 JFCRSV19 BIT(1),           /* RESERVED                       */ 01760000
*      5 JFCRSV20 BIT(1),          /* RESERVED                       */ 01761000
*       6 JFCSRCHD BIT(1),         /* QSAM-BSAM-BPAM - USE SEARCH  0389 01762000
*                                     DIRECT (SD) INSTEAD OF SEARCH     01763000
*                                     PREVIOUS ON ROTATIONAL POSITION   01764000
*                                     SENSING (RPS) DEVICE.  (DIRECT    01765000
*                                     ACCESS)                        */ 01766000
*    3 JFCRSV21 BIT(1),            /* RESERVED                       */ 01767000
*     4 JFCDEL   BIT(1),           /* BISAM-QISAM - L - DELETE     0389 01768000
*                                     OPTION                         */ 01769000
*      5 JFCRSV22 BIT(1),          /* RESERVED                       */ 01770000
*    3 JFCOPTJ  BIT(1),            /* QSAM-BSAM-BPAM - J - 3800    0389 01771000
*                                     CONTROL CHARACTER            0389 01772000
*                                     (MDC301)               @Z40MP9A*/ 01773000
*     4 JFCREORG BIT(1),           /* BISAM-QISAM - R -            0389 01774000
*                                     REORGANIZATION CRITERIA        */ 01775000
*      5 JFCREL   BIT(1),          /* BDAM - R - RELATIVE BLOCK    0389 01776000
*                                     ADDRESSING                     */ 01777000
*   2 JFCBLKSI FIXED(15) BDY(WORD,3), /* MAXIMUM BLOCK SIZE          */ 01778000
*    3 JFCBUFSI FIXED(15) BDY(WORD,3), /* MAXIMUM BUFFER SIZE        */ 01779000
*     4 JFCBAXBF FIXED(15) BDY(WORD,3), /* NUMBER OF INDEX BUFFERS 0389 01780000
*                                     (VSAM)                   ICB438*/ 01781000
*   2 JFCAMSYN CHAR(8) BDY(WORD),  /* MODULE NAME FOR SYNAD ROUTINE     01782000
*                                     FOR VSAM                 ICB438*/ 01783000
*    3 JFCLRECL FIXED(15) BDY(WORD), /* LOGICAL RECORD LENGTH        */ 01784000
*    3 JFCNCP   CHAR(1) BDY(WORD,3), /* NUMBER OF CHANNEL PROGRAMS.     01785000
*                                     NUMBER OF READ OR WRITE      0389 01786000
*                                     REQUESTS WHICH MAY BE ISSUED 0389 01787000
*                                     PRIOR TO A CHECK.  NUMBER OF 0389 01788000
*                                     IOB'S GENERATED.  (MAXIMUM   0389 01789000
*                                     NUMBER IS 99.)               0389 01790000
*                                     NOTE - GAM USES JFCBFTEK FOR 0389 01791000
*                                     THIS INFORMATION AND DOES    0389 01792000
*                                     NOT USE THIS FIELD AT ALL.     */ 01793000
*     4 JFCBUFMX CHAR(1),          /* THE MAXIMUM NUMBER OF BUFFERS     01794000
*                                     TO BE USED FOR DATA TRANSFER 0389 01795000
*                                     FOR EACH LINE IN THIS LINE   0389 01796000
*                                     GROUP  (TCAM)                  */ 01797000
*    3 JFCNTM   CHAR(1) BDY(WORD,4), /* THE NUMBER OF TRACKS THAT  0389 01798000
*                                     DETERMINE THE DEVELOPMENT OF A    01799000
*                                     MASTER INDEX.  MAXIMUM NUMBER     01800000
*                                     IS 99.  (ISAM)                 */ 01801000
*     4 JFCBFSEQ PTR(8),           /* TAPE POSITIONING INFORMATION 0389 01802000
*                                     FOR CHECKPOINT RESTART.  THIS     01803000
*                                     FIELD IS USED TO PASS A      0389 01804000
*                                     PHYSICAL FILE SEQUENCE COUNT 0389 01805000
*                                     FROM CHECKPOINT TO RESTART.  0389 01806000
*                                     THE COUNT TELLS THE PHYSICAL 0389 01807000
*                                     POSITION OF THE TAPE VOLUME  0389 01808000
*                                     THAT WAS BEING PROCESSED WHEN     01809000
*                                     THE CHECKPOINT WAS TAKEN.    0389 01810000
*                                                             SA60703*/ 01811000
*      5 JFCPCI   BIT(8),          /* PROGRAM-CONTROLLED INTERRUPTION   01812000
*                                     (PCI) FLAG BYTE (TCAM)         */ 01813000
*       6 JFCPCIX1 BIT(1),         /* PCI=(X,) RECEIVE OPERATIONS  0389 01814000
*                                                              ICB473*/ 01815000
*       6 JFCPCIX2 BIT(1),         /* PCI=(,X) SEND OPERATIONS     0389 01816000
*                                     X INDICATES THAT AFTER THE   0389 01817000
*                                     FIRST BUFFER IS FILLED (ON   0389 01818000
*                                     RECEIVE OPERATIONS) OR EMPTIED    01819000
*                                     (ON SEND OPERATIONS), A PCI  0389 01820000
*                                     OCCURS DURING THE FILLING OR 0389 01821000
*                                     EMPTYING OF THE NEXT BUFFER. 0389 01822000
*                                     THE FIRST BUFFER REMAINS     0389 01823000
*                                     ALLOCATED AND ANOTHER IS     0389 01824000
*                                     ALLOCATED.               ICB473*/ 01825000
*       6 JFCPCIA1 BIT(1),         /* PCI=(A,) RECEIVE OPERATIONS    */ 01826000
*       6 JFCPCIA2 BIT(1),         /* PCI=(,A) SEND OPERATIONS     0389 01827000
*                                     A INDICATES THAT AFTER THE   0389 01828000
*                                     FIRST BUFFER IS FILLED (ON   0389 01829000
*                                     RECEIVE OPERATIONS) OR EMPTIED    01830000
*                                     (ON SEND OPERATIONS), A PCI  0389 01831000
*                                     OCCURS DURING THE FILLING OR 0389 01832000
*                                     EMPTYING OF THE NEXT BUFFER. 0389 01833000
*                                     THE FIRST BUFFER IS DEALLOCATED.  01834000
*                                     A BUFFER IS ALLOCATED IN PLACE    01835000
*                                     OF THE DEALLOCATED BUFFER.     */ 01836000
*       6 JFCPCIN1 BIT(1),         /* PCI=(N,) RECEIVE OPERATIONS    */ 01837000
*       6 JFCPCIN2 BIT(1),         /* PCI=(,N) SEND OPERATIONS     0389 01838000
*                                     N INDICATES THAT NO PCI'S ARE     01839000
*                                     TAKEN DURING FILLING (ON     0389 01840000
*                                     RECEIVE OPERATIONS) OR EMPTYING   01841000
*                                     (ON SEND OPERATIONS) OF BUFFERS.  01842000
*                                     BUFFERS ARE DEALLOCATED AT THE    01843000
*                                     END OF TRANSMISSION.           */ 01844000
*       6 JFCPCIR1 BIT(1),         /* PCI=(R,) RECEIVE OPERATIONS    */ 01845000
*       6 JFCPCIR2 BIT(1),         /* PCI=(,R) SEND OPERATIONS     0389 01846000
*                                     R INDICATES THAT AFTER THE   0389 01847000
*                                     FIRST BUFFER IS FILLED (ON   0389 01848000
*                                     RECEIVE OPERATIONS) OR EMPTIED    01849000
*                                     (ON SEND OPERATIONS), A PCI  0389 01850000
*                                     OCCURS DURING THE FILLING OR 0389 01851000
*                                     EMPTYING OF EACH SUCCEEDING  0389 01852000
*                                     BUFFER.  THE COMPLETED BUFFER     01853000
*                                     IS DEALLOCATED, BUT NO NEW   0389 01854000
*                                     BUFFER IS ALLOCATED TO TAKE  0389 01855000
*                                     ITS PLACE.                     */ 01856000
*                                                                  0389 01857000
* /*******************************************************************/ 01858000
* /*                                                                 */ 01859000
* /*                     NORMAL 108 SEGMENT                          */ 01860000
* /*                                                                 */ 01861000
* /*******************************************************************/ 01862000
*                                                                  0389 01863000
*    3 JFCRESRV CHAR(4) BDY(WORD), /* FIRST BYTE CONTAINS NUMBER OF     01864000
*                                     BYTES FOR TIME OF DAY.  SECOND    01865000
*                                     BYTE CONTAINS NUMBER OF BYTES     01866000
*                                     FOR DATE.  THIRD BYTE CONTAINS    01867000
*                                     NUMBER OF BYTES FOR OUTSEQ.  0389 01868000
*                                     FOURTH BYTE CONTAINS NUMBER OF    01869000
*                                     BYTES IN.  (TCAM)              */ 01870000
*     4 JFCRKP   FIXED(15) BDY(WORD), /* THE RELATIVE POSITION OF THE   01871000
*                                     FIRST BYTE OF THE KEY WITHIN 0389 01872000
*                                     EACH LOGICAL RECORD.  MAXIMUM     01873000
*                                     VALUE IS LOGICAL RECORD LENGTH    01874000
*                                     MINUS KEY LENGTH.              */ 01875000
*     4 JFCCYLOF CHAR(1),          /* THE NUMBER OF TRACKS TO BE   0389 01876000
*                                     RESERVED ON EACH CYLINDER TO 0389 01877000
*                                     HOLD RECORDS THAT OVERFLOW   0389 01878000
*                                     FROM OTHER TRACKS ON THAT    0389 01879000
*                                     CYLINDER.  MAXIMUM VALUE IS  0389 01880000
*                                     99.                            */ 01881000
*     4 JFCDBUFN CHAR(1),          /* RESERVED                       */ 01882000
*   2 JFCINTVL CHAR(1) BDY(WORD);  /* INTENTIONAL DELAY, IN SECONDS,    01883000
*                                     BETWEEN PASSES THROUGH A     0389 01884000
*                                     POLLING LIST (QTAM)            */ 01885000
*                                                                  0389 01886000
* /*******************************************************************/ 01887000
* /*                                                                 */ 01888000
* /*                     END OF NORMAL 108 SEGMENT                   */ 01889000
* /*                                                                 */ 01890000
* /*******************************************************************/ 01891000
*                                                                  0390 01892000
* /*******************************************************************/ 01893000
* /*                                                                 */ 01894000
* /*                     108 PRINTER SEGMENT                         */ 01895000
* /*                                                                 */ 01896000
* /*     NOTE  THIS SEGMENT REPLACES THE NORMAL 108 SEGMENT IF       */ 01897000
* /*           THE DD STATEMENT USES THE UCS PARAMETER.              */ 01898000
* /*                                                                 */ 01899000
* /*******************************************************************/ 01900000
*                                                                  0390 01901000
*DECLARE                                                           0390 01902000
*  1 JFCUCSEG DEF(JFCRESRV) BDY(WORD),                             0390 01903000
*   2 JFCUCSID CHAR(4) BDY(WORD),  /* NAME OF THE UCS IMAGE TO BE  0390 01904000
*                                     LOADED                         */ 01905000
*   2 JFCUCSOP BIT(8),             /* OPERATION OF THE UCS IMAGE TO     01906000
*                                     BE LOADED                      */ 01907000
*    3 JFCBEXTP BIT(1),            /* JFCB EXTENSION PRESENT FOR 3800   01908000
*                                     DEVICE  (MDC302)       @Z40MP9A*/ 01909000
*    3 JFCFOLD  BIT(1),            /* UCS IMAGE IS TO BE LOADED IN 0390 01910000
*                                     THE FOLD MODE                  */ 01911000
*    3 JFCRSV25 BIT(1),            /* RESERVED                       */ 01912000
*    3 JFCVER   BIT(1),            /* UCS IMAGE IS TO BE VERIFIED    */ 01913000
*    3 JFCFCBAL BIT(1),            /* FORMS ARE TO BE ALIGNED        */ 01914000
*    3 JFCFCBVR BIT(1),            /* FORMS CONTROL BUFFER (FCB)   0390 01915000
*                                     IMAGE IS TO BE VERIFIED        */ 01916000
*    3 JFCRSV26 BIT(1),            /* RESERVED                       */ 01917000
*    3 JFCRSV27 BIT(1),            /* RESERVED                       */ 01918000
*                                                                  0390 01919000
* /*******************************************************************/ 01920000
* /*                                                                 */ 01921000
* /*                     END OF 108 PRINTER SEGMENT                  */ 01922000
* /*                                                                 */ 01923000
* /*******************************************************************/ 01924000
*                                                                  0390 01925000
*   2 JFCOUTLI PTR(24) BDY(WORD,2),/* SMF - SYSOUT LIMIT.  BINARY  0390 01926000
*                                     REPRESENTATION OF THE OUTLIM=     01927000
*                                     PARAMETER ON THE SYSOUT DD   0390 01928000
*                                     STATEMENT.  THE MAXIMUM NUMBER    01929000
*                                     OF LOGICAL RECORDS SPECIFIED 0390 01930000
*                                     FOR THIS OUTPUT DATA SET.      */ 01931000
*    3 JFCTHRSH CHAR(1),           /* RECORDS TO BE USED             */ 01932000
*     4 JFCCPRI  BIT(8),           /* PRIORITY BETWEEN SEND AND    0390 01933000
*                                     RECEIVE OPERATIONS (TCAM)      */ 01934000
*      5 JFCRSV53 BIT(1),          /* RESERVED                 MDC020*/ 01935000
*      5 JFCRSV54 BIT(1),          /* RESERVED                 MDC019*/ 01936000
*      5 JFCRSV55 BIT(1),          /* RESERVED                 MDC018*/ 01937000
*      5 JFCRSV33 BIT(1),          /* RESERVED                       */ 01938000
*      5 JFCRSV34 BIT(1),          /* RESERVED                       */ 01939000
*      5 JFCRECV  BIT(1),          /* RECEIVE PRIORITY         MDC018*/ 01940000
*      5 JFCEQUAL BIT(1),          /* EQUAL PRIORITY           MDC019*/ 01941000
*      5 JFCSEND  BIT(1),          /* SEND PRIORITY            MDC020*/ 01942000
*    3 JFCSOWA  FIXED(15),         /* LENGTH, IN BYTES, OF THE USER-    01943000
*                                     PROVIDED WORK AREA (QTAM)      */ 01944000
*   2 JFCBNTCS CHAR(1),            /* NUMBER OF OVERFLOW TRACKS      */ 01945000
*   2 JFCBNVOL CHAR(1),            /* NUMBER OF VOLUME SERIAL NUMBERS*/ 01946000
*   2 JFCBVOLS CHAR(30) BDY(WORD,3),/* THE FIRST FIVE VOLUME SERIAL     01947000
*                                     NUMBERS                        */ 01948000
*    3 JFCAVOLS (5) CHAR(6);       /* THE FIRST FIVE VOLUME SERIAL 0390 01949000
*                                     NUMBERS                @Z30LP9A*/ 01950000
*                                                                  0390 01951000
*DECLARE                                                           0391 01952000
*  1 JFCBS001 DEF(JFCBVOLS) BDY(WORD,3), /*                  @Z30LP9A*/ 01953000
*   2 *        CHAR(22),           /* FIRST 22 BYTES OF            0391 01954000
*                                     JFCBVOLS               @Z30LP9A*/ 01955000
*   2 JFCMSVGP CHAR(8) BDY(WORD),  /* MASS STORAGE VOLUME GROUP FROM    01956000
*                                     WHICH TO SELECT A VOLUME     0391 01957000
*                                     (MDC306)               @Z30LP9A*/ 01958000
*   2 JFCBEXTL CHAR(1),            /* LENGTH OF BLOCK OF EXTRA VOLUME   01959000
*                                     SERIAL NUMBERS (BEYOND FIVE)   */ 01960000
*   2 JFCBEXAD CHAR(3),            /* RELATIVE TRACK ADDRESS (TTR) 0391 01961000
*                                     OF FIRST JFCB EXTENSION BLOCK     01962000
*                                     FOR VOLUME SERIAL NUMBERS OR 0391 01963000
*                                     TTR OF JFCB EXTENSION BLOCK  0391 01964000
*                                     FOR 3800  (MDC303)     @Z40MP9A*/ 01965000
*   2 JFCBPQTY CHAR(3) BDY(WORD),  /* PRIMARY QUANTITY OF DIRECT   0391 01966000
*                                     ACCESS STORAGE REQUIRED        */ 01967000
*    3 JFCRUNIT CHAR(3),           /* UNIT TYPE (EBCDIC) OF A DEVICE    01968000
*                                     AT A REMOTE TERMINAL.  THE   0391 01969000
*                                     FIRST TWO CHARACTERS ARE RD  0391 01970000
*                                     (READER), PR (PRINTER) OR PU 0391 01971000
*                                     (PUNCH).  THE THIRD CHARACTER     01972000
*                                     IS A NUMBER FROM 1 TO 9. ICB387*/ 01973000
*   2 JFCBCTRI BIT(8),             /* SPACE PARAMETERS               */ 01974000
*    3 JFCBSPAC BIT(2),            /* SPACE MASK BITS                */ 01975000
*    3 JFCBMSGP BIT(1),            /* REQUEST IS FOR A MASS STORAGE     01976000
*                                     VOLUME GROUP (MSVGP) VOLUME  0391 01977000
*                                     (MDC307)               @Z30LP9A*/ 01978000
*    3 JFCRSV29 BIT(1),            /* RESERVED                       */ 01979000
*    3 JFCONTIG BIT(1),            /* CONTIG REQUEST                 */ 01980000
*    3 JFCMIXG  BIT(1),            /* MXIG REQUEST                   */ 01981000
*    3 JFCALX   BIT(1),            /* ALX REQUEST                    */ 01982000
*    3 JFCROUND BIT(1),            /* ROUND REQUEST                  */ 01983000
*   2 JFCBSQTY CHAR(3) BDY(WORD),  /* SECONDARY QUANTITY OF DIRECT 0391 01984000
*                                     ACCESS STORAGE REQUIRED        */ 01985000
*    3 JFCRQID  FIXED(15),         /* QUEUE IDENTIFICATION (QID) USED   01986000
*                                     BY ACCESS METHOD TO DETERMINE     01987000
*                                     THE REMOTE TERMINAL LOCATION 0391 01988000
*                                     FOR THIS JOB.            ICB387*/ 01989000
*   2 JFCFLGS1 BIT(8),             /* FLAG BYTE (ICB488)      SA53458*/ 01990000
*    3 JFCBDLET BIT(1),            /* IF ONE, DELETE THE DATA SET  0391 01991000
*                                     USED WHEN EXTENDING THE JOB  0391 01992000
*                                     QUEUE OR SPOOL DATA SETS     0391 01993000
*                                     (OS/VS1)  (MDC305)     @XM05457*/ 01994000
*    3 JFCTOPEN BIT(1),            /* TAPE DATA SET HAS BEEN OPENED     01995000
*                                                              MDC026*/ 01996000
*    3 JFCBADSP BIT(1),            /* AUTOMATIC DATA SET PROTECTION     01997000
*                                     INDICATOR  (MDC310)    @Z40RP9A*/ 01998000
*    3 JFCRSV42 BIT(1),            /* RESERVED  (MDC311)             */ 01999000
*    3 JFCBCEOV BIT(1),            /* IF ONE, CHKPT=EOV SPECIFIED FOR   02000000
*                                     THIS DATA SET (MDC312) @Z30JP9A*/ 02001000
*    3 JFCVRDS  BIT(1),            /* VIO DATA SET             MDC006*/ 02002000
*    3 JFCRSV45 BIT(1),            /* RESERVED                       */ 02003000
*    3 JFCBUAFF BIT(1),            /* UNIT AFFINITY SPECIFIED FOR  0391 02004000
*                                     THIS DATA SET (ICB488)  SA53458*/ 02005000
*   2 JFCBDQTY CHAR(3) BDY(WORD),  /* QUANTITY OF DIRECT ACCESS    0391 02006000
*                                     STORAGE REQUIRED FOR A       0391 02007000
*                                     DIRECTORY OR AN EMBEDDED INDEX    02008000
*                                     AREA                           */ 02009000
*   2 JFCBSPNM PTR(24) BDY(WORD,4),/* MAIN STORAGE ADDRESS OF THE  0391 02010000
*                                     JFCB WITH WHICH CYLINDERS ARE     02011000
*                                     SPLIT                          */ 02012000
*   2 JFCBABST FIXED(15),          /* RELATIVE ADDRESS OF FIRST TRACK   02013000
*                                     TO BE ALLOCATED                */ 02014000
*   2 JFCBSBNM PTR(24) BDY(WORD),  /* MAIN STORAGE ADDRESS OF THE  0391 02015000
*                                     JFCB FROM WHICH SPACE IS TO  0391 02016000
*                                     BE SUBALLOCATED                */ 02017000
*   2 JFCBDRLH CHAR(3) BDY(WORD,4),/* AVERAGE DATA BLOCK LENGTH      */ 02018000
*   2 JFCBVLCT CHAR(1),            /* VOLUME COUNT                   */ 02019000
*   2 JFCBSPTN CHAR(1),            /* NUMBER OF TRACKS PER CYLINDER     02020000
*                                     TO BE USED BY THIS DATA SET  0391 02021000
*                                     WHEN SPLIT CYLINDER IS       0391 02022000
*                                     INDICATED                      */ 02023000
*   2 JFCBEND  CHAR(0) BDY(WORD);                                  0391 02024000
*        GEN(EJECT);                                               0392 02025000
*                                                                  0392 02026000
         EJECT                                                          02027000
*        DCL 1 TABLE1 LOCAL BDY(WORD),      /* HIGH ORDER KEY TABLE */  02028000
*              2 * BIT(8)    INIT ('10'X),  /* KEY TYPE FLAGS       */  02029000
*              2 * CHAR(9)   INIT ('BUFSP='),/* THIS KEYWORD        */  02030000
*              2 * BIT(8)    INIT ('03'X),  /* OR MASK OR LENGTH    */  02031000
*              2 * PTR(8) INIT (ADDR(JFCBABFS) - ADDR(INFMJFCB)+1),     02032000
*              2 * BIT(32)   INIT ('80000000'X), /*BUFSP IS DUP     */  02033000
*              2 * BIT(8)    INIT ('FF'X),  /* ALLOW ALL DSORGS     */  02034000
*              2 *           BIT(24),       /* RESERVED FOR EXPANS  */  02035000
*              2 * PTR(31)   INIT (0),      /* CHAIN IF SUB KEYS    */  02036000
*        /* THIS CONCLUDES THE BUFSP ENTRY IN THE TABLE             */  02037000
*                                                                  0393 02038000
*              2 * BIT(8)    INIT ('10'X),  /* KEY TYPE FLAGS       */  02039000
*              2 * CHAR(9)   INIT ('BUFND='),/* THIS KEYWORD        */  02040000
*              2 * BIT(8)    INIT ('02'X),  /* OR MASK OR LENGTH    */  02041000
*              2 * PTR(8)    INIT (ADDR(JFCBADBF) - ADDR(INFMJFCB)+1),  02042000
*              2 * BIT(32)   INIT('40000000'X), /* BUFND IS DUP     */  02043000
*              2 * BIT(8)    INIT ('FF'X),  /* ALLOW ALL DSORGS     */  02044000
*              2 *           BIT(24),       /* RESERVED FOR EXPANS  */  02045000
*              2 * PTR(31)   INIT (0),      /* CHAIN IF SUB KEYS    */  02046000
*        /* THIS CONCLUDES THE BUFND ENTRY IN THE TABLE             */  02047000
*                                                                  0393 02048000
*              2 * BIT(8)    INIT ('10'X),  /* KEY TYPE FLAGS       */  02049000
*              2 * CHAR(9)   INIT ('BUFNI='),/* THIS KEYWORD        */  02050000
*              2 * BIT(8)    INIT ('02'X),  /* OR MASK OR LENGTH    */  02051000
*              2 * PTR(8) INIT (ADDR(JFCBAXBF) - ADDR(INFMJFCB)+1),     02052000
*              2 * BIT(32)   INIT('20000000'X), /* BUFNI IS DUP     */  02053000
*              2 * BIT(8)    INIT ('FF'X),  /* ALLOW ALL DSORGS     */  02054000
*              2 *           BIT(24),       /* RESERVED FOR EXPANS  */  02055000
*              2 * PTR(31)   INIT (0),      /* CHAIN IF SUB KEYS    */  02056000
*        /* THIS CONCLUDES THE BUFNI ENTRY IN THE TABLE             */  02057000
*                                                                  0393 02058000
*              2 * BIT(8)    INIT ('10'X),  /* KEY TYPE FLAGS       */  02059000
*              2 * CHAR(9)   INIT ('STRNO='),/* THIS KEYWORD        */  02060000
*              2 * BIT(8)    INIT ('02'X),  /* OR MASK OR LENGTH    */  02061000
*              2 * PTR(8)    INIT (ADDR(JFCAMSTR) - ADDR(INFMJFCB)+1),  02062000
*              2 * BIT(32)   INIT('10000000'X), /* STRNO IS DUP     */  02063000
*              2 * BIT(8)    INIT ('FF'X),  /* ALLOW ALL DSORGS     */  02064000
*              2 *           BIT(24),       /* RESERVED FOR EXPANS  */  02065000
*              2 * PTR(31)   INIT (0),      /* CHAIN IF SUB KEYS    */  02066000
*        /* THIS CONCLUDES THE STRNO ENTRY IN THE TABLE             */  02067000
*                                                                  0393 02068000
*              2 * BIT(8)    INIT ('20'X),  /* KEY TYPE FLAGS       */  02069000
*              2 * CHAR(9)   INIT ('SYNAD='),/* THIS KEYWORD        */  02070000
*              2 * BIT(8)    INIT ('08'X),  /* OR MASK OR LENGTH    */  02071000
*              2 * PTR(8) INIT (ADDR(JFCAMSYN) - ADDR(INFMJFCB)+1),     02072000
*              2 * BIT(32)   INIT('08000000'X), /* SYNAD IS DUP     */  02073000
*              2 * BIT(8)    INIT ('FF'X),  /* ALLOW ALL DSORGS     */  02074000
*              2 *           BIT(24),       /* RESERVED FOR EXPANS  */  02075000
*              2 * PTR(31)   INIT (0),      /* CHAIN IF SUB KEYS    */  02076000
*        /* THIS CONCLUDES THE SYNAD ENTRY IN THE TABLE      @Y30LSPS*/ 02077000
*                                                                  0393 02078000
*              2 * BIT(8)    INIT ('80'X),  /* KEY TYPE FLAGS       */  02079000
*              2 * CHAR(9)   INIT ('CROPS='),/* THIS KEYWORD        */  02080000
*              2 * BIT(8)    INIT ('00'X),  /* OR MASK OR LENGTH    */  02081000
*              2 * PTR(8)    INIT (ADDR(JFCAMCRO) - ADDR(INFMJFCB)+1),  02082000
*              2 * BIT(32)   INIT('04000000'X), /* CROPS IS DUP     */  02083000
*              2 * BIT(8)    INIT ('FF'X),  /* ALLOW ALL DSORGS     */  02084000
*              2 *           BIT(24),       /* RESERVED FOR EXPANS  */  02085000
*              2 * PTR(31)   INIT(ADDR(TABLE2)),/*CHAIN IF SUB KEYS*/   02086000
*        /* THIS CONCLUDES THE CROPS ENTRY IN THE TABLE             */  02087000
*                                                                  0393 02088000
*              2 * BIT(8)    INIT ('80'X),  /* KEY TYPE FLAGS       */  02089000
*              2 * CHAR(9)   INIT ('RECFM='),/* THIS KEYWORD        */  02090000
*              2 * BIT(8)    INIT ('00'X),  /* OR MASK OR LENGTH    */  02091000
*              2 * PTR(8) INIT (ADDR(JFCRECFM) - ADDR(INFMJFCB)+1),     02092000
*              2 * BIT(32)   INIT('02000000'X), /* RECFM IS DUP     */  02093000
*              2 * BIT(8)    INIT ('FF'X),  /* ALLOW ALL DSORGS     */  02094000
*              2 *           BIT(24),       /* RESERVED FOR EXPANS  */  02095000
*              2 * PTR(31)   INIT(ADDR(TABLE3)),/*CHAIN IF SUB KEYS*/   02096000
*        /* THIS CONCLUDES THE RECFM ENTRY IN THE TABLE              */ 02097000
*                                                                  0393 02098000
*              2 * BIT(8)    INIT ('40'X),  /* KEY TYPE FLAGS       */  02099000
*              2 * CHAR(9)   INIT ('AMORG'),/* THIS KEYWORD         */  02100000
*              2 * BIT(8)    INIT ('00'X),  /* OR MASK OR LENGTH    */  02101000
*              2 * PTR(8) INIT (ADDR(JFCDSRG2) - ADDR(INFMJFCB)+1),     02102000
*              2 * BIT(32)   INIT('01000000'X), /* AMORG IS DUP     */  02103000
*              2 * BIT(8)    INIT('80'X),   /* VSAM DSORG ONLY      */  02104000
*              2 *           BIT(24),       /* RESERVED FOR EXPANS  */  02105000
*              2 * PTR(31)   INIT (0),      /* NO SUB KEYS          */  02106000
*        /* THIS CONCLUDES THE AMORG ENTRY IN THE TABLE             */  02107000
*                                                                  0393 02108000
*              2 * BIT(8)    INIT ('40'X),  /* KEY TYPE FLAGS       */  02109000
*              2 * CHAR(9)   INIT ('TRACE'),/* THIS KEYWORD         */  02110000
*              2 * BIT(8)    INIT ('04'X),  /* OR MASK OR LENGTH    */  02111000
*              2 * PTR(8) INIT (ADDR(JFCBFLG2) - ADDR(INFMJFCB)+1),     02112000
*              2 * BIT(32)   INIT('00800000'X), /* TRACE IS DUPLICAT*/  02113000
*              2 * BIT(8)    INIT ('FF'X),  /* ALLOW ALL DSORGS     */  02114000
*              2 *           BIT(24),       /* RESERVED FOR EXPANS  */  02115000
*              2 * PTR(31)   INIT (0),      /* NO SUB KEYS          */  02116000
*        /* THIS CONCLUDES THE TRACE ENTRY IN THE TABLE             */  02117000
*                                                                  0393 02118000
*              2 * BIT(8)    INIT ('80'X),  /* KEY TYPE FLAGS       */  02119000
*              2 * CHAR(9)   INIT ('OPTCD='),/* THIS KEYWORD        */  02120000
*              2 * BIT(8)    INIT ('00'X),  /* OR MASK OR LENGTH    */  02121000
*              2 * PTR(8) INIT (ADDR(JFCOPTCD) - ADDR(INFMJFCB)+1),     02122000
*              2 * BIT(32)   INIT('00400000'X), /*OPTCD IS DUP      */  02123000
*              2 * BIT(8)    INIT ('FF'X),  /* ALLOW ALL DSORGS     */  02124000
*              2 *           BIT(24),       /* RESERVED FOR EXPANS  */  02125000
*              2 * PTR(31)   INIT(ADDR(TABLE4)),/*CHAIN IF SUB KEYS*/   02126000
*        /* THIS CONCLUDES THE OPTCD ENTRY IN THE TABLE              */ 02127000
*                                                                  0393 02128000
*              2 * BIT(8)    INIT ('FF'X);  /* TABLE TERMINATOR     */  02129000
*                                                                  0393 02130000
*        DCL 1 TABLE2  LOCAL BDY(WORD),     /* CROPS KEY TABLE      */  02131000
*              2 * BIT(8)    INIT ('40'X),  /* KEY TYPE FLAGS       */  02132000
*              2 * CHAR(9)   INIT ('RCK'),  /* THIS KEYWORD         */  02133000
*              2 * BIT(8)    INIT ('80'X),  /* OR MASK OR LENGTH    */  02134000
*              2 * PTR(8)    INIT (ADDR(JFCAMCRO) - ADDR(INFMJFCB)+1),  02135000
*              2 * BIT(32)   INIT('00000000'X), /* NO DUPS OR BITS  */  02136000
*              2 * BIT(8)    INIT ('FF'X),  /* ALLOW ALL DSORGS     */  02137000
*              2 *           BIT(24),       /* RESERVED FOR EXPANS  */  02138000
*              2 * PTR(31)   INIT (0),      /* CHAIN IF SUB KEYS    */  02139000
*        /* THIS CONCLUDES THE CROPS=RCK ENTRY IN THE TABLE         */  02140000
*                                                                  0394 02141000
*              2 * BIT(8)    INIT ('40'X),  /* KEY TYPE FLAGS       */  02142000
*              2 * CHAR(9)   INIT ('NCK'),  /* THIS KEYWORD         */  02143000
*              2 * BIT(8)    INIT ('40'X),  /* OR MASK OR LENGTH    */  02144000
*              2 * PTR(8)    INIT (ADDR(JFCAMCRO) - ADDR(INFMJFCB)+1),  02145000
*              2 * BIT(32)   INIT('00000000'X), /* NO DUPS OR BITS  */  02146000
*              2 * BIT(8)    INIT ('FF'X),  /* ALLOW ALL DSORGS     */  02147000
*              2 *           BIT(24),       /* RESERVED FOR EXPANS  */  02148000
*              2 * PTR(31)   INIT (0),      /* CHAIN IF SUB KEYS    */  02149000
*        /* THIS CONCLUDES THE CROPS=NCK ENTRY IN THE TABLE         */  02150000
*                                                                  0394 02151000
*              2 * BIT(8)    INIT ('40'X),  /* KEY TYPE FLAGS       */  02152000
*              2 * CHAR(9)   INIT ('NRE'),  /* THIS KEYWORD         */  02153000
*              2 * BIT(8)    INIT ('20'X),  /* OR MASK OR LENGTH    */  02154000
*              2 * PTR(8)    INIT (ADDR(JFCAMCRO) - ADDR(INFMJFCB)+1),  02155000
*              2 * BIT(32)   INIT('00000000'X), /* NO DUPS OR BITS  */  02156000
*              2 * BIT(8)    INIT ('FF'X),  /* ALLOW ALL DSORGS     */  02157000
*              2 *           BIT(24),       /* RESERVED FOR EXPANS  */  02158000
*              2 * PTR(31)   INIT (0),      /* CHAIN IF SUB KEYS    */  02159000
*        /* THIS CONCLUDES THE CROPS=NRE ENTRY IN THE TABLE         */  02160000
*                                                                  0394 02161000
*              2 * BIT(8)    INIT ('40'X),  /* KEY TYPE FLAGS       */  02162000
*              2 * CHAR(9)   INIT ('NRC'),  /* THIS KEYWORD         */  02163000
*              2 * BIT(8)    INIT ('10'X),  /* OR MASK OR LENGTH    */  02164000
*              2 * PTR(8)    INIT (ADDR(JFCAMCRO) - ADDR(INFMJFCB)+1),  02165000
*              2 * BIT(32)   INIT('00000000'X), /* NO DUPS OR BITS  */  02166000
*              2 * BIT(8)    INIT ('FF'X),  /* ALLOW ALL DSORGS     */  02167000
*              2 *           BIT(24),       /* RESERVED FOR EXPANS  */  02168000
*              2 * PTR(31)   INIT (0),      /* CHAIN IF SUB KEYS    */  02169000
*        /* THIS CONCLUDES THE CROPS=NRC ENTRY IN THE TABLE         */  02170000
*                                                                  0394 02171000
*              2 * BIT(8)    INIT ('FF'X);  /* TABLE TERMINATOR     */  02172000
*                                                                  0394 02173000
*        DCL 1 TABLE3  LOCAL BDY(WORD),     /* CROPS KEY TABLE      */  02174000
*              2 * BIT(8)    INIT ('40'X),  /* KEY TYPE FLAGS       */  02175000
*              2 * CHAR(9)   INIT ('V'),    /* THIS KEYWORD         */  02176000
*              2 * BIT(8)    INIT ('40'X),  /* OR MASK OR LENGTH    */  02177000
*              2 * PTR(8) INIT (ADDR(JFCRECFM) - ADDR(INFMJFCB)+1),     02178000
*              2 * BIT(32)   INIT('00000000'X), /* NO DUPS OR BITS  */  02179000
*              2 * BIT(8)    INIT ('FF'X),  /* ALLOW ALL DSORGS     */  02180000
*              2 *           BIT(24),       /* RESERVED FOR EXPANS  */  02181000
*              2 * PTR(31)   INIT (0),      /* CHAIN IF SUB KEYS    */  02182000
*        /* THIS CONCLUDES THE RECFM=V ENTRY IN THE TABLE           */  02183000
*                                                                  0395 02184000
*              2 * BIT(8)    INIT ('40'X),  /* KEY TYPE FLAGS       */  02185000
*              2 * CHAR(9)   INIT ('VB'),   /* THIS KEYWORD         */  02186000
*              2 * BIT(8)    INIT ('50'X),  /* OR MASK OR LENGTH    */  02187000
*              2 * PTR(8) INIT (ADDR(JFCRECFM) - ADDR(INFMJFCB)+1),     02188000
*              2 * BIT(32)   INIT('00000000'X), /* NO DUPS OR BITS  */  02189000
*              2 * BIT(8)    INIT ('FF'X),  /* ALLOW ALL DSORGS     */  02190000
*              2 *           BIT(24),       /* RESERVED FOR EXPANS  */  02191000
*              2 * PTR(31)   INIT (0),      /* CHAIN IF SUB KEYS    */  02192000
*        /* THIS CONCLUDES THE RECFM=VB ENTRY IN THE TABLE          */  02193000
*                                                                  0395 02194000
*              2 * BIT(8)    INIT ('40'X),  /* KEY TYPE FLAGS       */  02195000
*              2 * CHAR(9)   INIT ('F'),    /* THIS KEYWORD         */  02196000
*              2 * BIT(8)    INIT ('80'X),  /* OR MASK OR LENGTH    */  02197000
*              2 * PTR(8) INIT (ADDR(JFCRECFM) - ADDR(INFMJFCB)+1),     02198000
*              2 * BIT(32)   INIT('00000000'X), /* NO DUPS OR BITS  */  02199000
*              2 * BIT(8)    INIT ('FF'X),  /* ALLOW ALL DSORGS     */  02200000
*              2 *           BIT(24),       /* RESERVED FOR EXPANS  */  02201000
*              2 * PTR(31)   INIT (0),      /* CHAIN IF SUB KEYS    */  02202000
*        /* THIS CONCLUDES THE RECFM=F ENTRY IN THE TABLE           */  02203000
*                                                                  0395 02204000
*              2 * BIT(8)    INIT ('40'X),  /* KEY TYPE FLAGS       */  02205000
*              2 * CHAR(9)   INIT ('FB'),   /* THIS KEYWORD         */  02206000
*              2 * BIT(8)    INIT ('90'X),  /* OR MASK OR LENGTH    */  02207000
*              2 * PTR(8) INIT (ADDR(JFCRECFM) - ADDR(INFMJFCB)+1),     02208000
*              2 * BIT(32)   INIT('00000000'X), /* NO DUPS OR BITS  */  02209000
*              2 * BIT(8)    INIT ('FF'X),  /* ALLOW ALL DSORGS     */  02210000
*              2 *           BIT(24),       /* RESERVED FOR EXPANS  */  02211000
*              2 * PTR(31)   INIT (0),      /* CHAIN IF SUB KEYS    */  02212000
*        /* THIS CONCLUDES THE RECFM=FB ENTRY IN THE TABLE          */  02213000
*                                                                  0395 02214000
*              2 * BIT(8)    INIT ('FF'X);  /* TABLE TERMINATOR     */  02215000
*                                                                  0395 02216000
*        DCL 1 TABLE4  LOCAL BDY(WORD),     /* OPTCD KEY TABLE      */  02217000
*              2 * BIT(8)    INIT ('40'X),  /* KEY TYPE FLAGS       */  02218000
*              2 * CHAR(9)   INIT ('I'),    /* THIS KEYWORD         */  02219000
*              2 * BIT(8)    INIT ('10'X),  /* OR MASK OR LENGTH    */  02220000
*              2 * PTR(8) INIT (ADDR(JFCOPTCD) - ADDR(INFMJFCB)+1),     02221000
*              2 * BIT(32)   INIT('00000000'X), /* NO DUPS OR BITS  */  02222000
*              2 * BIT(8)    INIT ('FF'X),  /* ALLOW ALL DSORGS     */  02223000
*              2 *           BIT(24),       /* RESERVED FOR EXPANS  */  02224000
*              2 * PTR(31)   INIT (0),      /* CHAIN IF SUB KEYS    */  02225000
*        /* THIS CONCLUDES THE OPTCD=I ENTRY IN THE TABLE           */  02226000
*                                                                  0396 02227000
*              2 * BIT(8)    INIT ('40'X),  /* KEY TYPE FLAGS       */  02228000
*              2 * CHAR(9)   INIT ('L'),    /* THIS KEYWORD         */  02229000
*              2 * BIT(8)    INIT ('02'X),  /* OR MASK OR LENGTH    */  02230000
*              2 * PTR(8) INIT (ADDR(JFCOPTCD) - ADDR(INFMJFCB)+1),     02231000
*              2 * BIT(32)   INIT('00000000'X), /* NO DUPS OR BITS  */  02232000
*              2 * BIT(8)    INIT ('FF'X),  /* ALLOW ALL DSORGS     */  02233000
*              2 *           BIT(24),       /* RESERVED FOR EXPANS  */  02234000
*              2 * PTR(31)   INIT (0),      /* CHAIN IF SUB KEYS    */  02235000
*        /* THIS CONCLUDES THE OPTCD=L ENTRY IN THE TABLE           */  02236000
*                                                                  0396 02237000
*              2 * BIT(8)    INIT ('40'X),  /* KEY TYPE FLAGS       */  02238000
*              2 * CHAR(9)   INIT ('IL'),   /* THIS KEYWORD         */  02239000
*              2 * BIT(8)    INIT ('12'X),  /* OR MASK OR LENGTH    */  02240000
*              2 * PTR(8) INIT (ADDR(JFCOPTCD) - ADDR(INFMJFCB)+1),     02241000
*              2 * BIT(32)   INIT('00000000'X), /* NO DUPS OR BITS  */  02242000
*              2 * BIT(8)    INIT ('FF'X),  /* ALLOW ALL DSORGS     */  02243000
*              2 *           BIT(24),       /* RESERVED FOR EXPANS  */  02244000
*              2 * PTR(31)   INIT (0),      /* CHAIN IF SUB KEYS    */  02245000
*        /* THIS CONCLUDES THE OPTCD=IL ENTRY IN THE TABLE          */  02246000
*                                                                  0396 02247000
*              2 * BIT(8)    INIT ('40'X),  /* KEY TYPE FLAGS       */  02248000
*              2 * CHAR(9)   INIT ('LI'),   /* THIS KEYWORD         */  02249000
*              2 * BIT(8)    INIT ('12'X),  /* OR MASK OR LENGTH    */  02250000
*              2 * PTR(8) INIT (ADDR(JFCOPTCD) - ADDR(INFMJFCB)+1),     02251000
*              2 * BIT(32)   INIT('00000000'X), /* NO DUPS OR BITS  */  02252000
*              2 * BIT(8)    INIT ('FF'X),  /* ALLOW ALL DSORGS     */  02253000
*              2 *           BIT(24),       /* RESERVED FOR EXPANS  */  02254000
*              2 * PTR(31)   INIT (0),      /* CHAIN IF SUB KEYS    */  02255000
*        /* THIS CONCLUDES THE OPTCD=LI ENTRY IN THE TABLE          */  02256000
*                                                                  0396 02257000
*              2 * BIT(8)    INIT ('FF'X);  /* TABLE TERMINATOR     */  02258000
*                                                                  0396 02259000
*        GEN;                               /* BUILD A GETMAIN LIST */  02260000
GETDATA  GETMAIN   EC,LV=88,MF=L                                        02261000
*        DCL GETDATA LABEL GENERATED;                              0398 02262000
*        DCL GETMAIN2 CHAR(12) BASED(ADDR(GETDATA)); /* CHARS OF LIST*/ 02263000
*                                                                  0399 02264000
*    END IEFNB902                           /* THE FINAL END OF IT  */  02265000
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      * 02266000
*/*%INCLUDE SYSLIB  (IEFJFCBN)                                        * 02267000
*;                                                                 0400 02268000
@EL00001 DS    0H                                                  0400 02269000
@EF00001 DS    0H                                                  0400 02270000
@ER00001 LM    @14,@12,12(@13)                                     0400 02271000
         BR    @14                                                 0400 02272000
@DATA    DS    0H                                                       02273000
@CH00737 DC    H'88'                                                    02274000
@SM00739 MVC   JFCB(0,@09),KEYBUF8(DATAPTR)                             02275000
@SM00744 MVC   JFCB(0,@09),DOUBLE4(@15)                                 02276000
@DATD    DSECT                                                          02277000
         DS    0F                                                       02278000
IEFNB902 CSECT                                                          02279000
         DS    0F                                                       02280000
@CF00045 DC    F'1'                                                     02281000
@CF00104 DC    F'2'                                                     02282000
@CF00109 DC    F'3'                                                     02283000
@CF00083 DC    F'4'                                                     02284000
@CF00168 DC    F'5'                                                     02285000
@CF00162 DC    F'8'                                                     02286000
@CF00210 DC    F'24'                                                    02287000
@CF00167 DC    F'32767'                                                 02288000
@CF00166 DC    F'8388607'                                               02289000
@DATD    DSECT                                                          02290000
         DS    0D                                                       02291000
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA                02292000
@ENDDATD EQU   *                                                        02293000
IEFNB902 CSECT                                                          02294000
         DS    0F                                                       02295000
@SIZDATD DC    AL1(0)                                                   02296000
         DC    AL3(@ENDDATD-@DATD)                                      02297000
         DS    0D                                                       02298000
@CB00127 DC    X'00000000'                                              02299000
TABLE1   DS    CL241                                                    02300000
         ORG   TABLE1                                                   02301000
@NM00009 DC    X'10'                                                    02302000
@NM00010 DC    CL9'BUFSP='                                              02303000
@NM00011 DC    X'03'                                                    02304000
@NM00012 DC    AL1(JFCBABFS-INFMJFCB+1)                                 02305000
@NM00013 DC    X'80000000'                                              02306000
@NM00014 DC    X'FF'                                                    02307000
@NM00015 DS    BL3                                                      02308000
@NM00016 DC    A(0)                                                     02309000
@NM00017 DC    X'10'                                                    02310000
@NM00018 DC    CL9'BUFND='                                              02311000
@NM00019 DC    X'02'                                                    02312000
@NM00020 DC    AL1(JFCBADBF-INFMJFCB+1)                                 02313000
@NM00021 DC    X'40000000'                                              02314000
@NM00022 DC    X'FF'                                                    02315000
@NM00023 DS    BL3                                                      02316000
@NM00024 DC    A(0)                                                     02317000
@NM00025 DC    X'10'                                                    02318000
@NM00026 DC    CL9'BUFNI='                                              02319000
@NM00027 DC    X'02'                                                    02320000
@NM00028 DC    AL1(JFCBAXBF-INFMJFCB+1)                                 02321000
@NM00029 DC    X'20000000'                                              02322000
@NM00030 DC    X'FF'                                                    02323000
@NM00031 DS    BL3                                                      02324000
@NM00032 DC    A(0)                                                     02325000
@NM00033 DC    X'10'                                                    02326000
@NM00034 DC    CL9'STRNO='                                              02327000
@NM00035 DC    X'02'                                                    02328000
@NM00036 DC    AL1(JFCAMSTR-INFMJFCB+1)                                 02329000
@NM00037 DC    X'10000000'                                              02330000
@NM00038 DC    X'FF'                                                    02331000
@NM00039 DS    BL3                                                      02332000
@NM00040 DC    A(0)                                                     02333000
@NM00041 DC    X'20'                                                    02334000
@NM00042 DC    CL9'SYNAD='                                              02335000
@NM00043 DC    X'08'                                                    02336000
@NM00044 DC    AL1(JFCAMSYN-INFMJFCB+1)                                 02337000
@NM00045 DC    X'08000000'                                              02338000
@NM00046 DC    X'FF'                                                    02339000
@NM00047 DS    BL3                                                      02340000
@NM00048 DC    A(0)                                                     02341000
@NM00049 DC    X'80'                                                    02342000
@NM00050 DC    CL9'CROPS='                                              02343000
@NM00051 DC    X'00'                                                    02344000
@NM00052 DC    AL1(JFCAMCRO-INFMJFCB+1)                                 02345000
@NM00053 DC    X'04000000'                                              02346000
@NM00054 DC    X'FF'                                                    02347000
@NM00055 DS    BL3                                                      02348000
@NM00056 DC    AL4(TABLE2)                                              02349000
@NM00057 DC    X'80'                                                    02350000
@NM00058 DC    CL9'RECFM='                                              02351000
@NM00059 DC    X'00'                                                    02352000
@NM00060 DC    AL1(JFCRECFM-INFMJFCB+1)                                 02353000
@NM00061 DC    X'02000000'                                              02354000
@NM00062 DC    X'FF'                                                    02355000
@NM00063 DS    BL3                                                      02356000
@NM00064 DC    AL4(TABLE3)                                              02357000
@NM00065 DC    X'40'                                                    02358000
@NM00066 DC    CL9'AMORG'                                               02359000
@NM00067 DC    X'00'                                                    02360000
@NM00068 DC    AL1(JFCDSRG2-INFMJFCB+1)                                 02361000
@NM00069 DC    X'01000000'                                              02362000
@NM00070 DC    X'80'                                                    02363000
@NM00071 DS    BL3                                                      02364000
@NM00072 DC    A(0)                                                     02365000
@NM00073 DC    X'40'                                                    02366000
@NM00074 DC    CL9'TRACE'                                               02367000
@NM00075 DC    X'04'                                                    02368000
@NM00076 DC    AL1(JFCBFLG2-INFMJFCB+1)                                 02369000
@NM00077 DC    X'00800000'                                              02370000
@NM00078 DC    X'FF'                                                    02371000
@NM00079 DS    BL3                                                      02372000
@NM00080 DC    A(0)                                                     02373000
@NM00081 DC    X'80'                                                    02374000
@NM00082 DC    CL9'OPTCD='                                              02375000
@NM00083 DC    X'00'                                                    02376000
@NM00084 DC    AL1(JFCOPTCD-INFMJFCB+1)                                 02377000
@NM00085 DC    X'00400000'                                              02378000
@NM00086 DC    X'FF'                                                    02379000
@NM00087 DS    BL3                                                      02380000
@NM00088 DC    AL4(TABLE4)                                              02381000
@NM00089 DC    X'FF'                                                    02382000
         ORG   TABLE1+241                                               02383000
MSGP1    DC    CL21'IEFXXXI AMP KEYWORD '                               02384000
MSGP9    DC    CL19' STEP NOT EXECUTED '                                02385000
MSGNBR1  DC    CL7'IEF447I'                                             02386000
MSGMDL1  DC    CL31' IS INVALID '                                       02387000
MSGNBR2  DC    CL7'IEF448I'                                             02388000
MSGMDL2  DC    CL31' VALUE            IS TOO LARGE '                    02389000
MSGNBR3  DC    CL7'IEF449I'                                             02390000
MSGMDL3  DC    CL31' REQUIRES A DECIMAL VALUE '                         02391000
MSGNBR4  DC    CL7'IEF175I'                                             02392000
MSGMDL4  DC    CL31'DUPLICATE OR CONFLICTING PARM'                      02393000
         DS    CL3                                                      02394000
TABLE2   DS    CL97                                                     02395000
         ORG   TABLE2                                                   02396000
@NM00090 DC    X'40'                                                    02397000
@NM00091 DC    CL9'RCK'                                                 02398000
@NM00092 DC    X'80'                                                    02399000
@NM00093 DC    AL1(JFCAMCRO-INFMJFCB+1)                                 02400000
@NM00094 DC    X'00000000'                                              02401000
@NM00095 DC    X'FF'                                                    02402000
@NM00096 DS    BL3                                                      02403000
@NM00097 DC    A(0)                                                     02404000
@NM00098 DC    X'40'                                                    02405000
@NM00099 DC    CL9'NCK'                                                 02406000
@NM00100 DC    X'40'                                                    02407000
@NM00101 DC    AL1(JFCAMCRO-INFMJFCB+1)                                 02408000
@NM00102 DC    X'00000000'                                              02409000
@NM00103 DC    X'FF'                                                    02410000
@NM00104 DS    BL3                                                      02411000
@NM00105 DC    A(0)                                                     02412000
@NM00106 DC    X'40'                                                    02413000
@NM00107 DC    CL9'NRE'                                                 02414000
@NM00108 DC    X'20'                                                    02415000
@NM00109 DC    AL1(JFCAMCRO-INFMJFCB+1)                                 02416000
@NM00110 DC    X'00000000'                                              02417000
@NM00111 DC    X'FF'                                                    02418000
@NM00112 DS    BL3                                                      02419000
@NM00113 DC    A(0)                                                     02420000
@NM00114 DC    X'40'                                                    02421000
@NM00115 DC    CL9'NRC'                                                 02422000
@NM00116 DC    X'10'                                                    02423000
@NM00117 DC    AL1(JFCAMCRO-INFMJFCB+1)                                 02424000
@NM00118 DC    X'00000000'                                              02425000
@NM00119 DC    X'FF'                                                    02426000
@NM00120 DS    BL3                                                      02427000
@NM00121 DC    A(0)                                                     02428000
@NM00122 DC    X'FF'                                                    02429000
         ORG   TABLE2+97                                                02430000
         DS    CL3                                                      02431000
TABLE3   DS    CL97                                                     02432000
         ORG   TABLE3                                                   02433000
@NM00123 DC    X'40'                                                    02434000
@NM00124 DC    CL9'V'                                                   02435000
@NM00125 DC    X'40'                                                    02436000
@NM00126 DC    AL1(JFCRECFM-INFMJFCB+1)                                 02437000
@NM00127 DC    X'00000000'                                              02438000
@NM00128 DC    X'FF'                                                    02439000
@NM00129 DS    BL3                                                      02440000
@NM00130 DC    A(0)                                                     02441000
@NM00131 DC    X'40'                                                    02442000
@NM00132 DC    CL9'VB'                                                  02443000
@NM00133 DC    X'50'                                                    02444000
@NM00134 DC    AL1(JFCRECFM-INFMJFCB+1)                                 02445000
@NM00135 DC    X'00000000'                                              02446000
@NM00136 DC    X'FF'                                                    02447000
@NM00137 DS    BL3                                                      02448000
@NM00138 DC    A(0)                                                     02449000
@NM00139 DC    X'40'                                                    02450000
@NM00140 DC    CL9'F'                                                   02451000
@NM00141 DC    X'80'                                                    02452000
@NM00142 DC    AL1(JFCRECFM-INFMJFCB+1)                                 02453000
@NM00143 DC    X'00000000'                                              02454000
@NM00144 DC    X'FF'                                                    02455000
@NM00145 DS    BL3                                                      02456000
@NM00146 DC    A(0)                                                     02457000
@NM00147 DC    X'40'                                                    02458000
@NM00148 DC    CL9'FB'                                                  02459000
@NM00149 DC    X'90'                                                    02460000
@NM00150 DC    AL1(JFCRECFM-INFMJFCB+1)                                 02461000
@NM00151 DC    X'00000000'                                              02462000
@NM00152 DC    X'FF'                                                    02463000
@NM00153 DS    BL3                                                      02464000
@NM00154 DC    A(0)                                                     02465000
@NM00155 DC    X'FF'                                                    02466000
         ORG   TABLE3+97                                                02467000
         DS    CL3                                                      02468000
TABLE4   DS    CL97                                                     02469000
         ORG   TABLE4                                                   02470000
@NM00156 DC    X'40'                                                    02471000
@NM00157 DC    CL9'I'                                                   02472000
@NM00158 DC    X'10'                                                    02473000
@NM00159 DC    AL1(JFCOPTCD-INFMJFCB+1)                                 02474000
@NM00160 DC    X'00000000'                                              02475000
@NM00161 DC    X'FF'                                                    02476000
@NM00162 DS    BL3                                                      02477000
@NM00163 DC    A(0)                                                     02478000
@NM00164 DC    X'40'                                                    02479000
@NM00165 DC    CL9'L'                                                   02480000
@NM00166 DC    X'02'                                                    02481000
@NM00167 DC    AL1(JFCOPTCD-INFMJFCB+1)                                 02482000
@NM00168 DC    X'00000000'                                              02483000
@NM00169 DC    X'FF'                                                    02484000
@NM00170 DS    BL3                                                      02485000
@NM00171 DC    A(0)                                                     02486000
@NM00172 DC    X'40'                                                    02487000
@NM00173 DC    CL9'IL'                                                  02488000
@NM00174 DC    X'12'                                                    02489000
@NM00175 DC    AL1(JFCOPTCD-INFMJFCB+1)                                 02490000
@NM00176 DC    X'00000000'                                              02491000
@NM00177 DC    X'FF'                                                    02492000
@NM00178 DS    BL3                                                      02493000
@NM00179 DC    A(0)                                                     02494000
@NM00180 DC    X'40'                                                    02495000
@NM00181 DC    CL9'LI'                                                  02496000
@NM00182 DC    X'12'                                                    02497000
@NM00183 DC    AL1(JFCOPTCD-INFMJFCB+1)                                 02498000
@NM00184 DC    X'00000000'                                              02499000
@NM00185 DC    X'FF'                                                    02500000
@NM00186 DS    BL3                                                      02501000
@NM00187 DC    A(0)                                                     02502000
@NM00188 DC    X'FF'                                                    02503000
         ORG   TABLE4+97                                                02504000
@00      EQU   00                      EQUATES FOR REGISTERS 0-15       02505000
@01      EQU   01                                                       02506000
@02      EQU   02                                                       02507000
@03      EQU   03                                                       02508000
@04      EQU   04                                                       02509000
@05      EQU   05                                                       02510000
@06      EQU   06                                                       02511000
@07      EQU   07                                                       02512000
@08      EQU   08                                                       02513000
@09      EQU   09                                                       02514000
@10      EQU   10                                                       02515000
@11      EQU   11                                                       02516000
@12      EQU   12                                                       02517000
@13      EQU   13                                                       02518000
@14      EQU   14                                                       02519000
@15      EQU   15                                                       02520000
REG15    EQU   @15                                                      02521000
STRINGPT EQU   @06                                                      02522000
LENGST   EQU   @04                                                      02523000
ENTRYPTR EQU   @07                                                      02524000
JFCBREG  EQU   @08                                                      02525000
WORKREG  EQU   @02                                                      02526000
REG1     EQU   @01                                                      02527000
PARMPTR  EQU   @03                                                      02528000
REG14    EQU   @14                                                      02529000
DATAPTR  EQU   @05                                                      02530000
REG13    EQU   @13                                                      02531000
JFCB     EQU   0                                                        02532000
INFMJFCB EQU   0                                                        02533000
JFCBDSNM EQU   INFMJFCB                                                 02534000
JFCBELNM EQU   INFMJFCB+44                                              02535000
JFCBTSDM EQU   INFMJFCB+52                                              02536000
JFCFCBID EQU   INFMJFCB+56                                              02537000
JFCBFRID EQU   JFCFCBID                                                 02538000
JFCAMCRO EQU   JFCBFRID                                                 02539000
JFCAMSTR EQU   JFCBFRID+2                                               02540000
JFCBADBF EQU   INFMJFCB+60                                              02541000
JFCBLTYP EQU   INFMJFCB+66                                              02542000
JFCBOTTR EQU   INFMJFCB+67                                              02543000
JFCBUFOF EQU   JFCBOTTR                                                 02544000
JFCBFLSQ EQU   JFCBOTTR+1                                               02545000
JFCFUNC  EQU   JFCBFLSQ                                                 02546000
JFCBMASK EQU   INFMJFCB+72                                              02547000
JFCBFLG1 EQU   JFCBMASK+5                                               02548000
JFCOPEN  EQU   JFCBFLG1                                                 02549000
JFCBFLG2 EQU   JFCBMASK+6                                               02550000
JFCDEFER EQU   JFCBFLG2                                                 02551000
JFCBIND1 EQU   INFMJFCB+86                                              02552000
JFCBIND2 EQU   INFMJFCB+87                                              02553000
JFCAMPTR EQU   INFMJFCB+88                                              02554000
JFCBUFRQ EQU   JFCAMPTR                                                 02555000
JFCBUFNO EQU   JFCBUFRQ                                                 02556000
JFCBGNCP EQU   JFCAMPTR+1                                               02557000
JFCBHIAR EQU   JFCBGNCP                                                 02558000
JFCBFALN EQU   JFCBHIAR                                                 02559000
JFCBFTEK EQU   JFCBFALN                                                 02560000
JFCBBFTA EQU   JFCBFTEK                                                 02561000
JFCEROPT EQU   INFMJFCB+92                                              02562000
JFCTRTCH EQU   INFMJFCB+93                                              02563000
DATAREA  EQU   0                                                        02564000
DOUBLE   EQU   DATAREA                                                  02565000
DOUBLE4  EQU   DOUBLE                                                   02566000
GETLIST  EQU   DATAREA+8                                                02567000
MAXPOS   EQU   GETLIST                                                  02568000
TEMPSAVE EQU   DATAREA+20                                               02569000
ZEROINIT EQU   DATAREA+24                                               02570000
RETURNS  EQU   ZEROINIT                                                 02571000
MSGCODE  EQU   ZEROINIT+4                                               02572000
RETCODE  EQU   ZEROINIT+8                                               02573000
PARENCNT EQU   DATAREA+36                                               02574000
ENTSAVE  EQU   DATAREA+40                                               02575000
LINKSAV1 EQU   DATAREA+44                                               02576000
LINKSAV2 EQU   DATAREA+48                                               02577000
LINKSAV3 EQU   DATAREA+52                                               02578000
LINKSAV4 EQU   DATAREA+56                                               02579000
NUMBER   EQU   DATAREA+60                                               02580000
KEYBUFER EQU   DATAREA+64                                               02581000
KEYBUF8  EQU   KEYBUFER                                                 02582000
KEYBUF   EQU   KEYBUF8                                                  02583000
ERRBITS  EQU   DATAREA+73                                               02584000
FINDERR  EQU   ERRBITS                                                  02585000
TEMPFLD  EQU   DATAREA+74                                               02586000
TEMPFLD2 EQU   TEMPFLD                                                  02587000
DUPBITS  EQU   DATAREA+78                                               02588000
COMPAT   EQU   DATAREA+82                                               02589000
MESSAGE  EQU   0                                                        02590000
MSGLEN   EQU   MESSAGE                                                  02591000
MSGZERO  EQU   MESSAGE+2                                                02592000
MSGCHAIN EQU   MESSAGE+4                                                02593000
MSGBUF   EQU   MESSAGE+8                                                02594000
MSGPREF  EQU   MSGBUF                                                   02595000
MSGNBR   EQU   MSGPREF                                                  02596000
MSGWORD  EQU   MSGBUF+21                                                02597000
MSGMDLE  EQU   MSGBUF+30                                                02598000
MSGVAL   EQU   MSGMDLE+7                                                02599000
MSGNOTE  EQU   MSGBUF+61                                                02600000
TENTRY   EQU   0                                                        02601000
FLAGS1   EQU   TENTRY                                                   02602000
SUBWORDS EQU   FLAGS1                                                   02603000
ORMASK   EQU   FLAGS1                                                   02604000
MOVECHAR EQU   FLAGS1                                                   02605000
CONVERT  EQU   FLAGS1                                                   02606000
POSITKEY EQU   FLAGS1                                                   02607000
SAMENTRY EQU   FLAGS1                                                   02608000
OVERFLOW EQU   FLAGS1                                                   02609000
ANDIT    EQU   FLAGS1                                                   02610000
KEYWORD  EQU   TENTRY+1                                                 02611000
BYTEMASK EQU   TENTRY+10                                                02612000
SIZE     EQU   BYTEMASK                                                 02613000
JFCBDISP EQU   TENTRY+11                                                02614000
CONFLICT EQU   TENTRY+12                                                02615000
DSORGS   EQU   TENTRY+16                                                02616000
ENTCHAIN EQU   TENTRY+20                                                02617000
LISTPTR  EQU   0                                                        02618000
GETMAIN2 EQU   0                                                        02619000
RETURNED EQU   0                                                        02620000
PARMLIST EQU   0                                                        02621000
STRINGS  EQU   PARMLIST                                                 02622000
JFCBPTR  EQU   PARMLIST+4                                               02623000
TEMPLIST EQU   PARMLIST+8                                               02624000
OVERPTR  EQU   TEMPLIST+4                                               02625000
JFCBOFST EQU   TEMPLIST+8                                               02626000
SUBPONL  EQU   PARMLIST+23                                              02627000
DSTRING  EQU   0                                                        02628000
PARMLENG EQU   DSTRING                                                  02629000
STRING   EQU   DSTRING+2                                                02630000
JFCBEXT  EQU   0                                                        02631000
JFCBCHAN EQU   JFCBEXT                                                  02632000
OVERFULL EQU   JFCBEXT+4                                                02633000
JFCKEYLE EQU   JFCTRTCH                                                 02634000
JFCCODE  EQU   JFCKEYLE                                                 02635000
JFCSTACK EQU   JFCTRTCH                                                 02636000
JFCMODE  EQU   JFCSTACK                                                 02637000
JFCSPPRT EQU   JFCTRTCH                                                 02638000
JFCBABFS EQU   JFCSPPRT+2                                               02639000
JFCLIMCT EQU   JFCBABFS                                                 02640000
JFCDSORG EQU   JFCSPPRT+5                                               02641000
JFCDSRG1 EQU   JFCDSORG                                                 02642000
JFCDSRG2 EQU   JFCDSORG+1                                               02643000
JFCORGAM EQU   JFCDSRG2                                                 02644000
JFCRECFM EQU   JFCSPPRT+7                                               02645000
JFCRCFM  EQU   JFCRECFM                                                 02646000
JFCOPTCD EQU   JFCSPPRT+8                                               02647000
JFCWVCSP EQU   JFCOPTCD                                                 02648000
JFCWVCIS EQU   JFCWVCSP                                                 02649000
JFCWVCBD EQU   JFCWVCIS                                                 02650000
JFCALLOW EQU   JFCOPTCD                                                 02651000
JFCRSV17 EQU   JFCALLOW                                                 02652000
JFCOVER  EQU   JFCRSV17                                                 02653000
JFCPCIBT EQU   JFCOPTCD                                                 02654000
JFCMAST  EQU   JFCPCIBT                                                 02655000
JFCEXT   EQU   JFCMAST                                                  02656000
JFCBCKPT EQU   JFCOPTCD                                                 02657000
JFCIND   EQU   JFCBCKPT                                                 02658000
JFCRSV18 EQU   JFCOPTCD                                                 02659000
JFCCYL   EQU   JFCRSV18                                                 02660000
JFCACT   EQU   JFCCYL                                                   02661000
JFCREDUC EQU   JFCOPTCD                                                 02662000
JFCRSV19 EQU   JFCREDUC                                                 02663000
JFCRSV20 EQU   JFCRSV19                                                 02664000
JFCRSV21 EQU   JFCOPTCD                                                 02665000
JFCDEL   EQU   JFCRSV21                                                 02666000
JFCOPTJ  EQU   JFCOPTCD                                                 02667000
JFCREORG EQU   JFCOPTJ                                                  02668000
JFCBLKSI EQU   JFCSPPRT+9                                               02669000
JFCBUFSI EQU   JFCBLKSI                                                 02670000
JFCBAXBF EQU   JFCBUFSI                                                 02671000
JFCAMSYN EQU   JFCSPPRT+11                                              02672000
JFCNCP   EQU   JFCAMSYN+2                                               02673000
JFCNTM   EQU   JFCAMSYN+3                                               02674000
JFCBFSEQ EQU   JFCNTM                                                   02675000
JFCPCI   EQU   JFCBFSEQ                                                 02676000
JFCRESRV EQU   JFCAMSYN+4                                               02677000
JFCUCSEG EQU   JFCRESRV                                                 02678000
JFCUCSOP EQU   JFCUCSEG+4                                               02679000
JFCOUTLI EQU   JFCUCSEG+5                                               02680000
JFCTHRSH EQU   JFCOUTLI                                                 02681000
JFCCPRI  EQU   JFCTHRSH                                                 02682000
JFCBVOLS EQU   JFCUCSEG+10                                              02683000
JFCBS001 EQU   JFCBVOLS                                                 02684000
JFCBPQTY EQU   JFCBS001+34                                              02685000
JFCBCTRI EQU   JFCBS001+37                                              02686000
JFCBSQTY EQU   JFCBS001+38                                              02687000
JFCFLGS1 EQU   JFCBS001+41                                              02688000
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS    02689000
JFCBEND  EQU   JFCBS001+58                                              02690000
JFCBSPTN EQU   JFCBS001+57                                              02691000
JFCBVLCT EQU   JFCBS001+56                                              02692000
JFCBDRLH EQU   JFCBS001+53                                              02693000
JFCBSBNM EQU   JFCBS001+50                                              02694000
JFCBABST EQU   JFCBS001+48                                              02695000
JFCBSPNM EQU   JFCBS001+45                                              02696000
JFCBDQTY EQU   JFCBS001+42                                              02697000
JFCBUAFF EQU   JFCFLGS1                                                 02698000
JFCRSV45 EQU   JFCFLGS1                                                 02699000
JFCVRDS  EQU   JFCFLGS1                                                 02700000
JFCBCEOV EQU   JFCFLGS1                                                 02701000
JFCRSV42 EQU   JFCFLGS1                                                 02702000
JFCBADSP EQU   JFCFLGS1                                                 02703000
JFCTOPEN EQU   JFCFLGS1                                                 02704000
JFCBDLET EQU   JFCFLGS1                                                 02705000
JFCRQID  EQU   JFCBSQTY                                                 02706000
JFCROUND EQU   JFCBCTRI                                                 02707000
JFCALX   EQU   JFCBCTRI                                                 02708000
JFCMIXG  EQU   JFCBCTRI                                                 02709000
JFCONTIG EQU   JFCBCTRI                                                 02710000
JFCRSV29 EQU   JFCBCTRI                                                 02711000
JFCBMSGP EQU   JFCBCTRI                                                 02712000
JFCBSPAC EQU   JFCBCTRI                                                 02713000
JFCRUNIT EQU   JFCBPQTY                                                 02714000
JFCBEXAD EQU   JFCBS001+31                                              02715000
JFCBEXTL EQU   JFCBS001+30                                              02716000
JFCMSVGP EQU   JFCBS001+22                                              02717000
@NM00008 EQU   JFCBS001                                                 02718000
JFCAVOLS EQU   JFCBVOLS                                                 02719000
JFCBNVOL EQU   JFCUCSEG+9                                               02720000
JFCBNTCS EQU   JFCUCSEG+8                                               02721000
JFCSOWA  EQU   JFCOUTLI+1                                               02722000
JFCSEND  EQU   JFCCPRI                                                  02723000
JFCEQUAL EQU   JFCCPRI                                                  02724000
JFCRECV  EQU   JFCCPRI                                                  02725000
JFCRSV34 EQU   JFCCPRI                                                  02726000
JFCRSV33 EQU   JFCCPRI                                                  02727000
JFCRSV55 EQU   JFCCPRI                                                  02728000
JFCRSV54 EQU   JFCCPRI                                                  02729000
JFCRSV53 EQU   JFCCPRI                                                  02730000
JFCRSV27 EQU   JFCUCSOP                                                 02731000
JFCRSV26 EQU   JFCUCSOP                                                 02732000
JFCFCBVR EQU   JFCUCSOP                                                 02733000
JFCFCBAL EQU   JFCUCSOP                                                 02734000
JFCVER   EQU   JFCUCSOP                                                 02735000
JFCRSV25 EQU   JFCUCSOP                                                 02736000
JFCFOLD  EQU   JFCUCSOP                                                 02737000
JFCBEXTP EQU   JFCUCSOP                                                 02738000
JFCUCSID EQU   JFCUCSEG                                                 02739000
JFCINTVL EQU   JFCSPPRT+19                                              02740000
JFCDBUFN EQU   JFCRESRV+3                                               02741000
JFCCYLOF EQU   JFCRESRV+2                                               02742000
JFCRKP   EQU   JFCRESRV                                                 02743000
JFCPCIR2 EQU   JFCPCI                                                   02744000
JFCPCIR1 EQU   JFCPCI                                                   02745000
JFCPCIN2 EQU   JFCPCI                                                   02746000
JFCPCIN1 EQU   JFCPCI                                                   02747000
JFCPCIA2 EQU   JFCPCI                                                   02748000
JFCPCIA1 EQU   JFCPCI                                                   02749000
JFCPCIX2 EQU   JFCPCI                                                   02750000
JFCPCIX1 EQU   JFCPCI                                                   02751000
JFCBUFMX EQU   JFCNCP                                                   02752000
JFCLRECL EQU   JFCAMSYN                                                 02753000
JFCREL   EQU   JFCREORG                                                 02754000
JFCRSV22 EQU   JFCDEL                                                   02755000
JFCSRCHD EQU   JFCRSV20                                                 02756000
JFCOPTQ  EQU   JFCACT                                                   02757000
JFCFEED  EQU   JFCIND                                                   02758000
JFCCBWU  EQU   JFCEXT                                                   02759000
JFCWUMSG EQU   JFCOVER                                                  02760000
JFCSDNAM EQU   JFCWVCBD                                                 02761000
@NM00007 EQU   JFCRECFM                                                 02762000
JFCCHAR  EQU   JFCRECFM                                                 02763000
JFCRFS   EQU   JFCRECFM                                                 02764000
JFCRFB   EQU   JFCRECFM                                                 02765000
JFCRFO   EQU   JFCRCFM                                                  02766000
JFCFMREC EQU   JFCRCFM                                                  02767000
JFCRSV16 EQU   JFCDSRG2                                                 02768000
JFCRSV15 EQU   JFCDSRG2                                                 02769000
JFCORGTR EQU   JFCDSRG2                                                 02770000
JFCRSV13 EQU   JFCDSRG2                                                 02771000
JFCORGTQ EQU   JFCDSRG2                                                 02772000
JFCORGTX EQU   JFCDSRG2                                                 02773000
JFCORGGS EQU   JFCDSRG2                                                 02774000
JFCORGU  EQU   JFCDSRG1                                                 02775000
JFCORGPO EQU   JFCDSRG1                                                 02776000
JFCORGMQ EQU   JFCDSRG1                                                 02777000
JFCORGCQ EQU   JFCDSRG1                                                 02778000
JFCORGCX EQU   JFCDSRG1                                                 02779000
JFCORGDA EQU   JFCDSRG1                                                 02780000
JFCORGPS EQU   JFCDSRG1                                                 02781000
JFCORGIS EQU   JFCDSRG1                                                 02782000
JFCTRKBL EQU   JFCLIMCT+1                                               02783000
@NM00006 EQU   JFCLIMCT                                                 02784000
JFCDEN   EQU   JFCSPPRT+1                                               02785000
JFCPRTSP EQU   JFCSPPRT                                                 02786000
JFCONE   EQU   JFCMODE                                                  02787000
JFCTWO   EQU   JFCMODE                                                  02788000
JFCRSV07 EQU   JFCMODE                                                  02789000
JFCRSV06 EQU   JFCMODE                                                  02790000
JFCMODER EQU   JFCMODE                                                  02791000
JFCMODEO EQU   JFCMODE                                                  02792000
JFCEBCD  EQU   JFCMODE                                                  02793000
JFCBIN   EQU   JFCMODE                                                  02794000
JFCRSV32 EQU   JFCCODE                                                  02795000
JFCTTY   EQU   JFCCODE                                                  02796000
JFCASCII EQU   JFCCODE                                                  02797000
JFCNCR   EQU   JFCCODE                                                  02798000
JFCBUR   EQU   JFCCODE                                                  02799000
JFCFRI   EQU   JFCCODE                                                  02800000
JFCBCD   EQU   JFCCODE                                                  02801000
JFCNOCON EQU   JFCCODE                                                  02802000
OVERID   EQU   PARMLIST+22                                              02803000
@NM00001 EQU   PARMLIST+20                                              02804000
OVEROFST EQU   TEMPLIST+10                                              02805000
MSGPTR   EQU   TEMPLIST                                                 02806000
@NM00004 EQU   TENTRY+17                                                02807000
VSAM     EQU   DSORGS                                                   02808000
@NM00003 EQU   CONFLICT+1                                               02809000
OPTCD    EQU   CONFLICT+1                                               02810000
TRACE    EQU   CONFLICT+1                                               02811000
AMORG    EQU   CONFLICT                                                 02812000
RECFM    EQU   CONFLICT                                                 02813000
CROPS    EQU   CONFLICT                                                 02814000
SYNAD    EQU   CONFLICT                                                 02815000
STRNO    EQU   CONFLICT                                                 02816000
BUFNI    EQU   CONFLICT                                                 02817000
BUFND    EQU   CONFLICT                                                 02818000
BUFSP    EQU   CONFLICT                                                 02819000
MAXKEYS  EQU   JFCBDISP                                                 02820000
@NM00002 EQU   MSGMDLE                                                  02821000
JFCRSV05 EQU   JFCEROPT                                                 02822000
JFCRSV04 EQU   JFCEROPT                                                 02823000
JFCRSV03 EQU   JFCEROPT                                                 02824000
JFCRSV02 EQU   JFCEROPT                                                 02825000
JFCTOPT  EQU   JFCEROPT                                                 02826000
JFCABN   EQU   JFCEROPT                                                 02827000
JFCSKP   EQU   JFCEROPT                                                 02828000
JFCACC   EQU   JFCEROPT                                                 02829000
JFCBUFL  EQU   JFCAMPTR+2                                               02830000
JFCFWORD EQU   JFCBFTEK                                                 02831000
JFCDWORD EQU   JFCBFTEK                                                 02832000
JFCHIER1 EQU   JFCBFTEK                                                 02833000
JFCDYN   EQU   JFCBFTEK                                                 02834000
JFCEXC   EQU   JFCBFTEK                                                 02835000
JFCBBFTR EQU   JFCBBFTA                                                 02836000
JFCSIM   EQU   JFCBBFTA                                                 02837000
JFCHIER  EQU   JFCBFTEK                                                 02838000
JFCBFOUT EQU   JFCBUFNO                                                 02839000
JFCBUFIN EQU   JFCBUFNO                                                 02840000
JFCTEMP  EQU   JFCBIND2                                                 02841000
JFCREQ   EQU   JFCBIND2                                                 02842000
JFCENT   EQU   JFCBIND2                                                 02843000
JFCSHARE EQU   JFCBIND2                                                 02844000
JFCSECUR EQU   JFCBIND2                                                 02845000
JFCDISP  EQU   JFCBIND2                                                 02846000
JFCPDS   EQU   JFCBIND1                                                 02847000
JFCGDG   EQU   JFCBIND1                                                 02848000
JFCADDED EQU   JFCBIND1                                                 02849000
JFCLOC   EQU   JFCBIND1                                                 02850000
JFCRLSE  EQU   JFCBIND1                                                 02851000
JFCBXPDT EQU   INFMJFCB+83                                              02852000
JFCBCRDT EQU   INFMJFCB+80                                              02853000
JFCBOPS2 EQU   JFCBMASK+7                                               02854000
JFCRCTLG EQU   JFCBFLG2                                                 02855000
JFCBBUFF EQU   JFCBFLG2                                                 02856000
JFCTRACE EQU   JFCBFLG2                                                 02857000
JFCSDRPS EQU   JFCBFLG2                                                 02858000
JFCMODNW EQU   JFCBFLG2                                                 02859000
JFCNRPS  EQU   JFCDEFER                                                 02860000
JFCOUTOP EQU   JFCBFLG2                                                 02861000
JFCINOP  EQU   JFCBFLG2                                                 02862000
JFCBPWBP EQU   JFCOPEN                                                  02863000
@NM00005 EQU   JFCOPEN                                                  02864000
JFCDUAL  EQU   JFCBFLG1                                                 02865000
JFCSLDES EQU   JFCBFLG1                                                 02866000
JFCSLCRE EQU   JFCBFLG1                                                 02867000
JFCSTAND EQU   JFCBFLG1                                                 02868000
JFCBOPS1 EQU   JFCBMASK                                                 02869000
JFCBVLSQ EQU   INFMJFCB+70                                              02870000
JFCRSV31 EQU   JFCFUNC                                                  02871000
JFCFNCBT EQU   JFCFUNC                                                  02872000
JFCFNCBX EQU   JFCFUNC                                                  02873000
JFCFNCBD EQU   JFCFUNC                                                  02874000
JFCFNCBW EQU   JFCFUNC                                                  02875000
JFCFNCBP EQU   JFCFUNC                                                  02876000
JFCFNCBR EQU   JFCFUNC                                                  02877000
JFCFNCBI EQU   JFCFUNC                                                  02878000
JFCBFOFL EQU   JFCBUFOF                                                 02879000
JFCNL    EQU   JFCBLTYP                                                 02880000
JFCSL    EQU   JFCBLTYP                                                 02881000
JFCNSL   EQU   JFCBLTYP                                                 02882000
JFCSUL   EQU   JFCBLTYP                                                 02883000
JFCBLP   EQU   JFCBLTYP                                                 02884000
JFCBLTM  EQU   JFCBLTYP                                                 02885000
JFCBAL   EQU   JFCBLTYP                                                 02886000
JFCRSV38 EQU   JFCBLTYP                                                 02887000
JFCVINDX EQU   INFMJFCB+64                                              02888000
JFCNLREC EQU   INFMJFCB+62                                              02889000
JFCBDSCB EQU   INFMJFCB+53                                              02890000
JFCPAT   EQU   JFCBTSDM                                                 02891000
JFCNDCB  EQU   JFCBTSDM                                                 02892000
JFCNDSCB EQU   JFCBTSDM                                                 02893000
JFCNWRIT EQU   JFCBTSDM                                                 02894000
JFCTTR   EQU   JFCBTSDM                                                 02895000
JFCSDS   EQU   JFCBTSDM                                                 02896000
JFCVSL   EQU   JFCBTSDM                                                 02897000
JFCCAT   EQU   JFCBTSDM                                                 02898000
JFCIPLTX EQU   JFCBELNM                                                 02899000
JFCBQNAM EQU   JFCBDSNM                                                 02900000
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS      02901000
@RC00036 EQU   @RC00031                                                 02902000
@RC00059 EQU   @RC00056                                                 02903000
@RC00074 EQU   @RC00071                                                 02904000
@RC00109 EQU   @EL00002                                                 02905000
@RC00157 EQU   @RC00131                                                 02906000
@RC00150 EQU   @RC00131                                                 02907000
@RC00144 EQU   @RC00131                                                 02908000
@RC00188 EQU   @EL00004                                                 02909000
@RC00195 EQU   @EL00004                                                 02910000
@RC00286 EQU   @RC00284                                                 02911000
@RF00337 EQU   @RC00335                                                 02912000
@RF00342 EQU   @RC00340                                                 02913000
@RC00114 EQU   @RC00109                                                 02914000
@RC00198 EQU   @RC00195                                                 02915000
@ENDDATA EQU   *                                                        02916000
         END   IEFNB902,(C'PLS1830',0701,76254)                         02917000
