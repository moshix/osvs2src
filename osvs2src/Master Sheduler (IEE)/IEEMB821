         TITLE 'IEEMB821 - SMF PARAMETER PROCESSOR                   '  00001000
IEEMB821 CSECT ,                                                01.0001 00002000
@MAINENT DS    0H                                               01.0001 00003000
         USING *,@15                                            01.0001 00004000
         B     @PROLOG                                          01.0001 00005000
         DC    AL1(16)                                          01.0001 00006000
         DC    C'IEEMB821  73.027'                              01.0001 00007000
         DROP  @15                                                      00008000
@PROLOG  STM   @14,@12,12(@13)                                  01.0001 00009000
         BALR  @12,0                                            01.0001 00010000
@PSTART  DS    0H                                               01.0001 00011000
         USING @PSTART,@12                                      01.0001 00012000
         L     @00,@SIZDATD                                     01.0001 00013000
         GETMAIN R,LV=(0)                                               00014000
         LR    @11,@01                                          01.0001 00015000
         USING @DATD,@11                                        01.0001 00016000
         ST    @13,@SA00001+4                                   01.0001 00017000
         LM    @00,@01,20(@13)                                  01.0001 00018000
         ST    @11,8(,@13)                                      01.0001 00019000
         LR    @13,@11                                          01.0001 00020000
         MVC   @PC00001(12),0(@01)                              01.0001 00021000
REPLYN   EQU   100                                                      00022000
*                                           MODULE                   */ 00023000
*                                                               03.0028 00024000
*SMCAPTR=SMCADDR;                      /* GET ADDRESS OF SMCA        */ 00025000
         L     @10,@PC00001+8                                   01.0029 00026000
         L     SMCAPTR,SMCADDR(,@10)                            01.0029 00027000
*/********************************************************************/ 00028000
*/*                                                                  */ 00029000
*/*SEGMENT NAME= SMCADFLT                                            */ 00030000
*/*                                                                  */ 00031000
*/*DESCRIPTIVE NAME= ESSTABLISH SMCA OPTION DEFAULTS                 */ 00032000
*/*                                                                  */ 00033000
*/*FUNCTION=                                                         */ 00034000
*/*  THIS SEGMENT SETS UP THE DEFAULTS FOR THOSE SMCA                */ 00035000
*/*  SMCA OPTIONS WHICH REQUIRE SETTINGS OF OTHER THAN ZEROS         */ 00036000
*/*  THEY INCLUDE MAN=, EXT=, AND OPT= PARAMETER OPTIONS             */ 00037000
*/*                                                                  */ 00038000
*/*  OPERATION= NO SPECIAL ALGORITHMS ARE USED                       */ 00039000
*/*                                                                  */ 00040000
*/*ENTRY POINT= IN-LINE SEGMENT                                      */ 00041000
*/*  INPUT=                                                          */ 00042000
*/*    SMCA CONTROL BLOCK                                            */ 00043000
*/*EXIT=                                                             */ 00044000
*/*  CONDITION= NORMAL, ALL DEFALUTS SET IN SMCA                     */ 00045000
*/*  OUTPUT                                                          */ 00046000
*/*    SMCAMAN SET TO ONE                                            */ 00047000
*/*    SMCAUSER SET TO ONE                                           */ 00048000
*/*    SMCAEXT SET TO ONE                                            */ 00049000
*/*    SMCAOPT1 SET TO ONE                                           */ 00050000
*/*    SMCAOPT2 SET TO ONE                                           */ 00051000
*/*  RETURN CODE= NONE                                               */ 00052000
*/*                                                                  */ 00053000
*/********************************************************************/ 00054000
*SMCAMAN='1'B;                         /* MAN=ALL ASSUMED            */ 00055000
*SMCAUSER='1'B;                                                 02.0031 00056000
         OI    SMCAMAN(SMCAPTR),B'11000000'                     02.0031 00057000
*SMCAEXT='1'B;                         /* EXT=YES ASSUMED            */ 00058000
*SMCAOPT1='1'B;                        /* OPT=2 ASSUMED              */ 00059000
*SMCAOPT2='1'B;                                                 02.0034 00060000
         OI    SMCAEXT(SMCAPTR),B'11100000'                     02.0034 00061000
*/********************************************************************/ 00062000
*/*                                                                  */ 00063000
*/*SEGMENT NAME= PLIBPREP                                            */ 00064000
*/*                                                                  */ 00065000
*/*DESCRIPTIVE NAME= SYS1.PARMLIB PROCESSOR                          */ 00066000
*/*                                                                  */ 00067000
*/*FUNCTION=                                                         */ 00068000
*/*  THIS SEGMENT OPENS, READS AND CLOSES PARMLIB                    */ 00069000
*/*  IF AN OPEN, I/O OR MEMBER NOT FOUND ERROR OCCURS, AN            */ 00070000
*/*  APPROPRIATE ERROR MESSAGE IS ISSUED AND THE OPERATOR            */ 00071000
*/*  PROMPTED TO ENTER THE SMF PARAMETERES                           */ 00072000
*/*                                                                  */ 00073000
*/*  OPERATION= NO SPECIAL ALGORITHMS ARE USED                       */ 00074000
*/*                                                                  */ 00075000
*/*ENTRY POINT= IN-LINE SEGMENT                                      */ 00076000
*/*  INPUT= NONE                                                     */ 00077000
*/*EXIT=                                                             */ 00078000
*/*  CONDITION= THE PARMLIB MEMBER HAS BEEN PROCESSED                */ 00079000
*/*  OUTPUT=                                                         */ 00080000
*/*    BUFFER -THE RECORDS FROM THE PARMLIB MEMBER ARE COMPRESSED,   */ 00081000
*/*      AND CONCATINATED INTO THIS AREA                             */ 00082000
*/*  RETURN CODE= NONE                                               */ 00083000
*/*                                                                  */ 00084000
*/*  CONDITION= AN I/O ERROR, OPEN ERROR OR MEMBER NOT FOUND OCCURED */ 00085000
*/*  OUTPUT=                                                         */ 00086000
*/*    BUFFER - AN ERROR MESSAGE ISSUED AND THE OPERATOR             */ 00087000
*/*      RESPONCE PLACED INTO THIS AREA                              */ 00088000
*/*  RETURN CODE= NONE                                               */ 00089000
*/*                                                                  */ 00090000
*/********************************************************************/ 00091000
*PLIBERR='0'B;                         /* INIT GENERAL ERROR SWC     */ 00092000
         NI    PLIBERR,B'01111111'                              02.0035 00093000
*NOTFNDSC='0'B;                        /* INIT NOT FOUND SWC         */ 00094000
*IOERRSC='0'B;                         /* INIT I/O ERROR SWC         */ 00095000
*CONSOLE='0'B;                         /* INIT OPERATOR INPUT SWC    */ 00096000
         NI    NOTFNDSC,B'01011011'                             02.0038 00097000
*GEN(MVC  RMACS(MACLEN),DMACS);        /* INIT L FORM MACROS         */ 00098000
         MVC  RMACS(MACLEN),DMACS                                       00099000
*/********************************************************************/ 00100000
*/*                                                                  */ 00101000
*/*SEGMENT NAME= OPENPLIB                                            */ 00102000
*/*                                                                  */ 00103000
*/*DESCRIPTIVE NAME= PARMLIB OPEN PROCESSING                         */ 00104000
*/*                                                                  */ 00105000
*/*FUNCTION=                                                         */ 00106000
*/*  SYS1.PARMLIB IS OPENED. IF AN OPEN FAILURE OCCURS               */ 00107000
*/*  MESSAGE IEE365I IS ISSUED TO THE OPERATOR                       */ 00108000
*/*                                                                  */ 00109000
*/*  OPERATION= NO SPECIAL ALGORITHMS ARE USED                       */ 00110000
*/*                                                                  */ 00111000
*/*ENTRY POINT= IN-LINE SEGMENT                                      */ 00112000
*/*  INPUT=                                                          */ 00113000
*/*    I365I - MESSAGE FROM MESSAGE MODULE IEEMB824                  */ 00114000
*/*EXIT=                                                             */ 00115000
*/*  CONDITION= NORMAL, SYS1.PARMLIB OPENED SUCCESSFULLY             */ 00116000
*/*  OUTPUT=                                                         */ 00117000
*/*    DCBLST - DCB FOR PARMLIB OPENED                               */ 00118000
*/*  RETURN CODE= NONE                                               */ 00119000
*/*                                                                  */ 00120000
*/*  CONDITION= ERROR, SYS1.PARMLIB NOT OPENED                       */ 00121000
*/*  OUTPUT=                                                         */ 00122000
*/*    PLIBERR - SET TO INDICATE ERROR IN PROCESSING                 */ 00123000
*/*  RETURN CODE= NONE                                               */ 00124000
*/*                                                                  */ 00125000
*/********************************************************************/ 00126000
*GEN(OPEN (DCBLST,INPUT),MF=(E,OPENLST)); /* OPEN PARMLIB            */ 00127000
         OPEN (DCBLST,INPUT),MF=(E,OPENLST)                             00128000
*IF DCBOFOPN='0'B THEN                 /* WAS PARMLIB OPENED         */ 00129000
         LA    @10,DCBLST                                       03.0041 00130000
         TM    DCBOFOPN+40(@10),B'00010000'                     03.0041 00131000
         BNZ   @RF00041                                         03.0041 00132000
*  DO;                                 /* NO,PROCESS ERROR           */ 00133000
*    PLIBERR='1'B;                     /* INDICATE GENERAL ERROR     */ 00134000
         OI    PLIBERR,B'10000000'                              03.0043 00135000
*    MSGBUF(1:L365I+4)=I365I;          /* GET MSG IEE365I            */ 00136000
         L     @10,@CV00049                                     03.0044 00137000
         LA    @04,3                                            03.0044 00138000
         AH    @04,L365I(,@10)                                  03.0044 00139000
         L     @10,@CV00049                                     03.0044 00140000
         EX    @04,@SM00762                                     03.0044 00141000
*    MSGBUF(22:28)=CPARMLIB;           /* MOVE 'PARMLIB' TO MSG TEXT */ 00142000
         MVC   MSGBUF+21(7),@CC00096                            03.0045 00143000
*    GEN(WTO  ,MF=(E,MSGBUF));         /* WRITE MESSAGE              */ 00144000
         WTO  ,MF=(E,MSGBUF)                                            00145000
*  END;                                                         03.0047 00146000
*IF PLIBERR='0'B THEN                  /* OPEN SUCCESSFUL            */ 00147000
@RF00041 TM    PLIBERR,B'10000000'                              02.0048 00148000
         BNZ   @RF00048                                         02.0048 00149000
*  DO;                                 /* YES, LETS TRY TO READ IT   */ 00150000
*/********************************************************************/ 00151000
*/*                                                                  */ 00152000
*/*SEGMENT NAME= FINDMEM                                             */ 00153000
*/*                                                                  */ 00154000
*/*DESCRIPTIVE NAME= FIND SMF PARMLIB MEMBER IN SYS1.PARMLIB         */ 00155000
*/*                                                                  */ 00156000
*/*FUNCTION=                                                         */ 00157000
*/*  POSTION SYS1.PARMLIB (FIND) TO THE SMF PARMLIB                  */ 00158000
*/*  MEMBER TO BE USED FOR THIS IPL. IF AN I/O ERROR OR MEMBER       */ 00159000
*/*  NOT FOUND CONDITION OCCURS, APPROPRIATE ERROR SWITCHES          */ 00160000
*/*  ARE SET.                                                        */ 00161000
*/*                                                                  */ 00162000
*/*  OPERATION= NO SPECIAL ALGORITHMS ARE USED                       */ 00163000
*/*                                                                  */ 00164000
*/*ENTRY POINT= IN-LINE SEGMENT                                      */ 00165000
*/*  INPUT=                                                          */ 00166000
*/*    DCBLST - OPEN DCB FOR PARMLIB                                 */ 00167000
*/*    PARMMEM - PARMLIB MEMBER NAME FOR THIS IPL                    */ 00168000
*/*EXIT=                                                             */ 00169000
*/*  CONDITION= NORMAL, PARMLIB MEMBER FOUND SUCCESSFULLY            */ 00170000
*/*  OUTPUT=                                                         */ 00171000
*/*    SYS1.PARMLIB POSITIONED TO PARMLIB MEMBER                     */ 00172000
*/*  RETURN CODE= NONE                                               */ 00173000
*/*                                                                  */ 00174000
*/*  CONDITION= PARMLIB MEMBER NOT FOUND                             */ 00175000
*/*  OUTPUT=                                                         */ 00176000
*/*    NOTFNDSC - SET TO INDICATE MEMBER NOT FOUND                   */ 00177000
*/*  RETURN CODE= NONE                                               */ 00178000
*/*                                                                  */ 00179000
*/*  CONDITION= I/O ERROR ON PARMLIB DIRECTORY                       */ 00180000
*/*  OUTPUT=                                                         */ 00181000
*/*    IOERRSC - SET TO INDICATE I/O ERROR ON PARMLIB                */ 00182000
*/*  RETURN CODE= NONE                                               */ 00183000
*/*                                                                  */ 00184000
*/********************************************************************/ 00185000
*RFY (R2,R15) RSTD;                    /* GET REGISTER CONTROL       */ 00186000
*R2=ADDR(PARMMEM);                     /* ADDRESS OF SMF MEMBER      */ 00187000
         L     R2,@PC00001                                      03.0051 00188000
*GEN(FIND  DCBLST,(R2),D);             /* FIND SMF PARMLIB MEMBER    */ 00189000
         FIND  DCBLST,(R2),D                                            00190000
*FNDRTNCD=R15;                         /* SAVE FIND RETURN CODE      */ 00191000
         LR    FNDRTNCD,R15                                     03.0053 00192000
*RFY (R2,R15) UNRSTD;                  /* RELEASE REGISTER CONTROL   */ 00193000
*IF FNDRTNCD^=0 THEN                   /* IS MEMBER IN PARMLIB       */ 00194000
         LTR   FNDRTNCD,FNDRTNCD                                03.0055 00195000
         BZ    @RF00055                                         03.0055 00196000
* DO;                                  /* NO,FIND OUT WHY NOT        */ 00197000
*   PLIBERR='1'B;                      /* INDICATE GENERAL ERROR     */ 00198000
         OI    PLIBERR,B'10000000'                              03.0057 00199000
*   IF FNDRTNCD=4 THEN                 /* MEMBER NOT IN PARMLIB      */ 00200000
         CH    FNDRTNCD,@CH00089                                03.0058 00201000
         BNE   @RF00058                                         03.0058 00202000
*     NOTFNDSC='1'B;                   /* YES, INDICATE NOT OFUND    */ 00203000
         OI    NOTFNDSC,B'00000100'                             03.0059 00204000
*   ELSE                               /* IT MUST BE I/O ERROR       */ 00205000
*     IOERRSC='1'B;                    /* INDICATE I/O ERROR         */ 00206000
         B     @RC00058                                         03.0060 00207000
@RF00058 OI    IOERRSC,B'00100000'                              03.0060 00208000
* END;                                                          03.0061 00209000
@RC00058 DS    0H                                               03.0062 00210000
*    IF PLIBERR='0'B THEN              /* WAS MEMBER FOUND           */ 00211000
@RF00055 TM    PLIBERR,B'10000000'                              02.0062 00212000
         BNZ   @RF00062                                         02.0062 00213000
*      DO;                             /* YES, READ IT INTO BUFFER   */ 00214000
*/********************************************************************/ 00215000
*/*                                                                  */ 00216000
*/*SEGMENT NAME= BUILDBUF                                            */ 00217000
*/*                                                                  */ 00218000
*/*DESCRIPTIVE NAME= CONCATINATE PARMLIB RECORDS                     */ 00219000
*/*                                                                  */ 00220000
*/*FUNCTION=                                                         */ 00221000
*/*  THIS SEGMENT CONCATINATES THE PARMLIB MEMBER RECORDS            */ 00222000
*/*  INTO A SINGLE 'BUFFER'. EACH RECORD IS READ, SCANNED TO FIND    */ 00223000
*/*  THE NON BLANK PROTION BETWEEN COLUMNS 1 AND 71, AND THIS        */ 00224000
*/*  NON BLANK PORTION COPIED TO THE NEXT SPOT IN 'BUFFER'.          */ 00225000
*/*  RECORDS THAT ARE BLANK BETWEEN COLUMNS 1 AND 71 ARE SKIPPED.    */ 00226000
*/*  IF THE LAST NON BLANK CHARACTER OF A RECORD IS NOT A ',',       */ 00227000
*/*  THE MEMBER IS CONSIDERED TO BE TERMINATED.                      */ 00228000
*/*  THE TOTAL NUMBER OF CHARACTERS TAKEN FROM A PARMLIB             */ 00229000
*/*  CANNOT EXCEED 120, OR THE REMAINDER OF THE                      */ 00230000
*/*  RECORD/MEMBER IS TRUNCATED.                                     */ 00231000
*/*                                                                  */ 00232000
*/*  OPERATION= NO SPECIAL ALGORITHMS ARE USED                       */ 00233000
*/*                                                                  */ 00234000
*/*ENTRY POINT= IN-LINE SEGMENT                                      */ 00235000
*/*  INPUT=                                                          */ 00236000
*/*    DCBLST - OPEN DCB FOR PARMLIB                                 */ 00237000
*/*EXIT=                                                             */ 00238000
*/*  CONDITION= NORMAL, BUFFER CONTANS ALL MEANINGFUL INFORMATION    */ 00239000
*/*    FROM PARMLIB MEMBER                                           */ 00240000
*/*  OUTPUT=                                                         */ 00241000
*/*    BUFFER - CONTAINS CONCATINATED RECORDS FROM MEMBER            */ 00242000
*/*  RETURN CODE= NONE                                               */ 00243000
*/*                                                                  */ 00244000
*/*  CONDITION= I/O ERROR ON PARMLIB MEMBER                          */ 00245000
*/*  OUTPUT=                                                         */ 00246000
*/*    PLIBERR - SET TO INDICATE ERROR OCCURED                       */ 00247000
*/*    IOERRSC - SET TO INDICATE I/O ERROR ON PARMLIB                */ 00248000
*/*  RETURN CODE= NONE                                               */ 00249000
*/*                                                                  */ 00250000
*/********************************************************************/ 00251000
*BUFFER=BUFFER&&BUFFER;                /* CLEAR BUFFER               */ 00252000
         XC    BUFFER(121),BUFFER                               03.0064 00253000
*BUFINDX=1;                            /* INIT BUFFER INDEX          */ 00254000
         LA    BUFINDX,1                                        03.0065 00255000
*ENDMEM='0'B;                          /* INIT END OF MEMBER TERM    */ 00256000
         NI    ENDMEM,B'10111111'                               03.0066 00257000
*DO WHILE(ENDMEM='0'B&PLIBERR='0'B);   /* PROCESS PARMLIB LOOP       */ 00258000
         B     @DE00067                                         03.0067 00259000
@DL00067 DS    0H                                               03.0068 00260000
*  GEN(READ  DECB,SF,DCBLST,INBUF,'S',,,MF=E); /* READ RECORD        */ 00261000
         READ  DECB,SF,DCBLST,INBUF,'S',,,MF=E                          00262000
*  GEN(CHECK DECB);                    /* WAIT FOR READ TO COMPLETE  */ 00263000
         CHECK DECB                                                     00264000
*  IF PLIBERR='0'B THEN                /* SYNAD ROUTINE GET CONTROL  */ 00265000
         TM    PLIBERR,B'10000000'                              03.0070 00266000
         BNZ   @RF00070                                         03.0070 00267000
*    DO;                               /* NO, NO I/O ERROR - CONT.   */ 00268000
*      DO INDX=1 TO 71 WHILE(INBUF(INDX)=' ');         /* FIND       */ 00269000
         LA    INDX,1                                           03.0072 00270000
@DL00072 LA    @10,INBUF-1(INDX)                                03.0072 00271000
         CLI   0(@10),C' '                                      03.0072 00272000
         BNE   @DC00072                                         03.0072 00273000
*      END;                            /* FIRST NON BLANK            */ 00274000
         AH    INDX,@CH00139                                    03.0073 00275000
         CH    INDX,@CH00679                                    03.0073 00276000
         BNH   @DL00072                                         03.0073 00277000
@DC00072 DS    0H                                               03.0074 00278000
*      IF INDX<=71 THEN                /* IS RECORD ALL BLANKS       */ 00279000
         CH    INDX,@CH00679                                    03.0074 00280000
         BH    @RF00074                                         03.0074 00281000
*        DO;                           /* NO                         */ 00282000
*          STRTCOL=INDX;               /* FIRST NON BLANK COL        */ 00283000
         LR    STRTCOL,INDX                                     03.0076 00284000
*          DO INDX=STRTCOL TO 71 WHILE(INBUF(INDX)^=' ');       03.0077 00285000
         LR    INDX,STRTCOL                                     03.0077 00286000
         B     @DE00077                                         03.0077 00287000
@DL00077 LA    @10,INBUF-1(INDX)                                03.0077 00288000
         CLI   0(@10),C' '                                      03.0077 00289000
         BE    @DC00077                                         03.0077 00290000
*          END;                        /* FIND END OF RECORD TEXT    */ 00291000
         AH    INDX,@CH00139                                    03.0078 00292000
@DE00077 CH    INDX,@CH00679                                    03.0078 00293000
         BNH   @DL00077                                         03.0078 00294000
@DC00077 DS    0H                                               03.0079 00295000
*          NUMCOL=INDX-STRTCOL-1;      /* NUMBER OF CHARACTERS  03.0079 00296000
*                                         IN TEXT - 1                */ 00297000
         LR    NUMCOL,INDX                                      03.0079 00298000
         SR    NUMCOL,STRTCOL                                   03.0079 00299000
         BCTR  NUMCOL,0                                         03.0079 00300000
*          IF BUFINDX+NUMCOL>=LENGTH(BUFFER) THEN /* ARE WE GOING       00301000
*                                         TO OVERFLOW BUFFER         */ 00302000
         LA    @10,121                                          03.0080 00303000
         LR    @15,BUFINDX                                      03.0080 00304000
         AR    @15,NUMCOL                                       03.0080 00305000
         CR    @15,@10                                          03.0080 00306000
         BL    @RF00080                                         03.0080 00307000
*            DO;                       /* YES, TRUNCATE LAST RECORD  */ 00308000
*              NUMCOL=LENGTH(BUFFER)-BUFINDX-1;   /* HOW MUCH FITS   */ 00309000
         SR    @10,BUFINDX                                      03.0082 00310000
         BCTR  @10,0                                            03.0082 00311000
         LR    NUMCOL,@10                                       03.0082 00312000
*              ENDMEM='1'B;            /* LAST RECORD PROCESSED      */ 00313000
         OI    ENDMEM,B'01000000'                               03.0083 00314000
*            END;                                               03.0084 00315000
*          BUFFER(BUFINDX:BUFINDX+NUMCOL)= /* MOVE NON BLANK PORTION */ 00316000
*             INBUF(STRTCOL:STRTCOL+NUMCOL); /*OF RECORD TO BUFFER   */ 00317000
@RF00080 LA    @10,BUFFER-1(BUFINDX)                            03.0085 00318000
         LA    @01,INBUF-1(STRTCOL)                             03.0085 00319000
         EX    NUMCOL,@SM00768                                  03.0085 00320000
*          BUFINDX=BUFINDX+NUMCOL+1;   /* NEXT SPOT IN BUFFER        */ 00321000
         LR    @10,BUFINDX                                      03.0086 00322000
         AR    @10,NUMCOL                                       03.0086 00323000
         AH    @10,@CH00139                                     03.0086 00324000
         LR    BUFINDX,@10                                      03.0086 00325000
*          IF INBUF(STRTCOL+NUMCOL)^=',' THEN   /* LAST CHAR A COMMA */ 00326000
         LR    @10,STRTCOL                                      03.0087 00327000
         AR    @10,NUMCOL                                       03.0087 00328000
         LA    @01,INBUF-1(@10)                                 03.0087 00329000
         CLI   0(@01),C','                                      03.0087 00330000
         BE    @RF00087                                         03.0087 00331000
*            ENDMEM='1'B;              /* NO, LAST RECORD PROCESSED  */ 00332000
         OI    ENDMEM,B'01000000'                               03.0088 00333000
*        END;                                                   03.0089 00334000
@RF00087 DS    0H                                               03.0090 00335000
*    END;                                                       03.0090 00336000
@RF00074 DS    0H                                               03.0091 00337000
*END;                                                           03.0091 00338000
@RF00070 DS    0H                                               03.0091 00339000
@DE00067 TM    ENDMEM,B'01000000'                               03.0091 00340000
         BNZ   @DC00067                                         03.0091 00341000
         TM    PLIBERR,B'10000000'                              03.0091 00342000
         BZ    @DL00067                                         03.0091 00343000
@DC00067 DS    0H                                               03.0092 00344000
*EODAD:                                /* THIS IS TARGET FOR END OF     00345000
*                                         MEMBER ROUTINE (EOD) AS       00346000
*                                         AS SPECIFIED IN PARMLIB DCB*/ 00347000
*TR(BUFFER,TRANSTBL(1));               /* TRANSLATE TO UPPER CASE    */ 00348000
EODAD    TR    BUFFER(121),TRANSTBL                             03.0092 00349000
*      END;                                                     02.0093 00350000
*  END;                                                         02.0094 00351000
@RF00062 DS    0H                                               02.0095 00352000
*IF PLIBERR='1'B THEN                  /* I/O,OPEN OR MEMBER NOT        00353000
*                                         FOUND ERROR                */ 00354000
@RF00048 TM    PLIBERR,B'10000000'                              02.0095 00355000
         BNO   @RF00095                                         02.0095 00356000
*  DO;                                 /* TELL OPERATOR AND PROMPT   */ 00357000
*/********************************************************************/ 00358000
*/*                                                                  */ 00359000
*/*SEGMENT NAME= OPINPUT                                             */ 00360000
*/*                                                                  */ 00361000
*/*DESCRIPTIVE NAME= PROMPT OPERATOR FOR SMF PARAMETERS              */ 00362000
*/*                                                                  */ 00363000
*/*FUNCTION=                                                         */ 00364000
*/*  THIS SEGMENT WILL GET CONTROL IF AN OPEN, I/O OR                */ 00365000
*/*  MEMBER NOT FOUND CONDITION OCCURED. IT WILL ISSUE AN            */ 00366000
*/*  APPROPRIATE ERROR MESSAGE AND PROMPT THE OPERATOR FOR           */ 00367000
*/*  THE SMF PARAMETERS TO BE USED THIS IPL.                         */ 00368000
*/*                                                                  */ 00369000
*/*  OPERATION= NO SPECIAL ALGORITHMS ARE USED                       */ 00370000
*/*                                                                  */ 00371000
*/*ENTRY POINT= IN-LINE SEGMENT                                      */ 00372000
*/*  INPUT=                                                          */ 00373000
*/*    DCBOFOPN - OPEN FLAGS IN DCB                                  */ 00374000
*/*    NOTFNDSC - MEMBER NOT FOUND INDICATOR                         */ 00375000
*/*    IOERRSC - I/O ERROR ON PARMLIB INDICATOR                      */ 00376000
*/*    I356A - MESSAGE IEE356A                                       */ 00377000
*/*    I352A - MESSAGE IEE352A                                       */ 00378000
*/*    I353A - MESSAGE IEE353A                                       */ 00379000
*/*EXIT=                                                             */ 00380000
*/*  CONDITION= ERROR MESSAGE ISSUED AND OPERATOR RESPONCE           */ 00381000
*/*    IN 'BUFFER'                                                   */ 00382000
*/*  OUTPUT=                                                         */ 00383000
*/*    BUFFER - OPERATOR RESPONCE PLACED INTO BUFFER                 */ 00384000
*/*  RETURN CODE= NONE                                               */ 00385000
*/*                                                                  */ 00386000
*/********************************************************************/ 00387000
*IF DCBOFOPN='0'B THEN                 /* PARMLIB OPEN               */ 00388000
         LA    @10,DCBLST                                       03.0097 00389000
         TM    DCBOFOPN+40(@10),B'00010000'                     03.0097 00390000
         BNZ   @RF00097                                         03.0097 00391000
*  MSGBUF(1:L356A+12)=I356A;           /* NO, GET MSG IEE356A        */ 00392000
         L     @10,@CV00046                                     03.0098 00393000
         LA    @04,11                                           03.0098 00394000
         AH    @04,L356A(,@10)                                  03.0098 00395000
         L     @10,@CV00046                                     03.0098 00396000
         EX    @04,@SM00770                                     03.0098 00397000
*ELSE                                                           03.0099 00398000
*  IF NOTFNDSC='1'B THEN               /* MEMBER NOT FOUND           */ 00399000
         B     @RC00097                                         03.0099 00400000
@RF00097 TM    NOTFNDSC,B'00000100'                             03.0099 00401000
         BNO   @RF00099                                         03.0099 00402000
*    DO;                               /* YES, SET UP MISSING MSG    */ 00403000
*      MSGBUF(1:L352A+12)=I352A;       /* GET MSG IEE352A            */ 00404000
         L     @10,@CV00038                                     03.0101 00405000
         LA    @04,11                                           03.0101 00406000
         AH    @04,L352A(,@10)                                  03.0101 00407000
         L     @10,@CV00038                                     03.0101 00408000
         EX    @04,@SM00772                                     03.0101 00409000
*      MSGBUF(32:39)=PARMMEM;          /* MOVE IN PARMLIB MEMBER NAME*/ 00410000
         L     @10,@PC00001                                     03.0102 00411000
         MVC   MSGBUF+31(8),PARMMEM(@10)                        03.0102 00412000
*    END;                                                       03.0103 00413000
*  ELSE                                                         03.0104 00414000
*    DO;                               /* MUST HAVE BEEN I/O ERROR   */ 00415000
         B     @RC00099                                         03.0104 00416000
@RF00099 DS    0H                                               03.0105 00417000
*      MSGBUF(1:L353A+12)=I353A;       /* GET MESSAGE IEE353A        */ 00418000
         L     @10,@CV00039                                     03.0105 00419000
         LA    @04,11                                           03.0105 00420000
         AH    @04,L353A(,@10)                                  03.0105 00421000
         L     @10,@CV00039                                     03.0105 00422000
         EX    @04,@SM00774                                     03.0105 00423000
*      MSGBUF(34:41)=PARMMEM;          /* MOVE IN PARMLIB MEMBER NAME*/ 00424000
         L     @10,@PC00001                                     03.0106 00425000
         MVC   MSGBUF+33(8),PARMMEM(@10)                        03.0106 00426000
*    END;                                                       03.0107 00427000
*CALL PROMPTOP;                        /* GET RESPONCE FROM OPERATOR */ 00428000
@RC00099 DS    0H                                               03.0108 00429000
@RC00097 BAL   @14,PROMPTOP                                     03.0108 00430000
*  END;                                                         02.0109 00431000
*IF DCBOFOPN='1'B THEN                 /* IS DCB FOR PARMLIB OPEN    */ 00432000
@RF00095 LA    @10,DCBLST                                       02.0110 00433000
         TM    DCBOFOPN+40(@10),B'00010000'                     02.0110 00434000
         BNO   @RF00110                                         02.0110 00435000
*  GEN(CLOSE ,MF=(E,OPENLST));         /* YES,CLOSE IT               */ 00436000
         CLOSE ,MF=(E,OPENLST)                                          00437000
*PROCS='1'B;                           /* INIT PARAMETER PARSE  01.0112 00438000
*                                         TERMINATOR                 */ 00439000
@RF00110 OI    PROCS,B'01000000'                                01.0112 00440000
*/********************************************************************/ 00441000
*/*                                                                  */ 00442000
*/*SEGMENT NAME= PARSEINT                                            */ 00443000
*/*                                                                  */ 00444000
*/*DESCRIPTIVE NAME= INITIALIZE FOR PARSING BUFFER                   */ 00445000
*/*                                                                  */ 00446000
*/*FUNCTION=                                                         */ 00447000
*/*  THE KEYWORD SPECIFIED AND REQUIRED TABLE ARE INITIALIZED        */ 00448000
*/*  TO INDICATE THAT NO KEYWORDS HAVE BEEN SPECIFIED                */ 00449000
*/*  AND THAT THE JWT=, BUF=, AND SID= KEYWORDS ARE REQUIRED.        */ 00450000
*/*                                                                  */ 00451000
*/*  OPERATION= NO SPECIAL ALGORITHMS ARE USED                       */ 00452000
*/*                                                                  */ 00453000
*/*ENTRY POINT= IN-LINE SEGMENT                                      */ 00454000
*/*  INPUT= NONE                                                     */ 00455000
*/*EXIT=                                                             */ 00456000
*/*  CONDITION= KEYWORD SPEC AND REQ TABLE INITIALIZED               */ 00457000
*/*  OUTPUT=                                                         */ 00458000
*/*    KEYSPEC - SET TO SET TO INDICATE NO KEYWORDS SPECIFIED        */ 00459000
*/*      (FOR ALL KEYWORDS)                                          */ 00460000
*/*    KEYREQ - SET TO INDICATE KEYWORD REQUIRED                     */ 00461000
*/*      (FOR JWT, BUF, AND SID KEYWORDS)                            */ 00462000
*/*  RETURN CODE= NONE                                               */ 00463000
*/*                                                                  */ 00464000
*/********************************************************************/ 00465000
*DO TBLINDX=1 TO DIM(KEYCNTL);         /* INIT KEYWORD REQUIRED/        00466000
*                                         SPECIFIED TABLE            */ 00467000
         LA    TBLINDX,1                                        02.0113 00468000
@DL00113 DS    0H                                               02.0114 00469000
*  KEYCNTL(TBLINDX)=KEYCNTL(TBLINDX)&&KEYCNTL(TBLINDX);         02.0114 00470000
         LA    @10,KEYCNTL-1(TBLINDX)                           02.0114 00471000
         XC    0(1,@10),0(@10)                                  02.0114 00472000
*END;                                                           02.0115 00473000
         AH    TBLINDX,@CH00139                                 02.0115 00474000
         CH    TBLINDX,@CH00127                                 02.0115 00475000
         BNH   @DL00113                                         02.0115 00476000
*KEYREQ(1)='1'B;                       /* SID KEYWORD REQUIRED       */ 00477000
         OI    KEYREQ,B'01000000'                               02.0116 00478000
*KEYREQ(2)='1'B;                       /* JWT KEYWORD REQUIRED       */ 00479000
         OI    KEYREQ+1,B'01000000'                             02.0117 00480000
*KEYREQ(3)='1'B;                       /* BUF KEYWORD REQUIRED       */ 00481000
         OI    KEYREQ+2,B'01000000'                             02.0118 00482000
*OPISWC='0'B;                          /* OPI=YES NOT PROCESSED YET  */ 00483000
         NI    OPISWC,B'11111101'                               01.0119 00484000
*DO WHILE(PROCS='1'B);                 /* PROCESS UNTIL ALL     01.0120 00485000
*                                         PARAMETERS ARE ARE VALID   */ 00486000
         B     @DE00120                                         01.0120 00487000
@DL00120 DS    0H                                               01.0121 00488000
*  KEYINVLD='0'B;                      /* NO INVALID KEYWORDS YET    */ 00489000
*/********************************************************************/ 00490000
*/*                                                                  */ 00491000
*/*SEGMENT NAME= BUFRPARS                                            */ 00492000
*/*                                                                  */ 00493000
*/*DESCRIPTIVE NAME= BUFFER PARSE CONTROLLER                         */ 00494000
*/*                                                                  */ 00495000
*/*FUNCTION=                                                         */ 00496000
*/*  THIS SEGMENT IS RESPONSIBLE FOR PARSEING THE                    */ 00497000
*/*  INPUT BUFFER. IT WILL:                                          */ 00498000
*/*                                                                  */ 00499000
*/*  . FIND THE RANGE OF THE NEXT KEYWORD IN THE BUFFER; I.E., THE   */ 00500000
*/*    BEGINNING AND ENDING INDEX OF THE KEYWORD IN BUFFER.          */ 00501000
*/*                                                                  */ 00502000
*/*  . DETERMIN WHEN THE ENTIRE BUFFER HAS BEEN PARSED AND           */ 00503000
*/*    TERMINATE THE SCAN IF IT HAS BEEN                             */ 00504000
*/*                                                                  */ 00505000
*/*  . CHECK FOR A VALID KEYWORD, AND INVOKE THE APPROPRIATE         */ 00506000
*/*    KEYWORD PROCESSOR IF VALID.                                   */ 00507000
*/*                                                                  */ 00508000
*/*  . IF AN INVALID KEYWORD OR AN INVALID KEYWORD VALUE             */ 00509000
*/*    HAS BEEN FOUND, ISSUE AN APPROPRIATE ERROR MESSAGE            */ 00510000
*/*                                                                  */ 00511000
*/*  OPERATION= NO SPECIAL ALGORITHMS ARE USED                       */ 00512000
*/*                                                                  */ 00513000
*/*ENTRY POINT= IN-LINE SEGMENT                                      */ 00514000
*/*  INPUT=                                                          */ 00515000
*/*    BUFFER - LINE TO BE PARSED                                    */ 00516000
*/*    IEE355IK - EXTENSION OF MESSAGE IEE355I FROM IEEMB824         */ 00517000
*/*    IEE355IV - EXTENSION OF MESSAGE IEE355I FROM IEEMB824         */ 00518000
*/*                                                                  */ 00519000
*/*EXIT=                                                             */ 00520000
*/*  CONDITION= NORMAL, ALL KEYWORDS IN BUFFER PARSED AND PROCESSED  */ 00521000
*/*  OUTPUT=                                                         */ 00522000
*/*    SMCA UPDATED (SEE KEYWORD PROCESSOR SPECS)                    */ 00523000
*/*    PARSE - SET TO INDICATE PARSE COMPLETE                        */ 00524000
*/*  RETURN CODE= NONE                                               */ 00525000
*/*                                                                  */ 00526000
*/********************************************************************/ 00527000
*PARSE='0'B;                           /* INIT PARSE TERMINATOR      */ 00528000
         NI    KEYINVLD,B'11110110'                             02.0122 00529000
*KEYSTART=1;                           /* INIT BUFFER INDEX          */ 00530000
         LA    KEYSTART,1                                       02.0123 00531000
*DO WHILE(PARSE='0'B|BUFFER(KEYSTART)^=' ');                    02.0124 00532000
         B     @DE00124                                         02.0124 00533000
@DL00124 DS    0H                                               02.0125 00534000
*/********************************************************************/ 00535000
*/*                                                                  */ 00536000
*/*SEGMENT NAME= FINDEND                                             */ 00537000
*/*                                                                  */ 00538000
*/*DESCRIPTIVE NAME= FIND RANGE OF NEXT KEYWORD IN 'BUFFER'          */ 00539000
*/*                                                                  */ 00540000
*/*FUNCTION=                                                         */ 00541000
*/*  THIS SEGMENT FINDS THE INDEX OF THE FIRST CHARACTER OF THE      */ 00542000
*/*  NEXT KEYWORD IN BUFFER AND THE INDEX OF THE LAST CHARACTER      */ 00543000
*/*  OF THAT KEYWORD.                                                */ 00544000
*/*  THE BUFFER IS SCANNED FROM THE END OF THE LAST KEYWORD          */ 00545000
*/*  PROCESSED OR THE BEGINNING OF BUFFER IF THIS IS THE FIRST SCAN, */ 00546000
*/*  UNTIL A CHARACTER IS FOUND WHICH IS NOT A COMMA OR              */ 00547000
*/*  A BLANK.                                                        */ 00548000
*/*  I.E., ANY NUMBER OF COMMAS MAY PRECEED OR FOLLOW A KEYWORD      */ 00549000
*/*  IN THE BUFFER; A BLANK TERMINATES THE BUFFER.                   */ 00550000
*/*  IF THE FIRST NON COMMA IS A BLANK, THE BUFFER HAS BEEN          */ 00551000
*/*  COMPLETELY PROCESSED.                                           */ 00552000
*/*                                                                  */ 00553000
*/*  OPERATION= NO SPECIAL ALGORITHMS ARE USED                       */ 00554000
*/*                                                                  */ 00555000
*/*ENTRY POINT= IN-LINE SEGMENT                                      */ 00556000
*/*  INPUT=                                                          */ 00557000
*/*    KEYSTART - INDEX OF END OF LAST KEYWORD PROCESSED OR          */ 00558000
*/*      1 IF FIRST BUFFER SCAN                                      */ 00559000
*/*    BUFFER - BUFFER CONTAINNING PARAMETERS                        */ 00560000
*/*EXIT=                                                             */ 00561000
*/*  CONDITION= NORMAL, RANGE OF NEXT KEYWORD DETERMINED             */ 00562000
*/*  OUTPUT=                                                         */ 00563000
*/*    KEYSTART - SET TO INDEX IN 'BUFFER' OF FIRST CHARACTER        */ 00564000
*/*    KEYEND - SET TO INDEX IN 'BUFFER' OF LAST CHARACTER           */ 00565000
*/*  RETURN CODE= NONE                                               */ 00566000
*/*                                                                  */ 00567000
*/*  CONDITION= END OF BUFFER FOUND AND NO MORE KEYWORDS PRESENT     */ 00568000
*/*  OUTPUT=                                                         */ 00569000
*/*    PARSE - SET TO INDICATE BUFFER PARSING COMPLETE               */ 00570000
*/*  RETURN CODE= NONE                                               */ 00571000
*/*                                                                  */ 00572000
*/********************************************************************/ 00573000
*DO KEYSCAN=KEYSTART TO LENGTH(BUFFER) WHILE(BUFFER(KEYSCAN)=',');      00574000
         LR    KEYSCAN,KEYSTART                                 03.0125 00575000
         B     @DE00125                                         03.0125 00576000
@DL00125 LA    @10,BUFFER-1(KEYSCAN)                            03.0125 00577000
         CLI   0(@10),C','                                      03.0125 00578000
         BNE   @DC00125                                         03.0125 00579000
*END;                                  /* BYPASS ALL COMMAS          */ 00580000
         AH    KEYSCAN,@CH00139                                 03.0126 00581000
@DE00125 CH    KEYSCAN,@CH00223                                 03.0126 00582000
         BNH   @DL00125                                         03.0126 00583000
@DC00125 DS    0H                                               03.0127 00584000
*KEYSTART=KEYSCAN;                     /* FIRST NON COMMA POSITION   */ 00585000
         LR    KEYSTART,KEYSCAN                                 03.0127 00586000
*IF BUFFER(KEYSTART)=' ' THEN          /* IS POSITION A BLANK        */ 00587000
         LA    @10,BUFFER-1(KEYSTART)                           03.0128 00588000
         CLI   0(@10),C' '                                      03.0128 00589000
         BNE   @RF00128                                         03.0128 00590000
*  PARSE='1'B;                         /* YES, BUFFER PARSE DONE     */ 00591000
         OI    PARSE,B'00000001'                                03.0129 00592000
*ELSE                                                           03.0130 00593000
*  DO;                                                          03.0130 00594000
         B     @RC00128                                         03.0130 00595000
@RF00128 DS    0H                                               03.0131 00596000
*    DO KEYSCAN=KEYSTART TO LENGTH(BUFFER) WHILE(               03.0131 00597000
*      BUFFER(KEYSCAN)^=' ' &          /* IF NOT BLANK AND           */ 00598000
*      BUFFER(KEYSCAN)^=',');          /* NOT COMMA THEN KEEP        */ 00599000
         LR    KEYSCAN,KEYSTART                                 03.0131 00600000
         B     @DE00131                                         03.0131 00601000
@DL00131 LA    @10,BUFFER-1(KEYSCAN)                            03.0131 00602000
         CLI   0(@10),C' '                                      03.0131 00603000
         BE    @DC00131                                         03.0131 00604000
         LA    @10,BUFFER-1(KEYSCAN)                            03.0131 00605000
         CLI   0(@10),C','                                      03.0131 00606000
         BE    @DC00131                                         03.0131 00607000
*    END;                              /* LOOKING FOR END OF KEYWORD */ 00608000
         AH    KEYSCAN,@CH00139                                 03.0132 00609000
@DE00131 CH    KEYSCAN,@CH00223                                 03.0132 00610000
         BNH   @DL00131                                         03.0132 00611000
@DC00131 DS    0H                                               03.0133 00612000
*    KEYEND=KEYSCAN-1;                 /* BACK UP TO KEYWORD END CHAR*/ 00613000
         LR    @10,KEYSCAN                                      03.0133 00614000
         BCTR  @10,0                                            03.0133 00615000
         STH   @10,KEYEND                                       03.0133 00616000
*  END;                                                         03.0134 00617000
*  IF PARSE='0'B THEN                  /* ALL KEYWORDS PROCESSED     */ 00618000
@RC00128 TM    PARSE,B'00000001'                                02.0135 00619000
         BNZ   @RF00135                                         02.0135 00620000
*    DO;                               /* NO, PROCESS NEXT KEYWORD   */ 00621000
*      KEYLEN=KEYEND-KEYSTART+1;       /* LENGTH OF KEYWORD          */ 00622000
         LA    @10,1                                            02.0137 00623000
         LH    KEYLEN,KEYEND                                    02.0137 00624000
         SR    KEYLEN,KEYSTART                                  02.0137 00625000
         AR    KEYLEN,@10                                       02.0137 00626000
*      KEYFOUND='0'B;                  /* ASSUM KEYWORD NOT VALID    */ 00627000
         NI    KEYFOUND,B'11101111'                             02.0138 00628000
*      KEYRTNCD=0;                     /* INIT RTN CD FROM KEY PROC  */ 00629000
         SR    KEYRTNCD,KEYRTNCD                                02.0139 00630000
*/********************************************************************/ 00631000
*/*                                                                  */ 00632000
*/*SEGMENT NAME= KEYPROC                                             */ 00633000
*/*                                                                  */ 00634000
*/*DESCRIPTIVE NAME= CHECK FOR VALID KEYWORD                         */ 00635000
*/*                                                                  */ 00636000
*/*FUNCTION=                                                         */ 00637000
*/*  THIS SEGMENT WILL SCAN THE KEYWORD CURRENTLY                    */ 00638000
*/*  BEING LOOKED AT IN THE BUFFER TO DETERMINE IF IT IS             */ 00639000
*/*  ONE OF THE VALID SMF PARAMETERS. IF IT IS VALID                 */ 00640000
*/*  THE APPROPRIATE KEYWORD PROCESSING ROUTINE IS CALLED TO         */ 00641000
*/*  PROCESS THE KEYWORD VALUE.                                      */ 00642000
*/*                                                                  */ 00643000
*/*  OPERATION=                                                      */ 00644000
*/*    THE BUFFER KEYWORD IS COMPARED TO ALL ENTRIES                 */ 00645000
*/*    IN THE VALID KEYWORD TABLE. IF A MATCH IS FOUND,              */ 00646000
*/*    THE KEYWORD IS VALID, AND THE ADDRESS OF THE APPROPRIATE      */ 00647000
*/*    KEYWORD PROCESSOR IS OBTAINED FROM THE KEYWORD                */ 00648000
*/*    PROCESSOR ADDRESS TABLE. THIS KEYWORD PROCESSOR IS THEN       */ 00649000
*/*    CALLED TO PROCESS THE KEYWORD VALUE.                          */ 00650000
*/*                                                                  */ 00651000
*/*ENTRY POINT= IN-LINE SEGMENT                                      */ 00652000
*/*  INPUT=                                                          */ 00653000
*/*    BUFFER - INPUT LINE CONTAINNING THOSE PARAMETERS              */ 00654000
*/*             TO BE PARSED                                         */ 00655000
*/*    KEYSTART - THE INDEX OF THE CURRENT KEYWORD IN BUFFER         */ 00656000
*/*    KEYTBL - TABLE OF ALL VALID KEYWORDS                          */ 00657000
*/*    ADDTBL - TABLE OF KEYWORD PROCESSOR ADDRESSES                 */ 00658000
*/*EXIT=                                                             */ 00659000
*/*  CONDITION= NORMAL, KEYWORD FOUND                                */ 00660000
*/*  OUTPUT=                                                         */ 00661000
*/*    KEYFOUND - SET TO INDICATE KEYWORD FOUND AND PROCESSED        */ 00662000
*/*  RETURN CODE=                                                    */ 00663000
*/*    KEYRTNCD - SET BY KEYWORD PROCESSOR CALLED BY THIS            */ 00664000
*/*               SEGMENT                                            */ 00665000
*/*                                                                  */ 00666000
*/*  CONDITION= ERROR, KEYWORD NOT FOUND, INVALID KEYWORD            */ 00667000
*/*  OUTPUT= NONE                                                    */ 00668000
*/*  RETURN CODE= NONE                                               */ 00669000
*/*                                                                  */ 00670000
*/********************************************************************/ 00671000
*KEYPTR=ADDR(BUFFER(KEYSTART));        /* ADD OF KEYWORD IN BUFFER   */ 00672000
         LA    KEYPTR,BUFFER-1(KEYSTART)                        03.0140 00673000
*IF KEYLEN>=4 THEN                     /* GREATER THAN FOUR CHARACTER*/ 00674000
         CH    KEYLEN,@CH00089                                  03.0141 00675000
         BL    @RF00141                                         03.0141 00676000
*  DO TBLINDX=1 TO DIM(KEYTBL) WHILE(KEYFOUND='0'B); /* POSSIBLY VLD */ 00677000
         LR    TBLINDX,@10                                      03.0142 00678000
@DL00142 TM    KEYFOUND,B'00010000'                             03.0142 00679000
         BNZ   @DC00142                                         03.0142 00680000
*    IF KEYTBL(TBLINDX)=KEYID THEN     /* IS BUFFER KEYWORD VALID    */ 00681000
         LA    @10,4                                            03.0143 00682000
         LR    @01,TBLINDX                                      03.0143 00683000
         MR    @00,@10                                          03.0143 00684000
         LA    @09,KEYTBL-4(@01)                                03.0143 00685000
         CLC   0(4,@09),KEYID(KEYPTR)                           03.0143 00686000
         BNE   @RF00143                                         03.0143 00687000
*      DO;                             /* YES                        */ 00688000
*        KEYFOUND='1'B;                /* INDICATE VALID KEYWD FOUND */ 00689000
         OI    KEYFOUND,B'00010000'                             03.0145 00690000
*        PARMLEN=KEYLEN-4;             /* LENGTH OF KEYWORD VALUE    */ 00691000
         LCR   @10,@10                                          03.0146 00692000
         AR    @10,KEYLEN                                       03.0146 00693000
         LR    PARMLEN,@10                                      03.0146 00694000
*        CALL KEYROUTN;                /* INVOKE KEYWORD PROCESSOR   */ 00695000
         L     @15,ADDTBL-4(@01)                                03.0147 00696000
         BALR  @14,@15                                          03.0147 00697000
*      END;                                                     03.0148 00698000
*  END;                                                         03.0149 00699000
@RF00143 AH    TBLINDX,@CH00139                                 03.0149 00700000
         CH    TBLINDX,@CH00127                                 03.0149 00701000
         BNH   @DL00142                                         03.0149 00702000
@DC00142 DS    0H                                               03.0150 00703000
*      IF KEYFOUND='0'B THEN           /* KEYWORD VALID - FOUND      */ 00704000
@RF00141 TM    KEYFOUND,B'00010000'                             02.0150 00705000
         BNZ   @RF00150                                         02.0150 00706000
*        DO;                           /* NO, PROCESS ERROR          */ 00707000
*          MSGBUF(1:L355IK+4)=I355IK;      /* GET KEYWORD ERROR MSG  */ 00708000
         L     @10,@CV00043                                     02.0152 00709000
         LA    @09,3                                            02.0152 00710000
         AH    @09,L355IK(,@10)                                 02.0152 00711000
         L     @10,@CV00043                                     02.0152 00712000
         EX    @09,@SM00780                                     02.0152 00713000
*          IF KEYLEN>25 THEN           /* MESSAGE ONLY HOLDS 25 CHARS*/ 00714000
         LA    @10,25                                           02.0153 00715000
         CR    KEYLEN,@10                                       02.0153 00716000
         BNH   @RF00153                                         02.0153 00717000
*            KEYLEN=25;                /* MAXIMUM WE CAN MOVE        */ 00718000
         LR    KEYLEN,@10                                       02.0154 00719000
*          MSGBUF(13:13+KEYLEN-1)=                              02.0155 00720000
*          KEYWORD(1:KEYLEN);          /* MOVE TEXT TO MSG           */ 00721000
@RF00153 LR    @10,KEYLEN                                       02.0155 00722000
         BCTR  @10,0                                            02.0155 00723000
         EX    @10,@SM00782                                     02.0155 00724000
*          CALL ERRMSG;                /* WRITE ERROR MESSAGE(S)     */ 00725000
         BAL   @14,ERRMSG                                       02.0156 00726000
*        END;                                                   02.0157 00727000
*      ELSE                                                     02.0158 00728000
*        IF KEYRTNCD^=0 THEN           /* INVLAID KEYWORD VALUE      */ 00729000
         B     @RC00150                                         02.0158 00730000
@RF00150 LTR   KEYRTNCD,KEYRTNCD                                02.0158 00731000
         BZ    @RF00158                                         02.0158 00732000
*          DO;                         /* YES, PROCESS ERROR         */ 00733000
*            MSGBUF(1:L355IV+4)=I355IV;      /* GET VALUE ERROR MSG  */ 00734000
         L     @10,@CV00044                                     02.0160 00735000
         LA    @09,3                                            02.0160 00736000
         AH    @09,L355IV(,@10)                                 02.0160 00737000
         L     @10,@CV00044                                     02.0160 00738000
         EX    @09,@SM00784                                     02.0160 00739000
*            IF KEYLEN>25 THEN         /* MESSAGE ONLY HOLDS 25 CHARS*/ 00740000
         LA    @10,25                                           02.0161 00741000
         CR    KEYLEN,@10                                       02.0161 00742000
         BNH   @RF00161                                         02.0161 00743000
*              KEYLEN=25;              /* MAXIMUM WE CAN MOVE        */ 00744000
         LR    KEYLEN,@10                                       02.0162 00745000
*            MSGBUF(13:13+KEYLEN-1)=                            02.0163 00746000
*            KEYWORD(1:KEYLEN);        /* MOVE TEXT TO MSG           */ 00747000
@RF00161 LR    @10,KEYLEN                                       02.0163 00748000
         BCTR  @10,0                                            02.0163 00749000
         EX    @10,@SM00782                                     02.0163 00750000
*            CALL ERRMSG;              /* WRITE ERROR MESSAGE(S)     */ 00751000
         BAL   @14,ERRMSG                                       02.0164 00752000
*          END;                                                 02.0165 00753000
*      KEYSTART=KEYEND+1;              /* START FOR NEXT KEYWORD     */ 00754000
@RF00158 DS    0H                                               02.0166 00755000
@RC00150 LA    KEYSTART,1                                       02.0166 00756000
         AH    KEYSTART,KEYEND                                  02.0166 00757000
*    END;                                                       02.0167 00758000
*END;                                                           02.0168 00759000
@RF00135 DS    0H                                               02.0168 00760000
@DE00124 TM    PARSE,B'00000001'                                02.0168 00761000
         BZ    @DL00124                                         02.0168 00762000
         LA    @10,BUFFER-1(KEYSTART)                           02.0168 00763000
         CLI   0(@10),C' '                                      02.0168 00764000
         BNE   @DL00124                                         02.0168 00765000
*/********************************************************************/ 00766000
*/*                                                                  */ 00767000
*/*SEGMENT NAME= CKMISSNG                                            */ 00768000
*/*                                                                  */ 00769000
*/*DESCRIPTIVE NAME= CHECK FOR MISSING REQUIRED KEYWORDS             */ 00770000
*/*                                                                  */ 00771000
*/*FUNCTION=                                                         */ 00772000
*/*  ANY REQURIED KEYWORDS THAT WERE NOT SPECIFIED WILL              */ 00773000
*/*  DISPLAYED TO THE OPERATOR.                                      */ 00774000
*/*                                                                  */ 00775000
*/*  OPERATION= NO SPECIAL ALGORITHMS ARE USED                       */ 00776000
*/*                                                                  */ 00777000
*/*ENTRY POINT= IN-LINE SEGMENT                                      */ 00778000
*/*  INPUT=                                                          */ 00779000
*/*    I355IM - MESSAGE IEE355I (KEYWORD MISSING)                    */ 00780000
*/*    KEYREQ - KEYWORD REQUIRED TABLE                               */ 00781000
*/*    KEYSPEC - KEYWORD SPECIFIED TABLE                             */ 00782000
*/*EXIT=                                                             */ 00783000
*/*  CONDITION= NORMAL, ALL REQUIRED PARAMETERS WERE SPECIFIED       */ 00784000
*/*  OUTPUT= NONE                                                    */ 00785000
*/*  RETURN CODE= NONE                                               */ 00786000
*/*                                                                  */ 00787000
*/*  CONDITION= AT LEAST ONE REQUIRED KEYWORD WAS NOT SPECIFIED      */ 00788000
*/*  OUTPUT=                                                         */ 00789000
*/*    ERROR MESSAGE FOR EACH MISSING KEYWORD                        */ 00790000
*/*    KEYINVLD - SET TO INDICATE INVALID PARAMETERS                 */ 00791000
*/*  RETURN CODE= NONE                                               */ 00792000
*/*                                                                  */ 00793000
*/********************************************************************/ 00794000
*MSGBUF(1:L355IM+4)=I355IM;            /* INIT MISSING MESSAGE       */ 00795000
         L     @10,@CV00045                                     02.0169 00796000
         LA    @04,3                                            02.0169 00797000
         AH    @04,L355IM(,@10)                                 02.0169 00798000
         L     @10,@CV00045                                     02.0169 00799000
         EX    @04,@SM00786                                     02.0169 00800000
*DO TBLINDX=1 TO DIM(KEYCNTL);         /* SCAN FOR MISSING KEYWORDS  */ 00801000
         LA    TBLINDX,1                                        02.0170 00802000
@DL00170 DS    0H                                               02.0171 00803000
*  IF KEYREQ(TBLINDX)='1'B &           /* IF KEYWORD IS REQUIRED     */ 00804000
*     KEYSPEC(TBLINDX)='0'B THEN       /* BUT NOT SPECIFIED          */ 00805000
         LA    @10,KEYREQ-1(TBLINDX)                            02.0171 00806000
         TM    0(@10),B'01000000'                               02.0171 00807000
         BNO   @RF00171                                         02.0171 00808000
         TM    0(@10),B'10000000'                               02.0171 00809000
         BNZ   @RF00171                                         02.0171 00810000
*    DO;                               /* ISSUE MISSING MESSAGE      */ 00811000
*      MSGBUF(13:15)=KEYTBL(TBLINDX);   /* MISSING KEYWORD TO MESSAGE*/ 00812000
         LR    @10,TBLINDX                                      02.0173 00813000
         SLA   @10,2                                            02.0173 00814000
         LA    @06,KEYTBL-4(@10)                                02.0173 00815000
         MVC   MSGBUF+12(3),0(@06)                              02.0173 00816000
*      CALL ERRMSG;                    /* WRITE ERROR MESSAGE(S)     */ 00817000
         BAL   @14,ERRMSG                                       02.0174 00818000
*    END;                                                       02.0175 00819000
*END;                                                           02.0176 00820000
@RF00171 AH    TBLINDX,@CH00139                                 02.0176 00821000
         CH    TBLINDX,@CH00127                                 02.0176 00822000
         BNH   @DL00170                                         02.0176 00823000
*  IF KEYINVLD='1'B THEN               /* ANY PARAMETER ERRORS       */ 00824000
         TM    KEYINVLD,B'00001000'                             01.0177 00825000
         BNO   @RF00177                                         01.0177 00826000
*    DO;                               /* YES                        */ 00827000
*      MSGBUF(1:L356A+12)=I356A;       /* ERROR MESSAGE              */ 00828000
         L     @10,@CV00046                                     01.0179 00829000
         LA    @04,11                                           01.0179 00830000
         AH    @04,L356A(,@10)                                  01.0179 00831000
         L     @10,@CV00046                                     01.0179 00832000
         EX    @04,@SM00770                                     01.0179 00833000
*      CALL PROMPTOP;                  /* PROMPT OPERATOR FOR   01.0180 00834000
*                                         CORRECTED INFORMATION      */ 00835000
         BAL   @14,PROMPTOP                                     01.0180 00836000
*    END;                                                       01.0181 00837000
*  ELSE                                                         01.0182 00838000
*    IF SMCAOPI='1'B &                 /* OPERATOR VERIFICATION REQ  */ 00839000
*       OPISWC='0'B THEN               /* AND NOT PERFORMED BEFORE   */ 00840000
         B     @RC00177                                         01.0182 00841000
@RF00177 TM    SMCAOPI(SMCAPTR),B'00100000'                     01.0182 00842000
         BNO   @RF00182                                         01.0182 00843000
         TM    OPISWC,B'00000010'                               01.0182 00844000
         BNZ   @RF00182                                         01.0182 00845000
*      DO;                             /* THEN SHOW OPERATOR CURRENT    00846000
*                                         KEYWORD AND VALUES         */ 00847000
*        OPISWC='1'B;                  /* OPERATOR HAD HIS CHANCE    */ 00848000
         OI    OPISWC,B'00000010'                               01.0184 00849000
*/********************************************************************/ 00850000
*/*                                                                  */ 00851000
*/*SEGMENT NAME= OPVERIFY                                            */ 00852000
*/*                                                                  */ 00853000
*/*DESCRIPTIVE NAME= OPERATOR PARAMETER VERIFICATION PROCESSING      */ 00854000
*/*                                                                  */ 00855000
*/*FUNCTION=                                                         */ 00856000
*/*  THIS SEGMENT WILL TAKE THE VALUES CURRENTLY ENTERED             */ 00857000
*/*  FOR ALL PARAMETERS AND LIST THEM FOR THE OPERATOR.              */ 00858000
*/*  THE OPERATOR WILL THEN BE GIVEN A CHANCE TO ALTER               */ 00859000
*/*  ANY OR ALL OF THE PARAMETERS. THE OPERATOR COULD ALSO           */ 00860000
*/*  ENTER PARAMETERS WHICH HAVE NOT BEEN YET ENTERED.               */ 00861000
*/*  THIS PROCESSES WILL OCCUR ONLY ONCE.                            */ 00862000
*/*                                                                  */ 00863000
*/*  OPERATION=                                                      */ 00864000
*/*    THE KEYWORD SPECIFIED TABLE IS EXAMINED TO                    */ 00865000
*/*    DETERMINE WHICH PARAMETERS ARE TO BE LISTED FOR THE OPERATOR. */ 00866000
*/*    IF A PARAMETER IS TO BE LISTED, ITS NAME IS OBTAINED          */ 00867000
*/*    FROM THE TABLE OF VALID KEYWORDS AND ITS VALUE FROM           */ 00868000
*/*    THE VALUE TABLE.                                              */ 00869000
*/*                                                                  */ 00870000
*/*ENTRY POINT= IN-LINE SEGMENT                                      */ 00871000
*/*  INPUT=                                                          */ 00872000
*/*    IEE354I - MESSAGE IEE354I FROM IEEMB824                       */ 00873000
*/*    IEE354IX - EXTENSION OF MESSAGE IEE354I FROM IEEMB824         */ 00874000
*/*    IEE357A - MESSAGE IEE357A FROM IEEMB824                       */ 00875000
*/*    KEYSPEC - KEYWORD SPECIFIED ARRAY FOR INDICATION OF           */ 00876000
*/*              THOSE KEYWORDS CURRENTLY ENTERED                    */ 00877000
*/*    KEYTBL - VALID KEYWORD TABLE FOR NAME OF KEYWORDS             */ 00878000
*/*    KEYVALUE - KEYWORD VALUE TABLE FOR CURRENT VALUE OF KEYWORD   */ 00879000
*/*                                                                  */ 00880000
*/*EXIT=                                                             */ 00881000
*/*  CONDITION= NORMAL, ALL PARAMETERS LISTED AND OPERATOR           */ 00882000
*/*             ACCEPTS THEM                                         */ 00883000
*/*  OUTPUT=                                                         */ 00884000
*/*    ALL PARAMETERS LISTED FOR OPERATOR                            */ 00885000
*/*    PROCS - SET TO INDICATE PARAMETER PROCESSING ALL DONE         */ 00886000
*/*  RETURN CODE= NONE                                               */ 00887000
*/*                                                                  */ 00888000
*/*  CONDITION= NORMAL, ALL PARAMETERS LISTED AND OPERATOR           */ 00889000
*/*             DOES NOTACCEPTS THEM                                 */ 00890000
*/*  OUTPUT=                                                         */ 00891000
*/*    ALL PARAMETERS LISTED FOR OPERATOR                            */ 00892000
*/*  RETURN CODE= NONE                                               */ 00893000
*/*                                                                  */ 00894000
*/********************************************************************/ 00895000
*RFY R1 RSTD;                          /* GET REGISTER CONTROL       */ 00896000
*R1=ADDR(I354I);                       /* ADDR MESSAGE IEE354I       */ 00897000
         L     R1,@CV00040                                      02.0186 00898000
*GEN(WTO   ,MF=(E,(R1)));              /* ISSUE MESSAGE              */ 00899000
         WTO   ,MF=(E,(R1))                                             00900000
*RFY R1 UNRSTD;                        /* RELEASE REGISTER CONTROL   */ 00901000
*MSGBUF(1:L354IX+4)=I354IX;            /* GET OPERATOR VER. MESSAGE  */ 00902000
         L     @10,@CV00041                                     02.0189 00903000
         LA    @04,3                                            02.0189 00904000
         AH    @04,L354IX(,@10)                                 02.0189 00905000
         L     @10,@CV00041                                     02.0189 00906000
         EX    @04,@SM00789                                     02.0189 00907000
*DO TBLINDX=1 TO DIM(KEYCNTL);         /* LOOK FOR ALL SPEC KEYWDS   */ 00908000
         LA    TBLINDX,1                                        02.0190 00909000
@DL00190 DS    0H                                               02.0191 00910000
*  IF KEYSPEC(TBLINDX)='1'B THEN       /* WAS KEYWORD SPEC           */ 00911000
         LA    @10,KEYSPEC-1(TBLINDX)                           02.0191 00912000
         TM    0(@10),B'10000000'                               02.0191 00913000
         BNO   @RF00191                                         02.0191 00914000
*    DO;                               /* YES, SHOW IT AND VALUE     */ 00915000
*      MSGBUF(13:16)=KEYTBL(TBLINDX);   /* PLACE 'KEY=' IN MSG       */ 00916000
         LR    @10,TBLINDX                                      02.0193 00917000
         SLA   @10,2                                            02.0193 00918000
         LA    @06,KEYTBL-4(@10)                                02.0193 00919000
         MVC   MSGBUF+12(4),0(@06)                              02.0193 00920000
*      MSGBUF(17:20)=KEYVALUE(TBLINDX);   /* PLACE VALUE IN MSG      */ 00921000
         LA    @06,KEYVALUE-4(@10)                              02.0194 00922000
         MVC   MSGBUF+16(4),0(@06)                              02.0194 00923000
*      GEN(WTO   ,MF=(E,MSGBUF));      /* WRITE VERIFICATION MSG     */ 00924000
         WTO   ,MF=(E,MSGBUF)                                           00925000
*    END;                                                       02.0196 00926000
*END;                                                           02.0197 00927000
@RF00191 AH    TBLINDX,@CH00139                                 02.0197 00928000
         CH    TBLINDX,@CH00127                                 02.0197 00929000
         BNH   @DL00190                                         02.0197 00930000
*MSGBUF(1:L357A+12)=I357A;             /* GET MESSAGE IEE357A        */ 00931000
         L     @10,@CV00047                                     02.0198 00932000
         LA    @04,11                                           02.0198 00933000
         AH    @04,L357A(,@10)                                  02.0198 00934000
         L     @10,@CV00047                                     02.0198 00935000
         EX    @04,@SM00791                                     02.0198 00936000
*CALL PROMPTOP;                        /* GET OPERATOR ANSWER        */ 00937000
         BAL   @14,PROMPTOP                                     02.0199 00938000
*IF BUFFER(1)=' ' |                    /* IS RESPONCE BLANK          */ 00939000
*   BUFFER(1:2)='U ' THEN              /* OR 'U '                    */ 00940000
         CLI   BUFFER,C' '                                      02.0200 00941000
         BE    @RT00200                                         02.0200 00942000
         CLC   BUFFER(2),@CC00695                               02.0200 00943000
         BNE   @RF00200                                         02.0200 00944000
@RT00200 DS    0H                                               02.0201 00945000
*  PROCS='0'B;                         /* YES, PARAMETER PROCESSING     00946000
*                                         DONE                       */ 00947000
         NI    PROCS,B'10111111'                                02.0201 00948000
*      END;                                                     01.0202 00949000
@RF00200 DS    0H                                               01.0203 00950000
*    ELSE                                                       01.0203 00951000
*      PROCS='0'B;                     /* END OF KEYWORD PROCESSING  */ 00952000
         B     @RC00182                                         01.0203 00953000
@RF00182 NI    PROCS,B'10111111'                                01.0203 00954000
*END;                                                           01.0204 00955000
@RC00182 DS    0H                                               01.0204 00956000
@RC00177 DS    0H                                               01.0204 00957000
@DE00120 TM    PROCS,B'01000000'                                01.0204 00958000
         BO    @DL00120                                         01.0204 00959000
*/********************************************************************/ 00960000
*/*                                                                  */ 00961000
*/*SEGMENT NAME= COMPAT                                              */ 00962000
*/*                                                                  */ 00963000
*/*DESCRIPTIVE NAME= COMPATIBLE OPTIONS CHECKER                      */ 00964000
*/*                                                                  */ 00965000
*/*FUNCTION=                                                         */ 00966000
*/*  THIS SEGMENT CHECKS TO ASSURE THAT THE DSV= AND OPT=            */ 00967000
*/*  PARAMETERS ARE COMPATIABLE.                                     */ 00968000
*/*  DSV= 2|3 IMPLIES OPT=2 MUST HAVE BEEN ENTERED OR                */ 00969000
*/*  DEFALUTED TO. IF DSV=2|3 AND OPT NOT EQUAL 2, AN                */ 00970000
*/*  DIOGNOSTIC MESSAGE IS ISSUED AND OPT=2 ASSUMED.                 */ 00971000
*/*                                                                  */ 00972000
*/*  OPERATION= NO SPECIAL ALGORITHMS ARE USED                       */ 00973000
*/*                                                                  */ 00974000
*/*ENTRY POINT= IN-LINE SEGMENT                                      */ 00975000
*/*  INPUT=                                                          */ 00976000
*/*    SMCADSA - INDICATES DSV SETTING                               */ 00977000
*/*    SMCAOPT2 - INDICATES OPT SETTING                              */ 00978000
*/*    IEE359I - MESSAGE IEE359I FROM MODULE IEEMB824                */ 00979000
*/*EXIT=                                                             */ 00980000
*/*  CONDITION= NORMAL, DSV AND OPT COMPATABLE                       */ 00981000
*/*  OUTPUT= NONE                                                    */ 00982000
*/*  RETURN CODE= NONE                                               */ 00983000
*/*                                                                  */ 00984000
*/*  CONDITION= ERROR, DSV AND OPT INCOMPATABLE                      */ 00985000
*/*  OUTPUT=                                                         */ 00986000
*/*    IEE359I - DIAGNOSTIC MESSAGE                                  */ 00987000
*/*    SMCAOPT2 - SET ON                                             */ 00988000
*/*  RETURN CODE= NONE                                               */ 00989000
*/*                                                                  */ 00990000
*/********************************************************************/ 00991000
*IF SMCADSA='1'B &                     /* DATA SET STATISTICS REQ    */ 00992000
*   SMCAOPT2='0'B THEN                 /* AND JOB/STEP ACCT NOT SPEC */ 00993000
         TM    SMCADSA(SMCAPTR),B'00010000'                     02.0205 00994000
         BNO   @RF00205                                         02.0205 00995000
         TM    SMCAOPT2(SMCAPTR),B'01000000'                    02.0205 00996000
         BNZ   @RF00205                                         02.0205 00997000
*  DO;                                 /* YES, INCOMPATIBLE PARMS    */ 00998000
*    RFY R1 RSTD;                      /* GET REGISTER CONTROL       */ 00999000
*    SMCAOPT2='1'B;                    /* JOB/STEP ACCT WILL BE 02.0208 01000000
*                                         PERFORMED                  */ 01001000
         OI    SMCAOPT2(SMCAPTR),B'01000000'                    02.0208 01002000
*    R1=ADDR(I359I);                   /* ADDR OF MESSAGE IEE359I    */ 01003000
         L     R1,@CV00048                                      02.0209 01004000
*    GEN(WTO   ,MF=(E,(R1)));          /* ISSUE WARNING MESSAGE      */ 01005000
         WTO   ,MF=(E,(R1))                                             01006000
*    RFY R1 UNRSTD;                    /* RELEASE REGISTER CONTROL   */ 01007000
*  END;                                                         02.0212 01008000
*SMCAFOPT=SMCAOPT;                     /* FOREGROUND OPTIONS EQ 01.0213 01009000
*                                         BACKGROUND OPTIONS         */ 01010000
@RF00205 MVC   SMCAFOPT(1,SMCAPTR),SMCAOPT(SMCAPTR)             01.0213 01011000
*SMCAFGN='1'B;                                                  01.0214 01012000
         OI    SMCAFGN(SMCAPTR),B'00000001'                     01.0214 01013000
*RETURN;                                                        01.0215 01014000
@EL00001 L     @13,4(,@13)                                      01.0215 01015000
@EF00001 L     @00,@SIZDATD                                     01.0215 01016000
         LR    @01,@11                                          01.0215 01017000
         FREEMAIN R,LV=(0),A=(1)                                        01018000
@ER00001 LM    @14,@12,12(@13)                                  01.0215 01019000
         BR    @14                                              01.0215 01020000
*BUFKEY: PROC;                                                  02.0216 01021000
BUFKEY   STM   @14,@05,@SA00002+12                              02.0216 01022000
         STM   @07,@12,@SA00002+48                              02.0216 01023000
*/********************************************************************/ 01024000
*/*                                                                  */ 01025000
*/*SEGMENT NAME= BUFKEY                                              */ 01026000
*/*                                                                  */ 01027000
*/*DESCRIPTIVE NAME= BUF= KEYWORD PROCESSOR                          */ 01028000
*/*                                                                  */ 01029000
*/*FUNCTION=                                                         */ 01030000
*/*  THIS ROUTINE WILL VALIDATE THE VALUE SUPPLIED FOR THE           */ 01031000
*/*  BUF KEYWORD. THE VALUE MUST BE 3 OR 4 DECIMAL DIGITS IN LENGTH, */ 01032000
*/*  AND BE BETWEEN 400 AND 8192 BYTES, INCLUSIVE. THE VALUE         */ 01033000
*/*  IS STORED IN SMCABUF.                                           */ 01034000
*/*                                                                  */ 01035000
*/*ENTRY POINT= BUFKEY                                               */ 01036000
*/*  INPUT=                                                          */ 01037000
*/*    PARMLEN - LENGTH OF KEYWORD VALUE                             */ 01038000
*/*    KEYSTART - START OF KEYWORD IN BUFFER                         */ 01039000
*/*    KEYEND - END OF KEYWORD IN BUFFER                             */ 01040000
*/*    PARMVALUE - VALUE FIELD OF KEYWORD                            */ 01041000
*/*EXIT=                                                             */ 01042000
*/*  CONDITION= NORMAL, THE VALUE GIVEN WAS ACCEPTABLE               */ 01043000
*/*  OUTPUT=                                                         */ 01044000
*/*    SMCABUF - NUMBER OF BYTES IN BOTH SMF BUFFERS                 */ 01045000
*/*  RETURN CODE= KEYRTNCD = 0                                       */ 01046000
*/*                                                                  */ 01047000
*/*  CONDITION= THE LENGTH OF THE PARAMETER WAS NOT 3 OR 4 DIGITS    */ 01048000
*/*    OR THE VALUE SPEICIFIED WAS NOT BETWEEN 400                  */ 01049000
*/*    AND 8192, INCLUSIVE.                                          */ 01050000
*/*  OUTPUT= NONE                                                    */ 01051000
*/*  RETURN CODE= KEYRTNCD = 4                                       */ 01052000
*/*                                                                  */ 01053000
*/********************************************************************/ 01054000
*IF PARMLEN=3 | PARMLEN=4 THEN         /* BUF VALUE LENGTH OK        */ 01055000
         CH    PARMLEN,@CH00086                                 02.0217 01056000
         BE    @RT00217                                         02.0217 01057000
         CH    PARMLEN,@CH00089                                 02.0217 01058000
         BNE   @RF00217                                         02.0217 01059000
@RT00217 DS    0H                                               02.0218 01060000
*  DO;                                 /* YES                        */ 01061000
*    CALL DECCNVT;                     /* CONVERT BUFFER LENGTH 02.0219 01062000
*                                         TO DECIMAL                 */ 01063000
         BAL   @14,DECCNVT                                      02.0219 01064000
*    IF KEYRTNCD=0 &                   /* NO ERROR IN CONVERSTION AND*/ 01065000
*       DECVALUE>=MINBUFS &            /* BUFFER NOT SMALLER THAN MIN*/ 01066000
*       DECVALUE<=MAXBUFS THEN         /* BUFFER NOT LARGER THAN MAX */ 01067000
         LTR   KEYRTNCD,KEYRTNCD                                02.0220 01068000
         BNZ   @RF00220                                         02.0220 01069000
         LH    @10,DECVALUE                                     02.0220 01070000
         CH    @10,@CH00104                                     02.0220 01071000
         BL    @RF00220                                         02.0220 01072000
         CH    @10,@CH00100                                     02.0220 01073000
         BH    @RF00220                                         02.0220 01074000
*      DO;                             /* THEN, VALUE FOR BUF OK     */ 01075000
*        SMCABUF=EVAL(DECVALUE/8)*8;         /* BUFFER SIZE IN  02.0222 01076000
*                                         MULTIPLE OF 8 TO SMCA      */ 01077000
         LA    @07,8                                            02.0222 01078000
         LR    @00,@10                                          02.0222 01079000
         SRDA  @00,32                                           02.0222 01080000
         DR    @00,@07                                          02.0222 01081000
         MR    @00,@07                                          02.0222 01082000
         ST    @01,SMCABUF(,SMCAPTR)                            02.0222 01083000
*        KEYVALUE(3)=BLANKS;           /* INIT KEYWORD VALUE TABLE   */ 01084000
         MVC   KEYVALUE+8(4),@CC00090                           02.0223 01085000
*        KEYVALUE(3,1:PARMLEN)=        /* SETUP VALUE TABLE FROM     */ 01086000
*           PARMVALU(1:PARMLEN);       /* BUF = PARAMETER            */ 01087000
         LR    @10,PARMLEN                                      02.0224 01088000
         BCTR  @10,0                                            02.0224 01089000
         EX    @10,@SM00793                                     02.0224 01090000
*        KEYSPEC(3)='1'B;              /* INDICATE KEYWORD SPECIFIED */ 01091000
         OI    KEYSPEC+2,B'10000000'                            02.0225 01092000
*      END;                                                     02.0226 01093000
*    ELSE                                                       02.0227 01094000
*      KEYRTNCD=4;                     /* INVALID KEYWORD VALUE      */ 01095000
         B     @RC00220                                         02.0227 01096000
@RF00220 LA    KEYRTNCD,4                                       02.0227 01097000
*  END;                                                         02.0228 01098000
@RC00220 DS    0H                                               02.0229 01099000
*ELSE                                                           02.0229 01100000
*  KEYRTNCD=4;                         /* INVALID VALUE SPECIFIED    */ 01101000
         B     @RC00217                                         02.0229 01102000
@RF00217 LA    KEYRTNCD,4                                       02.0229 01103000
*RETURN;                                                        02.0230 01104000
@EL00002 DS    0H                                               02.0230 01105000
@EF00002 DS    0H                                               02.0230 01106000
@ER00002 LM    @14,@05,@SA00002+12                              02.0230 01107000
         LM    @07,@12,@SA00002+48                              02.0230 01108000
         BR    @14                                              02.0230 01109000
*END BUFKEY;                                                    02.0231 01110000
         B     @EL00002                                         02.0231 01111000
*DECCNVT: PROC;                                                 02.0232 01112000
DECCNVT  STM   @14,@05,12(@13)                                  02.0232 01113000
         STM   @07,@12,48(@13)                                  02.0232 01114000
*/********************************************************************/ 01115000
*/*                                                                  */ 01116000
*/*SEGMENT NAME= DECCNVT                                             */ 01117000
*/*                                                                  */ 01118000
*/*DESCRIPTIVE NAME= CONVERT TO BINARY ROUTINE                       */ 01119000
*/*                                                                  */ 01120000
*/*FUNCTION=                                                         */ 01121000
*/*  THIS ROUTINE WILL ENSURE THAT THE PARAMETER VALUE               */ 01122000
*/*  CONATINS NUMERIC DIGITS. THE DIGITS WILL BE CONVERTED           */ 01123000
*/*  TO BINARY AND STORED IN DECVALUE.                               */ 01124000
*/*                                                                  */ 01125000
*/*  OPERATION=                                                      */ 01126000
*/*    THE PARAMETER VALUE IS SCANNED FROM RIGHT TO LEFT             */ 01127000
*/*    FOR 'PARMLEN' AND PLACED IN A PACK AREA IN THE SAME MANNER.   */ 01128000
*/*    THE PACK AREA IS THEN PACKED AND CONVERTED TO BINARY          */ 01129000
*/*                                                                  */ 01130000
*/*ENTRY POINT= DECCNVT                                              */ 01131000
*/*  INPUT=                                                          */ 01132000
*/*    PARMLEN - LENGTH OF KEYWORD VALUE                             */ 01133000
*/*    KEYSTART - START OF KEYWORD IN BUFFER                         */ 01134000
*/*    KEYEND - END OF KEYWORD IN BUFFER                             */ 01135000
*/*    PARMVALUE - VALUE FIELD OF KEYWORD                            */ 01136000
*/*EXIT=                                                             */ 01137000
*/*  CONDITION= NORMAL, THE PARAMETER VALUE WAS SUCCESSFULLY         */ 01138000
*/*    CONVERETED                                                    */ 01139000
*/*  OUTPUT=                                                         */ 01140000
*/*    DECVALUE EQUAL TO CONVERTED VALUE                             */ 01141000
*/*  RETURN CODE= KEYRTNCD = 0                                       */ 01142000
*/*                                                                  */ 01143000
*/*  CONDITION= THE PARAMETER VALUE CONTAINED OTHER THAN NUMERIC     */ 01144000
*/*    DIGITS                                                        */ 01145000
*/*  OUTPUT= NONE                                                    */ 01146000
*/*  RETURN CODE= KEYRTNCD = 4                                       */ 01147000
*/*                                                                  */ 01148000
*/********************************************************************/ 01149000
*POSITIN=4;                            /* LENGTH OF PACK FIELD       */ 01150000
         LA    POSITIN,4                                        02.0233 01151000
*PACKFLD=PACKFLD&&PACKFLD;             /* CLEAR PACK FIELD           */ 01152000
         XC    PACKFLD(4),PACKFLD                               02.0234 01153000
*DO PRANGE=0 TO (PARMLEN-1) WHILE(                              02.0235 01154000
*  PARMVALU(PARMLEN-PRANGE)>='0' &      /* DEC DIGIT >= 0 AND        */ 01155000
*  PARMVALU(PARMLEN-PRANGE)<='9');      /* DEC DIGIT <= 9            */ 01156000
         SR    PRANGE,PRANGE                                    02.0235 01157000
         B     @DE00235                                         02.0235 01158000
@DL00235 LR    @10,PARMLEN                                      02.0235 01159000
         SR    @10,PRANGE                                       02.0235 01160000
         ST    @10,@TF00001                                     02.0235 01161000
         ALR   @10,KEYPTR                                       02.0235 01162000
         CLI   PARMVALU-1(@10),C'0'                             02.0235 01163000
         BL    @DC00235                                         02.0235 01164000
         LR    @10,KEYPTR                                       02.0235 01165000
         AL    @10,@TF00001                                     02.0235 01166000
         CLI   PARMVALU-1(@10),C'9'                             02.0235 01167000
         BH    @DC00235                                         02.0235 01168000
*  PACKFLD(POSITIN)=PARMVALU(PARMLEN-PRANGE); /* DIGIT TO PACK FLD   */ 01169000
         LA    @10,PACKFLD-1(POSITIN)                           02.0236 01170000
         LR    @02,KEYPTR                                       02.0236 01171000
         AL    @02,@TF00001                                     02.0236 01172000
         MVC   0(1,@10),PARMVALU-1(@02)                         02.0236 01173000
*  POSITIN=POSITIN-1;                  /* DECREMENT PACK INDX        */ 01174000
         BCTR  POSITIN,0                                        02.0237 01175000
*END;                                                           02.0238 01176000
         AH    PRANGE,@CH00139                                  02.0238 01177000
@DE00235 LR    @10,PARMLEN                                      02.0238 01178000
         BCTR  @10,0                                            02.0238 01179000
         CR    PRANGE,@10                                       02.0238 01180000
         BNH   @DL00235                                         02.0238 01181000
@DC00235 DS    0H                                               02.0239 01182000
*IF PRANGE=PARMLEN THEN                /* ANY NON DEC DIGITS FOUND   */ 01183000
         CR    PRANGE,PARMLEN                                   02.0239 01184000
         BNE   @RF00239                                         02.0239 01185000
*  DO;                                 /* NO, ALL DEC DIGITS         */ 01186000
*    PACK(PACKFLD,PACKFLD);            /* ZONED DEC TO PACKED DEC    */ 01187000
         PACK  PACKFLD(4),PACKFLD(4)                            02.0241 01188000
*    CVB(DECVALUE,PACKFLD);            /* PACKED DEC TO BINARY       */ 01189000
         XC    @TS00001(8),@TS00001                             02.0242 01190000
         MVC   @TS00001+4(4),PACKFLD                            02.0242 01191000
         CVB   @10,@TS00001                                     02.0242 01192000
         STH   @10,DECVALUE                                     02.0242 01193000
*  END;                                                         02.0243 01194000
*ELSE                                                           02.0244 01195000
*  KEYRTNCD=4;                         /* INDICATE INVALID DEC DIGIT */ 01196000
         B     @RC00239                                         02.0244 01197000
@RF00239 LA    KEYRTNCD,4                                       02.0244 01198000
*RETURN;                                                        02.0245 01199000
@EL00003 DS    0H                                               02.0245 01200000
@EF00003 DS    0H                                               02.0245 01201000
@ER00003 LM    @14,@05,12(@13)                                  02.0245 01202000
         LM    @07,@12,48(@13)                                  02.0245 01203000
         BR    @14                                              02.0245 01204000
*END DECCNVT;                                                   02.0246 01205000
         B     @EL00003                                         02.0246 01206000
*DSVKEY: PROC;                                                  02.0247 01207000
DSVKEY   STM   @14,@05,12(@13)                                  02.0247 01208000
         STM   @07,@12,48(@13)                                  02.0247 01209000
*/********************************************************************/ 01210000
*/*                                                                  */ 01211000
*/*SEGMENT NAME= DSVKEY                                              */ 01212000
*/*                                                                  */ 01213000
*/*DESCRIPTIVE NAME= DSV= KEYWORD PROCESSOR                          */ 01214000
*/*                                                                  */ 01215000
*/*FUNCTION=                                                         */ 01216000
*/*  THIS ROUTINE WILL VALIDTAE THE PARAMETER SUPPLIED FOR           */ 01217000
*/*  THE DSV KEYWORD. THE PARAMETER MUST BE 0,1,2, OR 3.             */ 01218000
*/*  SMCADSA AND SMCAVOL ARE SET ACCORDINGLY                         */ 01219000
*/*                                                                  */ 01220000
*/*  OPERATION= NO SPECIAL ALGORITHMS ARE USED                       */ 01221000
*/*                                                                  */ 01222000
*/*ENTRY POINT= DSVKEY                                               */ 01223000
*/*  INPUT=                                                          */ 01224000
*/*    PARMLEN - LENGTH OF KEYWORD VALUE                             */ 01225000
*/*    KEYSTART - START OF KEYWORD IN BUFFER                         */ 01226000
*/*    KEYEND - END OF KEYWORD IN BUFFER                             */ 01227000
*/*    PARMVALUE - VALUE FIELD OF KEYWORD                            */ 01228000
*/*EXIT=                                                             */ 01229000
*/*  CONDITION= NORMAL, A VALID PARAMTER WAS SPECIFIED               */ 01230000
*/*  OUTPUT=                                                         */ 01231000
*/*    SMCADSA AND SMCAVOL ARE SET                                   */ 01232000
*/*  RETURN CODE= KEYRTNCD = 0                                       */ 01233000
*/*                                                                  */ 01234000
*/*  CONDITION= THE LENGTH OF THE PARAMETER WAS NOT ONE              */ 01235000
*/*    OR THE VALUE WAS NOT 0,1,2, OR 3.                             */ 01236000
*/*  OUTPUT= NONE                                                    */ 01237000
*/*  RETURN CODE= KEYRTNCD = 4                                       */ 01238000
*/*                                                                  */ 01239000
*/********************************************************************/ 01240000
*IF PARMLEN=1 THEN                     /* IS PARAMETER LENGTH OK     */ 01241000
         CH    PARMLEN,@CH00139                                 02.0248 01242000
         BNE   @RF00248                                         02.0248 01243000
*  DO;                                 /* YES                        */ 01244000
*    IF PARMVALU(1)='0' THEN           /* IS D.A. OR D.S ACCT DESIRED*/ 01245000
         CLI   PARMVALU(KEYPTR),C'0'                            02.0250 01246000
         BNE   @RF00250                                         02.0250 01247000
*      DO;                                                      02.0251 01248000
*        SMCADSA='0'B;                 /* NO D.S ACCOUNTING          */ 01249000
*        SMCAVOL='0'B;                 /* NO D.A. ACCOUNTING         */ 01250000
         NI    SMCADSA(SMCAPTR),B'11100111'                     02.0253 01251000
*      END;                                                     02.0254 01252000
*    ELSE                                                       02.0255 01253000
*      IF PARMVALU(1)='1' THEN         /* D.A ACCOUNTING ONLY        */ 01254000
         B     @RC00250                                         02.0255 01255000
@RF00250 CLI   PARMVALU(KEYPTR),C'1'                            02.0255 01256000
         BNE   @RF00255                                         02.0255 01257000
*        DO;                           /* YES                        */ 01258000
*          SMCADSA='0'B;               /* NO D.S ACCOUNTING          */ 01259000
*          SMCAVOL='1'B;               /* D.A ACCOUNTING             */ 01260000
         OI    SMCAVOL(SMCAPTR),B'00001000'                     02.0258 01261000
         NI    SMCADSA(SMCAPTR),B'11101111'                     02.0258 01262000
*        END;                                                   02.0259 01263000
*      ELSE                                                     02.0260 01264000
*        IF PARMVALU(1)='2' THEN       /* D.S. ACCOUNTING ONLY       */ 01265000
         B     @RC00255                                         02.0260 01266000
@RF00255 CLI   PARMVALU(KEYPTR),C'2'                            02.0260 01267000
         BNE   @RF00260                                         02.0260 01268000
*          DO;                         /* YES                        */ 01269000
*            SMCADSA='1'B;             /* D.S ACCOUNTING             */ 01270000
*            SMCAVOL='0'B;             /* NO D.A. ACCOUNTING         */ 01271000
         OI    SMCADSA(SMCAPTR),B'00010000'                     02.0263 01272000
         NI    SMCAVOL(SMCAPTR),B'11110111'                     02.0263 01273000
*          END;                                                 02.0264 01274000
*        ELSE                                                   02.0265 01275000
*          IF PARMVALU(1)='3' THEN        /* D.S. AND D.A ACCOUNTING */ 01276000
         B     @RC00260                                         02.0265 01277000
@RF00260 CLI   PARMVALU(KEYPTR),C'3'                            02.0265 01278000
         BNE   @RF00265                                         02.0265 01279000
*            DO;                       /* YES                        */ 01280000
*              SMCADSA='1'B;           /* D.S ACCOUNITNG             */ 01281000
*              SMCAVOL='1'B;           /* D.A. ACCOUNITNG            */ 01282000
         OI    SMCADSA(SMCAPTR),B'00011000'                     02.0268 01283000
*            END;                                               02.0269 01284000
*          ELSE                                                 02.0270 01285000
*            KEYRTNCD=4;               /* INVALID VALUE SPECIFIED    */ 01286000
         B     @RC00265                                         02.0270 01287000
@RF00265 LA    KEYRTNCD,4                                       02.0270 01288000
*  END;                                                         02.0271 01289000
@RC00265 DS    0H                                               02.0271 01290000
@RC00260 DS    0H                                               02.0271 01291000
@RC00255 DS    0H                                               02.0271 01292000
@RC00250 DS    0H                                               02.0272 01293000
*ELSE                                                           02.0272 01294000
*  KEYRTNCD=4;                         /* INVALID VALUE SPECIFIED    */ 01295000
         B     @RC00248                                         02.0272 01296000
@RF00248 LA    KEYRTNCD,4                                       02.0272 01297000
*IF KEYRTNCD=0 THEN                    /* WAS A VALID PARM. SPEC.    */ 01298000
@RC00248 LTR   KEYRTNCD,KEYRTNCD                                02.0273 01299000
         BNZ   @RF00273                                         02.0273 01300000
*  DO;                                 /* YES                        */ 01301000
*    KEYVALUE(7)=BLANKS;               /* INIT KEYWORD VALUE TABLE   */ 01302000
         MVC   KEYVALUE+24(4),@CC00090                          02.0275 01303000
*    KEYVALUE(7,1)=                    /* DSV= PARAMETER VALUE       */ 01304000
*       PARMVALU(1);                   /* TO VALUE TABLE             */ 01305000
         MVC   KEYVALUE+24(1),PARMVALU(KEYPTR)                  02.0276 01306000
*    KEYSPEC(7)='1'B;                  /* INDICATE KEYWORD SPECIFIED */ 01307000
         OI    KEYSPEC+6,B'10000000'                            02.0277 01308000
*  END;                                                         02.0278 01309000
*RETURN;                                                        02.0279 01310000
@EL00004 DS    0H                                               02.0279 01311000
@EF00004 DS    0H                                               02.0279 01312000
@ER00004 LM    @14,@05,12(@13)                                  02.0279 01313000
         LM    @07,@12,48(@13)                                  02.0279 01314000
         BR    @14                                              02.0279 01315000
*END DSVKEY;                                                    02.0280 01316000
         B     @EL00004                                         02.0280 01317000
*ERRMSG: PROC;                                                  02.0281 01318000
ERRMSG   STM   @14,@12,@SA00005+12                              02.0281 01319000
*/********************************************************************/ 01320000
*/*                                                                  */ 01321000
*/*SEGMENT NAME= ERRMSG                                              */ 01322000
*/*                                                                  */ 01323000
*/*DESCRIPTIVE NAME= ERROR MESSAGE PROCESSOR FOR KEYWORD ERRORS      */ 01324000
*/*                                                                  */ 01325000
*/*FUNCTION=                                                         */ 01326000
*/*  THIS ROUTINE WILL ISSUE ALL INVALID KEYWORD, INVALID            */ 01327000
*/*  KEYWORD VALUE, OR MISSING KEYWORD MESSAGES.                     */ 01328000
*/*  IF THIS IS THE FIRST OF SUCH ERROR MESSAGES,                    */ 01329000
*/*  THE 'SMF PARAMETER ERRORS' MESSAGE WILL BE ISSUED.              */ 01330000
*/*                                                                  */ 01331000
*/*  OPERATION= NO SPECIAL ALGORITHMS ARE USED                       */ 01332000
*/*                                                                  */ 01333000
*/*ENTRY POINT= ERRMSG                                               */ 01334000
*/*  INPUT=                                                          */ 01335000
*/*    MSGBUF - CONTAINS APPROPRIATE MESSAGE TO BE ISSUED            */ 01336000
*/*    KEYINVLD - INDICATES WHETHER THIS IS FIRST ERROR              */ 01337000
*/*EXIT=                                                             */ 01338000
*/*  CONDITION= NORMAL, MESSAGE(S) ISSUED TO OPERATOR                */ 01339000
*/*  OUTPUT=                                                         */ 01340000
*/*    MESSAGE TO OPERATOR                                           */ 01341000
*/*    KEYINVLD - SET TO INDICATE AT LEAST ONE ERROR HAS OCCURED     */ 01342000
*/*  RETURN CODE= NONE                                               */ 01343000
*/*                                                                  */ 01344000
*/********************************************************************/ 01345000
*IF KEYINVLD='0'B THEN                 /* FIRST ERROR PROCESSED      */ 01346000
         TM    KEYINVLD,B'00001000'                             02.0282 01347000
         BNZ   @RF00282                                         02.0282 01348000
*  DO;                                 /* YES, PROCESS HEADER MESSAGE*/ 01349000
*    RFY R1 RSTD;                      /* GET REGISTER CONTROL       */ 01350000
*    KEYINVLD='1'B;                    /* INDICATE ERROR OCCURED     */ 01351000
         OI    KEYINVLD,B'00001000'                             02.0285 01352000
*    R1=ADDR(I355IE);                  /* SMF ERROR MESSAGE IEE355I  */ 01353000
         L     R1,@CV00042                                      02.0286 01354000
*    GEN(WTO   ,MF=(E,(R1)));          /* WRITE MESSAGE              */ 01355000
         WTO   ,MF=(E,(R1))                                             01356000
*    RFY R1 UNRSTD;                    /* RELEASE REGISTER CONTROL   */ 01357000
*  END;                                                         02.0289 01358000
*GEN(WTO   ,MF=(E,MSGBUF));            /* WRITE KEYWORD ERROR MESSAGE*/ 01359000
@RF00282 DS    0H                                               02.0290 01360000
         WTO   ,MF=(E,MSGBUF)                                           01361000
*END ERRMSG;                                                    02.0291 01362000
@EL00005 DS    0H                                               02.0291 01363000
@EF00005 DS    0H                                               02.0291 01364000
@ER00005 LM    @14,@12,@SA00005+12                              02.0291 01365000
         BR    @14                                              02.0291 01366000
*EXTKEY: PROC;                                                  02.0292 01367000
EXTKEY   STM   @14,@05,12(@13)                                  02.0292 01368000
         STM   @07,@12,48(@13)                                  02.0292 01369000
*/********************************************************************/ 01370000
*/*                                                                  */ 01371000
*/*SEGMENT NAME= EXTKEY                                              */ 01372000
*/*                                                                  */ 01373000
*/*DESCRIPTIVE NAME= EXT= KEYWORD PROCESSOR                          */ 01374000
*/*                                                                  */ 01375000
*/*FUNCTION=                                                         */ 01376000
*/*  THIS ROUTINE WILL VALIDATE THE PARAMETER SUPPLIED FOR           */ 01377000
*/*  THE EXT KEYWORD. THE PARAMETER MUST BE EITHER YES OR NO.        */ 01378000
*/*  SMCAEXT IS SET ACCORDINGLY                                      */ 01379000
*/*                                                                  */ 01380000
*/*  OPERATION= NO SPECIAL ALGORITHMS ARE USED                       */ 01381000
*/*                                                                  */ 01382000
*/*ENTRY POINT= EXTKEY                                               */ 01383000
*/*  INPUT=                                                          */ 01384000
*/*    PARMLEN - LENGTH OF KEYWORD VALUE                             */ 01385000
*/*    KEYSTART - START OF KEYWORD IN BUFFER                         */ 01386000
*/*    KEYEND - END OF KEYWORD IN BUFFER                             */ 01387000
*/*    PARMVALUE - VALUE FIELD OF KEYWORD                            */ 01388000
*/*EXIT=                                                             */ 01389000
*/*  CONDITION= NORMAL, A VALID PARAMETER WAS SPECIFIED              */ 01390000
*/*  OUTPUT=                                                         */ 01391000
*/*    SMCAEXT IS SET                                                */ 01392000
*/*    KEYWORD VALUE TABLE IS UPDATED                                */ 01393000
*/*    KEYWORD SPECIFIED TABLE IS UPDATED                            */ 01394000
*/*  RETURN CODE= KEYRTNCD = 0                                       */ 01395000
*/*                                                                  */ 01396000
*/*  CONDITION= THE LENGTH OF THE PARAMETER WAS NOT 3 OR 4,          */ 01397000
*/*    OR THE VALUE SPECIFIED WAS NOT YES OR NO.                     */ 01398000
*/*  OUTPUT= NONE                                                    */ 01399000
*/*  RETURN CODE= KEYRTNCD = 4                                       */ 01400000
*/*                                                                  */ 01401000
*/********************************************************************/ 01402000
*IF PARMLEN=2 | PARMLEN=3 THEN         /* IS PARAMETER LENGTH OK     */ 01403000
         CH    PARMLEN,@CH00092                                 02.0293 01404000
         BE    @RT00293                                         02.0293 01405000
         CH    PARMLEN,@CH00086                                 02.0293 01406000
         BNE   @RF00293                                         02.0293 01407000
@RT00293 DS    0H                                               02.0294 01408000
*  DO;                                 /* YES                        */ 01409000
*    IF PARMVALU(1:3)=CYES THEN        /* WAS EXIT =YES SPECIFIED    */ 01410000
         CLC   PARMVALU(3,KEYPTR),@CC00098                      02.0295 01411000
         BNE   @RF00295                                         02.0295 01412000
*      SMCAEXT='1'B;                   /* YES, USER EXITS TO BE TAKEN*/ 01413000
         OI    SMCAEXT(SMCAPTR),B'00100000'                     02.0296 01414000
*    ELSE                                                       02.0297 01415000
*      IF PARMLEN=2 &                  /* PARMETER VALUE LENGTH 2 AND*/ 01416000
*         PARMVALU(1:2)=CNO THEN       /* WAS EXT=NO SPECIFIED       */ 01417000
         B     @RC00295                                         02.0297 01418000
@RF00295 CH    PARMLEN,@CH00092                                 02.0297 01419000
         BNE   @RF00297                                         02.0297 01420000
         CLC   PARMVALU(2,KEYPTR),@CC00093                      02.0297 01421000
         BNE   @RF00297                                         02.0297 01422000
*        SMCAEXT='0'B;                 /* YES,USER EXITS NOT TO 02.0298 01423000
*                                         BE TAKEN                   */ 01424000
         NI    SMCAEXT(SMCAPTR),B'11011111'                     02.0298 01425000
*      ELSE                                                     02.0299 01426000
*        KEYRTNCD=4;                   /* INVALID KEYWORD VALUE      */ 01427000
         B     @RC00297                                         02.0299 01428000
@RF00297 LA    KEYRTNCD,4                                       02.0299 01429000
*  END;                                                         02.0300 01430000
@RC00297 DS    0H                                               02.0300 01431000
@RC00295 DS    0H                                               02.0301 01432000
*ELSE                                                           02.0301 01433000
*  KEYRTNCD=4;                         /* INVALID KEYWORD VALUE      */ 01434000
         B     @RC00293                                         02.0301 01435000
@RF00293 LA    KEYRTNCD,4                                       02.0301 01436000
*IF KEYRTNCD=0 THEN                    /* WAS A VALID PARM ENTERED   */ 01437000
@RC00293 LTR   KEYRTNCD,KEYRTNCD                                02.0302 01438000
         BNZ   @RF00302                                         02.0302 01439000
*  DO;                                 /* YES                        */ 01440000
*    KEYVALUE(5)=BLANKS;               /* INIT KEYWORD VALUE TABLE   */ 01441000
         MVC   KEYVALUE+16(4),@CC00090                          02.0304 01442000
*    KEYVALUE(5,1:PARMLEN)=            /* SET UP VALUE TABLE         */ 01443000
*       PARMVALU(1:PARMLEN);           /* FROM PARAMETER VALUE       */ 01444000
         LR    @10,PARMLEN                                      02.0305 01445000
         BCTR  @10,0                                            02.0305 01446000
         EX    @10,@SM00797                                     02.0305 01447000
*    KEYSPEC(5)='1'B;                  /* INDICATE KEYWORD SPECIFIED */ 01448000
         OI    KEYSPEC+4,B'10000000'                            02.0306 01449000
*  END;                                                         02.0307 01450000
*RETURN;                                                        02.0308 01451000
@EL00006 DS    0H                                               02.0308 01452000
@EF00006 DS    0H                                               02.0308 01453000
@ER00006 LM    @14,@05,12(@13)                                  02.0308 01454000
         LM    @07,@12,48(@13)                                  02.0308 01455000
         BR    @14                                              02.0308 01456000
*END EXTKEY;                                                    02.0309 01457000
         B     @EL00006                                         02.0309 01458000
*JWTKEY: PROC;                                                  02.0310 01459000
JWTKEY   STM   @14,@05,@SA00007+12                              02.0310 01460000
         STM   @07,@12,@SA00007+48                              02.0310 01461000
*/********************************************************************/ 01462000
*/*                                                                  */ 01463000
*/*SEGMENT NAME= JWTKEY                                              */ 01464000
*/*                                                                  */ 01465000
*/*DESCRIPTIVE NAME= JWT= KEYWORD PROCESSOR                          */ 01466000
*/*                                                                  */ 01467000
*/*FUNCTION=                                                         */ 01468000
*/*  THIS SEGMENT WILL VALIDATE THE VALUE SUPPLIED FOR THE           */ 01469000
*/*  JWT KEYWORD. THE VALUE MUST BE 1 TO 3 DECIMAL DIGITS,           */ 01470000
*/*  AND BE GREATER THAN ZERO. THE VALUE IS THEN CONVERTED           */ 01471000
*/*  TO BINARY, MICROSECOND UNITS, AND STORED IN SMCA. THE           */ 01472000
*/*  BINARY EQUIVALENT OF THE JWT PARAMETER VALUE IS RETURNED        */ 01473000
*/*  TO THE CALLER                                                   */ 01474000
*/*                                                                  */ 01475000
*/*  OPERATION=                                                      */ 01476000
*/*    THE FOLLOWING CALCULATION IS PERFORMED TO CONVERT THE         */ 01477000
*/*    JWT VALUE TO MICROSECOND UNITS, WHERE N IS THE SPECIFIED      */ 01478000
*/*    PARAMETER VALUE. DIVIDING BY 1048576 SHIFTS OUT THE           */ 01479000
*/*    MEANINGLESS 12 LOW ORDER PLACES.                              */ 01480000
*/*      SMACAJWT=(N*60000000)/1048576                               */ 01481000
*/*                                                                  */ 01482000
*/*ENTRY POINT= JWTKEY                                               */ 01483000
*/*  INPUT=                                                          */ 01484000
*/*    PARMLEN - LENGTH OF KEYWORD VALUE                             */ 01485000
*/*    KEYSTART - START OF KEYWORD IN BUFFER                         */ 01486000
*/*    KEYEND - END OF KEYWORD IN BUFFER                             */ 01487000
*/*    PARMVALUE - VALUE FIELD OF KEYWORD                            */ 01488000
*/*EXIT=                                                             */ 01489000
*/*  CONDITION=  THE VALUE SPECIFIED WAS ACCEPTABLE                  */ 01490000
*/*  OUTPUT=                                                         */ 01491000
*/*    SMCAJWT - JWT VALUE IN MICROSECOND UNITS                      */ 01492000
*/*    JWTMIN - JWT VALUE IN MINUTES                                 */ 01493000
*/*  RETURN CODE= KEYRTNCD = 0                                       */ 01494000
*/*                                                                  */ 01495000
*/*  CONDITION= THE LENGTH OF THE VALUE WAS NOT 1-3 DECIAML DIGITS   */ 01496000
*/*    OR THE VALUE SPECIFIED WAS NOT GREATER THAN ZERO.             */ 01497000
*/*  OUTPUT= NONE                                                    */ 01498000
*/*  RETURN CODE= KEYRTNCD = 4                                       */ 01499000
*/*                                                                  */ 01500000
*/********************************************************************/ 01501000
*IF PARMLEN>0 & PARMLEN<4 THEN         /* JWT VALUE LENGTH OK        */ 01502000
         LTR   PARMLEN,PARMLEN                                  02.0311 01503000
         BNP   @RF00311                                         02.0311 01504000
         CH    PARMLEN,@CH00089                                 02.0311 01505000
         BNL   @RF00311                                         02.0311 01506000
*  DO;                                                          02.0312 01507000
*    CALL DECCNVT;                     /* CONVERT WAIT TIME TO DEC.  */ 01508000
         BAL   @14,DECCNVT                                      02.0313 01509000
*    IF KEYRTNCD=0 &                   /* NO ERROR IN CONVERTING     */ 01510000
*       DECVALUE>0 THEN                /* AND VALUE POSITIVE         */ 01511000
         SR    @10,@10                                          02.0314 01512000
         CR    KEYRTNCD,@10                                     02.0314 01513000
         BNE   @RF00314                                         02.0314 01514000
         LH    @07,DECVALUE                                     02.0314 01515000
         CR    @07,@10                                          02.0314 01516000
         BNH   @RF00314                                         02.0314 01517000
*      DO;                             /* YES, PARM VALUE OK         */ 01518000
*        JWTMIN=DECVALUE;              /* SAVE VALUE IN MIN     02.0316 01519000
*                                         FOR RECORD 0               */ 01520000
         L     @10,@PC00001+4                                   02.0316 01521000
         ST    @07,JWTMIN(,@10)                                 02.0316 01522000
*        RFY (R0,R1) RSTD;             /* GET REGISTER CONTROL       */ 01523000
*        R1=DECVALUE;                  /* VALUE TO MICRO SECONDS     */ 01524000
         LR    R1,@07                                           02.0318 01525000
*        GEN(M     R0,MICROSEC);                                02.0319 01526000
         M     R0,MICROSEC                                              01527000
*        GEN(D     R0,SHIFT);                                   02.0320 01528000
         D     R0,SHIFT                                                 01529000
*        SMCAJWT=R1;                   /* WAIT TIME IN MICRO SECS    */ 01530000
         ST    R1,SMCAJWT(,SMCAPTR)                             02.0321 01531000
*        RFY (R0,R1) UNRSTD;           /* RELEASE REGISTER CONTROL   */ 01532000
*        KEYVALUE(2)=BLANKS;           /* INIT VALUE TBL ENTRY       */ 01533000
         MVC   KEYVALUE+4(4),@CC00090                           02.0323 01534000
*        KEYVALUE(2,1:PARMLEN)=PARMVALU(1:PARMLEN);             02.0324 01535000
         LR    @10,PARMLEN                                      02.0324 01536000
         BCTR  @10,0                                            02.0324 01537000
         EX    @10,@SM00799                                     02.0324 01538000
*        KEYSPEC(2)='1'B;              /* INDICATE KEYWORD SPECIFIED */ 01539000
         OI    KEYSPEC+1,B'10000000'                            02.0325 01540000
*      END;                                                     02.0326 01541000
*    ELSE                                                       02.0327 01542000
*      KEYRTNCD=4;                     /* KEYWORD VALUE ERROR        */ 01543000
         B     @RC00314                                         02.0327 01544000
@RF00314 LA    KEYRTNCD,4                                       02.0327 01545000
*  END;                                                         02.0328 01546000
@RC00314 DS    0H                                               02.0329 01547000
*ELSE                                                           02.0329 01548000
*  KEYRTNCD=4;                         /* KEYWORD VALUE ERROR        */ 01549000
         B     @RC00311                                         02.0329 01550000
@RF00311 LA    KEYRTNCD,4                                       02.0329 01551000
*RETURN;                                                        02.0330 01552000
@EL00007 DS    0H                                               02.0330 01553000
@EF00007 DS    0H                                               02.0330 01554000
@ER00007 LM    @14,@05,@SA00007+12                              02.0330 01555000
         LM    @07,@12,@SA00007+48                              02.0330 01556000
         BR    @14                                              02.0330 01557000
*END JWTKEY;                                                    02.0331 01558000
         B     @EL00007                                         02.0331 01559000
*MANKEY: PROC;                                                  02.0332 01560000
MANKEY   STM   @14,@05,12(@13)                                  02.0332 01561000
         STM   @07,@12,48(@13)                                  02.0332 01562000
*/********************************************************************/ 01563000
*/*                                                                  */ 01564000
*/*SEGMENT NAME= MANKEY                                              */ 01565000
*/*                                                                  */ 01566000
*/*DESCRIPTIVE NAME= MAN= KEYWORD PROCESSOR                          */ 01567000
*/*                                                                  */ 01568000
*/*FUNCTION=                                                         */ 01569000
*/*  THIS ROUTINE WILL VALIDATE THE PARAMETER SUPPLIED FOR           */ 01570000
*/*  THE MAN KEYWORD. THE VALUE MUST BE NONE, USER, OR ALL.          */ 01571000
*/*  SMCAUSER AND SMCAMAN ARE SET ACCORDINGLY. IF NONE               */ 01572000
*/*  WAS SPECIFIED THE BUF= KEYWORD IS NOT REQUIRED,                 */ 01573000
*/*  OTHERWISE, THE BUF= KEYWORD IS REQUIRED                         */ 01574000
*/*                                                                  */ 01575000
*/*  OPERATION= NO SPECIAL ALGORITHMS USED                           */ 01576000
*/*                                                                  */ 01577000
*/*ENTRY POINT= MANKEY                                               */ 01578000
*/*  INPUT=                                                          */ 01579000
*/*    PARMLEN - LENGTH OF KEYWORD VALUE                             */ 01580000
*/*    KEYSTART - START OF KEYWORD IN BUFFER                         */ 01581000
*/*    KEYEND - END OF KEYWORD IN BUFFER                             */ 01582000
*/*    PARMVALUE - VALUE FIELD OF KEYWORD                            */ 01583000
*/*EXIT=                                                             */ 01584000
*/*  CONDITION= NORMAL, A VALID PARAMTER WAS SPECIFIED               */ 01585000
*/*  OUTPUT=                                                         */ 01586000
*/*    SMCAMAN AND SMCAUSER SET                                      */ 01587000
*/*  RETURN CODE= KEYRTNCD = 0                                       */ 01588000
*/*                                                                  */ 01589000
*/*  CONDITION= THE LENGTH OF THE PARAMETER WAS NOT 3 OR 4,          */ 01590000
*/*    OR THE VALUE SPECIFIED WAS NOT RECOGNIZED AS VALID            */ 01591000
*/*  OUTPUT= NONE                                                    */ 01592000
*/*  RETURN CODE= KEYRTNCD = 4                                       */ 01593000
*/*                                                                  */ 01594000
*/********************************************************************/ 01595000
*IF PARMLEN=3 | PARMLEN=4 THEN         /* WAS MAN=ALL SPECIFIED      */ 01596000
         CH    PARMLEN,@CH00086                                 02.0333 01597000
         BE    @RT00333                                         02.0333 01598000
         CH    PARMLEN,@CH00089                                 02.0333 01599000
         BNE   @RF00333                                         02.0333 01600000
@RT00333 DS    0H                                               02.0334 01601000
*  DO;                                 /* YES                        */ 01602000
*    IF PARMLEN=3 &                    /* PARAMETER LENGTH THREE AND */ 01603000
*       PARMVALU(1:3)=ALL THEN         /* WAS MAN=ALL SPECIFIED      */ 01604000
         CH    PARMLEN,@CH00086                                 02.0335 01605000
         BNE   @RF00335                                         02.0335 01606000
         CLC   PARMVALU(3,KEYPTR),@CC00087                      02.0335 01607000
         BNE   @RF00335                                         02.0335 01608000
*      DO;                             /* YES                        */ 01609000
*        SMCAMAN='1'B;                 /* USER RECORDING             */ 01610000
*        SMCAUSER='1'B;                /* SYSTEM RECORDING           */ 01611000
         OI    SMCAMAN(SMCAPTR),B'11000000'                     02.0338 01612000
*        KEYREQ(3)='1'B;               /* BUF= KEYWORD REQUIRED      */ 01613000
         OI    KEYREQ+2,B'01000000'                             02.0339 01614000
*      END;                                                     02.0340 01615000
*    ELSE                                                       02.0341 01616000
*      IF PARMVALU(1:4)=USER THEN      /* WAS MAN=USER SPECIFIED     */ 01617000
         B     @RC00335                                         02.0341 01618000
@RF00335 CLC   PARMVALU(4,KEYPTR),@CC00112                      02.0341 01619000
         BNE   @RF00341                                         02.0341 01620000
*        DO;                           /* YES                        */ 01621000
*          SMCAUSER='0'B;              /* NO SYSTEM RECORDING        */ 01622000
*          SMCAMAN='1'B;               /* USER RECORDING             */ 01623000
         OI    SMCAMAN(SMCAPTR),B'01000000'                     02.0344 01624000
         NI    SMCAUSER(SMCAPTR),B'01111111'                    02.0344 01625000
*          KEYREQ(3)='1'B;             /* BUF= KEYWORD REQUIRED      */ 01626000
         OI    KEYREQ+2,B'01000000'                             02.0345 01627000
*        END;                                                   02.0346 01628000
*      ELSE                                                     02.0347 01629000
*        IF PARMVALU(1:4)=NONE THEN      /* WAS MAN=NONE SPECIFIED   */ 01630000
         B     @RC00341                                         02.0347 01631000
@RF00341 CLC   PARMVALU(4,KEYPTR),@CC00106                      02.0347 01632000
         BNE   @RF00347                                         02.0347 01633000
*          DO;                         /* YES                        */ 01634000
*            SMCAUSER='0'B;            /* NO SYSTEM RECORDING        */ 01635000
*            SMCAMAN='0'B;             /* NO USER RECORDING          */ 01636000
         NI    SMCAUSER(SMCAPTR),B'00111111'                    02.0350 01637000
*            KEYREQ(3)='0'B;           /* BUF= KEYWORD NOT REQUIRED  */ 01638000
         NI    KEYREQ+2,B'10111111'                             02.0351 01639000
*          END;                                                 02.0352 01640000
*        ELSE                                                   02.0353 01641000
*          KEYRTNCD=4;                 /* INVALID VALUE SPECIFIED    */ 01642000
         B     @RC00347                                         02.0353 01643000
@RF00347 LA    KEYRTNCD,4                                       02.0353 01644000
*  END;                                                         02.0354 01645000
@RC00347 DS    0H                                               02.0354 01646000
@RC00341 DS    0H                                               02.0354 01647000
@RC00335 DS    0H                                               02.0355 01648000
*ELSE                                                           02.0355 01649000
*  KEYRTNCD=4;                         /* INVAILD VALUE SPECIFIED    */ 01650000
         B     @RC00333                                         02.0355 01651000
@RF00333 LA    KEYRTNCD,4                                       02.0355 01652000
*IF KEYRTNCD=0 THEN                    /* KEYWORD VALUE OK           */ 01653000
@RC00333 LTR   KEYRTNCD,KEYRTNCD                                02.0356 01654000
         BNZ   @RF00356                                         02.0356 01655000
*  DO;                                 /* YES                        */ 01656000
*    KEYVALUE(4)=BLANKS;               /* INIT KEYWORD VALUE TABLE   */ 01657000
         MVC   KEYVALUE+12(4),@CC00090                          02.0358 01658000
*    KEYVALUE(4,1:PARMLEN)=            /* SET VALUE TABLE =          */ 01659000
*        PARMVALU(1:PARMLEN);          /* MAN PARAMETER VALUE        */ 01660000
         LR    @10,PARMLEN                                      02.0359 01661000
         BCTR  @10,0                                            02.0359 01662000
         EX    @10,@SM00801                                     02.0359 01663000
*    KEYSPEC(4)='1'B;                  /* INDICATE KEYWORD SPECIFIED */ 01664000
         OI    KEYSPEC+3,B'10000000'                            02.0360 01665000
*  END;                                                         02.0361 01666000
*RETURN;                                                        02.0362 01667000
@EL00008 DS    0H                                               02.0362 01668000
@EF00008 DS    0H                                               02.0362 01669000
@ER00008 LM    @14,@05,12(@13)                                  02.0362 01670000
         LM    @07,@12,48(@13)                                  02.0362 01671000
         BR    @14                                              02.0362 01672000
*END MANKEY;                                                    02.0363 01673000
         B     @EL00008                                         02.0363 01674000
*OPIKEY: PROC;                                                  02.0364 01675000
OPIKEY   STM   @14,@05,12(@13)                                  02.0364 01676000
         STM   @07,@12,48(@13)                                  02.0364 01677000
*/********************************************************************/ 01678000
*/*                                                                  */ 01679000
*/*SEGMENT NAME= OPIKEY                                              */ 01680000
*/*                                                                  */ 01681000
*/*DESCRIPTIVE NAME= OPI=KEYWORD PROCESSOR                           */ 01682000
*/*                                                                  */ 01683000
*/*FUNCTION=                                                         */ 01684000
*/*  THIS ROUTINE WILL VALIDATE THE PARAMETER SUPPLIED FOR THE       */ 01685000
*/*  OPI KEYWORD. THE PARAMETER MUST BE EITHER YES OR NO.            */ 01686000
*/*  SMCAOPI IS SET ACCORDINGLY.                                     */ 01687000
*/*                                                                  */ 01688000
*/*  OPERATION= NO SPECIAL ALGORITHMS ARE USED                       */ 01689000
*/*                                                                  */ 01690000
*/*ENTRY POINT= OPIKEY                                               */ 01691000
*/*  INPUT=                                                          */ 01692000
*/*    PARMLEN - LENGTH OF KEYWORD VALUE                             */ 01693000
*/*    KEYSTART - START OF KEYWORD IN BUFFER                         */ 01694000
*/*    KEYEND - END OF KEYWORD IN BUFFER                             */ 01695000
*/*    PARMVALUE - VALUE FIELD OF KEYWORD                            */ 01696000
*/*EXIT=                                                             */ 01697000
*/*  CONDITION= NORMAL, A VALID PARAMETER WAS SPECIFIED              */ 01698000
*/*  OUTPUT=                                                         */ 01699000
*/*    SMCAOPI SET                                                   */ 01700000
*/*    KEYWORD SPECIFIED TABLE UPDTAED                               */ 01701000
*/*    KEYWORD VALUE TABLE UPDATED                                   */ 01702000
*/*  RETURN CODE= KEYRTNCD = 0                                       */ 01703000
*/*                                                                  */ 01704000
*/*  CONDITION= THE LENGTH OF THE PARAMETER WAS NOT 2 OR 3,          */ 01705000
*/*    OR THE VALUE SPECIFIED WAS NOT YES OR NO                      */ 01706000
*/*  OUTPUT= NONE                                                    */ 01707000
*/*  RETURN CODE= KEYRTNCD = 4                                       */ 01708000
*/*                                                                  */ 01709000
*/********************************************************************/ 01710000
*IF PARMLEN=2 | PARMLEN=3 THEN         /* PARAMETER LENGTH OK        */ 01711000
         CH    PARMLEN,@CH00092                                 02.0365 01712000
         BE    @RT00365                                         02.0365 01713000
         CH    PARMLEN,@CH00086                                 02.0365 01714000
         BNE   @RF00365                                         02.0365 01715000
@RT00365 DS    0H                                               02.0366 01716000
*  DO;                                 /* YES, CONTINUE VALIDITY CHK */ 01717000
*    IF PARMVALU(1:3)=CYES THEN        /* WAS OPI=YES SPECIFIED      */ 01718000
         CLC   PARMVALU(3,KEYPTR),@CC00098                      02.0367 01719000
         BNE   @RF00367                                         02.0367 01720000
*      DO;                             /* YES                        */ 01721000
*        SMCAOPI='1'B;                 /* INDICATE OPI=YES SPECIFIED */ 01722000
         OI    SMCAOPI(SMCAPTR),B'00100000'                     02.0369 01723000
*        IF CONSOLE='0'B THEN          /* IF INPUT WAS FROM PARMLIB  */ 01724000
         TM    CONSOLE,B'10000000'                              02.0370 01725000
         BNZ   @RF00370                                         02.0370 01726000
*          DO;                         /* INIT KEY SPEC & VALUE TBL  */ 01727000
*            KEYVALUE(9)=BLANKS;       /* INIT VALUE TABLE ENTRY     */ 01728000
         MVC   KEYVALUE+32(4),@CC00090                          02.0372 01729000
*            KEYVALUE(9,1:PARMLEN)=PARMVALU(1:PARMLEN);         02.0373 01730000
         LR    @10,PARMLEN                                      02.0373 01731000
         BCTR  @10,0                                            02.0373 01732000
         EX    @10,@SM00803                                     02.0373 01733000
*            KEYSPEC(9)='1'B;          /* INDICATE KEYWORD SPECIFIED */ 01734000
         OI    KEYSPEC+8,B'10000000'                            02.0374 01735000
*          END;                                                 02.0375 01736000
*      END;                                                     02.0376 01737000
@RF00370 DS    0H                                               02.0377 01738000
*    ELSE                                                       02.0377 01739000
*      IF PARMLEN=2 &                  /* PARAMETER LENGTH THREE AND */ 01740000
*         PARMVALU(1:2)=CNO THEN       /* OPI=NO SPECIFIED           */ 01741000
         B     @RC00367                                         02.0377 01742000
@RF00367 CH    PARMLEN,@CH00092                                 02.0377 01743000
         BNE   @RF00377                                         02.0377 01744000
         CLC   PARMVALU(2,KEYPTR),@CC00093                      02.0377 01745000
         BNE   @RF00377                                         02.0377 01746000
*        DO;                           /* YES                        */ 01747000
*          SMCAOPI='0'B;               /* INDICATE OPI=NO SPECIFIED  */ 01748000
         NI    SMCAOPI(SMCAPTR),B'11011111'                     02.0379 01749000
*        END;                                                   02.0380 01750000
*      ELSE                                                     02.0381 01751000
*        KEYRTNCD=4;                   /* INVALID VALUE SPECIFIED    */ 01752000
         B     @RC00377                                         02.0381 01753000
@RF00377 LA    KEYRTNCD,4                                       02.0381 01754000
*  END;                                                         02.0382 01755000
@RC00377 DS    0H                                               02.0382 01756000
@RC00367 DS    0H                                               02.0383 01757000
*ELSE                                                           02.0383 01758000
*  KEYRTNCD=4;                         /* INVALID VALUE SPECIFIED    */ 01759000
         B     @RC00365                                         02.0383 01760000
@RF00365 LA    KEYRTNCD,4                                       02.0383 01761000
*RETURN;                                                        02.0384 01762000
@EL00009 DS    0H                                               02.0384 01763000
@EF00009 DS    0H                                               02.0384 01764000
@ER00009 LM    @14,@05,12(@13)                                  02.0384 01765000
         LM    @07,@12,48(@13)                                  02.0384 01766000
         BR    @14                                              02.0384 01767000
*END OPIKEY;                                                    02.0385 01768000
         B     @EL00009                                         02.0385 01769000
*OPTKEY: PROC;                                                  02.0386 01770000
OPTKEY   STM   @14,@05,12(@13)                                  02.0386 01771000
         STM   @07,@12,48(@13)                                  02.0386 01772000
*/********************************************************************/ 01773000
*/*                                                                  */ 01774000
*/*SEGMENT NAME= OPTKEY                                              */ 01775000
*/*                                                                  */ 01776000
*/*DESCRIPTIVE NAME= OPT= KEYWORD PROCESSOR                          */ 01777000
*/*                                                                  */ 01778000
*/*FUNCTION=                                                         */ 01779000
*/*  THIS ROUTINE WILL VALIDATE THE PARAMETER SUPPLIED FOR THE       */ 01780000
*/*  OPT KEYWORD. THE PARAMETER MUST BE EITHER 1 OR 2.               */ 01781000
*/*  SMCAOPT1 AND SMCAOPT2 ARE SET ACCORDINGLY                       */ 01782000
*/*                                                                  */ 01783000
*/*  OPERATION= NO SPECIAL ALGORITHMS ARE USED                       */ 01784000
*/*                                                                  */ 01785000
*/*ENTRY POINT= OPTKEY                                               */ 01786000
*/*  INPUT=                                                          */ 01787000
*/*    PARMLEN - LENGTH OF KEYWORD VALUE                             */ 01788000
*/*    KEYSTART - START OF KEYWORD IN BUFFER                         */ 01789000
*/*    KEYEND - END OF KEYWORD IN BUFFER                             */ 01790000
*/*    PARMVALUE - VALUE FIELD OF KEYWORD                            */ 01791000
*/*EXIT=                                                             */ 01792000
*/*  CONDITION= NORMAL, A VALID PARAMETER WAS SPECIFIED              */ 01793000
*/*  OUTPUT=                                                         */ 01794000
*/*    SMCAOPT1 AND SMCAOPT2 SET                                     */ 01795000
*/*  RETURN CODE= KEYRTNCD = 0                                       */ 01796000
*/*                                                                  */ 01797000
*/*  CONDITION= THE LENGTH OF THE PARAMETER WAS NOT 1 OR 2,          */ 01798000
*/*    OR THE VALUE SPECIFIED WAS NOT 1 OR 2.                        */ 01799000
*/*  OUTPUT= NONE                                                    */ 01800000
*/*  RETURN CODE= KEYRTNCD = 4                                       */ 01801000
*/*                                                                  */ 01802000
*/********************************************************************/ 01803000
*IF PARMLEN=1 THEN                     /* PARMETER LENGTH OK         */ 01804000
         CH    PARMLEN,@CH00139                                 02.0387 01805000
         BNE   @RF00387                                         02.0387 01806000
*  DO;                                 /* YES, CONTINUE CHECK PARM   */ 01807000
*    IF PARMVALU(1)='1' THEN           /* JOB ACCOUNTING SPEC        */ 01808000
         CLI   PARMVALU(KEYPTR),C'1'                            02.0389 01809000
         BNE   @RF00389                                         02.0389 01810000
*      DO;                             /* YES                        */ 01811000
*        SMCAOPT1='1'B;                /* JOB ACCOUNTING ON          */ 01812000
*        SMCAOPT2='0'B;                /* STEP ACCOUNTING OFF        */ 01813000
         OI    SMCAOPT1(SMCAPTR),B'10000000'                    02.0392 01814000
         NI    SMCAOPT2(SMCAPTR),B'10111111'                    02.0392 01815000
*      END;                                                     02.0393 01816000
*    ELSE                                                       02.0394 01817000
*      IF PARMVALU(1)='2' THEN         /* STEP & JOB ACCOUNTING SPEC */ 01818000
         B     @RC00389                                         02.0394 01819000
@RF00389 CLI   PARMVALU(KEYPTR),C'2'                            02.0394 01820000
         BNE   @RF00394                                         02.0394 01821000
*        DO;                           /* YES                        */ 01822000
*          SMCAOPT1='1'B;              /* JOB ACCOUNTING ON          */ 01823000
*          SMCAOPT2='1'B;              /* STEP ACCOUNTING ON         */ 01824000
         OI    SMCAOPT1(SMCAPTR),B'11000000'                    02.0397 01825000
*        END;                                                   02.0398 01826000
*      ELSE                                                     02.0399 01827000
*        KEYRTNCD=4;                   /* PARAMETER VALUE ERROR      */ 01828000
         B     @RC00394                                         02.0399 01829000
@RF00394 LA    KEYRTNCD,4                                       02.0399 01830000
*  END;                                                         02.0400 01831000
@RC00394 DS    0H                                               02.0400 01832000
@RC00389 DS    0H                                               02.0401 01833000
*ELSE                                                           02.0401 01834000
*  KEYRTNCD=4;                         /* INVALID VALUE LENGTH       */ 01835000
         B     @RC00387                                         02.0401 01836000
@RF00387 LA    KEYRTNCD,4                                       02.0401 01837000
*IF KEYRTNCD=0 THEN                    /* KEYWORD VALUE OK           */ 01838000
@RC00387 LTR   KEYRTNCD,KEYRTNCD                                02.0402 01839000
         BNZ   @RF00402                                         02.0402 01840000
*  DO;                                 /* YES, INIT SPEC & VALUE TBL */ 01841000
*    KEYVALUE(6)=BLANKS;               /* INIT TBL ENTRY TO BLANKS   */ 01842000
         MVC   KEYVALUE+20(4),@CC00090                          02.0404 01843000
*    KEYVALUE(6,1)=PARMVALU(1);          /* PARM TO VALUE TBL        */ 01844000
         MVC   KEYVALUE+20(1),PARMVALU(KEYPTR)                  02.0405 01845000
*    KEYSPEC(6)='1'B;                  /* INDICATE KEYWORD SPECIFIED */ 01846000
         OI    KEYSPEC+5,B'10000000'                            02.0406 01847000
*  END;                                                         02.0407 01848000
*RETURN;                                                        02.0408 01849000
@EL00010 DS    0H                                               02.0408 01850000
@EF00010 DS    0H                                               02.0408 01851000
@ER00010 LM    @14,@05,12(@13)                                  02.0408 01852000
         LM    @07,@12,48(@13)                                  02.0408 01853000
         BR    @14                                              02.0408 01854000
*END OPTKEY;                                                    02.0409 01855000
         B     @EL00010                                         02.0409 01856000
*PROMPTOP: PROC;                                                02.0410 01857000
PROMPTOP STM   @14,@12,@SA00011+12                              02.0410 01858000
*/********************************************************************/ 01859000
*/*                                                                  */ 01860000
*/*SEGMENT NAME= PROMPTOP                                            */ 01861000
*/*                                                                  */ 01862000
*/*DESCRIPTIVE NAME= PROMPT OPERATOR                                 */ 01863000
*/*                                                                  */ 01864000
*/*FUNCTION=                                                         */ 01865000
*/*  THIS SEGMENT ISSUES A WTOR TO THE OPERATOR.                     */ 01866000
*/*  HIS RESPONCE IS THEN PLACED INTO 'BUFFER' AND TRANSLATED        */ 01867000
*/*  TO UPPER CASE.                                                  */ 01868000
*/*                                                                  */ 01869000
*/*  OPERATION= NO SPECIAL ALGORITHMS ARE USED                       */ 01870000
*/*                                                                  */ 01871000
*/*ENTRY POINT= IN-LINE SEGMENT                                      */ 01872000
*/*  INPUT=                                                          */ 01873000
*/*    OPERATOR RESPONCE                                             */ 01874000
*/*    MSGBUF - CONTAINS MESSAGE TO BE ISSUED TO THE OPERATOR        */ 01875000
*/*EXIT=                                                             */ 01876000
*/*  CONDITION= OPERATOR RESPONCE PROCESSED                          */ 01877000
*/*  OUTPUT=                                                         */ 01878000
*/*    BUFFER - CONTAINS OPERATOR RESPONCE IN UPPER CASE             */ 01879000
*/*    CONSOLE - BIT SET TO INDICATE INPUT FROM OPERATOR             */ 01880000
*/*  RETURN CODE= NONE                                               */ 01881000
*/*                                                                  */ 01882000
*/********************************************************************/ 01883000
*BUFFER=BUFFER&&BUFFER;                /* CLEAR BUFFER               */ 01884000
         XC    BUFFER(121),BUFFER                               02.0411 01885000
*WTORECB=0;                            /* CLEAR WTOR ECB             */ 01886000
         SR    @10,@10                                          02.0412 01887000
         ST    @10,WTORECB                                      02.0412 01888000
*GEN(WTOR  ,BUFFER,REPLYN,WTORECB,MF=(E,MSGBUF));               02.0413 01889000
         WTOR  ,BUFFER,REPLYN,WTORECB,MF=(E,MSGBUF)                     01890000
*GEN(WAIT  ECB=WTORECB);               /* WAIT FOR OPERATOR REPLY    */ 01891000
         WAIT  ECB=WTORECB                                              01892000
*TR(BUFFER,TRANSTBL(1));               /* TRANSLATE TO UPPER CASE    */ 01893000
         TR    BUFFER(121),TRANSTBL                             02.0415 01894000
*CONSOLE='1'B;                         /* INDICATE INPUT FROM OP     */ 01895000
         OI    CONSOLE,B'10000000'                              02.0416 01896000
*END PROMPTOP;                                                  02.0417 01897000
@EL00011 DS    0H                                               02.0417 01898000
@EF00011 DS    0H                                               02.0417 01899000
@ER00011 LM    @14,@12,@SA00011+12                              02.0417 01900000
         BR    @14                                              02.0417 01901000
*RECKEY: PROC;                                                  02.0418 01902000
RECKEY   STM   @14,@05,12(@13)                                  02.0418 01903000
         STM   @07,@12,48(@13)                                  02.0418 01904000
*/********************************************************************/ 01905000
*/*                                                                  */ 01906000
*/*SEGMENT NAME= RECKEY                                              */ 01907000
*/*                                                                  */ 01908000
*/*DESCRIPTIVE NAME= REC= KEYWORD PROCESSOR                          */ 01909000
*/*                                                                  */ 01910000
*/*FUNCTION=                                                         */ 01911000
*/*  THIS ROUTINE WILL VALIDATE THE PARAMETER SUPPLIED FOR           */ 01912000
*/*  THE REC KEYWORD. THE PARAMETER MUST BE EITHER 0 OR 2.           */ 01913000
*/*  SMCTDS IS SET ACCORDINGLY                                       */ 01914000
*/*                                                                  */ 01915000
*/*  OPERATION= NO SPECIAL ALGORITHMS ARE USED                       */ 01916000
*/*                                                                  */ 01917000
*/*ENTRY POINT= RECKEY                                               */ 01918000
*/*  INPUT=                                                          */ 01919000
*/*    PARMLEN - LENGTH OF KEYWORD VALUE                             */ 01920000
*/*    KEYSTART - START OF KEYWORD IN BUFFER                         */ 01921000
*/*    KEYEND - END OF KEYWORD IN BUFFER                             */ 01922000
*/*    PARMVALUE - VALUE FIELD OF KEYWORD                            */ 01923000
*/*EXIT=                                                             */ 01924000
*/*  CONDITION= NORAML, A VALID PARAMETER WAS SPECIFIED.             */ 01925000
*/*  OUTPUT=                                                         */ 01926000
*/*    SMCATDS SET                                                   */ 01927000
*/*  RETURN CODE= KEYRTNCD = 0                                       */ 01928000
*/*                                                                  */ 01929000
*/*  CONDITION= THE LENGTH OF THE PARAMETER WAS NOT 1,               */ 01930000
*/*    OR THE VALUE SPECIFIED WAS NOT 0 OR 2.                        */ 01931000
*/*  OUTPUT= NONE                                                    */ 01932000
*/*  RETURN CODE= KEYRTNCD = 4                                       */ 01933000
*/*                                                                  */ 01934000
*/********************************************************************/ 01935000
*IF PARMLEN=1 THEN                     /* IS PARAMETER LENGTH OK     */ 01936000
         CH    PARMLEN,@CH00139                                 02.0419 01937000
         BNE   @RF00419                                         02.0419 01938000
*  DO;                                 /* YES, CONTINUE PARM CHECK   */ 01939000
*    IF PARMVALU(1)='0' THEN           /* IS TEMP. D.S. INFO RCDING     01940000
*                                         WANTED                     */ 01941000
         CLI   PARMVALU(KEYPTR),C'0'                            02.0421 01942000
         BNE   @RF00421                                         02.0421 01943000
*      SMCATDS='0'B;                   /* NO, NO REC TYPE 17         */ 01944000
         NI    SMCATDS(SMCAPTR),B'11111101'                     02.0422 01945000
*    ELSE                                                       02.0423 01946000
*      IF PARMVALU(1)='2' THEN         /* IS TEMP D.S. INFO     02.0423 01947000
*                                         WANTED                     */ 01948000
         B     @RC00421                                         02.0423 01949000
@RF00421 CLI   PARMVALU(KEYPTR),C'2'                            02.0423 01950000
         BNE   @RF00423                                         02.0423 01951000
*        SMCATDS='1'B;                 /* YES, REC TYPE 17 SHOULD       01952000
*                                         BE ISSUED                  */ 01953000
         OI    SMCATDS(SMCAPTR),B'00000010'                     02.0424 01954000
*      ELSE                                                     02.0425 01955000
*        KEYRTNCD=4;                   /* PARAMETER VALUE ERROR      */ 01956000
         B     @RC00423                                         02.0425 01957000
@RF00423 LA    KEYRTNCD,4                                       02.0425 01958000
*    IF KEYRTNCD=0 THEN                /* WAS A VALID PARM FOUND     */ 01959000
@RC00423 DS    0H                                               02.0426 01960000
@RC00421 LTR   KEYRTNCD,KEYRTNCD                                02.0426 01961000
         BNZ   @RF00426                                         02.0426 01962000
*      DO;                             /* YES, INIT VALUE & SPEC TBL */ 01963000
*        KEYVALUE(8)=BLANKS;           /* BLANK TBL ENTRY            */ 01964000
         MVC   KEYVALUE+28(4),@CC00090                          02.0428 01965000
*        KEYVALUE(8,1)=PARMVALU(1);          /* PARM VALUE TO VALUE     01966000
*                                         TABLE                      */ 01967000
         MVC   KEYVALUE+28(1),PARMVALU(KEYPTR)                  02.0429 01968000
*        KEYSPEC(8)='1'B;              /* INDICATE KEYWORD SPECIFIED */ 01969000
         OI    KEYSPEC+7,B'10000000'                            02.0430 01970000
*      END;                                                     02.0431 01971000
*  END;                                                         02.0432 01972000
@RF00426 DS    0H                                               02.0433 01973000
*ELSE                                  /* INPUT LENGTH IS INCORRECT  */ 01974000
*  KEYRTNCD=4;                         /* SET ERROR RETURN CODE      */ 01975000
         B     @RC00419                                         02.0433 01976000
@RF00419 LA    KEYRTNCD,4                                       02.0433 01977000
*RETURN;                                                        02.0434 01978000
@EL00012 DS    0H                                               02.0434 01979000
@EF00012 DS    0H                                               02.0434 01980000
@ER00012 LM    @14,@05,12(@13)                                  02.0434 01981000
         LM    @07,@12,48(@13)                                  02.0434 01982000
         BR    @14                                              02.0434 01983000
*END RECKEY;                                                    02.0435 01984000
         B     @EL00012                                         02.0435 01985000
*SIDKEY: PROC;                                                  02.0436 01986000
SIDKEY   STM   @14,@05,12(@13)                                  02.0436 01987000
         STM   @07,@12,48(@13)                                  02.0436 01988000
*/********************************************************************/ 01989000
*/*                                                                  */ 01990000
*/*SEGMENT NAME= SIDKEY                                              */ 01991000
*/*                                                                  */ 01992000
*/*DESCRIPTIVE NAME=  SID= KEYWORD PROCESSOR                         */ 01993000
*/*                                                                  */ 01994000
*/*FUNCTION=                                                         */ 01995000
*/*  THIS SEGMENT WILL VALIDATE THE VALUE SUPPLIED FOR THE           */ 01996000
*/*  SID KEYWORD AND THEN STORE THIS VALUE IN SMCASID. THE           */ 01997000
*/* VALUE MUST BE 4 ALPHMERIC CHARACTERS                             */ 01998000
*/*                                                                  */ 01999000
*/*  OPERATION= NO SPECIAL ALGORITHMS                                */ 02000000
*/*                                                                  */ 02001000
*/*ENTRY POINT= SIDKEY                                               */ 02002000
*/*  INPUT=                                                          */ 02003000
*/*    PARMLEN - LENGTH OF KEYWORD VALUE                             */ 02004000
*/*    KEYSTART - START OF KEYWORD IN BUFFER                         */ 02005000
*/*    KEYEND - END OF KEYWORD IN BUFFER                             */ 02006000
*/*    PARMVALUE - VALUE FIELD OF KEYWORD                            */ 02007000
*/*EXIT=                                                             */ 02008000
*/*  CONDITION= NORMAL, THE VALUE SPECIFIED WAS EXCEPTABLE           */ 02009000
*/*  OUTPUT= SMCASID                                                 */ 02010000
*/*  RETURN CODE= KEYRTNCD = 0                                       */ 02011000
*/*                                                                  */ 02012000
*/*  CONDITION= THE LENGTH OF THE PARAMETER WAS NOT 4 CHARACTERS     */ 02013000
*/*  OUTPUT= NONE                                                    */ 02014000
*/*  RETURN CODE= KEYRTNCD = 4                                       */ 02015000
*/*                                                                  */ 02016000
*/********************************************************************/ 02017000
*IF PARMLEN=4 THEN                     /* KEYWORD VALUE LENGTH OK    */ 02018000
         CH    PARMLEN,@CH00089                                 02.0437 02019000
         BNE   @RF00437                                         02.0437 02020000
*  DO;                                 /* YES                        */ 02021000
*    SMCASID=PARMVALU(1:4);            /* SID VALUE TO SMCA          */ 02022000
         MVC   SMCASID(4,SMCAPTR),PARMVALU(KEYPTR)              02.0439 02023000
*    KEYVALUE(1)=BLANKS;               /* INIT VALUE TABLE ENTRY     */ 02024000
         MVC   KEYVALUE(4),@CC00090                             02.0440 02025000
*    KEYVALUE(1,1:4)=                  /* SET VALUE TABLE FROM       */ 02026000
*        PARMVALU(1:4);                /* SID = PARAMETER            */ 02027000
         MVC   KEYVALUE(4),PARMVALU(KEYPTR)                     02.0441 02028000
*    KEYSPEC(1)='1'B;                  /* INDICATE KEYWORD SPECIFIED */ 02029000
         OI    KEYSPEC,B'10000000'                              02.0442 02030000
*  END;                                                         02.0443 02031000
*ELSE                                                           02.0444 02032000
*  KEYRTNCD=4;                         /* KEYWORD LENGTH INCORRECT   */ 02033000
         B     @RC00437                                         02.0444 02034000
@RF00437 LA    KEYRTNCD,4                                       02.0444 02035000
*RETURN;                                                        02.0445 02036000
@EL00013 DS    0H                                               02.0445 02037000
@EF00013 DS    0H                                               02.0445 02038000
@ER00013 LM    @14,@05,12(@13)                                  02.0445 02039000
         LM    @07,@12,48(@13)                                  02.0445 02040000
         BR    @14                                              02.0445 02041000
*END SIDKEY;                                                    02.0446 02042000
         B     @EL00013                                         02.0446 02043000
*SYNAD: PROC OPTIONS(NOSAVE);                                   02.0447 02044000
SYNAD    DS    0H                                               02.0448 02045000
*/********************************************************************/ 02046000
*/*                                                                  */ 02047000
*/*SEGMENT NAME= SYNAD                                               */ 02048000
*/*                                                                  */ 02049000
*/*DESCRIPTIVE NAME= SYNAD EXIT FOR READS                            */ 02050000
*/*                                                                  */ 02051000
*/*FUNCTION=                                                         */ 02052000
*/*  THIS ROUTINE IS GIVEN CONTROL WHEN SEGMENT BUILDBUF ISSUES      */ 02053000
*/*  CHECK TO WAIT FOR I/O TO COMPLETE AND THERE WAS AN I/O          */ 02054000
*/*  ON THE READ OF A RECORD FROM PARMLIB.                           */ 02055000
*/*                                                                  */ 02056000
*/*  OPERATION= NO SPECIAL ALGORITHMS ARE USED                       */ 02057000
*/*                                                                  */ 02058000
*/*ENTRY POINT= SYNAD                                                */ 02059000
*/*  INPUT= NONE                                                     */ 02060000
*/*EXIT=                                                             */ 02061000
*/*  CONDITION= ERROR, AN I/O ERROR OCCURED ON PARMLIB READ          */ 02062000
*/*  OUTPUT=                                                         */ 02063000
*/*    PLIBERR - SET TO INDICATE ERROR IN PROCESSING                 */ 02064000
*/*    IOERRSC - SET TO INDICATE I/O ERROR ON PARMLIB                */ 02065000
*/*  RETURN CODE= NONE                                               */ 02066000
*/*                                                                  */ 02067000
*/********************************************************************/ 02068000
*PLIBERR='1'B;                         /* GENERAL ERROR SWC ON       */ 02069000
         OI    PLIBERR,B'10000000'                              02.0448 02070000
*IOERRSC='1'B;                         /* INDICATE I/O ERROR OCCURED */ 02071000
         OI    IOERRSC,B'00100000'                              02.0449 02072000
*END SYNAD;                                                     02.0450 02073000
@EL00014 DS    0H                                               02.0450 02074000
@EF00014 DS    0H                                               02.0450 02075000
@ER00014 BR    @14                                              02.0450 02076000
*END IEEMB821                                                   01.0451 02077000
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      * 02078000
*/*%INCLUDE SYSLIB  (B821SPEC)                                        * 02079000
*/*%INCLUDE SYSLIB  (B821DATA)                                        * 02080000
*/*%INCLUDE SYSLIB  (IEESMCA )                                        * 02081000
*/*%INCLUDE SYSLIB  (IHADCBDF)                                        * 02082000
*/*%INCLUDE SYSLIB  (IHADCB  )                                        * 02083000
*/*%INCLUDE SYSLIB  (SMCADFLT)                                        * 02084000
*/*%INCLUDE SYSLIB  (SMCADFLS)                                        * 02085000
*/*%INCLUDE SYSLIB  (PLIBPREP)                                        * 02086000
*/*%INCLUDE SYSLIB  (PLIBPRES)                                        * 02087000
*/*%INCLUDE SYSLIB  (OPENPLIB)                                        * 02088000
*/*%INCLUDE SYSLIB  (OPENPLIS)                                        * 02089000
*/*%INCLUDE SYSLIB  (FINDMEM )                                        * 02090000
*/*%INCLUDE SYSLIB  (FINDMEMS)                                        * 02091000
*/*%INCLUDE SYSLIB  (BUILDBUF)                                        * 02092000
*/*%INCLUDE SYSLIB  (BUILDBUS)                                        * 02093000
*/*%INCLUDE SYSLIB  (OPINPUT )                                        * 02094000
*/*%INCLUDE SYSLIB  (OPINPUTS)                                        * 02095000
*/*%INCLUDE SYSLIB  (PARSEINT)                                        * 02096000
*/*%INCLUDE SYSLIB  (PARSEINS)                                        * 02097000
*/*%INCLUDE SYSLIB  (BUFRPARS)                                        * 02098000
*/*%INCLUDE SYSLIB  (BUFRSPEC)                                        * 02099000
*/*%INCLUDE SYSLIB  (FINDEND )                                        * 02100000
*/*%INCLUDE SYSLIB  (FINDENDS)                                        * 02101000
*/*%INCLUDE SYSLIB  (KEYPROC )                                        * 02102000
*/*%INCLUDE SYSLIB  (KEYPROCS)                                        * 02103000
*/*%INCLUDE SYSLIB  (CKMISSNG)                                        * 02104000
*/*%INCLUDE SYSLIB  (CKMISSNS)                                        * 02105000
*/*%INCLUDE SYSLIB  (OPVERIFY)                                        * 02106000
*/*%INCLUDE SYSLIB  (OPVERIFS)                                        * 02107000
*/*%INCLUDE SYSLIB  (COMPAT  )                                        * 02108000
*/*%INCLUDE SYSLIB  (COMPATS )                                        * 02109000
*/*%INCLUDE SYSLIB  (BUFKEY  )                                        * 02110000
*/*%INCLUDE SYSLIB  (BUFSPEC )                                        * 02111000
*/*%INCLUDE SYSLIB  (DECCNVT )                                        * 02112000
*/*%INCLUDE SYSLIB  (DECCNVTS)                                        * 02113000
*/*%INCLUDE SYSLIB  (DSVKEY  )                                        * 02114000
*/*%INCLUDE SYSLIB  (DSVSPEC )                                        * 02115000
*/*%INCLUDE SYSLIB  (ERRMSG  )                                        * 02116000
*/*%INCLUDE SYSLIB  (ERRMSGS )                                        * 02117000
*/*%INCLUDE SYSLIB  (EXTKEY  )                                        * 02118000
*/*%INCLUDE SYSLIB  (EXTSPEC )                                        * 02119000
*/*%INCLUDE SYSLIB  (JWTKEY  )                                        * 02120000
*/*%INCLUDE SYSLIB  (JWTSPEC )                                        * 02121000
*/*%INCLUDE SYSLIB  (MANKEY  )                                        * 02122000
*/*%INCLUDE SYSLIB  (MANSPEC )                                        * 02123000
*/*%INCLUDE SYSLIB  (OPIKEY  )                                        * 02124000
*/*%INCLUDE SYSLIB  (OPISPEC )                                        * 02125000
*/*%INCLUDE SYSLIB  (OPTKEY  )                                        * 02126000
*/*%INCLUDE SYSLIB  (OPTSPEC )                                        * 02127000
*/*%INCLUDE SYSLIB  (PROMPTOP)                                        * 02128000
*/*%INCLUDE SYSLIB  (PROMPTOS)                                        * 02129000
*/*%INCLUDE SYSLIB  (RECKEY  )                                        * 02130000
*/*%INCLUDE SYSLIB  (RECSPEC )                                        * 02131000
*/*%INCLUDE SYSLIB  (SIDKEY  )                                        * 02132000
*/*%INCLUDE SYSLIB  (SIDSPEC )                                        * 02133000
*/*%INCLUDE SYSLIB  (SYNAD   )                                        * 02134000
*/*%INCLUDE SYSLIB  (SYNADS  )                                        * 02135000
*;                                                              01.0451 02136000
         B     @EL00001                                         01.0451 02137000
@DATA    DS    0H                                                       02138000
@CH00139 DC    H'1'                                                     02139000
@CH00092 DC    H'2'                                                     02140000
@CH00086 DC    H'3'                                                     02141000
@CH00089 DC    H'4'                                                     02142000
@CH00127 DC    H'9'                                                     02143000
@CH00679 DC    H'71'                                                    02144000
@CH00223 DC    H'121'                                                   02145000
@CH00104 DC    H'400'                                                   02146000
@CH00100 DC    H'8192'                                                  02147000
@SM00762 MVC   MSGBUF(0),I365I(@10)                                     02148000
@SM00768 MVC   0(0,@10),0(@01)                                          02149000
@SM00770 MVC   MSGBUF(0),I356A(@10)                                     02150000
@SM00772 MVC   MSGBUF(0),I352A(@10)                                     02151000
@SM00774 MVC   MSGBUF(0),I353A(@10)                                     02152000
@SM00780 MVC   MSGBUF(0),I355IK(@10)                                    02153000
@SM00782 MVC   MSGBUF+12(0),KEYWORD(KEYPTR)                             02154000
@SM00784 MVC   MSGBUF(0),I355IV(@10)                                    02155000
@SM00786 MVC   MSGBUF(0),I355IM(@10)                                    02156000
@SM00789 MVC   MSGBUF(0),I354IX(@10)                                    02157000
@SM00791 MVC   MSGBUF(0),I357A(@10)                                     02158000
@SM00793 MVC   KEYVALUE+8(0),PARMVALU(KEYPTR)                           02159000
@SM00797 MVC   KEYVALUE+16(0),PARMVALU(KEYPTR)                          02160000
@SM00799 MVC   KEYVALUE+4(0),PARMVALU(KEYPTR)                           02161000
@SM00801 MVC   KEYVALUE+12(0),PARMVALU(KEYPTR)                          02162000
@SM00803 MVC   KEYVALUE+32(0),PARMVALU(KEYPTR)                          02163000
@DATD    DSECT                                                          02164000
         DS    0F                                                       02165000
@SA00001 DS    18F                                                      02166000
@PC00001 DS    3F                                                       02167000
@SA00007 DS    18F                                                      02168000
@SA00002 DS    18F                                                      02169000
@SA00011 DS    18F                                                      02170000
@SA00005 DS    18F                                                      02171000
@TF00001 DS    F                                                        02172000
IEEMB821 CSECT                                                          02173000
         DS    0F                                                       02174000
@DATD    DSECT                                                          02175000
         DS    0D                                                       02176000
WTORECB  DS    F                                                        02177000
DECVALUE DS    H                                                        02178000
KEYEND   DS    H                                                        02179000
         DS    0D                                                       02180000
@TS00001 DS    CL8                                                      02181000
SWITCHES DS    BL2                                                      02182000
         ORG   SWITCHES                                                 02183000
CONSOLE  DS    BL1                                                      02184000
ENDMEM   EQU   SWITCHES+0                                               02185000
IOERRSC  EQU   SWITCHES+0                                               02186000
KEYFOUND EQU   SWITCHES+0                                               02187000
KEYINVLD EQU   SWITCHES+0                                               02188000
NOTFNDSC EQU   SWITCHES+0                                               02189000
OPISWC   EQU   SWITCHES+0                                               02190000
PARSE    EQU   SWITCHES+0                                               02191000
PLIBERR  DS    BL1                                                      02192000
PROCS    EQU   SWITCHES+1                                               02193000
         ORG   SWITCHES+2                                               02194000
BUFFER   DS    CL121                                                    02195000
INBUF    DS    CL80                                                     02196000
         DS    CL1                                                      02197000
MSGBUF   DS    CL88                                                     02198000
PACKFLD  DS    CL4                                                      02199000
KEYVALUE DS    9CL4                                                     02200000
KEYCNTL  DS    BL1                                                      02201000
         ORG   KEYCNTL+0                                                02202000
KEYSPEC  DS    BL1                                                      02203000
KEYREQ   EQU   KEYCNTL+0                                                02204000
         ORG   KEYCNTL+9                                                02205000
IEEMB821 CSECT                                                          02206000
         DS    0F                                                       02207000
@SIZDATD DC    AL1(0)                                                   02208000
         DC    AL3(@ENDDATD-@DATD)                                      02209000
@CV00038 DC    V(IEE352A)                                               02210000
@CV00039 DC    V(IEE353A)                                               02211000
@CV00040 DC    V(IEE354I)                                               02212000
@CV00041 DC    V(IEE354IX)                                              02213000
@CV00042 DC    V(IEE355IE)                                              02214000
@CV00043 DC    V(IEE355IK)                                              02215000
@CV00044 DC    V(IEE355IV)                                              02216000
@CV00045 DC    V(IEE355IM)                                              02217000
@CV00046 DC    V(IEE356A)                                               02218000
@CV00047 DC    V(IEE357A)                                               02219000
@CV00048 DC    V(IEE359I)                                               02220000
@CV00049 DC    V(IEE365I)                                               02221000
         DS    0D                                                       02222000
MICROSEC DC    F'60000000'                                              02223000
SHIFT    DC    F'1048576'                                               02224000
@CC00093 DC    C'NO'                                                    02225000
@CC00695 DC    C'U '                                                    02226000
@CC00087 DC    C'ALL'                                                   02227000
@CC00098 DC    C'YES'                                                   02228000
@CC00090 DC    C'    '                                                  02229000
@CC00106 DC    C'NONE'                                                  02230000
@CC00112 DC    C'USER'                                                  02231000
@CC00096 DC    C'PARMLIB'                                               02232000
         DS    CL3                                                      02233000
ADDTBL   DC    AL4(SIDKEY)                                              02234000
         DC    AL4(JWTKEY)                                              02235000
         DC    AL4(BUFKEY)                                              02236000
         DC    AL4(MANKEY)                                              02237000
         DC    AL4(EXTKEY)                                              02238000
         DC    AL4(OPTKEY)                                              02239000
         DC    AL4(DSVKEY)                                              02240000
         DC    AL4(RECKEY)                                              02241000
         DC    AL4(OPIKEY)                                              02242000
KEYTBL   DC    CL4'SID='                                                02243000
         DC    CL4'JWT='                                                02244000
         DC    CL4'BUF='                                                02245000
         DC    CL4'MAN='                                                02246000
         DC    CL4'EXT='                                                02247000
         DC    CL4'OPT='                                                02248000
         DC    CL4'DSV='                                                02249000
         DC    CL4'REC='                                                02250000
         DC    CL4'OPI='                                                02251000
TRANSTBL DC    64CL1' '                                                 02252000
         DC    CL1' '                                                   02253000
         DC    9CL1' '                                                  02254000
         DC    X'4A'                                                    02255000
         DC    CL1'.'                                                   02256000
         DC    CL1'<'                                                   02257000
         DC    CL1'('                                                   02258000
         DC    CL1'+'                                                   02259000
         DC    CL1'|'                                                   02260000
         DC    CL1'&&'                                                  02261000
         DC    9CL1' '                                                  02262000
         DC    X'5A'                                                    02263000
         DC    CL1'$'                                                   02264000
         DC    CL1'*'                                                   02265000
         DC    CL1')'                                                   02266000
         DC    CL1';'                                                   02267000
         DC    CL1'^'                                                   02268000
         DC    CL1'-'                                                   02269000
         DC    CL1'/'                                                   02270000
         DC    9CL1' '                                                  02271000
         DC    CL1','                                                   02272000
         DC    CL1'%'                                                   02273000
         DC    CL1'_'                                                   02274000
         DC    CL1'>'                                                   02275000
         DC    CL1'?'                                                   02276000
         DC    10CL1' '                                                 02277000
         DC    CL1':'                                                   02278000
         DC    CL1'#'                                                   02279000
         DC    CL1'@'                                                   02280000
         DC    CL1''''                                                  02281000
         DC    CL1'='                                                   02282000
         DC    CL1'"'                                                   02283000
         DC    CL1' '                                                   02284000
         DC    CL1'A'                                                   02285000
         DC    CL1'B'                                                   02286000
         DC    CL1'C'                                                   02287000
         DC    CL1'D'                                                   02288000
         DC    CL1'E'                                                   02289000
         DC    CL1'F'                                                   02290000
         DC    CL1'G'                                                   02291000
         DC    CL1'H'                                                   02292000
         DC    CL1'I'                                                   02293000
         DC    7CL1' '                                                  02294000
         DC    CL1'J'                                                   02295000
         DC    CL1'K'                                                   02296000
         DC    CL1'L'                                                   02297000
         DC    CL1'M'                                                   02298000
         DC    CL1'N'                                                   02299000
         DC    CL1'O'                                                   02300000
         DC    CL1'P'                                                   02301000
         DC    CL1'Q'                                                   02302000
         DC    CL1'R'                                                   02303000
         DC    8CL1' '                                                  02304000
         DC    CL1'S'                                                   02305000
         DC    CL1'T'                                                   02306000
         DC    CL1'U'                                                   02307000
         DC    CL1'V'                                                   02308000
         DC    CL1'W'                                                   02309000
         DC    CL1'X'                                                   02310000
         DC    CL1'Y'                                                   02311000
         DC    CL1'Z'                                                   02312000
         DC    23CL1' '                                                 02313000
         DC    CL1'A'                                                   02314000
         DC    CL1'B'                                                   02315000
         DC    CL1'C'                                                   02316000
         DC    CL1'D'                                                   02317000
         DC    CL1'E'                                                   02318000
         DC    CL1'F'                                                   02319000
         DC    CL1'G'                                                   02320000
         DC    CL1'H'                                                   02321000
         DC    CL1'I'                                                   02322000
         DC    7CL1' '                                                  02323000
         DC    CL1'J'                                                   02324000
         DC    CL1'K'                                                   02325000
         DC    CL1'L'                                                   02326000
         DC    CL1'M'                                                   02327000
         DC    CL1'N'                                                   02328000
         DC    CL1'O'                                                   02329000
         DC    CL1'P'                                                   02330000
         DC    CL1'Q'                                                   02331000
         DC    CL1'R'                                                   02332000
         DC    8CL1' '                                                  02333000
         DC    CL1'S'                                                   02334000
         DC    CL1'T'                                                   02335000
         DC    CL1'U'                                                   02336000
         DC    CL1'V'                                                   02337000
         DC    CL1'W'                                                   02338000
         DC    CL1'X'                                                   02339000
         DC    CL1'Y'                                                   02340000
         DC    CL1'Z'                                                   02341000
         DC    6CL1' '                                                  02342000
         DC    CL1'0'                                                   02343000
         DC    CL1'1'                                                   02344000
         DC    CL1'2'                                                   02345000
         DC    CL1'3'                                                   02346000
         DC    CL1'4'                                                   02347000
         DC    CL1'5'                                                   02348000
         DC    CL1'6'                                                   02349000
         DC    CL1'7'                                                   02350000
         DC    CL1'8'                                                   02351000
         DC    CL1'9'                                                   02352000
         DC    6CL1' '                                                  02353000
@DATD    DSECT                                                          02354000
RMACS    DS    0F                      RESERVE SPACE IN DYNAMIC AREA    02355000
OPENLST  OPEN  (,),MF=L                OPEN LIST FOR PARMLIB            02356000
DCBLST   DCB   DDNAME=IEFPARM,DSORG=PO,MACRF=(R)  DCB FOR PARMLIB       02357000
READLST  READ  DECB,SF,,,,,,MF=L       READ FOR PARMLIB LIST            02358000
IEEMB821 CSECT                                                          02359000
DMACS    DS    0F                      BACK TO CSECT FOR STATIC COPY    02360000
         OPEN  (,),MF=L                                                 02361000
         DCB   DDNAME=IEFPARM,DSORG=PO,MACRF=(R),EODAD=EODAD,          *02362000
               SYNAD=SYNAD,RECFM=F,LRECL=80                             02363000
         READ  DDECB,SF,,,,,,MF=L                                       02364000
MACLEN   EQU   *-DMACS                 LENGTH OF MACROS                 02365000
@DATD    DSECT                                                          02366000
@ENDDATD EQU   *                                                        02367000
IEEMB821 CSECT                                                          02368000
@00      EQU   00                      EQUATES FOR REGISTERS 0-15       02369000
@01      EQU   01                                                       02370000
@02      EQU   02                                                       02371000
@03      EQU   03                                                       02372000
@04      EQU   04                                                       02373000
@05      EQU   05                                                       02374000
@06      EQU   06                                                       02375000
@07      EQU   07                                                       02376000
@08      EQU   08                                                       02377000
@09      EQU   09                                                       02378000
@10      EQU   10                                                       02379000
@11      EQU   11                                                       02380000
@12      EQU   12                                                       02381000
@13      EQU   13                                                       02382000
@14      EQU   14                                                       02383000
@15      EQU   15                                                       02384000
SMCAPTR  EQU   @05                                                      02385000
PARMLEN  EQU   @03                                                      02386000
KEYPTR   EQU   @04                                                      02387000
KEYSTART EQU   @03                                                      02388000
KEYSCAN  EQU   @04                                                      02389000
KEYRTNCD EQU   @06                                                      02390000
KEYLEN   EQU   @08                                                      02391000
TBLINDX  EQU   @07                                                      02392000
STRTCOL  EQU   @07                                                      02393000
POSITIN  EQU   @07                                                      02394000
NUMCOL   EQU   @04                                                      02395000
PRANGE   EQU   @05                                                      02396000
INDX     EQU   @03                                                      02397000
FNDRTNCD EQU   @03                                                      02398000
BUFINDX  EQU   @06                                                      02399000
R0       EQU   @00                                                      02400000
R1       EQU   @01                                                      02401000
R2       EQU   @02                                                      02402000
R15      EQU   @15                                                      02403000
I352A    EQU   0                                                        02404000
L352A    EQU   I352A+8                                                  02405000
I353A    EQU   0                                                        02406000
L353A    EQU   I353A+8                                                  02407000
I354I    EQU   0                                                        02408000
I354IX   EQU   0                                                        02409000
L354IX   EQU   I354IX                                                   02410000
I355IE   EQU   0                                                        02411000
I355IK   EQU   0                                                        02412000
L355IK   EQU   I355IK                                                   02413000
I355IV   EQU   0                                                        02414000
L355IV   EQU   I355IV                                                   02415000
I355IM   EQU   0                                                        02416000
L355IM   EQU   I355IM                                                   02417000
I356A    EQU   0                                                        02418000
L356A    EQU   I356A+8                                                  02419000
I357A    EQU   0                                                        02420000
L357A    EQU   I357A+8                                                  02421000
I359I    EQU   0                                                        02422000
I365I    EQU   0                                                        02423000
L365I    EQU   I365I                                                    02424000
KEYROUTN EQU   0                                                        02425000
KEYWORD  EQU   0                                                        02426000
KEYID    EQU   KEYWORD                                                  02427000
PARMVALU EQU   KEYWORD+4                                                02428000
SMCABASE EQU   0                                                        02429000
SMCAOPT  EQU   SMCABASE                                                 02430000
SMCAOPT1 EQU   SMCAOPT                                                  02431000
SMCAOPT2 EQU   SMCAOPT                                                  02432000
SMCAEXT  EQU   SMCAOPT                                                  02433000
SMCADSA  EQU   SMCAOPT                                                  02434000
SMCAVOL  EQU   SMCAOPT                                                  02435000
SMCATDS  EQU   SMCAOPT                                                  02436000
SMCAMISC EQU   SMCABASE+1                                               02437000
SMCAUSER EQU   SMCAMISC                                                 02438000
SMCAMAN  EQU   SMCAMISC                                                 02439000
SMCAOPI  EQU   SMCAMISC                                                 02440000
SMCAJWT  EQU   SMCABASE+8                                               02441000
SMCABUF  EQU   SMCABASE+12                                              02442000
SMCASID  EQU   SMCABASE+16                                              02443000
SMCAPSTA EQU   SMCABASE+30                                              02444000
SMCAPLBL EQU   SMCABASE+34                                              02445000
SMCASTA  EQU   SMCABASE+46                                              02446000
SMCAALBL EQU   SMCABASE+50                                              02447000
SMCAENTY EQU   SMCABASE+80                                              02448000
SMCAENDI EQU   SMCAENTY                                                 02449000
SMCAFOPT EQU   SMCABASE+82                                              02450000
SMCAFGN  EQU   SMCAFOPT                                                 02451000
SMCASWA  EQU   SMCABASE+104                                             02452000
SMCAASCB EQU   SMCABASE+120                                             02453000
IHADCB   EQU   0                                                        02454000
IHADCS00 EQU   0                                                        02455000
DCBFDAD  EQU   IHADCS00+5                                               02456000
IHADCS01 EQU   0                                                        02457000
DCBDVTBL EQU   IHADCS01                                                 02458000
IHADCS11 EQU   0                                                        02459000
DCBRELB  EQU   IHADCS11                                                 02460000
DCBREL   EQU   DCBRELB+1                                                02461000
DCBBUFCB EQU   IHADCS11+4                                               02462000
DCBDSORG EQU   IHADCS11+10                                              02463000
DCBDSRG1 EQU   DCBDSORG                                                 02464000
DCBDSRG2 EQU   DCBDSORG+1                                               02465000
DCBIOBAD EQU   IHADCS11+12                                              02466000
DCBODEB  EQU   DCBIOBAD                                                 02467000
DCBLNP   EQU   DCBODEB                                                  02468000
DCBQSLM  EQU   DCBLNP                                                   02469000
DCBIOBAA EQU   DCBODEB+1                                                02470000
IHADCS50 EQU   0                                                        02471000
DCBSVCXL EQU   IHADCS50                                                 02472000
DCBEODAD EQU   IHADCS50+4                                               02473000
DCBBFALN EQU   DCBEODAD                                                 02474000
DCBHIARC EQU   DCBBFALN                                                 02475000
DCBBFTEK EQU   DCBHIARC                                                 02476000
DCBBFT   EQU   DCBBFTEK                                                 02477000
DCBEXLST EQU   IHADCS50+8                                               02478000
DCBRECFM EQU   DCBEXLST                                                 02479000
DCBRECLA EQU   DCBRECFM                                                 02480000
IHADCS24 EQU   0                                                        02481000
DCBOFLGS EQU   IHADCS24+8                                               02482000
DCBOFLWR EQU   DCBOFLGS                                                 02483000
DCBOFOPN EQU   DCBOFLGS                                                 02484000
DCBIFLG  EQU   IHADCS24+9                                               02485000
DCBMACR  EQU   IHADCS24+10                                              02486000
DCBMACR1 EQU   DCBMACR                                                  02487000
DCBMRFE  EQU   DCBMACR1                                                 02488000
DCBMRGET EQU   DCBMRFE                                                  02489000
DCBMRAPG EQU   DCBMACR1                                                 02490000
DCBMRRD  EQU   DCBMRAPG                                                 02491000
DCBMRCI  EQU   DCBMACR1                                                 02492000
DCBMRMVG EQU   DCBMRCI                                                  02493000
DCBMRLCG EQU   DCBMACR1                                                 02494000
DCBMRABC EQU   DCBMACR1                                                 02495000
DCBMRPT1 EQU   DCBMRABC                                                 02496000
DCBMRSBG EQU   DCBMRPT1                                                 02497000
DCBMRCRL EQU   DCBMACR1                                                 02498000
DCBMRCHK EQU   DCBMRCRL                                                 02499000
DCBMRRDX EQU   DCBMRCHK                                                 02500000
DCBMRDMG EQU   DCBMACR1                                                 02501000
DCBMACR2 EQU   DCBMACR+1                                                02502000
DCBMRPUT EQU   DCBMACR2                                                 02503000
DCBMRWRT EQU   DCBMACR2                                                 02504000
DCBMRMVP EQU   DCBMACR2                                                 02505000
DCBMR5WD EQU   DCBMACR2                                                 02506000
DCBMRLDM EQU   DCBMR5WD                                                 02507000
DCBMRLCP EQU   DCBMRLDM                                                 02508000
DCBMR4WD EQU   DCBMACR2                                                 02509000
DCBMRPT2 EQU   DCBMR4WD                                                 02510000
DCBMRTMD EQU   DCBMRPT2                                                 02511000
DCBMR3WD EQU   DCBMACR2                                                 02512000
DCBMRCTL EQU   DCBMR3WD                                                 02513000
DCBMRSTK EQU   DCBMRCTL                                                 02514000
DCBMR1WD EQU   DCBMACR2                                                 02515000
DCBMRSWA EQU   DCBMR1WD                                                 02516000
DCBMRDMD EQU   DCBMRSWA                                                 02517000
IHADCS25 EQU   0                                                        02518000
DCBMACRF EQU   IHADCS25+2                                               02519000
DCBMACF1 EQU   DCBMACRF                                                 02520000
DCBMFFE  EQU   DCBMACF1                                                 02521000
DCBMFGET EQU   DCBMFFE                                                  02522000
DCBMFAPG EQU   DCBMACF1                                                 02523000
DCBMFRD  EQU   DCBMFAPG                                                 02524000
DCBMFCI  EQU   DCBMACF1                                                 02525000
DCBMFMVG EQU   DCBMFCI                                                  02526000
DCBMFLCG EQU   DCBMACF1                                                 02527000
DCBMFABC EQU   DCBMACF1                                                 02528000
DCBMFPT1 EQU   DCBMFABC                                                 02529000
DCBMFSBG EQU   DCBMFPT1                                                 02530000
DCBMFCRL EQU   DCBMACF1                                                 02531000
DCBMFCHK EQU   DCBMFCRL                                                 02532000
DCBMFDMG EQU   DCBMACF1                                                 02533000
DCBMACF2 EQU   DCBMACRF+1                                               02534000
DCBMFPUT EQU   DCBMACF2                                                 02535000
DCBMFWRT EQU   DCBMACF2                                                 02536000
DCBMFMVP EQU   DCBMACF2                                                 02537000
DCBMF5WD EQU   DCBMACF2                                                 02538000
DCBMFLDM EQU   DCBMF5WD                                                 02539000
DCBMFLCP EQU   DCBMFLDM                                                 02540000
DCBMF4WD EQU   DCBMACF2                                                 02541000
DCBMFPT2 EQU   DCBMF4WD                                                 02542000
DCBMFTMD EQU   DCBMFPT2                                                 02543000
DCBMF3WD EQU   DCBMACF2                                                 02544000
DCBMFCTL EQU   DCBMF3WD                                                 02545000
DCBMFSTK EQU   DCBMFCTL                                                 02546000
DCBMF1WD EQU   DCBMACF2                                                 02547000
DCBMFSWA EQU   DCBMF1WD                                                 02548000
DCBMFDMD EQU   DCBMFSWA                                                 02549000
DCBDEBAD EQU   IHADCS25+4                                               02550000
DCBIFLGS EQU   DCBDEBAD                                                 02551000
IHADCS26 EQU   0                                                        02552000
DCBWRITE EQU   IHADCS26                                                 02553000
IHADCS36 EQU   0                                                        02554000
DCBGERR  EQU   IHADCS36                                                 02555000
DCBPERR  EQU   DCBGERR                                                  02556000
DCBCHECK EQU   DCBPERR                                                  02557000
DCBOPTCD EQU   DCBCHECK                                                 02558000
DCBOPTH  EQU   DCBOPTCD                                                 02559000
DCBOPTO  EQU   DCBOPTH                                                  02560000
DCBOPTZ  EQU   DCBOPTCD                                                 02561000
DCBGERRA EQU   DCBCHECK+1                                               02562000
DCBPERRA EQU   DCBGERRA                                                 02563000
DCBSYNAD EQU   IHADCS36+4                                               02564000
DCBCIND1 EQU   IHADCS36+8                                               02565000
DCBCIND2 EQU   IHADCS36+9                                               02566000
DCBCICB  EQU   IHADCS36+20                                              02567000
IHADCS52 EQU   0                                                        02568000
DCBDIRCT EQU   IHADCS52                                                 02569000
DCBQSWS  EQU   DCBDIRCT                                                 02570000
DCBUSASI EQU   DCBQSWS                                                  02571000
DCBQADFS EQU   DCBUSASI                                                 02572000
DCBBUFOF EQU   DCBDIRCT+1                                               02573000
IHADCS37 EQU   0                                                        02574000
DCBFLAG1 EQU   IHADCS37                                                 02575000
IHADCS38 EQU   0                                                        02576000
DCBEOBR  EQU   IHADCS38                                                 02577000
DCBPOINT EQU   IHADCS38+12                                              02578000
DCBCNTRL EQU   DCBPOINT                                                 02579000
PARMMEM  EQU   0                                                        02580000
JWTMIN   EQU   0                                                        02581000
SMCADDR  EQU   0                                                        02582000
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS    02583000
DCBNOTE  EQU   DCBCNTRL                                                 02584000
DCBLRECL EQU   IHADCS38+10                                              02585000
@NM00027 EQU   IHADCS38+8                                               02586000
DCBEOBW  EQU   IHADCS38+4                                               02587000
DCBEOBRA EQU   DCBEOBR+1                                                02588000
DCBNCP   EQU   DCBEOBR                                                  02589000
@NM00026 EQU   DCBFLAG1                                                 02590000
DCBSTFLS EQU   DCBFLAG1                                                 02591000
DCBSTQCK EQU   DCBFLAG1                                                 02592000
DCBDIRCQ EQU   DCBBUFOF                                                 02593000
DCBQSTRU EQU   DCBUSASI                                                 02594000
@NM00025 EQU   DCBUSASI                                                 02595000
DCBQADF3 EQU   DCBQADFS                                                 02596000
DCBQADF2 EQU   DCBQADFS                                                 02597000
DCBQADF1 EQU   DCBQADFS                                                 02598000
DCBBLBP  EQU   DCBUSASI                                                 02599000
@NM00024 EQU   DCBUSASI                                                 02600000
DCBCICBA EQU   DCBCICB+1                                                02601000
@NM00023 EQU   DCBCICB                                                  02602000
DCBIOBA  EQU   IHADCS36+16                                              02603000
DCBOFFSW EQU   IHADCS36+15                                              02604000
DCBOFFSR EQU   IHADCS36+14                                              02605000
DCBWCPL  EQU   IHADCS36+13                                              02606000
DCBWCPO  EQU   IHADCS36+12                                              02607000
DCBBLKSI EQU   IHADCS36+10                                              02608000
DCBCNQSM EQU   DCBCIND2                                                 02609000
DCBCNFEO EQU   DCBCIND2                                                 02610000
DCBCNCHS EQU   DCBCIND2                                                 02611000
DCBCNBFP EQU   DCBCIND2                                                 02612000
DCBCNIOE EQU   DCBCIND2                                                 02613000
DCBCNCLO EQU   DCBCIND2                                                 02614000
DCBCNWRO EQU   DCBCIND2                                                 02615000
DCBCNSTO EQU   DCBCIND2                                                 02616000
DCBCNEXB EQU   DCBCIND1                                                 02617000
@NM00022 EQU   DCBCIND1                                                 02618000
DCBCNBRM EQU   DCBCIND1                                                 02619000
@NM00021 EQU   DCBCIND1                                                 02620000
DCBCNEVA EQU   DCBCIND1                                                 02621000
DCBCNEVB EQU   DCBCIND1                                                 02622000
DCBCNSRD EQU   DCBCIND1                                                 02623000
DCBCNTOV EQU   DCBCIND1                                                 02624000
DCBSYNA  EQU   DCBSYNAD+1                                               02625000
DCBIOBL  EQU   DCBSYNAD                                                 02626000
DCBCHCKA EQU   DCBPERRA                                                 02627000
@NM00020 EQU   DCBOPTCD                                                 02628000
DCBOPTT  EQU   DCBOPTCD                                                 02629000
DCBSRCHD EQU   DCBOPTZ                                                  02630000
DCBOPTQ  EQU   DCBOPTCD                                                 02631000
DCBBCKPT EQU   DCBOPTO                                                  02632000
DCBOPTC  EQU   DCBOPTCD                                                 02633000
DCBOPTU  EQU   DCBOPTCD                                                 02634000
DCBOPTW  EQU   DCBOPTCD                                                 02635000
DCBREAD  EQU   DCBWRITE                                                 02636000
DCBDEBA  EQU   DCBDEBAD+1                                               02637000
@NM00019 EQU   DCBIFLGS                                                 02638000
DCBIFIOE EQU   DCBIFLGS                                                 02639000
DCBIFPCT EQU   DCBIFLGS                                                 02640000
DCBIFEC  EQU   DCBIFLGS                                                 02641000
DCBMFSTI EQU   DCBMFDMD                                                 02642000
DCBMFAWR EQU   DCBMFSTK                                                 02643000
DCBMFUIP EQU   DCBMFTMD                                                 02644000
DCBMFIDW EQU   DCBMFLCP                                                 02645000
DCBMFWRK EQU   DCBMFMVP                                                 02646000
DCBMFRDQ EQU   DCBMFWRT                                                 02647000
DCBMFGTQ EQU   DCBMFPUT                                                 02648000
DCBMFSTL EQU   DCBMACF2                                                 02649000
DCBMFCK  EQU   DCBMFDMG                                                 02650000
DCBMFRDX EQU   DCBMFCHK                                                 02651000
DCBMFDBF EQU   DCBMFSBG                                                 02652000
DCBMFRDI EQU   DCBMFLCG                                                 02653000
DCBMFRDK EQU   DCBMFMVG                                                 02654000
DCBMFWRQ EQU   DCBMFRD                                                  02655000
DCBMFPTQ EQU   DCBMFGET                                                 02656000
DCBMFECP EQU   DCBMACF1                                                 02657000
DCBTIOT  EQU   IHADCS25                                                 02658000
DCBMRSTI EQU   DCBMRDMD                                                 02659000
DCBMRAWR EQU   DCBMRSTK                                                 02660000
DCBMRUIP EQU   DCBMRTMD                                                 02661000
DCBMRIDW EQU   DCBMRLCP                                                 02662000
DCBMRWRK EQU   DCBMRMVP                                                 02663000
DCBMRRDQ EQU   DCBMRWRT                                                 02664000
DCBMRGTQ EQU   DCBMRPUT                                                 02665000
DCBMRSTL EQU   DCBMACR2                                                 02666000
DCBMRCK  EQU   DCBMRDMG                                                 02667000
DCBPGFXA EQU   DCBMRRDX                                                 02668000
DCBMRDBF EQU   DCBMRSBG                                                 02669000
DCBMRRDI EQU   DCBMRLCG                                                 02670000
DCBMRRDK EQU   DCBMRMVG                                                 02671000
DCBMRWRQ EQU   DCBMRRD                                                  02672000
DCBMRPTQ EQU   DCBMRGET                                                 02673000
DCBMRECP EQU   DCBMACR1                                                 02674000
@NM00018 EQU   DCBIFLG                                                  02675000
DCBIBIOE EQU   DCBIFLG                                                  02676000
DCBIBPCT EQU   DCBIFLG                                                  02677000
DCBIBEC  EQU   DCBIFLG                                                  02678000
DCBOFIOF EQU   DCBOFLGS                                                 02679000
DCBOFUEX EQU   DCBOFLGS                                                 02680000
DCBOFTM  EQU   DCBOFLGS                                                 02681000
DCBOFPPC EQU   DCBOFLGS                                                 02682000
DCBOFEOV EQU   DCBOFLGS                                                 02683000
DCBOFLRB EQU   DCBOFLGS                                                 02684000
DCBOFIOD EQU   DCBOFLWR                                                 02685000
DCBDDNAM EQU   IHADCS24                                                 02686000
DCBEXLSA EQU   DCBEXLST+1                                               02687000
DCBRECKL EQU   DCBRECFM                                                 02688000
DCBRECCC EQU   DCBRECFM                                                 02689000
DCBRECSB EQU   DCBRECFM                                                 02690000
DCBRECBR EQU   DCBRECFM                                                 02691000
DCBRECTO EQU   DCBRECLA                                                 02692000
DCBRECL  EQU   DCBRECLA                                                 02693000
DCBEODA  EQU   DCBEODAD+1                                               02694000
DCBBFA   EQU   DCBBFTEK                                                 02695000
DCBH0    EQU   DCBBFTEK                                                 02696000
DCBBFTKD EQU   DCBBFTEK                                                 02697000
DCBBFTE  EQU   DCBBFT                                                   02698000
DCBBFTKR EQU   DCBBFT                                                   02699000
DCBBFTS  EQU   DCBBFT                                                   02700000
DCBH1    EQU   DCBBFTEK                                                 02701000
DCBSVCXA EQU   DCBSVCXL+1                                               02702000
@NM00017 EQU   DCBSVCXL                                                 02703000
DCBODEBA EQU   DCBIOBAA                                                 02704000
@NM00016 EQU   DCBQSLM                                                  02705000
DCBUPDBT EQU   DCBQSLM                                                  02706000
DCBUPDCM EQU   DCBQSLM                                                  02707000
DCB1DVDS EQU   DCBQSLM                                                  02708000
@NM00015 EQU   DCBDSRG2                                                 02709000
DCBACBM  EQU   DCBDSRG2                                                 02710000
@NM00014 EQU   DCBDSRG2                                                 02711000
DCBDSGTQ EQU   DCBDSRG2                                                 02712000
DCBDSGTX EQU   DCBDSRG2                                                 02713000
DCBDSGGS EQU   DCBDSRG2                                                 02714000
DCBDSGU  EQU   DCBDSRG1                                                 02715000
DCBDSGPO EQU   DCBDSRG1                                                 02716000
DCBDSGMQ EQU   DCBDSRG1                                                 02717000
DCBDSGCQ EQU   DCBDSRG1                                                 02718000
DCBDSGCX EQU   DCBDSRG1                                                 02719000
DCBDSGDA EQU   DCBDSRG1                                                 02720000
DCBDSGPS EQU   DCBDSRG1                                                 02721000
DCBDSGIS EQU   DCBDSRG1                                                 02722000
DCBBUFL  EQU   IHADCS11+8                                               02723000
DCBBUFCA EQU   DCBBUFCB+1                                               02724000
DCBBUFNO EQU   DCBBUFCB                                                 02725000
DCBDEVT  EQU   DCBREL                                                   02726000
DCBKEYLE EQU   DCBRELB                                                  02727000
DCBTRBAL EQU   IHADCS01+6                                               02728000
@NM00013 EQU   IHADCS01+5                                               02729000
@NM00012 EQU   IHADCS01+4                                               02730000
DCBDVTBA EQU   DCBDVTBL+1                                               02731000
@NM00011 EQU   DCBDVTBL                                                 02732000
DCBKEYCN EQU   IHADCS00+4                                               02733000
DCBRELAD EQU   IHADCS00                                                 02734000
@NM00010 EQU   IHADCB                                                   02735000
SMCASTCB EQU   SMCABASE+176                                             02736000
SMCAWTCB EQU   SMCABASE+172                                             02737000
SMCAU83  EQU   SMCABASE+168                                             02738000
SMCAPGM  EQU   SMCABASE+164                                             02739000
SMCARGNM EQU   SMCABASE+160                                             02740000
SMCASPOT EQU   SMCABASE+156                                             02741000
SMCASPIN EQU   SMCABASE+152                                             02742000
SMCARGNS EQU   SMCABASE+148                                             02743000
SMCAPGRL EQU   SMCABASE+144                                             02744000
SMCAPGOT EQU   SMCABASE+140                                             02745000
SMCAPGIN EQU   SMCABASE+136                                             02746000
SMCATEXP EQU   SMCABASE+132                                             02747000
SMCARS22 EQU   SMCABASE+128                                             02748000
SMCARS21 EQU   SMCABASE+124                                             02749000
SMCATJID EQU   SMCAASCB+2                                               02750000
SMCAPOST EQU   SMCAASCB                                                 02751000
SMCADSCT EQU   SMCABASE+116                                             02752000
SMCADSTM EQU   SMCABASE+108                                             02753000
SMCASWD  EQU   SMCABASE+107                                             02754000
SMCASWC  EQU   SMCABASE+106                                             02755000
SMCASWB  EQU   SMCABASE+105                                             02756000
SMCADSSW EQU   SMCASWA                                                  02757000
SMCADSSP EQU   SMCASWA                                                  02758000
SMCAZEOD EQU   SMCASWA                                                  02759000
SMCANAVL EQU   SMCASWA                                                  02760000
SMCANADA EQU   SMCASWA                                                  02761000
SMCAOPFL EQU   SMCASWA                                                  02762000
SMCADSTR EQU   SMCASWA                                                  02763000
SMCASWAR EQU   SMCASWA                                                  02764000
SMCAXNAM EQU   SMCABASE+96                                              02765000
@NM00009 EQU   SMCABASE+92                                              02766000
SMCAXCTL EQU   SMCABASE+88                                              02767000
SMCAWRTP EQU   SMCABASE+84                                              02768000
SMCAENAL EQU   SMCABASE+83                                              02769000
SMCAFTDS EQU   SMCAFOPT                                                 02770000
SMCAFESV EQU   SMCAFOPT                                                 02771000
SMCAFVOL EQU   SMCAFOPT                                                 02772000
SMCAFDSA EQU   SMCAFOPT                                                 02773000
SMCAFEXT EQU   SMCAFOPT                                                 02774000
SMCAFOP2 EQU   SMCAFOPT                                                 02775000
SMCAFOP1 EQU   SMCAFOPT                                                 02776000
SMCAENOP EQU   SMCAENTY+1                                               02777000
SMCADSNF EQU   SMCAENDI                                                 02778000
SMCARS20 EQU   SMCAENDI                                                 02779000
SMCARS19 EQU   SMCAENDI                                                 02780000
SMCARS18 EQU   SMCAENDI                                                 02781000
SMCARS17 EQU   SMCAENDI                                                 02782000
SMCARS16 EQU   SMCAENDI                                                 02783000
SMCARS15 EQU   SMCAENDI                                                 02784000
SMCARS14 EQU   SMCAENDI                                                 02785000
SMCAWAIT EQU   SMCABASE+72                                              02786000
SMCASGFT EQU   SMCABASE+68                                              02787000
SMCASGWR EQU   SMCABASE+64                                              02788000
SMCABECB EQU   SMCABASE+60                                              02789000
SMCAWECB EQU   SMCABASE+56                                              02790000
SMCAADCB EQU   SMCABASE+52                                              02791000
SMCAYORX EQU   SMCABASE+51                                              02792000
SMCAANL  EQU   SMCAALBL                                                 02793000
SMCAASL  EQU   SMCAALBL                                                 02794000
SMCAANSL EQU   SMCAALBL                                                 02795000
SMCARS13 EQU   SMCAALBL                                                 02796000
SMCARS12 EQU   SMCAALBL                                                 02797000
SMCARS11 EQU   SMCAALBL                                                 02798000
SMCARS10 EQU   SMCAALBL                                                 02799000
SMCARS09 EQU   SMCAALBL                                                 02800000
SMCAADAR EQU   SMCABASE+47                                              02801000
SMCAAVOL EQU   SMCASTA                                                  02802000
SMCAAUNT EQU   SMCASTA                                                  02803000
SMCARS08 EQU   SMCASTA                                                  02804000
SMCAAMOD EQU   SMCASTA                                                  02805000
SMCAAMTY EQU   SMCASTA                                                  02806000
SMCAADA  EQU   SMCASTA                                                  02807000
SMCAATAP EQU   SMCASTA                                                  02808000
SMCAANAV EQU   SMCASTA                                                  02809000
SMCAADEV EQU   SMCABASE+40                                              02810000
SMCAPDCB EQU   SMCABASE+36                                              02811000
SMCAXORY EQU   SMCABASE+35                                              02812000
SMCAPNL  EQU   SMCAPLBL                                                 02813000
SMCAPSL  EQU   SMCAPLBL                                                 02814000
SMCAPNSL EQU   SMCAPLBL                                                 02815000
SMCARS07 EQU   SMCAPLBL                                                 02816000
SMCARS06 EQU   SMCAPLBL                                                 02817000
SMCARS05 EQU   SMCAPLBL                                                 02818000
SMCARS04 EQU   SMCAPLBL                                                 02819000
SMCARS03 EQU   SMCAPLBL                                                 02820000
SMCAPDAR EQU   SMCABASE+31                                              02821000
SMCAPVOL EQU   SMCAPSTA                                                 02822000
SMCAPUNT EQU   SMCAPSTA                                                 02823000
SMCARS02 EQU   SMCAPSTA                                                 02824000
SMCAMOD  EQU   SMCAPSTA                                                 02825000
SMCAPMTY EQU   SMCAPSTA                                                 02826000
SMCAPDA  EQU   SMCAPSTA                                                 02827000
SMCAPTAP EQU   SMCAPSTA                                                 02828000
SMCAPNAV EQU   SMCAPSTA                                                 02829000
SMCAPDEV EQU   SMCABASE+24                                              02830000
SMCABUFP EQU   SMCABASE+20                                              02831000
SMCABSIZ EQU   SMCABUF                                                  02832000
SMCATIOT EQU   SMCABASE+4                                               02833000
SMCATOFF EQU   SMCABASE+2                                               02834000
SMCADUMP EQU   SMCAMISC                                                 02835000
SMCABSW  EQU   SMCAMISC                                                 02836000
SMCADBSY EQU   SMCAMISC                                                 02837000
SMCAPSDP EQU   SMCAMISC                                                 02838000
SMCAFIRT EQU   SMCAMISC                                                 02839000
SMCAFGND EQU   SMCAOPT                                                  02840000
SMCARS01 EQU   SMCAOPT                                                  02841000
L359I    EQU   I359I                                                    02842000
@NM00008 EQU   I357A+4                                                  02843000
@NM00007 EQU   I357A                                                    02844000
@NM00006 EQU   I356A+4                                                  02845000
@NM00005 EQU   I356A                                                    02846000
L355IE   EQU   I355IE                                                   02847000
L354I    EQU   I354I                                                    02848000
@NM00004 EQU   I353A+4                                                  02849000
@NM00003 EQU   I353A                                                    02850000
@NM00002 EQU   I352A+4                                                  02851000
@NM00001 EQU   I352A                                                    02852000
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS      02853000
@RC00217 EQU   @EL00002                                                 02854000
@RC00239 EQU   @EL00003                                                 02855000
@RF00273 EQU   @EL00004                                                 02856000
@RF00302 EQU   @EL00006                                                 02857000
@RC00311 EQU   @EL00007                                                 02858000
@RF00356 EQU   @EL00008                                                 02859000
@RC00365 EQU   @EL00009                                                 02860000
@RF00402 EQU   @EL00010                                                 02861000
@RC00419 EQU   @EL00012                                                 02862000
@RC00437 EQU   @EL00013                                                 02863000
@ENDDATA EQU   *                                                        02864000
         END   IEEMB821                                                 02865000
