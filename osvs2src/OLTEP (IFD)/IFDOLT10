         TITLE 'IFDOLT10 CONVERT MODULE'                                00010000
         TITLE 'IFDOLT10 CONVERT MODULE'                                00020000
         LCLA  &T,&SPN                                            0002  00030000
.@001    ANOP                                                     0002  00040000
IFDOLT10 CSECT ,                                                  0002  00050000
         ST    @E,12(0,@D)                                        0002  00060000
         STM   @0,@C,20(@D)                                       0002  00070000
         BALR  @4,0                                               0002  00080000
@PSTART  DS    0H                                                 0002  00090000
         USING @PSTART+00000,@4                                   0002  00100000
*         R5=FROMADDR;              /* GET FROM ADDRESS INTO REG. 5.*/  00110000
         L     @5,0(0,@1)                                         0024  00120000
*         R6=TOADDR;                /* GET TO ADDRESS INTO REG. 6.  */  00130000
         L     @6,4(0,@1)                                         0025  00140000
*         R7=FLGCOUNT;              /* GET COUNT IN REG. 7.         */  00150000
         MVC   @TEMP2+2(2),14(@1)                                 0026  00160000
         L     @7,@TEMP2                                          0026  00170000
*         R7=R7&LOW15;                                                  00180000
         N     @7,LOW15                                           0027  00190000
*         IF R7=0 THEN              /* IF COUNT IS ZERO, RETURN TO  */  00200000
         LTR   @7,@7                                              0028  00210000
*           GO TO CNVERT06;         /* CALLER. OTHERWISE CONVERT.   */  00220000
         BC    08,CNVERT06                                        0029  00230000
*         AXFLGA='00'X;             /* CLEAR FLAG.                  */  00240000
         MVI   AXFLGA,X'00'                                       0030  00250000
*         ENDADDR=R5+R7;            /* FIND END OF CONVERSION DATA. */  00260000
         LR    @2,@7                                              0031  00270000
         AR    @2,@5                                              0031  00280000
*         R3=ADDR(AXATBL);          /* SET POINTER TO CHAR TABLE.   */  00290000
         LA    @3,AXATBL                                          0032  00300000
*         IF HEXBIT='1'B THEN       /* IS CONVERSION HEX TO EBCDIC. */  00310000
         TM    14(@1),B'10000000'                                 0033  00320000
*           GO TO CNVERT05;         /* YES, GO TO HEX TO EBCDIC     */  00330000
         BC    01,CNVERT05                                        0034  00340000
*                                   /* ROUTINE.                     */  00350000
* CNVERT01: /* EBCDIC TO HEX CONVERSION */                              00360000
*         DO I=16 TO 1 BY -1;       /* SEE IF INPUT CHAR HAS A VALID*/  00370000
CNVERT01 LA    @9,16                                              0035  00380000
*         IF INBUF=AXATBL(I) THEN   /* HEX NUMBER EQUIVALENT.       */  00390000
@DO9FF   LR    @8,@9                                              0036  00400000
         LA    @E,AXATBL-1(@8)                                    0036  00410000
         CLC   0(1,@5),0(@E)                                      0036  00420000
*           GO TO CNVERT02;         /* YES, CONVERT IT.             */  00430000
         BC    08,CNVERT02                                        0037  00440000
*         END;                                                          00450000
*         RC=INBUF;                 /* PUT BAD CHARACTER IN REG. 15 */  00460000
         BCT   @9,@DO9FF                                          0038  00470000
         SR    @F,@F                                              0039  00480000
         IC    @F,0(0,@5)                                         0039  00490000
*         GO TO CNVERT07;           /* AND RETURN TO CALLER.        */  00500000
         BC    15,CNVERT07                                        0040  00510000
* CNVERT02:                                                             00520000
*         R11=I-1;                  /* SAVE EQUIVALENT HEX CHAR.    */  00530000
CNVERT02 LH    @B,@D1                                             0041  00540000
         AR    @B,@9                                              0041  00550000
*         IF AXFLGA^='00'X THEN     /* IF 2ND BYTE, GO TO ROUTINE   */  00560000
         CLI   AXFLGA,X'00'                                       0042  00570000
*           GO TO CNVERT03;         /* THAT WILL OUTPUT HEX EQUIV.  */  00580000
         BC    07,CNVERT03                                        0043  00590000
*         R12=R11*16;               /* PUT 1ST HEX CHAR IN R12  TFF001* 00600000
         LR    @F,@B                                              0044  00610000
         SLA   @F,4                                               0044  00620000
         LR    @C,@F                                              0044  00630000
*         AXFLGA='F0'X;             /* SET FLAG TO NON-ZERO TO      */  00640000
         MVI   AXFLGA,X'F0'                                       0045  00650000
*                                   /* INDICATE ONLY ONE CHARACTER  */  00660000
*                                   /* HAS BEEN CONVERTED.          */  00670000
*         GO TO CNVERT04;           /* GO TO ROUTINE THAT DETERMINES*/  00680000
         BC    15,CNVERT04                                        0046  00690000
*                                   /* IF MORE CONVERSION MUST BE   */  00700000
*                                   /* DONE                         */  00710000
* CNVERT03: /* OUTPUT ROUTINE FOR EBCDIC TO HEX CONVERSION  */          00720000
*         R12=R12|R11;              /* COMBINE TWO HEX CHARACTERS.  */  00730000
CNVERT03 OR    @C,@B                                              0047  00740000
*         GEN(STC   R12,0(R6));     /* PUT CHAR IN OUTPUT AREA.     */  00750000
         STC   R12,0(R6)                                                00760000
         DS    0H                                                       00770000
*         R6=R6+1;                  /* STEP TO ADDRESS BY 1.        */  00780000
         LA    @6,1(0,@6)                                         0049  00790000
*         AXFLGA='00'X;             /* SET FLAG TO ZERO.            */  00800000
         MVI   AXFLGA,X'00'                                       0050  00810000
* CNVERT04: /* IS MORE CONVERSION NECESSARY */                          00820000
*         R5=R5+1;                  /* STEP FROM ADDRESS BY 1.      */  00830000
CNVERT04 LA    @5,1(0,@5)                                         0051  00840000
*         IF R5<ENDADDR THEN        /* IS CONVERSION DONE. NO, GO   */  00850000
         CR    @5,@2                                              0052  00860000
*           GO TO CNVERT01;         /* AND DO IT.                   */  00870000
         BC    04,CNVERT01                                        0053  00880000
*         IF LSTCNT='1'B THEN       /* YES, WAS CONVERSION FROM EH  */  00890000
         TM    15(@1),B'00000001'                                 0054  00900000
         BC    12,@9FB                                            0054  00910000
*           GEN(STC   R12,0(R6));   /* FOR AN ODD NUMBER OF CHAR.   */  00920000
         STC   R12,0(R6)                                                00930000
         DS    0H                                                       00940000
*         GO TO CNVERT06;           /* NO, GO TO FINISH ROUTINE.    */  00950000
         BC    15,CNVERT06                                        0056  00960000
*                                   /* YES, PUT CONVERTED CHAR IN   */  00970000
*                                   /* OUTPUT  AREA.                */  00980000
* CNVERT05: /* HEX TO EBCDIC ROUTINE */                                 00990000
*         R9=INBUF;                 /* GET INPUT CHAR. INTO REG. 9. */  01000000
CNVERT05 SR    @9,@9                                              0057  01010000
         IC    @9,0(0,@5)                                         0057  01020000
*         R11=R9/16;                /* GET BIT3 0-3 OF INPUT CHAR   */  01030000
         LR    @E,@9                                              0058  01040000
         SRA   @E,4                                               0058  01050000
         LR    @B,@E                                              0058  01060000
*                                   /* INTO REG. 11.                */  01070000
*         R9=R9&15;                 /* GET BITS 4-7 OF INPUT CHAR   */  01080000
         N     @9,@D2                                             0059  01090000
*                                   /* INTO REG. 9.                 */  01100000
*         AXTBLPTR=R3+R11;          /* SET POINTER TO CHAR TABLE.   */  01110000
         LR    @7,@B                                              0060  01120000
         AR    @7,@3                                              0060  01130000
*         OUTBUF=AXATBLEL;          /* STORE FIRST EBCDIC CHAR IN   */  01140000
         MVC   0(1,@6),0(@7)                                      0061  01150000
*                                   /* OUTPUT AREA.                 */  01160000
*         AXTBLPTR=R3+R9;           /* SET POINTER TO CHAR TABLE.   */  01170000
         LR    @7,@9                                              0062  01180000
         AR    @7,@3                                              0062  01190000
*         OUTBUF1=AXATBLEL;         /* STORE SECOND EBCDIC CHAR IN  */  01200000
         MVC   1(1,@6),0(@7)                                      0063  01210000
*                                   /* OUTPUT AREA.                 */  01220000
*         R6=R6+2;                  /* STEP TO ADDRESS BY 2.        */  01230000
         LA    @6,2(0,@6)                                         0064  01240000
*         R5=R5+1;                  /* STEP FROM ADDRESS BY 1.      */  01250000
         LA    @5,1(0,@5)                                         0065  01260000
*         IF R5<ENDADDR THEN        /* IS CONVERSION DONE. NO, GO   */  01270000
         CR    @5,@2                                              0066  01280000
*           GO TO CNVERT05;         /* AND DO IT. YES, EXIT.        */  01290000
         BC    04,CNVERT05                                        0067  01300000
* CNVERT06: /* FINISH ROUTINE FOR SUCCESSFUL CONVERSION */              01310000
*         RC=0;                     /* SET RETURN CODE TO ZERO TO   */  01320000
CNVERT06 SR    @F,@F                                              0068  01330000
*                                   /* INDICATE SUCCESSFUL CONVERT. */  01340000
* CNVERT07: /* RESTORE REGISTERS AND RETURN */                          01350000
*         RETURN;                   /* RETURN TO CALLER             */  01360000
*         END;                                                          01370000
@EL01    L     @E,12(0,@D)                                        0070  01380000
         LM    @0,@C,20(@D)                                       0070  01390000
         BCR   15,@E                                              0070  01400000
@DATA1   EQU   *                                                        01410000
@0       EQU   00                  EQUATES FOR REGISTERS 0-15           01420000
@1       EQU   01                                                       01430000
@2       EQU   02                                                       01440000
@3       EQU   03                                                       01450000
@4       EQU   04                                                       01460000
@5       EQU   05                                                       01470000
@6       EQU   06                                                       01480000
@7       EQU   07                                                       01490000
@8       EQU   08                                                       01500000
@9       EQU   09                                                       01510000
@A       EQU   10                                                       01520000
@B       EQU   11                                                       01530000
@C       EQU   12                                                       01540000
@D       EQU   13                                                       01550000
@E       EQU   14                                                       01560000
@F       EQU   15                                                       01570000
@D2      DC    F'15'                                                    01580000
@D1      DC    H'-1'                                                    01590000
         DS    0F                                                       01600000
         DS    0D                                                       01610000
@DATA    EQU   *                                                        01620000
PL       EQU   00000001            FULLWORD POINTER REGISTER            01630000
ENDADDR  EQU   00000002            FULLWORD POINTER REGISTER            01640000
R3       EQU   00000003            3  BYTE  POINTER REGISTER            01650000
R5       EQU   00000005            3  BYTE  POINTER REGISTER            01660000
R6       EQU   00000006            3  BYTE  POINTER REGISTER            01670000
AXTBLPTR EQU   00000007            FULLWORD POINTER REGISTER            01680000
R7       EQU   00000007            FULLWORD POINTER REGISTER            01690000
R8       EQU   00000008            FULLWORD POINTER REGISTER            01700000
I        EQU   00000009            3  BYTE  POINTER REGISTER            01710000
R9       EQU   00000009            FULLWORD POINTER REGISTER            01720000
R11      EQU   00000011            FULLWORD POINTER REGISTER            01730000
R12      EQU   00000012            FULLWORD POINTER REGISTER            01740000
RC       EQU   00000015            3  BYTE  POINTER REGISTER            01750000
LOW15    EQU   *                   4 BYTE(S) ON WORD                    01760000
         DC    X'00007FFF'                                              01770000
PARMLIST EQU   00000000            16 BYTE(S) ON WORD                   01780000
FROMADDR EQU   PARMLIST+00000000   FULLWORD POINTER                     01790000
TOADDR   EQU   PARMLIST+00000004   FULLWORD POINTER                     01800000
A00000   EQU   PARMLIST+00000008   FULLWORD POINTER                     01810000
A00001   EQU   PARMLIST+00000012   2 BYTE(S)                            01820000
FLGCOUNT EQU   PARMLIST+00000014   HALFWORD POINTER                     01830000
HEXBIT   EQU   PARMLIST+00000014   1 BIT(S)                             01840000
A00002   EQU   PARMLIST+00000014   14 BIT(S)                            01850000
LSTCNT   EQU   PARMLIST+00000015   1 BIT(S)                             01860000
AXATBL   EQU   *                   16 BYTE(S)                           01870000
         DC    C'0123456789ABCDEF'                                      01880000
AXFLGA   EQU   @DATA+00000020      1 BYTE(S)                            01890000
INBUF    EQU   00000000            1 BYTE(S)                            01900000
OUTAREA  EQU   00000000            2 BYTE(S)                            01910000
OUTBUF   EQU   OUTAREA+00000000    1 BYTE(S)                            01920000
OUTBUF1  EQU   OUTAREA+00000001    1 BYTE(S)                            01930000
AXATBLEL EQU   00000000            1 BYTE(S)                            01940000
         ORG   @DATA                                                    01950000
         DS    00000021C                                                01960000
@TEMPS   DS    0F                                                       01970000
@TEMP2   DC    F'0'                                                     01980000
@DATEND  EQU   *                                                        01990000
@9FB     EQU   CNVERT06                                                 02000000
CNVERT07 EQU   @EL01                                                    02010000
         END                                                            02020000
