         TITLE 'IFDOLT41 CONVERT MODULE'                                00010000
         TITLE 'IFDOLT41 CONVERT MODULE'                                00020000
         LCLA  &T,&SPN                                            0002  00030000
.@001    ANOP                                                     0002  00040000
IFDOLT41 CSECT ,                                                  0002  00050000
         ST    @E,12(0,@D)                                        0002  00060000
         ST    @0,20(0,@D)                                        0002  00070000
         STM   @2,@C,28(@D)                                       0002  00080000
         BALR  @4,0                                               0002  00090000
@PSTART  DS    0H                                                 0002  00100000
         USING @PSTART+00000,@4                                   0002  00110000
*         GEN(USING CONVMAP,1);                                         00120000
         USING CONVMAP,1                                                00130000
         DS    0H                                                       00140000
*         GENERATE DATA;                                                00150000
*         /************************************************************ 00160000
*         /*                        REGISTERS                         * 00170000
*         /************************************************************ 00180000
*         DCL PL REG(1) PTR(31);         /* REGISTER 1.               * 00190000
*         DCL ENDADDR REG(2) PTR(31);    /* REGISTER 2.               * 00200000
*         DCL R3 REG(3) PTR(24);         /* REGISTER 3.               * 00210000
*         DCL R5 REG(5) PTR(24);         /* REGISTER 5.               * 00220000
*         DCL R6 REG(6) PTR(24);         /* REGISTER 6.               * 00230000
*         DCL AXTBLPTR REG(7) PTR(31);   /* REGISTER 7.               * 00240000
*         DCL R7 REG(7) PTR(31);         /* REGISTER 7.               * 00250000
*         DCL R8 REG(8) PTR(31);         /* REGISTER 8.               * 00260000
*         DCL I REG(9) PTR(24);          /* REGISTER 9.               * 00270000
*         DCL R9 REG(9) PTR(31);         /* REGISTER 9.               * 00280000
*         DCL R11 REG(11) PTR(31);       /* REGISTER 11.              * 00290000
*         DCL R12 REG(12) PTR(31);       /* REGISTER 12.              * 00300000
*         DCL RC REG(15) PTR(24);        /* REGISTER 15.              * 00310000
*         DCL LOW15 CHAR(4) BDY(WORD) INIT('00007FFF'X);                00320000
*         DCL MACROLVL CHAR(1) GENERATED;                               00330000
*         DCL FROMADDR PTR(31) GENERATED;                               00340000
*         DCL TOADDR PTR(31) GENERATED;                                 00350000
*         DCL FLGCOUNT PTR(16) GENERATED;                               00360000
*         DCL 1 CNVCT BASED(ADDR(FLGCOUNT)),                            00370000
*               3 HEXBIT BIT(1),         /* TYPE OF CONVERSION FLAG.  * 00380000
*               3 * BIT(14),             /* COUNT.                    * 00390000
*               3 LSTCNT BIT(1);         /* ODD OR EVEN COUNT.        * 00400000
*         DCL AXATBL CHAR(16) INIT('0123456789ABCDEF');                 00410000
*         DCL AXFLGA CHAR(1);                                           00420000
*         DCL INBUF CHAR(1) BASED(R5);                                  00430000
*         DCL 1 OUTAREA CHAR(2) BASED(R6),                              00440000
*               3 OUTBUF CHAR(1),                                       00450000
*               3 OUTBUF1 CHAR(1);                                      00460000
*         DCL AXATBLEL CHAR(1) BASED(AXTBLPTR);                         00470000
*         RESTRICT(1,2,3,5,6,7,9,11,12);                                00480000
*         IF MACROLVL='02'X THEN    /* IS THIS MACRO LEVEL SUPPORTED*/  00490000
         CLI   MACROLVL,X'02'                                     0030  00500000
*           GO TO CNVERT00;         /* YES, CONTINUE.               */  00510000
         BC    08,CNVERT00                                        0031  00520000
*         RC=4;                     /* NO, SET REG. 15 TO 04 AND    */  00530000
         LA    @F,4                                               0032  00540000
*         GO TO CNVERT07;           /* RETURN TO CALLER.            */  00550000
         BC    15,CNVERT07                                        0033  00560000
* CNVERT00:                                                             00570000
*         /************************************************************ 00580000
*         /*               SETUP TO PERFORM CONVERSION                * 00590000
*         /************************************************************ 00600000
*         R5=FROMADDR;              /* GET FROM ADDRESS INTO REG. 5.*/  00610000
CNVERT00 L     @5,FROMADDR                                        0034  00620000
*         R6=TOADDR;                /* GET TO ADDRESS INTO REG. 6.  */  00630000
         L     @6,TOADDR                                          0035  00640000
*         R7=FLGCOUNT;              /* GET COUNT IN REG. 7.         */  00650000
         MVC   @TEMP2+2(2),FLGCOUNT                               0036  00660000
         L     @7,@TEMP2                                          0036  00670000
*         R7=R7&LOW15;                                                  00680000
         N     @7,LOW15                                           0037  00690000
*         IF R7=0 THEN              /* IF COUNT IS ZERO, RETURN TO  */  00700000
         LTR   @7,@7                                              0038  00710000
*           GO TO CNVERT06;         /* CALLER. OTHERWISE CONVERT.   */  00720000
         BC    08,CNVERT06                                        0039  00730000
*         AXFLGA='00'X;             /* CLEAR FLAG.                  */  00740000
         MVI   AXFLGA,X'00'                                       0040  00750000
*         ENDADDR=R5+R7;            /* FIND END OF CONVERSION DATA. */  00760000
         LR    @2,@7                                              0041  00770000
         AR    @2,@5                                              0041  00780000
*         R3=ADDR(AXATBL);          /* SET POINTER TO CHAR TABLE.   */  00790000
         LA    @3,AXATBL                                          0042  00800000
*         IF HEXBIT='1'B THEN       /* IS CONVERSION HEX TO EBCDIC. */  00810000
         TM    CNVCT,B'10000000'                                  0043  00820000
*           GO TO CNVERT05;         /* YES, GO TO HEX TO EBCDIC     */  00830000
         BC    01,CNVERT05                                        0044  00840000
*                                   /* ROUTINE.                     */  00850000
* CNVERT01:                                                             00860000
*         /************************************************************ 00870000
*         /*                                                          * 00880000
*         /*                EBCDIC TO HEX CONVERSION                  * 00890000
*         /*                                                          * 00900000
*         /************************************************************ 00910000
*         DO I=16 TO 1 BY -1;       /* SEE IF INPUT CHAR HAS A VALID*/  00920000
CNVERT01 LA    @9,16                                              0045  00930000
*         IF INBUF=AXATBL(I) THEN   /* HEX NUMBER EQUIVALENT.       */  00940000
@DO9FF   LR    @8,@9                                              0046  00950000
         LA    @E,AXATBL-1(@8)                                    0046  00960000
         CLC   0(1,@5),0(@E)                                      0046  00970000
*           GO TO CNVERT02;         /* YES, CONVERT IT.             */  00980000
         BC    08,CNVERT02                                        0047  00990000
*         END;                                                          01000000
*         RC=8;                     /* NO, SET RETURN CODE TO       */  01010000
         BCT   @9,@DO9FF                                          0048  01020000
         LA    @F,8                                               0049  01030000
*         PL=R5;                    /* INDICATE FAILURE OCCURED     */  01040000
         LR    @1,@5                                              0050  01050000
*                                   /* DURING AN EH CONVERSION AND  */  01060000
*                                   /* PLACE ADDRESS OF FAILING     */  01070000
*                                   /* CHARACTER IN REGISTER 1 AND  */  01080000
*         GO TO CNVERT07;           /* RETURN TO CALLER             */  01090000
         BC    15,CNVERT07                                        0051  01100000
* CNVERT02:                                                             01110000
*         R11=I-1;                  /* SAVE EQUIVALENT HEX CHAR.    */  01120000
CNVERT02 LH    @B,@D1                                             0052  01130000
         AR    @B,@9                                              0052  01140000
*         IF AXFLGA^='00'X THEN     /* IF 2ND BYTE, GO TO ROUTINE   */  01150000
         CLI   AXFLGA,X'00'                                       0053  01160000
*           GO TO CNVERT03;         /* THAT WILL OUTPUT HEX EQUIV.  */  01170000
         BC    07,CNVERT03                                        0054  01180000
*         R12=R11*16;               /* PUT FIRST HEX CHAR IN REG. 12*/  01190000
         LR    @F,@B                                              0055  01200000
         SLA   @F,4                                               0055  01210000
         LR    @C,@F                                              0055  01220000
*         AXFLGA='F0'X;             /* SET FLAG TO NON-ZERO TO      */  01230000
         MVI   AXFLGA,X'F0'                                       0056  01240000
*                                   /* INDICATE ONLY ONE CHARACTER  */  01250000
*                                   /* HAS BEEN CONVERTED.          */  01260000
*         GO TO CNVERT04;           /* GO TO ROUTINE THAT DETERMINES*/  01270000
         BC    15,CNVERT04                                        0057  01280000
*                                   /* IF MORE CONVERSION MUST BE   */  01290000
*                                   /* DONE.                        */  01300000
* CNVERT03:                                                             01310000
*         /************************************************************ 01320000
*         /*       OUTPUT ROUTINE FOR EBCDIC TO HEX CONVERSION        * 01330000
*         /************************************************************ 01340000
*         R12=R12|R11;              /* COMBINE TWO HEX CHARACTERS.  */  01350000
CNVERT03 OR    @C,@B                                              0058  01360000
*         GEN(STC   R12,0(R6));     /* PUT CHAR IN OUTPUT AREA      */  01370000
         STC   R12,0(R6)                                                01380000
         DS    0H                                                       01390000
*         R6=R6+1;                  /* STEP TO ADDRESS BY 1         */  01400000
         LA    @6,1(0,@6)                                         0060  01410000
*         AXFLGA='00'X;             /* SET FLAG TO ZERO             */  01420000
         MVI   AXFLGA,X'00'                                       0061  01430000
* CNVERT04:                                                             01440000
*         /************************************************************ 01450000
*         /*             IS MORE CONVERSION NECESSARY                 * 01460000
*         /************************************************************ 01470000
*         R5=R5+1;                  /* STEP FROM ADDRESS BY 1       */  01480000
CNVERT04 LA    @5,1(0,@5)                                         0062  01490000
*         IF R5<ENDADDR THEN        /* IS CONVERSION DONE. NO, GO   */  01500000
         CR    @5,@2                                              0063  01510000
*           GO TO CNVERT01;         /* AND DO IT.                   */  01520000
         BC    04,CNVERT01                                        0064  01530000
*         IF LSTCNT='1'B THEN       /* YES, WAS CONVERSION FROM EH  */  01540000
         TM    CNVCT+1,B'00000001'                                0065  01550000
         BC    12,@9FB                                            0065  01560000
*           GEN(STC   R12,0(R6));   /* FOR AN ODD NUMBER OF CHAR.   */  01570000
         STC   R12,0(R6)                                                01580000
         DS    0H                                                       01590000
*         GO TO CNVERT06;           /* NO, GO TO FINISH ROUTINE.    */  01600000
         BC    15,CNVERT06                                        0067  01610000
*                                   /* YES, PUT CONVERTED CHAR      */  01620000
*                                   /* IN OUTPUT AREA.              */  01630000
* CNVERT05:                                                             01640000
*         /************************************************************ 01650000
*         /*                                                          * 01660000
*         /*                HEX TO EBCDIC CONVERSION                  * 01670000
*         /*                                                          * 01680000
*         /************************************************************ 01690000
*         R9=INBUF;                 /* GET INPUT CHAR. INTO REG. 9. */  01700000
CNVERT05 SR    @9,@9                                              0068  01710000
         IC    @9,0(0,@5)                                         0068  01720000
*         R11=R9/16;                /* GET BITS 0-3 OF INPUT CHAR   */  01730000
         LR    @E,@9                                              0069  01740000
         SRA   @E,4                                               0069  01750000
         LR    @B,@E                                              0069  01760000
*                                   /* INTO REG. 11.                */  01770000
*         R9=R9&15;                 /* GET BITS 4-7 OF INPUT CHAR   */  01780000
         N     @9,@D2                                             0070  01790000
*                                   /* INTO REG. 9.                 */  01800000
*         AXTBLPTR=R3+R11;          /* SET POINTER TO CHAR TABLE.   */  01810000
         LR    @7,@B                                              0071  01820000
         AR    @7,@3                                              0071  01830000
*         OUTBUF=AXATBLEL;          /* STORE FIRST EBCDIC CHAR IN   */  01840000
         MVC   0(1,@6),0(@7)                                      0072  01850000
*                                   /* OUTPUT AREA.                 */  01860000
*         AXTBLPTR=R3+R9;           /* SET POINTER TO CHAR TABLE.   */  01870000
         LR    @7,@9                                              0073  01880000
         AR    @7,@3                                              0073  01890000
*         OUTBUF1=AXATBLEL;         /* STORE SECOND EBCDIC CHAR IN  */  01900000
         MVC   1(1,@6),0(@7)                                      0074  01910000
*                                   /* OUTPUT AREA.                 */  01920000
*         R6=R6+2;                  /* STEP TO ADDRESS BY 2.        */  01930000
         LA    @6,2(0,@6)                                         0075  01940000
*         R5=R5+1;                  /* STEP FROM ADDRESS BY 1.      */  01950000
         LA    @5,1(0,@5)                                         0076  01960000
*         IF R5<ENDADDR THEN        /* IS CONVERSION DONE. NO, GO   */  01970000
         CR    @5,@2                                              0077  01980000
*           GO TO CNVERT05;         /* AND DO IT. YES, EXIT.        */  01990000
         BC    04,CNVERT05                                        0078  02000000
* CNVERT06:                                                             02010000
*         /************************************************************ 02020000
*         /*         FINISH ROUTINE FOR SUCCESSFUL CONVERSION         * 02030000
*         /************************************************************ 02040000
*         RC=0;                     /* SET RETURN CODE TO ZERO TO   */  02050000
CNVERT06 SR    @F,@F                                              0079  02060000
*                                   /* INDICATE SUCCESSFUL CONVERT  */  02070000
* CNVERT07:                                                             02080000
*         /************************************************************ 02090000
*         /*                                                          * 02100000
*         /*              RESTORE REGISTERS AND RETURN                * 02110000
*         /*                                                          * 02120000
*         /************************************************************ 02130000
*         RETURN;                   /* RETURN TO CALLER             */  02140000
*         END;                                                          02150000
@EL01    L     @E,12(0,@D)                                        0081  02160000
         L     @0,20(0,@D)                                        0081  02170000
         LM    @2,@C,28(@D)                                       0081  02180000
         BCR   15,@E                                              0081  02190000
@DATA1   EQU   *                                                        02200000
@0       EQU   00                  EQUATES FOR REGISTERS 0-15           02210000
@1       EQU   01                                                       02220000
@2       EQU   02                                                       02230000
@3       EQU   03                                                       02240000
@4       EQU   04                                                       02250000
@5       EQU   05                                                       02260000
@6       EQU   06                                                       02270000
@7       EQU   07                                                       02280000
@8       EQU   08                                                       02290000
@9       EQU   09                                                       02300000
@A       EQU   10                                                       02310000
@B       EQU   11                                                       02320000
@C       EQU   12                                                       02330000
@D       EQU   13                                                       02340000
@E       EQU   14                                                       02350000
@F       EQU   15                                                       02360000
@D2      DC    F'15'                                                    02370000
@D1      DC    H'-1'                                                    02380000
         DS    0F                                                       02390000
         DS    0D                                                       02400000
@DATA    EQU   *                                                        02410000
PL       EQU   00000001            FULLWORD POINTER REGISTER            02420000
ENDADDR  EQU   00000002            FULLWORD POINTER REGISTER            02430000
R3       EQU   00000003            3  BYTE  POINTER REGISTER            02440000
R5       EQU   00000005            3  BYTE  POINTER REGISTER            02450000
R6       EQU   00000006            3  BYTE  POINTER REGISTER            02460000
AXTBLPTR EQU   00000007            FULLWORD POINTER REGISTER            02470000
R7       EQU   00000007            FULLWORD POINTER REGISTER            02480000
R8       EQU   00000008            FULLWORD POINTER REGISTER            02490000
I        EQU   00000009            3  BYTE  POINTER REGISTER            02500000
R9       EQU   00000009            FULLWORD POINTER REGISTER            02510000
R11      EQU   00000011            FULLWORD POINTER REGISTER            02520000
R12      EQU   00000012            FULLWORD POINTER REGISTER            02530000
RC       EQU   00000015            3  BYTE  POINTER REGISTER            02540000
LOW15    EQU   *                   4 BYTE(S) ON WORD                    02550000
         DC    X'00007FFF'                                              02560000
AXATBL   EQU   *                   16 BYTE(S)                           02570000
         DC    C'0123456789ABCDEF'                                      02580000
AXFLGA   EQU   @DATA+00000020      1 BYTE(S)                            02590000
INBUF    EQU   00000000            1 BYTE(S)                            02600000
OUTAREA  EQU   00000000            2 BYTE(S)                            02610000
OUTBUF   EQU   OUTAREA+00000000    1 BYTE(S)                            02620000
OUTBUF1  EQU   OUTAREA+00000001    1 BYTE(S)                            02630000
AXATBLEL EQU   00000000            1 BYTE(S)                            02640000
         ORG   @DATA                                                    02650000
         DS    00000021C                                                02660000
@TEMPS   DS    0F                                                       02670000
@TEMP2   DC    F'0'                                                     02680000
CNVPATCH DC    7XL2'0700'                                               02690000
CONVMAP  DSECT                                                          02700000
$CNVTRMG DC    XL1'0' .            CONTROL PROGRAM FLAGS                02710000
$CNVLEVL DC    XL1'0' .            MACRO LEVEL                          02720000
$CNVIDNT DC    XL2'0' .            MACRO ID                             02730000
$CNVFROM DC    A(0) .              FROM ADDRESS                         02740000
$CNVTO   DC    A(0) .              TO ADDRESS                           02750000
$CNVCT   DC    XL2'0' .            TYPE & COUNT                         02760000
FROMADDR EQU   $CNVFROM                                                 02770000
TOADDR   EQU   $CNVTO                                                   02780000
FLGCOUNT EQU   $CNVCT                                                   02790000
MACROLVL EQU   $CNVLEVL                                                 02800000
CNVCT    EQU   FLGCOUNT+00000000   2 BYTE(S) ON WORD                    02810000
HEXBIT   EQU   CNVCT+00000000      1 BIT(S)                             02820000
A00000   EQU   CNVCT+00000000      14 BIT(S)                            02830000
LSTCNT   EQU   CNVCT+00000001      1 BIT(S)                             02840000
@DATEND  EQU   *                                                        02850000
@9FB     EQU   CNVERT06                                                 02860000
CNVERT07 EQU   @EL01                                                    02870000
         END                                                            02880000
