         TITLE 'AMDPRSN3--EDIT END OF STATEMENT PROCEDURES             *00001000
                        '                                               00002000
AMDPRSN3 CSECT ,                                                   0001 00003000
@MAINENT DS    0H                                                  0001 00004000
         USING *,@15                                               0001 00005000
         B     @PROLOG                                             0001 00006000
         DC    AL2(@EP00001-@MAINENT)                                   00007000
AMDPEOC2 DS    0H                                                  0001 00008000
         USING *,@15                                               0001 00009000
         B     @PROLOG                                             0001 00010000
         DC    AL2(@EP00091-AMDPEOC2)                                   00011000
         ENTRY AMDPEOC2                                                 00012000
AMDPFIN  DS    0H                                                  0001 00013000
         USING *,@15                                               0001 00014000
         B     @PROLOG                                             0001 00015000
         DC    AL2(@EP00179-AMDPFIN)                                    00016000
         ENTRY AMDPFIN                                                  00017000
AMDPSUM1 DS    0H                                                  0001 00018000
         USING *,@15                                               0001 00019000
         B     @PROLOG                                             0001 00020000
         DC    AL2(@EP00256-AMDPSUM1)                                   00021000
         ENTRY AMDPSUM1                                                 00022000
         DROP  @15                                                      00023000
@PROLOG  ST    @14,12(,@13)                                        0001 00024000
         STM   @00,@12,20(@13)                                     0001 00025000
         BALR  @11,0                                               0001 00026000
@PSTART  LA    @07,4095(,@11)                                      0001 00027000
         USING @PSTART,@11                                         0001 00028000
         USING @PSTART+4095,@07                                    0001 00029000
         LA    @08,@DATA                                           0001 00030000
         USING @DATA,@08                                           0001 00031000
         ST    @13,@SA00001+4                                      0001 00032000
         LA    @14,@SA00001                                        0001 00033000
         ST    @14,8(,@13)                                         0001 00034000
         LR    @13,@14                                             0001 00035000
         AH    @15,4(,@15)                                         0001 00036000
         BR    @15                                                 0001 00037000
@EP00001 DS    0H                                                  0002 00038000
*                                                                  0090 00039000
              EQUATES                   AMDPRDMP EQU MACRO              00040000
              COMMON                    EXPANDS TO AMDPRCOM TABLE       00041000
AMDPRSN3      CSECT                     RE-ESTABLISH SCAN CSECT         00042000
              USING COMMON,COMBASE      SET UP DSECT FOR AMDPRCOM       00043000
*   /*****************************************************************/ 00044000
*   /*                                                               */ 00045000
*   /* THIS SUBROUTINE CONTINUES UPDATING/RESETTING PROCEDURES- IT   */ 00046000
*   /* HAS BEEN DETERMINED THAT END-OF- STATEMENT HAS BEEN REACHED.  */ 00047000
*   /*                                                               */ 00048000
*   /*****************************************************************/ 00049000
*                                                                  0091 00050000
*AMDPEOC2:                                                         0091 00051000
*   ENTRY;                          /* ENTRY POINT                   */ 00052000
@EP00091 DS    0H                                                  0092 00053000
*AMDPEC21:                                                         0092 00054000
*   IF FLMODE='1'B THEN             /* IF FLUSH MODE,                */ 00055000
AMDPEC21 TM    FLMODE(AEDITCBR),B'10000000'                        0092 00056000
         BNO   @RF00092                                            0092 00057000
*     DO;                           /* RESET VALUES                  */ 00058000
*       EXITNAME=' ';               /* EXIT NAME BLANKED OUT         */ 00059000
         MVI   EXITNAME+1(TTABPTR),C' '                            0094 00060000
         MVC   EXITNAME+2(6,TTABPTR),EXITNAME+1(TTABPTR)           0094 00061000
         MVI   EXITNAME(TTABPTR),C' '                              0094 00062000
*       DDNM=' ';                   /* DDNAME BLANKED OUT            */ 00063000
         MVI   DDNM+1(TTABPTR),C' '                                0095 00064000
         MVC   DDNM+2(6,TTABPTR),DDNM+1(TTABPTR)                   0095 00065000
         MVI   DDNM(TTABPTR),C' '                                  0095 00066000
*       SIOTFLGS='0'B;              /* SIOTFLGS ZEROED OUT           */ 00067000
         MVI   SIOTFLGS(TTABPTR),B'00000000'                       0096 00068000
*       IOTFLGS='0'B;               /* IOTFLGS ZEROED OUT            */ 00069000
         MVI   IOTFLGS(TTABPTR),B'00000000'                        0097 00070000
*       USRTFLGS='0'B;              /* USRTFLGS ZEROED OUT           */ 00071000
         MVI   USRTFLGS(TTABPTR),B'00000000'                       0098 00072000
*       SVCTFLGS='0'B;              /* SVCTFLGS ZEROED OUT           */ 00073000
         MVI   SVCTFLGS(TTABPTR),B'00000000'                       0099 00074000
*       PITFLGS='0'B;               /* PITFLGS ZEROED OUT            */ 00075000
         MVI   PITFLGS(TTABPTR),B'00000000'                        0100 00076000
*       SVCSTR='0'B;                /* ZERO TEMP SVC BIT STRING      */ 00077000
         XC    SVCSTR+1(31,TTABPTR),SVCSTR+1(TTABPTR)              0101 00078000
         MVI   SVCSTR(TTABPTR),B'00000000'                         0101 00079000
*       PISTR='0'B;                 /* ZERO TEMP PI BIT STRING       */ 00080000
         MVI   PISTR+1(TTABPTR),X'00'                              0102 00081000
         MVI   PISTR(TTABPTR),B'00000000'                          0102 00082000
*       PISTRB='0'B;                /* TURN OFF PI 17- 19 BITS       */ 00083000
         MVI   PISTRB(TTABPTR),B'00000000'                         0103 00084000
*       SYSTFLGS='0'B;              /* SYSTFLGS ZEROED OUT           */ 00085000
*                                                                  0104 00086000
         MVI   SYSTFLGS(TTABPTR),B'00000000'                       0104 00087000
*       /*************************************************************/ 00088000
*       /*                                                           */ 00089000
*       /* BEFORE BLANKING OR ZEROING OUT ERRONEOUS FIELDS IN        */ 00090000
*       /* AMDPRTAB, DETERMINE IF FIELD POINTER POINTS WITHIN        */ 00091000
*       /* ERRONEOUS FIELD. IF NOT, OMIT RE-INITIALIZATION.          */ 00092000
*       /*                                                           */ 00093000
*       /*************************************************************/ 00094000
*                                                                  0105 00095000
*       JOBCRPTR=JOBNPTR;           /* RE-INIT JOBNAMES PTR          */ 00096000
         L     @14,JOBNPTR(,TTABPTR)                               0105 00097000
         ST    @14,JOBCRPTR(,TTABPTR)                              0105 00098000
*       IF JOBCRPTR=ADDR(ADS)       /* Q/AT END OF JOBN SLOTS        */ 00099000
*         THEN                      /* YES, SO DO BELOW              */ 00100000
         LA    @10,ADS(,AEDITCBR)                                  0106 00101000
         CR    @14,@10                                             0106 00102000
         BE    @RT00106                                            0106 00103000
*         GOTO AMDTCB1;             /* OMIT RE-INITIALIZATION        */ 00104000
*       JOBCRPTR->JOBCHAR           /* BLANK JOBN SLOT               */ 00105000
*           =BLANK1;                                               0108 00106000
         MVC   JOBCHAR(8,@14),BLANK1(TTABPTR)                      0108 00107000
*AMDTCB1:                                                          0109 00108000
*       ASCBCPTR=ASCBPTR;           /* REINIT ASCB ADDRS PTR Y02014  */ 00109000
AMDTCB1  L     @14,ASCBPTR(,TTABPTR)                               0109 00110000
         ST    @14,ASCBCPTR(,TTABPTR)                              0109 00111000
*       IF ASCBCPTR=ADDR(SIF)       /* AT END OF ASCB SLOTS    Y02014*/ 00112000
*         THEN                      /* YES, SO DO BELOW              */ 00113000
         LA    @10,SIF(,AEDITCBR)                                  0110 00114000
         CR    @14,@10                                             0110 00115000
         BE    @RT00110                                            0110 00116000
*         GOTO AMDSIO1;             /* OMIT RE-INITIALIZATION        */ 00117000
*       ASCBCPTR->REINIT            /* ZERO ASCB ADDRS SLT     Y02014*/ 00118000
*           =0;                                                    0112 00119000
         SLR   @10,@10                                             0112 00120000
         STCM  @10,15,REINIT(@14)                                  0112 00121000
*AMDSIO1:                                                          0113 00122000
*       SIOCRPTR=SIOPTR;            /* RE-INIT SIO DEVICES PTR       */ 00123000
AMDSIO1  L     @14,SIOPTR(,TTABPTR)                                0113 00124000
         ST    @14,SIOCRPTR(,TTABPTR)                              0113 00125000
*       IF SIOCRPTR=ADDR(IO)        /* Q/AT END OF SIO DEVICE ADS    */ 00126000
*         THEN                      /* YES, SO DO BELOW              */ 00127000
         LA    @10,IO(,AEDITCBR)                                   0114 00128000
         CR    @14,@10                                             0114 00129000
         BE    @RT00114                                            0114 00130000
*         GOTO AMDIO1;              /* OMIT RE-INITIALIZATION        */ 00131000
*       SIOCRPTR->DEVCHAR           /* BLANK OUT SIO SLOT            */ 00132000
*           =BLANK1;                                               0116 00133000
         MVC   DEVCHAR(2,@14),BLANK1(TTABPTR)                      0116 00134000
*AMDIO1:                                                           0117 00135000
*       IOCRPTR=IOPTR;              /* RE-INIT IO DEVICES PTR        */ 00136000
AMDIO1   L     @14,IOPTR(,TTABPTR)                                 0117 00137000
         ST    @14,IOCRPTR(,TTABPTR)                               0117 00138000
*       IF IOCRPTR=ADDR(VCF)        /* Q/AT END OF IO DEVICE ADS     */ 00139000
*         THEN                      /* YES, SO DO BELOW              */ 00140000
         LA    @10,VCF(,AEDITCBR)                                  0118 00141000
         CR    @14,@10                                             0118 00142000
         BE    @RT00118                                            0118 00143000
*         GOTO AMDUSRBL;            /* OMIT RE-INITIALIZATION        */ 00144000
*       IOCRPTR->DEVCHAR            /* BLANK IO SLOT                 */ 00145000
*           =BLANK1;                                               0120 00146000
*                                                                  0120 00147000
         MVC   DEVCHAR(2,@14),BLANK1(TTABPTR)                      0120 00148000
*       /*************************************************************/ 00149000
*       /*                                                           */ 00150000
*       /* BLANK OUT ALL USR SLOTS FILLED IN FROM THIS CARD          */ 00151000
*       /*                                                           */ 00152000
*       /*************************************************************/ 00153000
*                                                                  0121 00154000
*AMDUSRBL:                                                         0121 00155000
*       DO I=USRCOUNT+1 TO USRCRCNT;                               0121 00156000
AMDUSRBL LA    @14,1                                               0121 00157000
         AL    @14,USRCOUNT(,TTABPTR)                              0121 00158000
         B     @DE00121                                            0121 00159000
@DL00121 DS    0H                                                  0122 00160000
*         USRNGTAB(I)=BLANK1;       /* BLANK OUT USR SLOT            */ 00161000
         L     @14,I(,TTABPTR)                                     0122 00162000
         SLA   @14,2                                               0122 00163000
         ALR   @14,AEDITCBR                                        0122 00164000
         MVC   USRNGTAB-4(4,@14),BLANK1(TTABPTR)                   0122 00165000
*       END;                                                       0123 00166000
         LA    @14,1                                               0123 00167000
         AL    @14,I(,TTABPTR)                                     0123 00168000
@DE00121 ST    @14,I(,TTABPTR)                                     0123 00169000
         C     @14,USRCRCNT(,TTABPTR)                              0123 00170000
         BNH   @DL00121                                            0123 00171000
*       USRCRCNT=0;                 /* RE-INIT USR EID COUNT         */ 00172000
         SLR   @14,@14                                             0124 00173000
         ST    @14,USRCRCNT(,TTABPTR)                              0124 00174000
*       STARTSL=' ';                /* START SLOT BLANKED OUT        */ 00175000
         MVI   STARTSL+1(TTABPTR),C' '                             0125 00176000
         MVC   STARTSL+2(10,TTABPTR),STARTSL+1(TTABPTR)            0125 00177000
         MVI   STARTSL(TTABPTR),C' '                               0125 00178000
*       STOPSL=' ';                 /* STOP SLOT BLANKED OUT         */ 00179000
*                                                                  0126 00180000
         MVI   STOPSL+1(TTABPTR),C' '                              0126 00181000
         MVC   STOPSL+2(10,TTABPTR),STOPSL+1(TTABPTR)              0126 00182000
         MVI   STOPSL(TTABPTR),C' '                                0126 00183000
*       /*************************************************************/ 00184000
*       /*                                                           */ 00185000
*       /* DETERMINE IF START AND/OR STOP SLOT IN AMDPRTAB IS FILLED */ 00186000
*       /* IN. IF SO, DO NOT BLANK OUT THE RESPECTIVE START AND/OR   */ 00187000
*       /* STOP INTERNAL SLOT.                                       */ 00188000
*       /*                                                           */ 00189000
*       /*************************************************************/ 00190000
*                                                                  0127 00191000
*       IF STARTIME=BLANK1 THEN     /* IF PRTAB START SLOT BLANK,    */ 00192000
         CLC   STARTIME(12,AEDITCBR),BLANK1(TTABPTR)               0127 00193000
         BNE   @RF00127                                            0127 00194000
*         INTSTART=BLANK1;          /* BLANK OUT INT START SLOT      */ 00195000
         MVC   INTSTART(5,TTABPTR),BLANK1(TTABPTR)                 0128 00196000
*       IF STOPTIME=BLANK1 THEN     /* IF PRTAB STOP SLOT BLANK,     */ 00197000
@RF00127 CLC   STOPTIME(12,AEDITCBR),BLANK1(TTABPTR)               0129 00198000
         BNE   @RF00129                                            0129 00199000
*         INTSTOP=BLANK1;           /* BLANK OUT INT STOP SLOT       */ 00200000
         MVC   INTSTOP(5,TTABPTR),BLANK1(TTABPTR)                  0130 00201000
*       OVERLTAB=' ';               /* OVERLAY TABLE BLANKED OUT     */ 00202000
@RF00129 MVI   OVERLTAB+1(TTABPTR),C' '                            0131 00203000
         MVC   OVERLTAB+2(38,TTABPTR),OVERLTAB+1(TTABPTR)          0131 00204000
         MVI   OVERLTAB(TTABPTR),C' '                              0131 00205000
*       IF GRDRSW='1'B THEN         /* IF INPUT FROM SYSIN,          */ 00206000
         TM    GRDRSW,B'00000001'                                  0132 00207000
         BO    @RT00132                                            0132 00208000
*         GOTO AMDPST4;             /* THEN RETURN TO AMDPRCTL       */ 00209000
*       GOTO AMDPRESP;              /* IF INPUT FROM CONSOLE,      0134 00210000
*                                      RESPECIFY LAST LINE           */ 00211000
         B     AMDPRESP                                            0134 00212000
*     END;                          /* IF FLUSH MODE BIT WAS ON      */ 00213000
*                                                                  0135 00214000
*   /*****************************************************************/ 00215000
*   /*                                                               */ 00216000
*   /* IF FLUSH MODE BIT WAS OFF, MAKE TEMPORARY VALUES PERM         */ 00217000
*   /*                                                               */ 00218000
*   /*****************************************************************/ 00219000
*                                                                  0136 00220000
*   IF EXITNAME^=BLANK1 THEN        /* MAKE TEMPORARY EXIT NAME      */ 00221000
@RF00092 CLC   EXITNAME(8,TTABPTR),BLANK1(TTABPTR)                 0136 00222000
         BE    @RF00136                                            0136 00223000
*     USEREXIT=EXITNAME;            /* THE EXIT NAME IN AMDPRTAB     */ 00224000
         MVC   USEREXIT(8,AEDITCBR),EXITNAME(TTABPTR)              0137 00225000
*   IF DDNM^=BLANK1 THEN            /* MAKE TEMPORARY DDNAME THE     */ 00226000
@RF00136 CLC   DDNM(8,TTABPTR),BLANK1(TTABPTR)                     0138 00227000
         BE    @RF00138                                            0138 00228000
*     DDNAME=DDNM;                  /* DDNAME IN AMDPRTAB            */ 00229000
         MVC   DDNAME(8,AEDITCBR),DDNM(TTABPTR)                    0139 00230000
*   IF STARTSL^=BLANK1 THEN         /* MAKE TEMPORARY START VALUE    */ 00231000
@RF00138 CLC   STARTSL(12,TTABPTR),BLANK1(TTABPTR)                 0140 00232000
         BE    @RF00140                                            0140 00233000
*     STARTIME=STARTSL;             /* THE START VAL IN AMDPRTAB     */ 00234000
         MVC   STARTIME(12,AEDITCBR),STARTSL(TTABPTR)              0141 00235000
*   IF STOPSL^=BLANK1 THEN          /* MAKE TEMPORARY STOP VALUE     */ 00236000
@RF00140 CLC   STOPSL(12,TTABPTR),BLANK1(TTABPTR)                  0142 00237000
         BE    @RF00142                                            0142 00238000
*     STOPTIME=STOPSL;              /* THE STOP VAL IN AMDPRTAB      */ 00239000
         MVC   STOPTIME(12,AEDITCBR),STOPSL(TTABPTR)               0143 00240000
*   JOBNPTR=JOBCRPTR;               /* UPDATE JOBNAMES PTR           */ 00241000
@RF00142 L     @14,JOBCRPTR(,TTABPTR)                              0144 00242000
         ST    @14,JOBNPTR(,TTABPTR)                               0144 00243000
*   IF JOBNPTR=ADDR(ADS) THEN       /* Q/AT END OF JOBN SLOTS        */ 00244000
         LA    @10,ADS(,AEDITCBR)                                  0145 00245000
         CR    @14,@10                                             0145 00246000
         BE    @RT00145                                            0145 00247000
*     GOTO AMDTCB;                  /* YES                           */ 00248000
*   JOBNPTR->JOBCHAR=BLANK1;        /* IF NOT, BLANK SLOT            */ 00249000
         MVC   JOBCHAR(8,@14),BLANK1(TTABPTR)                      0147 00250000
*AMDTCB:                                                           0148 00251000
*   ASCBPTR=ASCBCPTR;               /* UPDTE ASCB ADRS PTR     Y02014*/ 00252000
AMDTCB   L     @14,ASCBCPTR(,TTABPTR)                              0148 00253000
         ST    @14,ASCBPTR(,TTABPTR)                               0148 00254000
*   IF ASCBPTR=ADDR(SIF) THEN       /* AT END OF ASCB SLTS     Y02014*/ 00255000
         LA    @10,SIF(,AEDITCBR)                                  0149 00256000
         CR    @14,@10                                             0149 00257000
         BE    @RT00149                                            0149 00258000
*     GOTO AMDSIO;                  /* YES                           */ 00259000
*   ASCBPTR->REINIT=0;              /* NO ZERO CURR SLOT       Y02014*/ 00260000
         SLR   @10,@10                                             0151 00261000
         STCM  @10,15,REINIT(@14)                                  0151 00262000
*AMDSIO:                                                           0152 00263000
*   SIOFLGS=SIOFLGS                 /* UPDATE SIOFLGS                */ 00264000
*       |SIOTFLGS;                                                 0152 00265000
AMDSIO   OC    SIOFLGS(1,AEDITCBR),SIOTFLGS(TTABPTR)               0152 00266000
*   SIOPTR=SIOCRPTR;                /* UPDATE SIO DEVS PTR           */ 00267000
         L     @14,SIOCRPTR(,TTABPTR)                              0153 00268000
         ST    @14,SIOPTR(,TTABPTR)                                0153 00269000
*   IF SIOPTR=ADDR(IO) THEN         /* Q/AT END OF SIO DEVICE ADS    */ 00270000
         LA    @10,IO(,AEDITCBR)                                   0154 00271000
         CR    @14,@10                                             0154 00272000
         BE    @RT00154                                            0154 00273000
*     GOTO AMDIO;                   /* YES                           */ 00274000
*   SIOPTR->DEVCHAR=BLANK1;         /* IF NOT, BLANK CURRENT SLOT    */ 00275000
         MVC   DEVCHAR(2,@14),BLANK1(TTABPTR)                      0156 00276000
*AMDIO:                                                            0157 00277000
*   IOFLGS2=IOFLGS2|IOTFLGS;        /* UPDATE IOFLGS                 */ 00278000
AMDIO    OC    IOFLGS2(1,AEDITCBR),IOTFLGS(TTABPTR)                0157 00279000
*   IOPTR=IOCRPTR;                  /* UPDATE IO DEVS PTR            */ 00280000
         L     @14,IOCRPTR(,TTABPTR)                               0158 00281000
         ST    @14,IOPTR(,TTABPTR)                                 0158 00282000
*   IF IOPTR=ADDR(VCF) THEN         /* Q/AT END OF IO DEVICE ADS     */ 00283000
         LA    @10,VCF(,AEDITCBR)                                  0159 00284000
         CR    @14,@10                                             0159 00285000
         BE    @RT00159                                            0159 00286000
*     GOTO AMDUSRCT;                /* YES                           */ 00287000
*   IOPTR->DEVCHAR=BLANK1;          /* IF NOT, BLANK CURRENT SLOT    */ 00288000
         MVC   DEVCHAR(2,@14),BLANK1(TTABPTR)                      0161 00289000
*AMDUSRCT:                                                         0162 00290000
*   USRFLGS=USRFLGS                 /* UPDATE USRFLGS                */ 00291000
*       |USRTFLGS;                                                 0162 00292000
AMDUSRCT OC    USRFLGS(1,AEDITCBR),USRTFLGS(TTABPTR)               0162 00293000
*   USRCOUNT=USRCOUNT               /* UPDATE USR EID COUNT          */ 00294000
*       +USRCRCNT;                                                 0163 00295000
         L     @14,USRCOUNT(,TTABPTR)                              0163 00296000
         AL    @14,USRCRCNT(,TTABPTR)                              0163 00297000
         ST    @14,USRCOUNT(,TTABPTR)                              0163 00298000
*   USRCRCNT=0;                     /* REINIT CURRENT EID COUNT      */ 00299000
         SLR   @14,@14                                             0164 00300000
         ST    @14,USRCRCNT(,TTABPTR)                              0164 00301000
*   PIFLGS=PIFLGS|PITFLGS;          /* UPDATE PIFLGS                 */ 00302000
         OC    PIFLGS(1,AEDITCBR),PITFLGS(TTABPTR)                 0165 00303000
*   SVCFLGS=SVCFLGS                 /* UPDATE SVCFLGS                */ 00304000
*       |SVCTFLGS;                                                 0166 00305000
         OC    SVCFLGS(1,AEDITCBR),SVCTFLGS(TTABPTR)               0166 00306000
*   PICODES=PICODES|PISTR;          /* UPDATE PI CODES               */ 00307000
         OC    PICODES(2,AEDITCBR),PISTR(TTABPTR)                  0167 00308000
*   PICODEA=PICODEA|PISTRB;         /* UPDATE PI CODES 17 18 19      */ 00309000
         OC    PICODEA(1,AEDITCBR),PISTRB(TTABPTR)                 0168 00310000
*   SVCNUMS=SVCNUMS|SVCSTR;         /* UPDATE SVC NUMBERS            */ 00311000
         OC    SVCNUMS(32,AEDITCBR),SVCSTR(TTABPTR)                0169 00312000
*   GENFLAGS=GENFLAGS               /* UPDATE SYSTEM FLAGS           */ 00313000
*       |SYSTFLGS;                                                 0170 00314000
*                                                                  0170 00315000
         OC    GENFLAGS(1,AEDITCBR),SYSTFLGS(TTABPTR)              0170 00316000
*   /*****************************************************************/ 00317000
*   /*                                                               */ 00318000
*   /* LOOP THROUGH OVERLAY TABLE- IF VALUE EXISTS, OVERLAY CURRENT  */ 00319000
*   /* VALUE IN USR EID RANGE TABLE                                  */ 00320000
*   /*                                                               */ 00321000
*   /*****************************************************************/ 00322000
*                                                                  0171 00323000
*   DO I=1 TO 20;                   /* LOOP THRU ENTIRE TABLE        */ 00324000
         LA    @14,1                                               0171 00325000
         ST    @14,I(,TTABPTR)                                     0171 00326000
@DL00171 DS    0H                                                  0172 00327000
*     IF OVERSL(I)                  /* IF NON-BLANK VALUE IN         */ 00328000
*         ^=BLANK1 THEN             /* OVERLTAB, THEN INSERT         */ 00329000
         L     @14,I(,TTABPTR)                                     0172 00330000
         LR    @10,@14                                             0172 00331000
         ALR   @10,@10                                             0172 00332000
         ST    @10,@TF00001                                        0172 00333000
         ALR   @10,TTABPTR                                         0172 00334000
         CLC   OVERSL-2(2,@10),BLANK1(TTABPTR)                     0172 00335000
         BE    @RF00172                                            0172 00336000
*       USRNGTAB(I,3                /* VALUE IN USR EID RANGE        */ 00337000
*           :4)=OVERSL(I);          /* TABLE UPPER RNG PORTION       */ 00338000
         SLA   @14,2                                               0173 00339000
         ALR   @14,AEDITCBR                                        0173 00340000
         LR    @10,TTABPTR                                         0173 00341000
         AL    @10,@TF00001                                        0173 00342000
         MVC   USRNGTAB-2(2,@14),OVERSL-2(@10)                     0173 00343000
*   END;                            /* NO VALUE OR AT USRMAX         */ 00344000
@RF00172 LA    @14,1                                               0174 00345000
         AL    @14,I(,TTABPTR)                                     0174 00346000
         ST    @14,I(,TTABPTR)                                     0174 00347000
         C     @14,@CF00130                                        0174 00348000
         BNH   @DL00171                                            0174 00349000
*   IF GCONTSW='1'B THEN            /* IF CONTINUE SWITCH ON,        */ 00350000
         TM    GCONTSW,B'00000100'                                 0175 00351000
         BO    @RT00175                                            0175 00352000
*     GOTO AMDRET3;                 /* RETURN FOR ANOTHER STMT       */ 00353000
*   GOTO AMDPFINN;                  /* SKIP ENTRY STATEMENT          */ 00354000
         B     AMDPFINN                                            0177 00355000
*AMDRET3:                                                          0178 00356000
*   RETURN;                         /* RETURN TO CALLER              */ 00357000
*                                                                  0178 00358000
*   /*****************************************************************/ 00359000
*   /*                                                               */ 00360000
*   /* THIS SUBROUTINE ACCOMPLISHES THE SORTING OF THE SIO, IO, AND  */ 00361000
*   /* USER PORTIONS OF AMDPRTAB. VALUES ARE ORGANIZED IN ASCENDING  */ 00362000
*   /* ORDER.                                                        */ 00363000
*   /*                                                               */ 00364000
*   /*****************************************************************/ 00365000
*                                                                  0179 00366000
*AMDPFIN:                                                          0179 00367000
*   ENTRY;                          /* ENTRY POINT                   */ 00368000
@EP00179 DS    0H                                                  0180 00369000
*AMDPFINN:                                                         0180 00370000
*   SORTSW=0;                       /* READY TO SORT TABLES--      0180 00371000
*                                      SCANNING COMPLETE             */ 00372000
AMDPFINN SLR   SORTSW,SORTSW                                       0180 00373000
*   IF SIOPTR=ADDR(DVADS1)          /* IF NO SIO DEVICE ADDRESSES    */ 00374000
*     THEN                          /* IN SIO TABLE, THEN            */ 00375000
         L     @14,SIOPTR(,TTABPTR)                                0181 00376000
         LA    @10,DVADS1(,AEDITCBR)                               0181 00377000
         CR    @14,@10                                             0181 00378000
         BE    @RT00181                                            0181 00379000
*     GOTO AMDPFIN1;                /* LOOK IN NEXT TABLE            */ 00380000
*   SRTTABPT=ADDR(DVADS1);          /* INITIALIZE TO TABL BEGNING    */ 00381000
         ST    @10,SRTTABPT(,TTABPTR)                              0183 00382000
*   INCRT=2;                        /* SIO TABLE 2 BYTES WIDE        */ 00383000
         LA    @06,2                                               0184 00384000
         ST    @06,INCRT(,TTABPTR)                                 0184 00385000
*   SORTPTR=SIOPTR-(2*INCRT);       /* CALC NEXT TO LAST SLOT        */ 00386000
         ALR   @06,@06                                             0185 00387000
         SLR   @14,@06                                             0185 00388000
         ST    @14,SORTPTR(,TTABPTR)                               0185 00389000
*   SAVETAB=ADDR(DVADS1);           /* SAVE TABLE BEGNING ADDRS      */ 00390000
         ST    @10,SAVETAB(,TTABPTR)                               0186 00391000
*   SORTSW=1;                       /* PROCESSING SIO ELEMENTS       */ 00392000
         LA    SORTSW,1                                            0187 00393000
*   RESPECIFY                                                      0188 00394000
*     DEVICE BASED(K);                                             0188 00395000
*AMDPDEV:                                                          0189 00396000
*   DO K=SRTTABPT TO SORTPTR        /* LOOP UNTIL HIT CURRENT        */ 00397000
*         BY INCRT;                 /* SLOT                          */ 00398000
AMDPDEV  L     K,SRTTABPT(,TTABPTR)                                0189 00399000
         B     @DE00189                                            0189 00400000
@DL00189 DS    0H                                                  0190 00401000
*     Y=K+INCRT;                    /* DEVICE1 NOW BELOW DEVICE      */ 00402000
         L     @14,INCRT(,TTABPTR)                                 0190 00403000
         LR    Y,K                                                 0190 00404000
         ALR   Y,@14                                               0190 00405000
*     IF DEVICE1(1:INCRT)           /* TWO VALUES IN TABLE OUT OF    */ 00406000
*         ^>DEVICE(1:INCRT)         /* ORDER                         */ 00407000
*       THEN                        /* THEN                          */ 00408000
         BCTR  @14,0                                               0191 00409000
         EX    @14,@SC00655                                        0191 00410000
         BH    @RF00191                                            0191 00411000
*       DO;                         /* PLACE IN CORRECT ORDER        */ 00412000
*         SAVESLOT(1:INCRT)         /* SAVE VALUE TO BE SWITCHED     */ 00413000
*             =DEVICE(1:INCRT);                                    0193 00414000
         EX    @14,@SM00657                                        0193 00415000
*         DEVICE(1:INCRT)           /* SWITCH SECOND VALUE TO        */ 00416000
*             =DEVICE1(1:INCRT);    /* FIRST SLOT                    */ 00417000
         EX    @14,@SM00659                                        0194 00418000
*         DEVICE1(1:INCRT)          /* SWITCH SAVED FIRST VALUE      */ 00419000
*             =SAVESLOT(1:INCRT);   /* TO SECOND SLOT                */ 00420000
         EX    @14,@SM00661                                        0195 00421000
*         NEWADDR=K;                /* SAVE CURRENT SORT PTR         */ 00422000
         LR    NEWADDR,K                                           0196 00423000
*AMDPDEV1:                                                         0197 00424000
*         Z=NEWADDR-INCRT;          /* ELEM NOW ABOVE ELEM1          */ 00425000
AMDPDEV1 L     @14,INCRT(,TTABPTR)                                 0197 00426000
         LR    Z,NEWADDR                                           0197 00427000
         SLR   Z,@14                                               0197 00428000
*         IF NEWADDR=SAVETAB        /* IF AT TOP OF TABLE,           */ 00429000
*           THEN                    /* THEN                          */ 00430000
         C     NEWADDR,SAVETAB(,TTABPTR)                           0198 00431000
         BE    @RT00198                                            0198 00432000
*           GOTO AMDPDEV2;          /* READY TO SORT NEXT ELEMS      */ 00433000
*         IF ELEM1(1:INCRT)         /* IF ELEMS BELOW JUST-          */ 00434000
*             >ELEM(1:INCRT)        /* SWITCHED ONES ARE IN ORDER    */ 00435000
*           THEN                    /* THEN                          */ 00436000
         LR    @10,@14                                             0200 00437000
         BCTR  @10,0                                               0200 00438000
         EX    @10,@SC00663                                        0200 00439000
         BH    @RT00200                                            0200 00440000
*           GOTO AMDPDEV2;          /* READY TO SORT NEXT ELEMS      */ 00441000
*         SAVESLOT(1:INCRT)         /* SAVE VALUE TO BE SWITCHED     */ 00442000
*             =ELEM(1:INCRT);                                      0202 00443000
         EX    @10,@SM00665                                        0202 00444000
*         ELEM(1:INCRT)             /* SWITCH SECOND VALUE TO        */ 00445000
*             =ELEM1(1:INCRT);      /* FIRST SLOT                    */ 00446000
         EX    @10,@SM00667                                        0203 00447000
*         ELEM1(1:INCRT)            /* SWITCH SAVED FIRST VALUE      */ 00448000
*             =SAVESLOT(1:INCRT);   /* TO SECOND SLOT                */ 00449000
         EX    @10,@SM00669                                        0204 00450000
*         NEWADDR=NEWADDR           /* GO BACK ONE SLOT              */ 00451000
*             -INCRT;                                              0205 00452000
         SLR   NEWADDR,@14                                         0205 00453000
*         GOTO AMDPDEV1;            /* SORT REMAINING ELEMENTS       */ 00454000
         B     AMDPDEV1                                            0206 00455000
*AMDPDEV2:                                                         0207 00456000
*       END;                        /* END OF DO LOOP                */ 00457000
AMDPDEV2 DS    0H                                                  0208 00458000
*   END;                            /* READY TO LOOK AT NEXT TWO   0208 00459000
*                                      ELEMENTS FROM TOP             */ 00460000
@RF00191 AL    K,INCRT(,TTABPTR)                                   0208 00461000
@DE00189 C     K,SORTPTR(,TTABPTR)                                 0208 00462000
         BNH   @DL00189                                            0208 00463000
*AMDPFIN1:                                                         0209 00464000
*   IF SORTSW>1 THEN                /* Q/BEYOND SIO&IO TABL SORTS    */ 00465000
AMDPFIN1 C     SORTSW,@CF00046                                     0209 00466000
         BNH   @RF00209                                            0209 00467000
*     DO;                           /* IF SO, PROCEED AS FOLLOWS     */ 00468000
*       IF SORTSW=2 THEN            /* YES--Q/BEYOND USR TBL SORT    */ 00469000
         C     SORTSW,@CF00078                                     0211 00470000
         BE    @RT00211                                            0211 00471000
*         GOTO AMDPFIN3;            /* NO                            */ 00472000
*       GOTO AMDPSUM;               /* YES--READY FOR SUMMARY MSG    */ 00473000
         B     AMDPSUM                                             0213 00474000
*     END;                          /* SORTSW WAS > 1                */ 00475000
*AMDPFIN2:                                                         0215 00476000
*   IF IOPTR=ADDR(DVADS2)           /* IF NO IO DEVICE ADDRESSES     */ 00477000
*     THEN                          /* IN IO TABLE, THEN LOOK IN     */ 00478000
@RF00209 DS    0H                                                  0215 00479000
AMDPFIN2 L     @14,IOPTR(,TTABPTR)                                 0215 00480000
         LA    @10,DVADS2(,AEDITCBR)                               0215 00481000
         CR    @14,@10                                             0215 00482000
         BE    @RT00215                                            0215 00483000
*     GOTO AMDPFIN3;                /* NEXT TABLE(USR)               */ 00484000
*   SRTTABPT=ADDR(DVADS2);          /* INITIALIZE TO TABL BEGNING    */ 00485000
         ST    @10,SRTTABPT(,TTABPTR)                              0217 00486000
*   INCRT=2;                        /* IO TABLE 2 BYTES WIDE         */ 00487000
         LA    @06,2                                               0218 00488000
         ST    @06,INCRT(,TTABPTR)                                 0218 00489000
*   SORTPTR=IOPTR-(2*INCRT);        /* CALC NEXT TO LAST IO SLOT     */ 00490000
         LR    @04,@06                                             0219 00491000
         ALR   @04,@04                                             0219 00492000
         SLR   @14,@04                                             0219 00493000
         ST    @14,SORTPTR(,TTABPTR)                               0219 00494000
*   SAVETAB=ADDR(DVADS2);           /* SAVE TABLE BEGNING ADDRS      */ 00495000
         ST    @10,SAVETAB(,TTABPTR)                               0220 00496000
*   SORTSW=2;                       /* PROCESSING IO ELEMENTS        */ 00497000
         LR    SORTSW,@06                                          0221 00498000
*   GOTO AMDPDEV;                   /* BEGIN ACTUAL SORT OPERATN     */ 00499000
         B     AMDPDEV                                             0222 00500000
*AMDPFIN3:                                                         0223 00501000
*   IF USRCOUNT=0                   /* IF NO USR EIDS IN USR EID     */ 00502000
*     THEN                          /* RANGE TABLE, THEN             */ 00503000
AMDPFIN3 L     @14,USRCOUNT(,TTABPTR)                              0223 00504000
         LTR   @14,@14                                             0223 00505000
         BZ    @RT00223                                            0223 00506000
*     GOTO AMDPSUM;                 /* CONSTRUCT SUMMARY MESSAGE     */ 00507000
*   SRTTABPT=ADDR(USRTAB);          /* INITIALIZE TO TABL BEGNING    */ 00508000
         LA    @10,USRTAB(,AEDITCBR)                               0225 00509000
         ST    @10,SRTTABPT(,TTABPTR)                              0225 00510000
*   SORTPTR=SRTTABPT                /* CALCULATE ADDRS OF USER       */ 00511000
*       +(USRCOUNT*4);              /* CURRENT SLOT                  */ 00512000
         SLA   @14,2                                               0226 00513000
         ALR   @14,@10                                             0226 00514000
         ST    @14,SORTPTR(,TTABPTR)                               0226 00515000
*   INCRT=4;                        /* USR TABLE 4 BYTES WIDE        */ 00516000
         LA    @06,4                                               0227 00517000
         ST    @06,INCRT(,TTABPTR)                                 0227 00518000
*   SORTPTR=SORTPTR-(2*INCRT);      /* STOP SORTING HERE             */ 00519000
         ALR   @06,@06                                             0228 00520000
         SLR   @14,@06                                             0228 00521000
         ST    @14,SORTPTR(,TTABPTR)                               0228 00522000
*   SAVETAB=ADDR(USRTAB);           /* SAVE TABLE BEGNING ADDRS      */ 00523000
         ST    @10,SAVETAB(,TTABPTR)                               0229 00524000
*   SORTSW=3;                       /* PROCESSING USR ELEMENTS       */ 00525000
         LA    SORTSW,3                                            0230 00526000
*   GOTO AMDPDEV;                   /* BEGIN ACTUAL SORT OPERATN     */ 00527000
*                                                                  0231 00528000
         B     AMDPDEV                                             0231 00529000
*   /*****************************************************************/ 00530000
*   /*                                                               */ 00531000
*   /* THIS SMALL SUBROUTINE SETS UP THE OPERATION OF ALLOWING       */ 00532000
*   /* RESPECIFICATION OF A LINE CONTAINING ONE OR MORE ERRORS       */ 00533000
*   /* INPUTTED FROM THE CONSOLE. THE USER CHOOSES BETWEEN 1)        */ 00534000
*   /* RESPECIFYING THE PREVIOUS LINE, AND 2) REPLYING 'RUNEDIT' TO  */ 00535000
*   /* CAUSE EDIT TO CONTINUE PROCESSING USING ACCEPTABLE VALUES THUS*/ 00536000
*   /* FAR INPUTTED.                                                 */ 00537000
*   /*                                                               */ 00538000
*   /*****************************************************************/ 00539000
*                                                                  0232 00540000
*AMDPRESP:                                                         0232 00541000
*   FLMODE='0'B;                    /* NO LONGER IN FLUSH MODE       */ 00542000
AMDPRESP NI    FLMODE(AEDITCBR),B'01111111'                        0232 00543000
*   GCONTSW='1'B;                   /* CONTINUATION MSG WILL BE    0233 00544000
*                                      ISSUED                        */ 00545000
         OI    GCONTSW,B'00000100'                                 0233 00546000
*   RUNEDIT='1'B;                   /* SET ON RETRY-IN-PROCESS BT    */ 00547000
         OI    RUNEDIT(TTABPTR),B'00001000'                        0234 00548000
*   GEN(OI SWE,RESPC);              /* TURN ON RESPECIFY SW M4467    */ 00549000
         OI SWE,RESPC                                                   00550000
*   GOTO AMDRET3;                   /* RETURN TO AMDPRSCN            */ 00551000
*                                                                  0236 00552000
         B     AMDRET3                                             0236 00553000
*   /*****************************************************************/ 00554000
*   /*                                                               */ 00555000
*   /*                                                               */ 00556000
*   /*****************************************************************/ 00557000
*                                                                  0237 00558000
*AMDPST4:                                                          0237 00559000
*   IF GCONTSW='1'B THEN            /* GET ANOTHER STMT BY           */ 00560000
AMDPST4  TM    GCONTSW,B'00000100'                                 0237 00561000
         BO    @RT00237                                            0237 00562000
*     GOTO AMDRET3;                 /* RETURNING TO CALLER           */ 00563000
*   SCANBIT='0'B;                   /* READY FOR FIRST TIME SW       */ 00564000
         NI    SCANBIT(TTABPTR),B'11011111'                        0239 00565000
*   REG15=4;                        /* SET EDIT-NO-CONTINUE CODE     */ 00566000
         LA    REG15,4                                             0240 00567000
*   IF DDNAME^=BLANK1 THEN          /* EXTERNAL DATA SET             */ 00568000
         CLC   DDNAME(8,AEDITCBR),BLANK1(TTABPTR)                  0241 00569000
         BNE   @RT00241                                            0241 00570000
*     GOTO AMDRET3;                 /* RETURN TO CALLER              */ 00571000
*   SYNMSGA=0;                      /* DUMP DATA SET, SO INPUT STREAM   00572000
*                                      MUST BE FLUSHED               */ 00573000
         SLR   @14,@14                                             0243 00574000
         ST    @14,SYNMSGA                                         0243 00575000
*   CALL AMDPRSYN;                  /* OUTPUT INPUT STREAM DATA    0244 00576000
*                                      FLUSHED MSG                   */ 00577000
         L     @15,ASYNTAX                                         0244 00578000
         BALR  @14,@15                                             0244 00579000
*   REG15=4;                        /* RESET EDIT NO GO CODE         */ 00580000
         LA    REG15,4                                             0245 00581000
*   GOTO AMDRET3;                   /* RETURN TO CALLER              */ 00582000
         B     AMDRET3                                             0246 00583000
*AMDPSUM:                                                          0247 00584000
*   IF GFLSHMOD='1'B THEN           /* IF AMDPRDMP IN FLUSH MODE     */ 00585000
AMDPSUM  TM    GFLSHMOD,B'10000000'                                0247 00586000
         BNO   @RF00247                                            0247 00587000
*     DO;                           /* DO THE FOLLOWING              */ 00588000
*       IF DDNAME^=BLANK1 THEN      /* IF AN EXTERNAL DATA SET,      */ 00589000
         CLC   DDNAME(8,AEDITCBR),BLANK1(TTABPTR)                  0249 00590000
         BNE   @RT00249                                            0249 00591000
*         GOTO AMDPSUMM;            /* CONTINUE EDIT ANYWAY          */ 00592000
*       SCANBIT='0'B;               /* READY FOR FIRST TIME SW       */ 00593000
         NI    SCANBIT(TTABPTR),B'11011111'                        0251 00594000
*       REG15=4;                    /* BUT IF DUMP DATA SET,         */ 00595000
         LA    REG15,4                                             0252 00596000
*       GOTO AMDRET3;               /* STOP EDIT AND RETURN TO       */ 00597000
         B     AMDRET3                                             0253 00598000
*     END;                          /* CALLER                        */ 00599000
*   GOTO AMDPSUMM;                  /* OUTPUT EDIT SUMMARY MSG       */ 00600000
*                                                                  0255 00601000
         B     AMDPSUMM                                            0255 00602000
*   /*****************************************************************/ 00603000
*   /*                                                               */ 00604000
*   /* THE FOLLOWING SUBROUTINE CONSTRUCTS AND OUTPUTS THE EDIT      */ 00605000
*   /* MESSAGE THAT IDENTIFIES THE EDIT OPTIONS CHOSEN BY THE USER.  */ 00606000
*   /* IF DEFAULTS HAVE BEEN ASSIGNED, EXAMINATION OF THE CONTENTS OF*/ 00607000
*   /* THIS MESSAGE WILL ENABLE RECOGNITION OF THESE DEFAULTS.       */ 00608000
*   /*                                                               */ 00609000
*   /*****************************************************************/ 00610000
*                                                                  0256 00611000
*AMDPSUM1:                                                         0256 00612000
*   ENTRY;                          /* ENTRY POINT                   */ 00613000
@EP00256 DS    0H                                                  0257 00614000
*AMDPSUMM:                                                         0257 00615000
*   IF ALLS='1'B|SELS='1'B          /* IF SIO ALL OR SELECTIVE,      */ 00616000
*       |ALLI='1'B|SELI='1'B        /* OR IO ALL OR SELECTIVE,       */ 00617000
*       |ALLV='1'B|SELV='1'B THEN   /* OR SVC ALL OR SELECTIVE,      */ 00618000
AMDPSUMM TM    ALLS(AEDITCBR),B'11000000'                          0257 00619000
         BNZ   @RT00257                                            0257 00620000
         TM    ALLI(AEDITCBR),B'11000000'                          0257 00621000
         BNZ   @RT00257                                            0257 00622000
         TM    ALLV(AEDITCBR),B'11000000'                          0257 00623000
         BNZ   @RT00257                                            0257 00624000
*     GOTO AMDPSUMN;                /* CONSTRUCT SUMMARY MESSAGE     */ 00625000
*   IF ALLU='1'B|SELU='1'B          /* IF USR ALL OR SELECTIVE,      */ 00626000
*       |ALLP='1'B|SELP='1'B        /* OR PI ALL OR SELECTIVE,       */ 00627000
*       |EXT='1'B|DSP='1'B          /* OR EXT OR DSP,                */ 00628000
*       |SYS='1'B|RR='1'B           /* SYS OR RR               Y02014*/ 00629000
*       |RNIO='1'B|SRM='1'B THEN    /* RNIO OR SRM             Y02014*/ 00630000
         TM    ALLU(AEDITCBR),B'11000000'                          0259 00631000
         BNZ   @RT00259                                            0259 00632000
         TM    ALLP(AEDITCBR),B'11000000'                          0259 00633000
         BNZ   @RT00259                                            0259 00634000
         TM    EXT(AEDITCBR),B'11101110'                           0259 00635000
         BNZ   @RT00259                                            0259 00636000
*     GOTO AMDPSUMN;                /* CONSTRUCT SUMMARY MESSAGE     */ 00637000
*AMDSYSDF:                                                         0261 00638000
*   SYS='1'B;                       /* TURN ON SYSTEM ALL FLAG       */ 00639000
AMDSYSDF DS    0H                                                  0262 00640000
*   SYSM='1'B;                      /* AND SYSM ALL FLAG             */ 00641000
         OI    SYS(AEDITCBR),B'00110000'                           0262 00642000
*   ALLS='1'B;                      /* SYSTEM ALL FLAGS--SIO         */ 00643000
         OI    ALLS(AEDITCBR),B'10000000'                          0263 00644000
*   ALLI='1'B;                      /* IO                            */ 00645000
         OI    ALLI(AEDITCBR),B'10000000'                          0264 00646000
*   ALLV='1'B;                      /* SVC                           */ 00647000
         OI    ALLV(AEDITCBR),B'10000000'                          0265 00648000
*   ALLP='1'B;                      /* PI                            */ 00649000
         OI    ALLP(AEDITCBR),B'10000000'                          0266 00650000
*   EXT='1'B;                       /* EXT                           */ 00651000
*   DSP='1'B;                       /* DSP                           */ 00652000
*   RNIO='1'B;                      /* RNIO                    Y02014*/ 00653000
*   SRM='1'B;                       /* SRM                     Y02014*/ 00654000
*   RR='1'B;                        /* RR                      Y02014*/ 00655000
         OI    EXT(AEDITCBR),B'11001110'                           0271 00656000
*   IF DDNAME=BLANK1 THEN           /* IF DUMP DATA SET        Y02014*/ 00657000
         CLC   DDNAME(8,AEDITCBR),BLANK1(TTABPTR)                  0272 00658000
         BNE   @RF00272                                            0272 00659000
*     ALLU='1'B;                    /* SET ON USR=ALL IND      Y02014*/ 00660000
         OI    ALLU(AEDITCBR),B'10000000'                          0273 00661000
*AMDPSUMN:                                                         0274 00662000
*   IF DDNAME=BLANK1 THEN           /* IF DUMP DATA SET        Y02014*/ 00663000
@RF00272 DS    0H                                                  0274 00664000
AMDPSUMN CLC   DDNAME(8,AEDITCBR),BLANK1(TTABPTR)                  0274 00665000
         BNE   @RF00274                                            0274 00666000
*     DO;                                                          0275 00667000
*       STOPTIME=BLANK1;            /* BLANK STOP TIME         Y02014*/ 00668000
         MVC   STOPTIME(12,AEDITCBR),BLANK1(TTABPTR)               0276 00669000
*       STARTIME=BLANK1;            /* BLANK START TIME        Y02014*/ 00670000
         MVC   STARTIME(12,AEDITCBR),BLANK1(TTABPTR)               0277 00671000
*       GEN(OI    SWC,SEGRD);       /* INDICATE READ FOR EDIT BIT    */ 00672000
         OI    SWC,SEGRD                                                00673000
*       GEN(NI SWC,255-EDITSW);     /* NO ADJUST NEEDED        Y02014*/ 00674000
         NI SWC,255-EDITSW                                              00675000
*     END;                                                         0280 00676000
*   ELSE                                                           0281 00677000
*     GEN(BRREAD ADJUST);           /* FREE SPACE              Y02014*/ 00678000
         B     @RC00274                                            0281 00679000
@RF00274 DS    0H                                                  0281 00680000
         BRREAD ADJUST                                                  00681000
*   IF USEREXIT=BLANK1 THEN         /* NO USER EXIT            Y02014*/ 00682000
@RC00274 CLC   USEREXIT(8,AEDITCBR),BLANK1(TTABPTR)                0282 00683000
         BNE   @RF00282                                            0282 00684000
*     EOF='0'B;                     /* NO EOF EXIT             Y02014*/ 00685000
         NI    EOF(AEDITCBR),B'11111110'                           0283 00686000
*AMDPSUN1:                                                         0284 00687000
*   SYNMSGA=ADDR(AD11);             /* ADDRS OF ADDRS OF MESSAGE     */ 00688000
@RF00282 DS    0H                                                  0284 00689000
AMDPSUN1 L     @14,@CA00319                                        0284 00690000
         LA    @14,AD11-AMDPRS00(,@14)                             0284 00691000
         ST    @14,SYNMSGA                                         0284 00692000
*   SUMSGBUF=ERRBUF;                /* MOVE MSG 11 INTO BUFFER       */ 00693000
         L     @14,MSGADDR(,@14)                                   0285 00694000
         MVC   SUMSGBUF(80),ERRBUF(@14)                            0285 00695000
*   ADSUM=ADDR(SUMSGBUF);           /* HOLDS ADDRS OF SUM MSG BUF    */ 00696000
         LA    @14,SUMSGBUF                                        0286 00697000
         ST    @14,ADSUM                                           0286 00698000
*   SYNMSGA=ADDR(ADSUM);            /* ADDRS OF ADDRS OF SUM MSG   0287 00699000
*                                      SIMULATED WTO LIST            */ 00700000
         LA    @14,ADSUM                                           0287 00701000
         ST    @14,SYNMSGA                                         0287 00702000
*   SUMVAL=4+34;                    /* INITIALIZE MSG PTR--4 BYTES +    00703000
*                                      LENGTH OF MSG 11              */ 00704000
         LA    SUMVAL,38                                           0288 00705000
*   RTDSCDES=SUMSGBUF(SUMVAL        /* SAVE ROUTER AND DESCRIPTOR    */ 00706000
*       :SUMVAL+3);                 /* CODES                         */ 00707000
         LA    @14,SUMSGBUF-1(SUMVAL)                              0289 00708000
         MVC   RTDSCDES(4),0(@14)                                  0289 00709000
*   SUMSGID=SUMSGBUF(5              /* SAVE MESSAGE ID               */ 00710000
*       :12);                                                      0290 00711000
         MVC   SUMSGID(8),SUMSGBUF+4                               0290 00712000
*   PATHSW=0;                       /* NO KEYWORDS YET PROCESSED     */ 00713000
         SLR   @14,@14                                             0291 00714000
         ST    @14,PATHSW                                          0291 00715000
*   IF USEREXIT=BLANK1 THEN         /* NO USER EXIT INFO TO          */ 00716000
         CLC   USEREXIT(8,AEDITCBR),BLANK1(TTABPTR)                0292 00717000
         BE    @RT00292                                            0292 00718000
*     GOTO AMDPSUM2;                /* PRINT OUT                     */ 00719000
*   NOWSW=1;                        /* KW TO BE PROCESSED            */ 00720000
         LA    NOWSW,1                                             0294 00721000
*   SUMSGBUF(SUMVAL                 /* MOVE IN EXIT=                 */ 00722000
*       :SUMVAL+4)=EXITCON;                                        0295 00723000
         LA    @14,SUMSGBUF-1(SUMVAL)                              0295 00724000
         MVC   0(5,@14),EXITCON                                    0295 00725000
*   SUMVAL=SUMVAL+5;                /* UPDATE BUFFER COUNT           */ 00726000
         AL    SUMVAL,@CF00086                                     0296 00727000
*   VAL=8;                          /* LENGTH OF EXIT NAME           */ 00728000
         MVC   VAL(4),@CF00033                                     0297 00729000
*   GOTO AMDPFIT;                   /* Q/WILL VALUE OVERFLOW LINE    */ 00730000
         B     AMDPFIT                                             0298 00731000
*AMDPSUM2:                                                         0299 00732000
*   IF DDNAME=BLANK1 THEN           /* NO DDNAME INFO TO PRINT       */ 00733000
AMDPSUM2 CLC   DDNAME(8,AEDITCBR),BLANK1(TTABPTR)                  0299 00734000
         BE    @RT00299                                            0299 00735000
*     GOTO AMDPSUM3;                                               0300 00736000
*   NOWSW=2;                        /* KW TO BE PROCESSED            */ 00737000
         LA    NOWSW,2                                             0301 00738000
*   VAL=15;                         /* KW+VALUE LENGTH               */ 00739000
         MVC   VAL(4),@CF00032                                     0302 00740000
*   GOTO AMDPFIT;                   /* Q/WILL VALUE OVERFLOW LINE    */ 00741000
         B     AMDPFIT                                             0303 00742000
*AMDPSUM3:                                                         0304 00743000
*   IF STARTIME=BLANK1 THEN         /* NO START TIME VALUE INFO      */ 00744000
AMDPSUM3 CLC   STARTIME(12,AEDITCBR),BLANK1(TTABPTR)               0304 00745000
         BE    @RT00304                                            0304 00746000
*     GOTO AMDPSUM4;                /* TO PRINT OUT                  */ 00747000
*   NOWSW=3;                        /* KW TO BE PROCESSED            */ 00748000
         LA    NOWSW,3                                             0306 00749000
*   VAL=20;                         /* KW+VALUE LENGTH               */ 00750000
         MVC   VAL(4),@CF00130                                     0307 00751000
*   GOTO AMDPFIT;                   /* Q/WILL VALUE OVERFLOW LINE    */ 00752000
         B     AMDPFIT                                             0308 00753000
*AMDPSUM4:                                                         0309 00754000
*   IF STOPTIME=BLANK1 THEN         /* NO STOP TIME VALUE INFO       */ 00755000
AMDPSUM4 CLC   STOPTIME(12,AEDITCBR),BLANK1(TTABPTR)               0309 00756000
         BE    @RT00309                                            0309 00757000
*     GOTO AMDPSUM5;                /* TO PRINT OUT                  */ 00758000
*   NOWSW=4;                        /* KW TO BE PROCESSED            */ 00759000
         LA    NOWSW,4                                             0311 00760000
*   VAL=19;                         /* KW+VALUE LENGTH               */ 00761000
         MVC   VAL(4),@CF00538                                     0312 00762000
*   GOTO AMDPFIT;                   /* Q/WILL VALUE OVERFLOW LINE    */ 00763000
         B     AMDPFIT                                             0313 00764000
*AMDPSUM5:                                                         0314 00765000
*   IF JOBNAMES(1)=BLANK1           /* NO JOBNAMES TO PRINT OUT      */ 00766000
*     THEN                          /* SO                            */ 00767000
AMDPSUM5 CLC   JOBNAMES(8,AEDITCBR),BLANK1(TTABPTR)                0314 00768000
         BE    @RT00314                                            0314 00769000
*     GOTO AMDPSUM6;                /* GO CHECK TCB ADDRESSES        */ 00770000
*   NOWSW=5;                        /* KW TO BE PROCESSED            */ 00771000
         LA    NOWSW,5                                             0316 00772000
*   VAL=18;                         /* KW+VALUE LENGTH               */ 00773000
         MVC   VAL(4),@CF00459                                     0317 00774000
*   JOBCT=1;                        /* INDEX INITIALIZED TO 1        */ 00775000
         MVC   JOBCT(4),@CF00046                                   0318 00776000
*   GOTO AMDPFIT;                   /* Q/WILL VALUE OVERFLOW LINE    */ 00777000
         B     AMDPFIT                                             0319 00778000
*AMDPSUM6:                                                         0320 00779000
*   IF ASCBADDR(1)=0                /* NO ASCB ADDRS TO        Y02014*/ 00780000
*     THEN                          /* PRINT SO                Y02014*/ 00781000
AMDPSUM6 L     @14,ASCBADDR(,AEDITCBR)                             0320 00782000
         LTR   @14,@14                                             0320 00783000
         BZ    @RT00320                                            0320 00784000
*     GOTO AMDPSUM7;                /* GO CHECK SIOFLAGS             */ 00785000
*   NOWSW=6;                        /* KW TO BE PROCESSED            */ 00786000
         LA    NOWSW,6                                             0322 00787000
*   VAL=15;                         /* KW+VALUE LENGTH         Y02014*/ 00788000
         MVC   VAL(4),@CF00032                                     0323 00789000
*   ASCBCT=1;                       /* INDEX INITIALIZED TO 1        */ 00790000
         MVC   ASCBCT(4),@CF00046                                  0324 00791000
*   GOTO AMDPFIT;                   /* Q/WILL VALUE OVERFLOW LINE    */ 00792000
         B     AMDPFIT                                             0325 00793000
*AMDPSUM7:                                                         0326 00794000
*   IF ALLS='0'B                    /* NEITHER SIO=ALL               */ 00795000
*       &SELS='0'B THEN             /* NOR SIO=SEL                   */ 00796000
AMDPSUM7 TM    ALLS(AEDITCBR),B'11000000'                          0326 00797000
         BZ    @RT00326                                            0326 00798000
*     GOTO AMDPSUM8;                /* IN EFFECT                     */ 00799000
*   NOWSW=7;                        /* KW TO BE PROCESSED            */ 00800000
@RF00326 LA    NOWSW,7                                             0328 00801000
*   VAL=12;                         /* KW+VALUE LENGTH               */ 00802000
         MVC   VAL(4),@CF00075                                     0329 00803000
*   GOTO AMDPFIT;                   /* Q/WILL VALUE OVERFLOW LINE    */ 00804000
         B     AMDPFIT                                             0330 00805000
*AMDPSUM8:                                                         0331 00806000
*   IF ALLI='0'B                    /* NEITHER IO=ALL                */ 00807000
*       &SELI='0'B THEN             /* NOR IO=SEL                    */ 00808000
AMDPSUM8 TM    ALLI(AEDITCBR),B'11000000'                          0331 00809000
         BZ    @RT00331                                            0331 00810000
*     GOTO AMDPSUM9;                /* IN EFFECT                     */ 00811000
*   NOWSW=8;                        /* KW TO BE PROCESSED            */ 00812000
@RF00331 LA    NOWSW,8                                             0333 00813000
*   VAL=12;                         /* KW+VALUE LENGTH               */ 00814000
         MVC   VAL(4),@CF00075                                     0334 00815000
*   GOTO AMDPFIT;                   /* Q/WILL VALUE OVERFLOW LINE    */ 00816000
         B     AMDPFIT                                             0335 00817000
*AMDPSUM9:                                                         0336 00818000
*   IF ALLV='0'B                    /* NEITHER SVC=ALL               */ 00819000
*       &SELV='0'B THEN             /* NOR SVC=SEL                   */ 00820000
AMDPSUM9 TM    ALLV(AEDITCBR),B'11000000'                          0336 00821000
         BZ    @RT00336                                            0336 00822000
*     GOTO AMDPSUMA;                /* IN EFFECT                     */ 00823000
*   NOWSW=9;                        /* KW TO BE PROCESSED            */ 00824000
@RF00336 LA    @14,9                                               0338 00825000
         LR    NOWSW,@14                                           0338 00826000
*   VAL=9;                          /* KW+VALUE LENGTH               */ 00827000
         ST    @14,VAL                                             0339 00828000
*   GOTO AMDPFIT;                   /* Q/WILL VALUE OVERFLOW LINE    */ 00829000
         B     AMDPFIT                                             0340 00830000
*AMDPSUMA:                                                         0341 00831000
*   IF ALLP='0'B                    /* NEITHER PI=ALL                */ 00832000
*       &SELP='0'B THEN             /* NOR PI=SEL                    */ 00833000
AMDPSUMA TM    ALLP(AEDITCBR),B'11000000'                          0341 00834000
         BZ    @RT00341                                            0341 00835000
*     GOTO AMDPSUMB;                /* IN EFFECT                     */ 00836000
*   NOWSW=10;                       /* KW TO BE PROCESSED            */ 00837000
@RF00341 LA    NOWSW,10                                            0343 00838000
*   VAL=8;                          /* KW+VALUE LENGTH               */ 00839000
         MVC   VAL(4),@CF00033                                     0344 00840000
*   GOTO AMDPFIT;                   /* Q/WILL VALUE OVERFLOW LINE    */ 00841000
         B     AMDPFIT                                             0345 00842000
*AMDPSUMB:                                                         0346 00843000
*   IF ALLU='0'B                    /* NEITHER USR=ALL               */ 00844000
*       &SELU='0'B THEN             /* NOR USR=SEL                   */ 00845000
AMDPSUMB TM    ALLU(AEDITCBR),B'11000000'                          0346 00846000
         BZ    @RT00346                                            0346 00847000
*     GOTO AMDPSUMC;                /* IN EFFECT                     */ 00848000
*   NOWSW=11;                       /* KW TO BE PROCESSED            */ 00849000
@RF00346 LA    NOWSW,11                                            0348 00850000
*   VAL=9;                          /* KW+VALUE LENGTH               */ 00851000
         MVC   VAL(4),@CF00167                                     0349 00852000
*   GOTO AMDPFIT;                   /* Q/WILL VALUE OVERFLOW LINE    */ 00853000
         B     AMDPFIT                                             0350 00854000
*AMDPSUMC:                                                         0351 00855000
*   IF EXT='0'B THEN                /* NO EXT INDICATION TO BE       */ 00856000
AMDPSUMC TM    EXT(AEDITCBR),B'10000000'                           0351 00857000
         BZ    @RT00351                                            0351 00858000
*     GOTO AMDPSUMF;                /* PRINTED OUT             Y02014*/ 00859000
*   NOWSW=12;                       /* KW TO BE PROCESSED            */ 00860000
         LA    NOWSW,12                                            0353 00861000
*   VAL=3;                          /* KW+VALUE LENGTH               */ 00862000
         MVC   VAL(4),@CF00169                                     0354 00863000
*   GOTO AMDPFIT;                   /* Q/WILL VALUE OVERFLOW LINE    */ 00864000
         B     AMDPFIT                                             0355 00865000
*AMDPSUMF:                                                         0356 00866000
*   IF RNIO='0'B THEN               /* NO RNIO IND TO BE       Y02014*/ 00867000
AMDPSUMF TM    RNIO(AEDITCBR),B'00001000'                          0356 00868000
         BZ    @RT00356                                            0356 00869000
*     GOTO AMDPSUMG;                /* PRINTED OUT             Y02014*/ 00870000
*   NOWSW=15;                       /* KEYWD                   Y02014*/ 00871000
         LA    NOWSW,15                                            0358 00872000
*   VAL=4;                          /* KW+VALUE LENGTH         Y02014*/ 00873000
         MVC   VAL(4),@CF00099                                     0359 00874000
*   GOTO AMDPFIT;                   /* OVERFLOW LINE           Y02014*/ 00875000
         B     AMDPFIT                                             0360 00876000
*AMDPSUMG:                                                         0361 00877000
*   IF SRM='0'B THEN                /* NO SRM IND TO BE        Y02014*/ 00878000
AMDPSUMG TM    SRM(AEDITCBR),B'00000100'                           0361 00879000
         BZ    @RT00361                                            0361 00880000
*     GOTO AMDPSUMH;                /* PRINTED OUT             Y02014*/ 00881000
*   NOWSW=16;                       /* KEYWORD                 Y02014*/ 00882000
         LA    NOWSW,16                                            0363 00883000
*   VAL=3;                          /* KW+VALUE LENGTH         Y02014*/ 00884000
         MVC   VAL(4),@CF00169                                     0364 00885000
*   GOTO AMDPFIT;                   /* OVERFLOW LINE           Y02014*/ 00886000
         B     AMDPFIT                                             0365 00887000
*AMDPSUMH:                                                         0366 00888000
*   IF RR='0'B THEN                 /* NO RR IND TO BE         Y02014*/ 00889000
AMDPSUMH TM    RR(AEDITCBR),B'00000010'                            0366 00890000
         BZ    @RT00366                                            0366 00891000
*     GOTO AMDPSUMI;                /* PRINTED OUT             Y02014*/ 00892000
*   NOWSW=17;                       /* KEYWORD                 Y02014*/ 00893000
         LA    NOWSW,17                                            0368 00894000
*   VAL=2;                          /* KW+VALUE LENGTH         Y02014*/ 00895000
         MVC   VAL(4),@CF00078                                     0369 00896000
*   GOTO AMDPFIT;                   /* OVERFLOW LINE           Y02014*/ 00897000
         B     AMDPFIT                                             0370 00898000
*AMDPSUMI:                                                         0371 00899000
*   IF EOF='0'B THEN                /* NO EOF IND TO BE        Y02014*/ 00900000
AMDPSUMI TM    EOF(AEDITCBR),B'00000001'                           0371 00901000
         BZ    @RT00371                                            0371 00902000
*     GOTO AMDPSUMD;                /* PRINTED OUT             Y02014*/ 00903000
*   NOWSW=18;                       /* KEYWORD                 Y02014*/ 00904000
         LA    NOWSW,18                                            0373 00905000
*   VAL=8;                          /* KW+VALUE LENGTH         Y02014*/ 00906000
         MVC   VAL(4),@CF00033                                     0374 00907000
*   GOTO AMDPFIT;                   /* OVERFLOW LINE           Y02014*/ 00908000
         B     AMDPFIT                                             0375 00909000
*AMDPSUMD:                                                         0376 00910000
*   IF DSP='0'B THEN                /* NO DSP INDICATION TO BE       */ 00911000
AMDPSUMD TM    DSP(AEDITCBR),B'01000000'                           0376 00912000
         BZ    @RT00376                                            0376 00913000
*     GOTO AMDPSUME;                /* PRINTED OUT                   */ 00914000
*   NOWSW=13;                       /* KW TO BE PROCESSED            */ 00915000
         LA    NOWSW,13                                            0378 00916000
*   VAL=3;                          /* KW+VALUE LENGTH               */ 00917000
         MVC   VAL(4),@CF00169                                     0379 00918000
*   GOTO AMDPFIT;                   /* Q/WILL VALUE OVERFLOW LINE    */ 00919000
         B     AMDPFIT                                             0380 00920000
*AMDPSUME:                                                         0381 00921000
*   IF PATHSW=0 THEN                /* IF NO PORTION OF LINE LEFT    */ 00922000
AMDPSUME L     @14,PATHSW                                          0381 00923000
         LTR   @14,@14                                             0381 00924000
         BZ    @RT00381                                            0381 00925000
*     GOTO AMDPNOWE;                /* TO WRITE OUT, RETURN          */ 00926000
*   NOWSW=14;                       /* PROCESSING TO BE DONE         */ 00927000
         LA    NOWSW,14                                            0383 00928000
*   GOTO AMDPLNMG;                  /* WRITE OUT LINE PORTION        */ 00929000
*                                                                  0384 00930000
         B     AMDPLNMG                                            0384 00931000
*   /*****************************************************************/ 00932000
*   /*                                                               */ 00933000
*   /* THIS SUBROUTINE DETERMINES 1) WHEN BLANKS SHOULD BE SUP-      */ 00934000
*   /* PRESSED AT THE END OF A VALUE- 2) WHEN A COMMA IS NEEDED      */ 00935000
*   /* FOLLOWING A KEYWORD OR VALUE- 2) WHEN A RIGHT PARENTHE- SIS IS*/ 00936000
*   /* NEEDED TO COMPLETE A LINE- 3) AND TO WHICH PROCESSING         */ 00937000
*   /* SUBROUTINE TO BRANCH. OUTPUTTING OF LINES OF SUMMARY MESSAGE  */ 00938000
*   /* IS ACCOMPLISHED HERE.                                         */ 00939000
*   /*                                                               */ 00940000
*   /*****************************************************************/ 00941000
*                                                                  0385 00942000
*AMDPFIT:                                                          0385 00943000
*   IF NOWSW=1 THEN                 /* IF PROCESSING EXIT NAME,      */ 00944000
AMDPFIT  C     NOWSW,@CF00046                                      0385 00945000
         BNE   @RF00385                                            0385 00946000
*     DO;                           /* THEN DO THE FOLLOWING         */ 00947000
*       COMP8=USEREXIT;             /* MOVE EXIT NM INTO COMPAREA    */ 00948000
         MVC   COMP8(8,TTABPTR),USEREXIT(AEDITCBR)                 0387 00949000
*       GOTO BLNKLAB;               /* CALCULATE # BLANKS IN VAL     */ 00950000
         B     BLNKLAB                                             0388 00951000
*     END;                                                         0389 00952000
*   IF NOWSW=2 THEN                 /* IF PROCESSING DDNAME, THEN    */ 00953000
@RF00385 C     NOWSW,@CF00078                                      0390 00954000
         BNE   @RF00390                                            0390 00955000
*     DO;                           /* DO THE FOLLOWING              */ 00956000
*       COMP8=DDNAME;               /* MOVE DDNAME INTO COMPAREA     */ 00957000
         MVC   COMP8(8,TTABPTR),DDNAME(AEDITCBR)                   0392 00958000
*       GOTO BLNKLAB;               /* CALCULATE # BLNKS IN VAL      */ 00959000
         B     BLNKLAB                                             0393 00960000
*     END;                                                         0394 00961000
*   IF NOWSW^=5 THEN                /* IF NOT PROCESSING JOBNS,      */ 00962000
@RF00390 C     NOWSW,@CF00086                                      0395 00963000
         BNE   @RT00395                                            0395 00964000
*     GOTO CKPATH;                  /* CONTINUE NORMAL PROCS'ING     */ 00965000
*   COMP8=JOBNAMES(JOBCT);          /* MOVE JOBNAME INTO COMPAREA    */ 00966000
*                                                                  0397 00967000
         L     @14,JOBCT                                           0397 00968000
         SLA   @14,3                                               0397 00969000
         ALR   @14,AEDITCBR                                        0397 00970000
         MVC   COMP8(8,TTABPTR),JOBNAMES-8(@14)                    0397 00971000
*   /*****************************************************************/ 00972000
*   /*                                                               */ 00973000
*   /* CALCULATE NUMBER OF BLANKS IN SLOT AND ADJUST 'VAL'.          */ 00974000
*   /*                                                               */ 00975000
*   /*****************************************************************/ 00976000
*                                                                  0398 00977000
*BLNKLAB:                                                          0398 00978000
*   DO I=2 TO 8 BY 1;               /* LOOP THROUGH VALUE            */ 00979000
BLNKLAB  LA    @14,2                                               0398 00980000
         ST    @14,I(,TTABPTR)                                     0398 00981000
@DL00398 DS    0H                                                  0399 00982000
*     IF COMP8(I)=' ' THEN          /* IF CHAR SLOT IS BLANK,        */ 00983000
         L     @14,I(,TTABPTR)                                     0399 00984000
         ALR   @14,TTABPTR                                         0399 00985000
         CLI   COMP8-1(@14),C' '                                   0399 00986000
         BE    @RT00399                                            0399 00987000
*       GOTO CALC;                  /* ADJUST VALUE LENGTH           */ 00988000
*   END;                                                           0401 00989000
         LA    @14,1                                               0401 00990000
         AL    @14,I(,TTABPTR)                                     0401 00991000
         ST    @14,I(,TTABPTR)                                     0401 00992000
         C     @14,@CF00033                                        0401 00993000
         BNH   @DL00398                                            0401 00994000
*CALC:                                                             0402 00995000
*   VAL=VAL-(9-I);                  /* ADJUST VALUE LENGTH           */ 00996000
CALC     L     @14,I(,TTABPTR)                                     0402 00997000
         SL    @14,@CF00167                                        0402 00998000
         AL    @14,VAL                                             0402 00999000
         ST    @14,VAL                                             0402 01000000
*CKPATH:                                                           0403 01001000
*   IF PATHSW=0 THEN                /* IF NO PORTION OF LINE LEFT    */ 01002000
CKPATH   L     @14,PATHSW                                          0403 01003000
         LTR   @14,@14                                             0403 01004000
         BNZ   @RF00403                                            0403 01005000
*     GOTO BRNWTAB(NOWSW);          /* TO BE WRITTEN, BRANCH TO    0404 01006000
*                                      APPROPRIATE KEYWORD     SUBRTN*/ 01007000
         LR    @14,NOWSW                                           0404 01008000
         SLA   @14,2                                               0404 01009000
         L     @14,BRNWTAB-4(@14)                                  0404 01010000
         BR    @14                                                 0404 01011000
*   IF SUMVAL+VAL>71 THEN           /* Q/WILL VALUE OVERFLOW LINE    */ 01012000
@RF00403 LR    @14,SUMVAL                                          0405 01013000
         AL    @14,VAL                                             0405 01014000
         C     @14,@CF00576                                        0405 01015000
         BH    @RT00405                                            0405 01016000
*     GOTO AMDPNPRN;                /* YES                           */ 01017000
*   SUMSGBUF(SUMVAL)=',';           /* NO, INSERT COMMA FOLLOWING  0407 01018000
*                                      LAST KEYWORD OR VALUE         */ 01019000
         LA    @14,SUMSGBUF-1(SUMVAL)                              0407 01020000
         MVI   0(@14),C','                                         0407 01021000
*   SUMVAL=SUMVAL+1;                /* ADD ONE FOR COMMA             */ 01022000
         AL    SUMVAL,@CF00046                                     0408 01023000
*   GOTO BRNWTAB(NOWSW);            /* BRANCH TO APPROPRIATE KEYWORD    01024000
*                                      SUBROUTINE                    */ 01025000
         LR    @14,NOWSW                                           0409 01026000
         SLA   @14,2                                               0409 01027000
         L     @14,BRNWTAB-4(@14)                                  0409 01028000
         BR    @14                                                 0409 01029000
*AMDPNPRN:                                                         0410 01030000
*   IF PRNSW='1'B THEN              /* Q/RIGHT PAREN NEEDED          */ 01031000
AMDPNPRN TM    PRNSW(TTABPTR),B'00000100'                          0410 01032000
         BNO   @RF00410                                            0410 01033000
*     DO;                           /* YES                           */ 01034000
*       SUMSGBUF(SUMVAL)            /* INSERT RIGHT PAREN            */ 01035000
*           =')';                                                  0412 01036000
         LA    @14,SUMSGBUF-1(SUMVAL)                              0412 01037000
         MVI   0(@14),C')'                                         0412 01038000
*       SUMVAL=SUMVAL               /* ADD ONE FOR RIGHT PAREN       */ 01039000
*           +1;                                                    0413 01040000
         AL    SUMVAL,@CF00046                                     0413 01041000
*     END;                                                         0414 01042000
*AMDPLNMG:                                                         0415 01043000
*   SUMSGBUF(1:2)                   /* INSERT MSG LNGTH INTO WTO     */ 01044000
*       =SUMVAL-1;                  /* LIST SIMULATION               */ 01045000
@RF00410 DS    0H                                                  0415 01046000
AMDPLNMG LR    @14,SUMVAL                                          0415 01047000
         BCTR  @14,0                                               0415 01048000
         STCM  @14,3,SUMSGBUF                                      0415 01049000
*   SUMSGBUF(SUMVAL:SUMVAL          /* MOVE ROUTER/DESCRIPTOR        */ 01050000
*       +3)=RTDSCDES;               /* CODES IN FOLLOWING MSG        */ 01051000
         LA    @14,SUMSGBUF-1(SUMVAL)                              0416 01052000
         MVC   0(4,@14),RTDSCDES                                   0416 01053000
*   GNOSTDMG='1'B;                  /* PREDEDING SYNTAX MESSAGE NOT     01054000
*                                      TO BE OUTPUTTED               */ 01055000
         OI    GNOSTDMG,B'00010000'                                0417 01056000
*   CALL AMDPRSYN;                  /* OUTPUT SUMMARY LINE           */ 01057000
         L     @15,ASYNTAX                                         0418 01058000
         BALR  @14,@15                                             0418 01059000
*   SUMSGBUF(5:12)                  /* MOVE MSG ID INTO BEGNING      */ 01060000
*       =SUMSGID;                   /* OF MESSAGE                    */ 01061000
         MVC   SUMSGBUF+4(8),SUMSGID                               0419 01062000
*   SUMSGBUF(13)=' ';               /* BEGIN BLANKING BUFR M1738     */ 01063000
         MVI   SUMSGBUF+12,C' '                                    0420 01064000
*   SUMSGBUF(14:SUMVAL)             /* BLANK REST OF BUFR M1738      */ 01065000
*       =SUMSGBUF(14:SUMVAL-1);     /* M1738                         */ 01066000
         LR    @14,SUMVAL                                          0421 01067000
         SL    @14,@CF00378                                        0421 01068000
         MVC   @TS00001(80),SUMSGBUF+13                            0421 01069000
         EX    @14,@SM00678                                        0421 01070000
*   SUMVAL=4+9;                     /* RE-INITIALIZE BUFFER CNT TO 0422 01071000
*                                      BEYOND MESSAGE ID             */ 01072000
         LA    SUMVAL,13                                           0422 01073000
*   PATHSW=0;                       /* NO DATA IN LINE TO OUTPUT     */ 01074000
         SLR   @14,@14                                             0423 01075000
         ST    @14,PATHSW                                          0423 01076000
*   PRNSW='0'B;                     /* TURN OFF PAREN NEEDED SW      */ 01077000
         NI    PRNSW(TTABPTR),B'11111011'                          0424 01078000
*   GOTO BRNWTAB(NOWSW);            /* BRANCH TO APPROPRIATE KEYWORD    01079000
*                                      SUBROUTINE                    */ 01080000
         LR    @14,NOWSW                                           0425 01081000
         SLA   @14,2                                               0425 01082000
         L     @14,BRNWTAB-4(@14)                                  0425 01083000
         BR    @14                                                 0425 01084000
*AMDPNOW1:                                                         0426 01085000
*   PATHSW=1;                       /* EXIT NAME BEING PROCESSED     */ 01086000
AMDPNOW1 MVC   PATHSW(4),@CF00046                                  0426 01087000
*   SUMSGBUF(SUMVAL:SUMVAL          /* MOVE IN 'EXIT='               */ 01088000
*       +VAL-1)=USEREXIT;                                          0427 01089000
         LA    @14,SUMSGBUF-1(SUMVAL)                              0427 01090000
         L     @10,VAL                                             0427 01091000
         LR    @06,@10                                             0427 01092000
         BCTR  @06,0                                               0427 01093000
         EX    @06,@SM00681                                        0427 01094000
*   SUMVAL=SUMVAL+VAL;              /* UPDATE BUFFER COUNT           */ 01095000
         ALR   SUMVAL,@10                                          0428 01096000
*   GOTO AMDPSUM2;                  /* CHECK DDNAME SLOT             */ 01097000
         B     AMDPSUM2                                            0429 01098000
*AMDPNOW2:                                                         0430 01099000
*   PATHSW=2;                       /* DDNAME BEING PROCESSED        */ 01100000
AMDPNOW2 MVC   PATHSW(4),@CF00078                                  0430 01101000
*   SUMSGBUF(SUMVAL:SUMVAL          /* MOVE IN 'DDNAME='             */ 01102000
*       +6)=DDCON;                                                 0431 01103000
         LA    @14,SUMSGBUF-1(SUMVAL)                              0431 01104000
         MVC   0(7,@14),DDCON                                      0431 01105000
*   SUMSGBUF(SUMVAL+7               /* MOVE IN DDNAME                */ 01106000
*       :SUMVAL+VAL-1)=DDNAME;                                     0432 01107000
         LA    @14,SUMSGBUF+6(SUMVAL)                              0432 01108000
         L     @10,VAL                                             0432 01109000
         LR    @06,@10                                             0432 01110000
         SL    @06,@CF00033                                        0432 01111000
         EX    @06,@SM00683                                        0432 01112000
*   SUMVAL=SUMVAL+VAL;              /* UPDATE BUFFER COUNT           */ 01113000
         ALR   SUMVAL,@10                                          0433 01114000
*   GOTO AMDPSUM3;                  /* CHECK START VALUE SLOT        */ 01115000
         B     AMDPSUM3                                            0434 01116000
*AMDPNOW3:                                                         0435 01117000
*   PATHSW=3;                       /* START BEING PROCESSED         */ 01118000
AMDPNOW3 MVC   PATHSW(4),@CF00169                                  0435 01119000
*   WORD=0;                         /* INITIALIZE W A TO 0           */ 01120000
         SLR   @14,@14                                             0436 01121000
         ST    @14,WORD(,TTABPTR)                                  0436 01122000
*   RFY                                                            0437 01123000
*    (REG4,                                                        0437 01124000
*     REG5,                                                        0437 01125000
*     REG6) RSTD;                   /* NEED WORK REGISTERS     Y02014*/ 01126000
*   REG4=ADDR(INTSTART);            /* ADDRESS INT START SLOT        */ 01127000
         LA    REG4,INTSTART(,TTABPTR)                             0438 01128000
*   REG5=ADDR(COMP4);               /* ADDRS CHARACTER WORK AREA     */ 01129000
         LA    REG5,COMP4(,TTABPTR)                                0439 01130000
*   GENERATE;                                                      0440 01131000
*                                       /* MAKE PRINTABLE TIME VALUE */ 01132000
         UNPK  0(4,R5),0(2,R4)          CONVERT DDD TO PRINTABLE FMT    01133000
         MVC   STARTFIL+1(3),1(R5)    MOVE DDD TO OUTPUT                01134000
*   WORD=INTSTART(3);               /* PLACE HH ON WORD BDY          */ 01135000
         SLR   @14,@14                                             0441 01136000
         IC    @14,INTSTART+2(,TTABPTR)                            0441 01137000
         ST    @14,WORD(,TTABPTR)                                  0441 01138000
*   REG6=ADDR(STARTFIL)+5;          /* LOCATION IN OUTPUT            */ 01139000
         LA    REG6,STARTFIL                                       0442 01140000
         AL    REG6,@CF00086                                       0442 01141000
*   CALL AMDPRNT;                   /* HAVE CONVERSION DONE          */ 01142000
         BAL   @14,AMDPRNT                                         0443 01143000
*   WORD=INTSTART(4);               /* PLACE MM ON WORD BDY          */ 01144000
         SLR   @14,@14                                             0444 01145000
         IC    @14,INTSTART+3(,TTABPTR)                            0444 01146000
         ST    @14,WORD(,TTABPTR)                                  0444 01147000
*   REG6=ADDR(STARTFIL)+8;          /* LOCATION IN OUTPUT            */ 01148000
         LA    REG6,STARTFIL                                       0445 01149000
         AL    REG6,@CF00033                                       0445 01150000
*   CALL AMDPRNT;                   /* HAVE CONVERSION DONE          */ 01151000
         BAL   @14,AMDPRNT                                         0446 01152000
*   WORD=INTSTART(5);               /* PLACE SS ON WORD BDY          */ 01153000
         SLR   @14,@14                                             0447 01154000
         IC    @14,INTSTART+4(,TTABPTR)                            0447 01155000
         ST    @14,WORD(,TTABPTR)                                  0447 01156000
*   REG6=ADDR(STARTFIL)+11;         /* LOCATION IN OUTPUT            */ 01157000
         LA    REG6,STARTFIL                                       0448 01158000
         AL    REG6,@CF00034                                       0448 01159000
*   CALL AMDPRNT;                   /* HAVE CONVERSION DONE          */ 01160000
         BAL   @14,AMDPRNT                                         0449 01161000
*   RFY                                                            0450 01162000
*    (REG4,                                                        0450 01163000
*     REG5,                                                        0450 01164000
*     REG6) UNRSTD;                 /* RELEASE WORK REGISTERS        */ 01165000
*   SUMSGBUF(SUMVAL:SUMVAL+         /* MOVE IN 'START='              */ 01166000
*       5)=STARTCON;                                               0451 01167000
         LA    @14,SUMSGBUF-1(SUMVAL)                              0451 01168000
         MVC   0(6,@14),STARTCON                                   0451 01169000
*   SUMSGBUF(SUMVAL+6:SUMVAL        /* MOVE IN START VALUE           */ 01170000
*       +19)=STARTFIL;                                             0452 01171000
         LA    @14,SUMSGBUF+5(SUMVAL)                              0452 01172000
         MVC   0(14,@14),STARTFIL                                  0452 01173000
*   ESDAY=STARTFIL(2:4);            /* SAVE DAY VALUE                */ 01174000
         MVC   ESDAY(3,AEDITCBR),STARTFIL+1                        0453 01175000
*   ESHR=STARTFIL(6:7);             /* SAVE HOURS                    */ 01176000
         MVC   ESHR(2,AEDITCBR),STARTFIL+5                         0454 01177000
*   ESMIN=STARTFIL(9:10);           /* SAVE MINUTES                  */ 01178000
         MVC   ESMIN(2,AEDITCBR),STARTFIL+8                        0455 01179000
*   ESSEC=STARTFIL(12:13);          /* SAVE SECONDS                  */ 01180000
         MVC   ESSEC(2,AEDITCBR),STARTFIL+11                       0456 01181000
*   SUMVAL=SUMVAL+VAL;              /* UPDATE BUFFER COUNT           */ 01182000
         AL    SUMVAL,VAL                                          0457 01183000
*   GOTO AMDPSUM4;                  /* CHECK STOP VALUE SLOT         */ 01184000
         B     AMDPSUM4                                            0458 01185000
*AMDPNOW4:                                                         0459 01186000
*   PATHSW=4;                       /* STOP BEING PROCESSED          */ 01187000
AMDPNOW4 MVC   PATHSW(4),@CF00099                                  0459 01188000
*   WORD=0;                         /* INITIALIZE W A TO 0           */ 01189000
         SLR   @14,@14                                             0460 01190000
         ST    @14,WORD(,TTABPTR)                                  0460 01191000
*   RFY                                                            0461 01192000
*    (REG4,                                                        0461 01193000
*     REG5,                                                        0461 01194000
*     REG6) RSTD;                   /* NEED WORK REGISTERS     Y02014*/ 01195000
*   REG4=ADDR(INTSTOP);             /* ADDRS CHARACTER STOP SLOT     */ 01196000
         LA    REG4,INTSTOP(,TTABPTR)                              0462 01197000
*   REG5=ADDR(COMP4);               /* ADDRS CHARACTER WORK AREA     */ 01198000
         LA    REG5,COMP4(,TTABPTR)                                0463 01199000
*   GENERATE;                                                      0464 01200000
         UNPK  0(4,R5),0(2,R4)          CONVERT DDD TO PRINTABLE FMT    01201000
         MVC   STOPFIL+1(3),1(R5)     MOVE DDD TO OUTPUT                01202000
*   WORD=INTSTOP(3);                /* PLACE HH ON WORD BDY          */ 01203000
         SLR   @14,@14                                             0465 01204000
         IC    @14,INTSTOP+2(,TTABPTR)                             0465 01205000
         ST    @14,WORD(,TTABPTR)                                  0465 01206000
*   REG6=ADDR(STOPFIL)+5;           /* ADDRS OUTPUT AREA             */ 01207000
         LA    REG6,STOPFIL                                        0466 01208000
         AL    REG6,@CF00086                                       0466 01209000
*   CALL AMDPRNT;                   /* HAVE CONVERSION DONE          */ 01210000
         BAL   @14,AMDPRNT                                         0467 01211000
*   WORD=INTSTOP(4);                /* PLACE MM ON WORD BDY          */ 01212000
         SLR   @14,@14                                             0468 01213000
         IC    @14,INTSTOP+3(,TTABPTR)                             0468 01214000
         ST    @14,WORD(,TTABPTR)                                  0468 01215000
*   REG6=ADDR(STOPFIL)+8;           /* ADDRS OUTPUT AREA             */ 01216000
         LA    REG6,STOPFIL                                        0469 01217000
         AL    REG6,@CF00033                                       0469 01218000
*   CALL AMDPRNT;                   /* HAVE CONVERSION DONE          */ 01219000
         BAL   @14,AMDPRNT                                         0470 01220000
*   WORD=INTSTOP(5);                /* PLACE SS ON WORD BDY          */ 01221000
         SLR   @14,@14                                             0471 01222000
         IC    @14,INTSTOP+4(,TTABPTR)                             0471 01223000
         ST    @14,WORD(,TTABPTR)                                  0471 01224000
*   REG6=ADDR(STOPFIL)+11;          /* ADDRS OUTPUT AREA             */ 01225000
         LA    REG6,STOPFIL                                        0472 01226000
         AL    REG6,@CF00034                                       0472 01227000
*   CALL AMDPRNT;                   /* HAVE CONVERSION DONE          */ 01228000
         BAL   @14,AMDPRNT                                         0473 01229000
*   RFY                                                            0474 01230000
*    (REG4,                                                        0474 01231000
*     REG5,                                                        0474 01232000
*     REG6) UNRSTD;                 /* RELEASE WORK REGS       Y02014*/ 01233000
*   SUMSGBUF(SUMVAL:SUMVAL          /* MOVE IN 'STOP='               */ 01234000
*       +4)=STOPCON;                                               0475 01235000
         LA    @14,SUMSGBUF-1(SUMVAL)                              0475 01236000
         MVC   0(5,@14),STOPCON                                    0475 01237000
*   SUMSGBUF(SUMVAL+5:SUMVAL        /* MOVE IN STOP VALUE            */ 01238000
*       +18)=STOPFIL;                                              0476 01239000
         LA    @14,SUMSGBUF+4(SUMVAL)                              0476 01240000
         MVC   0(14,@14),STOPFIL                                   0476 01241000
*   ESPDAY=STOPFIL(2:4);            /* SAVE DAY STOP VALUE           */ 01242000
         MVC   ESPDAY(3,AEDITCBR),STOPFIL+1                        0477 01243000
*   ESPHR=STOPFIL(6:7);             /* SAVE HOUR                     */ 01244000
         MVC   ESPHR(2,AEDITCBR),STOPFIL+5                         0478 01245000
*   ESPMIN=STOPFIL(9:10);           /* SAVE MIN                      */ 01246000
         MVC   ESPMIN(2,AEDITCBR),STOPFIL+8                        0479 01247000
*   ESPSEC=STOPFIL(12:13);          /* SAVE SEC                      */ 01248000
         MVC   ESPSEC(2,AEDITCBR),STOPFIL+11                       0480 01249000
*   SUMVAL=SUMVAL+VAL;              /* UPDATE BUFFER CHAR COUNT      */ 01250000
         AL    SUMVAL,VAL                                          0481 01251000
*   GOTO AMDPSUM5;                  /* CHECK FOR JOBNAMES            */ 01252000
         B     AMDPSUM5                                            0482 01253000
*AMDPNOW5:                                                         0483 01254000
*   IF JOBCT=1 THEN                 /* Q/FIRST TIME THROUGH          */ 01255000
AMDPNOW5 CLC   JOBCT(4),@CF00046                                   0483 01256000
         BE    @RT00483                                            0483 01257000
*     GOTO AMDPNW51;                /* YES                           */ 01258000
*   IF PATHSW=0 THEN                /* Q/LINE JUST OUTPUTTED         */ 01259000
         L     @14,PATHSW                                          0485 01260000
         LTR   @14,@14                                             0485 01261000
         BNZ   @RF00485                                            0485 01262000
*     DO;                           /* IF YES, DO THE FOLLOWING      */ 01263000
*       VAL=VAL+10;                 /* ALLOW FOR JOBN PREFIX         */ 01264000
         LA    @14,10                                              0487 01265000
         AL    @14,VAL                                             0487 01266000
         ST    @14,VAL                                             0487 01267000
*       GOTO AMDPNW51;              /* CONTINUE ON                   */ 01268000
         B     AMDPNW51                                            0488 01269000
*     END;                                                         0489 01270000
*   SUMSGBUF(SUMVAL:SUMVAL          /* INSERT JOBNAME INTO OUTPUT    */ 01271000
*       +VAL-1)=JOBNAMES(JOBCT);                                   0490 01272000
@RF00485 LA    @14,SUMSGBUF-1(SUMVAL)                              0490 01273000
         L     @10,VAL                                             0490 01274000
         BCTR  @10,0                                               0490 01275000
         L     @06,JOBCT                                           0490 01276000
         SLA   @06,3                                               0490 01277000
         ALR   @06,AEDITCBR                                        0490 01278000
         EX    @10,@SM00685                                        0490 01279000
*   GOTO AMDPNW52;                  /* LOOK FOR ADDITIONAL JOBNS     */ 01280000
         B     AMDPNW52                                            0491 01281000
*AMDPNW51:                                                         0492 01282000
*   PATHSW=5;                       /* JOBNAMES BEING PROCESSED      */ 01283000
AMDPNW51 MVC   PATHSW(4),@CF00086                                  0492 01284000
*   SUMSGBUF(SUMVAL:SUMVAL          /* MOVE IN 'JOBNAMES=('          */ 01285000
*       +9)=JOBCON;                                                0493 01286000
         LA    @14,SUMSGBUF-1(SUMVAL)                              0493 01287000
         MVC   0(10,@14),JOBCON                                    0493 01288000
*   SUMSGBUF(SUMVAL+10:SUMVAL       /* MOVE IN JOBNAME               */ 01289000
*       +VAL-1)=JOBNAMES(JOBCT);                                   0494 01290000
         LA    @14,SUMSGBUF+9(SUMVAL)                              0494 01291000
         L     @10,VAL                                             0494 01292000
         SL    @10,@CF00034                                        0494 01293000
         L     @06,JOBCT                                           0494 01294000
         SLA   @06,3                                               0494 01295000
         ALR   @06,AEDITCBR                                        0494 01296000
         EX    @10,@SM00685                                        0494 01297000
*AMDPNW52:                                                         0495 01298000
*   SUMVAL=SUMVAL+VAL;              /* UPDATE BUFFER CHAR COUNT      */ 01299000
AMDPNW52 AL    SUMVAL,VAL                                          0495 01300000
*   JOBCT=JOBCT+1;                  /* UPDATE JOBNAME COUNT          */ 01301000
         LA    @14,1                                               0496 01302000
         AL    @14,JOBCT                                           0496 01303000
         ST    @14,JOBCT                                           0496 01304000
*   IF JOBCT>5 THEN                 /* Q/ALL JOBNAMES OUTPUTTED      */ 01305000
         C     @14,@CF00086                                        0497 01306000
         BH    @RT00497                                            0497 01307000
*     GOTO AMDPNW53;                /* YES                           */ 01308000
*   IF JOBNAMES(JOBCT)=BLANK1       /* IF NO MORE JOBNAMES,          */ 01309000
*     THEN                          /* THEN                          */ 01310000
         SLA   @14,3                                               0499 01311000
         ALR   @14,AEDITCBR                                        0499 01312000
         CLC   JOBNAMES-8(8,@14),BLANK1(TTABPTR)                   0499 01313000
         BE    @RT00499                                            0499 01314000
*     GOTO AMDPNW53;                /* FINISH VALUE INSERTION        */ 01315000
*   PRNSW='1'B;                     /* MORE JOBNS/ WILL NEED ')'     */ 01316000
         OI    PRNSW(TTABPTR),B'00000100'                          0501 01317000
*   VAL=8;                          /* NEED ONLY JOBN, NOT PREFIX    */ 01318000
         MVC   VAL(4),@CF00033                                     0502 01319000
*   GOTO AMDPFIT;                   /* Q/WILL VALUE OVERFLOW LINE    */ 01320000
         B     AMDPFIT                                             0503 01321000
*AMDPNW53:                                                         0504 01322000
*   SUMSGBUF(SUMVAL)=')';           /* INSERT RIGHT PARENTHESIS      */ 01323000
AMDPNW53 LA    @14,SUMSGBUF-1(SUMVAL)                              0504 01324000
         MVI   0(@14),C')'                                         0504 01325000
*   PRNSW='0'B;                     /* PARENS ALREADY INSERTED       */ 01326000
         NI    PRNSW(TTABPTR),B'11111011'                          0505 01327000
*   SUMVAL=SUMVAL+1;                /* UPDATE BUFFER CHAR COUNT      */ 01328000
         AL    SUMVAL,@CF00046                                     0506 01329000
*   GOTO AMDPSUM6;                  /* GO CHECK ASCB ADDRESSES       */ 01330000
         B     AMDPSUM6                                            0507 01331000
*AMDPNOW6:                                                         0508 01332000
*   IF ASCBCT=1 THEN                /* Q/FIRST TIME THRU       Y02014*/ 01333000
AMDPNOW6 CLC   ASCBCT(4),@CF00046                                  0508 01334000
         BE    @RT00508                                            0508 01335000
*     GOTO AMDPNW61;                /* YES                           */ 01336000
*   IF PATHSW=0 THEN                /* Q/LINE JUST OUTPUTTED         */ 01337000
         L     @14,PATHSW                                          0510 01338000
         LTR   @14,@14                                             0510 01339000
         BNZ   @RF00510                                            0510 01340000
*     DO;                           /* IF YES, DO THE FOLLOWING      */ 01341000
*       VAL=VAL+7;                  /* ALLOW FOR ASCB PREFIX   Y02014*/ 01342000
         LA    @14,7                                               0512 01343000
         AL    @14,VAL                                             0512 01344000
         ST    @14,VAL                                             0512 01345000
*       GOTO AMDPNW62;              /* CONTINUE ON                   */ 01346000
         B     AMDPNW62                                            0513 01347000
*     END;                                                         0514 01348000
*   SUMSGBUF(SUMVAL:SUMVAL          /* INSERT ASCB ADDRS FROM WORK   */ 01349000
*       +7)=DBLWORD                 /* AREA INTO SUMMARY MESSAGE     */ 01350000
*       (1:8);                      /* BUFFER                  Y02014*/ 01351000
@RF00510 LA    @14,SUMSGBUF-1(SUMVAL)                              0515 01352000
         MVC   0(8,@14),DBLWORD(TTABPTR)                           0515 01353000
*   GOTO AMDPNW63;                  /* LOOK FOR ADDITIONAL ADDRS     */ 01354000
*                                                                  0516 01355000
         B     AMDPNW63                                            0516 01356000
*   /*****************************************************************/ 01357000
*   /*                                                               */ 01358000
*   /* CONVERT 4-BYTE ADDRESS TO PRINTABLE FORMAT, USING AMDPRDMP    */ 01359000
*   /* SERVICE ROUTINE                                               */ 01360000
*   /*                                                               */ 01361000
*   /*****************************************************************/ 01362000
*                                                                  0517 01363000
*AMDPNW61:                                                         0517 01364000
*   REG1=ADDR(AADS(ASCBCT));        /* PICK UP ADDRS OF ASCB   Y02014*/ 01365000
AMDPNW61 L     @14,ASCBCT                                          0517 01366000
         SLA   @14,2                                               0517 01367000
         LA    REG1,AADS-4(@14,AEDITCBR)                           0517 01368000
*   RFY                                                            0518 01369000
*    (REG4) RSTD;                   /* NEED REGISTER 4         Y02014*/ 01370000
*   REG4=ADDR(DBLWORD);             /* PICK UP ADDRS OF OUTPUT AREA  */ 01371000
         LA    REG4,DBLWORD(,TTABPTR)                              0519 01372000
*   CALL CNVTRTN2;                  /* HAVE ADDRS CONVERTED    Y02014*/ 01373000
         L     @15,AWRDCNVT                                        0520 01374000
         BALR  @14,@15                                             0520 01375000
*   RFY                                                            0521 01376000
*    (REG4) UNRSTD;                 /* FINISHED WITH REG 4     Y02014*/ 01377000
*   IF PRNSW='1'B THEN              /* IF CONVERSION RTN ENTERED     */ 01378000
         TM    PRNSW(TTABPTR),B'00000100'                          0522 01379000
         BO    @RT00522                                            0522 01380000
*     GOTO AMDPFIT;                 /* BETWEEN VALUES, GO TO RTN THAT   01381000
*                                      DETERMINES IF VALUE WILL    0523 01382000
*                                      OVERFLOW CURRENT LINE         */ 01383000
*AMDPNW62:                                                         0524 01384000
*   PATHSW=6;                       /* ASCB ADDR BEING PROCESSED     */ 01385000
AMDPNW62 MVC   PATHSW(4),@CF00110                                  0524 01386000
*   SUMSGBUF(SUMVAL:SUMVAL          /* MOVE IN 'ASCBS=('       Y02014*/ 01387000
*       +6)=ASCBCON;                                               0525 01388000
         LA    @14,SUMSGBUF-1(SUMVAL)                              0525 01389000
         MVC   0(7,@14),ASCBCON                                    0525 01390000
*   SUMSGBUF(SUMVAL+7:SUMVAL        /* INSERT ASCB ADDRS       Y02014*/ 01391000
*       +14)=DBLWORD                /* AREA INTO SUMMARY MESSAGE     */ 01392000
*       (1:8);                      /* BUFFER                  Y02014*/ 01393000
         LA    @14,SUMSGBUF+6(SUMVAL)                              0526 01394000
         MVC   0(8,@14),DBLWORD(TTABPTR)                           0526 01395000
*AMDPNW63:                                                         0527 01396000
*   SUMVAL=SUMVAL+VAL;              /* UPDATE BUFFER CHAR COUNT      */ 01397000
AMDPNW63 AL    SUMVAL,VAL                                          0527 01398000
*   ASCBCT=ASCBCT+1;                /* UPDTE ASCB ADDR CNT     Y02014*/ 01399000
         LA    @14,1                                               0528 01400000
         AL    @14,ASCBCT                                          0528 01401000
         ST    @14,ASCBCT                                          0528 01402000
*   IF ASCBCT>5 THEN                /* Q/ALL ASCB ADDRS OUTPUTTED    */ 01403000
         C     @14,@CF00086                                        0529 01404000
         BH    @RT00529                                            0529 01405000
*     GOTO AMDPNW64;                /* YES                     Y02014*/ 01406000
*   IF ASCBADDR(ASCBCT)=0           /* NO MORE ASCB ADDRS,     Y02014*/ 01407000
*     THEN                          /* THEN                          */ 01408000
         SLA   @14,2                                               0531 01409000
         L     @14,ASCBADDR-4(@14,AEDITCBR)                        0531 01410000
         LTR   @14,@14                                             0531 01411000
         BZ    @RT00531                                            0531 01412000
*     GOTO AMDPNW64;                /* FINISH VALUE INSERTION        */ 01413000
*   PRNSW='1'B;                     /* MORE ADDRS- WILL NEED ')'     */ 01414000
         OI    PRNSW(TTABPTR),B'00000100'                          0533 01415000
*   VAL=8;                          /* NEED ONLY ADDR, NOT PREFIX  0534 01416000
*                                                              Y02014*/ 01417000
         MVC   VAL(4),@CF00033                                     0534 01418000
*   GOTO AMDPNW61;                  /* CONVERT ADDR TO WORK AREA     */ 01419000
         B     AMDPNW61                                            0535 01420000
*AMDPNW64:                                                         0536 01421000
*   SUMSGBUF(SUMVAL)=')';           /* INSERT RIGHT PARENTHESIS      */ 01422000
AMDPNW64 LA    @14,SUMSGBUF-1(SUMVAL)                              0536 01423000
         MVI   0(@14),C')'                                         0536 01424000
*   PRNSW='0'B;                     /* PARENS ALREADY INSERTED       */ 01425000
         NI    PRNSW(TTABPTR),B'11111011'                          0537 01426000
*   SUMVAL=SUMVAL+1;                /* ALLOW FOR RIGHT PAREN         */ 01427000
         AL    SUMVAL,@CF00046                                     0538 01428000
*   GOTO AMDPSUM7;                  /* CHECK SIOFLGS                 */ 01429000
         B     AMDPSUM7                                            0539 01430000
*AMDPNOW7:                                                         0540 01431000
*   PATHSW=7;                       /* SIO BEING PROCESSED           */ 01432000
AMDPNOW7 MVC   PATHSW(4),@CF00035                                  0540 01433000
*   IF NOEQU='1'B THEN              /* Q/SIO-10 EQUIV NOT PERMITD    */ 01434000
         TM    NOEQU(AEDITCBR),B'00010000'                         0541 01435000
         BO    @RT00541                                            0541 01436000
*     GOTO AMDPNW71;                /* YES--NOT PERMITTED            */ 01437000
*   IF EQUIV='1'B THEN              /* IF SIO=I0, THEN               */ 01438000
         TM    EQUIV(AEDITCBR),B'00100000'                         0543 01439000
         BO    @RT00543                                            0543 01440000
*     GOTO AMDPNOW8;                /* GO TO IO PROCESSING RTN       */ 01441000
*AMDPNW71:                                                         0545 01442000
*   IF ALLS='1'B THEN               /* IF SIO=ALL                    */ 01443000
AMDPNW71 TM    ALLS(AEDITCBR),B'10000000'                          0545 01444000
         BNO   @RF00545                                            0545 01445000
*     DO;                           /* DO THE FOLLOWING              */ 01446000
*       SUMSGBUF(SUMVAL:SUMVAL      /* MOVE IN 'SIO=''ALL'''         */ 01447000
*           +8)=SIOCON1;                                           0547 01448000
         LA    @14,SUMSGBUF-1(SUMVAL)                              0547 01449000
         MVC   0(9,@14),SIOCON1                                    0547 01450000
*AMDPNW72:                                                         0548 01451000
*       SUMVAL=SUMVAL+9;            /* UPDATE BUFFER CHAR COUNT HAVE    01452000
*                                      USED FEWER CHARS THAN       0548 01453000
*                                      PREVIOUSLY DEFINED VAL        */ 01454000
AMDPNW72 AL    SUMVAL,@CF00167                                     0548 01455000
*       GOTO AMDPSUM8;              /* CHECK IOFLGS                  */ 01456000
         B     AMDPSUM8                                            0549 01457000
*     END;                          /* SIO=ALL OR SEL INDICATED      */ 01458000
*   SUMSGBUF(SUMVAL:SUMVAL          /* SIO=SEL INDICATED             */ 01459000
*       +8)=SIOCON2;                                               0551 01460000
@RF00545 LA    @14,SUMSGBUF-1(SUMVAL)                              0551 01461000
         MVC   0(9,@14),SIOCON2                                    0551 01462000
*   GOTO AMDPNW72;                  /* UPDATE COUNT & CHK IOFLGS     */ 01463000
         B     AMDPNW72                                            0552 01464000
*AMDPNOW8:                                                         0553 01465000
*   PATHSW=8;                       /* IO BEING PROCESSED            */ 01466000
AMDPNOW8 MVC   PATHSW(4),@CF00033                                  0553 01467000
*   IF NOEQU='1'B THEN              /* Q/SIO-I0 EQUIV NOT PERMITD    */ 01468000
         TM    NOEQU(AEDITCBR),B'00010000'                         0554 01469000
         BO    @RT00554                                            0554 01470000
*     GOTO AMDPNW82;                /* YES--NOT PERMITTED            */ 01471000
*   IF EQUIV='0'B THEN              /* DO NOT HAVE SIO-I0            */ 01472000
         TM    EQUIV(AEDITCBR),B'00100000'                         0556 01473000
         BZ    @RT00556                                            0556 01474000
*     GOTO AMDPNW82;                /* EQUIVALENCE                   */ 01475000
*   IF ALLI='1'B THEN               /* IF IO=SIO=ALL, THEN           */ 01476000
         TM    ALLI(AEDITCBR),B'10000000'                          0558 01477000
         BNO   @RF00558                                            0558 01478000
*     DO;                           /* DO THE FOLLOWING              */ 01479000
*       SUMSGBUF(SUMVAL:SUMVAL      /* MOVE IN 'IO=SIO=''ALL'''      */ 01480000
*           +11)=IOEQU1;                                           0560 01481000
         LA    @14,SUMSGBUF-1(SUMVAL)                              0560 01482000
         MVC   0(12,@14),IOEQU1                                    0560 01483000
*AMDPNW81:                                                         0561 01484000
*       SUMVAL=SUMVAL+VAL;          /* UPDATE BUFFER CHAR COUNT      */ 01485000
AMDPNW81 AL    SUMVAL,VAL                                          0561 01486000
*       GOTO AMDPSUM9;              /* CHECK SVC FLAGS               */ 01487000
         B     AMDPSUM9                                            0562 01488000
*     END;                          /* IO=SIO=ALL OR IO=SIO=SEL      */ 01489000
*   SUMSGBUF(SUMVAL:SUMVAL+         /* IO=SIO=SEL                    */ 01490000
*       11)=IOEQU2;                                                0564 01491000
@RF00558 LA    @14,SUMSGBUF-1(SUMVAL)                              0564 01492000
         MVC   0(12,@14),IOEQU2                                    0564 01493000
*   GOTO AMDPNW81;                  /* UPDATE COUNT & CHK     SVCFLGS*/ 01494000
         B     AMDPNW81                                            0565 01495000
*AMDPNW82:                                                         0566 01496000
*   IF ALLI='1'B THEN               /* IF IO=ALL INDICATED, THEN     */ 01497000
AMDPNW82 TM    ALLI(AEDITCBR),B'10000000'                          0566 01498000
         BNO   @RF00566                                            0566 01499000
*     DO;                           /* DO THE FOLLOWING              */ 01500000
*       SUMSGBUF(SUMVAL:SUMVAL      /* MOVE IN 'IO=''ALL'''          */ 01501000
*           +7)=IOCON1;                                            0568 01502000
         LA    @14,SUMSGBUF-1(SUMVAL)                              0568 01503000
         MVC   0(8,@14),IOCON1                                     0568 01504000
*AMDPNW83:                                                         0569 01505000
*       VAL=8;                      /* ADJUST VAL                    */ 01506000
AMDPNW83 MVC   VAL(4),@CF00033                                     0569 01507000
*       GOTO AMDPNW81;              /* UPDATE COUNT & CHK     SVCFLGS*/ 01508000
         B     AMDPNW81                                            0570 01509000
*     END;                          /* IO=ALL OR IO=SEL              */ 01510000
*   SUMSGBUF(SUMVAL:SUMVAL          /* MOVE IN 'IO=''SEL'''          */ 01511000
*       +7)=IOCON2;                                                0572 01512000
@RF00566 LA    @14,SUMSGBUF-1(SUMVAL)                              0572 01513000
         MVC   0(8,@14),IOCON2                                     0572 01514000
*   GOTO AMDPNW83;                  /* UPDATE COUNT & CHK     SVCFLGS*/ 01515000
         B     AMDPNW83                                            0573 01516000
*AMDPNOW9:                                                         0574 01517000
*   PATHSW=9;                       /* SVC BEING PROCESSED           */ 01518000
AMDPNOW9 MVC   PATHSW(4),@CF00167                                  0574 01519000
*   IF ALLV='1'B THEN               /* SVC=ALL INDICATED             */ 01520000
         TM    ALLV(AEDITCBR),B'10000000'                          0575 01521000
         BO    @RT00575                                            0575 01522000
*     GOTO AMDPNW91;                /* GO TO MOVE IN INDICATOR       */ 01523000
*   SUMSGBUF(SUMVAL:SUMVAL          /* MOVE IN 'SVC=''SEL'''         */ 01524000
*       +8)=SVCCON2;                                               0577 01525000
         LA    @14,SUMSGBUF-1(SUMVAL)                              0577 01526000
         MVC   0(9,@14),SVCCON2                                    0577 01527000
*   GOTO AMDPNW92;                  /* UPDATE COUNT & CHK PIFLGS     */ 01528000
         B     AMDPNW92                                            0578 01529000
*AMDPNW91:                                                         0579 01530000
*   SUMSGBUF(SUMVAL:SUMVAL          /* MOVE IN 'SVC=''ALL'''         */ 01531000
*       +8)=SVCCON1;                                               0579 01532000
AMDPNW91 LA    @14,SUMSGBUF-1(SUMVAL)                              0579 01533000
         MVC   0(9,@14),SVCCON1                                    0579 01534000
*AMDPNW92:                                                         0580 01535000
*   SUMVAL=SUMVAL+VAL;              /* UPDATE BUFFER CHAR COUNT      */ 01536000
AMDPNW92 AL    SUMVAL,VAL                                          0580 01537000
*   GOTO AMDPSUMA;                  /* CHECK PI FLAGS                */ 01538000
         B     AMDPSUMA                                            0581 01539000
*AMDPNOWA:                                                         0582 01540000
*   PATHSW=10;                      /* PI BEING PROCESSED            */ 01541000
AMDPNOWA MVC   PATHSW(4),@CF00385                                  0582 01542000
*   IF ALLP='1'B THEN               /* SVC=ALL INDICATED             */ 01543000
         TM    ALLP(AEDITCBR),B'10000000'                          0583 01544000
         BO    @RT00583                                            0583 01545000
*     GOTO AMDPNWA1;                /* GO TO MOVE IN INDICATOR       */ 01546000
*   SUMSGBUF(SUMVAL:SUMVAL          /* MOVE IN 'PI=''SEL'''          */ 01547000
*       +7)=PICON2;                                                0585 01548000
         LA    @14,SUMSGBUF-1(SUMVAL)                              0585 01549000
         MVC   0(8,@14),PICON2                                     0585 01550000
*   GOTO AMDPNWA2;                  /* UPDATE COUNT & CHK USRFLGS    */ 01551000
         B     AMDPNWA2                                            0586 01552000
*AMDPNWA1:                                                         0587 01553000
*   SUMSGBUF(SUMVAL:SUMVAL          /* MOVE IN 'PI=''ALL'''          */ 01554000
*       +7)=PICON1;                                                0587 01555000
AMDPNWA1 LA    @14,SUMSGBUF-1(SUMVAL)                              0587 01556000
         MVC   0(8,@14),PICON1                                     0587 01557000
*AMDPNWA2:                                                         0588 01558000
*   SUMVAL=SUMVAL+VAL;              /* UPDATE BUFFER CHAR COUNT      */ 01559000
AMDPNWA2 AL    SUMVAL,VAL                                          0588 01560000
*   GOTO AMDPSUMB;                  /* CHECK USR FLAGS               */ 01561000
         B     AMDPSUMB                                            0589 01562000
*AMDPNOWB:                                                         0590 01563000
*   PATHSW=11;                      /* USR BEING PROCESSED           */ 01564000
AMDPNOWB MVC   PATHSW(4),@CF00034                                  0590 01565000
*   IF ALLU='1'B THEN               /* USR=ALL INDICATED             */ 01566000
         TM    ALLU(AEDITCBR),B'10000000'                          0591 01567000
         BO    @RT00591                                            0591 01568000
*     GOTO AMDPNWB1;                /* GO TO MOVE IN INDICATOR       */ 01569000
*   SUMSGBUF(SUMVAL:SUMVAL          /* MOVE IN 'USR=''SEL'''         */ 01570000
*       +8)=ALLCON2;                                               0593 01571000
         LA    @14,SUMSGBUF-1(SUMVAL)                              0593 01572000
         MVC   0(9,@14),ALLCON2                                    0593 01573000
*   GOTO AMDPNWB2;                  /* UPDATE COUNT & CHECK EXT      */ 01574000
         B     AMDPNWB2                                            0594 01575000
*AMDPNWB1:                                                         0595 01576000
*   SUMSGBUF(SUMVAL:SUMVAL          /* MOVE IN 'USR=''ALL'''         */ 01577000
*       +8)=ALLCON1;                                               0595 01578000
AMDPNWB1 LA    @14,SUMSGBUF-1(SUMVAL)                              0595 01579000
         MVC   0(9,@14),ALLCON1                                    0595 01580000
*AMDPNWB2:                                                         0596 01581000
*   SUMVAL=SUMVAL+VAL;              /* UPDATE BUFFER CHAR COUNT      */ 01582000
AMDPNWB2 AL    SUMVAL,VAL                                          0596 01583000
*   GOTO AMDPSUMC;                  /* CHECK FOR EXT IND             */ 01584000
         B     AMDPSUMC                                            0597 01585000
*AMDPNOWC:                                                         0598 01586000
*   PATHSW=12;                      /* EXT BEING PROCESSED           */ 01587000
AMDPNOWC MVC   PATHSW(4),@CF00075                                  0598 01588000
*   SUMSGBUF(SUMVAL:SUMVAL          /* MOVE IN 'EXT'                 */ 01589000
*       +2)=EXTCON;                                                0599 01590000
         LA    @14,SUMSGBUF-1(SUMVAL)                              0599 01591000
         MVC   0(3,@14),EXTCON                                     0599 01592000
*   SUMVAL=SUMVAL+VAL;              /* UPDATE BUFFER CHAR COUNT      */ 01593000
         AL    SUMVAL,VAL                                          0600 01594000
*   GOTO AMDPSUMF;                  /* CHECK FOR RNIO IND      Y02014*/ 01595000
         B     AMDPSUMF                                            0601 01596000
*AMDPNOWF:                                                         0602 01597000
*   PATHSW=15;                      /* RNIO BEING PROCESSED    Y02014*/ 01598000
AMDPNOWF MVC   PATHSW(4),@CF00032                                  0602 01599000
*   SUMSGBUF(SUMVAL:SUMVAL          /* MOVE IN 'RNIO'          Y02014*/ 01600000
*       +3)=RNIOCON;                                               0603 01601000
         LA    @14,SUMSGBUF-1(SUMVAL)                              0603 01602000
         MVC   0(4,@14),RNIOCON                                    0603 01603000
*   SUMVAL=SUMVAL+VAL;              /* UPDTE CHAR COUNT        Y02014*/ 01604000
         AL    SUMVAL,VAL                                          0604 01605000
*   GOTO AMDPSUMG;                  /* CHECK FOR SRM           Y02014*/ 01606000
         B     AMDPSUMG                                            0605 01607000
*AMDPNOWG:                                                         0606 01608000
*   PATHSW=16;                      /* SRM BEING PROCESSED     Y02014*/ 01609000
AMDPNOWG MVC   PATHSW(4),@CF00139                                  0606 01610000
*   SUMSGBUF(SUMVAL:SUMVAL          /* MOVE IN 'SRM'           Y02014*/ 01611000
*       +2)=SRMCON;                                                0607 01612000
         LA    @14,SUMSGBUF-1(SUMVAL)                              0607 01613000
         MVC   0(3,@14),SRMCON                                     0607 01614000
*   SUMVAL=SUMVAL+VAL;              /* UPDTE CHAR COUNT        Y02014*/ 01615000
         AL    SUMVAL,VAL                                          0608 01616000
*   GOTO AMDPSUMH;                  /* CHECK FOR RR            Y02014*/ 01617000
         B     AMDPSUMH                                            0609 01618000
*AMDPNOWH:                                                         0610 01619000
*   PATHSW=17;                      /* RR BEING PROCESSED      Y02014*/ 01620000
AMDPNOWH MVC   PATHSW(4),@CF00561                                  0610 01621000
*   SUMSGBUF(SUMVAL:SUMVAL          /* MOVE IN 'RR'            Y02014*/ 01622000
*       +1)=RRCON;                                                 0611 01623000
         LA    @14,SUMSGBUF-1(SUMVAL)                              0611 01624000
         MVC   0(2,@14),RRCON                                      0611 01625000
*   SUMVAL=SUMVAL+VAL;              /* UPTE CHAR COUNT         Y02014*/ 01626000
         AL    SUMVAL,VAL                                          0612 01627000
*   GOTO AMDPSUMI;                  /* CHECK FOR EOF           Y02014*/ 01628000
         B     AMDPSUMI                                            0613 01629000
*AMDPNOWI:                                                         0614 01630000
*   PATHSW=18;                      /* EOF BEING PROCESSED     Y02014*/ 01631000
AMDPNOWI MVC   PATHSW(4),@CF00459                                  0614 01632000
*   SUMSGBUF(SUMVAL:SUMVAL          /* MOVE IN 'EOF EXIT'      Y02014*/ 01633000
*       +7)=EOFCON;                                                0615 01634000
         LA    @14,SUMSGBUF-1(SUMVAL)                              0615 01635000
         MVC   0(8,@14),EOFCON                                     0615 01636000
*   SUMVAL=SUMVAL+VAL;              /* UPDTE CHAR COUNT        Y02014*/ 01637000
         AL    SUMVAL,VAL                                          0616 01638000
*   GOTO AMDPSUMD;                  /* CHECK FOR DSP           Y02014*/ 01639000
         B     AMDPSUMD                                            0617 01640000
*AMDPNOWD:                                                         0618 01641000
*   PATHSW=13;                      /* EOF BEING PROCESSED           */ 01642000
AMDPNOWD MVC   PATHSW(4),@CF00566                                  0618 01643000
*   SUMSGBUF(SUMVAL:SUMVAL          /* MOVE IN 'DSP'                 */ 01644000
*       +2)=DSPCON;                                                0619 01645000
         LA    @14,SUMSGBUF-1(SUMVAL)                              0619 01646000
         MVC   0(3,@14),DSPCON                                     0619 01647000
*   SUMVAL=SUMVAL+VAL;              /* UPDATE BUFFER CHAR COUNT      */ 01648000
         AL    SUMVAL,VAL                                          0620 01649000
*   GOTO AMDPSUME;                  /* CHK FOR DATA LEFT ON LINE TO     01650000
*                                      BE PRINTED                    */ 01651000
         B     AMDPSUME                                            0621 01652000
*AMDPNOWE:                                                         0622 01653000
*   SCN='0'B;                       /* TURN OFF AMDPRSCN BIT         */ 01654000
AMDPNOWE NI    SCN(AEDITCBR),B'10111111'                           0622 01655000
*   REG15=0;                        /* SET ZERO RETURN CODE          */ 01656000
         SLR   REG15,REG15                                         0623 01657000
*   SCANBIT='0'B;                   /* READY FOR FIRST TIME THRU     */ 01658000
         NI    SCANBIT(TTABPTR),B'11011111'                        0624 01659000
*   GOTO AMDRET3;                   /* RETURN TO CALLER              */ 01660000
*                                                                  0625 01661000
         B     AMDRET3                                             0625 01662000
*   /*****************************************************************/ 01663000
*   /*                                                               */ 01664000
*   /* THE FOLLOWING SUBROUTINE CONVERTS BINARY DATA THAT IS ONE BYTE*/ 01665000
*   /* IN LENGTH TO PRINTABLE DECIMAL. UPON ENTRY, REG 2 CONTAINS THE*/ 01666000
*   /* INPUT DATA, REG 5 ADDRESSES A 4-BYTE CHARACTER DATA AREA, AND */ 01667000
*   /* REG 6 ADDRESSES THE OUTPUT AREA. THIS SUBROUTINE IS USED IN   */ 01668000
*   /* CONVERTING START AND STOP VALUES.                             */ 01669000
*   /*                                                               */ 01670000
*   /*****************************************************************/ 01671000
*                                                                  0626 01672000
*AMDPRNT:                                                          0626 01673000
*   PROC;                                                          0626 01674000
@EL00001 L     @13,4(,@13)                                         0626 01675000
@EF00001 DS    0H                                                  0626 01676000
@ER00001 L     @14,12(,@13)                                        0626 01677000
         LM    @00,@12,20(@13)                                     0626 01678000
         BR    @14                                                 0626 01679000
AMDPRNT  STM   @14,@12,@SA00002                                    0626 01680000
*   RFY                                                            0627 01681000
*    (REG1,                         /* PARM REGISTER           Y02014*/ 01682000
*     REG2,                         /* WORK REGISTER                 */ 01683000
*     TTABPTR,                      /* POINTER TO AMDSCNTB           */ 01684000
*     REG4,                         /* POINTS TO INPUT DATA          */ 01685000
*     REG5,                         /* POINTS TO WORK AREA           */ 01686000
*     REG6,                         /* POINTS TO OUTPUT AREA         */ 01687000
*     REGPT,                        /* POINTER TO AMDPRCOM           */ 01688000
*     AEDITCBR) RSTD;               /* POINTER TO AMDPRTAB     Y02014*/ 01689000
*   REG2=WORD;                      /* REG 2 = INPUT DATA            */ 01690000
         L     REG2,WORD(,TTABPTR)                                 0628 01691000
*   REG4=ADDR(DBLWORD);             /* REG 4 = @ DBLWRD WRK AREA     */ 01692000
         LA    REG4,DBLWORD(,TTABPTR)                              0629 01693000
*   REG5=ADDR(COMP4);               /* REG 5 = @ CHAR WORK AREA      */ 01694000
         LA    REG5,COMP4(,TTABPTR)                                0630 01695000
*   GENERATE;                                                      0631 01696000
         CVD   R2,0(R4)                 CONVERT BINARY VALUE TO DECIMAL 01697000
         UNPK  0(4,R5),6(2,R4)          UNPACK INTO DBLWORD             01698000
         OI    3(R5),X'F0'            REMOVE ZONE                       01699000
         MVC   0(2,R6),2(R5)            MOVE RESULT INTO OUTPUT AREA    01700000
*   RETURN;                         /* RETURN TO CALLER              */ 01701000
@EL00002 DS    0H                                                  0632 01702000
@EF00002 DS    0H                                                  0632 01703000
@ER00002 LM    @14,@12,@SA00002                                    0632 01704000
         BR    @14                                                 0632 01705000
*   END AMDPRNT;                    /* END OF INTERNAL PROCEDURE     */ 01706000
*   END AMDPRSN3                                                   0634 01707000
*                                                                  0634 01708000
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */ 01709000
*/*%INCLUDE SYSLIB  (AMDPRTAB)                                       */ 01710000
*/*%INCLUDE SYSLIB  (AMDSCNTB)                                       */ 01711000
*                                                                  0634 01712000
*       ;                                                          0634 01713000
@DATA    DS    0H                                                       01714000
@SC00655 CLC   DEVICE1(0,Y),DEVICE(K)                                   01715000
@SM00657 MVC   SAVESLOT(0),DEVICE(K)                                    01716000
@SM00659 MVC   DEVICE(0,K),DEVICE1(Y)                                   01717000
@SM00661 MVC   DEVICE1(0,Y),SAVESLOT                                    01718000
@SC00663 CLC   ELEM1(0,NEWADDR),ELEM(Z)                                 01719000
@SM00665 MVC   SAVESLOT(0),ELEM(Z)                                      01720000
@SM00667 MVC   ELEM(0,Z),ELEM1(NEWADDR)                                 01721000
@SM00669 MVC   ELEM1(0,NEWADDR),SAVESLOT                                01722000
@SM00678 MVC   SUMSGBUF+13(0),@TS00001                                  01723000
@SM00681 MVC   0(0,@14),USEREXIT(AEDITCBR)                              01724000
@SM00683 MVC   0(0,@14),DDNAME(AEDITCBR)                                01725000
@SM00685 MVC   0(0,@14),JOBNAMES-8(@06)                                 01726000
         DS    0F                                                       01727000
@SA00001 DS    18F                                                      01728000
@SA00002 DS    15F                                                      01729000
@TF00001 DS    F                                                        01730000
         DS    0F                                                       01731000
@CF00046 DC    F'1'                                                     01732000
@CF00078 DC    F'2'                                                     01733000
@CF00169 DC    F'3'                                                     01734000
@CF00099 DC    F'4'                                                     01735000
@CF00086 DC    F'5'                                                     01736000
@CF00110 DC    F'6'                                                     01737000
@CF00035 DC    F'7'                                                     01738000
@CF00033 DC    F'8'                                                     01739000
@CF00167 DC    F'9'                                                     01740000
@CF00385 DC    F'10'                                                    01741000
@CF00034 DC    F'11'                                                    01742000
@CF00075 DC    F'12'                                                    01743000
@CF00566 DC    F'13'                                                    01744000
@CF00378 DC    F'14'                                                    01745000
@CF00032 DC    F'15'                                                    01746000
@CF00139 DC    F'16'                                                    01747000
@CF00561 DC    F'17'                                                    01748000
@CF00459 DC    F'18'                                                    01749000
@CF00538 DC    F'19'                                                    01750000
@CF00130 DC    F'20'                                                    01751000
@CF00576 DC    F'71'                                                    01752000
@CA00319 DC    A(AMDPRS00)                                              01753000
         DS    0D                                                       01754000
PATHSW   DS    F                                                        01755000
VAL      DS    F                                                        01756000
ADSUM    DS    A                                                        01757000
JOBCT    DS    FL4                                                      01758000
         ORG   JOBCT                                                    01759000
ASCBCT   DS    FL4                                                      01760000
         ORG   JOBCT+4                                                  01761000
LASTPTR  DS    A                                                        01762000
@TS00001 DS    CL80                                                     01763000
SAVESLOT DC    CL4' '                                                   01764000
RTDSCDES DS    BL4                                                      01765000
SUMSGBUF DS    CL80                                                     01766000
REPSLOT  DC    CL8' '                                                   01767000
SELSW    DC    B'00000000'                                              01768000
EXITCON  DC    CL5'EXIT='                                               01769000
DDCON    DC    CL7'DDNAME='                                             01770000
STARTCON DC    CL6'START='                                              01771000
STARTFIL DC    CL14'(   ,  .  .  )'                                     01772000
STOPCON  DC    CL5'STOP='                                               01773000
STOPFIL  DC    CL14'(   ,  .  .  )'                                     01774000
JOBCON   DC    CL10'JOBNAMES=('                                         01775000
ASCBCON  DC    CL7'ASCBS=('                                             01776000
SIOCON1  DC    CL9'SIO=''ALL'''                                         01777000
SIOCON2  DC    CL9'SIO=''SEL'''                                         01778000
IOCON1   DC    CL8'IO=''ALL'''                                          01779000
IOCON2   DC    CL8'IO=''SEL'''                                          01780000
IOEQU1   DC    CL12'IO=SIO=''ALL'''                                     01781000
IOEQU2   DC    CL12'IO=SIO=''SEL'''                                     01782000
SVCCON1  DC    CL9'SVC=''ALL'''                                         01783000
SVCCON2  DC    CL9'SVC=''SEL'''                                         01784000
PICON1   DC    CL8'PI=''ALL'''                                          01785000
PICON2   DC    CL8'PI=''SEL'''                                          01786000
ALLCON1  DC    CL9'USR=''ALL'''                                         01787000
ALLCON2  DC    CL9'USR=''SEL'''                                         01788000
DSPCON   DC    CL3'DSP'                                                 01789000
EXTCON   DC    CL3'EXT'                                                 01790000
RNIOCON  DC    CL4'RNIO'                                                01791000
SRMCON   DC    CL3'SRM'                                                 01792000
RRCON    DC    CL2'RR'                                                  01793000
EOFCON   DC    CL8'EOF EXIT'                                            01794000
SUMSGID  DC    CL8' '                                                   01795000
SCNPTCH  DC    CL256'SCNPTCH'                                           01796000
         DC    CL256' '                                                 01797000
         DC    CL256' '                                                 01798000
         DC    CL232' '                                                 01799000
         DS    CL2                                                      01800000
BRNWTAB  DC    AL4(AMDPNOW1)                                            01801000
         DC    AL4(AMDPNOW2)                                            01802000
         DC    AL4(AMDPNOW3)                                            01803000
         DC    AL4(AMDPNOW4)                                            01804000
         DC    AL4(AMDPNOW5)                                            01805000
         DC    AL4(AMDPNOW6)                                            01806000
         DC    AL4(AMDPNOW7)                                            01807000
         DC    AL4(AMDPNOW8)                                            01808000
         DC    AL4(AMDPNOW9)                                            01809000
         DC    AL4(AMDPNOWA)                                            01810000
         DC    AL4(AMDPNOWB)                                            01811000
         DC    AL4(AMDPNOWC)                                            01812000
         DC    AL4(AMDPNOWD)                                            01813000
         DC    AL4(AMDPNOWE)                                            01814000
         DC    AL4(AMDPNOWF)                                            01815000
         DC    AL4(AMDPNOWG)                                            01816000
         DC    AL4(AMDPNOWH)                                            01817000
         DC    AL4(AMDPNOWI)                                            01818000
AMDPRSN3 CSECT                                                          01819000
ECB1     DC    F'0'                     NEEDED TO SIGNAL REPLY          01820000
AMDPRSN3 CSECT                                                          01821000
@00      EQU   00                      EQUATES FOR REGISTERS 0-15       01822000
@01      EQU   01                                                       01823000
@02      EQU   02                                                       01824000
@03      EQU   03                                                       01825000
@04      EQU   04                                                       01826000
@05      EQU   05                                                       01827000
@06      EQU   06                                                       01828000
@07      EQU   07                                                       01829000
@08      EQU   08                                                       01830000
@09      EQU   09                                                       01831000
@10      EQU   10                                                       01832000
@11      EQU   11                                                       01833000
@12      EQU   12                                                       01834000
@13      EQU   13                                                       01835000
@14      EQU   14                                                       01836000
@15      EQU   15                                                       01837000
K        EQU   @04                                                      01838000
SUMVAL   EQU   @02                                                      01839000
Z        EQU   @06                                                      01840000
Y        EQU   @02                                                      01841000
NEWADDR  EQU   @02                                                      01842000
SORTSW   EQU   @05                                                      01843000
NOWSW    EQU   @05                                                      01844000
AEDITCBR EQU   @09                                                      01845000
TTABPTR  EQU   @03                                                      01846000
REG1     EQU   @01                                                      01847000
REG2     EQU   @02                                                      01848000
REG4     EQU   @04                                                      01849000
REG5     EQU   @05                                                      01850000
REG6     EQU   @06                                                      01851000
REGPT    EQU   @12                                                      01852000
REG15    EQU   @15                                                      01853000
REG7     EQU   @07                                                      01854000
         ENTRY SCNPTCH                                                  01855000
         EXTRN AMDPRS00                                                 01856000
AMDPRTAB EQU   0                                                        01857000
DEBGFLGS EQU   AMDPRTAB+8                                               01858000
PTHFLGS1 EQU   DEBGFLGS                                                 01859000
SCN      EQU   PTHFLGS1                                                 01860000
PTHFLGS2 EQU   DEBGFLGS+1                                               01861000
INRFCFGS EQU   DEBGFLGS+2                                               01862000
FLMODE   EQU   INRFCFGS                                                 01863000
IOFLGS   EQU   DEBGFLGS+3                                               01864000
USEREXIT EQU   AMDPRTAB+24                                              01865000
DDNAME   EQU   AMDPRTAB+32                                              01866000
STARTIME EQU   AMDPRTAB+40                                              01867000
STOPTIME EQU   AMDPRTAB+52                                              01868000
NAMES    EQU   AMDPRTAB+64                                              01869000
JOBNAMES EQU   NAMES                                                    01870000
ADS      EQU   AMDPRTAB+104                                             01871000
AADS     EQU   ADS                                                      01872000
ASCBADDR EQU   AADS                                                     01873000
SIF      EQU   AMDPRTAB+124                                             01874000
SIOFLGS  EQU   SIF                                                      01875000
ALLS     EQU   SIOFLGS                                                  01876000
SELS     EQU   SIOFLGS                                                  01877000
EQUIV    EQU   SIOFLGS                                                  01878000
NOEQU    EQU   SIOFLGS                                                  01879000
DVADS1   EQU   AMDPRTAB+128                                             01880000
IO       EQU   AMDPRTAB+228                                             01881000
IOFLGS2  EQU   IO                                                       01882000
ALLI     EQU   IOFLGS2                                                  01883000
SELI     EQU   IOFLGS2                                                  01884000
DVADS2   EQU   AMDPRTAB+232                                             01885000
VCF      EQU   AMDPRTAB+332                                             01886000
SVCFLGS  EQU   VCF                                                      01887000
ALLV     EQU   SVCFLGS                                                  01888000
SELV     EQU   SVCFLGS                                                  01889000
SVCNUMS  EQU   AMDPRTAB+336                                             01890000
USR      EQU   AMDPRTAB+368                                             01891000
USRFLGS  EQU   USR                                                      01892000
ALLU     EQU   USRFLGS                                                  01893000
SELU     EQU   USRFLGS                                                  01894000
USRTAB   EQU   AMDPRTAB+372                                             01895000
USRNGTAB EQU   USRTAB                                                   01896000
PI       EQU   AMDPRTAB+452                                             01897000
PIFLGS   EQU   PI                                                       01898000
ALLP     EQU   PIFLGS                                                   01899000
SELP     EQU   PIFLGS                                                   01900000
PGMNGEN  EQU   AMDPRTAB+456                                             01901000
PICODES  EQU   PGMNGEN                                                  01902000
PICODEA  EQU   PGMNGEN+2                                                01903000
GENFLAGS EQU   PGMNGEN+3                                                01904000
EXT      EQU   GENFLAGS                                                 01905000
DSP      EQU   GENFLAGS                                                 01906000
SYS      EQU   GENFLAGS                                                 01907000
SYSM     EQU   GENFLAGS                                                 01908000
RNIO     EQU   GENFLAGS                                                 01909000
SRM      EQU   GENFLAGS                                                 01910000
RR       EQU   GENFLAGS                                                 01911000
EOF      EQU   GENFLAGS                                                 01912000
GENFLGS1 EQU   AMDPRTAB+460                                             01913000
ESTARTME EQU   AMDPRTAB+500                                             01914000
ESDAY    EQU   ESTARTME                                                 01915000
ESHR     EQU   ESTARTME+3                                               01916000
ESMIN    EQU   ESTARTME+5                                               01917000
ESSEC    EQU   ESTARTME+7                                               01918000
ESTOPTME EQU   AMDPRTAB+509                                             01919000
ESPDAY   EQU   ESTOPTME                                                 01920000
ESPHR    EQU   ESTOPTME+3                                               01921000
ESPMIN   EQU   ESTOPTME+5                                               01922000
ESPSEC   EQU   ESTOPTME+7                                               01923000
AMDSCNTB EQU   0                                                        01924000
TEMPTAB  EQU   AMDSCNTB                                                 01925000
EXITNAME EQU   TEMPTAB                                                  01926000
DDNM     EQU   TEMPTAB+8                                                01927000
STARTSL  EQU   TEMPTAB+16                                               01928000
STOPSL   EQU   TEMPTAB+28                                               01929000
OVERLTAB EQU   TEMPTAB+40                                               01930000
OVERSL   EQU   OVERLTAB                                                 01931000
SIOTFLGS EQU   TEMPTAB+80                                               01932000
IOTFLGS  EQU   TEMPTAB+81                                               01933000
USRTFLGS EQU   TEMPTAB+82                                               01934000
SVCTFLGS EQU   TEMPTAB+83                                               01935000
PITFLGS  EQU   TEMPTAB+84                                               01936000
SYSTFLGS EQU   TEMPTAB+85                                               01937000
SIOPTR   EQU   TEMPTAB+88                                               01938000
IOPTR    EQU   TEMPTAB+92                                               01939000
JOBNPTR  EQU   TEMPTAB+96                                               01940000
ASCBPTR  EQU   TEMPTAB+100                                              01941000
SIOCRPTR EQU   TEMPTAB+104                                              01942000
IOCRPTR  EQU   TEMPTAB+108                                              01943000
JOBCRPTR EQU   TEMPTAB+112                                              01944000
ASCBCPTR EQU   TEMPTAB+116                                              01945000
USRCOUNT EQU   TEMPTAB+120                                              01946000
USRCRCNT EQU   TEMPTAB+124                                              01947000
SVCSTR   EQU   TEMPTAB+128                                              01948000
PISTR    EQU   TEMPTAB+160                                              01949000
PISTRB   EQU   TEMPTAB+162                                              01950000
SCNBITS  EQU   AMDSCNTB+163                                             01951000
SCANBIT  EQU   SCNBITS                                                  01952000
RUNEDIT  EQU   SCNBITS                                                  01953000
PRNSW    EQU   SCNBITS                                                  01954000
CODETABL EQU   AMDSCNTB+164                                             01955000
WORD     EQU   AMDSCNTB+168                                             01956000
DBLWORD  EQU   AMDSCNTB+176                                             01957000
BLANK1   EQU   AMDSCNTB+316                                             01958000
SCNPTR   EQU   AMDSCNTB+336                                             01959000
ADDRS3   EQU   AMDSCNTB+348                                             01960000
COMP4    EQU   AMDSCNTB+360                                             01961000
COMP8    EQU   AMDSCNTB+364                                             01962000
SAVETAB  EQU   AMDSCNTB+376                                             01963000
SORTPTR  EQU   AMDSCNTB+380                                             01964000
SRTTABPT EQU   AMDSCNTB+384                                             01965000
INCRT    EQU   AMDSCNTB+388                                             01966000
I        EQU   AMDSCNTB+396                                             01967000
INTSTART EQU   AMDSCNTB+404                                             01968000
INTSTOP  EQU   AMDSCNTB+409                                             01969000
AMDPRSYN EQU   0                                                        01970000
MSGADDR  EQU   0                                                        01971000
ERRBUF   EQU   0                                                        01972000
DEVICE   EQU   0                                                        01973000
CNVTRTN2 EQU   0                                                        01974000
DEVICE1  EQU   0                                                        01975000
ELEM     EQU   0                                                        01976000
ELEM1    EQU   0                                                        01977000
JOBCHAR  EQU   0                                                        01978000
REINIT   EQU   0                                                        01979000
DEVCHAR  EQU   0                                                        01980000
CNVTRTN  EQU   0                                                        01981000
SCNCHAR  EQU   0                                                        01982000
VAL1     EQU   0                                                        01983000
AD11     EQU   AMDPRS00+40                                              01984000
GFLSHMOD EQU   SWD                                                      01985000
GNOSTDMG EQU   SWD                                                      01986000
GCONTSW  EQU   SWD                                                      01987000
GRDRSW   EQU   SWA                                                      01988000
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS    01989000
GSETCVTS EQU   SWA                                                      01990000
GPRNTSW  EQU   SWA                                                      01991000
GGOSW    EQU   SWA                                                      01992000
GTSOSW   EQU   SWA                                                      01993000
GJBNMSW  EQU   SWA                                                      01994000
GREAD    EQU   SWA                                                      01995000
GSTORSW  EQU   SWA                                                      01996000
GFRBUFSW EQU   SWD                                                      01997000
GGPRSFND EQU   SWD                                                      01998000
GPREFMTD EQU   SWD                                                      01999000
GNCDUMP  EQU   SWD                                                      02000000
GSWPDCBC EQU   SWD                                                      02001000
AD10     EQU   AMDPRS00+36                                              02002000
AD9      EQU   AMDPRS00+32                                              02003000
AD8      EQU   AMDPRS00+28                                              02004000
AD7      EQU   AMDPRS00+24                                              02005000
AD6      EQU   AMDPRS00+20                                              02006000
AD5      EQU   AMDPRS00+16                                              02007000
AD4      EQU   AMDPRS00+12                                              02008000
AD3      EQU   AMDPRS00+8                                               02009000
AD2      EQU   AMDPRS00+4                                               02010000
AD1      EQU   AMDPRS00                                                 02011000
J        EQU   AMDSCNTB+400                                             02012000
ALLCT    EQU   AMDSCNTB+392                                             02013000
ALLPTR   EQU   SAVETAB                                                  02014000
SVKEY    EQU   AMDSCNTB+372                                             02015000
LNGTH    EQU   AMDSCNTB+356                                             02016000
EOCADDR  EQU   AMDSCNTB+352                                             02017000
ADDRS1   EQU   AMDSCNTB+344                                             02018000
BUFADDR  EQU   AMDSCNTB+340                                             02019000
MASKS    EQU   AMDSCNTB+328                                             02020000
KWTAB2   EQU   AMDSCNTB+228                                             02021000
KWTAB1   EQU   AMDSCNTB+184                                             02022000
@NM00003 EQU   CODETABL+2                                               02023000
PAREN    EQU   CODETABL+2                                               02024000
NOVAL    EQU   CODETABL+2                                               02025000
CEOF     EQU   CODETABL+2                                               02026000
CRR      EQU   CODETABL+2                                               02027000
CSRM     EQU   CODETABL+1                                               02028000
CRNIO    EQU   CODETABL+1                                               02029000
CDSP     EQU   CODETABL+1                                               02030000
CEXT     EQU   CODETABL+1                                               02031000
CSYS     EQU   CODETABL+1                                               02032000
CPI      EQU   CODETABL+1                                               02033000
CSVC     EQU   CODETABL+1                                               02034000
CIO      EQU   CODETABL+1                                               02035000
CSIO     EQU   CODETABL                                                 02036000
CUSR     EQU   CODETABL                                                 02037000
CASCB    EQU   CODETABL                                                 02038000
CJOBN    EQU   CODETABL                                                 02039000
CSTOP    EQU   CODETABL                                                 02040000
CSTART   EQU   CODETABL                                                 02041000
CDDN     EQU   CODETABL                                                 02042000
CXIT     EQU   CODETABL                                                 02043000
RESBITS  EQU   SCNBITS                                                  02044000
EQUIND   EQU   SCNBITS                                                  02045000
MORESW   EQU   SCNBITS                                                  02046000
IORTNSW  EQU   SCNBITS                                                  02047000
@NM00002 EQU   TEMPTAB+86                                               02048000
EOFT     EQU   SYSTFLGS                                                 02049000
RRT      EQU   SYSTFLGS                                                 02050000
SRMT     EQU   SYSTFLGS                                                 02051000
RNIOT    EQU   SYSTFLGS                                                 02052000
SYSMT    EQU   SYSTFLGS                                                 02053000
SYST     EQU   SYSTFLGS                                                 02054000
DSPT     EQU   SYSTFLGS                                                 02055000
EXTT     EQU   SYSTFLGS                                                 02056000
T        EQU   PITFLGS                                                  02057000
SELPT    EQU   PITFLGS                                                  02058000
ALLPT    EQU   PITFLGS                                                  02059000
GT       EQU   SVCTFLGS                                                 02060000
SELVT    EQU   SVCTFLGS                                                 02061000
ALLVT    EQU   SVCTFLGS                                                 02062000
ET       EQU   USRTFLGS                                                 02063000
SELUT    EQU   USRTFLGS                                                 02064000
ALLUT    EQU   USRTFLGS                                                 02065000
BT       EQU   IOTFLGS                                                  02066000
SELIT    EQU   IOTFLGS                                                  02067000
ALLIT    EQU   IOTFLGS                                                  02068000
AT       EQU   SIOTFLGS                                                 02069000
NOEQUT   EQU   SIOTFLGS                                                 02070000
EQUIVT   EQU   SIOTFLGS                                                 02071000
SELST    EQU   SIOTFLGS                                                 02072000
ALLST    EQU   SIOTFLGS                                                 02073000
DYSTP    EQU   STOPSL+10                                                02074000
YRSTP    EQU   STOPSL+8                                                 02075000
TIMERU   EQU   STOPSL                                                   02076000
DY       EQU   STARTSL+10                                               02077000
YR       EQU   STARTSL+8                                                02078000
TIMEU    EQU   STARTSL                                                  02079000
RESERVED EQU   AMDPRTAB+522                                             02080000
CVTTZONE EQU   AMDPRTAB+518                                             02081000
ADTSBUF  EQU   AMDPRTAB+496                                             02082000
OFSTDATA EQU   AMDPRTAB+494                                             02083000
OFSTEID  EQU   AMDPRTAB+492                                             02084000
AFRMAD   EQU   AMDPRTAB+488                                             02085000
REENTWKA EQU   AMDPRTAB+484                                             02086000
PRFMTADD EQU   AMDPRTAB+480                                             02087000
AEIOCT   EQU   AMDPRTAB+476                                             02088000
EXITADDR EQU   AMDPRTAB+472                                             02089000
EXITNM   EQU   AMDPRTAB+464                                             02090000
RECDLL   EQU   AMDPRTAB+461                                             02091000
@NM00001 EQU   GENFLGS1                                                 02092000
FIRSTHSW EQU   GENFLGS1                                                 02093000
TSFOUND  EQU   GENFLGS1                                                 02094000
EOFINPRO EQU   GENFLGS1                                                 02095000
TS       EQU   GENFLGS1                                                 02096000
Q        EQU   PI+1                                                     02097000
P01R     EQU   PIFLGS                                                   02098000
O        EQU   USR+1                                                    02099000
N01R     EQU   USRFLGS                                                  02100000
M        EQU   VCF+1                                                    02101000
L        EQU   SVCFLGS                                                  02102000
IODVADS  EQU   DVADS2                                                   02103000
K01RES   EQU   IO+1                                                     02104000
JJ       EQU   IOFLGS2                                                  02105000
SIODVADS EQU   DVADS1                                                   02106000
II       EQU   SIF+1                                                    02107000
H        EQU   SIOFLGS                                                  02108000
DAY2     EQU   STOPTIME+10                                              02109000
F        EQU   STOPTIME+8                                               02110000
TIME2    EQU   STOPTIME                                                 02111000
DAY      EQU   STARTIME+10                                              02112000
D        EQU   STARTIME+8                                               02113000
TIME     EQU   STARTIME                                                 02114000
GTFWDPTR EQU   AMDPRTAB+20                                              02115000
C        EQU   DEBGFLGS+4                                               02116000
B        EQU   IOFLGS                                                   02117000
GETEOF   EQU   IOFLGS                                                   02118000
DMDFMT   EQU   INRFCFGS                                                 02119000
EDITSTOP EQU   INRFCFGS                                                 02120000
EXTTRC   EQU   INRFCFGS                                                 02121000
RET      EQU   INRFCFGS                                                 02122000
FMT      EQU   INRFCFGS                                                 02123000
SPIE     EQU   INRFCFGS                                                 02124000
TERM     EQU   INRFCFGS                                                 02125000
REMAIN   EQU   PTHFLGS2                                                 02126000
APP      EQU   PTHFLGS2                                                 02127000
REXT     EQU   PTHFLGS1                                                 02128000
FRM      EQU   PTHFLGS1                                                 02129000
FLT      EQU   PTHFLGS1                                                 02130000
HEX      EQU   PTHFLGS1                                                 02131000
CON      EQU   PTHFLGS1                                                 02132000
GET      EQU   PTHFLGS1                                                 02133000
ROOT     EQU   PTHFLGS1                                                 02134000
CURREC   EQU   AMDPRTAB+4                                               02135000
AFMG     EQU   AMDPRTAB                                                 02136000
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS      02137000
@RT00106 EQU   AMDTCB1                                                  02138000
@RT00110 EQU   AMDSIO1                                                  02139000
@RT00114 EQU   AMDIO1                                                   02140000
@RT00118 EQU   AMDUSRBL                                                 02141000
@RT00132 EQU   AMDPST4                                                  02142000
@RT00145 EQU   AMDTCB                                                   02143000
@RT00149 EQU   AMDSIO                                                   02144000
@RT00154 EQU   AMDIO                                                    02145000
@RT00159 EQU   AMDUSRCT                                                 02146000
AMDRET3  EQU   @EL00001                                                 02147000
@RT00181 EQU   AMDPFIN1                                                 02148000
@RT00198 EQU   AMDPDEV2                                                 02149000
@RT00200 EQU   AMDPDEV2                                                 02150000
@RT00211 EQU   AMDPFIN3                                                 02151000
@RT00215 EQU   AMDPFIN3                                                 02152000
@RT00223 EQU   AMDPSUM                                                  02153000
@RT00237 EQU   AMDRET3                                                  02154000
@RT00241 EQU   AMDRET3                                                  02155000
@RT00249 EQU   AMDPSUMM                                                 02156000
@RF00247 EQU   AMDPSUMM                                                 02157000
@RT00257 EQU   AMDPSUMN                                                 02158000
@RT00259 EQU   AMDPSUMN                                                 02159000
@RT00292 EQU   AMDPSUM2                                                 02160000
@RT00299 EQU   AMDPSUM3                                                 02161000
@RT00304 EQU   AMDPSUM4                                                 02162000
@RT00309 EQU   AMDPSUM5                                                 02163000
@RT00314 EQU   AMDPSUM6                                                 02164000
@RT00320 EQU   AMDPSUM7                                                 02165000
@RT00326 EQU   AMDPSUM8                                                 02166000
@RT00331 EQU   AMDPSUM9                                                 02167000
@RT00336 EQU   AMDPSUMA                                                 02168000
@RT00341 EQU   AMDPSUMB                                                 02169000
@RT00346 EQU   AMDPSUMC                                                 02170000
@RT00351 EQU   AMDPSUMF                                                 02171000
@RT00356 EQU   AMDPSUMG                                                 02172000
@RT00361 EQU   AMDPSUMH                                                 02173000
@RT00366 EQU   AMDPSUMI                                                 02174000
@RT00371 EQU   AMDPSUMD                                                 02175000
@RT00376 EQU   AMDPSUME                                                 02176000
@RT00381 EQU   AMDPNOWE                                                 02177000
@RT00395 EQU   CKPATH                                                   02178000
@RT00399 EQU   CALC                                                     02179000
@RT00405 EQU   AMDPNPRN                                                 02180000
@RT00483 EQU   AMDPNW51                                                 02181000
@RT00497 EQU   AMDPNW53                                                 02182000
@RT00499 EQU   AMDPNW53                                                 02183000
@RT00508 EQU   AMDPNW61                                                 02184000
@RT00522 EQU   AMDPFIT                                                  02185000
@RT00529 EQU   AMDPNW64                                                 02186000
@RT00531 EQU   AMDPNW64                                                 02187000
@RT00541 EQU   AMDPNW71                                                 02188000
@RT00543 EQU   AMDPNOW8                                                 02189000
@RT00554 EQU   AMDPNW82                                                 02190000
@RT00556 EQU   AMDPNW82                                                 02191000
@RT00575 EQU   AMDPNW91                                                 02192000
@RT00583 EQU   AMDPNWA1                                                 02193000
@RT00591 EQU   AMDPNWB1                                                 02194000
@RT00175 EQU   AMDRET3                                                  02195000
@ENDDATA EQU   *                                                        02196000
         END   AMDPRSN3,(C'PLS2034',0701,76224)                         02197000
