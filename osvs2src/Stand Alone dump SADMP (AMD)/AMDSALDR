         TITLE 'AMDSALDR, LOADER MAKER PROGRAM FOR AMDSADMP            *00001000
                       '                                                00002000
AMDSALDR CSECT ,                                                   0001 00003000
@PROLOG  STM   @14,@12,12(@13)                                     0001 00004000
         BALR  @11,0                                               0001 00005000
@PSTART  LA    @12,4095(,@11)                                      0001 00006000
         USING @PSTART,@11                                         0001 00007000
         USING @PSTART+4095,@12                                    0001 00008000
         ST    @13,@SA00001+4                                      0001 00009000
         LA    @14,@SA00001                                        0001 00010000
         ST    @14,8(,@13)                                         0001 00011000
         LR    @13,@14                                             0001 00012000
*                                                                  0051 00013000
*/********************************************************************/ 00014000
*/*                                                                  */ 00015000
*/*                 BEGINNING OF AMDSALDR PROCESSING                 */ 00016000
*/*                                                                  */ 00017000
*/********************************************************************/ 00018000
*                                                                  0052 00019000
*   PLISTPTR=PLISTADR;              /* INIT PTR TO PARMLST           */ 00020000
         L     PLISTPTR,PLISTADR(,PARMGR1)                         0052 00021000
         LA    PLISTPTR,0(,PLISTPTR)                               0052 00022000
*   OTBUFADD=0;                     /* ZERO OUTPUT BUF PTR           */ 00023000
         SLR   @10,@10                                             0053 00024000
         ST    @10,OTBUFADD                                        0053 00025000
*   INBUFADD=0;                     /* ZERO INPUT BUF PTR            */ 00026000
*                                                                  0054 00027000
         ST    @10,INBUFADD                                        0054 00028000
*/********************************************************************/ 00029000
*/*                                                                  */ 00030000
*/*            OPEN SYSUT1, SYSUT3, AND SYSPRINT DCB'S               */ 00031000
*/*                                                                  */ 00032000
*/********************************************************************/ 00033000
*                                                                  0055 00034000
*   DCBPTR=ADDR(SYS3DCB);           /* POINT TO SYSUT3 DCB           */ 00035000
         LA    DCBPTR,SYS3DCB                                      0055 00036000
*   DCBBLKSI=OTBUFSIZ/2;            /* INIT SYSUT3 BLKSIZE           */ 00037000
         L     @06,OTBUFSIZ                                        0056 00038000
         SRDA  @06,32                                              0056 00039000
         D     @06,@CF00185                                        0056 00040000
         STH   @07,DCBBLKSI+62(,DCBPTR)                            0056 00041000
*   GENERATE;                       /* OPEN THE DCB'S                */ 00042000
*                                                                  0057 00043000
      OPEN (PRINTDCB,(OUTPUT),SYS1DCB,(INPUT),SYS3DCB,(OUTPUT))         00044000
*/********************************************************************/ 00045000
*/*                                                                  */ 00046000
*/*                CHECK IF SYSPRINT OPENED SUCCESSFULLY             */ 00047000
*/*                                                                  */ 00048000
*/********************************************************************/ 00049000
*                                                                  0058 00050000
*   DCBPTR=ADDR(PRINTDCB);          /* POINT TO SYSPRINT DCB         */ 00051000
         LA    DCBPTR,PRINTDCB                                     0058 00052000
*   IF (DCBOFLGS & '10'X)= 0 THEN      /* TEST OPEN FLAG             */ 00053000
         SLR   @10,@10                                             0059 00054000
         LA    @09,16                                              0059 00055000
         LA    @15,48                                              0059 00056000
         LR    @14,DCBPTR                                          0059 00057000
         AR    @14,@15                                             0059 00058000
         SLR   @00,@00                                             0059 00059000
         IC    @00,DCBOFLGS(,@14)                                  0059 00060000
         NR    @00,@09                                             0059 00061000
         CR    @00,@10                                             0059 00062000
         BE    @RT00059                                            0059 00063000
*     GOTO AMD035I;                 /* NOT OPEN -- WRITE ERR MSG     */ 00064000
*                                                                  0060 00065000
*/********************************************************************/ 00066000
*/*                                                                  */ 00067000
*/*                CHECK IF SYSUT1 OPENED SUCCESSFULLY               */ 00068000
*/*                                                                  */ 00069000
*/********************************************************************/ 00070000
*                                                                  0061 00071000
*   DCBPTR=ADDR(SYS1DCB);           /* POINT TO SYSUT1 DCB           */ 00072000
         LA    DCBPTR,SYS1DCB                                      0061 00073000
*   IF (DCBOFLGS & '10'X)= 0 THEN      /* TEST OPEN FLAG             */ 00074000
         LR    @14,DCBPTR                                          0062 00075000
         AR    @14,@15                                             0062 00076000
         SLR   @00,@00                                             0062 00077000
         IC    @00,DCBOFLGS(,@14)                                  0062 00078000
         NR    @00,@09                                             0062 00079000
         CR    @00,@10                                             0062 00080000
         BE    @RT00062                                            0062 00081000
*     GOTO AMD035I;                 /* NOT OPEN -- WRITE ERR MSG     */ 00082000
*                                                                  0063 00083000
*/********************************************************************/ 00084000
*/*                                                                  */ 00085000
*/*                CHECK IF SYSUT3 OPENED SUCCESSFULLY               */ 00086000
*/*                                                                  */ 00087000
*/********************************************************************/ 00088000
*                                                                  0064 00089000
*   DCBPTR=ADDR(SYS3DCB);           /* POINT TO SYSUT3 DCB           */ 00090000
         LA    DCBPTR,SYS3DCB                                      0064 00091000
*   IF (DCBOFLGS & '10'X) = 0 THEN      /* TEST OPEN FLAG            */ 00092000
         AR    @15,DCBPTR                                          0065 00093000
         MVC   @ZT00003+3(1),DCBOFLGS(@15)                         0065 00094000
         N     @09,@ZT00003                                        0065 00095000
         CR    @09,@10                                             0065 00096000
         BE    @RT00065                                            0065 00097000
*     GOTO AMD035I;                 /* NOT OPEN -- WRITE ERR MSG     */ 00098000
*                                                                  0066 00099000
*/********************************************************************/ 00100000
*/*                                                                  */ 00101000
*/*        PROCESS THE PARM= PARAMETERS FROM THE EXEC STATEMENT      */ 00102000
*/*                                                                  */ 00103000
*/********************************************************************/ 00104000
*                                                                  0067 00105000
*   IF PLISTLNG ^= 15 THEN          /* TEST IF LNG OF PLIST IS 15    */ 00106000
         CLC   PLISTLNG(2,PLISTPTR),@CH00121                       0067 00107000
         BNE   @RT00067                                            0067 00108000
*     GOTO AMD038I;                 /* NOT 15 - WRITE PARM ERR MSG   */ 00109000
*   RESPECIFY (TYPE2PTR,IPL2PTR) RESTRICTED;                       0069 00110000
*                                                                  0069 00111000
*/********************************************************************/ 00112000
*/*             CHECK FOR THE IPL2 PARM BEING FIRST IN               */ 00113000
*/*             THE LIST. THERE SHOULD BE A COMMA AS THE             */ 00114000
*/*             SEVENTH CHARACTER OF THE LIST.                       */ 00115000
*/*             IF A COMMA IS NOT THE SEVENTH CHARACTER              */ 00116000
*/*             THEN THE TYPE2 PARM MUST BE FIRST IN                 */ 00117000
*/*             THE LIST.                                            */ 00118000
*/********************************************************************/ 00119000
*                                                                  0070 00120000
*   IF PARMS(6 + 1) = ',' THEN         /* 7TH CHAR A COMMA?          */ 00121000
         CLI   PARMS+6(PLISTPTR),C','                              0070 00122000
         BNE   @RF00070                                            0070 00123000
*     DO;                           /* YES, DO FOLLOWING             */ 00124000
*       IPL2PTR = PLISTPTR+2;       /* SET IPL2 PTR TO 1ST CHAR OF 0072 00125000
*                                      LST                           */ 00126000
         LA    IPL2PTR,2                                           0072 00127000
         AR    IPL2PTR,PLISTPTR                                    0072 00128000
*       TYPE2PTR= IPL2PTR + 6 + 1;         /* SET TYPE2 PTR TO CHAR     00129000
*                                      AFT ER COMMA                  */ 00130000
         LA    TYPE2PTR,7                                          0073 00131000
         AR    TYPE2PTR,IPL2PTR                                    0073 00132000
*     END;                                                         0074 00133000
*   ELSE                                                           0075 00134000
*     DO;                           /* TYPE2 PARM 1ST IN LST         */ 00135000
         B     @RC00070                                            0075 00136000
@RF00070 DS    0H                                                  0076 00137000
*       TYPE2PTR=PLISTPTR + 2;      /* POINT TO TYPE2 PARM           */ 00138000
         LA    TYPE2PTR,2                                          0076 00139000
         AR    TYPE2PTR,PLISTPTR                                   0076 00140000
*       IPL2PTR= TYPE2PTR + 8 + 1;          /* POINT TO IPL2 PARM    */ 00141000
         LA    IPL2PTR,9                                           0077 00142000
         AR    IPL2PTR,TYPE2PTR                                    0077 00143000
*     END;                                                         0078 00144000
*   LCAFLAGS='00'X;                 /* CLEAR FUNC INDICATORS         */ 00145000
*                                                                  0079 00146000
@RC00070 MVI   LCAFLAGS,X'00'                                      0079 00147000
*   /*****************************************************************/ 00148000
*   /*                                                               */ 00149000
*   /* TEST IF TYPE2=HI WAS SPECIFIED. IF SO CHECK FOR TAPE OR D.A.  */ 00150000
*   /* INITIALIZATION.                                               */ 00151000
*   /*                                                               */ 00152000
*   /*****************************************************************/ 00153000
*                                                                  0080 00154000
*   IF TYPEPARM=TYPE2HI THEN        /* TYPE2=HI ?                    */ 00155000
         CLC   TYPEPARM(8,TYPE2PTR),TYPE2HI                        0080 00156000
         BNE   @RF00080                                            0080 00157000
*     DO;                                                          0081 00158000
*       LCATYPE='1'B;               /* INDICATE TYPE2=HI             */ 00159000
*                                                                  0082 00160000
         OI    LCATYPE,B'01000000'                                 0082 00161000
*   /*****************************************************************/ 00162000
*   /*                                                               */ 00163000
*   /* TEST IPL2 PARM FOR TAPE INITIALIZATION.                       */ 00164000
*   /*                                                               */ 00165000
*   /*****************************************************************/ 00166000
*                                                                  0083 00167000
*       IF IPL2PARM=IPL2T THEN      /* IPL2=T ?                      */ 00168000
         CLC   IPL2PARM(6,IPL2PTR),IPL2T                           0083 00169000
         BNE   @RF00083                                            0083 00170000
*         DO;                                                      0084 00171000
*           LCAIPL='0'B;            /* INDICATE TAPE INIT            */ 00172000
         NI    LCAIPL,B'11011111'                                  0085 00173000
*           GOTO AMDOPEN;           /* GO OPEN SYSUT2                */ 00174000
         B     AMDOPEN                                             0086 00175000
*         END;                                                     0087 00176000
*                                                                  0087 00177000
*   /*****************************************************************/ 00178000
*   /*                                                               */ 00179000
*   /* TEST IPL2 PARM FOR D.A. INITIALIZATION                        */ 00180000
*   /*                                                               */ 00181000
*   /*****************************************************************/ 00182000
*                                                                  0088 00183000
*       IF IPL2PARM=IPL2D THEN      /* IPL2=D SPECIFIED?             */ 00184000
@RF00083 CLC   IPL2PARM(6,IPL2PTR),IPL2D                           0088 00185000
         BNE   @RF00088                                            0088 00186000
*         LCAIPL='1'B;              /* YES, INDICATE D.A. INIT       */ 00187000
*                                                                  0089 00188000
         OI    LCAIPL,B'00100000'                                  0089 00189000
*   /*****************************************************************/ 00190000
*   /*                                                               */ 00191000
*   /* IPL2 PARM DOES NOT INDICATE TAPE OR D.A.-- WRITE PARM ERR MSG */ 00192000
*   /*                                                               */ 00193000
*   /*****************************************************************/ 00194000
*                                                                  0090 00195000
*       ELSE                                                       0090 00196000
*         GOTO AMD038I;             /* GO WRITE PARM ERR MSG         */ 00197000
*                                                                  0090 00198000
*   /*****************************************************************/ 00199000
*   /*                                                               */ 00200000
*   /* IF IPL2=D IS SPECIFIED OPEN SYSUT4 D.S.                       */ 00201000
*   /*                                                               */ 00202000
*   /*****************************************************************/ 00203000
*                                                                  0091 00204000
*                                                                  0091 00205000
*OPENSYS4:                                                         0091 00206000
*       GENERATE;                                                  0091 00207000
*                                                                  0091 00208000
OPENSYS4 DS    0H                                                  0091 00209000
          OPEN (SYS4DCB,(OUTPUT))                                       00210000
*   /*****************************************************************/ 00211000
*   /*                                                               */ 00212000
*   /* CHECK IF SYSUT4 WAS OPENED SUCCESSFULLY                       */ 00213000
*   /*                                                               */ 00214000
*   /*****************************************************************/ 00215000
*                                                                  0092 00216000
*       DCBPTR=ADDR(SYS4DCB);       /* POINT TO SYSUT4 DCB           */ 00217000
         LA    DCBPTR,SYS4DCB                                      0092 00218000
*       IF (DCBOFLGS & '10'X)= 0 THEN      /* OPEN FLG ON?           */ 00219000
         LA    @10,16                                              0093 00220000
         MVC   @ZT00003+3(1),DCBOFLGS+48(DCBPTR)                   0093 00221000
         N     @10,@ZT00003                                        0093 00222000
         LTR   @10,@10                                             0093 00223000
         BZ    @RT00093                                            0093 00224000
*         GOTO AMD035I;             /* NO, GOTO WRITE OPEN ERR MSG   */ 00225000
*                                                                  0094 00226000
*   /*****************************************************************/ 00227000
*   /*                                                               */ 00228000
*   /* OPEN SYSUT2 DCB                                               */ 00229000
*   /*                                                               */ 00230000
*   /*****************************************************************/ 00231000
*                                                                  0095 00232000
*                                                                  0095 00233000
*AMDOPEN:                                                          0095 00234000
*       GENERATE;                                                  0095 00235000
*                                                                  0095 00236000
AMDOPEN  DS    0H                                                  0095 00237000
          OPEN (SYS2DCB,(INPUT))                                        00238000
*   /*****************************************************************/ 00239000
*   /*                                                               */ 00240000
*   /* TEST IF SYSUT2 DCB OPENED SUCCESSFULLY                        */ 00241000
*   /*                                                               */ 00242000
*   /*****************************************************************/ 00243000
*                                                                  0096 00244000
*       DCBPTR=ADDR(SYS2DCB);       /* POINT TO SYSUT2 DCB           */ 00245000
         LA    DCBPTR,SYS2DCB                                      0096 00246000
*       IF (DCBOFLGS & '10'X) = 0 THEN      /* OPEN FLG ON?          */ 00247000
         LA    @10,16                                              0097 00248000
         MVC   @ZT00003+3(1),DCBOFLGS+48(DCBPTR)                   0097 00249000
         N     @10,@ZT00003                                        0097 00250000
         LTR   @10,@10                                             0097 00251000
         BZ    @RT00097                                            0097 00252000
*         GOTO AMD035I;             /* NO, WRITE OPEN ERR MSG        */ 00253000
*     END;                                                         0099 00254000
*                                                                  0099 00255000
*   /*****************************************************************/ 00256000
*   /*                                                               */ 00257000
*   /* IF NOT TYPE2=HI CHECK FOR TYPE2=LO. IF LO WAS SPECIFIED THEN  */ 00258000
*   /* IPL2 MUST BE D.A.                                             */ 00259000
*   /*                                                               */ 00260000
*   /*****************************************************************/ 00261000
*                                                                  0100 00262000
*   ELSE                                                           0100 00263000
*     DO;                                                          0100 00264000
*                                                                  0100 00265000
         B     @RC00080                                            0100 00266000
@RF00080 DS    0H                                                  0101 00267000
*   /*****************************************************************/ 00268000
*   /*                                                               */ 00269000
*   /* IF NOT TYPE2=LO THEN THE TYPE2 PARM IS IN ERR                 */ 00270000
*   /*                                                               */ 00271000
*   /*****************************************************************/ 00272000
*                                                                  0101 00273000
*       IF TYPEPARM ^= TYPE2LO THEN /* TYPE2=LO?                     */ 00274000
         CLC   TYPEPARM(8,TYPE2PTR),TYPE2LO                        0101 00275000
         BNE   @RT00101                                            0101 00276000
*         GOTO AMD038I;             /* NO, GO WRITE PARM ERR MSG     */ 00277000
*       LCATYPE='0'B;               /* YES, INDICATE TYPE2=LO IN LCA */ 00278000
*                                                                  0103 00279000
         NI    LCATYPE,B'10111111'                                 0103 00280000
*   /*****************************************************************/ 00281000
*   /*                                                               */ 00282000
*   /* CHECK IF IPL2=D WAS SPECIFIED WITH TYPE2=LO                   */ 00283000
*   /*                                                               */ 00284000
*   /*****************************************************************/ 00285000
*                                                                  0104 00286000
*       IF IPL2PARM=IPL2D THEN                                     0104 00287000
         CLC   IPL2PARM(6,IPL2PTR),IPL2D                           0104 00288000
         BNE   @RF00104                                            0104 00289000
*         DO;                                                      0105 00290000
*           LCAIPL='1'B;            /* INDICATE IPL2=D               */ 00291000
         OI    LCAIPL,B'00100000'                                  0106 00292000
*           GOTO OPENSYS4;          /* OPEN SYSUT4             Y02006*/ 00293000
         B     OPENSYS4                                            0107 00294000
*         END;                                                     0108 00295000
*       ELSE                        /* NOT IPL2=D, WRITE PARM ERR MSG*/ 00296000
*         GOTO AMD038I;                                            0109 00297000
*     END;                                                         0110 00298000
*   RESPECIFY (TYPE2PTR,IPL2PTR) UNRESTRICTED;                     0111 00299000
@RC00080 DS    0H                                                  0112 00300000
*   RESPECIFY (WKREG) RESTRICTED;                                  0112 00301000
*                                                                  0112 00302000
*   /*****************************************************************/ 00303000
*   /*                                                               */ 00304000
*   /* GET CORE FOR THE OUTPUT BUFFER                                */ 00305000
*   /*                                                               */ 00306000
*   /*****************************************************************/ 00307000
*                                                                  0113 00308000
*   WKREG=OTBUFSIZ;                 /* GET SIZE OF OUT BUF           */ 00309000
         L     WKREG,OTBUFSIZ                                      0113 00310000
*   GENERATE SETS(OTBUFADD);                                       0114 00311000
*                                                                  0114 00312000
    GETMAIN EC,LV=(WKREG),A=OTBUFADD                                    00313000
*   /*****************************************************************/ 00314000
*   /*                                                               */ 00315000
*   /* TEST IF GETMAIN WAS SUCCESSFUL. IF NOT WRITE MSG AMD042I      */ 00316000
*   /*                                                               */ 00317000
*   /*****************************************************************/ 00318000
*                                                                  0115 00319000
*   RESPECIFY REG15 RESTRICTED;                                    0115 00320000
*   IF REG15^= 0 THEN                                              0116 00321000
         LTR   REG15,REG15                                         0116 00322000
         BNZ   @RT00116                                            0116 00323000
*     GO TO AMD042I;                                               0117 00324000
*   RESPECIFY REG15 UNRESTRICTED;                                  0118 00325000
*                                                                  0118 00326000
*   /*****************************************************************/ 00327000
*   /*                                                               */ 00328000
*   /* SET THE INPUT BUFFER SIZE EQUAL TO SYSUT2 DCB BLKSIZE         */ 00329000
*   /*                                                               */ 00330000
*   /*****************************************************************/ 00331000
*                                                                  0119 00332000
*   DCBPTR=ADDR(SYS2DCB);           /* POINT TO SYSUT2 DCB           */ 00333000
         LA    DCBPTR,SYS2DCB                                      0119 00334000
*   INBUFSIZ= DCBBLKSI;             /* SET INPUT BUF SIZE            */ 00335000
*                                                                  0120 00336000
         LA    @10,62                                              0120 00337000
         LR    @09,DCBPTR                                          0120 00338000
         AR    @09,@10                                             0120 00339000
         LH    @09,DCBBLKSI(,@09)                                  0120 00340000
         STH   @09,INBUFSIZ                                        0120 00341000
*   /*****************************************************************/ 00342000
*   /*                                                               */ 00343000
*   /* COMPARE THE SYSUT2 AND SYSUT1 BLKSIZES AND USE THE LARGER FOR */ 00344000
*   /* THE SIZE OF THE INPUT BUFFER                                  */ 00345000
*   /*                                                               */ 00346000
*   /*****************************************************************/ 00347000
*                                                                  0121 00348000
*   DCBPTR=ADDR(SYS1DCB);           /* POINT TO SYSUT1 DCB           */ 00349000
         LA    DCBPTR,SYS1DCB                                      0121 00350000
*   IF INBUFSIZ < DCBBLKSI THEN     /* TEST IF SYSUT1 BLKSIZE LARGER    00351000
*                                      THAN S YSUT2'S                */ 00352000
         AR    @10,DCBPTR                                          0122 00353000
         LH    @10,DCBBLKSI(,@10)                                  0122 00354000
         CR    @09,@10                                             0122 00355000
         BNL   @RF00122                                            0122 00356000
*     INBUFSIZ=DCBBLKSI;            /* YES, SET INPUT BUF SIZE TO  0123 00357000
*                                      SYSUT1 BLKSI ZE               */ 00358000
*                                                                  0123 00359000
         STH   @10,INBUFSIZ                                        0123 00360000
*   /*****************************************************************/ 00361000
*   /*                                                               */ 00362000
*   /* GET CORE FOR THE INPUT BUFFER                                 */ 00363000
*   /*                                                               */ 00364000
*   /*****************************************************************/ 00365000
*                                                                  0124 00366000
*   WKREG=INBUFSIZ * 2;             /* GET INPUT BUF SIZE      Y02006*/ 00367000
@RF00122 LH    WKREG,INBUFSIZ                                      0124 00368000
         AR    WKREG,WKREG                                         0124 00369000
*   GENERATE SETS(INBUFADD);                                       0125 00370000
*                                                                  0125 00371000
    GETMAIN EC,LV=(WKREG),A=INBUFADD                                    00372000
*   /*****************************************************************/ 00373000
*   /*                                                               */ 00374000
*   /* TEST IF GETMAIN FOR INPUT BUFFER WAS SUCCESSFUL. IF NOT WRITE */ 00375000
*   /* MESSAGE AMD042I                                               */ 00376000
*   /*                                                               */ 00377000
*   /*****************************************************************/ 00378000
*                                                                  0126 00379000
*   RESPECIFY REG15 RESTRICTED;                                    0126 00380000
*   IF REG15 ^= 0 THEN              /* RETURN CODE = ZERO?           */ 00381000
         LTR   REG15,REG15                                         0127 00382000
         BNZ   @RT00127                                            0127 00383000
*     GOTO AMD042I;                 /* NO, GO WRITE ERR MSG          */ 00384000
*   RESPECIFY REG15 UNRESTRICTED;                                  0129 00385000
*   INBUFAD2 = INBUFADD + WKREG/2;  /* ADDRESS OF 2ND INPUT BUFFER 0130 00386000
*                                                              Y02006*/ 00387000
*                                                                  0130 00388000
         L     @10,INBUFADD                                        0130 00389000
         LR    @09,WKREG                                           0130 00390000
         SRL   @09,1                                               0130 00391000
         AR    @09,@10                                             0130 00392000
         ST    @09,INBUFAD2                                        0130 00393000
*   /*****************************************************************/ 00394000
*   /*                                                               */ 00395000
*   /* INITIALIZE LOADER CONTROL AREA FOR PROCESSING AMDSAIP1 (IPL1  */ 00396000
*   /* RECORD)                                                       */ 00397000
*   /*                                                               */ 00398000
*   /*****************************************************************/ 00399000
*                                                                  0131 00400000
*   RESPECIFY (WKREG) UNRESTRICTED;                                0131 00401000
*   LCAINDCB = ADDR(SYS1DCB);       /* SET INPUT DCB ADDR            */ 00402000
         LA    @00,SYS1DCB                                         0132 00403000
         ST    @00,LCAINDCB                                        0132 00404000
*   LCAOTDCB = ADDR(SYS3DCB);       /* SET OUTPUT DCB ADDR           */ 00405000
         LA    @00,SYS3DCB                                         0133 00406000
         ST    @00,LCAOTDCB                                        0133 00407000
*   LCAOTPUT = OTBUFADD;            /* SET POINTER TO OUTPUT BUFFER  */ 00408000
         L     @00,OTBUFADD                                        0134 00409000
         ST    @00,LCAOTPUT                                        0134 00410000
*   LCAINPUT = INBUFADD;            /* SET POINTER TO INPUT BUFFER   */ 00411000
         ST    @10,LCAINPUT                                        0135 00412000
*   LCAOTEOR = LCAOTPUT;            /* SET END OF RCD PTR TO BEGIN OF   00413000
*                                      OUTPUT BUF                    */ 00414000
         ST    @00,LCAOTEOR                                        0136 00415000
*   LCAFUNC = '0'B;                 /* INDICATE OBJ CSECT            */ 00416000
         NI    LCAFUNC,B'01111111'                                 0137 00417000
*   LCAMODUL = BLANKS;              /* CLEAR MODULE NAME FIELD       */ 00418000
         MVC   LCAMODUL(8),BLANKS                                  0138 00419000
*   LCACSECT = AMDSAIP1;            /* INDICATE CSECT TO BE        0139 00420000
*                                      PROCCESSED                    */ 00421000
*                                                                  0139 00422000
         MVC   LCACSECT(8),AMDSAIP1                                0139 00423000
*   /*****************************************************************/ 00424000
*   /*                                                               */ 00425000
*   /* CALL TEXT SUBROUTINE----PROCESS AMDSAIP1 TEXT                 */ 00426000
*   /*                                                               */ 00427000
*   /*****************************************************************/ 00428000
*                                                                  0140 00429000
*   CALL AMDSATXT;                                                 0140 00430000
*                                                                  0140 00431000
         BAL   @14,AMDSATXT                                        0140 00432000
*   /*****************************************************************/ 00433000
*   /*                                                               */ 00434000
*   /* TEST IF TEXT PROCESSED SUCCESSFULLY. IF NOT USE ERR CODE AS   */ 00435000
*   /* INDEX INTO BRNCH TABLE AND GOTO WRITE ERROR MSG               */ 00436000
*   /*                                                               */ 00437000
*   /*****************************************************************/ 00438000
*                                                                  0141 00439000
*   RESPECIFY REG15 RESTRICTED;                                    0141 00440000
*   IF REG15 ^= 0 THEN              /* TEST FOR ERROR RETURN CODE    */ 00441000
         LTR   REG15,REG15                                         0142 00442000
         BZ    @RF00142                                            0142 00443000
*     GOTO AMDMSGX(REG15);          /* YES, GO WRITE ERROR MSG       */ 00444000
         LR    @14,REG15                                           0143 00445000
         SLA   @14,2                                               0143 00446000
         L     @14,AMDMSGX-4(@14)                                  0143 00447000
         BR    @14                                                 0143 00448000
*   RESPECIFY REG15 UNRESTRICTED;                                  0144 00449000
*                                                                  0144 00450000
@RF00142 DS    0H                                                  0145 00451000
*   /*****************************************************************/ 00452000
*   /*                                                               */ 00453000
*   /* THE IPL1 RECORD MUST BE EXACTLY 24 BYTES LONG                 */ 00454000
*   /*                                                               */ 00455000
*   /*****************************************************************/ 00456000
*                                                                  0145 00457000
*   LCAOTEOR = LCAOTPUT + 24;       /* SET IPL1 LNG TO EXACTLY 24  0145 00458000
*                                      BYTES                         */ 00459000
*                                                                  0145 00460000
         LA    @10,24                                              0145 00461000
         A     @10,LCAOTPUT                                        0145 00462000
         ST    @10,LCAOTEOR                                        0145 00463000
*   /*****************************************************************/ 00464000
*   /*                                                               */ 00465000
*   /* TEST FOR TAPE INITIALIZATION. IF SO, SET OUTPUT BUFFER PTR TO */ 00466000
*   /* END OF IPL1 TXTAND GO GET DMP PGM TXT                         */ 00467000
*   /*                                                               */ 00468000
*   /*****************************************************************/ 00469000
*                                                                  0146 00470000
*   IF LCAIPL= '0'B THEN            /* TEST FOR TAPE IPL             */ 00471000
         TM    LCAIPL,B'00100000'                                  0146 00472000
         BNZ   @RF00146                                            0146 00473000
*     DO;                                                          0147 00474000
*       LCAOTPUT = LCAOTEOR;        /* YES, SET OUTPUT BUF ADDR TO 0148 00475000
*                                      END OF IPL 1 TXT              */ 00476000
         ST    @10,LCAOTPUT                                        0148 00477000
*       GOTO AMDHSR;                /* GO PROC HI SPED DMP TXT       */ 00478000
         B     AMDHSR                                              0149 00479000
*     END;                                                         0150 00480000
*                                                                  0150 00481000
*   /*****************************************************************/ 00482000
*   /*                                                               */ 00483000
*   /* IF D.A. INITIALIZATION WRITE THE IPL1 RECORD TO SYSUT3 D.S.   */ 00484000
*   /*                                                               */ 00485000
*   /*****************************************************************/ 00486000
*                                                                  0151 00487000
*   ELSE                                                           0151 00488000
*     DO;                                                          0151 00489000
@RF00146 DS    0H                                                  0152 00490000
*       CALL AMDWRITE;              /* GOTO THE WRITE SUBROUTINE     */ 00491000
*                                                                  0152 00492000
         BAL   @14,AMDWRITE                                        0152 00493000
*   /*****************************************************************/ 00494000
*   /*                                                               */ 00495000
*   /* INITIALIZE LOADER CONTROL AREA FOR PROCESSING AMDSAIP2 (IPL2  */ 00496000
*   /* RECORD) TEXT                                                  */ 00497000
*   /*                                                               */ 00498000
*   /*****************************************************************/ 00499000
*                                                                  0153 00500000
*                                                                  0153 00501000
*AMDIPL2:                                                          0153 00502000
*       LCACSECT = AMDSAIP2;        /* INDICATE CSECT TO BE PROCESSED*/ 00503000
AMDIPL2  MVC   LCACSECT(8),AMDSAIP2                                0153 00504000
*       LCAMODUL = BLANKS;          /* CLEAR MODULE NAME FIELD       */ 00505000
         MVC   LCAMODUL(8),BLANKS                                  0154 00506000
*       LCAFUNC = '0'B;             /* INDICATE OBJ CSECT TO BE    0155 00507000
*                                      PROCESSED                     */ 00508000
*                                                                  0155 00509000
         NI    LCAFUNC,B'01111111'                                 0155 00510000
*   /*****************************************************************/ 00511000
*   /*                                                               */ 00512000
*   /* CALL TEXT SUBROUTINE ----- PROCESS AMDSAIP2 TEXT              */ 00513000
*   /*                                                               */ 00514000
*   /*****************************************************************/ 00515000
*                                                                  0156 00516000
*       CALL AMDSATXT;                                             0156 00517000
*                                                                  0156 00518000
         BAL   @14,AMDSATXT                                        0156 00519000
*   /*****************************************************************/ 00520000
*   /*                                                               */ 00521000
*   /* CHECK IF TEXT PROCESSED PROPERLY. IF NOT, USE ERR CODE TO     */ 00522000
*   /* INDEX INTO BRANCH TABLE AND GO WRITE ERR MESSAGE              */ 00523000
*   /*                                                               */ 00524000
*   /*****************************************************************/ 00525000
*                                                                  0157 00526000
*       RESPECIFY REG15 RESTRICTED;                                0157 00527000
*       IF REG15 ^= 0 THEN          /* TEST FOR ERR RETURN CODE      */ 00528000
         LTR   REG15,REG15                                         0158 00529000
         BZ    @RF00158                                            0158 00530000
*         GOTO AMDMSGX(REG15);      /* YES, GO WRITE ERR MSG         */ 00531000
         LR    @14,REG15                                           0159 00532000
         SLA   @14,2                                               0159 00533000
         L     @14,AMDMSGX-4(@14)                                  0159 00534000
         BR    @14                                                 0159 00535000
*       RESPECIFY REG15 UNRESTRICTED;                              0160 00536000
*                                                                  0160 00537000
@RF00158 DS    0H                                                  0161 00538000
*   /*****************************************************************/ 00539000
*   /*                                                               */ 00540000
*   /* THE IPL2 RECORD HAS A SIZE LIMIT OF 144 BYTES                 */ 00541000
*   /*                                                               */ 00542000
*   /*****************************************************************/ 00543000
*                                                                  0161 00544000
*       LCAOTEOR = LCAOTPUT + 144;      /* SET IPL2 RCD LNG TO     0161 00545000
*                                      EXACTLY 1 44 BYTES            */ 00546000
*                                                                  0161 00547000
         LA    @10,144                                             0161 00548000
         A     @10,LCAOTPUT                                        0161 00549000
         ST    @10,LCAOTEOR                                        0161 00550000
*   /*****************************************************************/ 00551000
*   /*                                                               */ 00552000
*   /* WRITE IPL2 RECORD TO SYSUT3                                   */ 00553000
*   /*                                                               */ 00554000
*   /*****************************************************************/ 00555000
*                                                                  0162 00556000
*       CALL AMDWRITE;                                             0162 00557000
         BAL   @14,AMDWRITE                                        0162 00558000
*     END;                                                         0163 00559000
*                                                                  0163 00560000
*   /*****************************************************************/ 00561000
*   /*                                                               */ 00562000
*   /* INITIALIZE THE LCA FOR PROCESSING AMDSALSR ( LOW SPEED DUMP   */ 00563000
*   /* PGM) TEXT                                                     */ 00564000
*   /*                                                               */ 00565000
*   /*****************************************************************/ 00566000
*                                                                  0164 00567000
*                                                                  0164 00568000
*AMDHSR:                                                           0164 00569000
*   LCACSECT = AMDSALSR;            /* INDICATE NAME OF OBJ CSECT    */ 00570000
*                                                                  0164 00571000
AMDHSR   MVC   LCACSECT(8),AMDSALSR                                0164 00572000
*   /*****************************************************************/ 00573000
*   /*                                                               */ 00574000
*   /* CHECK FOR HIGHSPEED INITIALIZATION. IF SO, INITIALIZE THE LCA */ 00575000
*   /* FOR PROCESSING AMDSAHSR (HIGH SPEED DUMP PROGRAM)             */ 00576000
*   /*                                                               */ 00577000
*   /*****************************************************************/ 00578000
*                                                                  0165 00579000
*   IF LCATYPE = '1'B THEN          /* TEST FOR TYPE2=HI             */ 00580000
         TM    LCATYPE,B'01000000'                                 0165 00581000
         BNO   @RF00165                                            0165 00582000
*     LCACSECT = AMDSAHSR;          /* YES, INIT HIGH SPEED PGM NAME */ 00583000
*                                                                  0166 00584000
         MVC   LCACSECT(8),AMDSAHSR                                0166 00585000
*   /*****************************************************************/ 00586000
*   /*                                                               */ 00587000
*   /* CALL TEXT SUBROUTINE ----- PROCESS CORE DUMP PROGRAM TEXT     */ 00588000
*   /*                                                               */ 00589000
*   /*****************************************************************/ 00590000
*                                                                  0167 00591000
*   CALL AMDSATXT;                                                 0167 00592000
*                                                                  0167 00593000
@RF00165 BAL   @14,AMDSATXT                                        0167 00594000
*   /*****************************************************************/ 00595000
*   /*                                                               */ 00596000
*   /* CHECK IF DUMP PGM TEXT PROCESSED SUCCESSFULLY. IF NOT, USE ERR*/ 00597000
*   /* CODE TO INDEX BRANCH TABLE AND GO WRITE ERROR MSG             */ 00598000
*   /*                                                               */ 00599000
*   /*****************************************************************/ 00600000
*                                                                  0168 00601000
*   RESPECIFY REG15 RESTRICTED;                                    0168 00602000
*   IF REG15 ^= 0 THEN              /* TEST FOR ERR RETURN CODE      */ 00603000
         LTR   REG15,REG15                                         0169 00604000
         BZ    @RF00169                                            0169 00605000
*     GOTO AMDMSGX(REG15);          /* GO WRITE ERR MSG              */ 00606000
         LR    @14,REG15                                           0170 00607000
         SLA   @14,2                                               0170 00608000
         L     @14,AMDMSGX-4(@14)                                  0170 00609000
         BR    @14                                                 0170 00610000
*   RESPECIFY REG15 UNRESTRICTED;                                  0171 00611000
*                                                                  0171 00612000
@RF00169 DS    0H                                                  0172 00613000
*   /*****************************************************************/ 00614000
*   /*                                                               */ 00615000
*   /* THE CORE DUMP PGM HAS A SIZE LIMIT OF 4K BYTES          Y02006*/ 00616000
*   /*                                                               */ 00617000
*   /*****************************************************************/ 00618000
*                                                                  0172 00619000
*   LCAOTEOR = LCAOTPUT + 4096;       /* SET PGM LNG TO EXACTLY 4K 0172 00620000
*                                                              Y02006*/ 00621000
*                                                                  0172 00622000
         LH    @10,@CH00202                                        0172 00623000
         A     @10,LCAOTPUT                                        0172 00624000
         ST    @10,LCAOTEOR                                        0172 00625000
*   /*****************************************************************/ 00626000
*   /*                                                               */ 00627000
*   /* IF TAPE INITIALIZATION SET OUTPUT BUFFER PTR TO END OF DMP PGM*/ 00628000
*   /* TEXT AND GO PROCESS THE PRECURSOR PGM TEXT.                   */ 00629000
*   /*                                                               */ 00630000
*   /*****************************************************************/ 00631000
*                                                                  0173 00632000
*   IF LCAIPL = '0'B THEN           /* TAPE IPL?                     */ 00633000
         TM    LCAIPL,B'00100000'                                  0173 00634000
         BNZ   @RF00173                                            0173 00635000
*     LCAOTPUT = LCAOTEOR;          /* SET OUTPUT BUF PTR TO END OF     00636000
*                                      DMP PGM TXT                   */ 00637000
*                                                                  0174 00638000
         ST    @10,LCAOTPUT                                        0174 00639000
*   /*****************************************************************/ 00640000
*   /*                                                               */ 00641000
*   /* DIRECT ACCESS INITIALIZATION --                         Y02006*/ 00642000
*   /* WRITE THE DMP PGM TEXT TO SYSUT4(SYS1.PAGEDUMP)         Y02006*/ 00643000
*   /*                                                               */ 00644000
*   /*****************************************************************/ 00645000
*                                                                  0175 00646000
*   ELSE                                                           0175 00647000
*     DO;                                                          0175 00648000
         B     @RC00173                                            0175 00649000
@RF00173 DS    0H                                                  0176 00650000
*         LCAOTDCB = ADDR(SYS4DCB); /* POINT TO SYSUT4 FOR OUTPUT  0176 00651000
*                                                              Y02006*/ 00652000
         LA    @10,SYS4DCB                                         0176 00653000
         ST    @10,LCAOTDCB                                        0176 00654000
*         DCBPTR = LCAOTDCB;        /* PUT DCB ADDR IN DCB REG Y02006*/ 00655000
         LR    DCBPTR,@10                                          0177 00656000
*         LCAOTPUT = LCAOTPUT + 32;       /* SKIP PASSED MINIMUM   0178 00657000
*                                      CCT                     Y02006*/ 00658000
         LA    @10,32                                              0178 00659000
         A     @10,LCAOTPUT                                        0178 00660000
         ST    @10,LCAOTPUT                                        0178 00661000
*         LCAOTEOR = LCAOTPUT + 6144;     /* MAKE RECORD X'1800'   0179 00662000
*                                      BYTES LONG              Y02006*/ 00663000
         AH    @10,@CH00204                                        0179 00664000
         ST    @10,LCAOTEOR                                        0179 00665000
*         CALL AMDWRITE;            /* WRITE RECORD TO SYSUT4  Y02006*/ 00666000
         BAL   @14,AMDWRITE                                        0180 00667000
*         LCAOTPUT = LCAOTPUT - 32;         /* POINT TO BEGINNING OF    00668000
*                                      BUFFER                  Y02006*/ 00669000
*                                                                  0181 00670000
         L     @10,LCAOTPUT                                        0181 00671000
         SH    @10,@CH00203                                        0181 00672000
         ST    @10,LCAOTPUT                                        0181 00673000
*   /*****************************************************************/ 00674000
*   /*                                                               */ 00675000
*   /* TEST FOR LOW SPEED DUMP INITIALIZATION. IF SO SKIP            */ 00676000
*   /* INITIALIZATION OF AMDSAPGE.                             Y02006*/ 00677000
*   /*                                                               */ 00678000
*   /*****************************************************************/ 00679000
*                                                                  0182 00680000
*       IF LCATYPE = '0'B THEN      /* TYPE2=LO?                     */ 00681000
         TM    LCATYPE,B'01000000'                                 0182 00682000
         BZ    @RT00182                                            0182 00683000
*         GOTO AMDPROP;             /* GO GET PRECURSOR        Y02006*/ 00684000
*     END;                                                         0184 00685000
*                                                                  0184 00686000
*   /*****************************************************************/ 00687000
*   /*                                                         Y02006*/ 00688000
*   /* INITIALIZE FOR PROCESSING THE PAGE DMP PGM -- AMDSAPGE  Y02006*/ 00689000
*   /*                                                         Y02006*/ 00690000
*   /*****************************************************************/ 00691000
*                                                                  0185 00692000
*   LCAMODUL = AMDSAPGE;            /* SET THE MODUL NAME Y02006     */ 00693000
@RC00173 MVC   LCAMODUL(8),AMDSAPGE                                0185 00694000
*   LCACSECT = LCAMODUL;            /* INIT THE CSECT NAME Y02006    */ 00695000
         MVC   LCACSECT(8),LCAMODUL                                0186 00696000
*   LCARELOC = '8000'X;             /* SET RELOCATION VALUE FOR    0187 00697000
*                                      AMDSAPGE Y02006               */ 00698000
         L     @10,@CF00206                                        0187 00699000
         ST    @10,LCARELOC                                        0187 00700000
*   LCAFUNC = '1'B;                 /* LOAD MODULE TO PROCESS  Y02006*/ 00701000
         OI    LCAFUNC,B'10000000'                                 0188 00702000
*   LCAINDCB = ADDR(SYS2DCB);       /* POINT TO SYSUT2         Y02006*/ 00703000
         LA    @10,SYS2DCB                                         0189 00704000
         ST    @10,LCAINDCB                                        0189 00705000
*   DCBPTR = LCAINDCB;              /* SET UP DCB ADDRESS      Y02006*/ 00706000
*                                                                  0190 00707000
         LR    DCBPTR,@10                                          0190 00708000
*   /*****************************************************************/ 00709000
*   /*                                                         Y02006*/ 00710000
*   /* CALL TEXT SUBROUTINE --- PROCESS AMDSAPGE               Y02006*/ 00711000
*   /*                                                         Y02006*/ 00712000
*   /*****************************************************************/ 00713000
*                                                                  0191 00714000
*   CALL AMDSATXT;                  /* *CHECK IF AMDSAPGE TEXT     0191 00715000
*                                      PROCESSED SUCCESSFULLY Y02006 */ 00716000
         BAL   @14,AMDSATXT                                        0191 00717000
*   RESPECIFY REG15 RESTRICTED;                                    0192 00718000
*   IF REG15 ^= 0 THEN              /* TEST ERR RETURN CODE Y02006   */ 00719000
         LTR   REG15,REG15                                         0193 00720000
         BZ    @RF00193                                            0193 00721000
*     GOTO AMDMSGX(REG15);          /* YES, WRITE ERROR MSG Y02006   */ 00722000
         LR    @14,REG15                                           0194 00723000
         SLA   @14,2                                               0194 00724000
         L     @14,AMDMSGX-4(@14)                                  0194 00725000
         BR    @14                                                 0194 00726000
*   RESPECIFY REG15 UNRESTRICTED;                                  0195 00727000
*                                                                  0195 00728000
@RF00193 DS    0H                                                  0196 00729000
*   /*****************************************************************/ 00730000
*   /*                                                               */ 00731000
*   /* IF AMDSAPGE TEXT PROCESSED OK CHECK FOR D.A. INITIALIZATION.  */ 00732000
*   /* IF D.A. SET UP TO WRITE AMDSAPGE TXT TO SYSUT4                */ 00733000
*   /*                                                         Y02006*/ 00734000
*   /*****************************************************************/ 00735000
*                                                                  0196 00736000
*   LCACOUNT = 0;                   /* INITIALIZE AMDSAPGE RECORD  0196 00737000
*                                      COUNT Y02006                  */ 00738000
         MVI   LCACOUNT,X'00'                                      0196 00739000
*   IF LCAIPL = '1'B THEN           /* D.A. IPL? Y02006              */ 00740000
         TM    LCAIPL,B'00100000'                                  0197 00741000
         BNO   @RF00197                                            0197 00742000
*     DO;                                                          0198 00743000
*       LCAOTDCB = ADDR(SYS4DCB);   /* SET OUTPUT DCB PTR TO SYSUT4  */ 00744000
         LA    @10,SYS4DCB                                         0199 00745000
         ST    @10,LCAOTDCB                                        0199 00746000
*       DCBPTR = LCAOTDCB;          /* PUT DCB ADDR IN DCB REG Y02006*/ 00747000
         LR    DCBPTR,@10                                          0200 00748000
*       RCDPTR = LCAOTEOR;          /* END ADDR OF PGE TXT Y02006    */ 00749000
*                                                                  0201 00750000
         L     RCDPTR,LCAOTEOR                                     0201 00751000
*   /*****************************************************************/ 00752000
*   /*                                                               */ 00753000
*   /* THE FOLLOWING LOGIC IS EXECUTED FOR D.A. INITIALIZATION ONLY. */ 00754000
*   /* AMDSAPGE TEXT IN THE OUTPUT BUFFER IS SEGMENTED INTO RECORDS  */ 00755000
*   /* EQUAL TO THE SYSUT4 BLKSIZE AND WRITTEN TO THE SYSUT4 DATA SET*/ 00756000
*   /*                                                               */ 00757000
*   /*****************************************************************/ 00758000
*                                                                  0202 00759000
*                                                                  0202 00760000
*AMDIOPGE:                                                         0202 00761000
*       LCAOTEOR = LCAOTPUT + 4096 + 2048;         /* SET PTR TO END    00762000
*                                      OF RECORD Y02006              */ 00763000
AMDIOPGE L     @10,LCAOTPUT                                        0202 00764000
         LH    @00,@CH00204                                        0202 00765000
         AR    @00,@10                                             0202 00766000
         ST    @00,LCAOTEOR                                        0202 00767000
*       IF LCAOTPUT < RCDPTR THEN   /* IS BEG OF RCD LESS THAN END OF   00768000
*                                      BUF ? Y02006                  */ 00769000
         CR    @10,RCDPTR                                          0203 00770000
         BNL   @RF00203                                            0203 00771000
*         DO;                       /* YES, DO FOLLOWING Y02006      */ 00772000
*           CALL AMDWRITE;          /* WRITE THE RECORD Y02006       */ 00773000
         BAL   @14,AMDWRITE                                        0205 00774000
*           LCACOUNT = LCACOUNT + 1; /* INCREMENT AMDSAPGE RECORD  0206 00775000
*                                      COUNT Y02006                  */ 00776000
         LA    @10,1                                               0206 00777000
         MVC   @ZT00003+3(1),LCACOUNT                              0206 00778000
         A     @10,@ZT00003                                        0206 00779000
         STC   @10,LCACOUNT                                        0206 00780000
*           LCAOTPUT = LCAOTEOR;    /* POINT TO NEXT RECORD Y02006   */ 00781000
         L     @10,LCAOTEOR                                        0207 00782000
         ST    @10,LCAOTPUT                                        0207 00783000
*           GOTO AMDIOPGE;          /* GO INITIALIZE PTR TO END OF 0208 00784000
*                                      RCD Y02006                    */ 00785000
         B     AMDIOPGE                                            0208 00786000
*         END;                                                     0209 00787000
*       RETRNCOD = 0;               /* SUCCESSFUL RETURN CODE Y02006 */ 00788000
@RF00203 SLR   RETRNCOD,RETRNCOD                                   0210 00789000
*       GOTO AMDPROP;               /* PGE INIT COMPLETE - GO PROCESS   00790000
*                                      AMDSAPRO Y02006               */ 00791000
         B     AMDPROP                                             0211 00792000
*     END;                                                         0212 00793000
*                                                                  0212 00794000
*   /*****************************************************************/ 00795000
*   /*                                                               */ 00796000
*   /* IF TAPE INITIALIZATION AND AMDSAPGE TEXT PROCESSED OK THEN    */ 00797000
*   /* WRITE OUT BUFFER CONTAINING IPL1, AMDSAHSR, AND AMDSAPGE TEXT.*/ 00798000
*   /* WHEN FINISHED GOTO PROCESS IPL2 TEXT AND REMAINDER OF AMDSAPGE*/ 00799000
*   /* TEXT. Y02006                                                  */ 00800000
*   /*                                                               */ 00801000
*   /*****************************************************************/ 00802000
*                                                                  0213 00803000
*   ELSE                                                           0213 00804000
*     DO;                                                          0213 00805000
@RF00197 DS    0H                                                  0214 00806000
*       LCAOTPUT = OTBUFADD;        /* POINT TO BEGIN OF BUFFER    0214 00807000
*                                      Y02006                        */ 00808000
         L     @10,OTBUFADD                                        0214 00809000
         ST    @10,LCAOTPUT                                        0214 00810000
*       LCAOTDCB = ADDR(SYS3DCB);   /* SET UP DCB ADDRESS Y02006     */ 00811000
         LA    @00,SYS3DCB                                         0215 00812000
         ST    @00,LCAOTDCB                                        0215 00813000
*       DCBPTR = LCAOTDCB;          /* PUT DCB ADDR IN DCB REG Y02006*/ 00814000
         LR    DCBPTR,@00                                          0216 00815000
*       LCAOTEOR = OTBUFADD + DCBBLKSI; /* POINT TO END OF RECORD  0217 00816000
*                                      Y02006                        */ 00817000
         AH    @10,DCBBLKSI+62(,DCBPTR)                            0217 00818000
         ST    @10,LCAOTEOR                                        0217 00819000
*       CALL AMDWRITE;              /* GO WRITE THE RECORD Y02006    */ 00820000
         BAL   @14,AMDWRITE                                        0218 00821000
*       LCAINDCB = ADDR(SYS1DCB);   /* SET INPUT DCB TO SYSUT1 DCB 0219 00822000
*                                      FOR IPL2 PROCESSING Y02006    */ 00823000
         LA    @10,SYS1DCB                                         0219 00824000
         ST    @10,LCAINDCB                                        0219 00825000
*       LCAOTPUT = OTBUFADD + DCBBLKSI - 144;      /* LOCATION FOR 0220 00826000
*                                      IPL2 AHEAD OF REMAINING PGE 0220 00827000
*                                      CODE Y02006                   */ 00828000
         LH    @10,DCBBLKSI+62(,DCBPTR)                            0220 00829000
         A     @10,OTBUFADD                                        0220 00830000
         SH    @10,@CH00200                                        0220 00831000
         ST    @10,LCAOTPUT                                        0220 00832000
*       LCACSECT = AMDSAIP2;        /* INDICATE CSECT TO BE PROCESSED   00833000
*                                      Y02006                        */ 00834000
         MVC   LCACSECT(8),AMDSAIP2                                0221 00835000
*       LCAMODUL = BLANKS;          /* CLEAR MODULE NAME FIELD Y02006*/ 00836000
         MVC   LCAMODUL(8),BLANKS                                  0222 00837000
*       LCAFUNC = '0'B;             /* INDICATE OBJ CSECT TO BE    0223 00838000
*                                      PROCESSED Y02006              */ 00839000
*                                                                  0223 00840000
         NI    LCAFUNC,B'01111111'                                 0223 00841000
*   /*****************************************************************/ 00842000
*   /*                                                         Y02006*/ 00843000
*   /* CALL TEXT SUBROUTINE ----- PROCESS AMDSAIP2 TEXT        Y02006*/ 00844000
*   /*                                                         Y02006*/ 00845000
*   /*****************************************************************/ 00846000
*                                                                  0224 00847000
*       CALL AMDSATXT;              /* Y02006                        */ 00848000
*                                                                  0224 00849000
         BAL   @14,AMDSATXT                                        0224 00850000
*   /*****************************************************************/ 00851000
*   /*                                                               */ 00852000
*   /* CHECK IF TEXT PROCESSED PROPERLY. IF NOT, USE ERR CODE TO     */ 00853000
*   /* INDEX INTO BRANCH TABLE AND GO WRITE ERR MESSAGE        Y02006*/ 00854000
*   /*                                                         Y02006*/ 00855000
*   /*****************************************************************/ 00856000
*                                                                  0225 00857000
*       RESPECIFY REG15 RESTRICTED;                                0225 00858000
*       IF REG15 ^= 0 THEN          /* TEST ERR RETURN CODE Y02006   */ 00859000
         LTR   REG15,REG15                                         0226 00860000
         BZ    @RF00226                                            0226 00861000
*         GOTO AMDMSGX(REG15);      /* YES, GO WRITE ERR MSG Y02006  */ 00862000
         LR    @14,REG15                                           0227 00863000
         SLA   @14,2                                               0227 00864000
         L     @14,AMDMSGX-4(@14)                                  0227 00865000
         BR    @14                                                 0227 00866000
*       RESPECIFY REG15 UNRESTRICTED;                              0228 00867000
@RF00226 DS    0H                                                  0229 00868000
*       DCBPTR = ADDR(SYS3DCB);     /* POINT TO SYSUT3 DCB Y02006    */ 00869000
         LA    DCBPTR,SYS3DCB                                      0229 00870000
*       LCAOTEOR = LCAOTPUT + DCBBLKSI; /* END OF RECORD Y02006      */ 00871000
         LH    @10,DCBBLKSI+62(,DCBPTR)                            0230 00872000
         A     @10,LCAOTPUT                                        0230 00873000
         ST    @10,LCAOTEOR                                        0230 00874000
*       CALL AMDWRITE;              /* WRITE REMAINDER OF PGE CODE 0231 00875000
*                                      AND IPL2 Y02006               */ 00876000
         BAL   @14,AMDWRITE                                        0231 00877000
*       RETRNCOD = 0;               /* SET RETURN CODE OF 0 Y02006   */ 00878000
         SLR   RETRNCOD,RETRNCOD                                   0232 00879000
*       GO TO AMDCLNUP;             /* PREPARE TO EXIT Y02006        */ 00880000
         B     AMDCLNUP                                            0233 00881000
*     END;                                                         0234 00882000
*                                                                  0234 00883000
*   /*****************************************************************/ 00884000
*   /*                                                               */ 00885000
*   /* INITIALIZE FOR PRECURSOR PROCESSING                           */ 00886000
*   /*                                                               */ 00887000
*   /*****************************************************************/ 00888000
*                                                                  0235 00889000
*                                                                  0235 00890000
*AMDPROP:                                                          0235 00891000
*   LCAOTPUT = OTBUFADD;            /* POINT TO OUTPUT BUFFER  Y02006*/ 00892000
AMDPROP  L     @10,OTBUFADD                                        0235 00893000
         ST    @10,LCAOTPUT                                        0235 00894000
*   LCAINDCB = ADDR(SYS2DCB);       /* SET INPUT DCB TO SYSUT2 Y02006*/ 00895000
         LA    @10,SYS2DCB                                         0236 00896000
         ST    @10,LCAINDCB                                        0236 00897000
*   DCBPTR = LCAINDCB;              /* SET UP DCB ADDRESS Y02006     */ 00898000
         LR    DCBPTR,@10                                          0237 00899000
*   LCAMODUL = AMDSAPRO;            /* INDICATE PRECURSOR CSECT      */ 00900000
         MVC   LCAMODUL(8),AMDSAPRO                                0238 00901000
*   LCACSECT = AMDSAPR2;            /* INDICATE MOD NAME Y02006      */ 00902000
         MVC   LCACSECT(8),AMDSAPR2                                0239 00903000
*   LCAFUNC = '1'B;                 /* INDICATE LOD MOD TXT TO BE  0240 00904000
*                                      PROC Y02006                   */ 00905000
*   LCAPGECT = '1'B;                /* SET PGERCDCT RETURN SWITCH  0241 00906000
*                                      Y02006                        */ 00907000
*                                                                  0241 00908000
         OI    LCAFUNC,B'10010000'                                 0241 00909000
*   /*****************************************************************/ 00910000
*   /*                                                               */ 00911000
*   /* CALL TEXT SUBROUTINE ---- FIND PGERCDCT LD IN AMDSAPRO  Y02006*/ 00912000
*   /*                                                               */ 00913000
*   /*****************************************************************/ 00914000
*                                                                  0242 00915000
*   CALL AMDSATXT;                  /* Y02006                        */ 00916000
*                                                                  0242 00917000
         BAL   @14,AMDSATXT                                        0242 00918000
*   /*****************************************************************/ 00919000
*   /*                                                               */ 00920000
*   /* CHECK IF PRECURSOR TEXT PROCESSED SUCCESSFULLY                */ 00921000
*   /*                                                               */ 00922000
*   /*****************************************************************/ 00923000
*                                                                  0243 00924000
*   RESPECIFY REG15 RESTRICTED;                                    0243 00925000
*   IF REG15 ^= 0 THEN              /* TEST ERR RETURN CODE Y02006   */ 00926000
         LTR   REG15,REG15                                         0244 00927000
         BZ    @RF00244                                            0244 00928000
*     GOTO AMDMSGX(REG15);          /* YES, GO WRITE ERR MSG Y02006  */ 00929000
         LR    @14,REG15                                           0245 00930000
         SLA   @14,2                                               0245 00931000
         L     @14,AMDMSGX-4(@14)                                  0245 00932000
         BR    @14                                                 0245 00933000
*   RESPECIFY REG15 UNRESTRICTED;                                  0246 00934000
@RF00244 DS    0H                                                  0247 00935000
*   LCACSECT = AMDSAPRO;            /* INDICATE MOD NAME Y02006      */ 00936000
         MVC   LCACSECT(8),AMDSAPRO                                0247 00937000
*   LCAFUNC = '1'B;                 /* INDICATE LOD MOD TXT TO BE  0248 00938000
*                                      PROC Y02006                   */ 00939000
*   LCAPGECT = '0'B;                /* RESET RETURN SWITCH Y02006    */ 00940000
         OI    LCAFUNC,B'10000000'                                 0249 00941000
         NI    LCAPGECT,B'11101111'                                0249 00942000
*   LCARELOC = '7800'X;             /* SET RELOCATION VALUE FOR    0250 00943000
*                                      AMDSAPRO Y02006               */ 00944000
*                                                                  0250 00945000
         LH    @10,@CH00212                                        0250 00946000
         ST    @10,LCARELOC                                        0250 00947000
*   /*****************************************************************/ 00948000
*   /*                                                               */ 00949000
*   /* CALL TEXT SUBROUTINE ---- PROCESS AMDSAPRO (PRECURSOR) TEXT   */ 00950000
*   /*                                                               */ 00951000
*   /*****************************************************************/ 00952000
*                                                                  0251 00953000
*   CALL AMDSATXT;                  /* Y02006                        */ 00954000
*                                                                  0251 00955000
         BAL   @14,AMDSATXT                                        0251 00956000
*   /*****************************************************************/ 00957000
*   /*                                                               */ 00958000
*   /* CHECK IF PRECURSOR TEXT PROCESSED SUCCESSFULLY                */ 00959000
*   /*                                                               */ 00960000
*   /*****************************************************************/ 00961000
*                                                                  0252 00962000
*   RESPECIFY REG15 RESTRICTED;                                    0252 00963000
*   IF REG15 ^= 0 THEN              /* TEST ERR RETURN CODE Y02006   */ 00964000
         LTR   REG15,REG15                                         0253 00965000
         BZ    @RF00253                                            0253 00966000
*     GOTO AMDMSGX(REG15);          /* YES, GO WRITE ERR MSG Y02006  */ 00967000
         LR    @14,REG15                                           0254 00968000
         SLA   @14,2                                               0254 00969000
         L     @14,AMDMSGX-4(@14)                                  0254 00970000
         BR    @14                                                 0254 00971000
*   RESPECIFY REG15 UNRESTRICTED;                                  0255 00972000
*                                                                  0255 00973000
@RF00253 DS    0H                                                  0256 00974000
*   /*****************************************************************/ 00975000
*   /*                                                               */ 00976000
*   /* THE PRECURSOR PGM HAS A SIZE LIMIT OF 2K BYTES                */ 00977000
*   /*                                                               */ 00978000
*   /*****************************************************************/ 00979000
*                                                                  0256 00980000
*   LCAOTEOR = LCAOTPUT + 2048;     /* SET PRECURSOR LNG TO EXACTLY     00981000
*                                      2K Y02006                     */ 00982000
*                                                                  0256 00983000
         LA    @10,2048                                            0256 00984000
         A     @10,LCAOTPUT                                        0256 00985000
         ST    @10,LCAOTEOR                                        0256 00986000
*   /*****************************************************************/ 00987000
*   /*                                                               */ 00988000
*   /* WRITE PRECURSOR PGM TEXT TO SYSUT3                            */ 00989000
*   /*                                                               */ 00990000
*   /*****************************************************************/ 00991000
*                                                                  0257 00992000
*   PGERCDCT = LCACOUNT;            /* UPDATE COUNT OF AMDSAPGE    0257 00993000
*                                      RECORDS Y02006                */ 00994000
         L     @10,LCAPROLD                                        0257 00995000
         MVC   PGERCDCT(1,@10),LCACOUNT                            0257 00996000
*   LCAOTDCB = ADDR(SYS3DCB);       /* ADDRESS OF SYSUT3 DCB Y02006  */ 00997000
         LA    @10,SYS3DCB                                         0258 00998000
         ST    @10,LCAOTDCB                                        0258 00999000
*   DCBPTR = LCAOTDCB;              /* DCB ADDR IN DCB REGISTER    0259 01000000
*                                      Y02006                        */ 01001000
         LR    DCBPTR,@10                                          0259 01002000
*   CALL AMDWRITE;                  /* WRITE DUMMY WORK RECORD Y02006*/ 01003000
         BAL   @14,AMDWRITE                                        0260 01004000
*   CALL AMDWRITE;                  /* WRITE AMDSAPRO          Y02006*/ 01005000
         BAL   @14,AMDWRITE                                        0261 01006000
*   CALL AMDWRITE;                  /* WRITE DUMMY WORK RECORD Y02006*/ 01007000
         BAL   @14,AMDWRITE                                        0262 01008000
*   RETRNCOD = 0;                   /* SET UP RETURN CODE OF 0 Y02006*/ 01009000
         SLR   RETRNCOD,RETRNCOD                                   0263 01010000
*   GO TO AMDCLNUP;                 /* PREPARE TO TERMINATE    Y02006*/ 01011000
*                                                                  0264 01012000
         B     AMDCLNUP                                            0264 01013000
*   /*****************************************************************/ 01014000
*   /*                                                               */ 01015000
*   /* SYNAD ROUTINE FOR SYSPRINT, SYSUT3, AND SYSUT4 DCB'S          */ 01016000
*   /*                                                               */ 01017000
*   /*****************************************************************/ 01018000
*                                                                  0265 01019000
*                                                                  0265 01020000
*AMDSYND1:                                                         0265 01021000
*   GENERATE;                       /* I/O ERROR ON SYSUT3 OR SYSUT4 */ 01022000
AMDSYND1 DS    0H                                                  0265 01023000
              SYNADAF ACSMETH=BSAM                                      01024000
*   GOTO AMDMOVIT;                  /* GO MOVE I/O ERR MSG INTO    0266 01025000
*                                      BUFFER                        */ 01026000
*                                                                  0266 01027000
         B     AMDMOVIT                                            0266 01028000
*AMDSYND2:                                                         0267 01029000
*   GENERATE;                       /* ANALYZE I/O ERROR FOR SYSPRINT*/ 01030000
*                                                                  0267 01031000
AMDSYND2 DS    0H                                                  0267 01032000
               SYNADAF ACSMETH=QSAM                                     01033000
*AMDMOVIT:                                                         0268 01034000
*   MSGBUF1(1:102)=SYNADMSG(5:106); /* MOVE I/O ERR MSG INTO BUF     */ 01035000
AMDMOVIT MVC   MSGBUF1(102),SYNADMSG+4(PARMGR1)                    0268 01036000
*   GENERATE(SYNADRLS);             /* RELEASE SYNADAF WORKAREA      */ 01037000
         SYNADRLS                                                       01038000
*   MSGBUF1(1:2)='0066'X;           /* SET LENGTH OF MESSAGE         */ 01039000
         MVC   MSGBUF1(2),@CB00221                                 0270 01040000
*   DCBPTR= ADDR(PRINTDCB);         /* SET DCB POINTER TO ADDR OF  0271 01041000
*                                      SYSPRINT DCB F OR ERROR     0271 01042000
*                                      MESSAGE PROCESSING            */ 01043000
         LA    DCBPTR,PRINTDCB                                     0271 01044000
*   GOTO AMD041I;                   /* GO WRITE MSG AMD041I          */ 01045000
*                                                                  0272 01046000
         B     AMD041I                                             0272 01047000
*   /*****************************************************************/ 01048000
*   /*                                                               */ 01049000
*   /* SET UP TO WRITE MESSAGE AMD035I -- OPEN FAILED                */ 01050000
*   /*                                                               */ 01051000
*   /*****************************************************************/ 01052000
*                                                                  0273 01053000
*                                                                  0273 01054000
*AMD035I:                                                          0273 01055000
*   RCDPTR=AD1;                     /* SET POINTER TO MSG AMD035I    */ 01056000
AMD035I  L     @10,@CA00146                                        0273 01057000
         L     RCDPTR,AD1-AMDMSGTB(,@10)                           0273 01058000
*   MSGBUF1(1:MSGLNG)=MESSAGE(1:MSGLNG);     /* MOVE MSG             */ 01059000
         LH    @10,MSGLNG(,RCDPTR)                                 0274 01060000
         BCTR  @10,0                                               0274 01061000
         EX    @10,@SM00438                                        0274 01062000
*   MSGBUF1(19:26) = DCBDDNAM;      /* PUT DDNAME INTO MSG. DCBPTR 0275 01063000
*                                      MUST BE PR EVIOUSLY SET BEFORE   01064000
*                                      THIS CODE IS ENTERED          */ 01065000
*                                                                  0275 01066000
         MVC   MSGBUF1+18(8),DCBDDNAM+40(DCBPTR)                   0275 01067000
*   /*****************************************************************/ 01068000
*   /*                                                               */ 01069000
*   /* IF SYSPRINT OPEN FAILED THEN GO ISSUE A WTO TO SYSOUT         */ 01070000
*   /*                                                               */ 01071000
*   /*****************************************************************/ 01072000
*                                                                  0276 01073000
*   IF DCBPTR = ADDR(PRINTDCB) THEN /* SYSPRINT DCB FAIL?            */ 01074000
         LA    @10,PRINTDCB                                        0276 01075000
         CR    DCBPTR,@10                                          0276 01076000
         BE    @RT00276                                            0276 01077000
*     GOTO AMDSAWTO;                /* YES GOTO SET UP FOR A WTO   0277 01078000
*                                      OPERATION                     */ 01079000
*                                                                  0277 01080000
*   /*****************************************************************/ 01081000
*   /*                                                               */ 01082000
*   /* IF A DCB OTHER THAN SYSPRINT FAILED TO OPEN WRITE MSG AMD035I */ 01083000
*   /* TO SYSPRINT                                                   */ 01084000
*   /*                                                               */ 01085000
*   /*****************************************************************/ 01086000
*                                                                  0278 01087000
*   ELSE                                                           0278 01088000
*     DO;                                                          0278 01089000
*       BUFPTR= ADDR(MSGBUF1);      /* SET POINTER TO MSG BUFFER     */ 01090000
         LA    BUFPTR,MSGBUF1                                      0279 01091000
*       CALL AMDPRINT;              /* GO WRITE THE ERROR MESSAGE    */ 01092000
         BAL   @14,AMDPRINT                                        0280 01093000
*       GOTO AMDERXIT;              /* BRANCH TO ERROR EXIT          */ 01094000
         B     AMDERXIT                                            0281 01095000
*     END;                                                         0282 01096000
*                                                                  0282 01097000
*   /*****************************************************************/ 01098000
*   /*                                                               */ 01099000
*   /* SET UP TO WRITE MSG AMD036I ERROR EXPLANATION 1 -- OBJ CSECT  */ 01100000
*   /* NOT FOUND                                                     */ 01101000
*   /*                                                               */ 01102000
*   /*****************************************************************/ 01103000
*                                                                  0283 01104000
*                                                                  0283 01105000
*AMD036I1:                                                         0283 01106000
*   RCDPTR = AD3;                   /* SET POINTER TO THE ERROR MSG  */ 01107000
AMD036I1 L     @10,@CA00146                                        0283 01108000
         L     RCDPTR,AD3-AMDMSGTB(,@10)                           0283 01109000
*   MSGBUF2(1:MSGLNG)=MESSAGE(1:MSGLNG);     /* MOVE MSG             */ 01110000
         LH    @10,MSGLNG(,RCDPTR)                                 0284 01111000
         BCTR  @10,0                                               0284 01112000
         EX    @10,@SM00440                                        0284 01113000
*   MSGBUF2(28:35)=LCACSECT;        /* PUT CSECT NAME IN MSG         */ 01114000
         MVC   MSGBUF2+27(8),LCACSECT                              0285 01115000
*   GOTO AMD036I;                   /* GO GET THE MAIN MSG TEXT      */ 01116000
*                                                                  0286 01117000
         B     AMD036I                                             0286 01118000
*   /*****************************************************************/ 01119000
*   /*                                                               */ 01120000
*   /* SET UP TO WRITE MSG AMD036I ERROR EXPLANATION 2 -- RCDS OUT OF*/ 01121000
*   /* SEQUENCE                                                      */ 01122000
*   /*                                                               */ 01123000
*   /*****************************************************************/ 01124000
*                                                                  0287 01125000
*                                                                  0287 01126000
*AMD036I2:                                                         0287 01127000
*   RCDPTR = AD4;                   /* GET ADDRESS OF MSG            */ 01128000
AMD036I2 L     @10,@CA00146                                        0287 01129000
         L     RCDPTR,AD4-AMDMSGTB(,@10)                           0287 01130000
*   MSGBUF2(1:MSGLNG)=MESSAGE(1:MSGLNG);     /* MOVE MSG             */ 01131000
         LH    @10,MSGLNG(,RCDPTR)                                 0288 01132000
         BCTR  @10,0                                               0288 01133000
         EX    @10,@SM00440                                        0288 01134000
*   GOTO AMD036I;                   /* GO GET THE MAIN MSG TXT       */ 01135000
*                                                                  0289 01136000
         B     AMD036I                                             0289 01137000
*   /*****************************************************************/ 01138000
*   /*                                                               */ 01139000
*   /* SET UP TO WRITE MSG AMD036I ERROR EXPLANATION 3 -- END        */ 01140000
*   /* STATEMENT NOT FOUND                                           */ 01141000
*   /*                                                               */ 01142000
*   /*****************************************************************/ 01143000
*                                                                  0290 01144000
*                                                                  0290 01145000
*AMD036I3:                                                         0290 01146000
*   RCDPTR = AD5;                   /* GET ADDRESS OF MSG            */ 01147000
AMD036I3 L     @10,@CA00146                                        0290 01148000
         L     RCDPTR,AD5-AMDMSGTB(,@10)                           0290 01149000
*   MSGBUF2(1:MSGLNG)=MESSAGE(1:MSGLNG);     /* MOVE MSG             */ 01150000
         LH    @10,MSGLNG(,RCDPTR)                                 0291 01151000
         BCTR  @10,0                                               0291 01152000
         EX    @10,@SM00440                                        0291 01153000
*   GOTO AMD036I;                   /* GO GET THE MAIN TXT           */ 01154000
*                                                                  0292 01155000
         B     AMD036I                                             0292 01156000
*   /*****************************************************************/ 01157000
*   /*                                                               */ 01158000
*   /* SET UP TO WRITE MSG AMD036I ERROR EXPLANATION 4 --            */ 01159000
*   /* UNIDENTIFIABLE RECORD                                         */ 01160000
*   /*                                                               */ 01161000
*   /*****************************************************************/ 01162000
*                                                                  0293 01163000
*                                                                  0293 01164000
*AMD036I4:                                                         0293 01165000
*   RCDPTR = AD6;                   /* GET ADDRESS OF MSG            */ 01166000
AMD036I4 L     @10,@CA00146                                        0293 01167000
         L     RCDPTR,AD6-AMDMSGTB(,@10)                           0293 01168000
*   MSGBUF2(1:MSGLNG) = MESSAGE(1:MSGLNG);     /* MOVE MSG           */ 01169000
         LH    @10,MSGLNG(,RCDPTR)                                 0294 01170000
         BCTR  @10,0                                               0294 01171000
         EX    @10,@SM00440                                        0294 01172000
*   GOTO AMD036I;                   /* GO GET THE MAIN TXT           */ 01173000
*                                                                  0295 01174000
         B     AMD036I                                             0295 01175000
*   /*****************************************************************/ 01176000
*   /*                                                               */ 01177000
*   /* WRITE ERROR MESSAGE AMD036I AND ERROR EXPLANATION             */ 01178000
*   /*                                                               */ 01179000
*   /*****************************************************************/ 01180000
*                                                                  0296 01181000
*                                                                  0296 01182000
*AMD036I:                                                          0296 01183000
*   RCDPTR = AD2;                   /* GET ADDR OF MSG AMD036I       */ 01184000
AMD036I  L     @10,@CA00146                                        0296 01185000
         L     RCDPTR,AD2-AMDMSGTB(,@10)                           0296 01186000
*   MSGBUF1(1:MSGLNG)=MESSAGE(1:MSGLNG);     /* MOVE AMD036I         */ 01187000
         LH    @10,MSGLNG(,RCDPTR)                                 0297 01188000
         BCTR  @10,0                                               0297 01189000
         EX    @10,@SM00438                                        0297 01190000
*   BUFPTR=ADDR(MSGBUF1);           /* POINT TO MSG AMD036I BUFFER   */ 01191000
         LA    BUFPTR,MSGBUF1                                      0298 01192000
*   CALL AMDPRINT;                  /* WRITE AMD036I                 */ 01193000
         BAL   @14,AMDPRINT                                        0299 01194000
*   BUFPTR=ADDR(MSGBUF2);           /* POINT TO EXPLANATION IN BUF2  */ 01195000
         LA    BUFPTR,MSGBUF2                                      0300 01196000
*   CALL AMDPRINT;                  /* WRITE THE ERROR EXPLANATION   */ 01197000
         BAL   @14,AMDPRINT                                        0301 01198000
*   GOTO AMDERXIT;                  /* GO TO THE ERROR EXIT          */ 01199000
*                                                                  0302 01200000
         B     AMDERXIT                                            0302 01201000
*   /*****************************************************************/ 01202000
*   /*                                                               */ 01203000
*   /* SET UP TO WRITE MSG AMD037I --LOAD MODULE NOT FOUND           */ 01204000
*   /*                                                               */ 01205000
*   /*****************************************************************/ 01206000
*                                                                  0303 01207000
*                                                                  0303 01208000
*AMD037I:                                                          0303 01209000
*   RCDPTR = AD7;                   /* GET MSG AMD037I ADDR          */ 01210000
AMD037I  L     @10,@CA00146                                        0303 01211000
         L     RCDPTR,AD7-AMDMSGTB(,@10)                           0303 01212000
*   MSGBUF1(1:MSGLNG)=MESSAGE(1:MSGLNG);     /* MOVE MSG             */ 01213000
         LH    @10,MSGLNG(,RCDPTR)                                 0304 01214000
         BCTR  @10,0                                               0304 01215000
         EX    @10,@SM00438                                        0304 01216000
*   MSGBUF1(58:65)=LCAMODUL;        /* PUT MODULE NAME IN MSG        */ 01217000
         MVC   MSGBUF1+57(8),LCAMODUL                              0305 01218000
*   BUFPTR=ADDR(MSGBUF1);           /* POINT MESSAGE BUFFER          */ 01219000
         LA    BUFPTR,MSGBUF1                                      0306 01220000
*   CALL AMDPRINT;                  /* GO WRITE THE MESSAGE          */ 01221000
         BAL   @14,AMDPRINT                                        0307 01222000
*   GOTO AMDERXIT;                  /* GO TO ERROR EXIT              */ 01223000
*                                                                  0308 01224000
         B     AMDERXIT                                            0308 01225000
*   /*****************************************************************/ 01226000
*   /*                                                               */ 01227000
*   /* SET UP TO WRITE MSG AMD038I - INVALID PARM= PARAMETER         */ 01228000
*   /*                                                               */ 01229000
*   /*****************************************************************/ 01230000
*                                                                  0309 01231000
*                                                                  0309 01232000
*AMD038I:                                                          0309 01233000
*   RCDPTR=AD8;                     /* GET ADDR OF MSG AMD038I       */ 01234000
AMD038I  L     @10,@CA00146                                        0309 01235000
         L     RCDPTR,AD8-AMDMSGTB(,@10)                           0309 01236000
*   GOTO AMDMGCOM;                  /* GO MOVE MSG INTO BUF          */ 01237000
*                                                                  0310 01238000
         B     AMDMGCOM                                            0310 01239000
*   /*****************************************************************/ 01240000
*   /*                                                               */ 01241000
*   /* SET UP TO WRITE MSG AMD039I -- LOAD MODULE CSECT NOT FOUND    */ 01242000
*   /*                                                               */ 01243000
*   /*****************************************************************/ 01244000
*                                                                  0311 01245000
*                                                                  0311 01246000
*AMD039I:                                                          0311 01247000
*   RCDPTR=AD9;                     /* GET ADDR OF MSG AMD039I       */ 01248000
AMD039I  L     @10,@CA00146                                        0311 01249000
         L     RCDPTR,AD9-AMDMSGTB(,@10)                           0311 01250000
*   MSGBUF1(1:MSGLNG)=MESSAGE(1:MSGLNG);     /* MOVE MSG             */ 01251000
         LH    @10,MSGLNG(,RCDPTR)                                 0312 01252000
         BCTR  @10,0                                               0312 01253000
         EX    @10,@SM00438                                        0312 01254000
*   MSGBUF1(29:36)=LCAMODUL;        /* PUT MODULE NAME IN MSG        */ 01255000
         MVC   MSGBUF1+28(8),LCAMODUL                              0313 01256000
*   MSGBUF1(61:68)=LCACSECT;        /* PUT CSECT NAME IN MSG         */ 01257000
         MVC   MSGBUF1+60(8),LCACSECT                              0314 01258000
*   BUFPTR=ADDR(MSGBUF1);           /* SET POINTER TO BUFFER         */ 01259000
         LA    BUFPTR,MSGBUF1                                      0315 01260000
*   CALL AMDPRINT;                  /* GO WRITE MSG AMD039I          */ 01261000
         BAL   @14,AMDPRINT                                        0316 01262000
*   GOTO AMDERXIT;                  /* GO TO ERROR EXIT              */ 01263000
*                                                                  0317 01264000
         B     AMDERXIT                                            0317 01265000
*   /*****************************************************************/ 01266000
*   /*                                                               */ 01267000
*   /* SET UP TO WRITE MSG AMD040I -- BLDL I/O ERROR                 */ 01268000
*   /*                                                               */ 01269000
*   /*****************************************************************/ 01270000
*                                                                  0318 01271000
*                                                                  0318 01272000
*AMD040I:                                                          0318 01273000
*   RCDPTR=AD10;                    /* GET ADDR OF MSG AMD040I       */ 01274000
AMD040I  L     @10,@CA00146                                        0318 01275000
         L     RCDPTR,AD10-AMDMSGTB(,@10)                          0318 01276000
*   MSGBUF1(1:MSGLNG) = MESSAGE(1:MSGLNG);     /* MOVE MSG           */ 01277000
         LH    @10,MSGLNG(,RCDPTR)                                 0319 01278000
         BCTR  @10,0                                               0319 01279000
         EX    @10,@SM00438                                        0319 01280000
*   MSGBUF1(62:69) = LCAMODUL;      /* PUT MODULE NAME IN MSG  Y02006*/ 01281000
         MVC   MSGBUF1+61(8),LCAMODUL                              0320 01282000
*   BUFPTR = ADDR(MSGBUF1);         /* SET POINTER TO MSG BUFFER     */ 01283000
         LA    BUFPTR,MSGBUF1                                      0321 01284000
*   CALL AMDPRINT;                  /* GO WRITE THE MSG              */ 01285000
         BAL   @14,AMDPRINT                                        0322 01286000
*   GOTO AMDERXIT;                  /* GO TO ERROR EXIT              */ 01287000
*                                                                  0323 01288000
         B     AMDERXIT                                            0323 01289000
*   /*****************************************************************/ 01290000
*   /*                                                               */ 01291000
*   /* SET UP TO WRITE MSG AMD044I -- RLD ERROR                      */ 01292000
*   /*                                                               */ 01293000
*   /*****************************************************************/ 01294000
*                                                                  0324 01295000
*                                                                  0324 01296000
*AMD044I1:                                                         0324 01297000
*   RCDPTR=AD14;                    /* GET ADDR OF MSG AMD044I Y02006*/ 01298000
AMD044I1 L     @10,@CA00146                                        0324 01299000
         L     RCDPTR,AD14-AMDMSGTB(,@10)                          0324 01300000
*   MSGBUF1(1:MSGLNG) = MESSAGE(1:MSGLNG);     /* MOVE MSG Y02006    */ 01301000
         LH    @10,MSGLNG(,RCDPTR)                                 0325 01302000
         BCTR  @10,0                                               0325 01303000
         EX    @10,@SM00438                                        0325 01304000
*   MSGBUF1(34:41) = LCAMODUL;      /* PUT MODULE NAME IN MSG Y02006 */ 01305000
         MVC   MSGBUF1+33(8),LCAMODUL                              0326 01306000
*   BUFPTR = ADDR(MSGBUF1);         /* SET POINTER TO MSG BUFFER     */ 01307000
         LA    BUFPTR,MSGBUF1                                      0327 01308000
*   CALL AMDPRINT;                  /* GO WRITE THE MSG Y02006       */ 01309000
         BAL   @14,AMDPRINT                                        0328 01310000
*   GOTO AMDERXIT;                  /* GO TO ERROR EXIT Y02006       */ 01311000
*                                                                  0329 01312000
         B     AMDERXIT                                            0329 01313000
*   /*****************************************************************/ 01314000
*   /*                                                               */ 01315000
*   /* SET UP TO WRITE MSG AMD044I -- ENTRY POINT NOT ZERO           */ 01316000
*   /*                                                               */ 01317000
*   /*****************************************************************/ 01318000
*                                                                  0330 01319000
*                                                                  0330 01320000
*AMD044I2:                                                         0330 01321000
*   RCDPTR=AD14;                    /* GET ADDR OF MSG AMD044I Y02006*/ 01322000
AMD044I2 L     @10,@CA00146                                        0330 01323000
         L     RCDPTR,AD14-AMDMSGTB(,@10)                          0330 01324000
*   MSGBUF1(1:MSGLNG) = MESSAGE(1:MSGLNG);     /* MOVE MSG Y02006    */ 01325000
         LH    @15,MSGLNG(,RCDPTR)                                 0331 01326000
         BCTR  @15,0                                               0331 01327000
         EX    @15,@SM00438                                        0331 01328000
*   MSGBUF1(34:41) = LCAMODUL;      /* PUT MODULE NAME IN MSG Y02006 */ 01329000
         MVC   MSGBUF1+33(8),LCAMODUL                              0332 01330000
*   RCDPTR=AD15;                    /* GET ADDR OF ERROR INDICATOR   */ 01331000
         L     RCDPTR,AD15-AMDMSGTB(,@10)                          0333 01332000
*   MSGBUF1(45:44+MSGLNG) = MESSAGE(5:MSGLNG-4); /* MOVE MSG   Y02006*/ 01333000
         LH    @10,MSGLNG(,RCDPTR)                                 0334 01334000
         BCTR  @10,0                                               0334 01335000
         EX    @10,@SM00442                                        0334 01336000
*   BUFPTR = ADDR(MSGBUF1);         /* SET POINTER TO MSG BUFFER     */ 01337000
         LA    BUFPTR,MSGBUF1                                      0335 01338000
*   CALL AMDPRINT;                  /* GO WRITE THE MSG Y02006       */ 01339000
         BAL   @14,AMDPRINT                                        0336 01340000
*   GOTO AMDERXIT;                  /* GO TO ERROR EXIT Y02006       */ 01341000
*                                                                  0337 01342000
         B     AMDERXIT                                            0337 01343000
*   /*****************************************************************/ 01344000
*   /*                                                               */ 01345000
*   /* SYNADAF MESSAGE TXT IS ALREADY IN MSG BUFFER, BUT MUST GET MSG*/ 01346000
*   /* ID AND MAIN TEXT                                              */ 01347000
*   /*                                                               */ 01348000
*   /*****************************************************************/ 01349000
*                                                                  0338 01350000
*                                                                  0338 01351000
*AMD041I:                                                          0338 01352000
*   RCDPTR = AD11;                  /* GET ADDR OF MSG AMD041I       */ 01353000
AMD041I  L     @10,@CA00146                                        0338 01354000
         L     RCDPTR,AD11-AMDMSGTB(,@10)                          0338 01355000
*   MSGBUF1(5:MSGLNG) = MESSAGE(5:MSGLNG); /* MOVE MSG               */ 01356000
*                                                                  0339 01357000
         LH    @10,MSGLNG(,RCDPTR)                                 0339 01358000
         SH    @10,@CH00219                                        0339 01359000
         EX    @10,@SM00444                                        0339 01360000
*   /*****************************************************************/ 01361000
*   /*                                                               */ 01362000
*   /* IF I/O ERROR OCURRED ON SYSPRINT GO SET UP TO WRITE I/O ERROR */ 01363000
*   /* MSG TO SYSOUT VIA A WTO                                       */ 01364000
*   /*                                                               */ 01365000
*   /*****************************************************************/ 01366000
*                                                                  0340 01367000
*   IF DCBPTR = ADDR(PRINTDCB) THEN /* ERROR DCB SYSPRINT?           */ 01368000
         LA    @10,PRINTDCB                                        0340 01369000
         CR    DCBPTR,@10                                          0340 01370000
         BE    @RT00340                                            0340 01371000
*     GOTO AMDSAWTO;                /* YES GO SET UP FOR WTO TO    0341 01372000
*                                      SYSOUT                        */ 01373000
*   ELSE                                                           0342 01374000
*                                                                  0342 01375000
*   /*****************************************************************/ 01376000
*   /*                                                               */ 01377000
*   /* IF I/O ERROR OCCURRED ON OTHER THAN SYSPRINT DATA SET THEN    */ 01378000
*   /* WRITE MSG AMD041I TO SYSPRINT                                 */ 01379000
*   /*                                                               */ 01380000
*   /*****************************************************************/ 01381000
*                                                                  0342 01382000
*     DO;                                                          0342 01383000
*       BUFPTR=ADDR(MSGBUF1);       /* SET POINTER TO MSG BUFFER     */ 01384000
         LA    BUFPTR,MSGBUF1                                      0343 01385000
*       CALL AMDPRINT;              /* GO WRITE MSG AMD041I          */ 01386000
         BAL   @14,AMDPRINT                                        0344 01387000
*       GOTO AMDERXIT;              /* GO TO ERROR EXIT              */ 01388000
         B     AMDERXIT                                            0345 01389000
*     END;                                                         0346 01390000
*                                                                  0346 01391000
*   /*****************************************************************/ 01392000
*   /*                                                               */ 01393000
*   /* SET UP TO WRITE MSG AMD042I -- GETMAIN FAILED                 */ 01394000
*   /*                                                               */ 01395000
*   /*****************************************************************/ 01396000
*                                                                  0347 01397000
*                                                                  0347 01398000
*AMD042I:                                                          0347 01399000
*   RCDPTR = AD12;                  /* GET ADDR OF MSG AMD042I       */ 01400000
AMD042I  L     @10,@CA00146                                        0347 01401000
         L     RCDPTR,AD12-AMDMSGTB(,@10)                          0347 01402000
*   GOTO AMDMGCOM;                  /* GO TO MOVE MSG                */ 01403000
*                                                                  0348 01404000
         B     AMDMGCOM                                            0348 01405000
*   /*****************************************************************/ 01406000
*   /*                                                               */ 01407000
*   /* SET UP FOR ISSUING A WTO TO SYSOUT. ERROR MSG IS ALREADY IN   */ 01408000
*   /* THE BUFFER                                                    */ 01409000
*   /*                                                               */ 01410000
*   /*****************************************************************/ 01411000
*                                                                  0349 01412000
*                                                                  0349 01413000
*AMDSAWTO:                                                         0349 01414000
*   RCDPTR= ADDR(MSGBUF1);          /* POINT TO MSG BUFFER           */ 01415000
AMDSAWTO LA    RCDPTR,MSGBUF1                                      0349 01416000
*   MSGBUF1(5:MSGLNG-1) = MSGBUF1(6:MSGLNG); /* REMOVE CNTRL CHAR    */ 01417000
         LH    @10,MSGLNG(,RCDPTR)                                 0350 01418000
         LR    @15,@10                                             0350 01419000
         SH    @15,@CH00102                                        0350 01420000
         MVC   @TS00001(125),MSGBUF1+5                             0350 01421000
         EX    @15,@SM00446                                        0350 01422000
*   MSGLNG= MSGLNG-1;               /* DECREMENT LNG BY 1            */ 01423000
         BCTR  @10,0                                               0351 01424000
         STH   @10,MSGLNG(,RCDPTR)                                 0351 01425000
*   MSGBUF1(3)= '80'X;              /* INDICATE RTE & DESCR CODES  0352 01426000
*                                      PRESENT                       */ 01427000
         MVI   MSGBUF1+2,X'80'                                     0352 01428000
*   MSGBUF1(MSGLNG+1:MSGLNG+4) = WTOCODES; /* MOVE IN RTE & DESCR  0353 01429000
*                                      CODES                         */ 01430000
         LA    @15,MSGBUF1(@10)                                    0353 01431000
         MVC   0(4,@15),WTOCODES                                   0353 01432000
*   RESPECIFY PARMGR1 RESTRICTED;                                  0354 01433000
*   PARMGR1 = RCDPTR;               /* PUT BUF ADDR IN PARMREG Y02006*/ 01434000
         LR    PARMGR1,RCDPTR                                      0355 01435000
*   GENERATE(WTO MF=(E,(1)));       /* ISSUE WRITE TO PROGRAMMER     */ 01436000
         WTO MF=(E,(1))                                                 01437000
*   GOTO AMDERXIT;                  /* GO TO ERROR EXIT              */ 01438000
         B     AMDERXIT                                            0357 01439000
*   RESPECIFY PARMGR1 UNRESTRICTED;                                0358 01440000
*                                                                  0358 01441000
*   /*****************************************************************/ 01442000
*   /*                                                               */ 01443000
*   /* COMMON MESSAGE MOVING CODE. RCDPTR CONTAINS ADDR OF MESSAGE   */ 01444000
*   /* TXT UPON ENTRY TO THIS CODE                                   */ 01445000
*   /*                                                               */ 01446000
*   /*****************************************************************/ 01447000
*                                                                  0359 01448000
*                                                                  0359 01449000
*AMDMGCOM:                                                         0359 01450000
*   MSGBUF1(1:MSGLNG) = MESSAGE(1:MSGLNG);     /* MOVE MSG INTO    0359 01451000
*                                      BUFFER                        */ 01452000
AMDMGCOM LH    @10,MSGLNG(,RCDPTR)                                 0359 01453000
         BCTR  @10,0                                               0359 01454000
         EX    @10,@SM00438                                        0359 01455000
*   BUFPTR = ADDR(MSGBUF1);         /* SET POINTER TO MSG BUFFER     */ 01456000
         LA    BUFPTR,MSGBUF1                                      0360 01457000
*   CALL AMDPRINT;                  /* GO WRITE THE MESSAGE          */ 01458000
*                                                                  0361 01459000
         BAL   @14,AMDPRINT                                        0361 01460000
*   /*****************************************************************/ 01461000
*   /*                                                               */ 01462000
*   /* AMDSALDR ERROR EXIT                                           */ 01463000
*   /*                                                               */ 01464000
*   /*****************************************************************/ 01465000
*                                                                  0362 01466000
*                                                                  0362 01467000
*AMDERXIT:                                                         0362 01468000
*   RETRNCOD= 4;                    /* SET ERROR CODE TO BE RETURNED    01469000
*                                      TO THE SYSTEM                 */ 01470000
*                                                                  0362 01471000
AMDERXIT LA    RETRNCOD,4                                          0362 01472000
*   /*****************************************************************/ 01473000
*   /*                                                               */ 01474000
*   /* AMDSALDR CLEANUP PROCESSING PRIOR TO EXITING                  */ 01475000
*   /*                                                               */ 01476000
*   /*****************************************************************/ 01477000
*                                                                  0363 01478000
*                                                                  0363 01479000
*AMDCLNUP:                                                         0363 01480000
*   IF RETRNCOD = 0 THEN            /* LOADER MAKER COMPLETE NORMALLY*/ 01481000
AMDCLNUP LTR   RETRNCOD,RETRNCOD                                   0363 01482000
         BNZ   @RF00363                                            0363 01483000
*     DO;                           /* FOR SUCCESSFUL MSG ?          */ 01484000
*       RCDPTR = AD13;              /* MOVE IN SUCCESS MSG           */ 01485000
         L     @10,@CA00146                                        0365 01486000
         L     RCDPTR,AD13-AMDMSGTB(,@10)                          0365 01487000
*       MSGBUF1(1:MSGLNG) = MESSAGE(1:MSGLNG);     /* MOVE MSG INTO     01488000
*                                      BUFFER                        */ 01489000
         LH    @10,MSGLNG(,RCDPTR)                                 0366 01490000
         BCTR  @10,0                                               0366 01491000
         EX    @10,@SM00438                                        0366 01492000
*       BUFPTR = ADDR(MSGBUF1);     /* SET POINTER TO MSG BUFFER     */ 01493000
         LA    BUFPTR,MSGBUF1                                      0367 01494000
*       CALL AMDPRINT;              /* GO WRITE THE MESSAGE          */ 01495000
         BAL   @14,AMDPRINT                                        0368 01496000
*     END;                          /* CLOSE ALL DATA SETS           */ 01497000
*   GENERATE;                       /* UNCONDITIONALLY CLOSE ALL DCBS*/ 01498000
*                                                                  0370 01499000
@RF00363 DS    0H                                                  0370 01500000
         CLOSE  (PRINTDCB,,SYS1DCB,,SYS2DCB,,SYS3DCB,,SYS4DCB)          01501000
*   /*****************************************************************/ 01502000
*   /*                                                               */ 01503000
*   /* IF CORE WAS OBTAINED FOR AN OUTPUT BUFFER FREE THE CORE       */ 01504000
*   /*                                                               */ 01505000
*   /*****************************************************************/ 01506000
*                                                                  0371 01507000
*   RESPECIFY (WKREG) RESTRICTED;                                  0371 01508000
*   IF OTBUFADD ^= 0 THEN                                          0372 01509000
         L     @10,OTBUFADD                                        0372 01510000
         LTR   @10,@10                                             0372 01511000
         BZ    @RF00372                                            0372 01512000
*     DO;                           /* TEST FOR AN OUTPUT BUFFER ADDR*/ 01513000
*       WKREG = OTBUFSIZ;           /* YES, GET BUFSIZE AND FREE IT  */ 01514000
         L     WKREG,OTBUFSIZ                                      0374 01515000
*       GENERATE;                                                  0375 01516000
          FREEMAIN   E,LV=(WKREG),A=OTBUFADD                            01517000
*     END;                                                         0376 01518000
*                                                                  0376 01519000
*   /*****************************************************************/ 01520000
*   /*                                                               */ 01521000
*   /* IF CORE WAS OBTAINED FOR AN INPUT BUFFER FREE THE CORE        */ 01522000
*   /*                                                               */ 01523000
*   /*****************************************************************/ 01524000
*                                                                  0377 01525000
*   IF INBUFADD ^= 0 THEN                                          0377 01526000
@RF00372 L     @10,INBUFADD                                        0377 01527000
         LTR   @10,@10                                             0377 01528000
         BZ    @RF00377                                            0377 01529000
*     DO;                           /* TEST FOR AN INPUT BUFFER ADDR */ 01530000
*       WKREG=INBUFSIZ * 2;         /* YES, GET BUFSIZE AND FREE IT     01531000
*                                      Y02006                        */ 01532000
         LH    WKREG,INBUFSIZ                                      0379 01533000
         AR    WKREG,WKREG                                         0379 01534000
*       GENERATE;                                                  0380 01535000
          FREEMAIN E,LV=(WKREG),A=INBUFADD                              01536000
*     END;                                                         0381 01537000
*   RESPECIFY (WKREG) UNRESTRICTED;                                0382 01538000
*                                                                  0382 01539000
@RF00377 DS    0H                                                  0383 01540000
*   /*****************************************************************/ 01541000
*   /*                                                               */ 01542000
*   /* AMDSALDR EXIT TO SYSTEM                                       */ 01543000
*   /*                                                               */ 01544000
*   /*****************************************************************/ 01545000
*                                                                  0383 01546000
*   RETURN CODE(RETRNCOD);                                         0383 01547000
*                                                                  0383 01548000
         LR    @15,RETRNCOD                                        0383 01549000
         L     @13,4(,@13)                                         0383 01550000
         L     @14,12(,@13)                                        0383 01551000
         LM    @00,@12,20(@13)                                     0383 01552000
         BR    @14                                                 0383 01553000
*   /*****************************************************************/ 01554000
*   /*                                                               */ 01555000
*   /* AMDSALDR WRITE ROUTINES:                                      */ 01556000
*   /*                                                               */ 01557000
*   /*       THE FOLLOWING PROCEDURE CONTAINS TWO WRITE ROUTINES. ONE*/ 01558000
*   /*       ROUTINE IS FOR WRITING TO SYSUT3 AND SYSUT4. THE OTHER  */ 01559000
*   /*       ROUTINE IS FOR WRITING ERROR MESSAGES TO SYSPRINT.      */ 01560000
*   /*                                                               */ 01561000
*   /* ENTRYS:                                                       */ 01562000
*   /*                                                               */ 01563000
*   /*       AMDWRITE IS THE ENTRY POINT FOR WRITING TO SYSUT3 OR    */ 01564000
*   /*       SYSUT4 LCAOTPUT MUST POINT TO THE BEGINNING OF THE      */ 01565000
*   /*       RECORD AND LCAOTEOR MUST POINT TO THE END OF THE RECORD */ 01566000
*   /*       TO BE WRITTEN. ALSO LCAOTDCB MUST CONTAIN THE ADDRESS OF*/ 01567000
*   /*       THE DCB FOR THE DATA SET TO WHICH THE RECORD IS TO BE   */ 01568000
*   /*       WRITTEN. AMDPRINT IS THE ENTRY POINT FOR WRITING ERROR  */ 01569000
*   /*       MESSAGES TO SYSPRINT. BUFPTR MUST CONTAIN THE ADDRESS OF*/ 01570000
*   /*       THE MESSAGE BUFFER WHEN CONTROL IS PASSED TO THIS ENTRY */ 01571000
*   /*       POINT.                                                  */ 01572000
*   /*                                                               */ 01573000
*   /*****************************************************************/ 01574000
*                                                                  0384 01575000
*                                                                  0384 01576000
*AMDSAIO:                                                          0384 01577000
*   PROCEDURE OPTIONS(DONTSAVE,NOSAVEAREA);                        0384 01578000
AMDSAIO  DS    0H                                                  0385 01579000
*   RESPECIFY (DCBPTR,BUFPTR,WKREG) RESTRICTED;                    0385 01580000
*   DCL                                                            0386 01581000
*         IOSAV14 FIXED(31);        /* SAVEAREA FOR REG 14           */ 01582000
*                                                                  0386 01583000
*   /*****************************************************************/ 01584000
*   /*                                                               */ 01585000
*   /* SYSUT3 AND SYSUT4 WRITE PROCESSING                            */ 01586000
*   /*                                                               */ 01587000
*   /*****************************************************************/ 01588000
*                                                                  0387 01589000
*                                                                  0387 01590000
*AMDWRITE:                                                         0387 01591000
*   ENTRY;                                                         0387 01592000
         B     @EC00387                                            0387 01593000
AMDWRITE DS    0H                                                  0387 01594000
@EC00387 DS    0H                                                  0388 01595000
*   RESPECIFY (PARMGR1,RETRNREG) RESTRICTED;                       0388 01596000
*   IOSAV14 = RETRNREG;             /* SAVE REG 14                   */ 01597000
         LR    IOSAV14,RETRNREG                                    0389 01598000
*   RESPECIFY RETRNREG UNRESTRICTED;                               0390 01599000
*   DCBPTR = LCAOTDCB;              /* GET DCB ADDRESS FOR WRITE     */ 01600000
         L     DCBPTR,LCAOTDCB                                     0391 01601000
*   BUFPTR =LCAOTPUT;               /* GET ADDR OF BEGIN OF RCD      */ 01602000
         L     @10,LCAOTPUT                                        0392 01603000
         LR    BUFPTR,@10                                          0392 01604000
*   WKREG = LCAOTEOR - LCAOTPUT;    /* CALCULATE RCD LNG             */ 01605000
         LCR   @10,@10                                             0393 01606000
         A     @10,LCAOTEOR                                        0393 01607000
         LR    WKREG,@10                                           0393 01608000
*   PARMGR1 = ADDR(SYSDECB);        /* GET DECB ADDR Y02006          */ 01609000
         LA    PARMGR1,SYSDECB                                     0394 01610000
*   GENERATE FLOWS(AMDSYND1);       /* WRITE THE RCD                 */ 01611000
          WRITE (PARMGR1),SF,(DCBPTR),(BUFPTR),(WKREG),,,MF=E    Y02006 01612000
          CHECK (PARMGR1)                                        Y02006 01613000
*   GOTO AMDIOXIT;                  /* RETURN BACK TO CALLER         */ 01614000
*                                                                  0396 01615000
         B     AMDIOXIT                                            0396 01616000
*   /*****************************************************************/ 01617000
*   /*                                                               */ 01618000
*   /* SYSPRINT I/O PROCESSING                                       */ 01619000
*   /*                                                               */ 01620000
*   /*****************************************************************/ 01621000
*                                                                  0397 01622000
*                                                                  0397 01623000
*AMDPRINT:                                                         0397 01624000
*   ENTRY;                                                         0397 01625000
AMDPRINT DS    0H                                                  0398 01626000
*   RESPECIFY RETRNREG RESTRICTED;                                 0398 01627000
*   IOSAV14 = RETRNREG;             /* SAVE REG 14                   */ 01628000
         LR    IOSAV14,RETRNREG                                    0399 01629000
*   GENERATE FLOWS(AMDSYND2);       /* WRITE THE MSG                 */ 01630000
    PUT PRINTDCB,(BUFPTR)                                               01631000
*   RESPECIFY (DCBPTR,BUFPTR,WKREG) UNRESTRICTED;                  0401 01632000
*                                                                  0401 01633000
*AMDIOXIT:                                                         0402 01634000
*   RETRNREG= IOSAV14;              /* RESTORE REG 14                */ 01635000
AMDIOXIT LR    RETRNREG,IOSAV14                                    0402 01636000
*   RESPECIFY RETRNREG UNRESTRICTED;                               0403 01637000
*   RETURN;                         /* RETURN BACK TO CALLER         */ 01638000
@EL00002 DS    0H                                                  0404 01639000
@EF00002 DS    0H                                                  0404 01640000
@ER00002 BR    @14                                                 0404 01641000
*   END AMDSAIO;                                                   0405 01642000
*                                                                  0405 01643000
*   /*****************************************************************/ 01644000
*   /*                                                               */ 01645000
*   /* AMDSATXT:                                                     */ 01646000
*   /*                                                               */ 01647000
*   /*       THIS SUBROUTINE OF AMDSALDR DOES THE ACTUAL REMOVAL OF  */ 01648000
*   /*       CONTROL INFORMATION FROM OBJ CSECTS OR LOAD MODULES SO  */ 01649000
*   /*       THAT ONLY THE TEXT REMAINS. WHEN IT IS ENTERED THE      */ 01650000
*   /*       LCAFUNC BIT MUST INDICATE WHETHER A LOAD MODULE CSECT OR*/ 01651000
*   /*       OBJECT CSECT IS TO BE PROCESSED. ALSO LCAINDCB MUST     */ 01652000
*   /*       CONTAIN THE ADDRESS OF THE DCB FOR THE INPUT DATA SET,  */ 01653000
*   /*       LCAINPUT MUST POINT TO AN INPUT BUFFER, AND LCAOTPUT    */ 01654000
*   /*       MUST POINT TO A BUFFER IN WHICH THE TEXT IS TO BE MOVED.*/ 01655000
*   /*       IF A LOAD MODULE IS TO BE PROCESSED THEN ITS NAME AND   */ 01656000
*   /*       THE CSECT MUST BE IN LCAMODUL AND LCACSECT RESPECTIVELY.*/ 01657000
*   /*       IF AN OBJECT CSECT IS TO BE PROCESSED ONLY THE LCACSECT */ 01658000
*   /*       FIELD IS REQUIRED TO CONTAIN THE CSECT NAME. WHEN       */ 01659000
*   /*       AMDSATXT EXITS LCAOTPUT WILL POINT TO THE BEGINNING OF  */ 01660000
*   /*       THE TEXT THAT WAS MOVED INTO THE THE BUFFER AND LCAOTEOR*/ 01661000
*   /*       WILL POINT TO THE END OF THE TEXT.                      */ 01662000
*   /*                                                               */ 01663000
*   /*****************************************************************/ 01664000
*                                                                  0406 01665000
*                                                                  0406 01666000
*AMDSATXT:                                                         0406 01667000
*   PROCEDURE;                      /* STANDARD LINKAGE CONVENTIONS     01668000
*                                      ARE USED                      */ 01669000
AMDSATXT STM   @14,@12,@SA00003                                    0406 01670000
*   DCL                                                            0407 01671000
*         CTLSTART PTR(31);         /* PTR TO CNTRL ENTRIES IN A MOD    01672000
*                                      CNTRL RCD                     */ 01673000
*   DCL                                                            0408 01674000
*         CTLEND PTR(31);           /* PTR TO END OF CONTRL ENTRIES     01675000
*                                      IN MOD CNTRL R CD             */ 01676000
*   DCL                                                            0409 01677000
*         ENTRYPTR PTR(31) REG(6);  /* USED AS PTR TO ESD ENTRIES    */ 01678000
*   DCL                                                            0410 01679000
*                                   /* POINTER TO INPUT IOB          */ 01680000
*         IOBPTR PTR(31) BASED(DECBPTR+16);                        0410 01681000
*   DCL                                                            0411 01682000
*                                   /* RESIDUAL CNT IN INPUT CSW     */ 01683000
*         CSWRESID FIXED(15) BASED(IOBPTR+14);                     0411 01684000
*   DCL                                                            0412 01685000
*                                   /* USED TO REF. OBJ AND MOD RCD     01686000
*                                      ID'S                          */ 01687000
*         RCDID CHAR(1) BASED(RCDPTR);                             0412 01688000
*   DCL                                                            0413 01689000
*                                   /* USED TO REF. OBJ RCD TYPES --    01690000
*                                      ESD, TXT , ETC.               */ 01691000
*         RCDTYPE CHAR(3) BASED(RCDPTR+1);                         0413 01692000
*   DCL                                                            0414 01693000
*         BLKEND FIXED(31);         /* USED WHEN DEBLOCKING OBJ INPUT   01694000
*                                      -- POINTS TO END OF PHYSICAL     01695000
*                                      RECORD IN BUFFER              */ 01696000
*   DCL                                                            0415 01697000
*         OBJID CHAR(1) INIT('02'X);/* OBJ RCD ID                    */ 01698000
*   DCL                                                            0416 01699000
*         BUFNDX1 FIXED(31);        /* BUFFER INDEX FOR MOVING IN TXT*/ 01700000
*   DCL                                                            0417 01701000
*         BUFNDX2 FIXED(31);        /* BUFERR INDEX FOR MOVING IN TXT*/ 01702000
*   DCL                                                            0418 01703000
*         CSECTORG FIXED(31);       /* SAVEAREA FOR START ADDR OF  0418 01704000
*                                      CSECT                         */ 01705000
*   DCL                                                            0419 01706000
*         CSECTEND FIXED(31);       /* SAVEAREA FOR END ADDR OF CSECT*/ 01707000
*   DCL                                                            0420 01708000
*                                   /* USED TO REF. ESD RCD COUNT  0420 01709000
*                                      FIELD FOR NUMBER OF ESD     0420 01710000
*                                      ENTRIES                       */ 01711000
*         ESDCNT FIXED(15) BASED(RCDPTR+10);                       0420 01712000
*   DCL                                                            0421 01713000
*                                   /* USED TO REF. CESD RCD COUNT 0421 01714000
*                                      FIELD FOR NUMBER OF CESD    0421 01715000
*                                      ENTRIES                       */ 01716000
*         CESDCNT FIXED(15) BASED(RCDPTR+6);                       0421 01717000
*   DCL                                                            0422 01718000
*         OFFSET1 FIXED(31);        /* OFFSET OF FIRST BYTE OF TXT 0422 01719000
*                                      DATA IN INPU T BUFFER TO BE 0422 01720000
*                                      MOVED                         */ 01721000
*   DCL                                                            0423 01722000
*         OFFSET2 FIXED(31);        /* OFFSET OF LAST BYTE OF TXT IN    01723000
*                                      INPUT BUF FER TO BE MOVED     */ 01724000
*   DCL                                                            0424 01725000
*         LMRCDLNG FIXED(31);       /* LOAD MODULE RCD LENGTH  YM0651*/ 01726000
*   DCL                                                            0425 01727000
*         IOBCSWCT FIXED(15) BASED(DCBIOBA+22); /* RESIDUAL COUNT IN    01728000
*                                      CSW                     YM0651*/ 01729000
*   DCL                                                            0426 01730000
*         DCBIOBA PTR(31) BASED(DCBPTR+68); /* ADDRESS OF IOB  YM0651*/ 01731000
*   DCL                                                            0427 01732000
*         I FIXED(31);              /* USED IN DO LOOPS FOR COUNTER  */ 01733000
*   DCL                                                            0428 01734000
*         RLDBUF1 PTR(31);          /* ADDR OF FIRST BUFFER    Y02006*/ 01735000
*   DCL                                                            0429 01736000
*         RLDBUF2 PTR(31);          /* ADDR OF SECOND BUFFER Y02006  */ 01737000
*   DCL                                                            0430 01738000
*         1 BLDLAREA BDY(HWORD),    /* BLDL PARAMETER LIST     Y02006*/ 01739000
*           3 * FIXED(15) INIT(1),  /* 1 ENTRY IN LIST         Y02006*/ 01740000
*           3 * FIXED(15) INIT(32), /* LENGTH OF LIST          Y02006*/ 01741000
*           3 BLDLNAME CHAR(8),     /* MODULE NAME             Y02006*/ 01742000
*           3 BLDLTTRK CHAR(4),     /* STARTING TTR            Y02006*/ 01743000
*           3 * CHAR(12),           /* UNUSED                  Y02006*/ 01744000
*           3 BLDLMLEN CHAR(3),     /* VIRTUAL STORAGE         Y02006   01745000
*                                      REQUIRED BY MODULE      Y02006*/ 01746000
*           3 BLDLTXT1 CHAR(2),     /* LENGTH OF TEXT RECORDS  Y02006*/ 01747000
*           3 * CHAR(3);            /* UNUSED                  Y02006*/ 01748000
*                                                                  0430 01749000
*   /*****************************************************************/ 01750000
*   /*                                                               */ 01751000
*   /* THE FOLLOWING TABLE DEFINES ALL THE POSSIBLE OBJ RECORD TYPES */ 01752000
*   /* THAT ARE PROCESSED BY AMDSATXT                                */ 01753000
*   /*                                                               */ 01754000
*   /*****************************************************************/ 01755000
*                                                                  0431 01756000
*   DCL                                                            0431 01757000
*         1 OBJTYPS,                                               0431 01758000
*             3 ESD CHAR(3) INIT('ESD'),                           0431 01759000
*             3 TXT CHAR(3) INIT('TXT'),                           0431 01760000
*             3 ENDD CHAR(3) INIT('END'),                          0431 01761000
*             3 RLD CHAR(3) INIT('RLD');                           0431 01762000
*                                                                  0431 01763000
*   /*****************************************************************/ 01764000
*   /*                                                               */ 01765000
*   /* THE FOLLOWING STRUCTURE DEFINES THE FIRST 14 BYTES OF A LOAD  */ 01766000
*   /* MODULE CONTROL RECORD                                         */ 01767000
*   /*                                                               */ 01768000
*   /*****************************************************************/ 01769000
*                                                                  0432 01770000
*   DCL                                                            0432 01771000
*         1 CTLPREFX BASED(RCDPTR),                                0432 01772000
*             3 CTLID CHAR(1),      /* CNTRL RCD ID                  */ 01773000
*                 5 NOTCHKED BIT(7),                               0432 01774000
*                 5 CTLIDBIT BIT(1), /* INDICATES CNTRL RCD          */ 01775000
*             3 CTLRSRVD CHAR(3),                                  0432 01776000
*             3 CTLCNT FIXED(15),   /* NUMBER OF BYTES OF CNTRL DATA */ 01777000
*             3 CTLRLDCT FIXED(15), /* NUMBER FO BYTES OF RLD DATA   */ 01778000
*             3 CTLCCW CHAR(8);     /* CNTRL RCD CCW FIELD           */ 01779000
*                                                                  0432 01780000
*   /*****************************************************************/ 01781000
*   /*                                                               */ 01782000
*   /* THE FOLLOWING STRUCTURE DEFINES THE FORMAT OF A CONTROL ENTRY */ 01783000
*   /* IN A CONTROL RECORD                                           */ 01784000
*   /*                                                               */ 01785000
*   /*****************************************************************/ 01786000
*                                                                  0433 01787000
*   DCL                                                            0433 01788000
*         1 CTLENTRY BASED(ENTRYPTR),                              0433 01789000
*             3 ENTRYID FIXED(15),  /* IDENTIFIES CSECT THIS ENTRY IS   01790000
*                                      FO R                          */ 01791000
*             3 TXTSIZE FIXED(15);  /* NUMBER OF BYTES IN FOLLOWING     01792000
*                                      TXT R CD FOR THE CSECT      0433 01793000
*                                      IDENTIFIEDBY THE ENTRY ID     */ 01794000
*                                                                  0433 01795000
*   /*****************************************************************/ 01796000
*   /*                                                               */ 01797000
*   /* THE FOLLOWING STRUCTURE DEFINES THE FORMAT OF AN OBJ TXT      */ 01798000
*   /* RECORD                                                        */ 01799000
*   /*                                                               */ 01800000
*   /*****************************************************************/ 01801000
*                                                                  0434 01802000
*   DCL                                                            0434 01803000
*         1 TXTFMT BASED(RCDPTR),                                  0434 01804000
*             3 TXTIDENT CHAR(1),   /* TXT OBJ ID - X'02'            */ 01805000
*             3 TXTTYPE CHAR(3),    /* TYPE OF TXT RCD               */ 01806000
*             3 TXTBLNK1 CHAR(1),   /* UNUSED                        */ 01807000
*             3 TXTADDR PTR(24),    /* CSECT ADDR FOR FIRST BYTE OF     01808000
*                                      DATA I N THIS TXT             */ 01809000
*             3 TXTBLNK2 CHAR(2),   /* NOT USED                      */ 01810000
*             3 TXTLNG FIXED(15),   /* NUMBER OF BYTES OF TXT DATA   */ 01811000
*             3 TXTBLNK3 CHAR(2),   /* UNUSED                        */ 01812000
*             3 TXTSDID CHAR(2),    /* SECTION DEF. ID               */ 01813000
*             3 TXTDATA CHAR(56);   /* TXT DATA BYTES                */ 01814000
*                                                                  0434 01815000
*   /*****************************************************************/ 01816000
*   /*                                                               */ 01817000
*   /* THE FOLLOWING STRUCTURE DEFINES THE FORMAT OF AN ESD/CESD     */ 01818000
*   /* ENTRY                                                         */ 01819000
*   /*                                                               */ 01820000
*   /*****************************************************************/ 01821000
*                                                                  0435 01822000
*   DCL                                                            0435 01823000
*         1 ESDENTRY BASED(ENTRYPTR),                              0435 01824000
*             3 ESDNAME CHAR(8),    /* CSECT NAME                    */ 01825000
*             3 * BIT(4),           /* UNUSED ESD IDENTIFIER FOR LE  */ 01826000
*             3 ESDTYPE BIT(4),     /* ESD TYPE                      */ 01827000
*             3 ESDADDR PTR(24),    /* START ADDR OF CSECT           */ 01828000
*             3 ESDSEG CHAR(1),     /* NOT USED BY AMDSATXT          */ 01829000
*             3 ESDLNG PTR(24);     /* LENGTH OF CSECT               */ 01830000
*                                                                  0435 01831000
*   /*****************************************************************/ 01832000
*   /*                                                               */ 01833000
*   /* BEGIN TEXT PROCESSING                                         */ 01834000
*   /*                                                               */ 01835000
*   /*****************************************************************/ 01836000
*                                                                  0436 01837000
*   RESPECIFY (DCBPTR,BUFPTR,DECBPTR,RCDPTR) RESTRICTED;           0436 01838000
*   DCBPTR=LCAINDCB;                /* SET POINTER TO INPUT DCB      */ 01839000
         L     DCBPTR,LCAINDCB                                     0437 01840000
*   DECBPTR=ADDR(SYSDECB);          /* SET POINTER TO THE DECB       */ 01841000
         LA    DECBPTR,SYSDECB                                     0438 01842000
*   BUFPTR=LCAOTPUT;                /* SET POINTER TO OUTPUT BUFFER  */ 01843000
         L     BUFPTR,LCAOTPUT                                     0439 01844000
*   LCAWKFLG='00'X;                 /* CLEAR WORK FLAGS              */ 01845000
*                                                                  0440 01846000
         MVI   LCAWKFLG,X'00'                                      0440 01847000
*   /*****************************************************************/ 01848000
*   /*                                                               */ 01849000
*   /* DETERMINE IF OBJ CSECT OR LOAD MODULE CSECT IS TO BE PROCESSED*/ 01850000
*   /*                                                               */ 01851000
*   /*****************************************************************/ 01852000
*                                                                  0441 01853000
*   IF LCAFUNC='1'B THEN            /* MODULE TO BE PROC ?           */ 01854000
         TM    LCAFUNC,B'10000000'                                 0441 01855000
         BO    @RT00441                                            0441 01856000
*     GOTO AMDFIND;                 /* YES, GO TO FIND MODULE        */ 01857000
*   RESPECIFY (ENTRYPTR) RESTRICTED;                               0443 01858000
*                                                                  0443 01859000
*   /*****************************************************************/ 01860000
*   /*                                                               */ 01861000
*   /* READ AN OBJECT RECORD FOR ESD PROCESSING                      */ 01862000
*   /*                                                               */ 01863000
*   /*****************************************************************/ 01864000
*                                                                  0444 01865000
*                                                                  0444 01866000
*AMDOBJ:                                                           0444 01867000
*   RCDPTR=LCAINPUT;                /* POINT TO INPUT BUFFER         */ 01868000
AMDOBJ   L     RCDPTR,LCAINPUT                                     0444 01869000
*   GENERATE FLOWS(AMDSYND3,AMDOBEOD); /* READ A PHYSICAL BLOCK      */ 01870000
          READ (DECBPTR),SF,(DCBPTR),(RCDPTR),'S',,,MF=E                01871000
          CHECK (DECBPTR)                                               01872000
*   BLKEND = RCDPTR + (DCBBLKSI - CSWRESID); /* POINT TO END FO BLK  */ 01873000
*                                                                  0446 01874000
         L     @10,IOBPTR+16(,DECBPTR)                             0446 01875000
         LH    BLKEND,DCBBLKSI+62(,DCBPTR)                         0446 01876000
         SH    BLKEND,CSWRESID+14(,@10)                            0446 01877000
         AR    BLKEND,RCDPTR                                       0446 01878000
*   /*****************************************************************/ 01879000
*   /*                                                               */ 01880000
*   /* CHECK IF LOGICAL RECORD IS A VALID OBJ RECORD AND THEN IF IT'S*/ 01881000
*   /* AN ESD TYPE SEARCH THE ESD ENTRIES FOR A MATCH ON THE CSECT   */ 01882000
*   /* NAME IN THE LCACSECT FIELD                                    */ 01883000
*   /*                                                               */ 01884000
*   /*****************************************************************/ 01885000
*                                                                  0447 01886000
*                                                                  0447 01887000
*AMDESD:                                                           0447 01888000
*   IF RCDID=OBJID THEN             /* IS RCD AN OBJ ESD RCD?        */ 01889000
AMDESD   CLC   RCDID(1,RCDPTR),OBJID                               0447 01890000
         BNE   @RF00447                                            0447 01891000
*     IF RCDTYPE=ESD THEN                                          0448 01892000
         CLC   RCDTYPE+1(3,RCDPTR),ESD                             0448 01893000
         BNE   @RF00448                                            0448 01894000
*       DO;                         /* YES, DO FOLLOWING             */ 01895000
*         ENTRYPTR= RCDPTR + 16;      /* POSITION TO ESD ENTRIES     */ 01896000
*                                                                  0450 01897000
         LA    ENTRYPTR,16                                         0450 01898000
         AR    ENTRYPTR,RCDPTR                                     0450 01899000
*   /*****************************************************************/ 01900000
*   /*                                                               */ 01901000
*   /* SEARCH ESD ENTRIES                                            */ 01902000
*   /*                                                               */ 01903000
*   /*****************************************************************/ 01904000
*                                                                  0451 01905000
*         DO I=ESDCNT TO 0 BY -16;                                 0451 01906000
         LH    I,ESDCNT+10(,RCDPTR)                                0451 01907000
         B     @DE00451                                            0451 01908000
@DL00451 DS    0H                                                  0452 01909000
*           IF ESDTYPE='0000'B THEN /* IS ESD A SECTION DEF. ?       */ 01910000
         TM    ESDTYPE(ENTRYPTR),B'00001111'                       0452 01911000
         BNZ   @RF00452                                            0452 01912000
*             IF ESDNAME=LCACSECT THEN /* IS THIS THE ENTRY FOR THE     01913000
*                                      CSEC T?                       */ 01914000
         CLC   ESDNAME(8,ENTRYPTR),LCACSECT                        0453 01915000
         BE    @RT00453                                            0453 01916000
*               GOTO AMDOBTXT;      /* YES, GO PROCESS TXT DATA      */ 01917000
*           ENTRYPTR = ENTRYPTR +16;      /* NO, POINT TO NEXT ENTRY */ 01918000
@RF00452 AH    ENTRYPTR,@CH00280                                   0455 01919000
*         END;                                                     0456 01920000
*                                                                  0456 01921000
         AH    I,@CH00358                                          0456 01922000
@DE00451 LTR   I,I                                                 0456 01923000
         BNM   @DL00451                                            0456 01924000
*   /*****************************************************************/ 01925000
*   /*                                                               */ 01926000
*   /* IF ESD RECORD DOESN'T CONTAIN THE ESD ENTRY FOR THE CSECT GET */ 01927000
*   /* NEXT LOGICAL RECORD AND GO CHECK IT                           */ 01928000
*   /*                                                               */ 01929000
*   /*****************************************************************/ 01930000
*                                                                  0457 01931000
*         RCDPTR= RCDPTR + DCBLRECL; /* POINT TO NEXT LOGICAL RCD    */ 01932000
         AH    RCDPTR,DCBLRECL+82(,DCBPTR)                         0457 01933000
*         IF RCDPTR >= BLKEND THEN  /* END OF BLOCK REACHED?         */ 01934000
         CR    RCDPTR,BLKEND                                       0458 01935000
         BNL   @RT00458                                            0458 01936000
*           GOTO AMDOBJ;            /* YES, GO READ A PHYSICAL RECORD*/ 01937000
*         ELSE                                                     0460 01938000
*           GOTO AMDESD;            /* NO, GO CHECK FOR AN ESD RECORD*/ 01939000
         B     AMDESD                                              0460 01940000
*       END;                                                       0461 01941000
*     ELSE                                                         0462 01942000
*                                                                  0462 01943000
*   /*****************************************************************/ 01944000
*   /*                                                               */ 01945000
*   /* IF A NON ESD TYPE OBJ RECORD IS ENCOUNTERED BEFORE FINDING THE*/ 01946000
*   /* ESD ENTRY FOR THE CSECT THEN THE CSECT NAME MUST BE INVALID OR*/ 01947000
*   /* ELSE WRONG OBJECT DECK                                        */ 01948000
*   /*                                                               */ 01949000
*   /*****************************************************************/ 01950000
*                                                                  0462 01951000
*       RETRNCOD = 3;               /* SET OBJ CSECT NOT FND ERR CODE*/ 01952000
@RF00448 LA    RETRNCOD,3                                          0462 01953000
*   ELSE                                                           0463 01954000
*                                                                  0463 01955000
*   /*****************************************************************/ 01956000
*   /*                                                               */ 01957000
*   /* IF LOGICAL RECORD DOESN'T HAVE AN OBJ ID THEN SET RETURN CODE */ 01958000
*   /* AND EXIT                                                      */ 01959000
*   /*                                                               */ 01960000
*   /*****************************************************************/ 01961000
*                                                                  0463 01962000
*     RETRNCOD = 6;                 /* SET UNIDENTIFIABLE RCD ERR  0463 01963000
*                                      CODE                          */ 01964000
         B     @RC00447                                            0463 01965000
@RF00447 LA    RETRNCOD,6                                          0463 01966000
*   GOTO AMDEXIT;                   /* RETURN TO MAINLINE ROUTINE    */ 01967000
*                                                                  0464 01968000
         B     AMDEXIT                                             0464 01969000
*   /*****************************************************************/ 01970000
*   /*                                                               */ 01971000
*   /* ESD ENTRY FOUND --- PROCESS TXT FOR CSECT                     */ 01972000
*   /*                                                               */ 01973000
*   /*****************************************************************/ 01974000
*                                                                  0465 01975000
*                                                                  0465 01976000
*AMDOBTXT:                                                         0465 01977000
*   LCANMFND='1'B;                  /* INDICATE NAME FOUND           */ 01978000
AMDOBTXT OI    LCANMFND,B'00010000'                                0465 01979000
*   CSECTORG=ESDADDR;               /* SAVE START ADDR OF CSECT      */ 01980000
         L     @10,ESDADDR-1(,ENTRYPTR)                            0466 01981000
         LA    @10,0(,@10)                                         0466 01982000
         ST    @10,CSECTORG                                        0466 01983000
*   CSECTEND = ESDADDR + ESDLNG;    /* SAVE ADDR OF END OF CSECT     */ 01984000
         MVC   @ZT00001+1(3),ESDLNG(ENTRYPTR)                      0467 01985000
         A     @10,@ZT00001                                        0467 01986000
         ST    @10,CSECTEND                                        0467 01987000
*   RESPECIFY (ENTRYPTR) UNRESTRICTED;                             0468 01988000
*                                                                  0468 01989000
*AMDTXT:                                                           0469 01990000
*   RCDPTR= RCDPTR+DCBLRECL;        /* POINT TO NEXT LOGICAL RCD     */ 01991000
AMDTXT   AH    RCDPTR,DCBLRECL+82(,DCBPTR)                         0469 01992000
*   IF RCDPTR >= BLKEND THEN        /* END OF BLOCK?                 */ 01993000
         CR    RCDPTR,BLKEND                                       0470 01994000
         BL    @RF00470                                            0470 01995000
*     DO;                           /* YES DO FOLLOWING              */ 01996000
*       RCDPTR=LCAINPUT;            /* POINT TO INPUT BUFFER         */ 01997000
         L     RCDPTR,LCAINPUT                                     0472 01998000
*       GENERATE FLOWS(AMDSYND3,AMDOBEOD); /* READ A PHYSICAL RECORD */ 01999000
          READ (DECBPTR),SF,(DCBPTR),(RCDPTR),'S',,,MF=E                02000000
          CHECK (DECBPTR)                                               02001000
*       BLKEND =RCDPTR + (DCBBLKSI-CSWRESID); /* POINT TO END OF   0474 02002000
*                                      BLOCK                         */ 02003000
         L     @10,IOBPTR+16(,DECBPTR)                             0474 02004000
         LH    BLKEND,DCBBLKSI+62(,DCBPTR)                         0474 02005000
         SH    BLKEND,CSWRESID+14(,@10)                            0474 02006000
         AR    BLKEND,RCDPTR                                       0474 02007000
*     END;                                                         0475 02008000
*                                                                  0475 02009000
*   /*****************************************************************/ 02010000
*   /*                                                               */ 02011000
*   /* CHECK IF LOGICAL RECORD IS AN OBJECT RECORD                   */ 02012000
*   /*                                                               */ 02013000
*   /*****************************************************************/ 02014000
*                                                                  0476 02015000
*   IF RCDID ^= OBJID THEN          /* IS RCD AN OBJ RCD?            */ 02016000
@RF00470 CLC   RCDID(1,RCDPTR),OBJID                               0476 02017000
         BE    @RF00476                                            0476 02018000
*     DO;                           /* NO, DO FOLLOWING              */ 02019000
*       RETRNCOD = 6;               /* SET UNIDENTIFIABLE RCD ERR  0478 02020000
*                                      CODE                          */ 02021000
         LA    RETRNCOD,6                                          0478 02022000
*       GOTO AMDEXIT;               /* RETURN TO THE MAINLINE ROUTINE*/ 02023000
         B     AMDEXIT                                             0479 02024000
*     END;                                                         0480 02025000
*                                                                  0480 02026000
*   /*****************************************************************/ 02027000
*   /*                                                               */ 02028000
*   /* CHECK IF OBJECT RECORD IS AN END STATEMENT. IF SO SET END     */ 02029000
*   /* SWITCH AND GET NEXT RECORD                                    */ 02030000
*   /*                                                               */ 02031000
*   /*****************************************************************/ 02032000
*                                                                  0481 02033000
*   IF RCDTYPE=ENDD THEN            /* IS OBJ RCD AN END RCD?        */ 02034000
@RF00476 CLC   RCDTYPE+1(3,RCDPTR),ENDD                            0481 02035000
         BNE   @RF00481                                            0481 02036000
*     DO;                           /* YES DO FOLLOWING              */ 02037000
*       LCAENDSW = '1'B;            /* SET END SWITCH ON             */ 02038000
         OI    LCAENDSW,B'00100000'                                0483 02039000
*       GOTO AMDTXT;                /* GO GET NEXT LOGICAL RCD       */ 02040000
         B     AMDTXT                                              0484 02041000
*     END;                                                         0485 02042000
*                                                                  0485 02043000
*   /*****************************************************************/ 02044000
*   /*                                                               */ 02045000
*   /* CHECK IF OBJECT RECORD IS A TEXT RECORD                       */ 02046000
*   /*                                                               */ 02047000
*   /*****************************************************************/ 02048000
*                                                                  0486 02049000
*   IF RCDTYPE = TXT THEN           /* OBJ RCD A TXT RCD?            */ 02050000
@RF00481 CLC   RCDTYPE+1(3,RCDPTR),TXT                             0486 02051000
         BNE   @RF00486                                            0486 02052000
*     DO;                           /* YES DO FOLLOWING              */ 02053000
*                                                                  0487 02054000
*   /*****************************************************************/ 02055000
*   /*                                                               */ 02056000
*   /* IF THE END RCD HAS BEEN READ PRIOR TO READING THE TEXT RECORD */ 02057000
*   /* THE RECORDS MUST BE OUT OF SEQUENCE                           */ 02058000
*   /*                                                               */ 02059000
*   /*****************************************************************/ 02060000
*                                                                  0488 02061000
*       IF LCAENDSW='1'B THEN       /* HAS THE END RCD BEEN READ?    */ 02062000
         TM    LCAENDSW,B'00100000'                                0488 02063000
         BNO   @RF00488                                            0488 02064000
*         DO;                                                      0489 02065000
*           RETRNCOD=4;             /* YES, SET RCDS OUT OF SEQNCE 0490 02066000
*                                      ERR CODE                      */ 02067000
         LA    RETRNCOD,4                                          0490 02068000
*           GOTO AMDEXIT;           /* RETURN TO MAINLINE ROUTINE    */ 02069000
         B     AMDEXIT                                             0491 02070000
*         END;                                                     0492 02071000
*                                                                  0492 02072000
*   /*****************************************************************/ 02073000
*   /*                                                               */ 02074000
*   /* TXT OBJECT RECORD HAS BEEN FOUND AND IS OK FOR PROCESSING     */ 02075000
*   /*                                                               */ 02076000
*   /*****************************************************************/ 02077000
*   /*****************************************************************/ 02078000
*   /*                                                               */ 02079000
*   /* CHECK IF TXT RECORD CONTAINS START ADDRESS OF CSECT           */ 02080000
*   /*                                                               */ 02081000
*   /*****************************************************************/ 02082000
*                                                                  0493 02083000
*       IF CSECTORG>=TXTADDR THEN                                  0493 02084000
@RF00488 L     @10,CSECTORG                                        0493 02085000
         L     @08,TXTADDR-1(,RCDPTR)                              0493 02086000
         LA    @08,0(,@08)                                         0493 02087000
         CR    @10,@08                                             0493 02088000
         BL    @RF00493                                            0493 02089000
*         IF CSECTORG < (TXTADDR+TXTLNG) THEN                      0494 02090000
         LH    @00,TXTLNG(,RCDPTR)                                 0494 02091000
         AR    @00,@08                                             0494 02092000
         CR    @10,@00                                             0494 02093000
         BNL   @RF00494                                            0494 02094000
*           DO;                                                    0495 02095000
*                                                                  0495 02096000
*   /*****************************************************************/ 02097000
*   /*                                                               */ 02098000
*   /* IF TXT RECORD CONTAINS START ADDR OF CSECT SET THE OUTPUT     */ 02099000
*   /* BUFFER INDEX TO THE FIRST BYTE OF THE BUFFER AND DETERMINE THE*/ 02100000
*   /* OFFSET INTO THE TXT RECORD FOR THE FIRST BYTE OF DATA TO BE   */ 02101000
*   /* MOVED FOR THE CSECT                                           */ 02102000
*   /*                                                               */ 02103000
*   /*****************************************************************/ 02104000
*                                                                  0496 02105000
*             LCASOC='1'B;          /* INDICATE START OF CSECT FND   */ 02106000
         OI    LCASOC,B'10000000'                                  0496 02107000
*             OFFSET1 = (CSECTORG - TXTADDR) + 1;   /* SET INDX INTO    02108000
*                                      TEX T DATA                    */ 02109000
         LA    @15,1                                               0497 02110000
         L     @14,TXTADDR-1(,RCDPTR)                              0497 02111000
         LA    @14,0(,@14)                                         0497 02112000
         SR    @10,@14                                             0497 02113000
         AR    @10,@15                                             0497 02114000
         LR    OFFSET1,@10                                         0497 02115000
*             BUFNDX1 = 1;          /* SET OUTPUT BUFFER INDEX       */ 02116000
         LR    BUFNDX1,@15                                         0498 02117000
*             GOTO AMDENDCK;        /* GO CHECK FOR END OF CSECT IN     02118000
*                                      TXT RCD                       */ 02119000
         B     AMDENDCK                                            0499 02120000
*           END;                                                   0500 02121000
*                                                                  0500 02122000
*   /*****************************************************************/ 02123000
*   /*                                                               */ 02124000
*   /* CHECK IF ADDR OF START OF CSECT IS LESS THAN ADDR OF FIRST    */ 02125000
*   /* BYTE OF DATA IN TXT RCD                                       */ 02126000
*   /*                                                               */ 02127000
*   /*****************************************************************/ 02128000
*                                                                  0501 02129000
*       IF CSECTORG < TXTADDR THEN                                 0501 02130000
@RF00494 DS    0H                                                  0501 02131000
@RF00493 L     @10,CSECTORG                                        0501 02132000
         MVC   @ZT00001+1(3),TXTADDR(RCDPTR)                       0501 02133000
         C     @10,@ZT00001                                        0501 02134000
         BNL   @RF00501                                            0501 02135000
*         DO;                                                      0502 02136000
*                                                                  0502 02137000
*   /*****************************************************************/ 02138000
*   /*                                                               */ 02139000
*   /* IF IF ADDRESS OF FIRST TXT BYTE IS GREATER THAN ADDRESS FO    */ 02140000
*   /* START OF CSECT AND YET THE TEXT RCD CONTAINING THE START OF   */ 02141000
*   /* CSECT HAS NOT BEEN FOUND THEN RECORDS MUST BE OUT OF SEQUENCE */ 02142000
*   /*                                                               */ 02143000
*   /*****************************************************************/ 02144000
*                                                                  0503 02145000
*           IF LCASOC = '0'B THEN   /* HAS START OF CSECT BEEN FND?  */ 02146000
         TM    LCASOC,B'10000000'                                  0503 02147000
         BNZ   @RF00503                                            0503 02148000
*             DO;                   /* NO, DO FOLLOWING              */ 02149000
*               RETRNCOD=4;         /* SET RCDS OUT OF SEQNCE ERR  0505 02150000
*                                      CODE                          */ 02151000
         LA    RETRNCOD,4                                          0505 02152000
*               GOTO AMDEXIT;       /* RETURN TO MAINLINE ROUTINE    */ 02153000
         B     AMDEXIT                                             0506 02154000
*             END;                                                 0507 02155000
*                                                                  0507 02156000
*   /*****************************************************************/ 02157000
*   /*                                                               */ 02158000
*   /* ADDR OF FIRST TXT BYTE IS GREATER THAN START OF CSECT.        */ 02159000
*   /* DETERMINE RELATIVE OFFSET OF TXT DATA FROM START OF CSECT AND */ 02160000
*   /* ADD ONE. USE THIS VALUE AS INDEX INTO OUTPUT BUFFER FOR MOVING*/ 02161000
*   /* DATA. SET TXT DATA INDEX TO FIRST BYTE OF TEXT                */ 02162000
*   /*                                                               */ 02163000
*   /*****************************************************************/ 02164000
*                                                                  0508 02165000
*           OFFSET1 = 1;            /* SET TXT DATA INDEX TO 1ST BYTE*/ 02166000
@RF00503 LA    @10,1                                               0508 02167000
         LR    OFFSET1,@10                                         0508 02168000
*           BUFNDX1 = (TXTADDR - CSECTORG) + 1;   /* SET BUF INDX    */ 02169000
         L     BUFNDX1,TXTADDR-1(,RCDPTR)                          0509 02170000
         LA    BUFNDX1,0(,BUFNDX1)                                 0509 02171000
         S     BUFNDX1,CSECTORG                                    0509 02172000
         AR    BUFNDX1,@10                                         0509 02173000
*           GOTO AMDENDCK;          /* GO CHECK FOR END OF CSECT IN     02174000
*                                      TEXT                          */ 02175000
         B     AMDENDCK                                            0510 02176000
*         END;                                                     0511 02177000
*                                                                  0511 02178000
*   /*****************************************************************/ 02179000
*   /*                                                               */ 02180000
*   /* ADDR OF START OF CSECT IS GREATER THAN THE HIGHEST TXT DATA   */ 02181000
*   /* ADDR . CHECK IF START OF CSECT HAS BEEN FOUND PREVIOUSLY. IF  */ 02182000
*   /* SO THE OBJ RECORDS MUST BE OUT OF SEQUENCE. IF NOT, THEN GO   */ 02183000
*   /* GET NEXT TXT RECORD                                           */ 02184000
*   /*                                                               */ 02185000
*   /*****************************************************************/ 02186000
*                                                                  0512 02187000
*       IF LCASOC = '1'B THEN       /* START OF CSECT FND PREVIOUSLY?*/ 02188000
@RF00501 TM    LCASOC,B'10000000'                                  0512 02189000
         BNO   @RF00512                                            0512 02190000
*         DO;                       /* YES DO FOLLOWING              */ 02191000
*           RETRNCOD = 4;           /* SET RCDS OUT OF SEQNCE ERR  0514 02192000
*                                      CODE                          */ 02193000
         LA    RETRNCOD,4                                          0514 02194000
*           GOTO AMDEXIT;           /* RETURN TO MAINLINE ROUTINE    */ 02195000
         B     AMDEXIT                                             0515 02196000
*         END;                                                     0516 02197000
*       ELSE                                                       0517 02198000
*         GOTO AMDTXT;              /* NO, GO GET NEXT TXT RCD       */ 02199000
*                                                                  0517 02200000
*   /*****************************************************************/ 02201000
*   /*                                                               */ 02202000
*   /* CHECK IF END OF CSECT IS CONTAINED WITHIN THE TXT RECORD DATA */ 02203000
*   /*                                                               */ 02204000
*   /*****************************************************************/ 02205000
*                                                                  0518 02206000
*                                                                  0518 02207000
*AMDENDCK:                                                         0518 02208000
*       IF CSECTEND>TXTADDR THEN                                   0518 02209000
AMDENDCK L     @10,CSECTEND                                        0518 02210000
         L     @06,TXTADDR-1(,RCDPTR)                              0518 02211000
         LA    @06,0(,@06)                                         0518 02212000
         CR    @10,@06                                             0518 02213000
         BNH   @RF00518                                            0518 02214000
*         IF CSECTEND <= (TXTADDR+TXTLNG) THEN                     0519 02215000
*                                                                  0519 02216000
         LH    @00,TXTLNG(,RCDPTR)                                 0519 02217000
         AR    @00,@06                                             0519 02218000
         CR    @10,@00                                             0519 02219000
         BH    @RF00519                                            0519 02220000
*   /*****************************************************************/ 02221000
*   /*                                                               */ 02222000
*   /* TXT RECORD CONTAINS END OF CSECT. DETERMINE OFFSET INTO TXT   */ 02223000
*   /* DATA OF LAST BYTE OF DATA TO BE MOVED.                        */ 02224000
*   /*                                                               */ 02225000
*   /*****************************************************************/ 02226000
*                                                                  0520 02227000
*           DO;                                                    0520 02228000
*             LCAEOC='1'B;          /* INDICATE END OF CSECT FND     */ 02229000
         OI    LCAEOC,B'01000000'                                  0521 02230000
*             OFFSET2=CSECTEND-TXTADDR; /* SET OFFSET INTO TXT DAT OF   02231000
*                                      LA ST BYTE TO BE MOVED        */ 02232000
         L     @15,TXTADDR-1(,RCDPTR)                              0522 02233000
         LA    @15,0(,@15)                                         0522 02234000
         LCR   @15,@15                                             0522 02235000
         AR    @15,@10                                             0522 02236000
         LR    OFFSET2,@15                                         0522 02237000
*             BUFNDX2=CSECTEND - CSECTORG; /* SET BUF INDEX OF WHERE    02238000
*                                      LAS T TXT BYTE WILL BE MOVED  */ 02239000
         S     @10,CSECTORG                                        0523 02240000
         ST    @10,BUFNDX2                                         0523 02241000
*             GOTO AMDMOVE;         /* GO TO MOVE TXT DATA INTO    0524 02242000
*                                      BUFFER                        */ 02243000
         B     AMDMOVE                                             0524 02244000
*           END;                                                   0525 02245000
*                                                                  0525 02246000
*   /*****************************************************************/ 02247000
*   /*                                                               */ 02248000
*   /* END OF CSECT IS NOT CONTAINED IN THE TXT DATA. CHECK IF ADDR  */ 02249000
*   /* OF END OF CSECT IS GREATER THAN ADDR OF LAST BYTE IN TXT DATA.*/ 02250000
*   /*                                                               */ 02251000
*   /*****************************************************************/ 02252000
*                                                                  0526 02253000
*       IF CSECTEND > (TXTADDR + TXTLNG) THEN                      0526 02254000
@RF00519 DS    0H                                                  0526 02255000
@RF00518 L     @10,TXTADDR-1(,RCDPTR)                              0526 02256000
         LA    @10,0(,@10)                                         0526 02257000
         AH    @10,TXTLNG(,RCDPTR)                                 0526 02258000
         C     @10,CSECTEND                                        0526 02259000
         BNL   @RF00526                                            0526 02260000
*         DO;                                                      0527 02261000
*                                                                  0527 02262000
*   /*****************************************************************/ 02263000
*   /*                                                               */ 02264000
*   /* ADDR OF END OF CSECT IS GREATER THAN ADDR OF LAST BYTE IN TXT */ 02265000
*   /* DATA. CHECK IF END OF CSECT HAS ALREADY BEEN ENCOUNTERED. IF  */ 02266000
*   /* SO RECORDS ARE OUT OF SEQUENCE                                */ 02267000
*   /*                                                               */ 02268000
*   /*****************************************************************/ 02269000
*                                                                  0528 02270000
*           IF LCAEOC='1'B THEN     /* END OF CSECT FND PREVIOUSLY?  */ 02271000
         TM    LCAEOC,B'01000000'                                  0528 02272000
         BNO   @RF00528                                            0528 02273000
*             DO;                                                  0529 02274000
*               RETRNCOD=4;         /* YES, SET RCDS OUT OF SEQNCE 0530 02275000
*                                      ERR C ODE                     */ 02276000
         LA    RETRNCOD,4                                          0530 02277000
*               GOTO AMDEXIT;       /* RETURN TO MAINLINE ROUTINE    */ 02278000
         B     AMDEXIT                                             0531 02279000
*             END;                                                 0532 02280000
*                                                                  0532 02281000
*   /*****************************************************************/ 02282000
*   /*                                                               */ 02283000
*   /* END OF CSECT NOT PREVIOUSLY FOUND. SET UP INDEXES FOR MOVING  */ 02284000
*   /*                                                               */ 02285000
*   /*****************************************************************/ 02286000
*                                                                  0533 02287000
*           OFFSET2=TXTLNG;         /* SET TXT DATA OFFSET TO LAST 0533 02288000
*                                      BYTE OF TXT                   */ 02289000
@RF00528 LH    @10,TXTLNG(,RCDPTR)                                 0533 02290000
         LR    OFFSET2,@10                                         0533 02291000
*           BUFNDX2= (TXTADDR+TXTLNG) -CSECTORG; /* SET BUFFER INDX     02292000
*                                      TO W HERE LAST BYTE OF TEXT 0534 02293000
*                                      WILL BE MOVED                 */ 02294000
         MVC   @ZT00001+1(3),TXTADDR(RCDPTR)                       0534 02295000
         A     @10,@ZT00001                                        0534 02296000
         S     @10,CSECTORG                                        0534 02297000
         ST    @10,BUFNDX2                                         0534 02298000
*           GOTO AMDMOVE;           /* GO TO MOVE THE TXT DATA       */ 02299000
         B     AMDMOVE                                             0535 02300000
*         END;                                                     0536 02301000
*                                                                  0536 02302000
*   /*****************************************************************/ 02303000
*   /*                                                               */ 02304000
*   /* ADDR OF END OF CSECT IS LESS THAN ADDRESS OF FIRST BYTE IN TXT*/ 02305000
*   /* DATA.                                                         */ 02306000
*   /*                                                               */ 02307000
*   /*****************************************************************/ 02308000
*                                                                  0537 02309000
*       LCAEOC='1'B;                /* INDICATE END OF CSECT ADDR HAS   02310000
*                                      BEEN PASSED                   */ 02311000
@RF00526 OI    LCAEOC,B'01000000'                                  0537 02312000
*       GOTO AMDTXT;                /* GO GET NEXT TXT RECORD        */ 02313000
         B     AMDTXT                                              0538 02314000
*     END;                                                         0539 02315000
*                                                                  0539 02316000
*   /*****************************************************************/ 02317000
*   /*                                                               */ 02318000
*   /* OBJECT RECORD WAS NOT AN END RECORD OR A TEXT RECORD. IGNORE  */ 02319000
*   /* ALL OTHER RECORDS                                             */ 02320000
*   /*                                                               */ 02321000
*   /*****************************************************************/ 02322000
*                                                                  0540 02323000
*   GOTO AMDTXT;                    /* YES, IGNORE. GET NEXT OBJ RCD.*/ 02324000
*                                                                  0540 02325000
         B     AMDTXT                                              0540 02326000
*   /*****************************************************************/ 02327000
*   /*                                                               */ 02328000
*   /* MOVE TEXT DATA INTO OUTPUT BUFFER                             */ 02329000
*   /*                                                               */ 02330000
*   /*****************************************************************/ 02331000
*                                                                  0541 02332000
*                                                                  0541 02333000
*AMDMOVE:                                                          0541 02334000
*   OTPUTBUF(BUFNDX1:BUFNDX2) = TXTDATA(OFFSET1:OFFSET2);          0541 02335000
AMDMOVE  LR    @10,BUFPTR                                          0541 02336000
         ALR   @10,BUFNDX1                                         0541 02337000
         AL    @10,@CF00449                                        0541 02338000
         L     @15,BUFNDX2                                         0541 02339000
         SR    @15,BUFNDX1                                         0541 02340000
         LR    @14,RCDPTR                                          0541 02341000
         ALR   @14,OFFSET1                                         0541 02342000
         EX    @15,@SM00450                                        0541 02343000
*   GOTO AMDTXT;                    /* GO GET NEXT OBJECT RECORD     */ 02344000
*                                                                  0542 02345000
         B     AMDTXT                                              0542 02346000
*   /*****************************************************************/ 02347000
*   /*                                                               */ 02348000
*   /* AMDSATXT MODULE PROCESSING                                    */ 02349000
*   /*                                                               */ 02350000
*   /*****************************************************************/ 02351000
*                                                                  0543 02352000
*                                                                  0543 02353000
*AMDFIND:                                                          0543 02354000
*   BLDLNAME = LCAMODUL;            /* PUT NAME IN BLDL LIST   Y02006*/ 02355000
AMDFIND  MVC   BLDLNAME(8),LCAMODUL                                0543 02356000
*   GENERATE;                       /* ISSUE BLDL              Y02006*/ 02357000
*                                                                  0544 02358000
       BLDL  (DCBPTR),BLDLAREA                                          02359000
*   /*****************************************************************/ 02360000
*   /*                                                               */ 02361000
*   /* CHECK IF MODULE FOUND                                         */ 02362000
*   /*                                                               */ 02363000
*   /*****************************************************************/ 02364000
*                                                                  0545 02365000
*   RESPECIFY REG15 RESTRICTED;                                    0545 02366000
*   IF REG15 ^= 0 THEN              /* TEST FOR NONZERO RETURN CODE  */ 02367000
         LTR   REG15,REG15                                         0546 02368000
         BZ    @RF00546                                            0546 02369000
*     DO;                           /* YES, WHAT CODE IS IT?         */ 02370000
*       IF REG15=4 THEN             /* IS IT MODULE NOT FND?         */ 02371000
         CH    REG15,@CH00062                                      0548 02372000
         BNE   @RF00548                                            0548 02373000
*         RETRNCOD=1;               /* YES, SET MOD NOT FND ERR CODE */ 02374000
         LA    RETRNCOD,1                                          0549 02375000
*       ELSE                        /* NO, IT MUST BE BLDL I/O ERROR */ 02376000
*         RETRNCOD=2;               /* SET BLDL I/O ERR CODE         */ 02377000
         B     @RC00548                                            0550 02378000
@RF00548 LA    RETRNCOD,2                                          0550 02379000
*       GOTO AMDEXIT;               /* RETURN TO MAINLINE ROUTINE    */ 02380000
         B     AMDEXIT                                             0551 02381000
*     END;                                                         0552 02382000
*   GENERATE;                       /* ISSUE FIND              Y02006*/ 02383000
@RF00546 DS    0H                                                  0553 02384000
       FIND  (DCBPTR),BLDLTTRK,C                                        02385000
*   RESPECIFY REG15 UNRESTRICTED;                                  0554 02386000
*                                                                  0554 02387000
*   /*****************************************************************/ 02388000
*   /*                                                               */ 02389000
*   /* MODULE FOUND --- READ CESD RECORD                             */ 02390000
*   /*                                                               */ 02391000
*   /*****************************************************************/ 02392000
*                                                                  0555 02393000
*                                                                  0555 02394000
*AMDCESD:                                                          0555 02395000
*   RCDPTR=LCAINPUT;                /* SET POINTER TO INPUT BUFFER   */ 02396000
AMDCESD  L     RCDPTR,LCAINPUT                                     0555 02397000
*   INPUTBUF(1) = '00'X;            /* CLEAR FIRST BYTE OF BUFFER FOR   02398000
*                                      ID CHK                        */ 02399000
         MVI   INPUTBUF(RCDPTR),X'00'                              0556 02400000
*   GENERATE FLOWS(AMDSYND3,AMDMDEOD); /* READ A RECORD              */ 02401000
*                                                                  0557 02402000
          READ (DECBPTR),SF,(DCBPTR),(RCDPTR),'S',,,MF=E                02403000
          CHECK (DECBPTR)                                               02404000
*   /*****************************************************************/ 02405000
*   /*                                                               */ 02406000
*   /* IF RECORD IS A CESD RECORD SEARCH CESD ENTRIES FOR MATCH ON   */ 02407000
*   /* LCACSECT NAME                                                 */ 02408000
*   /*                                                               */ 02409000
*   /*****************************************************************/ 02410000
*                                                                  0558 02411000
*   IF RCDID = '20'X THEN           /* IS RCD A CESD RCD?            */ 02412000
         CLI   RCDID(RCDPTR),X'20'                                 0558 02413000
         BNE   @RF00558                                            0558 02414000
*     DO;                           /* YES SRCH CESD ENTRIES         */ 02415000
*       RESPECIFY (ENTRYPTR) RESTRICTED;                           0560 02416000
*       ENTRYPTR = RCDPTR + 8;        /* POINT TO 1ST CESD ENTRY     */ 02417000
         LA    ENTRYPTR,8                                          0561 02418000
         AR    ENTRYPTR,RCDPTR                                     0561 02419000
*       DO I=CESDCNT TO 0 BY -16;        /* BEGIN CESD SRCH          */ 02420000
         LH    I,CESDCNT+6(,RCDPTR)                                0562 02421000
         B     @DE00562                                            0562 02422000
@DL00562 DS    0H                                                  0563 02423000
*         IF ESDTYPE='0000'B | ESDTYPE = '0011'B THEN/*            0563 02424000
*                                              IS THIS A SECTION OR     02425000
*                                      LABEL DEF. ENTRY? Y02006      */ 02426000
         TM    ESDTYPE(ENTRYPTR),B'00001111'                       0563 02427000
         BZ    @RT00563                                            0563 02428000
         TM    ESDTYPE(ENTRYPTR),B'00000011'                       0563 02429000
         BNO   @RF00563                                            0563 02430000
         TM    ESDTYPE(ENTRYPTR),B'00001100'                       0563 02431000
         BNZ   @RF00563                                            0563 02432000
@RT00563 DS    0H                                                  0564 02433000
*           IF LCACSECT=ESDNAME THEN /* DOES ENTRY CONTAIN CSECT   0564 02434000
*                                      NAME?                         */ 02435000
         CLC   LCACSECT(8),ESDNAME(ENTRYPTR)                       0564 02436000
         BE    @RT00564                                            0564 02437000
*             GOTO AMDNMFND;        /* YES, YES. THIS THE ENTRY GO 0565 02438000
*                                      SAVE CSEC T START ADDR        */ 02439000
*         ENTRYPTR = ENTRYPTR + 16;      /* NOT THIS ENTRY. POINT TO    02440000
*                                      NEX T ENTRY                   */ 02441000
@RF00563 AH    ENTRYPTR,@CH00280                                   0566 02442000
*       END;                                                       0567 02443000
         AH    I,@CH00358                                          0567 02444000
@DE00562 LTR   I,I                                                 0567 02445000
         BNM   @DL00562                                            0567 02446000
*       GOTO AMDCESD;               /* NO MORE ENTRIES IN THIS RCD.     02447000
*                                      GO GET ANOTHER CESD RCD       */ 02448000
         B     AMDCESD                                             0568 02449000
*     END;                                                         0569 02450000
*                                                                  0569 02451000
*   /*****************************************************************/ 02452000
*   /*                                                               */ 02453000
*   /* IF RECORD IS A SYM RCD IGNORE IT AND GO READ ANOTHER RECORD   */ 02454000
*   /*                                                               */ 02455000
*   /*****************************************************************/ 02456000
*                                                                  0570 02457000
*   IF RCDID = '40'X THEN           /* IS RCD A SYM RCD              */ 02458000
@RF00558 CLI   RCDID(RCDPTR),X'40'                                 0570 02459000
         BE    @RT00570                                            0570 02460000
*     GOTO AMDCESD;                 /* YES-IGNORE IT GO READ NEXT RCD*/ 02461000
*                                                                  0571 02462000
*   /*****************************************************************/ 02463000
*   /*                                                               */ 02464000
*   /* IF CSECT NOT FOUND AND NO MORE CESD RECORDS TO BE PROCESSED   */ 02465000
*   /* THEN SET ERROR CODE AND EXIT                                  */ 02466000
*   /*                                                               */ 02467000
*   /*****************************************************************/ 02468000
*                                                                  0572 02469000
*   ELSE                                                           0572 02470000
*     DO;                                                          0572 02471000
*       RETRNCOD=7;                 /* SET MOD CSECT NOT FND ERR CODE*/ 02472000
         LA    RETRNCOD,7                                          0573 02473000
*       GOTO AMDEXIT;               /* RETURN TO MAINLINE ROUTINE    */ 02474000
         B     AMDEXIT                                             0574 02475000
*     END;                                                         0575 02476000
*                                                                  0575 02477000
*   /*****************************************************************/ 02478000
*   /*                                                               */ 02479000
*   /* CESD ENTRY FOUND FOR CSECT -- SET UP TO READ CONTROL RECORDS  */ 02480000
*   /* AND TEXT                                                      */ 02481000
*   /*                                                               */ 02482000
*   /*****************************************************************/ 02483000
*                                                                  0576 02484000
*                                                                  0576 02485000
*AMDNMFND:                                                         0576 02486000
*   IF LCAPGECT = '1'B THEN         /* RETURN SWITCH ON Y02006       */ 02487000
AMDNMFND TM    LCAPGECT,B'00010000'                                0576 02488000
         BNO   @RF00576                                            0576 02489000
*     DO;                           /* YES Y02006                    */ 02490000
*       LCAPROLD = ESDADDR + OTBUFADD; /* ADDRESS OF LD ENTRY Y02006 */ 02491000
         L     @10,ESDADDR-1(,ENTRYPTR)                            0578 02492000
         LA    @10,0(,@10)                                         0578 02493000
         A     @10,OTBUFADD                                        0578 02494000
         ST    @10,LCAPROLD                                        0578 02495000
*       GO TO AMDMDEOD;             /* MODULE END OF DATA Y02006     */ 02496000
         B     AMDMDEOD                                            0579 02497000
*     END;                                                         0580 02498000
*   IF ESDADDR ^= 0 THEN            /* MODULE ORIGIN AT ZERO Y02006  */ 02499000
@RF00576 L     @10,ESDADDR-1(,ENTRYPTR)                            0581 02500000
         LA    @10,0(,@10)                                         0581 02501000
         LTR   @10,@10                                             0581 02502000
         BZ    @RF00581                                            0581 02503000
*     DO;                           /* NO - ERROR Y02006             */ 02504000
*       RETRNCOD = 10;              /* SET RETURN CODE FOR MESSAGE 0583 02505000
*                                      AMD044I Y02006                */ 02506000
         LA    RETRNCOD,10                                         0583 02507000
*       GO TO AMDEXIT;              /* RETURN Y02006                 */ 02508000
         B     AMDEXIT                                             0584 02509000
*     END;                                                         0585 02510000
*   LCANMFND='1'B;                  /* INDICATE CSECT NAME FOUND     */ 02511000
@RF00581 OI    LCANMFND,B'00010000'                                0586 02512000
*   CSECTORG=ESDADDR;               /* SAVE START ADDR OF CSECT      */ 02513000
         L     @10,ESDADDR-1(,ENTRYPTR)                            0587 02514000
         LA    @10,0(,@10)                                         0587 02515000
         ST    @10,CSECTORG                                        0587 02516000
*   CSECTEND=ESDADDR+BLDLMLEN;      /* CALCULATE AND SAVE MODULE END    02517000
*                                      ADDR                    Y02006*/ 02518000
         MVC   @ZT00001+1(3),BLDLMLEN                              0588 02519000
         A     @10,@ZT00001                                        0588 02520000
         ST    @10,CSECTEND                                        0588 02521000
*   LCAOTEOR=LCAOTPUT;              /* SET END OF RECORD PTR TO BEGIN   02522000
*                                      OF BUF                        */ 02523000
*                                                                  0589 02524000
         L     @10,LCAOTPUT                                        0589 02525000
         ST    @10,LCAOTEOR                                        0589 02526000
*   /*****************************************************************/ 02527000
*   /*                                                               */ 02528000
*   /* READ A CONTROL RECORD                                         */ 02529000
*   /*                                                               */ 02530000
*   /*****************************************************************/ 02531000
*                                                                  0590 02532000
*                                                                  0590 02533000
*AMDCNTRL:                                                         0590 02534000
*   RCDPTR=LCAINPUT;                /* SET PTR TO INPUT BUFFER       */ 02535000
AMDCNTRL L     RCDPTR,LCAINPUT                                     0590 02536000
*   INPUTBUF(1) = '00'X;            /* CLEAR 1ST BYTE OF BUF FOR ID     02537000
*                                      CHECK                         */ 02538000
         MVI   INPUTBUF(RCDPTR),X'00'                              0591 02539000
*   GENERATE FLOWS(AMDSYND3,AMDMDEOD); /* READ A RECORD              */ 02540000
*                                                                  0592 02541000
          READ (DECBPTR),SF,(DCBPTR),(RCDPTR),'S',,,MF=E                02542000
          CHECK (DECBPTR)                                               02543000
*   /*****************************************************************/ 02544000
*   /*                                                               */ 02545000
*   /* CHECK IF RLD RCD                                              */ 02546000
*   /*                                                               */ 02547000
*   /*****************************************************************/ 02548000
*                                                                  0593 02549000
*   IF RCDID = '02'X THEN           /* IS THIS AN RLD RECORD   Y02006*/ 02550000
         CLI   RCDID(RCDPTR),X'02'                                 0593 02551000
         BNE   @RF00593                                            0593 02552000
*     DO;                           /* YES                     Y02006*/ 02553000
*       CALL AMDSARLD;              /* PROCESS RLD RECORD      Y02006*/ 02554000
         BAL   @14,AMDSARLD                                        0595 02555000
*       RESPECIFY REG15 RESTRICTED;                                0596 02556000
*       RETRNCOD = REG15;           /* SAVE RETURN CODE Y02006       */ 02557000
         LR    RETRNCOD,REG15                                      0597 02558000
*       IF REG15 ^= 0 THEN          /* ERROR DURING RLD PROCESSING 0598 02559000
*                                      Y02006                        */ 02560000
         LTR   REG15,REG15                                         0598 02561000
         BNZ   @RT00598                                            0598 02562000
*         GO TO AMDEXIT;            /* YES - RETURN Y02006           */ 02563000
*       GO TO AMDCNTRL;             /* GET NEXT RECORD Y02006        */ 02564000
         B     AMDCNTRL                                            0600 02565000
*     END;                                                         0601 02566000
*   RESPECIFY REG15 UNRESTRICTED;                                  0602 02567000
@RF00593 DS    0H                                                  0603 02568000
*   IF RCDID='0E'X THEN             /* IS RCD AN RLD?                */ 02569000
         CLI   RCDID(RCDPTR),X'0E'                                 0603 02570000
         BNE   @RF00603                                            0603 02571000
*     DO;                           /* YES, DO FOLLOWING             */ 02572000
*       CALL AMDSARLD;              /* PROCESS RLD RECORD Y02006     */ 02573000
         BAL   @14,AMDSARLD                                        0605 02574000
*       RESPECIFY REG15 RESTRICTED;                                0606 02575000
*       RETRNCOD = REG15;           /* SAVE RETURN CODE Y02006       */ 02576000
         LR    RETRNCOD,REG15                                      0607 02577000
*       IF REG15 ^= 0 THEN          /* ERROR DURING RLD PROCESSING 0608 02578000
*                                      Y02006                        */ 02579000
         LTR   REG15,REG15                                         0608 02580000
         BNZ   @RT00608                                            0608 02581000
*         GO TO AMDEXIT;            /* YES - RETURN Y02006           */ 02582000
*       RESPECIFY REG15 UNRESTRICTED;                              0610 02583000
*       LCAENDSW='1'B;              /* SET END SWITCH                */ 02584000
         OI    LCAENDSW,B'00100000'                                0611 02585000
*       GOTO AMDMDEOD;              /* GO TO MODULE END OF DATA      */ 02586000
         B     AMDMDEOD                                            0612 02587000
*     END;                                                         0613 02588000
*                                                                  0613 02589000
*   /*****************************************************************/ 02590000
*   /*                                                               */ 02591000
*   /* CHECK IF CONTROL RCD-- IF NOT GO BACK AND GET ANOTHER RECORD  */ 02592000
*   /*                                                               */ 02593000
*   /*****************************************************************/ 02594000
*                                                                  0614 02595000
*   IF CTLIDBIT = '0'B THEN         /* IS THE CNTRL BIT OFF IN THE ID   02596000
*                                      BYTE?                         */ 02597000
@RF00603 TM    CTLIDBIT(RCDPTR),B'00000001'                        0614 02598000
         BZ    @RT00614                                            0614 02599000
*     GOTO AMDCNTRL;                /* YES, GO READ NEXT RECORD      */ 02600000
*                                                                  0615 02601000
*   /*****************************************************************/ 02602000
*   /*                                                               */ 02603000
*   /* CHECK FOR CONTROL/RLD RECORD Y02006                           */ 02604000
*   /*                                                               */ 02605000
*   /*****************************************************************/ 02606000
*                                                                  0616 02607000
*   IF RCDID = '03'X THEN           /* CONTROL/RLD RECORD Y02006     */ 02608000
         CLI   RCDID(RCDPTR),X'03'                                 0616 02609000
         BE    @RT00616                                            0616 02610000
*     GO TO AMDRLD1;                /* YES - PROCESS RLD RECORD    0617 02611000
*                                      Y02006                        */ 02612000
*                                                                  0617 02613000
*   /*****************************************************************/ 02614000
*   /*                                                               */ 02615000
*   /* CHECK FOR CONTROL/RLD RECORD PRECEEDING LAST TEXT OF A SEGMENT*/ 02616000
*   /* AND IF SO SET END SWITCH TO STOP PROCESSING AFTER THE TEXT    */ 02617000
*   /* RCD.                                                          */ 02618000
*   /*                                                               */ 02619000
*   /*****************************************************************/ 02620000
*                                                                  0618 02621000
*   IF RCDID ='0D'X THEN                                           0618 02622000
         CLI   RCDID(RCDPTR),X'0D'                                 0618 02623000
         BNE   @RF00618                                            0618 02624000
*     LCAENDSW='1'B;                                               0619 02625000
*                                                                  0619 02626000
         OI    LCAENDSW,B'00100000'                                0619 02627000
*   /*****************************************************************/ 02628000
*   /*                                                               */ 02629000
*   /* CHECK FOR CONTROL/RLD RECORD PRECEEDING LAST TEXT OF A MODULE */ 02630000
*   /* AND IF SO SET END SWITCH TO STOP PROCESSING AFTER THE TEXT    */ 02631000
*   /* RCD.                                                          */ 02632000
*   /*                                                               */ 02633000
*   /*****************************************************************/ 02634000
*                                                                  0620 02635000
*   IF RCDID = '0F'X THEN                                          0620 02636000
@RF00618 CLI   RCDID(RCDPTR),X'0F'                                 0620 02637000
         BNE   @RF00620                                            0620 02638000
*     DO;                                                          0621 02639000
*       LCAENDSW= '1'B;                                            0622 02640000
*                                                                  0622 02641000
         OI    LCAENDSW,B'00100000'                                0622 02642000
*AMDRLD1:                                                          0623 02643000
*       LCARLD = '1'B;              /* SET RLD INDICATOR Y02006      */ 02644000
AMDRLD1  OI    LCARLD,B'00001000'                                  0623 02645000
*       RLDBUF1 = RCDPTR;           /* SAVE ADDRESS OF RECORD Y02006 */ 02646000
         LR    RLDBUF1,RCDPTR                                      0624 02647000
*       RLDBUF2 = INBUFAD2;         /* ADDRESS OF SECOND BUFFER    0625 02648000
*                                      Y02006                        */ 02649000
         L     RLDBUF2,INBUFAD2                                    0625 02650000
*       OFFSET1 = DCBBLKSI;         /* GET DCB BLOCKSIZE Y02006      */ 02651000
*                                                                  0626 02652000
         LH    OFFSET1,DCBBLKSI+62(,DCBPTR)                        0626 02653000
*AMDRLDMV:                                                         0627 02654000
*       IF OFFSET1 > 256 THEN       /* MORE THAN 1 MOVE REQUIRED   0627 02655000
*                                      Y02006                        */ 02656000
AMDRLDMV LA    @10,256                                             0627 02657000
         CR    OFFSET1,@10                                         0627 02658000
         BNH   @RF00627                                            0627 02659000
*         DO;                       /* YES - MOVE 256 BYTES Y02006   */ 02660000
*           RLDBUF2 -> INPUTBUF(1:256) = INPUTBUF(1:256); /* MOVE 256   02661000
*                                      BYTES Y02006                  */ 02662000
         MVC   INPUTBUF(256,RLDBUF2),INPUTBUF(RCDPTR)              0629 02663000
*           RLDBUF2 = RLDBUF2 + 256; /* INCREMENT 2ND BUFFER PTR   0630 02664000
*                                      Y02006                        */ 02665000
         AR    RLDBUF2,@10                                         0630 02666000
*           RCDPTR = RCDPTR + 256;  /* INCREMENT 1ST BUFFER PTR    0631 02667000
*                                      Y02006                        */ 02668000
         AR    RCDPTR,@10                                          0631 02669000
*           OFFSET1 = OFFSET1 - 256; /* DECREMENT REMAINING LENGTH 0632 02670000
*                                      Y02006                        */ 02671000
         SR    OFFSET1,@10                                         0632 02672000
*           GO TO AMDRLDMV;         /* CONTINUE MOVE Y02006          */ 02673000
         B     AMDRLDMV                                            0633 02674000
*         END;                                                     0634 02675000
*       RLDBUF2 -> INPUTBUF(1:OFFSET1) = INPUTBUF(1:OFFSET1); /* MOVE   02676000
*                                      REMAINING BYTES Y02006        */ 02677000
@RF00627 LR    @10,OFFSET1                                         0635 02678000
         BCTR  @10,0                                               0635 02679000
         EX    @10,@SM00453                                        0635 02680000
*       RCDPTR = RLDBUF1;           /* RESTORE BUFFER POINTER Y02006 */ 02681000
         LR    RCDPTR,RLDBUF1                                      0636 02682000
*     END;                                                         0637 02683000
*   RESPECIFY (ENTRYPTR) UNRESTRICTED;                             0638 02684000
*                                                                  0638 02685000
@RF00620 DS    0H                                                  0639 02686000
*   /*****************************************************************/ 02687000
*   /*                                                               */ 02688000
*   /* READ TEXT RECORD                                              */ 02689000
*   /*                                                               */ 02690000
*   /*****************************************************************/ 02691000
*                                                                  0639 02692000
*                                                                  0639 02693000
*AMDMDTXT:                                                         0639 02694000
*   RCDPTR=LCAINPUT;                /* POINT TO INPUT BUFFER         */ 02695000
AMDMDTXT L     RCDPTR,LCAINPUT                                     0639 02696000
*   GENERATE FLOWS(AMDSYND3,AMDMDEOD); /* READ RECORD                */ 02697000
*                                                                  0640 02698000
          READ (DECBPTR),SF,(DCBPTR),(RCDPTR),'S',,,MF=E                02699000
          CHECK (DECBPTR)                                               02700000
*   /*****************************************************************/ 02701000
*   /*                                                               */ 02702000
*   /* MOVE TEXT DATA INTO OUTPUT BUFFER                             */ 02703000
*   /*                                                               */ 02704000
*   /*****************************************************************/ 02705000
*                                                                  0641 02706000
*   LMRCDLNG = DCBBLKSI - IOBCSWCT; /* LENGTH OF TEXT RECORD   YM0651*/ 02707000
         L     @10,DCBIOBA+68(,DCBPTR)                             0641 02708000
         LH    LMRCDLNG,DCBBLKSI+62(,DCBPTR)                       0641 02709000
         SH    LMRCDLNG,IOBCSWCT+22(,@10)                          0641 02710000
*   OFFSET2 = LMRCDLNG;             /* LENGTH OF TEXT RECORD   YM0651*/ 02711000
         LR    OFFSET2,LMRCDLNG                                    0642 02712000
*   BUFPTR = LCAOTEOR;              /* POSITION BUF PTR TO END OF  0643 02713000
*                                      LAST TXT IN OUT BUF           */ 02714000
         L     BUFPTR,LCAOTEOR                                     0643 02715000
*   LCAOTEOR = BUFPTR + OFFSET2;    /* POINT TO END OF TXT IN OUTBUF */ 02716000
*                                                                  0644 02717000
         LR    @10,BUFPTR                                          0644 02718000
         AR    @10,OFFSET2                                         0644 02719000
         ST    @10,LCAOTEOR                                        0644 02720000
*   /*****************************************************************/ 02721000
*   /*                                                               */ 02722000
*   /*  IF THE LENGTH OF TEXT TO BE MOVED IS GREATER THAN 256 BYTES  */ 02723000
*   /*  THE TEXT MUST BE MOVED IN 256 BYTE SEGMENTS UNTIL THERE ARE  */ 02724000
*   /*  ONLY 256 BYTES OR LESS REMAINING TO BE MOVED.                */ 02725000
*   /*                                                               */ 02726000
*   /*****************************************************************/ 02727000
*                                                                  0645 02728000
*                                                                  0645 02729000
*AMDTXTMV:                                                         0645 02730000
*   IF OFFSET2 > 256 THEN           /* CHK IF MORE THAN 256          */ 02731000
AMDTXTMV LA    @10,256                                             0645 02732000
         CR    OFFSET2,@10                                         0645 02733000
         BNH   @RF00645                                            0645 02734000
*     DO;                           /* YES, MOVE 256 BYTES AT A TIME */ 02735000
*       OTPUTBUF(1:256) = INPUTBUF(1:256);     /* MOVE THE TEXT      */ 02736000
         MVC   OTPUTBUF(256,BUFPTR),INPUTBUF(RCDPTR)               0647 02737000
*       BUFPTR = BUFPTR + 256;      /* POINT TO END OF TXT IN OUTBUF */ 02738000
         AR    BUFPTR,@10                                          0648 02739000
*       RCDPTR = RCDPTR + 256;      /* POINT TO NEXT TXT TO BE MOVED */ 02740000
         AR    RCDPTR,@10                                          0649 02741000
*       OFFSET2 = OFFSET2 - 256;    /* DECREMENT THE OFFSET          */ 02742000
         SR    OFFSET2,@10                                         0650 02743000
*       GO TO AMDTXTMV;             /* GO CHECK IF 256 BYTES TO MOVE */ 02744000
         B     AMDTXTMV                                            0651 02745000
*     END;                                                         0652 02746000
*                                                                  0652 02747000
*   /*****************************************************************/ 02748000
*   /*                                                               */ 02749000
*   /* MOVE THE LAST SEGMENT OF TEXT (LNGH<=256) INTO OUTPUT BUFFER. */ 02750000
*   /* PROCESS RLD RECORD IN SECOND BUFFER, IF ONE EXISTS.           */ 02751000
*   /*                                                               */ 02752000
*   /*****************************************************************/ 02753000
*                                                                  0653 02754000
*   OTPUTBUF(1:OFFSET2) = INPUTBUF(1:OFFSET2);     /* MOVE THE TEXT  */ 02755000
@RF00645 LR    @10,OFFSET2                                         0653 02756000
         BCTR  @10,0                                               0653 02757000
         EX    @10,@SM00455                                        0653 02758000
*   IF LCARLD = '1'B THEN           /* RLD RECORD TO BE PROCESSED  0654 02759000
*                                      Y02006                        */ 02760000
         TM    LCARLD,B'00001000'                                  0654 02761000
         BNO   @RF00654                                            0654 02762000
*     DO;                           /* YES Y02006                    */ 02763000
*       CALL AMDSARLD;              /* PROCESS RLD RECORD Y02006     */ 02764000
         BAL   @14,AMDSARLD                                        0656 02765000
*       RESPECIFY REG15 RESTRICTED;                                0657 02766000
*       RETRNCOD = REG15;           /* SAVE RETURN CODE Y02006       */ 02767000
         LR    RETRNCOD,REG15                                      0658 02768000
*       IF REG15 ^= 0 THEN          /* ERROR DURING RLD PROCESSING 0659 02769000
*                                      Y02006                        */ 02770000
         LTR   REG15,REG15                                         0659 02771000
         BNZ   @RT00659                                            0659 02772000
*         GO TO AMDEXIT;            /* YES - RETURN Y02006           */ 02773000
*       RESPECIFY REG15 UNRESTRICTED;                              0661 02774000
*     END;                                                         0662 02775000
*   LCASOC = '1'B;                  /* INDICATE TXT WAS MOVED INTO 0663 02776000
*                                      OUT BUF                       */ 02777000
@RF00654 DS    0H                                                  0664 02778000
*   LCARLD = '0'B;                  /* RESET RLD SWITCH        Y02006*/ 02779000
         OI    LCASOC,B'10000000'                                  0664 02780000
         NI    LCARLD,B'11110111'                                  0664 02781000
*   IF LCAENDSW = '1'B THEN         /* CHK IF THIS WAS LAST RCD      */ 02782000
         TM    LCAENDSW,B'00100000'                                0665 02783000
         BO    @RT00665                                            0665 02784000
*     GOTO AMDMDEOD;                /* YES, GO TO MOD END PROCESSING */ 02785000
*   ELSE                                                           0667 02786000
*     GOTO AMDCNTRL;                /* NO, GO READ A CONTROL RCD     */ 02787000
*                                                                  0667 02788000
         B     AMDCNTRL                                            0667 02789000
*   /*****************************************************************/ 02790000
*   /*                                                               */ 02791000
*   /* SYNAD ROUTINE FOR SYSUT1 AND SYSUT2 DATA SETS                 */ 02792000
*   /*                                                               */ 02793000
*   /*****************************************************************/ 02794000
*                                                                  0668 02795000
*                                                                  0668 02796000
*AMDSYND3:                                                         0668 02797000
*   GENERATE;                       /* ANALYZE THE I/O ERROR         */ 02798000
AMDSYND3 DS    0H                                                  0668 02799000
          SYNADAF ACSMETH=BSAM                                          02800000
*   RESPECIFY PARMGR1 RESTRICTED;                                  0669 02801000
*   MSGBUF1(1:102)=SYNADMSG(5:106); /* MOVE ERR DESCRP TO BUF        */ 02802000
         MVC   MSGBUF1(102),SYNADMSG+4(PARMGR1)                    0670 02803000
*   GENERATE;                       /* RELEASE SYNADAF WORKAREA      */ 02804000
          SYNADRLS                                                      02805000
*   RESPECIFY PARMGR1 UNRESTRICTED;                                0672 02806000
*   MSGBUF1(1:2) = '0066'X;         /* SET LNG OF ERR MSG            */ 02807000
         MVC   MSGBUF1(2),@CB00221                                 0673 02808000
*   RETRNCOD=8;                     /* SET I/O ERR RETURN CODE       */ 02809000
         LA    RETRNCOD,8                                          0674 02810000
*   GOTO AMDEXIT;                   /* RETURN TO MAINLINE ROUTINE    */ 02811000
*                                                                  0675 02812000
         B     AMDEXIT                                             0675 02813000
*   /*****************************************************************/ 02814000
*   /*                                                               */ 02815000
*   /* END OF DATA PROCESSING FOR SYSUT1 --- OBJECT DECK INPUT       */ 02816000
*   /*                                                               */ 02817000
*   /*****************************************************************/ 02818000
*                                                                  0676 02819000
*                                                                  0676 02820000
*AMDOBEOD:                                                         0676 02821000
*   RETRNCOD=3;                     /* SET CSECT NOT FND ERR RETRN 0676 02822000
*                                      CODE                          */ 02823000
AMDOBEOD LA    RETRNCOD,3                                          0676 02824000
*   IF LCANMFND='0'B THEN           /* WAS CSECT FOUND?              */ 02825000
         TM    LCANMFND,B'00010000'                                0677 02826000
         BZ    @RT00677                                            0677 02827000
*     GOTO AMDEXIT;                 /* NO, GOTO EXIT                 */ 02828000
*   RETRNCOD=4;                     /* SET SEQNCE ERR RETRN CODE     */ 02829000
         LA    RETRNCOD,4                                          0679 02830000
*   IF LCASOC = '0'B THEN           /* WAS START OF CSECT FOUND?     */ 02831000
         TM    LCASOC,B'10000000'                                  0680 02832000
         BZ    @RT00680                                            0680 02833000
*     GOTO AMDEXIT;                 /* NO, GOTO EXIT                 */ 02834000
*   RETRNCOD=5;                     /* SET END CARD NOT FND ERR RETRN   02835000
*                                      CODE                          */ 02836000
         LA    RETRNCOD,5                                          0682 02837000
*   IF LCAENDSW='0'B THEN           /* WAS END STATEMENT FND?        */ 02838000
         TM    LCAENDSW,B'00100000'                                0683 02839000
         BZ    @RT00683                                            0683 02840000
*     GOTO AMDEXIT;                 /* NO, GOTO EXIT                 */ 02841000
*                                                                  0684 02842000
*   /*****************************************************************/ 02843000
*   /*                                                               */ 02844000
*   /* OBJECT TEXT PROCESSED SUCCESSFULLY                            */ 02845000
*   /*                                                               */ 02846000
*   /*****************************************************************/ 02847000
*                                                                  0685 02848000
*   LCAOTEOR= LCAOTPUT + (CSECTEND-CSECTORG); /* RETURN POINTER TO 0685 02849000
*                                      END OF TXT IN BUF             */ 02850000
*                                                                  0685 02851000
         L     @10,CSECTEND                                        0685 02852000
         S     @10,CSECTORG                                        0685 02853000
         A     @10,LCAOTPUT                                        0685 02854000
         ST    @10,LCAOTEOR                                        0685 02855000
*   /*****************************************************************/ 02856000
*   /*                                                               */ 02857000
*   /* CLEANUP FOR SUCCESSFUL TEXT PROCESSING                        */ 02858000
*   /*                                                               */ 02859000
*   /*****************************************************************/ 02860000
*                                                                  0686 02861000
*                                                                  0686 02862000
*AMDMDEOD:                                                         0686 02863000
*   RETRNCOD = 0;                   /* INDICATE SUCCESSFUL COMPLETION*/ 02864000
AMDMDEOD SLR   RETRNCOD,RETRNCOD                                   0686 02865000
*   GENERATE;                       /* CLOSE INPUT DATA SET (REREAD) */ 02866000
*                                                                  0687 02867000
          CLOSE ((DCBPTR),REREAD),TYPE=T                                02868000
*   /*****************************************************************/ 02869000
*   /*                                                               */ 02870000
*   /* EXIT FROM AMDSATXT BACK TO MAINLINE ROUTINE                   */ 02871000
*   /*                                                               */ 02872000
*   /*****************************************************************/ 02873000
*                                                                  0688 02874000
*                                                                  0688 02875000
*AMDEXIT:                                                          0688 02876000
*   RETURN CODE(RETRNCOD);          /* RETURN TO AMDSALDR            */ 02877000
AMDEXIT  LR    @15,RETRNCOD                                        0688 02878000
         L     @14,@SA00003                                        0688 02879000
         LM    @00,@12,@SA00003+8                                  0688 02880000
         BR    @14                                                 0688 02881000
*   END AMDSATXT;                                                  0689 02882000
*                                                                  0690 02883000
*   /*****************************************************************/ 02884000
*   /*                                                               */ 02885000
*   /* PERFORM RELOCATION OF LOAD MODULES USING RLD RECORDS          */ 02886000
*   /*                                                               */ 02887000
*   /*****************************************************************/ 02888000
*                                                                  0690 02889000
*AMDSARLD:                                                         0690 02890000
*   PROC OPTIONS(NOSAVEAREA);                                      0690 02891000
AMDSARLD STM   @14,@12,12(@13)                                     0690 02892000
*   DCL                                                            0691 02893000
*         RLDBUFAD PTR(31);         /* RLD BUFFER ADDRESS Y02006     */ 02894000
*   DCL                                                            0692 02895000
*         RLDLENG FIXED(15);        /* LENGTH OF RLD DATA Y02006     */ 02896000
*   DCL                                                            0693 02897000
*         RLDCONSZ FIXED(15);       /* SIZE OF RLD ENTRY TO BE     0693 02898000
*                                      UPDATED Y02006                */ 02899000
*   DCL                                                            0694 02900000
*         RLDPTR PTR(31);           /* POINTER TO ADCON Y02006       */ 02901000
*   DCL                                                            0695 02902000
*         RLDWORK FIXED(31) BASED(RLDPTR) BDY(HWORD); /* ADCON Y02006*/ 02903000
*   DCL                                                            0696 02904000
*         LLMASK BIT(8) INIT('00001100'B); /* MASK TO ISOLATE 'LL' 0696 02905000
*                                      FIELD Y02006                  */ 02906000
*   DCL                                                            0697 02907000
*         1 RLDFORM BASED(RLDBUFAD), /* FORMAT OF RLD RECORD Y02006  */ 02908000
*             3 RLDIDEN PTR(8),     /* RLD IDENTIFIER Y02006         */ 02909000
*             3 * CHAR(3),                                         0697 02910000
*             3 RLDCNT1 FIXED(15),  /* COUNT - UNUSED Y02006         */ 02911000
*             3 RLDCNT2 FIXED(15),  /* LENGTH OF RLD DATA Y02006     */ 02912000
*             3 * CHAR(12),                                        0697 02913000
*             3 RLDDATA1 CHAR(1);   /* BEGINNING OF USEFUL RLD DATA     02914000
*                                      Y02006                        */ 02915000
*   DCL                                                            0698 02916000
*         1 RLDDATA BASED(RLDBUFAD), /* FORMAT OF RLD DATA Y02006    */ 02917000
*             3 RLDF BIT(8),        /* 'F' FIELD Y02006              */ 02918000
*                 5 RLDTYPE BIT(4), /* TYPE OF RLD ITEM Y02006       */ 02919000
*                 5 RLDLL BIT(2),   /* LENGTH OF ADCON Y02006        */ 02920000
*                 5 RLDS BIT(1),    /* DIRECTION OF RELOCATION Y02006*/ 02921000
*                 5 RLDT BIT(1),    /* SKIP 'RP' FIELD Y02006        */ 02922000
*             3 RLDA PTR(24);       /* OFFSET INTO MODULE Y02006     */ 02923000
*   RLDBUFAD = LCAINPUT;            /* POINT TO FIRST BUFFER Y02006  */ 02924000
         L     RLDBUFAD,LCAINPUT                                   0699 02925000
*   IF LCARLD = '1'B THEN           /* PROCESSING CONTROL/RLD RECORD    02926000
*                                      Y02006                        */ 02927000
         TM    LCARLD,B'00001000'                                  0700 02928000
         BNO   @RF00700                                            0700 02929000
*     RLDBUFAD = INBUFAD2;          /* YES - RLD IN 2ND BUFFER Y02006*/ 02930000
         L     RLDBUFAD,INBUFAD2                                   0701 02931000
*   RLDLENG = RLDCNT2;              /* LENGTH OF RLDDATA Y02006      */ 02932000
@RF00700 LH    RLDLENG,RLDCNT2(,RLDBUFAD)                          0702 02933000
*   RLDBUFAD = ADDR(RLDDATA1);      /* POINT TO RLDDATA Y02006       */ 02934000
         LA    @10,RLDDATA1(,RLDBUFAD)                             0703 02935000
         LR    RLDBUFAD,@10                                        0703 02936000
*   RLDLENG = RLDLENG - 4;          /* DECREMENT LENGTH PASSED 'RP'     02937000
*                                      Y02006                        */ 02938000
         SH    RLDLENG,@CH00062                                    0704 02939000
*   DO RLDBUFAD = RLDBUFAD BY 4 WHILE (RLDLENG > 0);               0705 02940000
         B     @DE00705                                            0705 02941000
@DL00705 DS    0H                                                  0706 02942000
*     IF RLDTYPE ^= '0000'B & RLDTYPE ^= '0001'B THEN /* VALID RLD ITEM 02943000
*                                                              Y02006*/ 02944000
         TM    RLDTYPE(RLDBUFAD),B'11110000'                       0706 02945000
         BZ    @RF00706                                            0706 02946000
         TM    RLDTYPE(RLDBUFAD),B'00010000'                       0706 02947000
         BNO   @RT00706                                            0706 02948000
         TM    RLDTYPE(RLDBUFAD),B'11100000'                       0706 02949000
         BZ    @RF00706                                            0706 02950000
@RT00706 DS    0H                                                  0707 02951000
*       RETURN CODE(9);             /* NO - SET RETURN CODE 9  Y02006*/ 02952000
         LA    @15,9                                               0707 02953000
         L     @14,12(,@13)                                        0707 02954000
         LM    @00,@12,20(@13)                                     0707 02955000
         BR    @14                                                 0707 02956000
*     RLDCONSZ = (RLDF&LLMASK) / 4 + 1; /* GET SIZE OF ADCON   Y02006*/ 02957000
@RF00706 SLR   @00,@00                                             0708 02958000
         IC    @00,RLDF(,RLDBUFAD)                                 0708 02959000
         MVC   @ZT00003+3(1),LLMASK                                0708 02960000
         N     @00,@ZT00003                                        0708 02961000
         SRL   @00,2                                               0708 02962000
         AH    @00,@CH00050                                        0708 02963000
         LR    RLDCONSZ,@00                                        0708 02964000
*     RESPECIFY WKREG RESTRICTED;                                  0709 02965000
*     WKREG = LCAOTPUT + RLDA;      /* ADDRESS OF ENTRY TO RELOCATED    02966000
*                                      Y02006                        */ 02967000
         L     WKREG,RLDA-1(,RLDBUFAD)                             0710 02968000
         LA    WKREG,0(,WKREG)                                     0710 02969000
         A     WKREG,LCAOTPUT                                      0710 02970000
*     RESPECIFY OTPUTBUF BASED(WKREG);                             0711 02971000
*     RLDPTR = WKREG - 4 + RLDCONSZ; /* ADDRESS OF 4 BYTES, WITH   0712 02972000
*                                      ADCON RIGHT JUSTIFIED IN THE     02973000
*                                      WORK Y02006                   */ 02974000
         LR    RLDPTR,WKREG                                        0712 02975000
         SH    RLDPTR,@CH00062                                     0712 02976000
         AR    RLDPTR,RLDCONSZ                                     0712 02977000
*     IF RLDS = '0'B THEN           /* POSITIVE RELOCATION Y02006    */ 02978000
         TM    RLDS(RLDBUFAD),B'00000010'                          0713 02979000
         BNZ   @RF00713                                            0713 02980000
*       RLDWORK = RLDWORK + LCARELOC; /* YES Y02006                  */ 02981000
         MVC   @TF00001(4),RLDWORK(RLDPTR)                         0714 02982000
         L     @10,@TF00001                                        0714 02983000
         A     @10,LCARELOC                                        0714 02984000
         ST    @10,@TF00001                                        0714 02985000
         MVC   RLDWORK(4,RLDPTR),@TF00001                          0714 02986000
*     ELSE                          /* NO Y02006                     */ 02987000
*       RLDWORK = RLDWORK - LCARELOC;                              0715 02988000
         B     @RC00713                                            0715 02989000
@RF00713 MVC   @TF00001(4),RLDWORK(RLDPTR)                         0715 02990000
         L     @10,@TF00001                                        0715 02991000
         S     @10,LCARELOC                                        0715 02992000
         ST    @10,@TF00001                                        0715 02993000
         MVC   RLDWORK(4,RLDPTR),@TF00001                          0715 02994000
*     RESPECIFY WKREG UNRESTRICTED;                                0716 02995000
@RC00713 DS    0H                                                  0717 02996000
*     RLDLENG = RLDLENG - 4;        /* DECREMENT LENGTH PASSED 'FA'     02997000
*                                      Y02006                        */ 02998000
         LA    @10,4                                               0717 02999000
         SR    RLDLENG,@10                                         0717 03000000
*     IF RLDT = '0'B THEN           /* SKIP 'RP' REQUIRED Y02006     */ 03001000
         TM    RLDT(RLDBUFAD),B'00000001'                          0718 03002000
         BNZ   @RF00718                                            0718 03003000
*       DO;                         /* YES Y02006                    */ 03004000
*         RLDBUFAD = RLDBUFAD + 4;  /* SKIP 'RP' Y02006              */ 03005000
         AR    RLDBUFAD,@10                                        0720 03006000
*         RLDLENG = RLDLENG - 4;    /* DECREMENT LENGTH PASSED 'RP'     03007000
*                                      Y02006                        */ 03008000
         SR    RLDLENG,@10                                         0721 03009000
*       END;                                                       0722 03010000
*   END;                                                           0723 03011000
@RF00718 AH    RLDBUFAD,@CH00062                                   0723 03012000
@DE00705 SLR   @10,@10                                             0723 03013000
         CR    RLDLENG,@10                                         0723 03014000
         BH    @DL00705                                            0723 03015000
*   RETURN CODE(0);                                                0724 03016000
         LR    @15,@10                                             0724 03017000
         L     @14,12(,@13)                                        0724 03018000
         LM    @00,@12,20(@13)                                     0724 03019000
         BR    @14                                                 0724 03020000
*   END AMDSARLD;                                                  0725 03021000
*   END AMDSALDR;                                                  0726 03022000
@EL00001 L     @13,4(,@13)                                         0726 03023000
@EF00001 DS    0H                                                  0726 03024000
@ER00001 LM    @14,@12,12(@13)                                     0726 03025000
         BR    @14                                                 0726 03026000
@DATA    DS    0H                                                       03027000
@CH00358 DC    H'-16'                                                   03028000
@CH00050 DC    H'1'                                                     03029000
@CH00062 DC    H'4'                                                     03030000
@CH00219 DC    H'5'                                                     03031000
@CH00102 DC    H'6'                                                     03032000
@CH00121 DC    H'15'                                                    03033000
@CH00280 DC    H'16'                                                    03034000
@CH00203 DC    H'32'                                                    03035000
@CH00200 DC    H'144'                                                   03036000
@CH00202 DC    H'4096'                                                  03037000
@CH00204 DC    H'6144'                                                  03038000
@CH00212 DC    XL2'7800'                                                03039000
@SM00438 MVC   MSGBUF1(0),MESSAGE(RCDPTR)                               03040000
@SM00440 MVC   MSGBUF2(0),MESSAGE(RCDPTR)                               03041000
@SM00442 MVC   MSGBUF1+44(0),MESSAGE+4(RCDPTR)                          03042000
@SM00444 MVC   MSGBUF1+4(0),MESSAGE+4(RCDPTR)                           03043000
@SM00446 MVC   MSGBUF1+4(0),@TS00001                                    03044000
@SM00450 MVC   OTPUTBUF(0,@10),TXTDATA-1(@14)                           03045000
@SM00453 MVC   INPUTBUF(0,RLDBUF2),INPUTBUF(RCDPTR)                     03046000
@SM00455 MVC   OTPUTBUF(0,BUFPTR),INPUTBUF(RCDPTR)                      03047000
         DS    0F                                                       03048000
@SA00001 DS    18F                                                      03049000
@SA00003 DS    15F                                                      03050000
@TF00001 DS    F                                                        03051000
@ZTEMPS  DS    0F                                                       03052000
@ZT00001 DC    F'0'                                                     03053000
@ZT00003 DC    F'0'                                                     03054000
@ZTEMPND EQU   *                                                        03055000
@ZLEN    EQU   @ZTEMPND-@ZTEMPS                                         03056000
         DS    0F                                                       03057000
@CF00449 DC    F'-1'                                                    03058000
@CF00185 DC    F'2'                                                     03059000
@CF00206 DC    XL4'8000'                                                03060000
@CA00146 DC    A(AMDMSGTB)                                              03061000
         DS    0D                                                       03062000
INBUFADD DS    A                                                        03063000
INBUFAD2 DS    A                                                        03064000
OTBUFADD DS    A                                                        03065000
OTBUFSIZ DC    F'49152'                                                 03066000
BUFNDX2  DS    F                                                        03067000
CSECTORG DS    F                                                        03068000
CSECTEND DS    F                                                        03069000
CTLEND   DS    A                                                        03070000
CTLSTART DS    A                                                        03071000
INBUFSIZ DC    H'0'                                                     03072000
@TS00001 DS    CL125                                                    03073000
@CB00221 DC    X'0066'                                                  03074000
         DS    CL3                                                      03075000
LCA      DS    CL48                                                     03076000
         ORG   LCA                                                      03077000
LCAMODUL DS    CL8                                                      03078000
LCACSECT DS    CL8                                                      03079000
LCAFLAGS DS    CL1                                                      03080000
         ORG   LCAFLAGS                                                 03081000
LCAFUNC  DS    BL1                                                      03082000
LCATYPE  EQU   LCAFLAGS+0                                               03083000
LCAIPL   EQU   LCAFLAGS+0                                               03084000
LCAPGECT EQU   LCAFLAGS+0                                               03085000
LCAUNUSD EQU   LCAFLAGS+0                                               03086000
         ORG   LCA+17                                                   03087000
LCAWKFLG DS    CL1                                                      03088000
         ORG   LCAWKFLG                                                 03089000
LCASOC   DS    BL1                                                      03090000
LCAEOC   EQU   LCAWKFLG+0                                               03091000
LCAENDSW EQU   LCAWKFLG+0                                               03092000
LCANMFND EQU   LCAWKFLG+0                                               03093000
LCARLD   EQU   LCAWKFLG+0                                               03094000
LCANULL  EQU   LCAWKFLG+0                                               03095000
         ORG   LCA+18                                                   03096000
LCACOUNT DS    CL1                                                      03097000
LCARSRVD DC    X'00'                                                    03098000
LCAINDCB DS    FL4                                                      03099000
LCAOTDCB DS    FL4                                                      03100000
LCAINPUT DS    AL4                                                      03101000
LCAOTPUT DS    AL4                                                      03102000
LCAOTEOR DS    AL4                                                      03103000
LCAPROLD DS    AL4                                                      03104000
LCARELOC DC    F'0'                                                     03105000
         ORG   LCA+48                                                   03106000
CSECTS   DS    CL56                                                     03107000
         ORG   CSECTS                                                   03108000
AMDSAIP1 DC    CL8'AMDSAIP1'                                            03109000
AMDSAIP2 DC    CL8'AMDSAIP2'                                            03110000
AMDSAHSR DC    CL8'AMDSAHSR'                                            03111000
AMDSALSR DC    CL8'AMDSALSR'                                            03112000
AMDSAPGE DC    CL8'AMDSAPGE'                                            03113000
AMDSAPRO DC    CL8'AMDSAPRO'                                            03114000
AMDSAPR2 DC    CL8'PGERCDCT'                                            03115000
         ORG   CSECTS+56                                                03116000
LDRPARMS DS    CL28                                                     03117000
         ORG   LDRPARMS                                                 03118000
TYPE2HI  DC    CL8'TYPE2=HI'                                            03119000
TYPE2LO  DC    CL8'TYPE2=LO'                                            03120000
IPL2D    DC    CL6'IPL2=D'                                              03121000
IPL2T    DC    CL6'IPL2=T'                                              03122000
         ORG   LDRPARMS+28                                              03123000
BLANKS   DC    CL8' '                                                   03124000
MSGBUF1  DC    CL125' '                                                 03125000
         DS    CL3                                                      03126000
MSGBUF2  DC    CL125' '                                                 03127000
WTOCODES DC    X'02000020'                                              03128000
PATCH    DC    CL10'PATCH AREA'                                         03129000
LDRPATCH DC    X'00'                                                    03130000
         DC    XL256'0'                                                 03131000
         DC    XL243'0'                                                 03132000
OBJID    DC    X'02'                                                    03133000
BLDLAREA DS    CL36                                                     03134000
         ORG   BLDLAREA                                                 03135000
@NM00001 DC    H'1'                                                     03136000
@NM00002 DC    H'32'                                                    03137000
BLDLNAME DS    CL8                                                      03138000
BLDLTTRK DS    CL4                                                      03139000
@NM00003 DS    CL12                                                     03140000
BLDLMLEN DS    CL3                                                      03141000
BLDLTXT1 DS    CL2                                                      03142000
@NM00004 DS    CL3                                                      03143000
         ORG   BLDLAREA+36                                              03144000
OBJTYPS  DS    CL12                                                     03145000
         ORG   OBJTYPS                                                  03146000
ESD      DC    CL3'ESD'                                                 03147000
TXT      DC    CL3'TXT'                                                 03148000
ENDD     DC    CL3'END'                                                 03149000
RLD      DC    CL3'RLD'                                                 03150000
         ORG   OBJTYPS+12                                               03151000
LLMASK   DC    B'00001100'                                              03152000
         DS    CL3                                                      03153000
AMDMSGX  DC    AL4(AMD037I)                                             03154000
         DC    AL4(AMD040I)                                             03155000
         DC    AL4(AMD036I1)                                            03156000
         DC    AL4(AMD036I2)                                            03157000
         DC    AL4(AMD036I3)                                            03158000
         DC    AL4(AMD036I4)                                            03159000
         DC    AL4(AMD039I)                                             03160000
         DC    AL4(AMD041I)                                             03161000
         DC    AL4(AMD044I1)                                            03162000
         DC    AL4(AMD044I2)                                            03163000
AMDSALDR CSECT                                                          03164000
         READ SYSDECB,SF,,,,,,MF=L                                      03165000
SYS1DCB  DCB   MACRF=(RP),DDNAME=SYSUT1,DSORG=PS,RECFM=FB,             C03166000
               SYNAD=AMDSYND3,EODAD=AMDOBEOD,LRECL=80                   03167000
SYS2DCB  DCB   MACRF=(RP),DDNAME=SYSUT2,DSORG=PS,RECFM=U,              C03168000
               SYNAD=AMDSYND3,EODAD=AMDMDEOD                            03169000
SYS3DCB  DCB   MACRF=(W),DDNAME=SYSUT3,DSORG=PS,RECFM=U,               C03170000
               SYNAD=AMDSYND1                                           03171000
SYS4DCB  DCB   MACRF=(W),DDNAME=SYSUT4,DSORG=PS,RECFM=U,               C03172000
               SYNAD=AMDSYND1,BLKSIZE=6144                       Y02006 03173000
PRINTDCB DCB   MACRF=(PM),DDNAME=SYSPRINT,DSORG=PS,RECFM=VA,           C03174000
               LRECL=125,BLKSIZE=129,SYNAD=AMDSYND2                     03175000
AMDSALDR CSECT                                                          03176000
@00      EQU   00                      EQUATES FOR REGISTERS 0-15       03177000
@01      EQU   01                                                       03178000
@02      EQU   02                                                       03179000
@03      EQU   03                                                       03180000
@04      EQU   04                                                       03181000
@05      EQU   05                                                       03182000
@06      EQU   06                                                       03183000
@07      EQU   07                                                       03184000
@08      EQU   08                                                       03185000
@09      EQU   09                                                       03186000
@10      EQU   10                                                       03187000
@11      EQU   11                                                       03188000
@12      EQU   12                                                       03189000
@13      EQU   13                                                       03190000
@14      EQU   14                                                       03191000
@15      EQU   15                                                       03192000
RLDPTR   EQU   @09                                                      03193000
RLDCONSZ EQU   @10                                                      03194000
RLDLENG  EQU   @07                                                      03195000
RLDBUFAD EQU   @06                                                      03196000
RLDBUF2  EQU   @08                                                      03197000
RLDBUF1  EQU   @09                                                      03198000
I        EQU   @07                                                      03199000
LMRCDLNG EQU   @07                                                      03200000
OFFSET2  EQU   @06                                                      03201000
OFFSET1  EQU   @07                                                      03202000
BUFNDX1  EQU   @08                                                      03203000
BLKEND   EQU   @09                                                      03204000
IOSAV14  EQU   @06                                                      03205000
RETRNCOD EQU   @07                                                      03206000
PLISTPTR EQU   @08                                                      03207000
PARMGR1  EQU   @01                                                      03208000
DCBPTR   EQU   @02                                                      03209000
DECBPTR  EQU   @03                                                      03210000
RCDPTR   EQU   @04                                                      03211000
BUFPTR   EQU   @05                                                      03212000
TYPE2PTR EQU   @06                                                      03213000
IPL2PTR  EQU   @07                                                      03214000
WKREG    EQU   @08                                                      03215000
RETRNREG EQU   @14                                                      03216000
REG15    EQU   @15                                                      03217000
ENTRYPTR EQU   @06                                                      03218000
         EXTRN AMDMSGTB                                                 03219000
PGERCDCT EQU   0                                                        03220000
TYPEPARM EQU   0                                                        03221000
IPL2PARM EQU   0                                                        03222000
DCBOFLGS EQU   0                                                        03223000
DCBDDNAM EQU   0                                                        03224000
DCBBLKSI EQU   0                                                        03225000
DCBLRECL EQU   0                                                        03226000
INPUTBUF EQU   0                                                        03227000
OTPUTBUF EQU   0                                                        03228000
PLIST    EQU   0                                                        03229000
PLISTLNG EQU   PLIST                                                    03230000
PARMS    EQU   PLIST+2                                                  03231000
PLISTADR EQU   0                                                        03232000
SYNADMSG EQU   0                                                        03233000
MESSAGE  EQU   0                                                        03234000
MSGLNG   EQU   0                                                        03235000
IOBPTR   EQU   0                                                        03236000
CSWRESID EQU   0                                                        03237000
RCDID    EQU   0                                                        03238000
RCDTYPE  EQU   0                                                        03239000
ESDCNT   EQU   0                                                        03240000
CESDCNT  EQU   0                                                        03241000
IOBCSWCT EQU   0                                                        03242000
DCBIOBA  EQU   0                                                        03243000
CTLPREFX EQU   0                                                        03244000
CTLID    EQU   CTLPREFX                                                 03245000
CTLIDBIT EQU   CTLID                                                    03246000
CTLENTRY EQU   0                                                        03247000
TXTFMT   EQU   0                                                        03248000
TXTADDR  EQU   TXTFMT+5                                                 03249000
TXTLNG   EQU   TXTFMT+10                                                03250000
TXTDATA  EQU   TXTFMT+16                                                03251000
ESDENTRY EQU   0                                                        03252000
ESDNAME  EQU   ESDENTRY                                                 03253000
ESDTYPE  EQU   ESDENTRY+8                                               03254000
ESDADDR  EQU   ESDENTRY+9                                               03255000
ESDLNG   EQU   ESDENTRY+13                                              03256000
RLDWORK  EQU   0                                                        03257000
RLDFORM  EQU   0                                                        03258000
RLDCNT2  EQU   RLDFORM+6                                                03259000
RLDDATA1 EQU   RLDFORM+20                                               03260000
RLDDATA  EQU   0                                                        03261000
RLDF     EQU   RLDDATA                                                  03262000
RLDTYPE  EQU   RLDF                                                     03263000
RLDS     EQU   RLDF                                                     03264000
RLDT     EQU   RLDF                                                     03265000
RLDA     EQU   RLDDATA+1                                                03266000
AD1      EQU   AMDMSGTB                                                 03267000
AD2      EQU   AMDMSGTB+4                                               03268000
AD3      EQU   AMDMSGTB+8                                               03269000
AD4      EQU   AMDMSGTB+12                                              03270000
AD5      EQU   AMDMSGTB+16                                              03271000
AD6      EQU   AMDMSGTB+20                                              03272000
AD7      EQU   AMDMSGTB+24                                              03273000
AD8      EQU   AMDMSGTB+28                                              03274000
AD9      EQU   AMDMSGTB+32                                              03275000
AD10     EQU   AMDMSGTB+36                                              03276000
AD11     EQU   AMDMSGTB+40                                              03277000
AD12     EQU   AMDMSGTB+44                                              03278000
AD13     EQU   AMDMSGTB+48                                              03279000
AD14     EQU   AMDMSGTB+52                                              03280000
AD15     EQU   AMDMSGTB+56                                              03281000
*                                      START UNREFERENCED COMPONENTS    03282000
RLDLL    EQU   RLDF                                                     03283000
@NM00007 EQU   RLDFORM+8                                                03284000
RLDCNT1  EQU   RLDFORM+4                                                03285000
@NM00006 EQU   RLDFORM+1                                                03286000
RLDIDEN  EQU   RLDFORM                                                  03287000
ESDSEG   EQU   ESDENTRY+12                                              03288000
@NM00005 EQU   ESDENTRY+8                                               03289000
TXTSDID  EQU   TXTFMT+14                                                03290000
TXTBLNK3 EQU   TXTFMT+12                                                03291000
TXTBLNK2 EQU   TXTFMT+8                                                 03292000
TXTBLNK1 EQU   TXTFMT+4                                                 03293000
TXTTYPE  EQU   TXTFMT+1                                                 03294000
TXTIDENT EQU   TXTFMT                                                   03295000
TXTSIZE  EQU   CTLENTRY+2                                               03296000
ENTRYID  EQU   CTLENTRY                                                 03297000
CTLCCW   EQU   CTLPREFX+8                                               03298000
CTLRLDCT EQU   CTLPREFX+6                                               03299000
CTLCNT   EQU   CTLPREFX+4                                               03300000
CTLRSRVD EQU   CTLPREFX+1                                               03301000
NOTCHKED EQU   CTLID                                                    03302000
*                                      END UNREFERENCED COMPONENTS      03303000
@RT00059 EQU   AMD035I                                                  03304000
@RT00062 EQU   AMD035I                                                  03305000
@RT00065 EQU   AMD035I                                                  03306000
@RT00067 EQU   AMD038I                                                  03307000
@RF00088 EQU   AMD038I                                                  03308000
@RT00093 EQU   AMD035I                                                  03309000
@RT00097 EQU   AMD035I                                                  03310000
@RT00101 EQU   AMD038I                                                  03311000
@RF00104 EQU   AMD038I                                                  03312000
@RT00116 EQU   AMD042I                                                  03313000
@RT00127 EQU   AMD042I                                                  03314000
@RT00182 EQU   AMDPROP                                                  03315000
@RT00276 EQU   AMDSAWTO                                                 03316000
@RT00340 EQU   AMDSAWTO                                                 03317000
@RT00441 EQU   AMDFIND                                                  03318000
@RT00453 EQU   AMDOBTXT                                                 03319000
@RT00458 EQU   AMDOBJ                                                   03320000
@RF00458 EQU   AMDESD                                                   03321000
@RC00447 EQU   AMDEXIT                                                  03322000
@RF00512 EQU   AMDTXT                                                   03323000
@RF00486 EQU   AMDTXT                                                   03324000
@RC00548 EQU   AMDEXIT                                                  03325000
@RT00564 EQU   AMDNMFND                                                 03326000
@RT00570 EQU   AMDCESD                                                  03327000
@RT00598 EQU   AMDEXIT                                                  03328000
@RT00608 EQU   AMDEXIT                                                  03329000
@RT00614 EQU   AMDCNTRL                                                 03330000
@RT00616 EQU   AMDRLD1                                                  03331000
@RT00659 EQU   AMDEXIT                                                  03332000
@RT00665 EQU   AMDMDEOD                                                 03333000
@RF00665 EQU   AMDCNTRL                                                 03334000
@RT00677 EQU   AMDEXIT                                                  03335000
@RT00680 EQU   AMDEXIT                                                  03336000
@RT00683 EQU   AMDEXIT                                                  03337000
@PB00004 EQU   @EL00001                                                 03338000
@PB00003 EQU   @PB00004                                                 03339000
@PB00002 EQU   @PB00003                                                 03340000
@ENDDATA EQU   *                                                        03341000
         END   AMDSALDR                                                 03342000
