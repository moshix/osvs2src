         TITLE 'IEAVSY50....WAIT * POST * TCB SWITCHING'                00095040
*ROUTINE NAME-           IGC001, WAIT SVC ROUTINE                       00102002
*                                                                       00109002
*FUNCTIONS-            1.CAUSES THE ISSUING RB CONTROL LEVEL TO         00116002
*                        STOP PROCESSING AND WAIT ON THE OCCURANCE      00123002
*                        OF ONE OR MORE EVENTS.                         00130002
*                                                                       00137002
*ENTRY POINT NAMES-      IGC001, WAIT SVC ENTRY POINT                   00144002
*                        IEAVWAIT - WAIT BRANCH ENTRY                   00147002
*                                                                       00151002
*CONTAINED IN MODULE-    IEAVSY50- WAIT/POST SYNCHRONIZATION MODULE     00158002
*                                                                       00165002
*ATTRIBUTES-             RESIDENT,RE-ENTRANT,SUPERVISOR STATE,          00172002
*                        LOCAL LOCK, KEY 0, TYPE 1 SVC.                 00179002
*                                                                       00186002
*                                                                       00193002
*EXTERNAL REFERENCES    IEA0VL01- VALIDITY CHECK ROUTINE                00200002
*                                                                       00207002
*                        SYSTEM RESOURCES MANAGER                       00214002
*                                                                       00221002
*                        WHEN ASCBTCBS GOES TO ZERO (ALL TCBS IN        00228002
*                        ADDRESS SPACE NON-DISPATCHABLE OR IN WAIT)     00235002
*                        BECAUSE OF A LONGWAIT BEING ISSUED, THE        00242002
*                        NIOWAIT SYSEVENT IS ISSUED.                    00249002
*                                                                       00256002
*                        MACRO CALL -                                   00263002
*                                                                       00270002
*                        SYSEVENT NIOWAIT,ENTRY=BRANCH                  00277002
*                                                                       00284002
*                        INPUT - REGISTER 13 HAS ADDR OF 72 BYTE SAVE   00291002
*                        AREA                                           00298002
*                        _ REGISTER 0 HAS  NIOWAIT CODE AND             00305002
*                        DEFAULT ASID = 0 IN HIGH TWO BYTES             00312002
*                                                                       00319002
*INPUT-                  REGISTER 0 CONTAINS A COUNT OF THE NUMBER      00326002
*                        OF EVENTS THAT MUST OCCUR BEFORE THE           00333002
*                        ISSUING TASK CAN CONTINUE IN CONTROL. IF THE   00340002
*                        SIGN BIT IS ON, THE REQUEST IS A LONGWAIT.     00347002
*                                                                       00354002
*                        REGISTER 1 CONTAINS 0, OR THE ADDRESS OF A     00361002
*                        SINGLE ECB(EVENT CONTROL BLOCK) OR             00368002
*                        THE ADDRESS OF A LIST OF ECB'S TO BE           00375002
*                        WAITED UPON.  A COMPLEMENTED REGISTER, IF SET  00382002
*                        SIGNALS THE PRESENCE OF A LIST.  0 INDICATES   00389002
*                        WAIT WITHOUT ECB AND IS VALID ONLY FOR         00396002
*                        BRANCH ENTRY.                                  00403002
*                                                                       00410002
*                                                                       00417002
*OUTPUT-                 NONE                                           00424002
*                                                                       00431002
*ENTRY POINTS-         1.IGC001,GIVEN CONTROL VIA THE SVC               00438002
*                        INTERRUPT HANDLER(FLIH).                       00445002
*                                                                       00452002
*                      2. IEAVWAIT, BRANCH ENTRY, LOCAL LOCK,           00459002
*                         KEY 0.                                        00466002
*                                                                       00473002
*EXIT POINT-           1.TO TYPE I EXIT PROLOGUE FORCE DISP ENTRY       00480002
*                        IF SVC CALLER AND RB IS PUT INTO WAIT STATE    00487002
*                                                                       00488002
*                      2.TO TYPE 1 EXIT PROLOGUE IF SVC CALLER AND RB   00489002
*                        IS NOT PUT IN WAIT (REG 14 ON ENTRY)           00490002
*                                                                       00494002
*                      3.TO THE DISPATCHER IF BRANCH ENTRY              00501002
*                        THE LOCAL LOCK IS FREED AND THE PSW            00503002
*                        IS DISABLED PRIOR TO DISPATCHER ENTRY.         00505002
*                                                                       00508002
*ERROR EXIT POINTS-    1.TO ABEND                                       00515002
*                                                                       00522002
*                        THE ERROR CODES ARE.                           00529002
*                        X'0101' ERROR CODE #1 NUMBER OF ECBS TO        00536002
*                                              BE WAITED UPON EX-       00543002
*                                              CEEDS THE NUMBER OF      00550002
*                                              ECBS GIVEN.              00557002
*                        X'0201' ERROR CODE #2 THE ECB ADDRESS IS       00564002
*                                              INVALID.                 00571002
*                        X'0301' ERROR CODE #3 AN ATTEMPT IS BEING      00578002
*                                              MADE TO SET THE WAIT     00585002
*                                              FLAG IN AN ECB WHICH     00592002
*                                              IS ALREADY SET.          00599002
*                                                                       00606002
*                                                                       00613002
         EJECT                                                          00620002
*                                                                       00627002
IGC001   START                                                          00695001
         USING *,R6                                                     00705002
         MODID BR=YES                                                   00715002
         DROP  R6                                                       00725002
         SPACE 2                                                        00745001
*WAITING ECB                                                            00795001
*************************                                               00845001
* S     *               *                                               00895001
*  BIT  * WAITING RB'S  *                                               00945001
*   ON  *   ADDRESS     *                                               00995001
*************************                                               01045001
         SPACE 1                                                        01095001
*POSTED ECB                                                             01145001
*************************                                               01195001
* 1       BITS 2-31     *                                               01245001
*  BIT     COMPLETION   *                                               01295001
*   ON      CODE        *                                               01345001
*************************                                               01395001
         SPACE 2                                                        01445001
         SPACE 1                                                   MTS0 02895001
* GENERAL EQUATES                                                       02945001
ERRWAIT1 EQU   X'0101'               WAIT'S, WAIT COUNT TO BIG          03045001
ERRWAIT2 EQU   X'0201'               WAIT ECB ADDRESS INVALID           03095001
ERRWAIT3 EQU   X'0301'               TRYING TO PUT WAITING ECB IN WAIT  03145001
ERRPOST1 EQU   X'0102'               POST ECB ADDRESS INVALID           03195001
ERRPOST2 EQU   X'0202'               POST ECB'S RB ADDRESS INVALID      03245001
ECBPTFLG EQU   X'40'                 ECB POST FLAG                      03295040
RECBWTF  EQU   X'7F'                 RESET ECB WAIT FLAG/LAST ECB PT    03545040
LSTIND   EQU   X'80'                 LAST ECB INDICATOR                 03595040
TCBIND   EQU   X'80'                 RBLINK INDICATES TCB ADDRESS       03645040
ECBWTFLG EQU   X'80'                 ECB WAIT FLAG                      03695040
SUPTST   EQU   X'80'                 PSW PROTECT KEY FIELD       Y02139 03745040
RRBECBWT EQU   X'FE'                 RESET RB'S ECB SEARCH FLAG         03795040
ANYONE   EQU   X'FF'                 TEST FOR ANY BIT IN A BYTE         03845040
XFF      EQU   X'FF'                 ALL ONES                  @Z40EPVD 03895040
M0011    EQU   B'0011'               MASK USED IN ICM INST     @Z40EPVD 03915040
L2       EQU   2                     LENG OF 2                          03925040
L3       EQU   3                     LENGTH OF 3                        03945040
L8       EQU   8                     VALUE OF 8                  Y02139 04195040
C12      EQU 12                      CONST OF 12                        04205040
WDBOUND  EQU   X'03'                 TO TEST FOR WD BOUNDARY            04215040
FOUR     EQU   4                     FOUR                         20021 04295040
ZERO     EQU   0                     CONSTANT                     20021 04345040
LAST     EQU   1                     TESTS FOR LAST PARM IN A LIST      04395040
ON2      EQU   1                     CONDITION FOR ALL BITS ON          04445040
OFF2     EQU   12                    CONDITION FOR ALL BITS NOT ON      04495040
KEY0     EQU   8                     CONDITION FOR ALL BITS OFF         04895040
ECBADDR  EQU   0                     ADDRESS OF ECB IN PARMLIST         04945040
ERRTADDR EQU   8                     ADDR OF ERRET IN PARMS      Y02139 04995040
ASCBADDR EQU   4                     ADDR OF ASCB IN PARMS       Y02139 05045040
ENABON   EQU   X'03'                 TESTS FOR ENABLED PSW              05095040
DISABLE  EQU   X'FC'                 DISABLE MASK                Y02139 05145040
XWTOFF   EQU   X'BF'                 TURNS OFF RBXWAIT BIT              05155040
DISAB    EQU   12                    CONDITION FOR DISABLED PSW         05245040
HBYTE    EQU   4                     SHIFT OF 4 BITS                    05295040
NOTKEY0  EQU   5                     CONDITION FOR NOT KEY ZERO         05345040
ABNDALGN EQU   12                    SHIFTS ABEND CODE 12 BITS          05395040
ABENINST EQU   13                    FOR ISSUEING SVC 13 FOR ABEND      05445040
XMASASID EQU   4                     MASTER SCHED ASID X 4      @Y02752 05495040
ONE      EQU   1                     CONST OF 1                  Y02139 05545040
SRBSV    EQU   0                     DISP IN SAVE AREA FOR SRB @YM01534 05555040
SPOSTRT  EQU   4                     DISP IN SV AREA-RET ADDR  @YM01534 05565040
         SPACE 1                                                        05565540
*        INPUT PARAMETER LIST FORMAT FOR                       @ZA15373 05566040
*        SVC ENTRY CROSS MEMORY POST REQUESTS                  @ZA15373 05566540
         SPACE 1                                                        05567540
ECBPTR   EQU   0                     OFFSET TO ECB ADDRESS     @ZA15373 05568040
ASCBPTR  EQU   4                     OFFSET TO TARGET ASCB ADDR@ZA15373 05569040
ERRETPTR EQU   8                     OFFSET TO ERRET ADDRESS   @ZA15373 05570040
ECBKEY   EQU   12                    OFFSET TO ECB VAL CHK KEY @ZA15373 05571040
         SPACE 1                                                        05573040
CCODE    EQU   4                     CREATE FUNCTION CODE      @Z40EPVD 05575040
DCODE    EQU   8                     DELETE FUNCTION CODE      @Z40EPVD 05577040
EIGHT    EQU   8                     NUMERIC 8                 @Z40EPVD 05579040
HIGHBIT  EQU   1                     WAIT BIT                  @Z40EPVD 05581040
LOWBITS  EQU   3                     EXTENDED ECB INDICATORS   @Z40EPVD 05585040
RC0      EQU   0                     REASON CODE 0             @Z40EPVD 05595040
RC4      EQU   4                     REASON CODE 0             @Z40EPVD 05598040
RC8      EQU   8                     REASON CODE 8             @Z40EPVD 05600040
RCC      EQU   12                    REASON CODE C             @Z40EPVD 05602040
RC10     EQU   16                    REASON CODE 10            @Z40EPVD 05609040
RC14     EQU   20                    REASON CODE 14            @Z40EPVD 05616040
         SPACE 2                                                        05630040
* REGISTER EQUATES.                                                     05645001
         SPACE 1                                                        05695001
* WAIT AND POST                                                         05745001
R0       EQU   0                   INPUT REG 0                   Y02139 05765040
WS0      EQU   4*R0                SA OFFSET FOR R0              Y02139 05795040
R1       EQU   1                   INPUT REG 1                   Y02139 05795440
WS1      EQU   4*R1                SA OFFSET FOR R1              Y02139 05799040
XRSCRTCH EQU   2                   SCRATCH PAD REG                20002 06045002
R2       EQU   2                   REG 2                                06055002
ECBE2    EQU   2                   ADDR OF ECB EXT             @Z40EPVD 06060040
FRRWA3   EQU   3                   FRR WORK AREA ADDR          @Z40EPVD 06065040
XRWORK   EQU   3                   WORK REG                             06095002
R3       EQU   3                   REG 3                                06145002
XRTCB    EQU   4                   ADDRESS OF  TCB               Y02139 06195002
R4       EQU   4                   REG 4                                06205002
XRRB     EQU   5                   ADDRESS OF  RB                Y02139 06245002
R5       EQU   5                   REG 5                                06255002
XRECB    EQU   6                   ECB ADDR REG                         06265002
R6       EQU   6                   REG 6                                06275002
XRASCB   EQU   7                   ASCB POINTER                  Y02139 06285040
R7       EQU   7                   REG 7                                06297002
XRWAITCT EQU   8                   WAIT COUNT                           06303002
R8       EQU   8                   REG 8                                06309002
XRPTCODE EQU   9                   INPUT POST CODE                      06315002
XRECBCTR EQU   9                   COUNT OF ECBS                        06355002
R9       EQU   9                   UPPER REG SAVED IN POST       Y02139 06365002
XRECBPTR EQU   10                  UPDATED ECB ADDRESS                  06395002
R10      EQU   10                  BR ENTRY POST INPUT REG       Y02139 06445002
XRSAVE   EQU   11                  SAVE REGISTER FOR REG. 1      Y02139 06495002
R11      EQU   11                  BR ENTRY POST INPUT REG       Y02139 06505002
XRLINKR  EQU   12                  LINK REGISTER                 Y02139 06545002
R12      EQU   12                  REG 12                               06595002
R13      EQU   13                  SAVE AREA PTR                 Y02139 06645002
XRRETURN EQU   14                  TYPE 1 SVC HANDLER ADDRESS (SVCXT)   06695001
R14      EQU   14                  SUBRTN LINK REG               Y02139 06705002
XRBASE   EQU   15                  BASE REGISTER                        06745001
R15      EQU   15                  SUBRTN BASE REG               Y02139 06795002
         SPACE 2                                                        09195001
* ENTRY AND EXTRN STATMENTS.                                            09245001
         ENTRY IEAVWAIT             WAIT BRANCH ENTRY            Y02139 09265040
         ENTRY IEA0PT01             POST 1                              09345001
         ENTRY IEA0PT02             POST 2                              09395001
         ENTRY IEA0PT03             POST EXIT ROUTINE E.P.     @Z40EPVD 09400040
         ENTRY IEA0PT0E             EXIT IDENTIFY/DELETE E.P.  @Z40EPVD 09415040
         ENTRY IGC002               POST                                09445001
         ENTRY IEASPOST             PURGEDQ PARAMETER LIST FOR SPOST    09455002
         ENTRY IEARPOST             POST RMTR                           09465002
         EXTRN IEA0DS               DISPATCHER                   Y02139 09495002
         EXTRN IEA0VL01             VAL CHECK                    Y02139 09645002
         EJECT                                                          09795001
* WAIT SVC ROUTINE.                                                     09798002
*     THE WAIT SVC ROUTINE WILL PLACE THE RB (REQUEST BLOCK)            09801002
*  OF THE REQUESTING ROUTINE INTO A WAIT STATE.  THIS IS                09804002
*  ACCOMPLISHED BY SETTING THE WAIT COUNT FIELD IN THE RB.              09807002
*  AN RB WAIT STATE WILL PREVAIL UNTIL THE WAIT COUNT IS REDUCED        09810002
*  TO ZERO BY THE SVC POST ROUTINE.  THE WAIT FLAG AND REQUESTING       09813002
*  RB ADDRESS ARE SET IN EACH ECB.  FOR EVERY ECB WHOSE POST            09816002
*  FLAG IS ALREADY SET, THE WAIT COUNT IN REGISTER 0 IS                 09819002
*  DECREMENTED.  IF THIS COUNT GOES TO ZERO,(INDICATING THAT            09822002
*  POSTING HAS ALREADY COMPLETED) WAIT RESETS ALL PROCESSED ECBS        09825002
*  AND RETURNS.  THE WAIT COUNT IS ALWAYS STORED IN THE REQUESTORS      09828002
*  RB.                                                                  09829040
*/*WAIT: CHART*/                                                        21689002
*/*IGC001: E SVC ENTRY*/                                                21755002
IGC001   CSECT                                                          21795001
*/* P SET UP BASE REG*/                                                 21805002
         BALR  XRBASE,ZERO             ADDRESSABILITY                   21825040
         USING *,XRBASE                PROGRAM BASE                     21845040
WAITBAS  EQU   *                       BASE STARTING POINT              21945040
         USING RBSECT,XRRB             RB BASE                   Y02139 22015040
         USING TCB,XRTCB               TCB BASE                  Y02139 22035040
         USING FLC,0                   FIXED LOW CORE BASE       Y02139 22055040
         USING ASCB,XRASCB             ASCB BASE REG             Y02139 22075040
*/* P SET R14 TO EXIT PROLOG FORCE DISPATCHER ENTRY ADDR*/              22156002
         L     R14,CVTEXP1-CVTMAP(,R3) GET FORCE ENTRY ADDR             22157002
*/*BRENTRY: P ENABLE RB OLD PSW*/                                       22159002
BRENTRY  OI    RBOPSW,ENABON           ENABLE OLD PSW                   22161002
*/* P ADDRESS LOCAL SAVE AREA AND SAVE REGS*/                           22163002
         L     XRSAVE,ASCBASXB         ADDRESS OF ASXB           Y02139 22164040
         USING ASXB,XRSAVE             BASE FOR ASXB             Y02139 22165040
         L     XRSAVE,ASXBSPSA         ADDR OF LOCAL WSAVT       Y02139 22175040
         USING WSAL,XRSAVE             ADDR OF WSAVT             Y02139 22185040
         L     XRSAVE,WSALWAIT         ADDR OF WAIT WSA          Y02139 22189002
         DROP  XRSAVE                                            Y02139 22189402
         STM   R0,R1,WS0(XRSAVE)       SAVE INPUT REGS           Y02139 22191002
*/* P ENSURE POSITIVE WAIT COUNT*/                                      22191402
*                                                                       22191602
*              ALL THIS CODE IS NECESSARY AS WAIT HAS A DOUBLE          22191802
*              INTERFACE.  THE COUNT OF EVENTS MAY BE (FOR LONG WAIT    22192002
*              ONLY) IN COMPLEMENTED FORM OR SIMPLY WITH THE HIGH       22192202
*              ORDER BIT ON.  THE FOLLOWING CODE ASSURES THE CORRECT    22192402
*              WAIT COUNT.                                              22192602
*                                                                       22192802
         LR    XRECB,R1                SET UP ECB REG            Y02139 22193402
         LR    XRWAITCT,R0             DUPLICATE WAIT CT                22213440
         ALR   XRWAITCT,XRWAITCT       DOUBLE WAIT COUNT                22233440
         LPR   XRWAITCT,XRWAITCT       MAKE COUNT POSITIVE              22253440
         SRL   XRWAITCT,ONE            DIVIDE BY 2                      22273440
*/*ENDWTCT: D (YES,WAITEXIT,NO,) WAIT COUNT IS ZERO*/                   22435002
ENDWTCT  LTR   XRWAITCT,XRWAITCT       Q.REQUESTOR WAIT COUNT ZERO      22440040
         BC    8,WAITEXIT              *YES RETURN TO CALLER            22495002
         LA    XRECBCTR,ONE            INITIALIZE ECB COUNTER TO 1      22515040
         SPACE                                                          22545503
         LR    XRWORK,XRWAITCT         DUPLICATE WAIT COUNT    @Y30HPVA 22545740
         SPACE                                                          22546503
*/* D (BR,WSUPENT,SVC,) BR OR SVC ENTRY*/                               22547002
         LTR   XRRETURN,XRRETURN       BRANCH ENTRY              Y02139 22555002
         BM    WSUPENT                 BR IF SO                  Y02139 22560040
*/* D (YES,WSUPENT,NO,) CALLER IS SUPVR KEY*/                           22615002
         TM    RBOPSW+ONE,SUPTST       ENTRY FROM A SUPERVISOR KEY CALL 22665040
         BZ    WSUPENT                 YES - TAKE BRANCH                23395040
*/* D (YES,WNON0ENT,NO,) ECBLIST SPECIFIED*/                            23495002
         LCR   XRECBPTR,XRECB          Q. LIST REQUEST ?                23545040
         BP    WNON0ENT                YES - BRANCH                     23595040
*/* S ADDROK: VALIDITY CHECK ECB*/                                      23695002
         BAL   XRLINKR,ADDROK          GO CHECK ADDRESS OUT             23715040
*/* D (GOOD,ECBWT,FAIL,) RESULTS OF VALIDITY CHECK*/                    23755002
*/* S (,ECBWT) CHKCOMTS: CHECK FOR COMM TASK ECB*/                      23765002
         BNE   CHKCOMTS                INVALID - CHECK FOR CSCB ECB     23775040
         B     ECBWT                   GO EXIT FROM PREFIX              23795040
*/*WNON0ENT: S ADDROK: VALIDITY CHECK LIST WORD*/              @YM32396 24005003
WNON0ENT DS    0H                      LIST REQUEST            @Y30HPVA 24010040
         LR    R1,XRECBPTR             ADDR IN R1 FOR VAL CHK  @YM32396 24015040
         BAL   XRLINKR,ADDROK          SUBRTN INVOKES VAL CHK  @YM32396 24025040
*/* D (FAIL,ERROR201,GOOD,) RESULTS OF VALIDITY CHECK*/        @YM32396 24037003
         BNE   ERROR201                INVALID ECBLIST                  24041040
*/* S ADDROK: VALIDITY CHECK ECB*/                                      24095002
         L     XRECB,ZERO(,XRECBPTR)   GET ECB ADDRESS         @YM01876 24115040
         LR    R1,XRECB                SAVE ADDR TO CHK LIST END  AS2PR 24175040
         BAL   XRLINKR,ADDROK          VALIDATE IT                      24205040
*/* D (GOOD,%W1,FAIL,) RESULTS OF VALIDITY CHECK*/                      24255002
*/* S CHKCOMTS: CHECK FOR COMM TASK ECB*/                               24265002
         BNE   CHKCOMTS                CHK FOR CSCB ECB                 24295002
         SPACE                                                          24296003
*/*%W1: D (NO,NEXT1,YES,) ECB POSTED*/                         @Y30HPVA 24296503
         TM    0(XRECB),ECBPTFLG       ECB POSTED              @Y30HPVA 24297003
         BZ    NEXT1                   NO. DO NOT COUNT IT     @Y30HPVA 24297503
*/* P COUNT POSTED ECB*/                                       @Y30HPVA 24298003
*/* D (YES,GETOUT,NO,) REQUESTED WAIT CT. = POSTED CT.*/       @Y30HPVA 24298503
         BCTR  XRWORK,R0               DECR REQ # ECBS POSTED  @ZA05968 24298640
         LTR   XRWORK,XRWORK           COUNT GONE TO ZERO?     @ZA05968 24298740
         BZ    GETOUT                  YES, TERMINATE PROCESS  @ZA05968 24298840
NEXT1    EQU   *                       BYPASSES COUNTING ECB   @Y30HPVA 24300003
         SPACE                                                          24301003
*/*NEXT1: P COUNT ECB- GET NEXT ECBLIST ENTRY*/                         24305003
         TM    0(XRECBPTR),LSTIND      CHK FOR END-OF-LIST IND          24345002
         BC    1,ECBWT                 BR IF SO                         24395002
*/* D (YES,ECBWT,NO,WNON0ENT) END OF ECBLIST*/                          24445002
         LA    XRECBCTR,ONE(XRECBCTR)  INCR ECB COUNTER                 24495040
         LA    XRECBPTR,FOUR(XRECBPTR) POINT TO NEXT ECB IN LIST        24795040
         B     WNON0ENT                GO HANDLE NEXT ELEMENT IN LIST   24845040
*/*WSUPENT: D (ZERO,NOZERO,ECB,ECBWT,LIST,) TEST HOW ECB SPECIFIED*/    24945002
WSUPENT  DS    0H                                                       25195002
         LCR   XRECBPTR,XRECB          Q. LIST REQUEST                  25215040
         BM    ECBWT                   IF NOT A LIST - BRANCH           25245040
         BZ    NOZERO                  BR IF WAIT WITHOUT ECB           25305002
         SPACE                                                          25325003
*/*WSLIST: D (NO,NEXT2,YES,) ECB POSTED*/                      @Y30HPVA 25375003
WSLIST   EQU   *                       LOOP THRU ECB LIST      @Y30HPVA 25400003
         L     XRECB,ZERO(,XRECBPTR)   GET ECB ADDRESS         @Y30HPVA 25404003
         TM    0(XRECB),ECBPTFLG       ECB POSTED              @Y30HPVA 25408003
         BZ    NEXT2                   NO. DO NOT COUNT IT     @Y30HPVA 25412003
*/* P COUNT POSTED ECB*/                                       @Y30HPVA 25416003
*/* D (YES,GETOUT,NO,) REQ. WAIT CT. = POSTED CT.*/            @Y30HPVA 25418003
         BCTR  XRWORK,R0               DECR REQ # ECBS POSTED  @ZA05968 25419040
         LTR   XRWORK,XRWORK           COUNT GONE TO ZERO?     @ZA05968 25420040
         BZ    GETOUT                  YES, TERMINATE PROCESS  @ZA05968 25420640
*/*NEXT2: P COUNT ECB AND GET NEXT LIST ENTRY*/                @Y30HPVA 25422003
NEXT2    EQU   *                       BYPASS COUNTING ECB     @Y30HPVA 25425003
         SPACE                                                          25430003
WSLIST1  TM    0(XRECBPTR),LSTIND      TEST FOR LAST ECB ADDR           25435003
         BC    1,ECBWT                 BR IF SO                         25445002
*/* D (NO,WSLIST,YES,) END OF LIST*/                                    25495002
         LA    XRECBCTR,ONE(XRECBCTR)  INCREASE ECB COUNTER (SEE ABOVE) 25545040
         LA    XRECBPTR,FOUR(XRECBPTR) BUMP TO NEXT ECB ADDR            25895040
         B     WSLIST                  BRANCH                           25945040
         EJECT                                                          26345001
*/*ECBWT: D (EQ,ECBWT1,GT,ERROR101,LT,) WAIT COUNT VS # ECBS*/          26395002
ECBWT    DS    0H                                                       26745002
         L     XRECBPTR,WS1(XRSAVE)     ESTABLISH ORIG ECBPTR           26765040
         CR    XRECBCTR,XRWAITCT        Q.ECB CT. LT WAIT CT.           26795040
         BE    ECBWT1                   EQUAL, TAKE BRANCH        AS2PR 27445001
         BL    ERROR101                 *** YES, TAKE BRANCH            27495002
*/* P SET ON RB SEARCH BIT*/                                            27505002
         OI    RBSTAB2,RBECBWT          SET RB'S ECB SEARCH FLAG        27545001
*/*ECBWT1: P INITIALIZE ECB POINTER*/                                   27845402
ECBWT1   LCR   XRECBPTR,XRECBPTR        ECB OR ECBLIST            AS2PR 27846240
         BM    PKEY1                    BR IF ECB                       27847040
PKEY     L     XRECB,0(XRECBPTR)        GET ECB ADDR FRM LIST           27875040
*/*PKEY1: P PICK UP ECB FOR LATER COMPARE AND SWAP*/                    27937002
PKEY1    L     R0,ZERO(,XRECB)          GET ECB NOW            @YM02795 27942040
*/*PKEY2: D (YES,CFLAGON,NO,) ECB ALREADY POSTED*/                      27957002
PKEY2    TM    0(XRECB),ECBPTFLG        Q.ECB'S POST FLAG SET           27995002
         BO    CFLAGON                  YES,TAKE BRANCH                 28045001
*/* D (YES,ERROR301,NO,) IS ECB ALREADY WAITED UPON*/                   28095002
         TM    ZERO(XRECB),ECBWTFLG     Q.IS ECB WAIT FLAG SET          28145040
         BO    ERROR301                 *** YES TAKE BRANCH TO ABTERM   28245001
*/* P CS RB ADDR AND WAIT BIT IN ECB*/                                  28255002
         LR    R1,XRRB                  SET RB ADR IN REG       @Y02752 28295040
         O     R1,TIDBIT                SET WAIT BIT            @Y02752 28345040
         CS    R0,R1,ZERO(XRECB)      CS RB ADDR/WAIT BIT TO ECB@Y02752 28415040
*/* D (NO,PKEY2,YES,) COMPARE AND SWAP GO */                            28515002
         BNZ   PKEY2                    GO CHECK WHAT HAPPENED  @Y02752 28535040
         SPACE 2                                                        28645001
*/*UPDATE: P UPDATE ECB LIST POINTER*/                                  28655002
UPDATE   LA    XRECBPTR,FOUR(XRECBPTR)  UPDATE ECB LIST ADR             28675040
*/* D (MORE,PKEY1,DONE,) BCT CHECK FOR MORE ECBS*/                      28705002
         BCT   XRECBCTR,PKEY            Q.DECREMENT ECB CTR (NOT 0 BR)  28725040
*/*NOZERO: P SET EXPLICIT WAIT BIT IN RB*/                              28795002
NOZERO   S     XRRB,WPRBPREL            GET PREFIX ADDRESS       AS2708 28845040
         OI    RBFLAGS1-RBPREFIX(XRRB),RBXWAIT SET RBXWAIT BIT   AS2708 29655040
         A     XRRB,WPRBPREL            RESET RB BASE REG               29665040
*/* P DECR ASCBTCBS USING CS*/                                          29717002
         L     XRWORK,ASCBTCBS          GET TCB RDY CT                  29737040
CSTCBSDN LR    XRSCRTCH,XRWORK          DUPLICATE VALUE                 29767040
         BCTR  XRSCRTCH,R0              DECREMENT                       29817040
         CS    XRWORK,XRSCRTCH,ASCBTCBS  COMP/SWAP CT                   29867040
         BNZ   CSTCBSDN                 BR IF DID NOT GO                29919040
*/* P SET RB WAIT COUNT*/                                               29925002
         STC   XRWAITCT,RBWCF           ST WAIT COUNT IN REQUESTING RB  29926040
*/* D (NO,LONGWAIT,YES,) ALL TCBS IN A.S. NOT READY*/                   29937002
         LTR   XRSCRTCH,XRSCRTCH        TEST FOR CT GO TO ZERO @YM01524 29947040
         BNZ   LONGWAIT                 BR IF AS NOT ALL IN WAIT        29967040
*/* P INCREMENT ASCB SHORT WAIT COUNT*/                                 30027002
         LH    XRWORK,ASCBSWCT          GET AS SHORT WAIT CTR           30047040
         LA    XRWORK,ONE(XRWORK)       INCR CTR                        30067040
         STH   XRWORK,ASCBSWCT          RESET CTR                       30117040
*/*LONGWAIT: D (NO,WAITEXIT,YES,) LONG WAIT SPECIFIED*/                 30169002
LONGWAIT TM    WS0(XRSAVE),LSTIND      TEST FOR LONG WAIT IND           30177002
         BZ    WAITEXIT                BR IF NOT LONG WAIT              30217002
*/* P SET LONG WAIT BIT IN RB*/                                         30267002
         S     XRRB,WPRBPREL           ADDR RB PREFIX                   36897002
         OI    RBFLAGS1-RBPRFX(XRRB),RBLONGWT  SET LONG WAIT  IND       36899002
*/* D (YES,,NO,WAITEXIT) HAS COUNT OF READY TCBS GONE TO ZERO */        36905002
         LTR   XRSCRTCH,XRSCRTCH       TEST COUNT              @YM02607 36908040
         BNZ   WAITEXIT                BR IF STILL ANY RDY TCBS@YM02607 36911040
LONGRBCK DS    0H                      TESTING LABEL                    36925002
*/* S SYSEVENT: NOTIFY LONGWAIT*/                                       36944302
         LR    XRSCRTCH,XRRETURN       SAVE REG14 ACROSS                36948102
         LR    R13,XRSAVE              SET REG 13 SAVE AREA PTR@YM01599 36950140
         LR    XRWORK,XRBASE           SAVE BASE REG ACROSS SRM CALL    36953240
         LM    R5,R6,WS0(XRSAVE)       SAVE REGS 0 AND 1       @YM01682 36956040
         SYSEVENT NIOWAIT,ENTRY=BRANCH                                  36963602
         STM   R5,R6,WS0(XRSAVE)       SET REGS 0&1            @YM01682 36964640
         LR    XRBASE,XRWORK           RESTORE BASE REG                 36967440
         LR    XRRETURN,XRSCRTCH       RESTORE RETURN REG               36975002
*/*WAITEXIT: D (BR,%Q1,SVC,) ENTRY TYPE*/                               37205002
WAITEXIT DS    0H                      COMMON EXIT ROUTINE              37225040
         LM    R0,R1,WS0(XRSAVE)       RESTORE REGS 0 AND 1    @YM01682 37245040
         LTR   XRRETURN,XRRETURN       TEST BR OR SVC ENTRY             37295002
*/* R BPR 14*/                                                          37345002
         BPR   XRRETURN                SVC, AND AWAY WE GO              37395002
*/*%Q1: P DISABLE CPU USING STNSM*/                                     37397002
         STNSM WOS,DISABLE             DISABLE SYSTEM MASK              37401040
*/* S SETFRR: PURGE FRR STACK*/                                         37405402
         SETFRR P,WRKREGS=(XRWORK,XRSCRTCH)  PURGE FRR STACK            37407002
*/* S SETLOCK: RELEASE LOCAL LOCK*/                                     37409002
         SETLOCK RELEASE,TYPE=LOCAL,RELATED='INPUT PARAM'               37415002
*/* R IEA0DS*/                                                          37417002
         L     XRBASE,DISPTCHR         GET DISP ENTRY ADDR              37425002
         BR    XRBASE                  GO THERE                         37455002
*/*CFLAGON: D (MORE,UPDATE,ZERO,) BCT WAITCOUNT*/                       37485002
CFLAGON  BCT   XRWAITCT,UPDATE         Q.DECREMENT WAIT COUNT NOT 0 BR  37795001
*/* D (YES,TISWBR,NO,) BRANCH ENTRY */                                  37796002
         LTR   R14,R14                 TEST HIGH BIT ON FOR BR ENTRY    37796540
         BM    TISWBR                  BRANCH IF BRANCH ENTRY           37797040
*/* P RESET R14 TO NORMAL EXIT PROLOG ADDR*/                            37799002
         L     R14,CVTPTR              GET CVT POINTER                  37799540
         L     R14,CVTEXPRO-CVTMAP(,R14)  ADDR OF EXIT PROLOGUE         37801003
*/*TISWBR: D (NO,WAITEXIT,YES,) RB SEARCH BIT IS ON*/                   37805002
TISWBR   TM    RBSTAB2,RBECBWT         Q.IS RB'S ECB SEARCH FLAG SET    37845002
         BZ    WAITEXIT                *NO GO TO EXIT POINT             37895001
*/* P RESET RB SEARCH BIT*/                                             37905002
         NI    RBSTAB2,RRBECBWT        RESET RB ECB SEARCH FLAG         37945001
         LA    XRWORK,ZERO(,XRECB)     SET LAST ECB ADDR       @YM07244 37965002
         L     XRECBPTR,WS1(XRSAVE)    GET ORIG ECBLIST PTR             37975040
         LCR   XRECBPTR,XRECBPTR       MAKE POSITIVE                    38005002
*/* P (,WAITEXIT) RESET WAIT BIT IN EACH ECB IN LIST*/                  38015002
LOOP1    L     XRECB,ZERO(,XRECBPTR)   OBTAIN ECB ADDRESS               38025040
         LA    XRECB,ZERO(,XRECB)      CLEAR                   @YM07244 38045040
         CLR   XRECB,XRWORK            TEST FOR LAST TO CLEAR  @YM07244 38055040
         BE    WAITEXIT                EXIT IF LAST            @YM07244 38065040
         NI    0(XRECB),RECBWTF        RESET ECB'S WAIT FLAG            38095002
         LA    XRECBPTR,FOUR(XRECBPTR) UPDATE LIST POINTER              38145040
         B     LOOP1                   BRANCH UNCONDITIONALLY           38245040
         SPACE                                                          38305003
*/*GETOUT: D (YES,WAITEXIT,NO,) BRANCH ENTRY */                @Y30HPVA 38310003
GETOUT   SR    XRWAITCT,XRWAITCT       ZERO WAIT COUNT         @Y30HPVA 38312040
         NI    RBSTAB2,RRBECBWT        TURN OFF SEARCH FLAG    @Y30HPVA 38315040
         LTR   R14,R14                 HI BIT ON FOR BR ENTRY  @Y30HPVA 38325040
         BM    WAITEXIT                BRANCH IF BRANCH ENTRY  @Y30HPVA 38335040
*/* P (,WAITEXIT) RESET R14 TO NORMAL EXIT PROLOG ADDR*/       @Y30HPVA 38339003
         L     R14,CVTPTR              GET CVT POINTER         @Y30HPVA 38340040
         L     R14,CVTEXPRO-CVTMAP(,R14)  ADDR OF EXIT PROL    @Y30HPVA 38343003
         B     WAITEXIT                                        @Y30HPVA 38345003
         EJECT                                                          38395001
*/* E ADDROK */                                                         38415003
*/*ADDROK: P INITIALIZE FOR CALL TO VALIDITY CHECK*/                    38445002
ADDROK   DS    0H                                                       39245002
         LA    XRSCRTCH,L3(,R1)        LOAD END ADDR OF ECB             39295040
         STM   R14,R15,FOUR*R14(XRSAVE) SAVE REGS 14-15                 39395040
*/* S IEA0VL01: CHECK ADDRESS*/                                         39415002
         L     R15,CHECK               GET VAL CHK RTN ADDR             39425002
         BALR  R14,R15                 GO TO VAL CHK RTN                39435002
*/* R RETURN WITH CCODE SET*/                                           39435402
         LM    R14,R15,FOUR*R14(XRSAVE) RESTORE REGS 14 -15             39436240
         BR    XRLINKR                 RETURN                           39439002
*/* E CHKCOMTS */                                                       39459003
*/*CHKCOMTS: P GET CSCB ADDR VIA JSCB*/                                 39489002
CHKCOMTS DS    0H                                                       39795002
         L     XRSCRTCH,TCBJSCB        GET JSCB ADDRESS                 39815040
         USING IEZJSCB,XRSCRTCH                                         39895002
         L     XRSCRTCH,JSCBCSCB       GET CSCB ADDRESS                 39915040
         USING CSCB,XRSCRTCH                                            39995002
         LA    XRECB,0(XRECB)          CLEAR HI ORDER BYTE/USE SCR REG  40045040
*/* D (NO,ERROR201,YES,) INVALID ECB OWNED BY COMM TASK*/               40155002
         C     XRECB,CHECBP            Q. IS ECB EQUAL TO ECB OF COM    40175040
         BNE   ERROR201                NO - THAT IS BAD GO TO ERROR RTN 40195040
*/* R RETURN*/                                                          40255002
         B     FOUR(XRLINKR)           ADDR THOUGH INVALID - IS OK      40275040
         EJECT                                                          42195001
*   ERROR EXITS FROM WAIT                                               42295001
**********************************************************************  42345001
*/*ERROR101: P (,ERRORALL) SET ABEND CODE 101*/                         42355002
ERROR101 DS    0H                      *                                42375040
         LA    R1,ERRWAIT1             NO TO WAIT ON GRT THAN NO GIVEN  42395040
         B     ERRORALL                GO TO COMMON ABEND CODE          42445040
*/*ERROR201: P (,ERRORALL) SET ABEND CODE 201*/                         42505002
ERROR201 DS    0H                      *                                42525040
         LA    R1,ERRWAIT2             INVALID ECB ADDRESS CODE         42545040
         B     ERRORALL                GO TO COMMON ABEND CODE          42595040
*/*ERROR301: P SET ABEND CODE 301*/                                     42655002
ERROR301 DS    0H                      *                                42675040
         LA    R1,ERRWAIT3             WAIT FLAG ALREADY SET            42695040
         B     ERRORALL                GO TO COMMON ABEND CODE          42745040
*                                                                       42845001
*/*ERRORALL: R ABEND*/                                                  42855002
ERRORALL SLL   R1,ABNDALGN             MOVE COMP CODE LEFT/ SHOW SYSTEM 42875040
         ICM   R1,L8,ERRORFLG          TAKE DUMP                        42895040
         SVC   ABENINST                ISSUE SVC 13                     42945040
*                                                                       43045001
**********************************************************************  43095001
         EJECT                                                          43195001
*                                                                       43205002
*        BRANCH ENTRY TO WAIT                                           43215002
*                                                                       43225002
*        THE CALLER HAS ESTABLISHED HIS RESUME ENVIRONMENT (REGS/PSW)   43225402
*        IN HIS TCB/PSW. REGS 0,1 ARE THE SAME AT ENTRY AS FOR THS SVC  43225802
*        WITH THE POSSIBILITY THAT THE USER MAY SPECIFY NO ECB (REG1    43226202
*        IS ZERO).                                                      43226602
*                                                                       43226702
*/* E IEAVWAIT*/                                                        43227002
IEAVWAIT DS    0H                                                       43235002
         USING *,XRBASE                BR ENTRY BASE REG                43237002
*/* P INITIALIZE ENVIRONMENTAL REGS*/                                   43237402
         L     XRASCB,PSAAOLD          CURRENT ASCB ADDR                43239002
         L     XRTCB,PSATOLD           CURRENT TCB ADDR                 43240040
         ST    R1,TCBGRS1              SAVE ECBLIST ADDR FOR POST       43243002
         L     XRRB,TCBRBP             CURRENT RB ADDR                  43243240
         L     XRBASE,BASEWT           COMMON WAIT BASE VALUE           43243502
         USING WAITBAS,XRBASE          COMMON WAIT BASE ADDR            43243640
*/* P (,BRENTRY) SET BR ENTRY SW- REG 14 NEGATIVE*/                     43244002
         O     XRRETURN,TIDBIT         SET SIGN BIT AS BR ENTRY SW      43244202
         B     BRENTRY                 GO TO MAINLINE                   43244440
*/*WAIT: END*/                                                          43257202
         EJECT                                                          43269802
*********************************************************************** 43273840
*                                                                       43277840
*ROUTINE NAME-           IGC002,POST SVC SERVICE ROUTINE                43282402
*                                                                       43295001
*FUNCTIONS-            1.POST WILL SIGNAL THE COMPLETION OF AN EVENT    43345001
*                          SPECIFIED BY AN EVENT CONTROL BLOCK(ECB)     43395001
*                          BY SETTING IT APPROPRIATELY.                 43445001
*                                                                       43452003
*                      2.POST WILL SIGNAL THE COMPLETION OF AN EVENT    43459003
*                          TYPE ECB BY STORING ITS ADDRESS IN THE       43466003
*                          ADDRESS IN THE APPROPIATE EVENT TABLE        43480003
*                          AND SETTING THE COMPLETE BIT AND COMPLETION  43487003
*                          CODE IN THE ECB.                             43491003
*                                                                       43495001
*                      3.POST WILL DETERMINE IF THE TASK IN A WAIT      43545003
*                          STATE HAS BEEN MADE READY.                   43565040
*                                                                       43625040
*                      4.GIVE AN AUTHORIZED USER EXIT ROUTINE           43655040
*                          CONTROL WHEN AN EXTENDED ECB IS              43685040
*                          POSTED.                                      43695040
*                                                                       43718040
*                      5.POST EXIT INTERFACE SERVICE                    43721040
*                          A. IDENTIFY POST EXIT ROUTINES TO POST       43724040
*                             MAINLINE BY QUEUEING A BLOCK NO THE       43727040
*                             POST EXIT QUEUE, HEADED BY ASXBPT0E.      43730040
*                          B. DELETE POST EXITS BY DEQUEING THE         43733040
*                             BLOCK IDENTIFIED WITH THE EXIT            43736040
*                             FROM THE POST EXIT QUEUE.                 43737040
*                                                                       43745001
*ENTRY POINT NAMES-    1.IGC002,ENTRY POINT VIA SVC 02                  44045001
*                                                                       44095001
*                      2. IEA0PT01,  BRANCH ENTRY                       44245002
*                                                                       44345001
*                      3. IEA0PT02, BRANCH ENTRY                        44395002
*                                                                       44445040
*                      4. IEA0PT03, BRANCH ENTRY - USED FOR             44495040
*                           REINVOCATION OF POST FROM A POST            44545040
*                           EXIT ROUTINE                                44595040
*                                                                       44600040
*                      5. IEA0PT0E, BRANCH ENTRY TO                     44605040
*                           IDENTIFY/DELETE POST EXITS                  44615040
*                                                                       44645001
*CONTAINED IN MODULE-    IEAVSY50- WAIT/POST SYNCHRONIZATION MODULE     44695001
*                                                                       44745001
*ATTRIBUTES-            LOCAL LOCK, ENABLED, KEY0, SUPERVISOR STATE     44795002
*                                                                       44895001
*EXTERNAL REFERENCES-                                                   45045001
*                         IEA0VL01--VALIDITY CHECK ROUTINE              45295001
*                                                                       45495001
*                         POST EXIT ROUTINES - INTERFACE AS FOLLOWS:    45500040
*                           ENTRY TO EXIT - KEY 0,SUP STATE,LOCAL LOC   45515040
*                             R0 POSTED ECB ADDR                        45525040
*                             R1 ECBREXTENSION ADDR                     45535040
*                             R14 RETURN ADDR                           45545040
*                             R15 ENTRY POINT ADDR                      45555040
*                             REMAINING REGS IRRELEVANT                 45565040
*                           RETURN - KEY 0,SUP STATE,LOCAL LOCK         45575040
*                             R11 UNCHANGED                             45585040
*                             R14 UNCHANGED                             45595040
*                             REMAINING REGS IRRELEVANT                 45605040
*INPUT-                  SVC ENTRY                                      45645002
*                        R0 CONTAINS THE POST CODE.                     45745002
*                                                                       45845001
*                        R1 CONTAINS THE ADDRESS OF THE ECB TO BE       45855002
*                        POSTED.                                        45860040
*                                                                       45875002
*                        IF HI ORDER BIT OF REG 1 IS ON, THEN           45895001
*                        REGISTER ONE POINTS TO A PARAMETER LIST.       45915040
*                        THE PARAMETER LIST IS THREE FULLWORDS          45945040
*                        AS FOLLOWS:                                    45995040
*                          WORD ONE---ADDRESS OF ECB                    46095001
*                          WORD TWO---ADDRESS OF ASCB                   46145002
*                          WORD THREE---ADDRESS OF ERRET                46195002
*                                                                       46215002
*                        IF HIGH ORDER BIT OF REG 0 IS ON, THE          46221040
*                        PARAMETER LIST CONTAINS A FOURTH WORD:         46227040
*                          WORD FOUR--BYTE 0 - ECBKEY IN FORMAT X'K0'   46233040
*                                     BYTES 1-3 - RESERVED              46239040
*                        (REG 0 CONTAINS THE POST CODE)                 46245002
*                        THIS PARAMETER LIST IS USED FOR                46295002
*                        CROSS-MEMORY POST                              46345002
*                                                                       46355040
*                        IEA0PT0E -BRANCH ONLY,SVC NOT AVAILABLE        46365040
*                          R0 FUNCTION CODE                             46375040
*                             4 - EXIT CREATION REQUEST                 46385040
*                             8 - EXIT DELETION REQUEST                 46395040
*                          R1 EXIT ROUTINE ADDR TO BE CREATED OR        46405040
*                            DELETED                                    46415040
*                          R14 RETURN ADDR                              46425040
*                          R15 ENTRY POINT ADDR (IEA0PT0E)              46435040
*                                                                       46445001
*OUTPUT-                 NONE                                           47995001
*                                                                       48045001
*ENTRY POINTS-        1A.IGC002,POST SVC ROUTINE ENTRY POINT            48095001
*                                                                       48245001
*                        2. (IEA0PT01) BRANCH ENTRY                     49895002
*                       THE USER MUST PROVIDE THE FOLLOWING.            50095001
*                        1. ADDRESS OF IEA0PT01 IN REGISTER 15.         50115040
*                        2. RETURN ADDRESS IN REGISTER 14.              50145040
*                        3. THE COMPLETION CODE IN REGISTER 10.         50195040
*                           IF POST WITHOUT ECB,                        50255002
*                           THEN R10 CONTAINS THE RB ADDRESS.           50265002
*                           THE HIGH ORDER BIT ON IN R10 FOR CROSS      50272040
*                           MEMORY POSTS INDICATES ECBKEY OPTION        50279040
*                           HAS BEEN REQUESTED.                         50286040
*                        4. THE ECB ADDRESS IN REGISTER 11,             50295002
*                           WITH X'00' IN HI ORDER BYTE IF NORMAL POST, 50345001
*                           AND X'80' IF CROSS-MEMORY POST.             50395002
*                           IF REG 11 IS ALL ZERO, THEN POST            50425002
*                           WITHOUT ECB (SEE REG 10).                   50455002
*                        5. IF XMPOST, REG 12 HAS ERRET ADDR            50495002
*                        6.  REG 13 HAS ASCB ADDR IF XMPOST             50545002
*                        7. IF ECBKEY OPTION HAS BEEN REQUESTED THEN    50555040
*                           BYTE 3 OF REG 0 CONTAINS THE KEY IN         50565040
*                           FORMAT X'K0'.                               50575040
*                                                                       50595001
*                                                                       50695001
*                     B. (IEA0PT02) BRANCH ENTRY                        50745002
*                        PERFORMS THE SAME                              50795002
*                        FUNCTION AS IEA0PT01 WITH NO XMPOST            50845002
*                        AND NO POST WITHOUT ECB.                       50915002
*                                                                       50995001
*                     C. (IEA0PT03) BRANCH ENTRY                        51002040
*                        PERFORMS SAME FUNCTION AS IEA0PT01             51009040
*                        AND HAS SAME INPUT REQUIREMENTS.               51016040
*                        THIS ENTRY POINT USES THE LOCAL                51023040
*                        SAVE AREA EXTENSION.                           51030040
*                     D. (IEA0PT0E) BRANCH ENTRY - CVT0PT0E             51031040
*                        CALLER MUST HAVE LOCAL LOCK, KEY 0,            51032040
*                        SUPERVISOR STATE                               51033040
*                        THIS ENTRY USES MAIN SAVE AREA                 51034040
*                                                                       51037040
*EXIT POINT-           1.TO TYPE I EXIT PROLOGUE FORCE DISPATCHER       51045002
*                        ENTRY IF SVC CALLER                            51145002
*                                                                       51155002
*                      2.TO REG 14 IF BRANCH ENTRY                      51195002
*                                                                       51895001
*                        IEA0PT01 BRANCH ENTRY FOR NORMAL POST          51945002
*                        LOCAL LOCK HELD                                52045002
*                        REGISTERS 0-9 AND 12-14 ARE TRANSPARENT        52095002
*                        REGISTERS 10-11 AND 15 ARE VOLATILE            52145002
*                                                                       52195001
*                        IEA0PT01 BRANCH ENTRY FOR XMPOST               52205002
*                        NO LOCK REQUIRED                               52207002
*                        REGS 9,14 ARE SAVED OTHERS ARE LOST            52217002
*                        IF LOCAL LOCK IS NOT HELD                      52219002
*                                                                       52221002
*                        REGS 0-9 AND 14 ARE SAVED IF                   52223002
*                        LOCAL LOCK IS HELD & MEM RELETED AT BR ENTRY   52223402
*                                                                       52225002
*                        (IEA0PT02) BRANCH ENTRY                        52245002
*                        LOCAL LOCK HELD                                52295002
*                        REGISTERS 0-9 AND 12-14 ARE TRANSPARENT        52345002
*                        REGISTERS 10-11 AND 15 ARE VOLATILE            52395002
*                                                                       52445001
*                                                                       52495001
*                        IEA0PT03 BRANCH ENTRY FOR POST                 52505040
*                        REINVOCATION, LOCAL LOCK HELD.                 52515040
*                        REGISTERS 1-14 ARE TRANSPARENT                 52525040
*                        REGISTER 15 IS UNPREDICTABLE                   52535040
*                                                                       52537040
*                      3.IEAV0PT0E, RETURN VIA CALLERS REG14,           52539040
*                        LOCAL LOCK HELD,KEY 0,SUPR STATE               52541040
*                                                                       52545001
*ERROR EXIT POINTS-    1. TO ABEND                                      52595002
*                                                                       52695001
*                       THE ERROR CODES ARE.                            53445002
*                        X'0102' ERROR CODE #1 POST ECB ADDRESS         53495001
*                                              INVALID.                 53545001
*                        X'0202' ERROR CODE #2 POST ECB'S RB            53595001
*                                              ADDRESS INVALID.         53645001
*                        X'0402' ERROR CODE #4 EVENTS ECB EVENTS        54345003
*                                              TABLE ADDRESS INVALID    55045003
*                        X'0502' ERROR CODE #5 POST TO FULL             55745003
*                                              EVENTS TABLE             56445003
*                                                                       57145003
*                        X'702' ERROR CODE #7 INVALID ECB               57195040
*                                             EXTENSION                 57245040
*                                             RELATED DATA              57295040
*                               REASON CODE                             57345040
*                                  0 - INVALID FUNCTION CODE FOR        57353040
*                                      ENTRY TO IEA0PT0E                57361040
*                                  4 - INVALID EXIT ROUTINE ADDR        57369040
*                                      FOR DELETE REQUEST AT            57377040
*                                      ENTRY TO IEA0PT0E                57385040
*                                  8 - INVALID VALUE OR                 57395040
*                                      RESERVED FIELDS USED             57445040
*                                      IN ECB EXTENSION                 57465040
*                                  C - INVALID EXIT ROUTINE             57495040
*                                      ADDRESS IN ECB EXTENSION         57545040
*                                 10 - ATTEMPT TO POST                  57595040
*                                      EXTENDED ECB FROM                57645040
*                                      POST EXIT ROUTINE                57695040
*                                 14 - INVALID ECB EXTENSION            57745040
*                                      ADDRESS IN ECB                   57795040
*                                                                       57845040
*CHANGE ACTIVITY-                                              @ZA30491 57865040
*  OZ11895--CHANGE TO MARK THE ECB POSTED BEFORE UPDATING THE  @ZA30491 57885040
*           EVENTS TABLE.                                      @ZA30491 57905040
*  OZ15375--PROVIDE NEW OPTION ECBKEY FOR XMPOST.              @ZA30491 57925040
*  OZ20188--CHANGE TO MAKE EVNTFRR (EVENTS FRR) SAVE REG 14    @ZA30491 57945040
*           ACROSS SETRP.                                      @ZA30491 57965040
*  OZ30491--REGISTERS 12 AND 13 WEREN'T SAVED WHEN A POST EXIT @ZA30491 57985040
*           ROUTINE WAS INVOKED. IF THEY ARE UPDATED BY THE    @ZA30491 58005040
*           EXIT, THE ORIGINAL VALUES OF REGS 12 AND 13 WILL   @ZA30491 58025040
*           NOT BE RETURNED TO A BRANCH ENTRY CALLER OF POST.  @ZA30491 58045040
*  OZ33186--FOR POST, IEAVSY50 CURRENTLY ASSUMES AS ECB WITH   @ZA33186 58048040
*           THE 2 LOW ORDER BITS OFF WILL BE UPDATED USING THE @ZA33186 58051040
*           LOCAL LOCK FOR SERIALIZATION. HOWEVER, CS SHOULD   @ZA33186 58054040
*           BE SUFFICIENT SERIALIZATION TO POINT TO AN         @ZA33186 58057040
*           EXTENDED ECB. THIS MAY RESULT IN A LOST POST.      @ZA33186 58060040
*                                                                       58065040
*********************************************************************** 58085040
         EJECT                                                          58195001
* SVC POST (SVC 2)                                                      58245001
*  ENTER WITH ECB ADDRESS IN REGISTER 1.                                58295001
*  ENTER WITH POST CODE IN REGISTER 0.                                  58345001
* FUNCTION.                                                             58395001
*  POST WILL SET COMPLETION FLAG AND CODE IN ECB. IF POST TRIES TO POST 58445001
*  A POSTED TCB, IT IGNORES POSTING AND EXITS.                          58465040
*  INPUT ECB'S PROTECT KEY IS TESTED IF EQUAL TO WAITING TCB, IF ENTRY  58545001
*  BY NON SUPERVISER. IF ECB'S PROTECT KEY IS NOT CORRECT GO TO ABEND.  58565040
*  STORE POST CODE AND POST FLAG IS ECB. THEN DECREMENT WAITING RB'S    58645002
*  WAIT COUNT. IF DECREMENTED WAIT COUNT IS ZERO, CHECK THE SEARCH ECB  58665040
*  FLAG IN THE RB. IF THE FLAG IS ON, FIND OUT THE POSITION OF THE RB   58695040
*  IN ITS QUEUE. IF RB IS THE TOP RB, GET ECB LIST ADDRESS FROM TCB     58745040
*  SAVE REGISTER 1. IF RB IS NOT TOP OF IT'S QUEUE, GET THE RB JUST     58795040
*  ABOVE THE REQUESTING RB. FIND OUT THE TYPE OF RB IT IS, AND GET THE  58845040
*  ECB LIST ADDRESS FROM REGISTER 1 SAVE AREA ACCORDANTLY. AFTER LIST   58895040
*  ADDRESS HAS BEEN FOUND, RESET ALL ECB WAIT FLAG.                     58945040
         SPACE 2                                                        59045001
*/*POST: CHART*/                                                        59055002
IGC001   CSECT                                                          59095001
         SPACE 2                                                        59145001
         CNOP  0,8                                                      59195001
*        SET UP BASE REGISTERS FOR DSECTS                               59245001
         USING RBSECT,XRRB             RB                               59265040
         USING TCB,XRTCB               TCB                              59295040
*/* E IGC002*/                                                          59395002
IGC002   BALR  XRBASE,ZERO             SET UP ADDRESSABILITY            59445040
*/* P INITIALIZE REGISTERS*/                                            60905002
         USING *,XRBASE                INCLUDING THE BASE REG           60925040
         L     XRRETURN,CVTEXP1-CVTMAP(,R3)  GET EXIT PROL FORCE ENTRY  60955002
         USING ASCB,XRASCB             ASCB BASE REG                    60995002
         L     XRSAVE,ASCBASXB         GET ASXB ADDR                    61045002
         USING ASXB,XRSAVE             ASXB BASE                        61095002
         L     XRSAVE,ASXBSPSA         ADDR OF SAVT                     61145002
         USING WSAL,XRSAVE                                              61195002
         L     XRSAVE,WSALPOST         POST WSA                         61245002
         DROP  XRSAVE                                                   61295002
         LR    XRECB,R1                                                 61345002
         LR    XRPTCODE,R0             SAVE INPUT REGS                  61395002
*/* D (NO,AUTHXMP,YES,) SUPVR KEY CALLER*/                              61445002
         TM    RBOPSW+ONE-RBSECT(XRRB),SUPTST  SUPERVISOR KEY CALLER    63245002
         BC    ONE,AUTHXMP          NO,BRANCH                           63295002
*/* D (YES,XMPROC,NO,RBCHECK) XMPOST REQUEST*/                          63305002
         LTR   XRECB,XRECB              IS THIS AN XMP REQUEST?         63345002
         BM    XMPROC                   YES, GO TO PROCESS IT           63395002
         B     RBCHECK                  NO, GO TO MAINLINE CODE         63445002
*/*TESTADOM: D (YES,XMPROC,NO,ECBVALID) XMPOST REQUEST*/                63495002
TESTADOM LTR   XRECB,XRECB              IS THIS AN XMP REQUEST?  SRB467 63595002
         BM    XMPROC                   YES, GO TO PROCESS IT  @YM02645 63645002
         B     ECBVALID                 ELSE, PROCESS NORMALLY   SRB467 63695001
*/*AUTHXMP: S TESTAUTH: PP CALLER*/                                     63705002
AUTHXMP  DS    0H                                                       63745002
* GO TO TEST HIS AUTHORITY TO SEE IF HE CAN ISSUE A CROSS MEMORY POST   63795002
         STM   XRRETURN,XRBASE,FOUR*XRRETURN(XRSAVE) SAVE RET AND BASE  63845002
*/* D (AUTH,TESTADOM,FAIL,) RESULTS OF TESTAUTH*/                       63855002
         TESTAUTH RBLEVEL=1,FCTN=1,STATE=YES,BRANCH=YES                 63895002
* RETURN CODE OF 0 OR 4 IN REG 15 TELLS THE STORY                SRB467 64345002
         LR    XRWORK,XRBASE           GET RETURN CODE                  64365040
         LM    XRRETURN,XRBASE,FOUR*XRRETURN(XRSAVE)                    64445002
*  THE FOLLOWING BRANCH TABLE WILL HANDLE THE RETURN CODE FROM TESTAUTH 64645001
TESTAUBR B     TESTAUBR+FOUR(XRWORK)   CHECK THE RETURN CODE     SRB467 64665040
         B     TESTADOM                IF ZERO, HE IS AUTHORIZED SRB467 64745001
*                                      IF NOT-IGNORE THE XMP REQ SRB467 64795002
*                                      AND FALL THROUGH          SRB467 64845001
*/*ECBVALID: S IEA0VL01: VALIDITY CHECK ADDRESS*/                       64895002
ECBVALID DS    0H                                                       65045002
         LR    R1,XRECB                SET UP REGISTER 1                65145002
         LA    XRSCRTCH,L3(,R1)        GET WORD END ADDR                65165040
         STM   R14,R15,FOUR*R14(XRSAVE) SAVE REGS 14-15                 65195040
         L     R15,CHECK               GET VAL CHK ADR                  65215002
         BALR  R14,R15                 BR TO VAL CHK RTN                65225002
         LM    R14,R15,FOUR*R14(XRSAVE) RESTORE REGS                    65230040
*/* D (OK,RBCHECK,FAIL,ERROR1) RESULTS OF VALIDITY CHECK*/              65285002
         BNE   ERROR1                  BRANCH TO ABTERM                 65345002
         B     RBCHECK                 UNCONDITIONALLY BRANCH           65395002
         EJECT                                                          65445001
*  ENTRY POINT IEA0PT01                                                 65545001
         SPACE 1                                                        65595001
         USING *,XRBASE                                                 65645001
*/* E IEA0PT01*/                                                        65695002
*                                                                       65701002
*              FOR LOCAL POST, THE CODE IS SUCH THAT REGS 12-13         65707002
*              ARE IMPLICITLY SAVED. SEE COMMENT ON IEA0PT02            65713002
*              ENTRY.                                                   65719002
*              NOTE THAT ONLY REGS 0-9 ARE SAVED ON A XMPOST            65725002
*              BRANCH ENTRY (WITH THE LOCAL LOCK AND MEMORY RELATED).   65731002
*                                                                       65737002
*/*IEA0PT01: P SET BRANCH ENTRY SWITCH- REG 14 NEG*/                    65745002
IEA0PT01 O     XRRETURN,TIDBIT         SET BR ENTRY SW                  65765040
*/* D (YES,XMPOST,NO,) XMPOST REQUEST*/                                 65797002
         LTR   R11,R11                 TEST FOR XMPOST REQ              65801040
         BM    XMPOST                  BR IF SO                         65805040
*/* P GET ADDR OF LOCAL SAVE AREA- SAVE REGS*/                          65817002
         L     XRBASE,PSAAOLD          GET CURRENT ASCB ADDR            65821040
         L     XRBASE,ASCBASXB-ASCB(,XRBASE)  GET ADDR OF ASXB          65845002
         L     XRBASE,ASXBSPSA-ASXB(,XRBASE)  GET ADDR OF LCL WSAVT     65905002
         L     XRBASE,WSALPOST-WSAL(,XRBASE)  GET ADDR OF POST WSA      65965002
         STM   R0,R9,0(XRBASE)         SAVE REGS 0-9                    66045002
         LR    XRECB,R11               ECB ADDR                         66095002
         LR    XRSAVE,XRBASE           SAVE AREA BASE REG               66195002
         BALR  XRBASE,R0               ESTABLISH BASE REG               66245002
         USING *,XRBASE                ADDRESSABILITY                   66255002
         L     XRBASE,BASE             GET COMMON BASE ADDR             66265002
         USING IGC002+2,XRBASE         COMMON BASE                      66275002
*/*SETMREGS: P INITIALIZE MAINLINE REGS*/                               66275140
SETMREGS EQU   *                       SET MAINLINE REGS       @Z40EPVD 66275240
         LR    XRPTCODE,R10            POST CODE               @Z40EPVD 66275340
         L     XRASCB,PSAAOLD          ADDR OF CURR ASCB                66275402
*/*ECBCHECK: D (NO,RBCHECK,YES,) POST WITHOUT ECB*/                     66277402
ECBCHECK LTR   XRECB,XRECB             TEST FOR POST W/O ECB            66279002
         BNZ   RBCHECK                 NO, GO TO MAINLINE               66285002
*/* P GET WAITING RB ADDR*/                                             66285402
         LR    XRRB,XRPTCODE           INSTEAD OF POST CODE, RB ADDR    66287002
         LR    XRTCB,XRRB              DUPLICATE                        66287140
*/*TCBLOOP: P FIND TCB ADDR FROM RBCHAIN*/                              66287402
TCBLOOP  TM    RBSTAB2-RBSECT(XRTCB),TCBIND  NEXT RB OR TCB             66289102
         L     XRTCB,RBLINK-RBSECT(XRTCB)    GET CHAIN PTR FROM RB      66290140
         BZ    TCBLOOP                 BR IF RB LINK                    66294102
*/* EVSWCF: D (YES,EXIT,NO,) WAIT COUNT ALREADY ZERO */                 66294503
EVSWCF   SR    XRWAITCT,XRWAITCT       CLEAR REG               @Y30HPVA 66296003
         CLI   RBWCF,ONE               WAIT COUNT IS ALREADY ZERO       66297902
         BL    EXIT                    YES, BR                          66299802
*/* EVNTLP1: D (YES,,NO,EVNTCK1) ARE THERE ANY MORE EVENT TABLES */     66305503
         LA    XRRB,0(,XRRB)           CLEAR HIGH BYTE         @Y30HPVA 66305603
         L     XRWORK,TCBEXT2-TCB(,XRTCB) GET PTR TO EXTENSION @Y30HPVA 66305703
         L     XRWORK,TCBEVENT-TCBXTNT2(,XRWORK) GET POINTER   @Y30HPVA 66309303
*                                      TO FIRST EVENT TABLE    @Y30HPVA 66312303
EVNTLP1  LTR   XRWORK,XRWORK          ARE THERE ANY MORE TABLES@Y30HPVA 66317203
         BZ    EVNTCK1                 NO, BRANCH              @Y30HPVA 66317603
*/* EVN1:   D (YES,,NO,EVNTCT1) IS TABLE WAITING ON POSTED RB*/         66320603
         CL    XRRB,EVNTRBP-EVNT(,XRWORK) IS TABLE WAITING ON  @Y30HPVA 66321640
*                                      POSTED RB               @Y30HPVA 66325803
         BNE   EVNTCT1                 NO, BRANCH              @Y30HPVA 66328503
*/* EVN2: P ZERO TABLE WAITING RB POINTER */                            66332003
         ST    XRWAITCT,EVNTRBP-EVNT(,XRWORK)  ZERO RB POINTER @Y30HPVA 66336503
*/* EVNTCT1: P (,EVNTLP1) POINT TO NEXT EVENT TABLE */                  66338503
EVNTCT1  L     XRWORK,EVNTLNK-EVNT(,XRWORK) POINT TO NEXT TABLE@Y30HPVA 66341503
         B     EVNTLP1                 LOOP TILL NO            @Y30HPVA 66347003
*                                      MORE TABLES             @Y30HPVA 66349503
*/*EVNTCK1: P DECREMENT WAIT COUNT IN RB*/                              66350203
EVNTCK1  IC    XRWAITCT,RBWCF          GET RB WAIT COUNT                66350903
         BCTR  XRWAITCT,R0             DECREMENT IT                     66351603
         STC   XRWAITCT,RBWCF          RESET IT IN RB                   66352303
*/*  D (YES,SETRBPFX,NO,EXIT)WAIT COUNT IS NOW ZERO */                  66353003
         LTR   XRWAITCT,XRWAITCT       IS WAIT COUNT ZERO      @Y30HPVA 66354003
         BNZ   EXIT                    BR IF COUNT STILL NOT ZERO       66355003
         B     SETRBPFX                COUNT ZERO, CLEAN UP             66357003
         SPACE 2                                                        66360503
         USING IEA0PT01,XRBASE                                          66363503
*/*XMPOST: D (YES,,NO,XMPOSTNL) LOCAL LOCK HELD AT ENTRY */             66367003
XMPOST   SETLOCK TEST,TYPE=LOCAL,BRANCH=(NOTHELD,XMPOSTNL)     @Y02752  66369003
*/* D (YES,,NO,XMPOSTNL) IS XMPOST REQ MEMORY RELATED */                66370503
         LTR    R12,R12                TEST ERRET ADDRESS HI BIT@Y02752 66371540
         BM     XMPOSTNL               BR IF NOT MEMORY RELATED @Y02752 66374040
*/* P SET BR ENTRY FLAG TO ZERO FOR LATER FLIP*/                        66377503
         LA     XRRETURN,0(,XRRETURN)  RESET HI BIT FOR XOR             66378540
*/* P SAVE REGS 0-9 */                                                  66384503
QJ10     L     XRBASE,PSAAOLD          GET SAVE AREA ADDRESS            66385040
         L     XRBASE,ASCBASXB-ASCB(,XRBASE)  GET ADDR OF ASXB          66388003
         L     XRBASE,ASXBSPSA-ASXB(,XRBASE)  GET ADDR OF SPSA          66391503
         L     XRBASE,WSALPOST-WSAL(,XRBASE)  GET ADDR OF SAVE AREA     66395003
         STM   R0,R9,0(XRBASE)         SAVE REGS 0-9                    66396040
         LR    R9,XRBASE               SAVE ADDR OF SAVE AREA           66397040
*/*XMPOSTNL: P FLIP BRANCH ENTRY FLAG*/                                 66401040
XMPOSTNL DS    0H                      INITIALIZE BASE REG              66403040
         BALR  XRBASE,R0               ESTAB ADDRESSABILITY             66405040
         USING *,XRBASE                                                 66409003
         L     XRBASE,BASE             GET MODULE BASE                  66410040
         USING IGC002+2,XRBASE                                          66413003
         X     XRRETURN,TIDBIT         FLIP BR ENTRY FLAG       @Y02752 66414040
*/*XMPOST1: P (,XMPPROC) INITIALIZE MAINLINE REGS*/                     66416040
XMPOST1  L     XRASCB,PSAAOLD          CURRENT ASCB ADDR       @Z40EPVD 66416540
         LR    R5,R11                  SAVE ECB ADDR                    66417040
         LR    R6,R12                  SAVE ERRET ADDR                  66419040
         LR    R8,R13                  SAVE TARGET ASCB ADDR            66421040
         B     XMPPROC                 TO MAINLINE XMPOST               66423040
         SPACE 2                                                        66427003
*/* E IEA0PT02 */                                                       66428003
*   ENTRY POINT IEA0PT02                                                66429003
         SPACE 1                                                        66431003
         USING *,XRBASE                SET TEMP BASE                    66438040
*/*IEA0PT02: P FIND LOCAL SAVE AREA AND SAVE REGS*/                     66455002
*              ACROSS THIS INTERFACE REGISTERS 0-9 ARE                  66460002
*              SAVED, BUT THE NON-USE OF REGS 12-13 IS SUFFICIENT       66465002
*              TO ALLOW THAT THEY ARE SAVED...IF THE REGISTER USAGE     66470002
*              IS CHANGED, THE POST LOCAL SAVE AREA MUST BE             66475002
*              UTILIZED TO SAVE REGS 12-13.                             66480002
*                                                                       66485002
IEA0PT02 L     XRBASE,PSAAOLD          GET CURRENT ASCB                 66495002
         L     XRBASE,ASCBASXB-ASCB(,XRBASE)  ASXB ADDR                 66505002
         L     XRBASE,ASXBSPSA-ASXB(,XRBASE)  LCL WSAVT                 66515002
         L     XRBASE,WSALPOST-WSAL(,XRBASE)  POST WSA                  66525002
         STM   R0,R9,0(XRBASE)         SAVE REGS                        66539002
*/* P SET UP MAINLINE REGS*/                                            66539402
         LR    XRECB,R11               ECB ADDR                         66541002
         LR    XRPTCODE,R10            POST CODE                        66543002
         LR    XRSAVE,XRBASE           WSA BASE REG                     66543402
         BALR  XRBASE,R0               EST ADDR                         66543802
         USING *,XRBASE                EST BASE REG                     66544202
         L     XRBASE,BASE             COMMON BASE ADDR                 66544602
         USING IGC002+2,XRBASE         COMMON BASE ADDR                 66544702
Q72Z     L     XRASCB,PSAAOLD          ADDR OF CURR ASCB                66554702
*/* P SET BR ENTRY SW- REG 14 NEG*/                                     66564702
         O     XRRETURN,TIDBIT         SET BR ENTRY SW                  66594702
         EJECT                                                          67545001
*/*RBCHECK: P LOAD ECB BEFORE IT IS CHECKED*/                  @ZA33186 67595040
RBCHECK  EQU   *                                               @ZA33186 67645040
*        LOAD ECB BEFORE IT IS CHECKED, IN CASE IT IS          @ZA33186 67695040
*        INITIALLY NEITHER WAITING OR POSTED BUT IT            @ZA33186 67745040
*        IS INITIALIZED TO POINT TO AN ECB EXTENSION BEFORE IT @ZA33186 67795040
*        IS POSTED.                                            @ZA33186 67845040
         L     R1,ZERO(,XRECB)         GET ECB                 @ZA33186 67895040
*/*RBCHECK2: D (YES,EVN3,NO,) IS ECB ALREADY WAITED UPON*/     @ZA33186 67945040
RBCHECK2 TM    ECBCC-ECB(XRECB),ECBWAIT  Q.IS ECB WAITING      @ZA33186 67995040
         BO    EVN3                    YES, GO PROCESS         @ZA33186 68045040
*/* D (YES,EXIT,NO,) IS ECB ALREADY POSTED*/                   @ZA33186 68095040
         TM    ECBCC-ECB(XRECB),ECBPOST  Q. IS ECB POSTED      @ZA33186 68145040
         BO    EXIT                    YES, EXIT               @ZA33186 68195040
*/* P MARK ECB POSTED USING CS*/                               @ZA33186 68245040
*        THE ECB IS NOT WAITING OR POSTED                      @ZA33186 68295040
         N     XRPTCODE,OFFWAIT        RESET WAIT BIT          @ZA33186 68345040
         O     XRPTCODE,ONCOMPL        SET POST BIT            @ZA33186 68395040
         CS    R1,XRPTCODE,ZERO(XRECB) POST IT                 @ZA33186 68445040
*/* D (YES,EXIT,NO,RBCHECK2) WAS CS SUCCESSFUL*/               @ZA33186 68495040
         BZ    EXIT                    EXIT IF SUCCESSFUL      @ZA33186 69034040
         B     RBCHECK2                ECB WAS MODIFIED, TRY   @ZA33186 69037040
*                                      AGAIN                   @ZA33186 69040040
*/*  EVN3: D (YES,,NO,TCBRBCHN) IS ECB EVENTS ECB*/                     69055003
EVN3     TM    ECBBYTE3-ECB(XRECB),ECBEVNT ECB EVENTS ECB?     @ZA15373 69055240
         BZ    NOEVENTS                NO, BRANCH              @Y30HPVA 69055940
*/* D (YES,EXTECB,NO,) DOES ECB EXTENSION EXIST*/                       69056140
         TM    ECBBYTE3-ECB(XRECB),ECBEXTND EXTENSION EXIST?   @Z40EPVD 69056240
         BO    EXTECB                  YES, EXT EXISTS         @Z40EPVD 69056340
*********************************************************************** 69056640
*                                                                     * 69056740
*        THE FOLLOWING CODE PROCESSES THE EVENT TYPE ECB              * 69056840
*                                                                     * 69056940
*********************************************************************** 69057040
*/* EVN4: S SETFRR: SET FRR FOR EVENTS PROCESSING */                    69057103
         LA    R1,EVNTFRR              LOAD FRR ADDRESS        @Y30HPVA 69057703
         SETFRR A,FRRAD=(1),WRKREGS=(XRWORK,XRSCRTCH)          @Y30HPVA 69058003
*                                                                       69058103
*        DETERMINE IF TABLE POINTER IN ECB IS VALID                     69058303
*        ENTRY TO FRR WILL CAUSE A 402 ABEND CODE                       69058603
*                                                                       69058703
*/* EVN5: N CHECK IF TCB ADDR IN TABLE POINTED TO BY ECB IS VALID TCB*/ 69058903
*/* EVN6: D (YES,,NO,ABEND402) TCB ADDR VALID*/                         69059203
         L     XRSCRTCH,ZERO(,XRECB)   GET TABLE POINTER       @Y30HPVA 69059303
         BCTR  XRSCRTCH,ZERO           CLEAR LOW BIT           @Y30HPVA 69059603
         L     XRTCB,ASCBASXB          GET ASXB ADDR           @Y30HPVA 69059703
         L     XRTCB,ASXBLTCB-ASXB(,XRTCB)  GET LAST TCB ADDR  @Y30HPVA 69059903
         L     XRWORK,EVNTTCBP-EVNT(,XRSCRTCH) GET TCB ADDR    @Y30HPVA 69060103
*                                 FROM TABLE                   @Y30HPVA 69060403
EVNTTCBL CLR   XRWORK,XRTCB       TABLE TCB POINTER ON READY   @Y30HPVA 69060503
*                                 QUEUE                        @Y30HPVA 69060703
         BE    TCBOK              YES, BR FOR GOOD TCB         @Y30HPVA 69061003
         L     XRTCB,TCBBACK-TCB(,XRTCB)    BACK ONE TCB       @Y30HPVA 69061103
         LTR   XRTCB,XRTCB        END OF READY QUEUE           @Y30HPVA 69061303
         BNZ   EVNTTCBL           NO, CONTINUE LOOKING         @Y30HPVA 69061603
         B     ABEND402           YES, BAD TABLE ABEND         @Y30HPVA 69061703
*/* EVN7: N CHECK VALID TCB FOR VALID TABLE OFF THAT TCB */             69061903
*/*  TCBOK: D (YES,,NO,ABEND402) IS TABLE VALID FOR TCB */              69062203
TCBOK    LA    XRSCRTCH,ZERO(,XRSCRTCH)     CLEAR HIGH BYTE    @Y30HPVA 69062303
         L     XRWORK,TCBEXT2-TCB(,XRTCB) GET PTR TO EXTENSION @Y30HPVA 69062603
         L     XRWORK,TCBEVENT-TCBXTNT2(,XRWORK) GET FIRST     @Y30HPVA 69062803
*                                 TABLE ADDRESS                @Y30HPVA 69063003
EVNTTLP1 CLR   XRWORK,XRSCRTCH    TABLE ADDR MATCH             @Y30HPVA 69063403
         BE    TABLEOK            YES, TABLE IS GOOD           @Y30HPVA 69063703
         LTR   XRWORK,XRWORK      END OF TABLE QUEUE FOR TCB   @Y30HPVA 69063803
         BZ    ABEND402           YES, ABEND 402               @Y30HPVA 69063903
         L     XRWORK,EVNTLNK-EVNT(,XRWORK) NO, GET NEXT TABLE @Y30HPVA 69064003
*                                 IN QUEUE                     @Y30HPVA 69064103
         B     EVNTTLP1           CHECK FOR END                @Y30HPVA 69064303
*                                                                       69064603
*        TABLE AND TCB POINTER ARE VALID                                69064903
*        NEXT CHECK FOR WAITING RB ON TABLE - IF NOT WAITING            69065203
*        UPDATE TABLE AND ECB THEN EXIT                                 69065503
*        IF WAITING AND VALID RB UPDATE TABLE AND ECB AND USE           69065803
*        POST W/O ECB TO UPDATE THE RB AND ASCB                         69066103
*                                                                       69066403
*/* TABLEOK: D (YES,,NO,EVCKSP) DOES TABLE HAVE RB POINTER */           69066703
TABLEOK  L     XRRB,EVNTRBP-EVNT(,XRSCRTCH) RB POINTER FROM    @Y30HPVA 69067003
*                                 TABLE                        @Y30HPVA 69067103
         L     XRWORK,TCBRBP-TCB(,XRTCB) RB POINTER FORM TCB   @Y30HPVA 69067303
         LTR   XRRB,XRRB          IS RB IN TABLE               @Y30HPVA 69067603
         BZ    UPDEVT             NO, NOT WAITING              @Y30HPVA 69067903
EVRBCHK  LA    XRWORK,ZERO(,XRWORK)    CLEAR HIGH              @Y30HPVA 69068203
         CLR   XRWORK,XRRB        TEST FOR GOOD RB             @Y30HPVA 69068503
         BE    EVRBOK             BR IF RB OK                  @Y30HPVA 69068803
         TM    RBSTAB2-RBSECT(XRWORK),TCBIND TEST FOR LAST RB  @Y30HPVA 69069103
         L     XRWORK,RBLINK-RBSECT(,XRWORK) GET NEXT RB       @Y30HPVA 69069403
         BZ    EVRBCHK            CONTINUE CHECKING RB'S       @Y30HPVA 69069703
         B     ABEND402           ABEND FOR BAD RB PTR         @Y30HPVA 69070003
*                                                                       69070303
*        NOW HAVE GOOD RB. NEED TO CHECK FOR P.P. POSTEE                69070603
*        IF P.P. POSTEE, CHECK FOR SAME KEY ETC.                        69070903
*                                                                       69071203
*/* EVRBOK: D (YES,,NO,ABEND402) RB ENABLED */                          69071503
EVRBOK   TM    RBOPSW,ENABON      TEST FOR ENABLED             @Y30HPVA 69071803
         BNO   ABEND402           BR TO ABEND                  @Y30HPVA 69072103
*                                                                       69072403
*/* EVN8: D (YES,,NO,EVALCK) IS POSTEE SUPERVISOR KEY */                69072703
         TM    RBOPSW+ONE,SUPTST  CHECK FOR SUPV WAITER        @Y30HPVA 69073003
         BO    EVALCK             BR IF PROB PROG              @Y30HPVA 69073303
*/* EVCKSP: D (YES,UPDEVT,NO,EVALCK) IS POSTER SUPERVISOR */            69073603
EVCKSP   LTR   XRRETURN,XRRETURN  TEST FOR BRANCH ENTRY        @Y30HPVA 69073903
         BM    UPDEVT             BR IF BR                     @Y30HPVA 69074203
         L     XRWORK,PSATOLD     TEST FOR SRB                 @Y30HPVA 69074503
         LTR   XRWORK,XRWORK      CALLER                       @Y30HPVA 69074803
         BZ    UPDEVT             BR IF SRB CALLER             @Y30HPVA 69075103
         L     XRWORK,TCBRBP-TCB(,XRWORK) TEST IF SUPVR SVC    @Y30HPVA 69075403
         TM    RBOPSW+ONE-RBSECT(XRWORK),SUPTST  WAITER        @Y30HPVA 69075703
         BZ    UPDEVT             BR IF SUPVR WAITER           @Y30HPVA 69076003
*/* EVALCK: D (YES,UPDEVT,NO,) COM TASK ECB */                          69076303
EVALCK   L     XRSCRTCH,TCBJSCB   GET JSCB ADDR                @Y30HPVA 69077340
         USING IEZJSCB,XRSCRTCH                                @Y30HPVA 69080203
         L     XRSCRTCH,JSCBCSCB  GET CSCB ADDR                @Y30HPVA 69081240
         USING CSCB,XRSCRTCH                                   @Y30HPVA 69082603
         L     XRSCRTCH,CHECBP    GET COMMUNICATION'S          @Y30HPVA 69082740
*                                 ECB ADDRESS                  @Y30HPVA 69082840
         DROP  XRSCRTCH                                        @Y30HPVA 69083240
         LA    R1,ZERO(,R6)       CLEAR THE HIGH BYTE          @ZA08089 69083340
         CLR   XRSCRTCH,R1        CHECK ADDRS                  @Y30HPVA 69083540
         BE    UPDEVT             BRANCH IF EQUAL              @Y30HPVA 69083840
         SPACE                                                          69084240
*/*      L     CHECK VALIDITY OF ECB AGAINST USER KEY */                69084340
*                                                                       69084440
*        GOING TO USER KEY TO TEST ECB                                  69084540
*        IF STORE FAILS FRR WILL GET CONTROL                            69084640
*                                                                       69084703
         SR    XRSCRTCH,XRSCRTCH       CLEAR REGISTER          @Y30HPVA 69085003
         IC    XRSCRTCH,TCBPKF         GET USER PROTECT KEY    @Y30HPVA 69086003
         SPKA  ZERO(XRSCRTCH)          GO TO USER PROTECT KEY  @ZA08089 69087040
         L     XRSCRTCH,ZERO(,XRECB)   GET CONTENTS OF ECB     @Y30HPVA 69088003
EVNTLPC  CS    XRSCRTCH,XRSCRTCH,ZERO(XRECB) STORE INTO ECB    @Y30HPVA 69089003
         BNE   EVNTLPC                 LOOP TILL STORE COMPLETE@Y30HPVA 69090503
         SR    XRSCRTCH,XRSCRTCH       CLEAR REGISTER          @Y30HPVA 69091003
         SPKA  ZERO(XRSCRTCH)          GO TO KEY ZERO          @ZA08089 69091540
         SPACE                                                          69092003
*/* UPDEVT: P UPDATE TABLE POINTERS AND ECB */                          69092503
UPDEVT   L     XRWORK,ZERO(,XRECB)     GET TABLE ADDRESS       @Y30HPVA 69093503
         BCTR  XRWORK,ZERO             CLEAR LOW BIT           @Y30HPVA 69093703
         LA    XRWORK,ZERO(XRWORK)     CLEAR HIGH BYTE         @Y30HPVA 69093803
         L     XRSCRTCH,EVNTLSTA-EVNT(,XRWORK) GET PTR TO LAST @Y30HPVA 69094003
*                                      ACTIVE EVENT ENTRY      @Y30HPVA 69094740
*/* D (NO,,YES,ABEND502) IS TABLE FULL */                               69096503
         CL    XRSCRTCH,EVNTLST-EVNT(,XRWORK) CHECK FOR NO MORE@Y30HPVA 69097503
*                                 EVENT ENTRIES IN THIS TABLE  @Y30HPVA 69100503
         BE    ABEND502           TABLE FULL ABEND             @Y30HPVA 69102503
         SPACE 2                                                        69102840
*        THE ORDER IN WHICH THE EVENTS TABLE AND ECB WERE      @ZA11895 69103140
*        PROCESSED WAS CHANGED TO POST THE ECB FIRST AND THEN  @ZA11895 69103440
*        UPDATE THE EVENTS TABLE.                              @ZA11895 69103740
         SPACE 2                                                        69104040
         SR    R1,R1              INDICATE PROCES COMP         @Y30HPVA 69116503
         N     XRPTCODE,OFFWAIT   TURN OFF WAIT BIT            @Y30HPVA 69117503
         O     XRPTCODE,ONCOMPL   TURN ON POST IND             @Y30HPVA 69119503
         ST    XRPTCODE,ZERO(,XRECB)   UPDATE ECB              @Y30HPVA 69122503
         O     XRECB,TIDBIT       SET END OF LIST IND          @Y30HPVA 69122640
         ST    XRECB,FOUR(,XRSCRTCH) STOR PTR TO COMP ECB      @Y30HPVA 69122740
         MVI   ZERO(XRSCRTCH),ZERO   ZERO PREV END OF LIST IND @Y30HPVA 69122840
         LA    XRSCRTCH,FOUR(,XRSCRTCH) UPDATE PTR TO LAST     @Y30HPVA 69122940
*                                    EVENT ENTRY               @Y30HPVA 69123040
         ST    XRSCRTCH,EVNTLSTA-EVNT(,XRWORK) STORE PTR IN    @Y30HPVA 69123140
*                                 EVENT TABLE HEADER           @Y30HPVA 69123240
*/* EVN11: S DELETEFRR: DELETE FRR FOR EVENTS */                        69123503
DFRR     SETFRR D,WRKREGS=(XRWORK,XRSCRTCH) DELETE FRR         @Y30HPVA 69124503
         LTR   R1,R1              TEST FOR GOOD POST           @Y30HPVA 69126503
         BNE   EVSVC13            NO GOOD ISSUE ABEND          @Y30HPVA 69128503
*/* EVN12: D (NO,EXIT,YES,EVSWCF) CHECK IF RB WAITING */                69129503
         LTR   XRRB,XRRB          CHECK FOR WAITING RB         @Y30HPVA 69131503
         BZ    EXIT               NO RB EXIT                   @Y30HPVA 69133503
         B     EVSWCF             BRANCH TO POST W / O ECB     @Y30HPVA 69135503
*/* ABEND402: S DELETEFRR: DELETE FRR FOR EVENTS*/                      69136503
*/* EVN13: R ABEND 402*/                                                69139503
ABEND402 L     R1,ABND402         LOAD 402 ABEND CODE          @Y30HPVA 69140503
         B     DFRR               GO DELETE FRR                @Y30HPVA 69141503
*/* ABEND502: S DELETEFRR: DELETE FRR FOR EVENTS*/                      69142503
*/* EVN14: R ABEND 502*/                                                69145003
ABEND502 L     R1,ABND502         LOAD 502 ABEND CODE          @Y30HPVA 69148003
         B     DFRR               GO DELETE FRR                @Y30HPVA 69149003
EVSVC13  SVC   ABENINST           CALL ABEND                   @Y30HPVA 69150003
         EJECT                                                          69152003
*/* TCBRBCHN: L CHECK TCB/RB Q TO FIND WAITING RB */                    69154003
NOEVENTS L     XRRB,ZERO(,XRECB)   GET WAITING RB ADDRESS      @Y30HPVA 69155040
         LA    XRRB,0(XRRB)        PERFECT ADDR                         69158003
         L     XRWORK,ASCBASXB     ADDR OF ASXB                         69160003
         L     XRTCB,ASXBLTCB-ASXB(XRWORK)  ADDR OF LOWEST TCB          69165002
TCBRBCHN L     XRWORK,TCBRBP       ADDR OF TOP RB                       69175002
*/*RBADDR: D (NO,ERROR2,YES,) RB IS ON TCB/RB QUEUES*/                  69177002
RBADDR   CR    XRRB,XRWORK         CHK IF ADDR SAME AS ADDR IN ECB      69185002
         BE    RBOK                BR IF SO                             69187002
         TM    RBSTAB2-RBSECT(XRWORK),TCBIND  BACK TO TCB YET           69189002
         L     XRWORK,RBLINK-RBSECT(,XRWORK) ADDR OF NEXT BLOCK         69191002
         LA    XRWORK,ZERO(,XRWORK)   PERFECT ADDR                      69192002
         BZ    RBADDR              BR IF RB IS NEXT                     69193402
         L     XRTCB,TCBBACK       NEXT TCB IN RDY Q                    69193802
         LTR   XRTCB,XRTCB         TEST FOR TOP OF Q                    69194202
         BNZ   TCBRBCHN            BR IF NOT                            69194602
         B     ERROR2              RB NOT FOUND - ERROR                 69194702
*/*RBOK: D (NO,ERROR2,YES,) WAITING RB OPSW IS ENABLED*/                69244702
RBOK     TM    RBOPSW,ENABON       IS WAITER ENABLED                    69294740
         BC    DISAB,ERROR2        NO,ABEND                             69745040
*/* D (YES,SUPKEY1,NO,) WAITING RB OPSW IS SUPVR KEY*/                  69805002
         TM    RBOPSW+ONE,SUPTST   RBOPSW=KEY 0?                        69835002
         BZ    SUPKEY1             YES,BR                               69865002
*/* S IEA0VL01: VALIDITY CHECK ADDRESS*/                                69905002
         LR    R1,XRECB            START ADDR                           69945002
         LA    XRSCRTCH,L3(,R1)    END ADDR                             69995002
         STM   R14,R15,FOUR*R14(XRSAVE)  SAVE 14-15                     70045002
         L     R15,CHECK           ADDR OF VAL CHK RTN                  70095002
         BALR  R14,R15             GO WITH WAITING TCB ADDR IN 4        70145002
         LM    R14,R15,FOUR*R14(XRSAVE)  RESET 14-15                    70195002
*/* D (FAIL,,OK,SUPKEY) RESULTS OF VALIDITY CHECK*/                     70245002
         BZ    SUPKEY              BR IF OK                    @YM04972 70250002
         L     XRSCRTCH,TCBJSCB    GET JSCB ADDR               @YM04972 70255002
         USING IEZJSCB,XRSCRTCH                                @YM04972 70260002
         L     XRSCRTCH,JSCBCSCB   GET CSCB ADDR               @YM04972 70265002
         USING CSCB,XRSCRTCH                                   @YM04972 70270002
         L     XRSCRTCH,CHECBP     GET COMMUNICATION'S         @YM04972 70275002
*                                  ECB ADDRESS                 @YM04972 70287002
         DROP  XRSCRTCH                                                 70288002
         LA    R1,ZERO(,R1)        CLEAR THE HIGH BYTE         @YM04972 70289002
*/* D (YES,SUPKEY,NO,ERROR2) COMM. ECB */                               70291040
         CLR   XRSCRTCH,R1         CHECK ADDRS                 @YM04972 70291240
         BNE   ERROR2              BRANCH IFF ERROR            @YM04972 70291540
*/*SUPKEY: D (YES,POSTTEST,NO,) EXPLICIT WAIT BIT IS ON IN RB*/         70292502
SUPKEY   DS    0H                                                       70293002
         S     XRRB,WPRBPREL       SUBTRACT FROM BASE                   70295040
         TM    RBFLAGS1-RBPREFIX(XRRB),RBXWAIT    DID RB ISSUE A WAIT?  70299002
         LA    XRRB,RBPRFXLN(XRRB) RESTORE BASE                         70300040
         BO    POSTTEST            YES,BRANCH TO MAINLINE CODE          70301040
*/*SUPPL: P (,QENTRY2) SET TO POST ECB */                               70309002
*              THE RB THE ECB POINTS TO IS NOT WAITING. SET             70311002
*              UP TO MAKE THE ECB LOOK POSTED.                          70314002
SUPPL    L     R1,ZERO(,XRECB)     GET ECB FOR CS              @YM02496 70317002
         B     QENTRY2             GO TO SET IT POSTED         @YM02496 70321002
         SPACE 1                                                        70323002
*/*SUPKEY1: D (YES,SUPKEY,NO,)   SUPERVISOR (KEY) CALLER*/              70325002
*              THESE TESTS ASSURE THAT A SUPERVISOR KEY WAITER          70330002
*              IS POSTED ONLY BY A SUPERVISOR KEY POSTER OR THE         70332002
*              ECB TO BE POSTED IS THE SAME AS THE ECB WAITED ON.       70335002
SUPKEY1  LTR   XRRETURN,XRRETURN   TEST IF BR ENTRY            @YM00429 70338002
         BM    SUPKEY              BR IF BRANCH ENTRY          @YM00429 70341002
SUPKEYX  L     R1,PSATOLD          GET CURRENT TCB POINTER     @YM00429 70345002
         LTR   R1,R1               TEST IF SRB MODE FOR XMPOST @YM00429 70355002
         BZ    SUPKEY              BR IF XMPOST                @YM00429 70365002
         L     R1,TCBRBP-TCB(,R1)  GET TOP RB POINTER          @YM00429 70375002
         TM    RBOPSW+ONE-RBSECT(R1),SUPTST CALLER SUPER KEY   @YM00429 70385002
         BZ    SUPKEY              BR IF SUPER CALLER          @YM04247 70390040
*/* D (NO,SUPPL,YES,) IS RB IN EXPLICIT WAIT*/                          70395802
         S     XRRB,WPRBPREL       SUBTRACT FROM BASE                   70396240
         TM    RBFLAGS1-RBPREFIX(XRRB),RBXWAIT    DID RB ISSUE A WAIT?  70397402
         LA    XRRB,RBPRFXLN(XRRB) RESTORE BASE                         70397840
         BZ    SUPPL               BR NOT EXPLICIT WAIT        @YM02496 70399002
*/* D (YES,POSTTEST,NO,ERROR2) ECB ADDRESSES MATCH */                   70400002
         L     R1,TCBGRS1          SET ECB ADDR REG            @YM04247 70413002
         LA    XRECB,ZERO(,XRECB)  CLEAR HIGH                  @YM04247 70417002
         CL    XRRB,TCBRBP         WAITER TOP RB               @YM04247 70421002
         BE    SUPKEY2             YES, TCBGRS1 IS OK          @YM04247 70429002
         L     R1,TCBRBP           GET TOP RB                  @YM04247 70437002
SUPKEYN  L     XRWORK,RBLINK-RBSECT(,R1)    GET NEXT RB        @YM04247 70445002
         LA    XRWORK,ZERO(,XRWORK)  CLEAR HIGH BYTE           @YM04247 70453002
         CLR   XRWORK,XRRB         CHECK FOR WAITER RB         @YM04247 70461002
         BE    SUPKEYR             BR IF MATCH(R1 HAS IRB ADDR)@YM04247 70469002
         LR    R1,XRWORK           SET FOR NEXT CHECK          @YM04247 70477002
         B     SUPKEYN             CHECK NEXT RB               @YM04247 70485002
SUPKEYR  L     R1,RBGRS1-RBSECT(,R1) GET ADDR OF ECB           @YM04247 70493002
SUPKEY2  LCR   XRWORK,R1           TEST FOR LIST               @YM04247 70501002
         BP    SUPKGL              BR IF LIST                  @YM04247 70509002
         LA    R1,ZERO(,R1)        CLEAR HIGH                  @YM04247 70517002
         CLR   R1,XRECB            TEST FOR SAME ECB           @YM04247 70525002
         BE    POSTTEST            SAME ECB IS OK              @YM04247 70533002
         B     ERROR2              ABEND THE BAD GUY           @YM04247 70541002
SUPKGL   L     R1,ZERO(,XRWORK)    GET ECB ADDR                @YM04247 70549002
         LA    R1,ZERO(,R1)        CLEAR HIGH                  @YM04247 70557002
         CLR   R1,XRECB            CHECK FOR SAME              @YM04247 70565002
         BE    POSTTEST            BR IF OK                    @YM04247 70573002
         TM    ZERO(XRWORK),TCBIND TEST FOR LAST               @YM04247 70581002
         BO    ERROR2              ABEND IF END OF LIST        @YM04247 70589002
         LA    XRWORK,FOUR(,XRWORK) INCR LIST ADDR             @YM04247 70593002
         B     SUPKGL              CONTINUE                    @YM04247 70597002
         EJECT                                                          70627040
*/* E IEA0PT03*/                                                        70657040
IEA0PT03 EQU   *                   BRANCH ENTRY LABEL          @Z40EPVD 70687040
*/* P GET ADDR OF LOCAL SAVE AREA - SAVE REGS*/                         70717040
         L     XRBASE,PSAAOLD      GET CURRENT ASCB ADDR       @Z40EPVD 70747040
         L     XRBASE,ASCBASXB-ASCB(XRBASE) ASXB ADDR          @Z40EPVD 70777040
         L     XRBASE,ASXBSPSA-ASXB(XRBASE) LOCAL WSAVT ADDR   @Z40EPVD 70807040
         L     XRBASE,WSALPOST-WSAL(XRBASE) POST WSA ADDR      @Z40EPVD 70827040
         STM   R0,R14,LSAEXT-LSA(XRBASE)    SAVE CALLERS REGS  @Z40EPVD 70837040
*/* P INDICATE EXT SAVE AREA IN USE*/                                   70897040
         OI    LSAFLGS-LSA(XRBASE),EXTSA  EXTSAVE AREA IN USE  @Z40EPVD 70927040
         LR    R9,XRBASE                SAVE AREA BASE REG     @Z40EPVD 70937040
         BALR  XRBASE,R0                ESTABLISH BASE REG     @Z40EPVD 70967040
         USING *,XRBASE                 ESTAB ADDRESSABILITY   @Z40EPVD 70987040
         L XRBASE,BASE                  GET COMMON BASE ADDR   @Z40EPVD 71007040
         USING IGC002+2,XRBASE          COMMON BASE            @Z40EPVD 71027040
*/* P SET BRANCH ENTRY SWITCH - REG 14 NEGATIVE*/                       71107040
         O     XRRETURN,TIDBIT          SET BR ENTRY SWITCH    @Z40EPVD 71137040
*/* D (YES,XMPOST1,NO,SETMREGS) XMPOST REQUEST*/                        71167040
         LTR   R11,R11                  XMPOST REQUEST         @Z40EPVD 71197040
         BM    XMPOST1                  YES GO PROCESS         @Z40EPVD 71217040
         LR    XRECB,R11                SAVE INPUT ECB ADDR    @Z40EPVD 71237040
         LR    XRSAVE,R9                INIT SAVE AREA BASE    @Z40EPVD 71257040
         B     SETMREGS                 GO INIT MAINLINE REGS  @Z40EPVD 71277040
         EJECT                                                          71317040
*  TEST IF POST FLAG IN ECB ON. YES ON, GO TO EXIT SECTION. NO NOT ON,  71645001
* STORE POST CODE AND SET POST FLAG IN ECB.                             71695001
*  DECREMENT RB'S WAIT COUNT. DECREMENTED WAIT COUNT ZERO GO TO EXIT    71745001
* SECTION. COUNT NOT ZERO CONTINUE PROCESS.                             71795001
         SPACE 2                                                        71845001
*/*POSTTEST: P PICK UP ECB FOR LATER COMPARE AND SWAP*/                 71855002
POSTTEST L     R1,ZERO(,XRECB)         GET OLD ECB             @YM02795 71865040
*/* D (YES,EXIT,NO,) ECB'S POST BIT IS ALREADY ON*/                     71885002
         TM    0(XRECB),ECBPTFLG       Q. ECB'S POST FLAG SET           71890040
         BO    EXIT                    YES,EXIT                         71945002
*/* D (NO,QENTRY2,YES,) SOMEONE IS WAITING ON THIS ECB*/                71955002
         TM    0(XRECB),ECBWTFLG       Q. POST BEFOR WAIT               71995002
         BZ    QENTRY2                 YES,BRANCH                       72045002
*/* D (YES,QENTRY2,NO,) RB WAIT COUNT IS ALREADY ZERO*/                 72095002
         TM    RBWCF,ANYONE            Q. IS WAIT COUNT ZERO            72395001
         BZ    QENTRY2                 YES.BRANCH                 19472 72445001
*/* P DECREMENT WAIT COUNT*/                                            72455002
         SR    XRWAITCT,XRWAITCT       INIT REG TO ZERO           19472 72475040
         IC    XRWAITCT,RBWCF          LOAD ECBS RB WAIT COUNT          72495040
*/* D (NO,QENTRY,YES,) WAIT COUNT IS NOW ZERO*/                         72595002
         BCT   XRWAITCT,QENTRY         DECR WAIT CT.NOT 0,BR     A33247 72615040
         EJECT                                                          72695001
*  WAIT COUNT IS ZERO. TEST RB'S ECB SEARCH FLAG. IF FLAG NOT ON GO TO  72745001
* NEXT SECTION. IF FLAG IS ON RESET IT AND TEST IF RB ON TOP OF IT'S    72795001
* QUEUE. IF RB IS TOP OF IT'S QUEUE GET ECB LIST ADDRESS FROM TCB'S     72845001
* REGISTER 1 SAVE AREA. IF RB NOT TOP OF IT'S QUEUE FIND OUT WHAT TYPE  72895001
* OF RB IS ON TOP OF IT. THEN GET ECB LIST ADDRESS FROM WHEREVER THE    72945001
* REGISTER 1 IS SAVED IN THAT TYPE OF RB. AFTER GETTING ECB LIST        72995001
* ADDRESS, GO AND RESET  ALL THE ECB'S WAIT FLAGS TO ZERO.              73045001
         SPACE 2                                                        73095001
*/* D (NO,TCBREADY,YES,) RB SEARCH BIT IS ON*/                          73105002
         TM    RBSTAB2,RBECBWT          Q.ECB'S SEARCH FLAG SET         73125040
         BZ    TCBREADY                 NO BRANCH                       73195001
*/*LOOP3: P FIND TCB- GET SAVED ECBLIST ADDRESS*/                       73205002
         C     XRRB,TCBRBP              Q.ECB'S RB TOP OF QUEUE         73225040
         BE    TCBXR1                   YES BRANCH                      73295001
         L     XRWORK,TCBRBP            LD TOP RB'S ADR                 73315040
LOOP3    L     XRECBPTR,RBGRS1-RBSECT(XRWORK)   LD RB REG 1             73355002
         L     XRWORK,RBLINK-RBSECT(XRWORK)     LD NEXT RB'S ADR        73395002
         LA    XRWORK,0(XRWORK)         ZERO BITS S-7                   73445002
         CR    XRWORK,XRRB              Q.FOUND WAITING RB              73465040
         BNE   LOOP3                    NO, BRANCH                      73545002
         B     RESETWT                  AVOID NEXT INST                 73745001
TCBXR1   L     XRECBPTR,TCBGRS1         LD TCB REG 1                    73795002
RESETWT  LCR   XRECBPTR,XRECBPTR        LD TRUE ECB LIST ADR            73845001
         EJECT                                                          74745001
         LR    XRWORK,XRECBPTR          SAVE ECB PTR REG                74795040
*/* D (YES,NOCHECK,NO,) WAITER IS SUPVR KEY*/                           75715002
         TM    RBOPSW+ONE,SUPTST        IS WAITER SUPVR KEY?            75745002
         BC    KEY0,NOCHECK             YES,BYPASS VALIDTY CHECK        75795001
*/*LOOP4: S IEA0VL01: VALIDITY CHECK ALL ADDRS IN ECBLIST*/             75845002
LOOP4    L     R1,ZERO(XRECBPTR)        GET ECB ADDRESS                 75895040
         LA    XRSCRTCH,L3(,R1)         END ADDR FOR VAL CHK            75995002
         STM   R14,R15,FOUR*R14(XRSAVE) SAVE REGS 14-15                 76015040
         L     R15,CHECK                GET RTN ADDR                    76045040
         BALR  R14,R15                  GO TO VAL CHK                   76065040
         LM    R14,R15,FOUR*R14(XRSAVE) RESTORE REGS 14-15              76075040
*/* D (FAIL,COMMCHEK,OK,) RESULTS OF VALIDITY CHECK*/                   76087002
         BNZ   COMMCHEK                 BRANCH IF NOT VALID             76095001
*/*LSTWRD: D (END,NOCHECK,MORE,LOOP4) NEXT ECB IN LIST, IF ANY*/        76105002
LSTWRD   TM    ZERO(XRECBPTR),LSTIND    Q. LAST WORD OF LIST?           76145001
         BC    LAST,NOCHECK             YES, BRANCH                     76195002
         LA    XRECBPTR,FOUR(XRECBPTR)  NO,INCREMENT POINTER            76245001
         B     LOOP4                    CHECK NEXT ECB                  76295001
         EJECT                                                          76395001
*/*NOCHECK: P  TURN OFF WAIT BIT IN EACH ECB IN LIST*/                  76445003
*/* N (,TCBREADY) THE ECB BEING POSTED DOES NOT HAVE ITS WAIT BIT       76505002
*/*TURNED OFF*/                                                         76565002
*              THE WAIT BIT IN THE ECB BEING POSTED BECAUSE OF THE MP   76645002
*              CONSIDERATIONS ON UPDATING ECBS.  THAT IS, ONCE THE WAIT 76745002
*              BIT IS TURNED OFF, ANOTHER CPU MAY UPDATE THE ECB.       76845002
NOCHECK  LR    XRECBPTR,XRWORK          RESET POINTER                   76895040
LOOP9    L     XRWORK,ZERO(XRECBPTR)    SET PTR TO ECB                  77595001
         CLR   XRWORK,XRECB             THIS THE POSTING ECB   @YM02795 77600040
         BE    LOOP9A                   YES, BRANCH PAST NI    @YM02795 77605040
         NI    ZERO(XRWORK),RECBWTF     TURN OFF WAIT BIT               77645001
LOOP9A   TM    ZERO(XRECBPTR),LSTIND    Q.  LAST ECB?                   77695002
         BC    LAST,TCBREADY            YES, BRANCH                     77715040
         LA    XRECBPTR,FOUR(XRECBPTR)  NO, INCREMENT PTR TO NEXT ECB   77795001
         B     LOOP9                    PROCESS NEXT ECB                77845001
*********************************************************************** 77895001
*/*COMMCHEK: P GET CSCB VIA JSCB*/                                      77905002
COMMCHEK L     XRSCRTCH,TCBJSCB         GET JSCB ADDR             20002 77945002
         USING IEZJSCB,XRSCRTCH                                   20002 77995002
         L     XRSCRTCH,JSCBCSCB        GET CSCB ADDR             20002 78045002
         USING CSCB,XRSCRTCH                                      20002 78095002
         L     XRSCRTCH,CHECBP          GET COMMUNICATION'S       20002 78145002
*                                       ECB ADDRESS               20002 78165040
         LA    R1,ZERO(,R1)             CLEAR THE HIGH BYTE       20002 78195040
*/* D (YES,LSTWRD,NO,) INVALID ECB BELONGS TO CSCB*/                    78255040
         CR    XRSCRTCH,R1              Q.ECB EQUAL TO COMM. ECB  20002 78275040
         BE    LSTWRD                   YES.CONTINUE              20002 78295040
*/*ERROR1: P SET ABEND CODE TO 102*/                                    78395002
ERROR1   LA    R1,ERRPOST1              GET ABEND CODE                  78445040
*/*ABND2: R ABEND*/                                                     78605002
ABND2    SLL   R1,ABNDALGN              MOVE IT OVER                    78625040
         O     R1,TIDBIT                TURN ON DUMP BIT                78645040
         SVC   ABENINST                 ABEND                           78745001
*********************************************************************** 78795001
         SPACE 1                                                        78995001
*            RB'S WAIT COUNT HAS GONE TO ZERO                           79045001
*                                                                       79095001
*/*TCBREADY: P STORE POST CODE  AND POST BIT IN ECB*/                   79255002
*/* N COMPARE AND SWAP NOT NECESSARY AS ECB CANNOT BE CHANGED */        79265002
*/* N WITH THE WAIT BIT ON. SUFFICE TO CHANGE IN ONE INSTRUCTION.*/     79275002
TCBREADY LA    XRTCB,0(XRTCB)           LOAD TCB ADDRESS                79285040
         N     XRPTCODE,OFFWAIT         REST WAIT BIT           @Y02752 79295040
         O     XRPTCODE,ONCOMPL         SET POST BIT            @Y02752 79345040
         ST    XRPTCODE,ZERO(,XRECB)    SET CODE AND BIT       @YM02795 79395040
*/*SETRBPFX: P RESET RB LONG-WAIT AND EXPLICIT WAIT BITS*/              79495002
SETRBPFX S     XRRB,WPRBPREL            SUBTRACT FROM BASE              79515040
         NI    RBFLAGS1-RBPREFIX(XRRB),ANYONE-RBXWAIT-RBLONGWT          79595002
         LA    XRRB,RBPRFXND-RBPREFIX(,XRRB) RESET RBSECT ADDR @YM04158 79605002
*/* P RESET RB SEARCH BIT*/                                             79605402
         NI    RBSTAB2,RRBECBWT         RESET RB ECB SEARCH FLAG        79605802
*/* D (NO,SETWTCT,YES,) READIED RB IS TOP RB ON TCB CHAIN*/             79607002
         C     XRRB,TCBRBP              IS READIED RB TOP RB            79611040
         BNE   SETWTCT                  BR IF NOT                       79615040
*/* D (YES,SETWTCT,NO,) TCB IS NON-DISP*/                               79627002
         CH    XRWAITCT,TCBFLGS4        TEST NON-DISP FLGS FOR ZERO     79631040
         BNZ   SETWTCT                  BR IF NOT ZERO                  79635040
*/*CSTCBSUP: P INCREMENT # READY TCBS IN A.S.*/                         79639002
         L     XRWORK,ASCBTCBS          GET TCB COUNT                   79642040
CSTCBSUP LA    XRSCRTCH,ONE(XRWORK)     BUMP                            79645040
         CS    XRWORK,XRSCRTCH,ASCBTCBS STORE CT                        79695040
         BNZ   CSTCBSUP                 BR IF DID NOT GO                79747002
*/*SETWTCT: P (,EXIT) STORE RESULTANT WAIT COUNT IN RB*/                79749002
SETWTCT  STC   XRWAITCT,RBWCF           STORE WAIT COUNT                79755002
         B     EXIT                     DONE                            79775040
         SPACE 1                                                 A33247 81445001
*/*QENTRY: P STORE RESULTANT WAIT COUNT IN RB*/                         81455002
QENTRY   STC   XRWAITCT,RBWCF           STORE WAIT COUNT                81495002
*/*QENTRY2: P SET POST CODE AND COMPL BIT IN REG FOR CS*/               81505002
QENTRY2  N     XRPTCODE,OFFWAIT         REST WAIT BIT           @Y02752 81525040
         O     XRPTCODE,ONCOMPL         SET POST BIT            @Y02752 81555040
*/*QENTRY3: P COMPARE AND SWAP COMPLETION CODE AND POST BIT TO ECB*/    81625002
QENTRY3  CS    R1,XRPTCODE,ZERO(XRECB)  SET CODE AND BIT        @Y02752 81645040
*/* D (YES,EXIT,NO,) COMPARE AND SWAP GO*/                              81668002
         BZ    EXIT                     BR CS GOES OK           @Y02752 81670040
*/* D (YES,,NO,QENTRY3)  POST BIT ON NOW */                             81673002
*        IF THE POST BIT IS ON NOW, THAT IS OK AND NO                   81674040
*        FURTHER CHANGE OF THE ECB IS REQUIRED.                         81684002
*        IF THE WAIT BIT IS ON, SOMETHING BAD (A WAIT IN                81695002
*        ANOTHER MEMORY ON THE ECB OR AN INVALID USER                   81696002
*        UPDATE) HAS HAPPENED. IN EITHER CASE, SET THE ECB              81697002
*        TO LOOK VALID FOR THE VALID CALLER AND WE'LL CATCH             81697540
*        THE INVALID CALLER LATER.                                      81699002
*        THE ECB MAY HAVE BEEN CHANGED TO HAVE NEITHER                  81700002
*        WAIT OR POST BIT SET, IN WHICH CASE THE ECB SHOULD REFLECT     81701002
*        THE POSTED CONDITION.                                          81702002
         TM    ZERO(XRECB),ECBPTFLG    IS NOW POSTED           @YM02795 81703040
         BZ    QENTRY3                 NO,PUT IN NEW POST CODE @YM02795 81705040
*/*EXIT: D (POS,SRBEXIT,NEG,) TEST R14 ENTRY SW*/                       81725002
EXIT     LTR   XRRETURN,XRRETURN       TEST BR/SVC SW                   81755002
         BP    SRBEXIT                 BR IF SVC ENTRY                  81760040
*/* D (YES,RESTALL,NO,) EXTENDED SAVE AREA IN USE*/                     81767040
         TM    LSAFLGS-LSA(XRSAVE),EXTSA EXT SA IN USE         @Z40EPVD 81769040
         BO    RESTALL                 YES GO PROCESS          @Z40EPVD 81770040
*/* R RESTORE 0-9 RETURN 14*/                                           81775002
         LM    R0,R9,WS0(XRSAVE)       RESTORE REGS 0-9           M0113 81785040
         BR    XRRETURN                LEAVE                            81845001
*/*RESTALL: P RESET EXT SA IN USE FLAG; RESTORE REGS 0-14*/             81845240
RESTALL  EQU   *                       EXT SAVE AREA IN USE    @Z40EPVD 81845340
         NI    LSAFLGS-LSA(XRSAVE),XFF-EXTSA RESET IN USE FLAG @ZA30491 81845540
         LM    R0,R14,LSAEXT-LSA(XRSAVE) RESTORE REGS          @Z40EPVD 81845740
         BR    XRRETURN                RETURN TO CALLER        @Z40EPVD 81845840
*/* R RETURN ON 14*/                                                    81846240
*/*SRBEXIT: D (SRB,%Q2,TCB,) RUNNING UNDER TCB OR XMPOST SRB*/          81847002
SRBEXIT  L     XRWORK,PSATOLD          ADDR OF CURRENT TCB              81851040
         LTR   XRWORK,XRWORK           TEST FOR TCB ADDR                81855040
*/* R REG 14*/                                                          81867002
         BNZR  XRRETURN                BR IF TCB MODE                   81871040
*/*%Q2: S SETFRR: DELETE XMPOST FRR*/                                   81877002
QPFY9    SETFRR D,WRKREGS=(XRWORK,XRSCRTCH)                             81885002
         LR    R1,R0                   ADDR OF XMPOST SRB               81886040
         USING SRBSECT,R1              SRB BASE                         81887040
*/* S SETLOCK: OBTAIN SALLOC LOCK*/                                     81887602
         LR    XRSCRTCH,R14            SAVE REG 14 ACROSS      @YM02663 81887740
LK3      SETLOCK OBTAIN,TYPE=SALLOC,MODE=UNCOND,RELATED=LK4    @YM02663 81889802
*/* D (YES,EXITGONE,NO,) ORIG ASCB HAS GONE AWAY*/                      81891802
         L     R0,XMPQ                 XMPOST SRB CHAIN FLD             81892840
         LTR   R0,R0                   SRBS ARE ORPHANS                 81894340
         BM    EXITGONE                BR IF ORIG ASCB GONE             81896640
         L     XRWORK,XMASCB           ADDR OF ORIG ASCB                81898940
         LA    XRWORK,ASCBXMPQ-ASCB(XRWORK)     ADDR OF CHAIN HEADER    81902202
*/*EXITLOOP: D (YES,EXITDEQ,NO,) THIS IS OUR SRB*/                      81903502
EXITLOOP C     R1,ZERO(,XRWORK)        IS THIS OUR SRB                  81904540
         BE    EXITDEQ                 BR IF SO                         81905840
*/* P (,EXITLOOP) GET NEXT SRB*/                                        81910102
         L     XRWORK,ZERO(,XRWORK)    GET TO NEXT SRB                  81912102
         LA    XRWORK,XMPQ-SRBSECT(,XRWORK) ADDR OF NEXT CHAIN          81914102
         B     EXITLOOP                DO IT AGAIN                      81916140
*/*EXITDEQ: P DEQ XMPOST SRB FROM ITS PARENT ASCB*/                     81921602
EXITDEQ  ST    R0,0(,XRWORK)           DEQ OUR SRB                      81921840
*/*EXITGONE: P PUT XMPOST SRB BACK ON CHAIN */                          81923002
EXITGONE L     R13,CHAINHD             GETCHAIN HEADER         @YM02663 81943040
         ST    R13,ZERO(,R1)           SAVE OLD CHAIN PTR IN   @YM02663 81982240
*                                      THIS SRBS POINTER FIELD @YM02663 81989240
         ST    R1,CHAINHD              CHAIN THIS SRB ON TOP   @YM02663 81996240
*/* S SETLOCK: RELEASE SALLOC LOCK*/                                    82011802
LK4      SETLOCK RELEASE,TYPE=SALLOC,RELATED=LK3                        82026602
*/* S SETLOCK: RELEASE LOCAL LOCK*/                                     82041402
LK5      SETLOCK RELEASE,TYPE=LOCAL,RELATED=LK10                        82056202
*/* R DISPATCHER SRB EXIT*/                                             82071002
         BR    XRSCRTCH                RETURN TO DISP                   82085802
*  ERROR EXIT                                                           82100602
*/*ERROR2: R ABEND 202*/                                                82115402
ERROR2   LA    R1,ERRPOST2             LOAD ERROR CODE                  82130202
         B     ABND2                   BRANCH                           82145002
         EJECT                                                          82152040
*                                                                       82159040
*  PROCESS ECB EXTENSION                                                82166040
*                                                                       82173040
         SPACE                                                          82180040
EXTECB   EQU   *                      ECB EXTENSION PROCESSING @Z40EPVD 82187040
*/*EXTECB: S SETFRR: ESTABLISH RECOVERY ENVIRONMENT*/                   82194040
         LA    R1,EXECBFRR            GET FRR ADDR             @Z40EPVD 82201040
         SETFRR A,FRRAD=(R1),WRKREGS=(XRWORK,XRSCRTCH),PARMAD=(FRRWA3)  82208040
*/* P PRIME FRR WORK AREA WITH FAILURE CODE - 14*/                      82222040
         LA    R1,RC14                GET REASON CODE 14       @Z40EPVD 82229040
         ST    R1,ZERO(FRRWA3)        PUT RC IN WORK AREA      @Z40EPVD 82233040
*/* D (NO,CHNGRC1,YES,) EXIT ROUTINE REQUEST*/                          82243040
         L     ECBE2,ECB-ECB(XRECB)   ADDR OF ECB EXT          @Z40EPVD 82246040
         SLL   ECBE2,HIGHBIT          CLEAR WAIT BIT           @Z40EPVD 82250040
         SRL   ECBE2,LOWBITS          CLEAR EXT ECB BITS       @Z40EPVD 82256040
         SLL   ECBE2,LOWBITS-HIGHBIT  PURE ECB EXT ADDR        @Z40EPVD 82262040
         CLC   ZERO(FOUR,ECBE2),PXITCODE VALID FIRST WORD      @Z40EPVD 82274040
         BNE   CHNGRC1                NO, PREPARE TO ABEND     @Z40EPVD 82277040
*/* MOREEXIT: D (NO,CHNGRC2,YES,) ANY MORE EXIT ROUTINES*/              82292040
         L     R1,ASCBASXB-ASCB(XRASCB) ASXB ADDR              @Z40EPVD 82299040
         L     R1,ASXBPT0E-ASXB(R1)   POST EXIT QUEUE HEADER   @Z40EPVD 82301040
MOREEXIT EQU   *                      EXIT QUEUE LOOP LABEL    @Z40EPVD 82304040
         LTR   R1,R1                  ANY MORE EXITS?          @Z40EPVD 82309040
         BZ    CHNGRC2                NO PREPARE TO ABEND      @Z40EPVD 82314040
*/* D (YES,VALEXIT,NO,) EXIT ROUTINE ADDRESSES MATCH*/                  82334040
         CLC   FOUR(FOUR,ECBE2),FOUR(R1) EXIT ADDRS MATCH      @Z40EPVD 82341040
         BE    VALEXIT                YES, EXIT LOOP           @Z40EPVD 82343040
*/* P (,MOREEXIT) GET ADDR OF NEXT BLOCK*/                              82355040
         L     R1,ZERO(R1)            NO, GET NEXT BLOCK ADDR  @Z40EPVD 82358040
         B     MOREEXIT               LOOP BACK                @Z40EPVD 82362040
*/*VALEXIT: D (YES,CHNGRC3,NO,) EXTENDED SAVE AREA IN USE*/             82376040
VALEXIT  EQU   *                      VALID EXIT ADDR          @Z40EPVD 82379040
         TM    LSAFLGS-LSA(XRSAVE),EXTSA+PEXITSA SA IN USE     @Z40EPVD 82388040
         BNZ   CHNGRC3                YES, PREPARE TO ABEND    @Z40EPVD 82390040
*/* P SET COMPLETE BIT AND COMPLETION CODE IN ECB*/                     82404040
         N     XRPTCODE,OFFWAIT       TURN OFF WAIT BIT        @Z40EPVD 82407040
         O     XRPTCODE,ONCOMPL       TURN ON COMPLETE BIT     @Z40EPVD 82411040
         ST    XRPTCODE,ECB-ECB(,XRECB) UPDATE ECB             @Z40EPVD 82421040
*/* P SAVE POST REGS ACROSS INTERFACE - MARK EXIT SA IN USE*/           82432040
         OI    LSAFLGS-LSA(XRSAVE),PEXITSA TEMP SA IN USE      @Z40EPVD 82436040
         STM   R12,R1,LSAPEXI2-LSA(XRSAVE) SAVE REGS NEEDED    @ZA30491 82441040
*        THE ABOVE INSTRUCTION WAS CHANGED TO ALSO SAVE R12-13 @ZA30491 82445040
*/* P RESET FAILURE CODE IN FRR WORK AREA*/                             82453040
         LA    R15,RC0                GET ZERO REASON CODE     @Z40EPVD 82456040
         ST    R15,ZERO(FRRWA3)       PUT RC IN WORK AREA      @Z40EPVD 82460040
*/* P PREPARE INTERFACE FOR EXIT ROUTINE*/                              82474040
         L     R15,FOUR(R1)           EXIT ENTRY PT ADDR       @Z40EPVD 82477040
         ST    R15,LSAXITEP-LSA(,XRSAVE) SAVE E.P. ADDR        @Z40EPVD 82483040
         LR    R1,ECBE2               ECB EXTENSION ADDR       @Z40EPVD 82485040
         LR    R0,XRECB               PASS POSTED ECB ADDR     @Z40EPVD 82488040
*/* S EXIT RTN: INVOKE EXIT ROUTINE*/                                   82495040
         BALR  R14,R15                CALL EXIT ROUTINE        @Z40EPVD 82498040
*/* P RESET POST REGS*/                                                 82509040
         LM    R12,R1,LSAPEXI2-LSA(XRSAVE) RESTORE REGS        @ZA30491 82516040
*/* P INDICATE EXTENDED AND EXIT SAVE AREAS NOT IN USE*/                82523040
         NI    LSAFLGS-LSA(XRSAVE),XFF-EXTSA-PEXITSA NOT USED  @Z40EPVD 82530040
*/* S (,EXIT) SETFRR: DELETE POST EXIT FRR*/                            82537040
         SETFRR D,WRKREGS=(XRWORK,XRSCRTCH) DELETE FRR         @Z40EPVD 82544040
         B     EXIT                   MAINLINE EXIT CODE       @Z40EPVD 82546040
*/*CHNGRC1: P (,ABEND702) SET ABEND REASON CODE TO 8*/                  82558040
CHNGRC1  LA    R1,RC8                 SET REASON CODE TO 8     @Z40EPVD 82561040
         B     ABEND702               GO ISSUE ABEND           @Z40EPVD 82565040
*/* CHNGRC2: P (,ABEND702) SET ABEND REASON CODE TO C*/                 82576040
CHNGRC2  LA    R1,RCC                 SET REASON CODE TO C     @Z40EPVD 82581040
         B     ABEND702               GO ISSUE ABEND           @Z40EPVD 82586040
*/*CHNGRC3: P SET ABEND REASON CODE TO 10*/                             82600040
CHNGRC3  LA    R1,RC10                SET REASON CODE TO 10    @Z40EPVD 82603040
*/*ABEND702: S SETFRR: DELETE FRR BEFORE ABENDING*/                     82614040
ABEND702 EQU   *                      PREPARE FOR 702 ABEND    @Z40EPVD 82616040
         LR    R0,ECBE2               SAVE ECB EXT ADDR        @Z40EPVD 82618040
         SETFRR D,WRKREGS=(XRWORK,XRSCRTCH) DELETE FRR         @Z40EPVD 82630040
*/* R ABEND 702*/                                                       82642040
         LR    R3,R1                  SAVE REASON CODE         @Z40EPVD 82643040
         L     R1,ABND702             GET 702 ABEND CODE       @Z40EPVD 82645040
         LR    R15,R3                 SET REASON CODE          @Z40EPVD 82649040
         SVC   ABENINST               ISSUE ABEND              @Z40EPVD 82659040
         EJECT                                                          82670040
*********************************************************************** 82795001
*********************************************************************** 82845001
*     THE FOLLOWING CODE IS ENTERED IF A PARAMETER LIST FOR AN        * 82895001
*       CROSS MEMORY POST WAS SPECIFIED.                             *  82945002
*                                                                       85145001
*/*XMPROC: P SET UP REGS FROM XMPOST PARM LIST*/                        85147002
XMPROC   LR    R10,XRPTCODE        SAVE POST CODE                       85155002
         LTR   R10,R10             CHECK FOR ECBKEY OPTION     @ZA15373 85156040
         BNM   XMPECBAD            NOT REQ, SKIP ECBKEY SAVE   @ZA15373 85159040
         IC    R0,ECBKEY(,XRECB)   SAVE ECBKEY FOR VAL CHK     @ZA15373 85162040
XMPECBAD L     R5,ECBPTR(,XRECB)   SAVE ECB ADDR               @ZA15373 85165040
         L     R8,ASCBPTR(,XRECB)  SAVE TARGET ASCB ADDR       @ZA15373 85168040
         L     R6,ERRETPTR(,XRECB) SAVE ERRET ADDR             @ZA15373 85171040
         LA    R6,ZERO(,R6)        SKIP MEM RELATED TESTS       @Y02752 85185402
*/*XMPPROC: D (YES,XMPEROK,NO,) THIS REQUEST MEMORY RELATED*/   @Y02752 85187002
XMPPROC  LR    XRSCRTCH,XRRETURN   SAVE RETURN ADDR ACROSS MACROS       85205002
         LTR   R6,R6               TEST FOR NOT MEMORY RELATED  @Y02752 85210040
         BP    XMPEROK             BR IF MEMORY RELATED         @Y02752 85225002
*/* P GET ADDRESS OF MASTER SCHED ASCB */                       @Y02752 85227002
         LA    XRASCB,XMASASID     MASTER SCHED  ASID TIMES 4   @Y02752 85235002
QJ11     L     R3,CVTPTR           GET POINTER TO CVT           @Y02752 85237002
         L     R3,CVTASVT-CVTMAP(,R3) ADDR OF ASVT              @Y02752 85239002
         L     XRASCB,ASVTENTY-ASVT-FOUR(R3,XRASCB)   HAVE ADDR @Y02752 85241002
*                                  OF MASTER SCHED ASCB         @Y02752 85243002
*/*XMPEROK: S SETLOCK: GET SALLOC LOCK */                       @Y02752 85243102
XMPEROK  EQU   *                   TESTING LABEL                @Y02752 85243402
LK6      SETLOCK OBTAIN,TYPE=SALLOC,MODE=UNCOND,RELATED=LK7             85245002
*/* D (NO,,YES,HAVEIT) ARE THERE ANY SRBS ON CHAIN */                   85247402
         L     R1,CHAINHD          GET CHAIN HEADER            @YM02663 85247802
         LTR   R1,R1               ANY THERE                   @YM02663 85248102
         BNZ   HAVEIT              YES, BRANCH                 @YM02663 85248402
         LR    XRLINKR,XRBASE      SAVE BASE REG ACROSS GM              85248702
         LR    XRSAVE,R0           SAVE ECBKEY BY GM INTERFACE @ZA15373 85248840
         LA    R0,SRBLENTH         SRB LENGTH                           85252040
*/* S (,GOTTEN) GETMAIN: XMPOST SRB*/                                   85253040
QJ12     GETMAIN RU,LV=(0),SP=245,BRANCH=(YES,GLOBAL)  GET SRB          85255002
         LR    R0,XRSAVE           RESTORE ECBKEY AFTER GM     @ZA15373 85255740
         LR    XRBASE,XRLINKR      RESET BASE REG                       85256440
         B     GOTTEN              GO AROUND CHAIN UPDATE      @YM02663 85257102
*/*HAVEIT: P UPDATE CHAIN - TAKE OFF GOTTEN SRB */                      85260202
HAVEIT   L     XRWORK,ZERO(,R1)    GET NEXT ONE IN CHAIN       @YM02663 85261202
         ST    XRWORK,CHAINHD      SAVE POINTER TO NEXT        @YM02663 85262202
         USING SRBSECT,R1          BASE REG FOR GOTTEN CORE             85264202
*/*GOTTEN: P CHAIN NEW SRB TO ASCB XMPOST SRB LIFO Q*/                  85266202
GOTTEN   L     XRWORK,ASCBXMPQ     GET XMPOST SRB Q ANCHOR     @YM02663 85267202
         ST    R1,ASCBXMPQ         ADDR OF NEW SRB TO TOP               85268202
         ST    XRWORK,XMPQ         CHAIN NEW TO REST OF Q               85269202
*/* D (YES,NORLSE,NO,) CALLER ALREADY HAD SALLOC LOCK*/                 85275402
         LTR   R13,R13             WAS SALLOC LOCK ALREADY HELD         85280302
         BNZ   NORLSE              YES - NO RELEASE                     85285202
*/* S SETLOCK: RELEASE SALLOC LOCK*/                                    85290102
LK7      SETLOCK RELEASE,TYPE=SALLOC,RELATED=LK6                        85295002
*/*NORLSE: P SET UP XMPOST SRB FIELDS*/                                 85297002
NORLSE   LR    XRRETURN,XRSCRTCH   RESET RETURN REG                     85305002
         XC    SRBSECT(SRBSIZE),SRBSECT  ZERO SRB BASE                  85345002
         ST    R8,SRBASCB          TARGET ADDR SPC                      85355002
         LA    XRSCRTCH,SRBPOST    ADDR OF EP                           85395002
         LA    XRWORK,SPOST        RMTR ADDR                            85415040
         STM   XRSCRTCH,XRWORK,SRBEP  SET EP AND RMTR                   85495002
QK18Z    L     XRWORK,PSATOLD      GET CURRENT TCB ADDR                 85595002
         LH    XRSCRTCH,ASCBASID   CURRENT ASID                         85645002
         LTR   XRWORK,XRWORK       TEST FOR TCB MODE                    85695002
         BNZ   MODETCB             IF NOT ZERO, TCBMODE                 85745002
         L     XRWORK,PSALCCAV     ADDR OF LCCA                         85795002
         LM    XRSCRTCH,XRWORK,LCCASRBF-LCCA(XRWORK)  SRB'S ASID/TCB    85845002
MODETCB  STM   XRSCRTCH,XRWORK,SRBFLC  SET FIELDS                       85895002
         STM   R5,R6,XMECB         SET ECB,ERRET ADDRS                  85945002
         NI    XMECB,RECBWTF       TURN OFF HI BIT                      85955002
         ST    R10,XMCCODE         SET POST CODE                        85995002
         STC   R0,XMECBKEY         SET ECBKEY FOR VAL CHECK    @ZA15373 86025040
         ST    XRASCB,XMASCB       SAVE ORIG ASCB ADDR                  86055002
         LA    XRWORK,SRBEND       ADDR OF PARMS                        86095002
         ST    XRWORK,SRBPARM      SET PARM POINTER                     86145002
         LR    XRWORK,R15          SAVE REG OVER SCHEDULE               86155002
         DROP  R1,R15                                                   86195002
         USING IGC002+2,XRWORK                                          86205002
*/* S SCHEDULE: SRB TO TARGET A.S. EP=SRBPOST*/                         86215002
QK19Z    SCHEDULE SRB=(1),SCOPE=LOCAL                                   86245002
*/* D (YES,XMP00,NO,) SVC OR BR CALLER W/O LOCAL LOCK */                86255040
QK20Z    LTR   XRRETURN,XRRETURN   TEST FOR SVC ENTRY                   86265002
         BPR   XRRETURN            RETURN IF SVC                        86275002
*/* D (NO,,YES,XMPLKH) LOCAL LOCK HELD */                               86305002
QK21Z    SETLOCK TEST,TYPE=LOCAL,BRANCH=(HELD,XMPLKH)                   86315002
*/* R RETURN ON REG 14*/                                                86335002
         BR    XRRETURN            RETURN IF REGS NOT SAVED             86337002
*/*XMPLKH: D (YES,EXTSAVE,NO,) EXTENDED SAVE AREA IN USE */             86337540
XMPLKH   TM    LSAFLGS-LSA(R9),EXTSA   EXT SA IN USE           @Z40EPVD 86338040
         BO    EXTSAVE             YES, RESET FROM EXT SA      @Z40EPVD 86338540
*/* P RESTORE REGS 0-9 */                                               86339040
         LM    R0,R9,0(R9)         RESTORE REGS                         86340040
*/* XMP00: R  RETURN ON REG 14 */                                       86343002
XMP00    BR    XRRETURN            RETURN                               86345002
*/*EXTSAVE: P (,RESTALL) RESET BASE REG FOR LOCAL SAVE AREA */          86355040
EXTSAVE  LR    XRSAVE,R9           RESET DATA REG              @Z40EPVD 86365040
         B     RESTALL             GO RESTORE REGS             @Z40EPVD 86375040
         DROP  XRWORK                                                   86385040
         EJECT                                                          86395002
         USING *,R15                                                    86405002
*/* E SRBPOST*/                                                         86415002
*/* P SET REG 14 POSITIVE FOR XMPOST SW*/                               86425002
SRBPOST  LA    R10,0(,R14)         POSITIVE RETURN ADDRESS     @ZA15373 86430040
*/* S SETLOCK: OBTAIN LOCAL LOCK*/                                      86455002
LK10     SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,RELATED=(LK5,LK16)       86495002
*/* P FIND LOCAL SAVE AREA- SAVE REGS*/                                 86497002
QPFYZ    L     XRASCB,PSAAOLD      CURRENT ASCB                         86505002
         L     XRSAVE,ASCBASXB     ASXB ADDR                            86515002
         L     XRSAVE,ASXBSPSA-ASXB(,XRSAVE) WSA TABLE                  86525002
         L     XRSAVE,WSALPOST-WSAL(,XRSAVE) POST WSA                   86531002
         ST    R0,0(XRSAVE)        STASH SRB ADDR                       86537002
         LR    R14,R10             RESTORE R14 WITH POS ADDR   @ZA15373 86541040
         LA    R1,SRBFRR           FRR ADDRESS                          86595002
*/* S SETFRR: ESTABLISH XMPOST FRR*/                                    86595402
QJ14Z    SETFRR A,FRRAD=(R1),WRKREGS=(XRWORK,XRSCRTCH)                  86597002
*/* P SET UP MAINLINE REGS*/                                   @ZA15373 86598040
         L     XRBASE,BASE         COMMON ADDRESSABILITY POINT          86605002
         USING IGC002+2,XRBASE                                          86615002
         LR    XRWORK,R0           ADDR OF SRB                          86845002
         L     XRECB,XMECB-SRBSECT(XRWORK) GET ECB ADDR FOR POST        86895002
         L     XRPTCODE,XMCCODE-SRBSECT(XRWORK)  POST CODE              86945002
*/* D (YES,,NO,ECBCHECK) ECBKEY OPTION SPECIFIED*/             @ZA15373 86945940
ECBVALCK LTR   XRPTCODE,XRPTCODE   TEST ECBKEY OPTION          @ZA15373 86946440
         BNM   ECBCHECK            NOT REQ, ENTER IEAVPT01     @ZA15373 86946940
         SPACE 2                                                        86948140
*        CODE TO SUPPORT ECBKEY OPTION FOR XMPST REQUESTS.     @ZA15373 86948640
*        ECB WILL BE VALIDITY CHECKED WITH ECBKEY ONLY WHEN    @ZA15373 86949240
*        THE ECB HAS NOT BEEN WAITED ON. (NORMAL VALIDITY      @ZA15373 86949840
*        CHECK IS DONE OTHERWISE).                             @ZA15373 86950440
         SPACE 1                                                        86951740
*/* D (YES,EVN3,NO,) ECB WAITED ON */                          @ZA15373 86952240
         TM    ZERO(XRECB),ECBWAIT CHECK FOR WAITING ECB       @ZA15373 86955240
         BO    EVN3                WAITING, ENTER IEAVPT01     @ZA15373 86958240
*/* P GET ECBKEY FROM XMPOST SRB*/                             @ZA15373 86961240
         IC    R4,XMECBKEY-SRBSECT(,R3) GET ECBKEY FROM SRB    @ZA15373 86964240
*/* P SET UP INTERFACE TO IEAVEVAL TO VAL CHK ECB*/            @ZA15373 86967240
         O     R4,TIDBIT           INDICATE KEY, NOT TCB       @ZA15373 86970240
         LR    R1,XRECB            ADDRESS OF ECB AND          @ZA15373 86973240
         LA    R2,L3(,XRECB)       END ADDR FOR IEAVEVAL       @ZA15373 86976240
         LR    R12,R15             SAVE BASE REG 15            @ZA15373 86979240
         L     R15,CHECK           ENTER AT IEA0VL01           @ZA15373 86982240
*/* S IEA0VL01: CALL IEAVEVAL */                               @ZA15373 86985240
         BALR  R14,R15             CALL IEAVEVAL               @ZA15373 86988240
         LR    R15,R12             RESTORE BASE REG 15         @ZA15373 86991240
         LR    R14,R10             RESTORE POS RETURN REG      @ZA15373 86994240
*/* D (FAIL,ERROR1,PASS,RBCHECK)   RESULTS OF VAL CHK*/        @ZA33186 86995240
         BNZ   ERROR1              FAIL VAL CHK, ABEND         @ZA15373 86997240
*        BRANCH TO RBCHECK INSTEAD OF POSTTEST, IN CASE AN ECB @ZA33186 86999240
*        WHOSE TWO HIGH ORDER BITS HAD INITIALLY BEEN ZERO     @ZA33186 87001240
*        HAS BEEN INITIALIZED TO POINT TO AN ECB EXTENSION.    @ZA33186 87003240
         B     RBCHECK             ECBVALID, ENTER PT01        @ZA33186 87009240
*/* POST: END */                                                        87015003
         EJECT                                                          87045002
*/* POSTR: CHART */                                                     87050003
         USING *,15                                                     87055002
*/* E SPOST*/                                                           87057002
*/* P SET UP ADDRESSABILITY TO POST CODE*/                     @ZA15373 87057640
SPOST    L     XRBASE,BASE          COMMON ADDRESSABILITY      @ZA15373 87060640
         USING IGC002+2,XRBASE      POINT FOR POST CODE        @ZA15373 87063640
*/* P PICK UP POST PARMS FROM XMPOST SRB*/                     @ZA15373 87066640
         LR    R3,R1                SAVE SRB ADDR              @ZA15373 87069640
         USING SRBSECT,R3                                      @ZA15373 87072640
         LR    R8,R14               SAVE RETURN ADDR           @ZA15373 87075640
*/* D (YES,,NO,NOPOST) TASK TERM; IE ASCBS MATCH */                     87085102
Q45      L     R7,PSAAOLD           GET CURRENT ASCB ADDR      @YM01534 87085202
         CL    R7,SRBASCB           COMPARE TO ASCB ADDR IN SRB@YM01534 87085302
         BNE   NOPOST               DONT POST IF MEM TERM      @YM01534 87085502
*/* D (YES,SPRESCH,NO,) IS THIS AN ERRET SRB */                         87085902
         LA    R5,ERRET             GET POSTS ERRET ADDR       @YM01534 87086302
         CL    R5,SRBEP             COMPARE TO ENTRY POINT     @YM01534 87086702
         BE    SPRESCH              BR IF ERRET TO RESCHEDULE  @YM01534 87086802
*/* S SETLOCK: OBTAIN LOCAL LOCK */                                     87092802
SPQ1     SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,RELATED=(SPQ2,QK16)      87093002
*/* S SETFRR: SET FRR COVERAGE FOR LOCAL POST */                        87094602
         LA    R1,SPOSTFRR          SET ADDR OF FRR RTN        @YM01534 87095802
QSP0     SETFRR A,FRRAD=(R1),WRKREGS=(R11,R12),PARMAD=(R10)    @YM01534 87096202
*/* P SET PARM AREA FOR POSSIBLE FRR ENTRY */                           87096702
         ST    R3,SRBSV(,R10)       SET SAVED SRB ADDR         @YM01534 87097202
         ST    R8,SPOSTRT(,R10)     SET SAVED RETR ADDR        @ZA15373 87097540
*/* P SET UP INTERFACE FOR BRANCH ENTRY TO IEAVPT01*/          @ZA15373 87097740
         L     R10,XMCCODE          SET COMPLETION CODE        @ZA15373 87097940
         L     R11,XMECB            SET ADDR OF ECB            @ZA15373 87098140
*/* D (YES,,NO,GOXMPOST) WAS ECBKEY OPTION IN EFFECT*/         @ZA15373 87098340
         LTR   R10,R10              TEST ECBKEY OPTION         @ZA15373 87098540
         BNM   GOXMPOST             NOT REQ, GO COMPLETE XMPOST@ZA15373 87098740
*/* D (YES,GOXMPOST,NO,) ECB WAITED ON*/                       @ZA15373 87098840
         TM    ZERO(R11),ECBWTFLG   CHK IF ECB WAITING         @ZA15373 87098940
         BO    GOXMPOST             WAITING, GO COMPLETE XMPOST@ZA15373 87099040
*/* P GET ECBKEY FROM XMPOST SRB*/                             @ZA15373 87099240
         IC    R4,XMECBKEY          GET ECBKEY FROM SRB        @ZA15373 87099340
*/* P SET UP INTERFACE TO IEAVEVAL TO VAL CHK ECB*/            @ZA15373 87099540
         O     R4,TIDBIT           INDICATE KEY, NOT TCB       @ZA15373 87099640
         LR    R1,R11               ADDR OF ECB AND            @ZA15373 87099740
         LA    R2,L3(,R11)          END ADDR FOR IEAVEVAL      @ZA15373 87099940
         LR    R12,R15              SAVE BASE REG 15           @ZA15373 87100140
         L     R15,CHECK            ENTER AT IEAOVL01          @ZA15373 87100340
*/* S IEA0VL01: CALL IEAVEVAL*/                                @ZA15373 87100440
         BALR  R14,R15              CALL IEAVEVAL              @ZA15373 87100740
         LR    R15,R12              RESTORE BASE REG 15        @ZA15373 87100940
*/* D (FAIL,ERROR1,PASS,) RESULTS OF VAL CHK */                @ZA15373 87101040
         BNZ   ERROR1               FAIL VAL CHK, ABEND        @ZA15373 87101340
*/*GOXMPOST: S IEA0PT01: ENTER TO COMPLETE XMPOST*/            @ZA15373 87101440
GOXMPOST L     R15,ADDRPT01         GET ADDR OF BR ENTRY       @ZA15373 87101740
         BALR  R14,R15              CALL IEAVPT01              @ZA15373 87101940
         SPACE 2                                                        87102540
*        NOTE: BASE REG 15 IS STILL VALID ON RETURN FROM       @ZA15373 87102640
*        IEAVPT01 (IEAVPT01 ESTABLISHES ADDRESSABILITY BY      @ZA15373 87102740
*        REG 15 FROM IGC002+2 ALSO).                           @ZA15373 87102840
         SPACE 1                                                        87103040
*/*SPFRRT: S SETFRR:  DELETE FRR COVERAGE  */                           87103440
SPFRRT   SETFRR D,WRKREGS=(R11,R12)                            @YM01534 87103640
*/* S SETLOCK: RELEASE LOCAL LOCK */                                    87103740
SPQ2     SETLOCK RELEASE,TYPE=LOCAL,RELATED=(SPQ1)             @YM01534 87103840
SPQG     L     R7,PSAAOLD           GET ADDR OF ASCB           @YM01534 87104040
*/*NOPOST: S SETLOCK: OBTAIN SALLOC LOCK*/                              87104140
NOPOST   DS    0H                                              @ZA10133 87104240
LK11     SETLOCK OBTAIN,TYPE=SALLOC,MODE=UNCOND,RELATED=(LK12,LK012)    87104340
*/* D (YES,SPSTGONE,NO,) ORIG ASCB HAS GONE AWAY*/                      87104502
         L     R4,XMPQ              XMPOST SRB CHAIN FLD                87105040
         LTR   R4,R4                SRBS ARE ORPHANS                    87105540
         BM    SPSTGONE             BR IF ORIG ASCB GONE                87106040
         L     XRSCRTCH,XMASCB      ORIG ASCB ADDR                      87106540
         LA    XRSCRTCH,ASCBXMPQ-ASCB(XRSCRTCH) ADDR OF CHAIN HEADER    87109402
*/*SPSTLOOP: D (YES,SPSTDEQ,NO,) THIS IS OUR SRB*/                      87111402
SPSTLOOP C     R3,0(XRSCRTCH)       IS THIS OUR SRB                     87112440
         BE    SPSTDEQ              BR IF SO                            87113440
*/* P (,SPSTLOOP) GET NEXT SRB*/                                        87117702
         L     XRSCRTCH,0(XRSCRTCH) GET TO NEXT SRB                     87117940
         LA    XRSCRTCH,XMPQ-SRBSECT(XRSCRTCH) ADDR OF NEXT CHAIN       87118502
         B     SPSTLOOP             DO IT AGAIN                         87118740
*/*SPSTDEQ: P DEQ XMPOST SRB FROM ITS PARENT ASCB*/                     87119302
SPSTDEQ  ST    R4,0(XRSCRTCH)       DEQ OUR SRB                         87119540
*/* D (YES,SCHERRET,NO,) SRB DEQ'ED ERRET SRB */                        87119740
         SR    R4,R4                ERRET SRB INDICATED BY ZERO@ZA10133 87120140
         CL    R4,SRBEP             SRB EPA SET BY SPOST FRR   @ZA10133 87120240
         BE    SCHERRET             GO SCHED SRB IF ERRET      @ZA10133 87120640
*/*SPSTGONE: P PUT XMPOST SRB BACK ON CHAIN*/                           87120702
SPSTGONE L     R13,CHAINHD          GETCHAIN HEADER            @YM02663 87121240
         ST    R13,ZERO(,R3)        SAVE OLD CHAIN PTR IN THIS @ZA10133 87122240
*                                   SRBS POINTER FIELD         @YM02663 87122540
         ST    R3,CHAINHD           CHAIN THIS SRB TO TOP      @ZA10133 87123740
*/* S SETLOCK: RELEASE SALLOC LOCK*/                                    87125002
LK12     SETLOCK RELEASE,TYPE=SALLOC,RELATED=LK11                       87126002
*/*SPRT: R RETURN TO PURGEDQ*/                                          87127002
         BR    R8                   RETURN                     @ZA15373 87127540
         SPACE 2                                                        87130140
*/*SCHERRET: P INIT SRB TO SCHEDULE POST ERRET IN USER ASCB */          87130240
SCHERRET DS    0H                                              @ZA10133 87130340
         LA    XRSCRTCH,ERRET       ERRET ADDR                 @YM01534 87130440
         ST    XRSCRTCH,SRBEP       ENTRY POINT                @YM01534 87130640
         MVC   SRBASCB,XMASCB       ADDR OF ORIGINATING ASCB   @YM01534 87130840
         ST    XRASCB,XMASCB        SAVE FAILING ASCB ADDR     @YM01534 87131040
*/* S SETLOCK: RELEASE SALLOC */                                        87131440
LK012    SETLOCK RELEASE,TYPE=SALLOC,RELATED=LK11              @ZA10133 87131640
         SPACE 2                                                        87131840
*/*SPRESCH: S (,SPRT) SCHEDULE: RESCHEDULE ERRET SRB */                 87132002
         DROP  R15                                                      87133002
SPRESCH  LR    R1,R3                SET REG                    @YM01534 87135002
         BALR  R4,R0                NEW ADDRESSABLIITY                  87135140
         USING *,R4                 NEW BASE                            87135240
         SCHEDULE SRB=(1),SCOPE=LOCAL                          @YM01534 87136940
         BR    R8                   RETURN                     @ZA15373 87137140
         DROP  R3                                                       87137940
         DROP  R4                                                       87138402
*/*ERROR1: P SET ABEND CODE TO 102 */                          @ZA15373 87138940
*/* R ABEND */                                                 @ZA15373 87139440
         EJECT                                                          87140002
         USING *,15                                                     87141002
*/* E IEARPOST*/                                                        87142002
IEARPOST STM   R14,R12,C12(R13)     SAVE REGS                           87143040
*/* D (MEM,RMEMTERM,TASK,) TYPE TERMINATION */                          87146002
         L     R1,0(,R1)            GET ADDR OF RMPL           @YM01534 87147002
         USING RMPL,R1                                         @YM01534 87150002
         TM    RMPLFLG1,RMPLTERM    TEST TYPE TERMINATION      @YM01534 87151002
         BO    RMEMTERM             BR IF MEM TERM             @YM01534 87152002
*/* S (,RPRETR) PURGEDQ: PURGE ALL INCOMING XMPOST AND ERRET SRBS*/     87155002
QSZ17    PURGEDQ MF=(E,IEASPOST)  CLEAR XMPOST SRBS COMING HERE         87157002
         BALR  R15,R0               SET UP BASE                @YM01534 87160002
         USING *,R15                                           @YM01534 87161002
         B     RPRETR               GO TO RETURN               @YM01534 87162002
*/*RMEMTERM: P SET UP TO CLEANUP POSTS XMPQ */                          87165002
RMEMTERM BALR  R15,R0               RESET BASE                          87165540
         USING *,R15                                                    87167002
         LR    R4,R13               SAVE SAVE AREA REG                  87168040
*/* S SETLOCK: OBTAIN SALLOC LOCK*/                                     87171002
LK13     SETLOCK OBTAIN,TYPE=SALLOC,MODE=UNCOND,RELATED=RPSTEND         87172002
*/* P ZERO Q HEADER FOR XMPOST SRBS FROM THIS A.S.*/                    87175002
         L     R7,RMPLASCB          GET TERMINATING ASCB ADDR  @YM01534 87176040
         L     R2,ASCBXMPQ          GET XMPOST SRB Q ANCHOR             87177040
         XC    ASCBXMPQ,ASCBXMPQ    ZERO IT                             87180040
         USING SRBSECT,R1           SRB BASE                            87181040
*/*RPSTLOOP: D (YES,RPSTEND,NO,) Q IS EMPTY*/                           87185002
RPSTLOOP LTR   R1,R2                TEST FOR EMPTY Q                    87187040
         BZ    RPSTEND              BR IF SO                            87190040
*/* P SET FLAG IN EACH SRB INDICATING ORIG ASCB HAS GONE AWAY*/         87200002
         L     R2,XMPQ              GET Q CHAIN ADDR                    87202040
         OI    XMPQ,LSTIND          INDICATE SRB IS ADRIFT              87205040
         B     RPSTLOOP             LOOP                                87215002
*/*RPSTEND: S SETLOCK: RELEASE SALLOC LOCK*/                            87220002
RPSTEND  SETLOCK RELEASE,TYPE=SALLOC,RELATED=LK13                       87225002
*/*RPRETR: R RETURN*/                                                   87230002
         LR    R13,R4               RESET SAVE AREA ADDR                87235002
RPRETR   LM    R14,R12,C12(R13)     RESTORE REGS               @YM01534 87237040
         SR    R15,R15              CLEAR CONDITION CODE       @YM01534 87242002
         BR    R14                  RETURN                              87243040
         DROP  R1                   DROP RMPL ADDRESSABILITY            87247002
         EJECT                                                          87250002
IEASPOST PURGEDQ RMTR=SPOST,MF=L,ASIDTCB=DBLZERO LST FOR SPOST @YM01534 87255002
         DS    0D                   ALIGHN                     @YM01534 87257402
DBLZERO  DC    2F'0'                PARM FOR SPOST MACRO       @YM01534 87259002
         EJECT                                                          87260002
*/*SPOSTFRR: E FRR FOR SPOST */                                         87262002
         DROP  R15                                                      87263002
*/* S SETRP: RETRY TO SCHEDULE ERRET */                                 87264002
         USING *,R4                                                     87264102
         USING SDWA,R1                                                  87264202
SPOSTFRR L     XRSAVE,SDWAPARM      GET PARM AREA ADDR         @YM01534 87264302
         L     R3,SRBSV(,XRSAVE)    GET SRB ADDR               @YM01534 87264402
         LR    R4,R15               SET BASE REG               @YM01534 87264702
         ST    R3,SDWASR03          SET IN REGISTER AREA       @YM01534 87265002
         L     R3,SPOSTRT(,XRSAVE)  GET RETURN ADDRESS         @YM01534 87267002
         ST    R3,SDWASR08          SAVE IN REGISTER AREA      @ZA15373 87267240
         L     R3,PSAAOLD           GET ASCB ADDR              @YM01534 87267502
         ST    R3,SDWASR07          SET IN RETRY REG 7         @YM01534 87267602
         SETRP RETADDR=SPOSTFR0,RC=4,RETREGS=YES,              @YM01534X87267702
               RECPARM=POSTRPRM                                @YM01534 87268002
*/* R BACK TO RTM */                                                    87268402
         BR    R14                  RETURN                     @YM01534 87269102
         DROP  R4                                                       87269402
         SPACE 3                                                        87269640
*/* E SPOST RETRY  */                                                   87269802
*/*SPOSTFR0: N SCHEDULE ERRET BACK TO CALLER */                         87270540
SPOSTFR0 BALR  R15,R0               BOOTSTRAP ADDRESSABILITY   @YM01534 87271440
         USING *,R15                ASSUME NOTHING ABOUT REGS  @YM01534 87273340
         L     R15,BASE             COMMON ADDRESSABILITY      @ZA15373 87273540
         USING IGC002+2,XRBASE      POINT FOR POST CODE        @ZA15373 87273840
*/* P (,SPFRRT) INDICATE SRB TO BE SCHEDULED FOR POST ERRET */          87277240
         USING SRB,R3                                                   87278202
         SR    R4,R4                ERRET INDICATOR IS         @ZA10133 87278940
         ST    R4,SRBEP             ZERO SRB EPA               @ZA10133 87283140
         B     SPFRRT               GO TO SCHEDULE ERRET SRB   @ZA10133 87283840
         DROP  R3                                                       87296202
         EJECT                                                          87298202
         USING *,R4                                                     87300602
*/* E SRBFRR*/                                                          87301602
*/* S SETRP: SPECIFY RETRY AT SRBRETRY*/                                87302602
SRBFRR   LR    R4,R15              SET BASE                             87303140
         L     R3,SDWAABCC-SDWA(,R1)   GET ABEND CODE          @Y30HPVA 87303903
         ST    R3,SDWASR10-SDWA(,R1)   STORE SYSTEM COMPLETION CODE     87304203
*                                      TO PASS TO ERRET        @Y30HPVA 87304503
         SETRP RETADDR=SRBRETRY,RC=4,RECPARM=POSTRPRM RETRY FOR ERROR   87305002
*/* R RETURN*/                                                          87307002
         BR    R14                 BACK TO RTM-WILL SEE YOU AT SRBRETRY 87308040
         DROP  R4                                                       87310002
         SPACE 3                                                        87311002
*/* E SRBRETRY*/                                                        87313002
*/* P BOOTSTRAP ALL ENVIRONMENTAL REGS*/                                87315002
SRBRETRY BALR  R15,R0              BOOTSTRAP ADDRESSABILITY             87345002
         USING *,R15               ASSUME NOTHING ABOUT REGS            87395002
         L     XRASCB,PSAAOLD      CURRENT ASCB                         87405002
         L     XRSAVE,ASCBASXB     ASXB ADDR                            87415002
         L     XRSAVE,ASXBSPSA-ASXB(,XRSAVE) WSA TABLE                  87425002
         L     XRSAVE,WSALPOST-WSAL(,XRSAVE) POST WSA                   87431002
         L     R1,0(XRSAVE)        RELOAD SRB ADDR                      87437002
         LR    R8,XRSAVE           SAVE SAVE AREA POINTER               87441002
         USING SRBSECT,R1                                               87445002
*/* S SETLOCK: OBTAIN SALLOC LOCK*/                                     87445402
LK14     SETLOCK OBTAIN,TYPE=SALLOC,MODE=UNCOND,RELATED=(LK15,RLK14)    87445802
*/* D (YES,RTRYGONE,NO,) ORIG ASCB HAS GONE AWAY*/                      87447002
         L     R3,XMPQ             XMPOST SRB CHAIN FLD                 87449002
         LTR   R3,R3               SRBS ARE ORPHANS                     87451002
         BM    RTRYGONE            BR IF ORIG ASCB GONE                 87453002
         L     R4,XMASCB           ORIG ASCB ADDR                       87453140
         LA    R4,ASCBXMPQ-ASCB(,R4) ADDR OF CHAIN HEADER               87453340
*/*RTRYLOOP: D (YES,RTRYDEQ,NO,) THIS IS OUR SRB*/                      87453802
RTRYLOOP C     R1,0(,R4)           IS THIS OUR SRB                      87454040
         BE    RTRYDEQ             BR IF SO                             87454602
*/* P (,RTRYLOOP) GET NEXT SRB*/                                        87454702
         L     R4,ZERO(,R4)        GET TO NEXT SRB                      87454802
         LA    R4,XMPQ-SRBSECT(,R4) ADDR OF NEXT CHAIN                  87454902
         B     RTRYLOOP            DO IT AGAIN                          87468202
*/*RTRYGONE: P PUT XMPOST SRB BACK ON CHAIN*/                           87468502
RTRYGONE L     R13,CHAINHD         GETCHAIN HEADER             @YM02663 87468802
         ST    R13,ZERO(,R1)       SAVE OLD CHAIN PTR IN THIS  @YM02663 87469340
*                                  SRBS POINTER FIELD          @YM02663 87470802
         ST    R1,CHAINHD          PUT THIS SRB IN CHAIN AS TOP@YM02663 87471802
*/* S SETLOCK: RELEASE SALLOC LOCK*/                                    87476202
LK15     SETLOCK RELEASE,TYPE=SALLOC,RELATED=LK14                       87476602
*/* S SDUMP: DUMP SQA AND LSQA */                                       87477002
         LH    R4,ASCBASID         GET ASID                             87477102
         LR    R13,R8              SET SAVE AREA ADDR                   87477202
SDU5C    SDUMP HDRAD=POSTHDRL,                                         X87477302
               ASID=(R4),SDATA=(TRT,SQA,LSQA),BRANCH=YES                87477402
*/* S SETLOCK: RELEASE LOCAL LOCK */                           @YA02708 87477503
LK19     SETLOCK RELEASE,TYPE=LOCAL,RELATED=LK10               @YA02708 87477603
*/* R SRB EXIT*/                                                        87477703
         L     R14,CVTPTR          GET ADDR OF CVT             @YM02645 87477902
         L     R14,CVTSRBRT-CVTMAP(,R14) GET ADDR OF DISP      @YM02645 87478002
         BR    R14                 RETURN TO DISP              @YM02645 87478202
*/*RTRYDEQ: P DEQ XMPOST SRB FROM ITS PARENT ASCB*/                     87482202
RTRYDEQ  ST    R3,0(,R4)           DEQ OUR SRB                          87484240
*/* S SETLOCK: RELEASE SALLOC LOCK*/                                    87491702
RLK14    SETLOCK RELEASE,TYPE=SALLOC,RELATED=LK14                       87492102
*/* P SET UP SRB FOR SCHEDULE TO ERRET*/                                87493702
         LA    XRWORK,ERRET                                             87495002
         ST    XRWORK,SRBEP        ENTRY POINT                          87545002
         MVC   SRBASCB,XMASCB      ADDR OF ORIGINATING ASCB             87595002
         ST    XRASCB,XMASCB       SAVE FAILING ASCB ADDR               87645002
         ST    R10,XMPQ            PASS SYS COMP CODE          @Y30HPVA 87647040
*/* S SCHEDULE: SRB TO USERS ERRET*/                                    87655002
         DROP  R15                                                      87665002
         BALR  R4,R0               SET NEW BASE                         87675002
         USING *,R4                USE NEW BASE                         87685002
         SCHEDULE SRB=(1),SCOPE=LOCAL                                   87695002
*/* S SETFRR: DELETE XMPOST SRB FRR*/                                   87697002
         SETFRR D,WRKREGS=(XRWORK,XRSCRTCH)  DELETE FRR                 87705002
*/* S SETLOCK: RELEASE LOCAL LOCK*/                                     87707002
LK16     SETLOCK RELEASE,TYPE=LOCAL,RELATED=LK10                        87715002
*/* R SRB EXIT*/                                                        87725002
         L     R14,CVTPTR          ADDR OF CVT                          87735002
         L     R14,CVTSRBRT-CVTMAP(,R14) SRB EXIT TO DISP               87737002
         BR    R14                 NEXT STOP, ERRET IN ORIG ADDR SPACE  87745002
         DROP  R4                                                       87795002
         SPACE 3                                                        87845002
         USING *,R15                                                    87895002
*/* E ERRET*/                                                           87905002
*/* P PICK UP XMPOST PARMS FROM SRB*/                                   87915002
ERRET    LR    R1,R0               ADDR OF SRB                          87945002
         LR    R5,R14              SAVE R14 ACROSS FM                   88045002
         LM    R6,R10,SRBEND       SAVE PARMS                  @Y30HPVA 88065040
*/* S SETLOCK: OBTAIN SALLOC LOCK*/                                     88097002
LK17     SETLOCK OBTAIN,TYPE=SALLOC,MODE=UNCOND,RELATED=LK18            88105002
*/* P PUT XMPOST SRB BACK ON CHAIN*/                                    88106002
         L     R13,CHAINHD         GETCHAIN HEADER             @YM02663 88107002
         ST    R13,ZERO(,R1)       SAVE OLD CHAIN PTR IN THIS  @YM02663 88112040
*                                  SRBS POINTER FIELD          @YM02663 88127002
         ST    R1,CHAINHD          PUT THIS SRB IN CHAIN AS TOP@YM02663 88137002
*/* S SETLOCK: RELEASE SALLOC LOCK*/                                    88147002
LK18     SETLOCK RELEASE,TYPE=SALLOC,RELATED=LK17                       88155002
*/* P SET UP REGS FOR ENTRY TO USERS ERRET*/                            88165002
         LR    R1,R6               ASCB ADDR                            88195002
         LR    R0,R7               ECB ADDR                             88245002
         LR    R14,R5              DISPATCHER SRB EXIT ADDR             88295002
         LR    R2,R9               CCODE                                88305002
         LR    R3,R10              SYSTEM COMP CODE            @Y30HPVA 88315040
         LR    R15,R8              ERRET ADDR                           88345002
*/* R REG 15*/                                                          88355002
         BR    R15                 TO USER ERRET                        88395002
         EJECT                                                          88395703
         USING *,R4                                            @Y30HPVA 88396403
*/* E EVNTFRR */                                                        88397103
EVNTFRR  LR    R4,R15              SET BASE                    @Y30HPVA 88397440
         LR    R5,R14              SAVE RTM RETURN ADDRESS     @ZA20188 88397940
*/* P CHANGE COMPLETION CODE TO 402 ABEND */                            88398503
*/* S SETRP: PERCOLATE TO CALLER */                                     88401340
         SETRP RECORD=NO,RC=0,COMPCOD=(X'402',SYSTEM),DUMP=YES @Y30HPVA 88402003
*/* R RETURN */                                                         88402703
         LR    R14,R5              RESTORE RTM RETURN ADDRESS  @ZA20188 88402840
         BR    R14                 BACK TO RTM                 @Y30HPVA 88403040
         DROP  R4                                              @Y30HPVA 88404203
         EJECT                                                          88445002
CHECK    DC    A(IEA0VL01)         ADDRESS OF VALIDITY CHECK            88495040
ADDRPT01 DC    A(IEA0PT01)         ADDR OF POST BR ENTRY       @YM01534 93847040
DISPTCHR DC    A(IEA0DS)           ADDR OF DISPATCHER                   93855040
BASE     DC    A(IGC002+2)         POST BASE                            93895040
BASEWT   DC    A(WAITBAS)          WAIT BASE                       MTS0 93945040
POSTHDRL DC    AL1(PSTMSE-POSTRPRM)  LENGTH OF SDUMP HEADER             94095002
POSTRPRM DC    CL8'IEAVSY50'       MODULE NAME FOR RECPARM              94145002
         DC    CL8'IGC001'         CSECT NAME FOR RECPARM               94245002
         DC    CL8'IGC002'         POST AS FRR NAME                     94345002
         DC    C'XMPOST FAIL-NO ERRET'   MSG FOR SDUMP                  94375002
PSTMSE   EQU   *                   LABEL FOR SETUP OF ADCON             94405002
CHAINHD  DC    F'0'                CHAIN HEADER FOR XMPOST SRBS@YM02663 94445002
RBVALID  DC    X'0000000F'         USED TO ZERO ALL BUT LAST 4 BITS     94495040
WPRBPREL DC    AL4(RBPRFXND-RBPREFIX)    LENGTH OF RB PREFIX            95345001
OFFWAIT  DC    XL4'7FFFFFFF'       MASK TO SET OFF WAIT BIT             95355002
ONCOMPL  DC    XL4'40000000'       MASK TO T                            95365002
ABND402  DC    XL4'80402000'       ABEND CODE 402              @Y30HPVA 95372040
ABND502  DC    XL4'80502000'       ABEND CODE 502              @Y30HPVA 95379040
ABND702  DC    XL4'80702000'       ABEND CODE 702              @Z40EPVD 95386040
PXITCODE DC    XL4'01000000'       POST EXIT FUNCTION CODE     @Z40EPVD 95389040
TIDBIT   DC    X'80000000'         WORD WITH HIGH ORDER BIT             95392040
ERRORFLG DC    X'80'               TO TELL ABEND TO DUMP                95395040
WOS      DS    X                   WRITE-ONLY-STORAGE FOR STNSM         95398040
         EJECT                                                          95404040
*     EXECBFRR - RECOVERY FOR POST EXIT FUNCTION                        95407040
         SPACE 2                                                        95410040
*/* E EXECBFRR*/                                                        95413040
EXECBFRR EQU   *                        POST EXIT RECOVERY     @Z40EPVD 95414040
         BALR  R12,ZERO                 ESTABLISH BASE REG     @Z40EPVD 95416040
         USING *,R12                    ESTAB ADDRESSABILITY   @Z40EPVD 95418040
*/* D (NO,NOTREF,YES,) LSQA REFERENCEABLE*/                             95422040
         ICM   R0,M0011,SDWAFMID-SDWA(R1) LSQA REFERENCEABLE   @Z40EPVD 95425040
         BNZ   NOTREF                   NO, SKIP PROCESSING    @Z40EPVD 95427040
*/* D (YES,SURPRISE,NO,) WAS ERROR EXPECTED*/                           95431040
         L     R5,SDWAPARM-SDWA(R1)     GET FRR WORK AREA      @Z40EPVD 95434040
         L     R6,ZERO(R5)              GET FAILURE CODE       @Z40EPVD 95436040
         LTR   R6,R6                    ZERO REASON CODE       @Z40EPVD 95438040
         BZ    SURPRISE                 YES, ERROR NOT EXPTD   @Z40EPVD 95440040
*/* P SET FAILURE REASON CODE*/                                         95446040
         ST    R6,SDWAGR15-SDWA(R1)     SET RC IN SDWA         @Z40EPVD 95449040
*/* S SETRP: NO RECORD, DUMP, 702 ABEND CODE, PERC*/                    95452040
         LR    R6,R14                   SAVE RETURN ADDR       @ZM40133 95453040
         SETRP RECORD=NO,RC=0,COMPCOD=(X'702',SYSTEM),DUMP=YES @Z40EPVD 95454040
*/* R RETURN*/                                                          95458040
         LR    R14,R6                   RESET RETURN ADDR      @ZM40133 95459040
         BR    R14                      RETURN TO RTM          @Z40EPVD 95461040
*/*SURPRISE: P PRIME SDWA WITH PERTINENT DATA */                        95464040
SURPRISE EQU   *                        UNEXPECTED ERROR       @Z40EPVD 95467040
*        ALTHOUGH A CHANGE WAS MADE TO SAVE REGS 12 AND 13,    @ZA30491 95467740
*        THOSE REGISTERS WOULD NOT BE USEFUL IF SAVED IN THE   @ZA30491 95468440
*        VRA. (THEY CONTAIN USER DATA WHICH IS MEANINGLESS TO  @ZA30491 95469140
*        POST.) THEREFORE, NO CHANGE WAS MADE HERE IN THE FRR. @ZA30491 95469440
         L     XRSAVE,PSAAOLD           CURRENT ASCB           @Z40EPVD 95470040
         L     XRSAVE,ASCBASXB-ASCB(XRSAVE) ASXB ADDR          @Z40EPVD 95471040
         L     XRSAVE,ASXBSPSA-ASXB(,XRSAVE) LOCAL WSAVT ADDR  @Z40EPVD 95474040
         L     XRSAVE,WSALPOST-WSAL(,XRSAVE) POST WSA ADDR     @Z40EPVD 95476040
         OI    SDWADPVA-SDWA(R1),SDWAHEX VRA CONTAINS HEX DATA @Z40EPVD 95485040
         SR    R5,R5                     ZERO WORK REG         @Z40EPVD 95488040
         IC    R5,SDWAURAL-SDWA(R1)      GET USED VRA          @Z40EPVD 95491040
         LA    R6,LSAEND-LSAPEXIT(,R0)   SIZE OF DATA          @Z40EPVD 95494040
         ICM   R7,M0011,SDWAVRAL-SDWA(R1) POSSIBLE SIZE        @Z40EPVD 95497040
         CR    R5,R7                     VRA FULL              @Z40EPVD 95498040
         BE    SAVENONE                  YES, SKIP SAVE        @Z40EPVD 95499040
         SR    R7,R5                     AVAILABLE SIZE        @Z40EPVD 95500040
         CR    R6,R7                     WILL MAX DATA FIT     @Z40EPVD 95503040
         BH    STORESUM                  NO, GO STORE SOME     @Z40EPVD 95506040
         EX    R6,MVC4FRR                MOVE DATA TO VRA      @Z40EPVD 95509040
         AR    R5,R6                     UPDATE USED SIZE      @Z40EPVD 95512040
         B     SAVEIT                    GO SAVE IT            @Z40EPVD 95515040
STORESUM EQU   *                         STORE MAX POSSIBLE    @Z40EPVD 95518040
         LR    R2,R1                     SAVE SDWA ADDR        @Z40EPVD 95521040
         LA    R1,ZERO(R5,R1)            RESET REG1 - EX INST  @Z40EPVD 95524040
         EX    R7,MVC4FRR                PUT DATA IN VRA       @Z40EPVD 95527040
         LR    R1,R2                     RESET SDWA ADDR       @Z40EPVD 95533040
         AR    R5,R7                     UPDATE SIZE USED      @Z40EPVD 95536040
SAVEIT   EQU   *                         SAVE SIZE USED        @Z40EPVD 95536540
         STC   R5,SDWAURAL-SDWA(R1)      DITTO                 @Z40EPVD 95538040
*/* P CLEAR TEMP AND EXT SAVE AREA IN USE FLAGS */                      95539040
SAVENONE EQU   *                         VRA FULL LABEL        @Z40EPVD 95540040
         NI    LSAFLGS-LSA(XRSAVE),XFF-EXTSA-PEXITSA  NOT USED @Z40EPVD 95541040
*/*NOTREF: S SETRP: RECORD, DUMP, PERC*/                                95542040
NOTREF   EQU   *                         PREPARE TO EXIT       @Z40EPVD 95545040
         SETRP RECORD=YES,RC=0,DUMP=YES,RECPARM=MODCID         @Z40EPVD 95547040
*/* R RETURN*/                                                          95551040
         BR    R14                       RETURN TO RTM         @Z40EPVD 95554040
MVC4FRR  MVC   SDWAVRA-SDWA(1,R1),LSAPEXIT-LSA(XRSAVE) SAVE    @Z40EPVD 95557040
MODCID   DC    CL24'IGC001  IGC002  EXECBFRR' MOD CSECT FRR ID @Z40EPVD 95558040
         DROP  R12                       DROP BASE                      95559040
*/* POSTR: END*/                                                        95561040
         EJECT                                                          95563040
*/*EXITCD: CHART*/                                                      95564040
*     ENTRY POINT - IEA0PT0E                                   @Z40EPVD 95566040
         SPACE                                                          95569040
IEA0PT0E EQU   *                         IDENTIFY/DELETE EXITS @Z40EPVD 95570040
         USING *,XRBASE                                        @Z40EPVD 95571040
*/* E IEA0PT0E*/                                                        95575040
*    IEA0PT0E - IDENTIFIES/DELETES POST EXIT ROUTINE ADDRESSES @Z40EPVD 95578040
*               FROM THE POST EXIT ROUTINE QUEUE (ASXBPT0E)    @Z40EPVD 95581040
         SPACE                                                          95584040
*               REGISTER USAGE                                 @Z40EPVD 95587040
*                 0 - FUNCTION CODE AND GET FREE LENGTH        @Z40EPVD 95589040
*                 1,11 - POST EXIT ROUTINE ADDR                @Z40EPVD 95591040
*                 3,6 - WORK REGS                              @Z40EPVD 95592040
*                 4 - TCB ADDRESS                              @Z40EPVD 95593040
*                 7 - ASCB ADDRESS                             @Z40EPVD 95595040
*                 8 - ASXB ADDRESS                             @Z40EPVD 95597040
*                 9 - POST EXIT QUEUE HEADER OR ACTIVE BLOCK   @Z40EPVD 95599040
*                 12 - BASE REG                                @Z40EPVD 95600040
*                 13 - POST WSA ADDRESS                        @Z40EPVD 95601040
*                 14,15 - GETMAIN/FREEMAIN INTERFACE REGS      @Z40EPVD 95602040
         SPACE 2                                                        95614040
*/* P GET ADDRESS OF LOCAL SAVE AREA - SAVE REGS*/                      95617040
         L     XRBASE,PSAAOLD           CURRENT ASCB ADDR      @Z40EPVD 95620040
         L     XRBASE,ASCBASXB-ASCB(,XRBASE) ASXB ADDR         @Z40EPVD 95623040
         L     XRBASE,ASXBSPSA-ASXB(,XRBASE) LOCAL WSAVT ADDR  @Z40EPVD 95626040
         L     XRBASE,WSALPOST-WSAL(,XRBASE) POST WSA ADDR     @Z40EPVD 95629040
         STM   R0,R14,LSAMAIN-LSA(XRBASE) SAVE CALLERS REGS    @Z40EPVD 95632040
         LR    R13,XRBASE               RETAIN WSA ADDR        @Z40EPVD 95635040
         BALR  R12,R0                   ESTAB BASE REG         @Z40EPVD 95638040
         USING *,R12                    ESTAB ADDRESSABILITY   @Z40EPVD 95640040
*/* P INIT MAINLINE REGS*/                                              95644040
         L     R7,PSAAOLD               CURRENT ASCB ADDR      @Z40EPVD 95647040
         L     R8,ASCBASXB-ASCB(,R7)    ASXB ADDR              @Z40EPVD 95650040
         L     R9,ASXBPT0E-ASXB(,R8)    POST EXIT QUEUE HEADER @Z40EPVD 95653040
         LR    R11,R1                   SAVE EXIT ROUTINE ADDR @Z40EPVD 95656040
         L     R4,ASXBFTCB-ASXB(,R8)    NEED A TCB ADDR        @Z40EPVD 95659040
*/* D (YES,CREATE,NO,) EXIT CREATION REQUEST*/                          95662040
         LA    R3,CCODE                 GET CREATE CODE        @Z40EPVD 95663040
         CR    R0,R3                    CREATE REQUEST         @Z40EPVD 95665040
         BE    CREATE                   YES, GO PROCESS        @Z40EPVD 95668040
*/* D (YES,DELETE,NO,) EXIT DELETION REQUEST*/                          95671040
         LA    R3,DCODE                 GET DELETE CODE        @Z40EPVD 95672040
         CR    R0,R3                    DELETE REQUEST         @Z40EPVD 95674040
         BE    DELETE                   YES, GO PROCESS        @Z40EPVD 95675040
*/* P ABEND REASON CODE - 0*/                                           95677040
         LA    R6,RC0                   SET ABEND REASON CODE  @Z40EPVD 95680040
*/*AB702: R ABEND 702*/                                                 95683040
AB702    EQU   *                        ABEND CALLER           @Z40EPVD 95684040
         L     R1,ABNDC702              GET 702 ABEND CODE     @Z40EPVD 95689040
         LR    R15,R6                   ESTABLISH REASON CODE  @Z40EPVD 95690040
         SVC   ABENINST                 ABEND                  @Z40EPVD 95692040
*/*CREATE: S GETMAIN: GET 8 BYTES FROM SUBPOOL 255*/                    95695040
CREATE   EQU   *                        PROCESS CREATE REQUEST @Z40EPVD 95698040
         LA    R0,EIGHT                 PRIME LENGTH - 8       @Z40EPVD 95701040
         GETMAIN RU,LV=(0),SP=255,BRANCH=YES,RELATED=(GOTEXIT) @Z40EPVD 95704040
*/* P INITIALIZE EXIT ADDRESS IN BLOCK*/                                95710040
         ST    R11,FOUR(R1)             INIT EXIT ADDR         @Z40EPVD 95713040
*/* P (,PT0EDONE) PLACE BLOCK ON TOP OF POST EXIT QUEUE*/               95716040
         ST    R9,ZERO(,R1)             CURRENT HEADER INTO BLK@Z40EPVD 95719040
         ST    R1,ASXBPT0E-ASXB(,R8)    POINT HEAD TO NEW BLK  @Z40EPVD 95722040
         B     PT0EDONE                 GO EXIT                @Z40EPVD 95725040
*/*DELETE: D (NO,AB702RC4,YES,) ANY MORE EXITS*/                        95728040
DELETE   EQU   *                        PROCESS DELETE REQUEST @Z40EPVD 95731040
         LA    R10,ASXBPT0E-ASXB(,R8)   GET HEADER ADDR        @Z40EPVD 95732040
DELLOOP  EQU   *                        LOOP LABEL             @Z40EPVD 95733040
         LTR   R9,R9                    ANY MORE EXITS         @Z40EPVD 95734040
         BZ    AB702RC4                 NO, GO ABEND           @Z40EPVD 95737040
*/* D (YES,GOTEXIT,NO,) EXIT ADDRESSES MATCH*/                          95743040
         C     R11,FOUR(R9)             EXIT ADDRESSES MATCH   @Z40EPVD 95845040
         BE    GOTEXIT                  YES, EXIT LOOP         @Z40EPVD 95845440
*/* P (,DELETE) GET ADDR OF NEXT BLOCK*/                                95845840
         LR    R10,R9                   NO, SAVE CURRENT ADDR  @Z40EPVD 95846240
         L     R9,ZERO(,R9)             GET NEXT BLOCK ADDR    @Z40EPVD 95846640
         B     DELLOOP                  LOOP BACK              @Z40EPVD 95847040
*/*AB702RC4: P (,AB702) SET REASON CODE TO 4*/                          95847440
AB702RC4 LA    R6,RC4                   SET RC TO 4            @Z40EPVD 95847840
         B     AB702                    GO ABEND               @Z40EPVD 95847940
*/*GOTEXIT: P REMOVE BLOCK FROM QUEUE*/                                 95848040
GOTEXIT  EQU   *                        FOUND BLK TO DELETE    @Z40EPVD 95848140
         L     R6,ZERO(,R9)             GET FORWARD PTR        @Z40EPVD 95848240
         ST    R6,ZERO(,R10)            CHAIN AROUND SUBJECT   @Z40EPVD 95848640
*/* S FREEMAIN: FREE BLOCK STORAGE*/                                    95849040
         LA    R0,EIGHT                 PRIME LENGTH - 8       @Z40EPVD 95849440
         FREEMAIN RU,LV=(0),A=(R9),SP=255,BRANCH=YES,RELATED=(CREATE)   95849840
*/*PT0EDONE: P RESTORE CALLERS REGS*/                                   95850640
PT0EDONE EQU   *                        EXIT CODE              @Z40EPVD 95850840
         LM    R0,R14,LSAMAIN-LSA(R13)  RESET CALLERS REGS     @Z40EPVD 95851040
*/* R RETURN*/                                                          95851440
         BR    R14                      RETURN TO CALLER       @Z40EPVD 95851840
         SPACE                                                          95852240
         DS    0F                       FULL WORD ALIGN        @Z40EPVD 95852440
ABNDC702 DC    XL4'80702000'            ABEND CODE 702         @Z40EPVD 95852640
*/*EXITCD: END*/                                                        95853640
         TITLE 'IEAVSY50.. ..LOCAL.SAVE.AREA'                           95855640
LSA      DSECT                                                          95856240
LSAMAIN  DS    0F                     MAIN SAVE AREA           @Z40EPVD 95856840
         DS    16F                    NORMAL SAVE AREA         @ZA30491 95857540
LSAPEXI2 DS    0F                     ADDITION TO POST EXT S.A.@ZA30491 95857640
         DS    F                      SLOT FOR REG 12          @ZA30491 95857740
         DS    F                      SLOT FOR REG 13          @ZA30491 95857840
LSAPEXIT DS    0F                     POST EXIT SAVE AREA      @Z40EPVD 95858240
         DS    4F                     EXIT INTERFACE SAVE AREA @Z40EPVD 95859840
LSAFLGS  DS    B                      POST FLAGS BYTES         @Z40EPVD 95860440
EXTSA    EQU   X'80'                  EXT SAVE AREA IN USE     @Z40EPVD 95861040
PEXITSA  EQU   X'40'                  POST EXIT SA IN USE      @Z40EPVD 95861640
LSARES1  DS    B                      RESERVED                 @Z40EPVD 95862240
LSARES2  DS    B                      RESERVED                 @Z40EPVD 95862840
LSARES3  DS    B                      RESERVED                 @Z40EPVD 95863440
LSAXITEP DS    1F                     EXIT ENTRY POINT         @Z40EPVD 95863540
LSAEXT   DS    0F                     EXTENDED SAVE AREA       @Z40EPVD 95863740
         DS    15F                    REGS 0-14                @Z40EPVD 95864140
LSAEND   DS    0B                     END OF WSA               @Z40EPVD 95864740
         TITLE 'IEAVSY50....ECB'                                        95865040
         IHAECB EXT=YES                                                 95875040
         TITLE 'IEAVSY50....EVNT'                                       95885040
         IHAEVNT                                                        95895003
         TITLE 'IEAVSY50....CSCB'                                       95945040
CSCB     DSECT                                                    20002 95995001
         IEECHAIN                                                 20002 96045001
         TITLE 'IEAVSY50....RMPL '                                      96047040
         IHARMPL                                                        96049002
         TITLE 'IEAVSY50....RTCA'                                       96055040
         IHASDWA                                                        96065002
         TITLE 'IEAVSY50....CVT'                                        96095040
         CVT   DSECT=YES                                                96145002
         TITLE 'IEAVSY50....JSCB'                                       96245040
         IEZJSCB                                                  20002 96295001
         TITLE 'IEAVSY50....ASCB'                                       96305040
         IHAASCB                                                        96315002
         TITLE 'IEAVSY50....ASXB'                                       96317040
         IHAASXB                                                        96319002
         TITLE 'IEAVSY50....SRB'                                        96319440
         IHASRB                                                         96321002
XMASCB   DS    F                   ASCB ADDR                            96322040
XMECB    DS    F                   ECB ADDR                             96323040
XMERRET  DS    F                   ERROR RETURN ADDR                    96323802
XMCCODE  DS    F                   ECBKEY BIT; COMPLETION CODE @ZA15373 96323940
XMPQ     DS    F                   ORIGINATING ASCB XMP Q               96324340
XMECBKEY DS    B                   ECB STORAGE KEY FOR VAL CHK @ZA15373 96324440
         DS    BL3                 RESERVED                    @ZA15373 96324540
SRBLENTH EQU   *-SRBSECT           LENGTH OF POST SRB                   96324840
         TITLE 'IEAVSY50....FIXED LOW CORE'                             96325040
         IHAPSA                                                         96335002
         TITLE 'IEAVSY50....LCCA'                                       96335440
         IHALCCA                                                        96335802
         TITLE 'IEAVSY50....FRRSTACK'                                   96336240
         IHAFRRS                                                        96336602
         TITLE 'IEAVSY50....GLOBAL SAVE AREA'                           96336740
         IHAWSAVT CLASS=GLOBAL                                          96336940
         TITLE 'IEAVSY50....WSAVT'                                      96337040
         IHAWSAVT                                                       96339002
         TITLE 'IEAVSY50....ASVT'                                       96341040
         IHAASVT                                                        96343002
         TITLE 'IEAVSY50....RB'                                         96345040
         IHARB                                                          96405002
         TITLE 'IEAVSY50....TCB'                                        96445040
         IKJTCB                                                         96495001
         END                                                            97145001
