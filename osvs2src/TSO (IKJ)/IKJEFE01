         TITLE ' IKJEFE01 - EXEC CONTROL MODULE'                        00010000
         LCLA  &T,&SPN                                            0001  00020000
.@001    ANOP                                                     0001  00030000
IKJEFE01 CSECT ,                                                  0001  00040000
         ST    @E,12(0,@D)                                        0001  00050000
         ST    @0,20(0,@D)                                        0001  00060000
         STM   @2,@C,28(@D)                                       0001  00070000
         BALR  @B,0                                               0001  00080000
@PSTART  DS    0H                                                 0001  00090000
         USING @PSTART+00000,@B                                   0001  00100000
         LR    @C,@1                                              0001  00110000
         L     @0,@SIZ001                                         0001  00120000
         GETMAIN  R,LV=(0)                                        0001  00130000
         XR    @C,@1                                              0001  00140000
         XR    @1,@C                                              0001  00150000
         XR    @C,@1                                              0001  00160000
         USING @DATD+00000,@C                                     0001  00170000
         L     @0,20(0,@D)                                        0001  00180000
         XC    @TEMPS(@L),@TEMPS                                  0001  00190000
         ST    @D,@SAV001+4                                       0001  00200000
         LA    @F,@SAV001                                         0001  00210000
         ST    @F,8(0,@D)                                         0001  00220000
         LR    @D,@F                                              0001  00230000
&SPN     SETA  1                                                        00240000
         DS    0H                                                       00250000
*         CPPLPTR = R1;                       /* SET POINTER TO CPPL  * 00260000
         ST    @1,E01DATDF+232                                    0070  00270000
*         CLARE = ''B;                        /* INITIALIZE SWITCHES    00280000
*                                                 ZERO                  00290000
*                                                     OUT               00300000
*                                                        WORK           00310000
*                                                           AREAS       00320000
*                                                INITIALIZE             00330000
*                                                  ATAB AND             00340000
*                                                   FTAB POINTERS       00350000
*                                                    AND                00360000
*                                                     WORKAREAS       * 00370000
         XC    CLARE(44),CLARE                                    0071  00380000
*         RETCDAR = KON0;                     /* RET CDE AREA   Y01676* 00390000
         LH    @F,KON0                                            0072  00400000
         ST    @F,E01DATDF+280                                    0072  00410000
*         CBUFLSAV  = CBUFLNG;                /* SAVE CMD BFR LENGTH  * 00420000
         L     @8,E01DATDF+232                                    0073  00430000
         L     @8,0(0,@8)          CBUFPTR                        0073  00440000
         MVC   E01DATDF+358(2),0(@8)                              0073  00450000
*         RESTRICT (R2,R4);                   /* RESTRICT REGS        * 00460000
*         STPRM(1)  = R12;                    /* SAVE BSL BASE REG    * 00470000
         ST    @C,E01DATDF+236                                    0075  00480000
*         STPRM(2)  = R13;                    /* SAVE BSL SAVE REG    * 00490000
         ST    @D,E01DATDF+240                                    0076  00500000
*         STPRM(3)  = R11;                    /* SAVE BSL BASE REG    * 00510000
         ST    @B,E01DATDF+244                                    0077  00520000
*         R4  = ADDR(STPRM(1));               /* POINT TO STAE PARMS  * 00530000
         LA    @4,E01DATDF+236                                    0078  00540000
*         R2 = ADDR(SHTDWN);                  /* STAE EXIT ADDRESS    * 00550000
         LA    @2,SHTDWN                                          0079  00560000
*         GEN;                                                          00570000
         MVC   RSTAE,STAEL                  MOVE LIST FORM OF STAE      00580000
         LA    R1,RSTAE                     LOAD ADDRESS OF LIST FORM   00590000
         STAE  (R2),PARAM=(R4),MF=(E,(1))   ABEND EXIT MACRO            00600000
         LTR   R15,R15                      TEST RETURN CODE            00610000
         BNZ   E01CNT40                     BRANCH IF UNSUCCESSFUL      00620000
         DS    0H                                                       00630000
*         RELEASE (R2,R4);                    /* RELEASE  REGS        * 00640000
*  /*                                                                 * 00650000
*         PPLPTR  = ADDR(CBCOR);              /* INITIALIZE PTR TO      00660000
*                                                  SERVICE ROUTINE      00670000
*                                                   PARM BLOCK        * 00680000
         LA    @F,E01DATDF+252                                    0082  00690000
         ST    @F,E01DATDF+248                                    0082  00700000
*         RESTRICT (R2);                                                00710000
*         GEN (LA    R2,DCBPD);               /* MOVE DCB             * 00720000
         LA    R2,DCBPD                                                 00730000
         DS    0H                                                       00740000
*         DCBAR = DCBP;                       /* MODEL TO DYNAMIC CORE* 00750000
         MVC   E01DATDF(88),0(@2)                                 0085  00760000
*         RELEASE (R2);                                                 00770000
*         GMNMAX  = KON2048;                  /* SET MAX FOR GETMAIN  * 00780000
         LH    @F,KON2048                                         0087  00790000
         ST    @F,E01DATDF+144                                    0087  00800000
*         GMNMIN  = KON48;                    /* SET MIN FOR GETMAIN  * 00810000
         LH    @F,KON48                                           0088  00820000
         ST    @F,E01DATDF+140                                    0088  00830000
*         GEN;                                                          00840000
         MVC   RCLO,CLOL                     MOVE LIST FORM OF CLOSE    00850000
         DS    0H                                                       00860000
*                                                                       00870000
* /******************************************************************** 00880000
**/* P SET UP INTERFACE TO SCANNING ROUTINE */                          00890000
**/* D (YES,,NO,%D1) IS THIS AN IMPLICIT EXEC? */                       00900000
**/* S IKJSCAN: LINK TO COMMAND SCAN */                                 00910000
**/* P (,E01CNT03) STORE MEMBERNAME IN E01DATDF (SEE PROLOGUE) */       00920000
* /******************************************************************** 00930000
*         /************************************************************ 00940000
*         /*SETTUP INTERFACE AND LINK TO COMMAND SCAN TO              * 00950000
*         /*THE FIRST WORD IN THE COMMAND BUFFER                      * 00960000
*         /************************************************************ 00970000
*         CSPLFLG  = ADDR(SRECB);             /* SET FLAGS TO 0       * 00980000
         LA    @F,E01DATDF+276                                    0090  00990000
         L     @9,CSPLPTR                                         0090  01000000
         ST    @F,12(0,@9)                                        0090  01010000
*         CSPLUPT  = CPPLUPT;                 /* INITIALIZE           * 01020000
         L     @6,E01DATDF+232                                    0091  01030000
         MVC   0(4,@9),4(@6)                                      0091  01040000
*         CSPLECB  = ADDR(SRECB);             /*  POINTER TO ECB      * 01050000
         LA    @F,E01DATDF+276                                    0092  01060000
         ST    @F,8(0,@9)                                         0092  01070000
*         SRECB = KON0;                       /*  ECB                 * 01080000
         LH    @F,KON0                                            0093  01090000
         ST    @F,E01DATDF+276                                    0093  01100000
*         CSPLECT  = CPPLECT;                 /*  POINTER TO ECT      * 01110000
         MVC   4(4,@9),12(@6)                                     0094  01120000
*         CSPLCBUF  = CPPLCBUF;               /* POINTER TO CMD BUFFER* 01130000
         MVC   20(4,@9),0(@6)                                     0095  01140000
*         CSPLOA  = ADDR(SP78ADDR);           /* SET ADDR OF ANSWER     01150000
*                                                  AREA               * 01160000
         LA    @F,E01DATDF+156                                    0096  01170000
         ST    @F,16(0,@9)                                        0096  01180000
*         R1  = PPLPTR;                       /* POINT TO PARM LIST   * 01190000
         L     @1,E01DATDF+248                                    0097  01200000
*         IF CBUFOFF = KON0                   /* IF THIS IS AN IMPLI- * 01210000
*           THEN                              /* CIT INVOCATION       * 01220000
         LH    @F,KON0                                            0098  01230000
         MVC   @TEMP2+2(2),2(@8)                                  0098  01240000
         C     @F,@TEMP2                                          0098  01250000
         BC    07,@9FF                                            0098  01260000
*             DO;                                                       01270000
*               GEN(LINK  EP=IKJSCAN);        /* LINK TO CMD SCAN     * 01280000
         LINK  EP=IKJSCAN                                               01290000
         DS    0H                                                       01300000
*               E01SW1 = '1'B;                /* SET IMPLICIT SW ON   * 01310000
         OI    E01DATDF+202,B'10000000'                           0101  01320000
*               MMNAMAR  = IMPMEM(1:CSOALNM); /* MOVE MEMBER NAME     * 01330000
         L     @7,CSPLPTR                                         0102  01340000
         L     @7,16(0,@7)         CSOAPTR                        0102  01350000
         LH    @4,4(0,@7)                                         0102  01360000
         BCTR  @4,0                                               0102  01370000
         L     @5,0(0,@7)          CSOA                           0102  01380000
         LR    @E,@5                                              0102  01390000
         LA    @A,E01DATDF+96                                     0102  01400000
         MVI   0(@A),C' '                                         0102  01410000
         MVC   1(007,@A),0(@A)                                    0102  01420000
         EX    @4,@MVC                                            0102  01430000
*               GOTO E01CNT03;                /* BYPASS               * 01440000
         BC    15,E01CNT03                                        0103  01450000
*             END;                            /*   DSNAME PARSE       * 01460000
*                                                                       01470000
* /******************************************************************** 01480000
**/*%D1: P REDUCE BUFFER LENGTH-SO ONLY PARSE DSNAME*/                  01490000
**/*E01SCN03: P SET UP INTERFACE TO PARSE */                            01500000
**/* S IKJPARS: LINK TO PARSE FOR DATA SET NAME */                      01510000
**/* D (NO,,YES,E01CNT03:LT) WERE PARMS CORRECT ? */                    01520000
**/* P (,E01MML05) REQUEST TERMINATION */                               01530000
* /******************************************************************** 01540000
*         /************************************************************ 01550000
*         /*FOLLOWING CODE HANDLES EXPLICIT INVOCATIONS               * 01560000
*         /*BY INTERFACING WITH PARSE TO OBTAIN THE DSNAME            * 01570000
*         /************************************************************ 01580000
*         TEM01 = CBUFLNG - KON4;             /* OBTAIN NO. OF BYTES    01590000
*                                                TO BE SCANNED        * 01600000
@9FF     LH    @F,KON4                                            0105  01610000
         LCR   @F,@F                                              0105  01620000
         L     @8,E01DATDF+232                                    0105  01630000
         L     @8,0(0,@8)          CBUFPTR                        0105  01640000
         MVC   @TEMP2+2(2),0(@8)                                  0105  01650000
         A     @F,@TEMP2                                          0105  01660000
         ST    @F,TEM01                                           0105  01670000
*          DO TEM02 = CBUFOFF + KON1 TO TEM01;/* REDUCE THE             01680000
*                                                BUFFER LENGTH -AVOID * 01690000
         LH    @F,KON1                                            0106  01700000
         MVC   @TEMP2+2(2),2(@8)                                  0106  01710000
         A     @F,@TEMP2                                          0106  01720000
         BC    15,@DO9FD                                          0106  01730000
*           IF CBUFDATA(TEM02) = KBLNK |      /* PARSING       PARMS  * 01740000
*              CBUFDATA(TEM02) = KTAB  |      /* OTHER THAN DSNAME TO * 01750000
*              CBUFDATA(TEM02) =  KCOM        /* AVOID UNWANTED MSGS  * 01760000
*             THEN                                                      01770000
@DO9FE   L     @8,TEM02                                           0107  01780000
         L     @9,E01DATDF+232                                    0107  01790000
         L     @9,0(0,@9)          CBUFPTR                        0107  01800000
         LA    @A,3(@8,@9)                                        0107  01810000
         CLC   0(1,@A),KBLNK                                      0107  01820000
         BC    08,@9FA                                            0107  01830000
         CLC   0(1,@A),KTAB                                       0107  01840000
         BC    08,@9F9                                            0107  01850000
         CLC   0(1,@A),KCOM                                       0107  01860000
         BC    07,@9F8                                            0107  01870000
*               GOTO  E01SCN03;               /* FROM PARSE           * 01880000
         BC    08,E01SCN03                                        0108  01890000
*         END;                                                          01900000
* E01SCN03: CBUFLNG = TEM02 + KON3;           /* SET NEW BUFFER LENGTH* 01910000
@9F8     L     @F,TEM02                                           0109  01920000
         AH    @F,@D1                                             0109  01930000
@DO9FD   ST    @F,TEM02                                           0109  01940000
         C     @F,TEM01                                           0109  01950000
         BC    12,@DO9FE                                          0109  01960000
E01SCN03 LH    @F,KON3                                            0110  01970000
         A     @F,TEM02                                           0110  01980000
         L     @8,E01DATDF+232                                    0110  01990000
         L     @8,0(0,@8)          CBUFPTR                        0110  02000000
         STH   @F,0(0,@8)                                         0110  02010000
*         PPLANS  = ADDR(PDLPTR);             /* SET POINTER TO ANS     02020000
*                                                PLACE POINTER        * 02030000
         LA    @F,E01DATDF+308                                    0111  02040000
         L     @9,E01DATDF+248                                    0111  02050000
         ST    @F,16(0,@9)                                        0111  02060000
*         PPLPCL = ADDR(DSNMPARS);            /* ADDRESS OF PCL       * 02070000
         L     @6,@V1              ADDRESS OF DSNMPARS            0112  02080000
         ST    @6,12(0,@9)                                        0112  02090000
*         R1  = PPLPTR;                       /* SET POINTER TO PARM    02100000
*                                                BLOCK                * 02110000
         L     @1,E01DATDF+248                                    0113  02120000
*         GEN(LINK  EP=IKJPARS            LINK TO PARSE);               02130000
         LINK  EP=IKJPARS            LINK TO PARSE                      02140000
         DS    0H                                                       02150000
*         CNVA = R15;                         /* SAVE RETURN CODE     * 02160000
         STH   @F,E01DATDF+200                                    0115  02170000
*         IF CNVA ^= KON0                     /* IF CORRECT PARMS     * 02180000
*           THEN                              /* COULD NOT BE OBTAINED* 02190000
         LH    @F,KON0                                            0116  02200000
         CH    @F,E01DATDF+200                                    0116  02210000
         BC    08,@9F7                                            0116  02220000
*             IF CNVA = KON4                  /* CHECK IF IT WAS DUE  * 02230000
*               THEN                          /* BEING IN NO PROMPT   * 02240000
         LH    @F,KON4                                            0117  02250000
         CH    @F,E01DATDF+200                                    0117  02260000
         BC    07,@9F6                                            0117  02270000
*                 DO;                         /* MODE - IF SO GO TO   * 02280000
*                   E01SW9 = '1'B;            /* TERMINATE WITHOUT    * 02290000
         OI    E01DATDF+203,B'10000000'                           0119  02300000
*                   GOTO E01CNT16;            /* PUTTING OUT MESSAGE  * 02310000
         BC    15,E01CNT16                                        0120  02320000
*                 END;                                                  02330000
*               ELSE                          /* OTHERWISE            * 02340000
*                 DO;                         /* INDICATE THE SYSTEM    02350000
*                                                ERROR MESSAGE        * 02360000
*                   LVL1NO = KON24;           /* FOR FIRST LEVEL      * 02370000
@9F6     MVC   E01DATDF+304(2),KON24                              0123  02380000
*                   LVL2NO = KON2;            /* AND PARSE RETURN     * 02390000
         MVC   E01DATDF+306(2),KON2                               0124  02400000
*                   VARSGLNG = KONX00;        /* CODE FOR SECOND LEVEL* 02410000
         MVC   E01DATDF+296(1),KONSTRUC                           0125  02420000
*                   ADPTR1 = KON0;            /* INDICATE TERMINATION * 02430000
         LH    @F,KON0                                            0126  02440000
         ST    @F,E01DATDF+88                                     0126  02450000
*                   GOTO E01MML10;            /* AFTER THE MSG AND GO * 02460000
         BC    15,E01MML10                                        0127  02470000
*                 END;                        /* TO PUT MESSAGE       * 02480000
*         PDLPTR = PDLPTR + KON8;             /* UPDATE PAST PDL CHAIN  02490000
*                                                WORDS                * 02500000
@9F5     EQU   *                                                  0129  02510000
@9F7     LH    @F,KON8                                            0129  02520000
         A     @F,E01DATDF+308                                    0129  02530000
         ST    @F,E01DATDF+308                                    0129  02540000
*         CBUFLNG = CBUFLSAV;                 /* RESTORE BFR LENGTH   * 02550000
         L     @8,E01DATDF+232                                    0130  02560000
         L     @8,0(0,@8)          CBUFPTR                        0130  02570000
         MVC   0(2,@8),E01DATDF+358                               0130  02580000
*                                                                       02590000
* /******************************************************************** 02600000
**/*E01CNT03: S IKJEFE05: OBTAIN SYMBOLIC PARM DEFINITION */            02610000
**/* D (NO,,YES,%D2) IS THIS AN EXPLICIT EXEC ?*/                       02620000
**/* M RELEASE PARSE DESCRIPTOR LIST */                                 02630000
**/*%D2: D (YES,E01CNT16:BT,NO,) HAS AN ERROR OCCURRED? */              02640000
**/*E01SPD95: D (NO,E01MML05,YES,) DOES # OF POS ON INVO = # ON PROC?*/ 02650000
* /******************************************************************** 02660000
*         /************************************************************ 02670000
*         /*FOLLOWING CODE INVOKES MODULE IKJEFE05 TO DEFINE THE      * 02680000
*         /*SYMBOLIC PARAMETERS OF THE PROCEDURE VIA                  * 02690000
*         /*THE 'PROC' STATEMENT AND CHECKS FOR A SUCCESSFULL         * 02700000
*         /*DEFINITION                                                * 02710000
*         /************************************************************ 02720000
* E01CNT03:    ;                                                        02730000
*         R1 = ADDR(E01DATDF);                /* SET REG1 POINTING TO * 02740000
E01CNT03 LA    @1,E01DATDF                                        0132  02750000
*         CALL IKJEFE05;                      /* PARM BLOCK AND CALL    02760000
*                                                E05 TO OBTAIN SYM.     02770000
*                                                PARM DEFINITION      * 02780000
         L     @F,@V2              ADDRESS OF IKJEFE05            0133  02790000
         BALR  @E,@F                                              0133  02800000
*         RESTRICT (R2,R3,R4,R5);                                       02810000
*         IF E01SW1 = '0'B                    /* IF THIS IS EXPLICIT  * 02820000
*           THEN                              /*  EXEC                * 02830000
         TM    E01DATDF+202,B'10000000'                           0135  02840000
         BC    05,@9F4                                            0135  02850000
*             DO;                             /*   THEN               * 02860000
*               PDLPTR = PDLPTR - KON24;      /*  RESET PDL POINTER   * 02870000
         L     @F,E01DATDF+308                                    0137  02880000
         SH    @F,KON24                                           0137  02890000
         ST    @F,E01DATDF+308                                    0137  02900000
*               R1 = ADDR(PDLPTR);            /* REG2 POINTS TO PDL     02910000
*                                                POINTER              * 02920000
         LA    @1,E01DATDF+308                                    0138  02930000
*               GEN(IKJRLSA (R1));            /* RELEASE PDL          * 02940000
         IKJRLSA (R1)                                                   02950000
         DS    0H                                                       02960000
*             END;                            /*                      * 02970000
*         R1 = R3;                            /* SET R1 POINTING TO     02980000
*                                                FTAB START           * 02990000
@9F4     LR    @1,@3                                              0141  03000000
*         IF E01SW9 = '1'B                    /* IF AN ERROR OCCURRED * 03010000
*           THEN                              /*  GO TO START         * 03020000
         TM    E01DATDF+203,B'10000000'                           0142  03030000
*             GOTO E01CNT16;                  /*   TERMINATION        * 03040000
         BC    01,E01CNT16                                        0143  03050000
* E01SPD95: ;                                 /* RETURN POINT IF NO   * 03060000
*         IF POSSPC ^= POSCNT                 /* MORE PARAMETERS ARE    03070000
*                                                FOUND - IF NUMBER OF   03080000
*                                                POSITIONALS FOUND IS   03090000
*                                                NOT EQUAL TO NUMBER    03100000
*                                                SPECIFIED IT IS AN     03110000
*                                                ERROR                * 03120000
*           THEN                              /* THEN                 * 03130000
E01SPD95 L     @F,E01DATDF+132                                    0145  03140000
         C     @F,E01DATDF+168                                    0145  03150000
         BC    08,@9F3                                            0145  03160000
*             DO;                             /*  SET UP PROPER       * 03170000
*               LVL1NO = KON9;                /*  INDICATORS FOR THE  * 03180000
         MVC   E01DATDF+304(2),KON9                               0147  03190000
*               LVL2NO = KON1;                /*  MESSAGE MODULE      * 03200000
         MVC   E01DATDF+306(2),KON1                               0148  03210000
*               VARSGLN2 = KONX00;            /* NO 2ND LVL VARIABLE  * 03220000
         MVC   E01DATDF+300(1),KONSTRUC                           0149  03230000
*               VARSGLNG = KONX00;            /* NO 1ST LVL VARIABLE  * 03240000
         MVC   E01DATDF+296(1),KONSTRUC                           0150  03250000
*               IF ABLK1 = KON0               /* IF THERE IS NO ATAB  * 03260000
*                 THEN                        /*  OR FTAB BYPASS      * 03270000
         LH    @F,KON0                                            0151  03280000
         C     @F,E01DATDF+284                                    0151  03290000
         BC    07,@9F2                                            0151  03300000
*                   ADPTR1 = ADDR(E01CNT07);  /* HOUSEKEEPING    M1848* 03310000
         LA    @F,E01CNT07                                        0152  03320000
         ST    @F,E01DATDF+88                                     0152  03330000
         BC    15,@9F1                                            0153  03340000
*                 ELSE                        /* ELSE SET HOUSEKEEPING* 03350000
*                   ADPTR1 = ADDR(E01SPD96);  /*  RETURN ADDRESS      * 03360000
@9F2     LA    @F,E01SPD96                                        0153  03370000
         ST    @F,E01DATDF+88                                     0153  03380000
*               GOTO E01MML10;                /*  AND EXIT TO PUT OUT * 03390000
         BC    15,E01MML10                                        0154  03400000
*             END;                            /*  MESSAGE AND TERM.   * 03410000
*                                                                       03420000
* /******************************************************************** 03430000
**/*E01SPD96: D (YES,,NO,E01CNT07) IS THERE AN ATAB AND/OR FTAB? */     03440000
**/* D (YES,,NO,E01CNT05) IS THERE 8 UNUSED BYTES IN ATAB? */           03450000
**/* S IKJEFE03: FREE RESIDUAL UNUSED IN ATAB */                        03460000
**/*E01CNT05: P CALCULATE ATAB AND FTAB LENGTH */                       03470000
**/*E01CNT07: D (NO,,YES,E01CNT16:LT) WAS THERE AN ERROR? */            03480000
**/* S IKJEFE02: PERFORM PARSING OF INVOCATION STMT */                  03490000
**/* D (NO,,YES,E01CNT16:LT) WAS AN ERROR IN PARSING? */                03500000
**/* D (YES,,NO,E01CNT15:LT) IS THERE AN ATAB AND/OR FTAB? */           03510000
* /******************************************************************** 03520000
*         /************************************************************ 03530000
*         /*FOLLOWING CODE PERFORMS HOUSEKEEPING FOR ATAB             * 03540000
*         /*AND FTAB BLOCKS BEFORE  GOING TO MODULE E02.              * 03550000
*         /************************************************************ 03560000
* E01SPD96: IF ATABIND = KON0                 /* IF THERE IS NO ATAB/ * 03570000
*             THEN                            /*   FTAB BYPASS HOUSE- * 03580000
@9F3     EQU   *                                                  0156  03590000
E01SPD96 LH    @F,KON0                                            0156  03600000
         C     @F,E01DATDF+172                                    0156  03610000
*               GOTO E01CNT07;                /*   KEEPING            * 03620000
         BC    08,E01CNT07                                        0157  03630000
*         R5->ATABFLGS = R5->ATABFLGS | KONX20;                         03640000
         OC    4(1,@5),KONSTRUC+2                                 0158  03650000
*                                             /* SET BIT TO INDICATE    03660000
*                                                LAST ELEMENT         * 03670000
*         CNVC  = R5->ATABELNC;               /* ALIGN LENGTH         * 03680000
         MVC   E01DATDF+200(2),5(@5)                              0159  03690000
*         R5 = R5 + CNVA + KON7;              /* UPDATE PTR PAST ELMT*/ 03700000
         LH    @F,KON7                                            0160  03710000
         AH    @F,E01DATDF+200                                    0160  03720000
         AR    @5,@F                                              0160  03730000
*         ATABIND  = R4;                      /* STORE ATAB BLCK ADDR * 03740000
         ST    @4,E01DATDF+172                                    0161  03750000
*         ATABCUR  = R5;                      /* STORE ATAB ELMT ADDR * 03760000
         ST    @5,E01DATDF+176                                    0162  03770000
*         FTABIND  = R1;                      /* STORE FTAB BLCK ADDR * 03780000
         ST    @1,E01DATDF+180                                    0163  03790000
*         FTABCUR  = R2;                      /* STORE FTAB ELMT ADDR * 03800000
         ST    @2,E01DATDF+184                                    0164  03810000
*         IF (R4 + R4->ATABLNG - R5) ^> KON7  /* IF THERE ARE NOT 8   * 03820000
*           THEN                              /* UNUSED BYTES IN ATAB * 03830000
         LCR   @F,@5                                              0165  03840000
         A     @F,8(0,@4)                                         0165  03850000
         AR    @F,@4                                              0165  03860000
         CH    @F,KON7                                            0165  03870000
*             GOTO E01CNT05;                  /* BYPASS FREEMAIN      * 03880000
         BC    12,E01CNT05                                        0166  03890000
*         GEN;                                                          03900000
         LA    5,7(5)               IF NOT ON DOUBLE WRD                03910000
         SRA   5,3                  BOUNDARY                            03920000
         SLA   5,3                  ADJUST STARTING ADDR                03930000
         DS    0H                                                       03940000
*         TSTLNG  = R5;                       /* STORE FOR FREEMAIN     03950000
*                                                ADDRESS              * 03960000
         ST    @5,E01DATDF+136                                    0168  03970000
*         REGSAV(2)  = R1;                    /* SAVE REG1            * 03980000
         ST    @1,E01DATDF+208                                    0169  03990000
*         R1  = ADDR(E01DATDF);               /* SET REG1 POINTING TO   04000000
*                                                PARMS                * 04010000
         LA    @1,E01DATDF                                        0170  04020000
*         R3  = R4 + R4 -> ATABLNG - R5;      /* SET AMT TO BE FREED  * 04030000
         LCR   @F,@5                                              0171  04040000
         A     @F,8(0,@4)                                         0171  04050000
         AR    @F,@4                                              0171  04060000
         LR    @3,@F                                              0171  04070000
*         R4  = KON1;                         /* SET SUBPOOL INDICATOR* 04080000
         LH    @4,KON1                                            0172  04090000
*         E01SW13  = '1'B;                    /* SET FREEMAIN SWITCH  * 04100000
         OI    E01DATDF+203,B'00001000'                           0173  04110000
*         CALL  IKJEFE03;                     /* PERFORM FREEMAIN     * 04120000
         L     @F,@V3              ADDRESS OF IKJEFE03            0174  04130000
         BALR  @E,@F                                              0174  04140000
*         E01SW13  = '0'B;                    /* RESET FREEMAIN SWITCH* 04150000
         NI    E01DATDF+203,B'11110111'                           0175  04160000
*         R1  = REGSAV(2);                    /* RESTORE REG1         * 04170000
         L     @1,E01DATDF+208                                    0176  04180000
*         RELEASE  (R2,R3,R4,R5);                                       04190000
* E01CNT05:   ;                               /* RETURN POINT FROM    * 04200000
*         ATABLNG = ATABCUR - ATABIND;        /*   FREEMAIN SET NEW     04210000
*                                                  ATAB LENGTH        * 04220000
E01CNT05 L     @F,E01DATDF+176                                    0179  04230000
         S     @F,E01DATDF+172                                    0179  04240000
         L     @8,E01DATDF+172                                    0179  04250000
         ST    @F,8(0,@8)                                         0179  04260000
*         FTABDLNG  = FTABCUR - FTABIND;      /* SET NUMBER OF BYTES  * 04270000
         L     @F,E01DATDF+184                                    0180  04280000
         S     @F,E01DATDF+180                                    0180  04290000
         L     @9,E01DATDF+180                                    0180  04300000
         STH   @F,10(0,@9)                                        0180  04310000
* E01CNT07:  ;                                /* IN USE               * 04320000
*         IF E01SW9 = '1'B                    /* IF AN ERROR WAS FOUND* 04330000
*           THEN                              /*  THEN GO TO          * 04340000
E01CNT07 TM    E01DATDF+203,B'10000000'                           0182  04350000
*             GOTO E01CNT16;                  /*  START TERMINATION   * 04360000
         BC    01,E01CNT16                                        0183  04370000
*         R1  = ADDR(E01DATDF);               /* SET PTR TO PARAMETERS  04380000
*                                                USED COMMONLY        * 04390000
         LA    @1,E01DATDF                                        0184  04400000
*         CALL  IKJEFE02;                     /* PERFORM PARSING OF     04410000
*                                                THE INVOCATION STMT  * 04420000
         L     @F,@V4              ADDRESS OF IKJEFE02            0185  04430000
         BALR  @E,@F                                              0185  04440000
*         IF E01SW9 = '1'B  | E01SW11 = '1'B  /* IF AN ERROR OCCURRED * 04450000
*           THEN                              /*  DURING PARSING TAKE * 04460000
         TM    E01DATDF+203,B'10000000'                           0186  04470000
         BC    01,@9F0                                            0186  04480000
         TM    E01DATDF+203,B'00100000'                           0186  04490000
         BC    12,@9EF                                            0186  04500000
*             GOTO     E01CNT16;              /*  ERROR EXIT          * 04510000
         BC    03,E01CNT16                                        0187  04520000
*         IF E01SW3 = '1'B   | ATABIND = KON0 /* IF THERE ARE NO ATAB * 04530000
*           THEN                              /*  FTAB BLOCKS BYPASS  * 04540000
@9EF     TM    E01DATDF+202,B'00100000'                           0188  04550000
         BC    01,@9EE                                            0188  04560000
         LH    @F,KON0                                            0188  04570000
         C     @F,E01DATDF+172                                    0188  04580000
         BC    07,@9ED                                            0188  04590000
*             GOTO E01CNT15;                  /* HOUSEKEEPING         * 04600000
         BC    15,E01CNT15                                        0189  04610000
*                                                                       04620000
* /******************************************************************** 04630000
**/*E01CNT10: D (YES,E01CNT12:LT,NO,E01CNT13:BT) IS THER 8 UNUSED BYTES 04640000
**/*IN FTAB? */                                                         04650000
**/*E01CNT12: S IKJEFE03: FREE RESIDUAL UNUSED IN FTAB */               04660000
**/*E01CNT13: D (YES,,NO,E01CNT10:RT) IS THIS THE LAST FTAB BLOCK? */   04670000
**/*E01CNT15: S IKJEFE03: READ PROC INTO STORAGE WITH PARM SUBST */     04680000
* /******************************************************************** 04690000
*         /************************************************************ 04700000
*         /*THE FOLLOWING CODE RELEASES ANY UNUSED PORTION            * 04710000
*         /*OF THE FTAB BLOCK THEN CALLS IKJEFE03 TO PLACE            * 04720000
*         /*THE PROCEDURE INTO SUB-POOL 78 AND REPLACE                * 04730000
*         /*SYMBOLIC PARAMETERS WITH THEIR VALUES                     * 04740000
*         /************************************************************ 04750000
* E01CNT10: IF FTABLNG - FTABDLNG ^> KON7     /* IF THERE ARE NOT 8   * 04760000
*             THEN                            /* UNUSED BYTES IN FTAB * 04770000
@9ED     EQU   *                                                  0190  04780000
E01CNT10 L     @8,E01DATDF+180                                    0190  04790000
         LH    @F,10(0,@8)                                        0190  04800000
         LCR   @F,@F                                              0190  04810000
         AH    @F,8(0,@8)                                         0190  04820000
         CH    @F,KON7                                            0190  04830000
*               GOTO  E01CNT13;               /* BYPASS FREEMAIN      * 04840000
         BC    12,E01CNT13                                        0191  04850000
*         FTABCUR  = FTABIND + FTABDLNG;      /* POINT TO FIRST UNUSED* 04860000
         LH    @F,10(0,@8)                                        0192  04870000
         A     @F,E01DATDF+180                                    0192  04880000
         ST    @F,E01DATDF+184                                    0192  04890000
*         GEN;                                                          04900000
         TM    FTABCUR+3,X'07'       BYTE IN FTAB                       04910000
         BC    8,E01CNT12            IF NOT ON DOUBLE WRD               04920000
         NI    FTABCUR+3,X'F8'       ADJUST STARTING ADDR               04930000
         L     @E,FTABCUR            CORRESPONDINGLY AND                04940000
         LA    @E,8(@E)              STORE FOR FREEMAIN                 04950000
         ST    @E,FTABCUR            ROUTINE                            04960000
         DS    0H                                                       04970000
* E01CNT12: TEM01 = KON0;                     /* SET SUBPOOL INDICATOR* 04980000
E01CNT12 LH    @F,KON0                                            0194  04990000
         ST    @F,TEM01                                           0194  05000000
*         REGSAV(2)  = R1;                    /* SAVE REG1            * 05010000
         ST    @1,E01DATDF+208                                    0195  05020000
*         RESTRICT  (R3,R4);                                            05030000
*         R1  = ADDR(E01DATDF);               /* SET REG1 POINTING TO   05040000
*                                                PARMS                * 05050000
         LA    @1,E01DATDF                                        0197  05060000
*         R4  = KON1;                         /* SET SUBPOOL INDICATOR* 05070000
         LH    @4,KON1                                            0198  05080000
*         R3  = FTABLNG + FTABIND - FTABCUR;  /* SET AMT TO BE FREED  * 05090000
         L     @3,E01DATDF+184                                    0199  05100000
         LCR   @3,@3                                              0199  05110000
         A     @3,E01DATDF+180                                    0199  05120000
         L     @2,E01DATDF+180                                    0199  05130000
         AH    @3,8(0,@2)                                         0199  05140000
*         TSTLNG  = FTABCUR;                  /* SET ADDRESS          * 05150000
         MVC   E01DATDF+136(4),E01DATDF+184                       0200  05160000
*         E01SW13  = '1'B;                    /* SET FREEMAIN SWITCH  * 05170000
         OI    E01DATDF+203,B'00001000'                           0201  05180000
*         CALL  IKJEFE03;                     /* PERFORM FREEMAIN     * 05190000
         L     @F,@V3              ADDRESS OF IKJEFE03            0202  05200000
         BALR  @E,@F                                              0202  05210000
*         R1  = REGSAV(2);                    /* RESTORE REG1         * 05220000
         L     @1,E01DATDF+208                                    0203  05230000
*         RELEASE  (R3,R4);                                             05240000
*         E01SW13  = '0'B;                    /* RESET FREEMAIN SWITCH* 05250000
         NI    E01DATDF+203,B'11110111'                           0205  05260000
*         FTABLNG  = FTABCUR - FTABIND;       /* SET NEW LENGTH OF BLK* 05270000
         L     @F,E01DATDF+184                                    0206  05280000
         S     @F,E01DATDF+180                                    0206  05290000
         L     @8,E01DATDF+180                                    0206  05300000
         STH   @F,8(0,@8)                                         0206  05310000
* E01CNT13: IF  FTABNXT ^= KON0               /* IF THIS NOT LAST     * 05320000
*             THEN                            /*  BLOCK               * 05330000
E01CNT13 LH    @F,KON0                                            0207  05340000
         L     @8,E01DATDF+180                                    0207  05350000
         C     @F,4(0,@8)                                         0207  05360000
         BC    08,@9EC                                            0207  05370000
*               DO;                           /*  FIND NEXT           * 05380000
*                 FTABIND  = FTABNXT;         /*   DO FREEMAIN        * 05390000
         MVC   E01DATDF+180(4),4(@8)                              0209  05400000
*                 GOTO  E01CNT10;             /*   AGAIN              * 05410000
         BC    15,E01CNT10                                        0210  05420000
*               END;                          /*                      * 05430000
* E01CNT15:     ;                             /* RETURN FROM FREEMAIN * 05440000
@9EC     EQU   *                                                  0212  05450000
*         R1  = ADDR(E01DATDF);               /* SET PARM PTR         * 05460000
E01CNT15 LA    @1,E01DATDF                                        0213  05470000
*         CALL  IKJEFE03;                     /* READ PROCEDURE INTO    05480000
*                                                MAIN STORAGE WITH      05490000
*                                                SUBSTITUTION         * 05500000
         L     @F,@V3              ADDRESS OF IKJEFE03            0214  05510000
         BALR  @E,@F                                              0214  05520000
*                                                                       05530000
* /******************************************************************** 05540000
**/*E01CNT16: D (YES,,NO,E01CNT17:RT) IS THIS TERMINATION OF ABEND? */  05550000
**/* D (YES,,NO,E01CNT17:RT) IS THERE ANY S.P. 78 CORE GOTTEN? */       05560000
**/* P CALCULATE AMT OF CORE TO BE FREE FOR BLOCKS */                   05570000
**/* S IKJEFE03: PERFORM FREEMAIN */                                    05580000
**/* D (YES,,NO,E01CNT16:RT) HAVE ALL BLOCKS BEEN FREED? */             05590000
**/*E01CNT17: D (YES,,NO,E01CNT25) IS DATA SET OPEN? */                 05600000
**/* M CLOSE DATA SET */                                                05610000
**/*E01CNT25: D (YES,,NO,E01CNT37:LL) IS THERE ATAB OR FTAB? */         05620000
**/*E01CNT27: P GET TO THE FIRST BLOCK OF FTAB (ATAB)*/                 05630000
**/*E01CNT30: S IKJEFE03: PERFORM FREEMAIN OF BLOCK */                  05640000
**/*E01CNT35: D (YES,,NO,E01CNT30:LT) HAVE BLOCKS OF FTAB (ATAB) BEEN   05650000
**/*FREED?*/                                                            05660000
**/* D (NO,,YES,E01CNT37) ARE ALL ATAB BLOCKS FREED? */                 05670000
**/* P (,E01CNT27:RT) MAKE ATAB BLOCKS LOOK LIKE FTAB AND RECYCLE TO    05680000
**/*FREE*/                                                              05690000
* /******************************************************************** 05700000
*         /************************************************************ 05710000
*         /*FOLLOWING CODE STARTS TERMINATION PROCESSING              * 05720000
*         /*- NORMAL AND ABNORMAL - IF THE TERMINATION IS             * 05730000
*         /*BY AN ERROR THEN ALL SP78 CORE GOTTEN BY EXEC IS          * 05740000
*         /*FREED. THEN IF THE DATA SET CONTAINING THE                * 05750000
*         /*COMMAND PROCEDURE IS OPEN IT IS CLOSED. AFTER THIS        * 05760000
*         /*THE CORE OBTAINED FOR FTAB AND ATAB BLOCKS IS FREED.      * 05770000
*         /************************************************************ 05780000
* E01CNT16: CBUFLNG  = CBUFLSAV;              /* RESTORE CMD BFR        05790000
*                                                LENGTH               * 05800000
E01CNT16 L     @8,E01DATDF+232                                    0215  05810000
         L     @8,0(0,@8)          CBUFPTR                        0215  05820000
         MVC   0(2,@8),E01DATDF+358                               0215  05830000
*          IF  E01SW9 = '0'B & E01SW5 = '0'B  /* IF TERM SW OFF AND   * 05840000
*            THEN                             /* WE ARE NOT ABENDING  * 05850000
         TM    E01DATDF+203,B'10000000'                           0216  05860000
         BC    05,@9EB                                            0216  05870000
         TM    E01DATDF+202,B'00001000'                           0216  05880000
*              GOTO E01CNT17;                 /* BYPASS FREEING OF      05890000
*                                                S.P. 78 CORE         * 05900000
         BC    10,E01CNT17                                        0217  05910000
*         IF E01SW12  ^= '1'B                 /* IF WE HAVE NO        * 05920000
*           THEN                              /*  SUBPOOL 78          * 05930000
@9EA     EQU   *                                                  0218  05940000
@9EB     TM    E01DATDF+203,B'00010000'                           0218  05950000
*             GOTO E01CNT17;                  /*    CORE BYPASS FREEMN* 05960000
         BC    12,E01CNT17                                        0219  05970000
*         REGSAV(2)  = R1;                    /* SAVE REG1            * 05980000
         ST    @1,E01DATDF+208                                    0220  05990000
*         R1  = ADDR(E01DATDF);               /* SET REG1 POINTING TO   06000000
*                                                PARMS                * 06010000
         LA    @1,E01DATDF                                        0221  06020000
*         RESTRICT  (R3,R4);                                            06030000
*         R3  = SP78ADDR -> ATABNXT;          /* SET AMT TO BE FREED  * 06040000
         L     @2,E01DATDF+156                                    0223  06050000
         L     @3,4(0,@2)                                         0223  06060000
*         TSTLNG = SP78ADDR;                  /*  SET FREEMAIN ADDRESS* 06070000
         MVC   E01DATDF+136(4),E01DATDF+156                       0224  06080000
*         IF  SP78ADDR = ADDGMN               /* IF THIS IS THE LAST  * 06090000
*           THEN                              /*   ATAB BLOCK INDICATE* 06100000
         L     @F,E01DATDF+148                                    0225  06110000
         C     @F,E01DATDF+156                                    0225  06120000
         BC    07,@9E9                                            0225  06130000
*             DO;                             /*  THE ACTUAL LENGTH   * 06140000
*               R3 = AMTGMN;                  /*  AND INDICATE LAST   * 06150000
         L     @3,E01DATDF+152                                    0227  06160000
*               SP78ADDR = KON0;              /*      BY SETTING PTR  * 06170000
         LH    @F,KON0                                            0228  06180000
         ST    @F,E01DATDF+156                                    0228  06190000
         BC    15,@9E8                                            0230  06200000
*             END;                            /*   TO ZERO            * 06210000
*           ELSE                              /* OTHERWISE - SET PTR  * 06220000
*             SP78ADDR = SP78ADDR -> ATABLST; /*   TO NEXT BLOCK      * 06230000
@9E9     L     @2,E01DATDF+156                                    0230  06240000
         MVC   E01DATDF+156(4),0(@2)                              0230  06250000
*         R4  = KON78;                        /* SET SUBPOOL INDICATOR* 06260000
@9E8     LH    @4,KON78                                           0231  06270000
*         E01SW13 = '1'B;                     /* SET   FREEMAIN SWITCH* 06280000
         OI    E01DATDF+203,B'00001000'                           0232  06290000
*         CALL  IKJEFE03;                     /* PERFORM FREEMAIN     * 06300000
         L     @F,@V3              ADDRESS OF IKJEFE03            0233  06310000
         BALR  @E,@F                                              0233  06320000
*         R1  = REGSAV(2);                    /* RESTORE REG1         * 06330000
         L     @1,E01DATDF+208                                    0234  06340000
*         RELEASE  (R3,R4);                                             06350000
*         E01SW13 = '0'B;                     /*RESET  FREEMAIN SWITCH* 06360000
         NI    E01DATDF+203,B'11110111'                           0236  06370000
*         IF  SP78ADDR ^= KON0                /* IF LAST BLOCK HAS NOT* 06380000
*           THEN                              /*   BEEN PROCESSED     * 06390000
         LH    @F,KON0                                            0237  06400000
         C     @F,E01DATDF+156                                    0237  06410000
*             GOTO E01CNT16;                  /*    RECYCLE           * 06420000
         BC    07,E01CNT16                                        0238  06430000
*         /*                                                    A42620* 06440000
*         E01SW12 = '0'B;                     /*ELSE INDICATE FINISHED* 06450000
         NI    E01DATDF+203,B'11101111'                           0239  06460000
* E01CNT17: IF (DCBOFLGS & KONX10) ^= KONX10  /*IF DATA SET NOT OPENED* 06470000
*             THEN                            /* OR ALREADY CLOSED    * 06480000
E01CNT17 MVC   @CTEMP2(1),KONSTRUC+1                              0240  06490000
         NC    @CTEMP2(1),DCBD+48                                 0240  06500000
         CLC   @CTEMP2(1),KONSTRUC+1                              0240  06510000
*               GOTO  E01CNT25;               /*  BYPASS THE CLOSE    * 06520000
         BC    07,E01CNT25                                        0241  06530000
*         RESTRICT (R2);                                                06540000
*         R2 = ADDR(DCBAR);                   /* LOAD ADDRESS OF DCB  * 06550000
         LA    @2,E01DATDF                                        0243  06560000
*         R1 = ADDR(RCLO);                    /* REG1 = ADDR OF LIST  * 06570000
         LA    @1,RCLO                                            0244  06580000
*         GEN;                                                          06590000
          CLOSE     ((2)),MF=(E,(1))          CLOSE  THE  DATA  SET     06600000
          FREEPOOL  (2)            FREE   THE  BUFFER  POOL             06610000
         DS    0H                                                       06620000
*         RELEASE (R2);                                                 06630000
* E01CNT25: IF  ATABIND = KON0                /* IF THERE IS NO ATAB- * 06640000
*             THEN                            /*  FTAB BYPASS FREEMAIN* 06650000
E01CNT25 LH    @F,KON0                                            0247  06660000
         C     @F,E01DATDF+172                                    0247  06670000
*               GOTO E01CNT37;                /* GO TO PERFORM STACK  * 06680000
         BC    08,E01CNT37                                        0248  06690000
* E01CNT27: IF  FTABLST  ^= KON0              /* IF THIS IS NOT FIRST * 06700000
*             THEN                                                      06710000
E01CNT27 LH    @F,KON0                                            0249  06720000
         L     @8,E01DATDF+180                                    0249  06730000
         C     @F,0(0,@8)                                         0249  06740000
         BC    08,@9E7                                            0249  06750000
*               DO;                           /* BLOCK OF FTAB  STEP  * 06760000
*                 FTABIND = FTABLST;          /* THROUGH UNTIL FIRST  * 06770000
         MVC   E01DATDF+180(4),0(@8)                              0251  06780000
*                 GOTO E01CNT27;              /* BLOCK IS REACHED     * 06790000
         BC    15,E01CNT27                                        0252  06800000
*               END;                          /*                      * 06810000
* E01CNT30: FTABCUR = FTABNXT;                /* SAVE PTR TO NEXT BLCK* 06820000
@9E7     EQU   *                                                  0254  06830000
E01CNT30 L     @8,E01DATDF+180                                    0254  06840000
         MVC   E01DATDF+184(4),4(@8)                              0254  06850000
*         IF ATABIND = KON0                   /* IF WE ARE FREEING    * 06860000
*           THEN                              /* ATAB NOW ALTER LENGTH* 06870000
         LH    @F,KON0                                            0255  06880000
         C     @F,E01DATDF+172                                    0255  06890000
         BC    07,@9E6                                            0255  06900000
*             FTABLNG = FTABDLNG;             /* FIELD TO LOOK LIKE     06910000
*                                                FTAB LENGTH FIELD    * 06920000
         MVC   8(2,@8),10(@8)                                     0256  06930000
*         REGSAV(2)  = R1;                    /* SAVE REG1            * 06940000
@9E6     ST    @1,E01DATDF+208                                    0257  06950000
*         R1  = ADDR(E01DATDF);               /* SET REG1 POINTING TO   06960000
*                                                PARMS                * 06970000
         LA    @1,E01DATDF                                        0258  06980000
*         RESTRICT  (R3,R4);                                            06990000
*         R3  = FTABLNG;                      /* SET AM TO BE FREED   * 07000000
         LH    @3,8(0,@8)                                         0260  07010000
*         R4  = KON1;                         /* SET SUBPOOL INDICATOR* 07020000
         LH    @4,KON1                                            0261  07030000
*         TSTLNG  = FTABIND;                  /* ADDR OF BLOCK TO BE    07040000
*                                                FREED                * 07050000
         MVC   E01DATDF+136(4),E01DATDF+180                       0262  07060000
*         E01SW13  ='1'B;                     /* SET FREEMAIN SWITCH  * 07070000
         OI    E01DATDF+203,B'00001000'                           0263  07080000
*         CALL  IKJEFE03;                     /* PERFORM FREEMAIN     * 07090000
         L     @F,@V3              ADDRESS OF IKJEFE03            0264  07100000
         BALR  @E,@F                                              0264  07110000
*         RELEASE  (R3,R4);                                             07120000
*         R1  = REGSAV(2);                    /* RESTORE REG1         * 07130000
         L     @1,E01DATDF+208                                    0266  07140000
*         E01SW13  ='0'B;                     /* RESET FREEMAIN SWITCH* 07150000
         NI    E01DATDF+203,B'11110111'                           0267  07160000
* E01CNT35: IF FTABCUR ^= KON0                /* IF THAT WAS NOT LAST * 07170000
*             THEN                            /*  BLOCK               * 07180000
E01CNT35 LH    @F,KON0                                            0268  07190000
         C     @F,E01DATDF+184                                    0268  07200000
         BC    08,@9E5                                            0268  07210000
*               DO;                           /*  UPDATE              * 07220000
*                 FTABIND = FTABCUR;          /*  POINTERS AND        * 07230000
         MVC   E01DATDF+180(4),E01DATDF+184                       0270  07240000
*                 GOTO E01CNT30;              /*        DO NEXT       * 07250000
         BC    15,E01CNT30                                        0271  07260000
*               END;                                                    07270000
*         IF ATABIND ^= KON0                  /* IF ATAB HAS NOT YET  * 07280000
*           THEN                                                        07290000
@9E5     LH    @F,KON0                                            0273  07300000
         C     @F,E01DATDF+172                                    0273  07310000
         BC    08,@9E4                                            0273  07320000
*             DO;                             /* BEEN FREED  MAKE IT  * 07330000
*               FTABIND = ATABIND;            /* LOOK LIKE FTAB AND   * 07340000
         MVC   E01DATDF+180(4),E01DATDF+172                       0275  07350000
*               ATABIND = KON0;               /* LOOP THROUGH         * 07360000
         LH    @F,KON0                                            0276  07370000
         ST    @F,E01DATDF+172                                    0276  07380000
*               GOTO  E01CNT27;               /* AGAIN                * 07390000
         BC    15,E01CNT27                                        0277  07400000
*             END;                            /*                      * 07410000
*                                                                       07420000
* /******************************************************************** 07430000
**/*E01CNT37: D (NO,,YES,E01CNT40) IS THIS A TERM OR ABEND? */          07440000
**/* D (NO,E01CNT39:RT,YES,) DID DATASET CONTAIN PROCEDURE ? */         07450000
**/* D (YES,E01CNT38,NO,) WAS 'LIST' REQUESTED WITH STACK ? */          07460000
**/* D (YES,E01STKPR,NO,) WAS 'PROMPT' REQUESTED WITH STACK ? */        07470000
**/* M  (,E01CNT39:LT) STACK PROCEDURE */                               07480000
**/*E01CNT38:  M (,E01CNT39:LT) STACK PROCEDURE WITH LIST OPTION */     07490000
**/*E01STKPR:  M  STACK PROCEDURE WITH PROMPT OPTION */                 07500000
**/*E01CNT39: D (NO,E01CNT40:LT,YES,) WAS STACK SUCCESSFUL? */          07510000
**/*%D5:  R RETURN TO CALLER */                                         07520000
**/*E01CNT40: P FLUSH STACK */                                          07530000
**/* P FLUSH THE INPUT QUEUE */                                         07540000
**/* D (YES,,NO,%D5:LT) ARE WE IN AN ABEND? */                          07550000
**/* P (,%D5:LT) SET RETURN CODE AND TRY STAE RECOVERY*/                07560000
* /******************************************************************** 07570000
*         /************************************************************ 07580000
*         /*FOLLOWING CODE STACKS THE COMMAND PROCEDURE               * 07590000
*         /*IF THE TERMINATION IS NORMAL OR FLUSHES THE               * 07600000
*         /*STACK IF THE TERMINATION IS DUE TO AN ERROR.              * 07610000
*         /*ALSO IF THERE WAS AN ERROR THE GETLINE INPUT              * 07620000
*         /*QUEUE IS FLUSHED. RETURN IS THEN MADE TO THE TMP.         * 07630000
*         /************************************************************ 07640000
* E01CNT37: IF  E01SW5  =  '1'B |             /* IF THIS  IS AN ABEND * 07650000
*            E01SW9   =  '1'B                 /*  OR TERM SW  IS ON   * 07660000
*             THEN                            /*  WE MUST FLUSH SO    * 07670000
@9E4     EQU   *                                                  0279  07680000
E01CNT37 TM    E01DATDF+202,B'00001000'                           0279  07690000
         BC    01,@9E3                                            0279  07700000
         TM    E01DATDF+203,B'10000000'                           0279  07710000
         BC    12,@9E2                                            0279  07720000
*               GOTO E01CNT40;                /*  GO TO STACK DELETE  * 07730000
         BC    03,E01CNT40                                        0280  07740000
*         IF E01SW12 = '0'B                   /* IF THERE WAS NO PROC-* 07750000
*           THEN                              /*  EDURE IN THE DATA   * 07760000
@9E2     TM    E01DATDF+203,B'00010000'                           0281  07770000
         BC    05,@9E1                                            0281  07780000
*             DO;                             /*  SET THEN            * 07790000
*               TSTLNG = KON0;                /*  DUMMY UP THE RETURN * 07800000
         LH    @F,KON0                                            0283  07810000
         ST    @F,E01DATDF+136                                    0283  07820000
*               GOTO E01CNT39;                /*  CODE AREA AND BYPASS* 07830000
         BC    15,E01CNT39                                        0284  07840000
*             END;                            /*  STACKING OPERATION  * 07850000
*         SRECB  = KON0;                      /* CLEAR ECB            * 07860000
@9E1     LH    @F,KON0                                            0286  07870000
         ST    @F,E01DATDF+276                                    0286  07880000
*         STDLDAP  = SP78ADDR + KON16;        /* SET POINTER TO THE   * 07890000
         LH    @F,KON16                                           0287  07900000
         A     @F,E01DATDF+156                                    0287  07910000
         L     @8,E01DATDF+156                                    0287  07920000
         ST    @F,0(0,@8)                                         0287  07930000
*         STDLRL  = KON0;                     /*  PROC - SET RECORD     07940000
*                                                 TO ZERO TO INDICATE   07950000
*                                                 VARIABLE LENGTH     * 07960000
         MVC   4(2,@8),KON0                                       0288  07970000
*         STDLTL  = SP78LNGT - KON16;         /* SET TOTAL PROC LENGTH* 07980000
         L     @F,E01DATDF+160                                    0289  07990000
         SH    @F,KON16                                           0289  08000000
         STH   @F,6(0,@8)                                         0289  08010000
*         STDLNBP = STDLDAP;                  /*SET FIST BYTE AT START  08020000
*                                               OF PROC               * 08030000
         MVC   8(4,@8),0(@8)                                      0290  08040000
*         RESTRICT (R2,R4);                                             08050000
*         R4  = ADDR(RSTCK);                  /* REG2 POINTS TO LIST    08060000
*                                                FORM                 * 08070000
         LA    @4,RSTCK                                           0292  08080000
*         R2  = ADDR(STDL);                   /* PTR TO DESCRIPTOR LST* 08090000
         LR    @2,@8                                              0293  08100000
*         R1  = PPLPTR;                       /* REG1 POINTS TO SRCT  * 08110000
         L     @1,E01DATDF+248                                    0294  08120000
*         GEN(MVC   RSTCK,STCKL     PUT LIST INTO GOTTEN CORE);         08130000
         MVC   RSTCK,STCKL     PUT LIST INTO GOTTEN CORE                08140000
         DS    0H                                                       08150000
*         IF  E01SW6 = '1'B                   /* IF PROMPT THEN Y01676* 08160000
*           THEN                              /* BYPASS NOPRMPT Y01676* 08170000
         TM    E01DATDF+202,B'00000100'                           0296  08180000
*             GOTO E01STKPR;                  /* PROCESSING     Y01676* 08190000
         BC    01,E01STKPR                                        0297  08200000
*         IF  E01SW16 = '1'B                  /* IF LIST THEN   Y01676* 08210000
*           THEN                              /* BYPASS LIST    Y01676* 08220000
         TM    E01DATDF+203,B'00000001'                           0298  08230000
*             GOTO E01CNT38;                  /* PROCESSING     Y01676* 08240000
         BC    01,E01CNT38                                        0299  08250000
*         GEN(STACK PARM=(R4),STORAGE=((R2),PROCN),MF=(E,(1)));         08260000
         STACK PARM=(R4),STORAGE=((R2),PROCN),MF=(E,(1))                08270000
         DS    0H                                                       08280000
*         TSTLNG  = R15;                      /* SAVE RETURN CODE     * 08290000
         ST    @F,E01DATDF+136                                    0301  08300000
*         GOTO  E01CNT39;                     /* BYPASS STACK WITH      08310000
*                                                LIST OPTION          * 08320000
         BC    15,E01CNT39                                        0302  08330000
* E01CNT38: ;                                 /* LABEL FOR STACK WITH   08340000
*                                                LIST OPTION          * 08350000
*         GEN(STACK PARM=(R4),STORAGE=((R2),PROCL),MF=(E,(1)));         08360000
E01CNT38 STACK PARM=(R4),STORAGE=((R2),PROCL),MF=(E,(1))                08370000
         DS    0H                                                       08380000
*         TSTLNG  = R15;                      /* SAVE RETURN CODE     * 08390000
         ST    @F,E01DATDF+136                                    0305  08400000
*         GOTO  E01CNT39;                     /* BYPASS STACK WITH      08410000
*                                                PROMPT OPTION  Y01676* 08420000
         BC    15,E01CNT39                                        0306  08430000
* E01STKPR: ;                                 /* PROMPT PROCESSING      08440000
*                                                               Y01676* 08450000
*         IF E01SW16 = '1'B                                             08460000
*           THEN                                                        08470000
E01STKPR TM    E01DATDF+203,B'00000001'                           0308  08480000
*             GO TO E01STKPL;                                           08490000
         BC    01,E01STKPL                                        0309  08500000
*         GEN(STACK PARM=(R4),STORAGE=((R2),PROCN,PROMPT),MF=(E,(1))    08510000
         STACK PARM=(R4),STORAGE=((R2),PROCN,PROMPT),MF=(E,(1))         08520000
         DS    0H                                                       08530000
*         TSTLNG  = R15;                      /* SAVE RET CODE  Y01676* 08540000
         ST    @F,E01DATDF+136                                    0311  08550000
*         GO TO E01CNT39;                                               08560000
         BC    15,E01CNT39                                        0312  08570000
* E01STKPL:  ;                                                          08580000
*         GEN(STACK PARM=(R4),STORAGE=((R2),PROCL,PROMPT),MF=(E,(1))    08590000
E01STKPL STACK PARM=(R4),STORAGE=((R2),PROCL,PROMPT),MF=(E,(1))         08600000
         DS    0H                                                       08610000
*         TSTLNG  = R15;                      /* SAVE RET CODE  Y01676* 08620000
         ST    @F,E01DATDF+136                                    0315  08630000
* E01CNT39: IF  TSTLNG ^= KON0                /* IF STACK WAS         * 08640000
*             THEN                            /* NOT SUCCESSFUL      */ 08650000
E01CNT39 LH    @F,KON0                                            0316  08660000
         C     @F,E01DATDF+136                                    0316  08670000
         BC    08,@9E0                                            0316  08680000
*               DO;                           /*                      * 08690000
*                 RETCDAR  = KON20;           /* SET RETURN CODE TO 20* 08700000
         LH    @F,KON20                                           0318  08710000
         ST    @F,E01DATDF+280                                    0318  08720000
*                 CNVC = TSTLNGC(3:4);        /* SAVE RETURN CODE     * 08730000
         MVC   E01DATDF+200(2),E01DATDF+138                       0319  08740000
*                 LVL1NO = KON24;             /* INDICATE SYSTEM ERROR* 08750000
         MVC   E01DATDF+304(2),KON24                              0320  08760000
*                 LVL2NO = KON1;              /* MSG FOR 1ST LEVEL AND* 08770000
         MVC   E01DATDF+306(2),KON1                               0321  08780000
*                 VARSGLNG = KONX00;          /* AND STACK RETURN CODE* 08790000
         MVC   E01DATDF+296(1),KONSTRUC                           0322  08800000
*                 ADPTR1 = ADDR(E01CNT16);    /* AS 2ND LEVEL -         08810000
*                                                E01CNT16 IS RETURN     08820000
*                                                POINT AFTER            08830000
*                                                MSG            YM2699* 08840000
         LA    @F,E01CNT16                                        0323  08850000
         ST    @F,E01DATDF+88                                     0323  08860000
*                 GOTO  E01MML10;             /* AND GO TO PUT MSG    * 08870000
         BC    15,E01MML10                                        0324  08880000
*               END;                          /*                      * 08890000
*         R15  = KON0;                        /* ELSE RETURN CODE IS 0* 08900000
@9E0     LH    @F,KON0                                            0326  08910000
*         RETURN;                             /* AND GO TO CALLER     * 08920000
         BC    15,@EL01                                           0327  08930000
* E01CNT40:  ;                                /* SET OPERATION TO       08940000
*                                                  FLUSH STACK        * 08950000
*         R2  = ADDR(RSTCK);                  /* PTR TO DESCRIPTOR LST* 08960000
E01CNT40 LA    @2,RSTCK                                           0329  08970000
*         R1  = PPLPTR;                       /* REG1 POINTS TO SRCT  * 08980000
         L     @1,E01DATDF+248                                    0330  08990000
*         GEN;                                                          09000000
         MVC   RSTCK,STCKL          MOVE LIST FORM OF MACRO             09010000
         STACK PARM=(R2),DELETE=ALL,MF=(E,(1))                          09020000
         DS    0H                                                       09030000
*         IF  RETCDAR ^= KON16 & RETCDAR ^= KON20                       09040000
*           THEN                              /* IF RETURN CODE HAS NOT 09050000
         LH    @F,KON16                                           0332  09060000
         C     @F,E01DATDF+280                                    0332  09070000
         BC    08,@9DF                                            0332  09080000
         LH    @F,KON20                                           0332  09090000
         C     @F,E01DATDF+280                                    0332  09100000
         BC    08,@9DE                                            0332  09110000
*             RETCDAR = KON12;                /* BEEN SET  SET IT TO 12 09120000
         LH    @F,KON12                                           0333  09130000
         ST    @F,E01DATDF+280                                    0333  09140000
*         R1  = PPLPTR;                       /* SET POINTER TO PARM    09150000
*                                                BLOCK                * 09160000
@9DE     EQU   *                                                  0334  09170000
@9DF     L     @1,E01DATDF+248                                    0334  09180000
*         GEN;                                                          09190000
         TCLEARQ INPUT                       FLUSH THE INPUT QUEUE      09200000
         DS    0H                                                       09210000
*         RELEASE (R2,R4);                                              09220000
*         IF E01SW5 = '1'B                    /* IF WE ARE IN AN ABEND* 09230000
*           THEN                              /*  THEN                * 09240000
         TM    E01DATDF+202,B'00001000'                           0337  09250000
         BC    12,@9DD                                            0337  09260000
*             DO;                                                       09270000
*               R15  = KON0;                  /* SET STAE RETURN CODE * 09280000
         LH    @F,KON0                                            0339  09290000
*               R14 = REGSAV(3);              /*SET STAE RETURN ADDRESS 09300000
         L     @E,E01DATDF+212                                    0340  09310000
*               GEN(BR    R14                 RETURN TO STAE);          09320000
         BR    R14                 RETURN TO STAE                       09330000
         DS    0H                                                       09340000
         BC    15,@9DC                                            0343  09350000
*             END;                                                      09360000
*           ELSE                              /* TO INDICATE NO RETRY * 09370000
*             R15 = RETCDAR;                  /* ELSE SET RETURN CODE   09380000
*                                                FOR TMP              * 09390000
@9DD     L     @F,E01DATDF+280                                    0343  09400000
*         RETURN;                             /* AND RETURN           * 09410000
         BC    15,@EL01                                           0344  09420000
*                                                                       09430000
* /******************************************************************** 09440000
**/*E01MML05: P WHEN COMMAND IS > 256 SET LENGTH TO 256 */              09450000
**/*E01MML10: S IKJEFE04: LINK TO MESSAGE MODULE */                     09460000
**/* D (YES,,NO,E01CNT16:RT) WAS MESSAGE PUT OUT? */                    09470000
**/* D (NO,,YES,E01CNT16:RT) WAS TERMINATION REQUESTED ? */             09480000
**/* D (NO,E01CNT05:LT,YES,E01SPD96:RT) IS THERE AN ATAB BLOCK? */      09490000
**/*IKJEFE01: END */                                                    09500000
* /******************************************************************** 09510000
*         /************************************************************ 09520000
*         /*FOLLOWING CODE SETS UP THE PARAMETERS NECESSARY           * 09530000
*         /*FOR PUTTING A MESSAGE TO THE TERMINAL THEN                * 09540000
*         /*CALLS MODULE IKJEFE04 TO PUT THE MESSAGE                  * 09550000
*         /*ON RETURN THE RETURN CODE IS CHECKED TO INSURE            * 09560000
*         /*THAT THE MESSAGE WAS PUT OUT SUCCESSFULLY                 * 09570000
*         /*THEN EITHER TERMINATION IS STARTED OR RETURN IS           * 09580000
*         /*MADE TO THE CALLER DEPENDING ON WHICH OPTION              * 09590000
*         /*THE CALLER SPECIFIED.                                     * 09600000
*         /************************************************************ 09610000
* E01MML10: REGSAV(1) = R1;                   /* SAVE REGISTER 1      * 09620000
E01MML10 ST    @1,E01DATDF+204                                    0345  09630000
*         R1 =  ADDR(E01DATDF);               /* REG1 = ADDR OF PARMS   09640000
*                                                SET                  * 09650000
         LA    @1,E01DATDF                                        0346  09660000
*         E01SW9 = '1'B;                      /*TERMINATE SWITCH ON   * 09670000
         OI    E01DATDF+203,B'10000000'                           0347  09680000
*         GEN   (LINK  EP=IKJEFE04         LINK TO MSG MODULE);         09690000
         LINK  EP=IKJEFE04         LINK TO MSG MODULE                   09700000
         DS    0H                                                       09710000
*         R1 = REGSAV(1);                     /* RESTORE REG1         * 09720000
         L     @1,E01DATDF+204                                    0349  09730000
*         IF RETCDAR = KON16                  /* IF MSG WAS NOT OUTPUT* 09740000
*           THEN                              /*  THEN                * 09750000
         LH    @F,KON16                                           0350  09760000
         C     @F,E01DATDF+280                                    0350  09770000
*             GOTO E01CNT16;                  /* START TERMINATION    * 09780000
         BC    08,E01CNT16                                        0351  09790000
*         IF ADPTR1 = KON0                    /* IF TERMINATION WAS   * 09800000
*           THEN                                                        09810000
         LH    @F,KON0                                            0352  09820000
         C     @F,E01DATDF+88                                     0352  09830000
*             DO;                             /* REQUESTED            * 09840000
*               GOTO E01CNT16;                /*     START TERMINATION* 09850000
         BC    08,E01CNT16                                        0354  09860000
*             END;                            /*                      * 09870000
*         GOTO INDAD1;                        /* ELSE RETURN TO CALLER* 09880000
@9DB     L     @8,E01DATDF+88                                     0356  09890000
         BCR   15,@8                                              0356  09900000
*                                                                       09910000
*         /************************************************************ 09920000
*         /*FOLLOWING IS THE STAE EXIT ROUTINE. IT SETS               * 09930000
*         /*UP ADDRESSABILITY, SETS ON THE ABEND SWITCH AND           * 09940000
*         /*GOES TO COMMENCE TERMINATION.                             * 09950000
*         /************************************************************ 09960000
* SHTDWN:    ;                                                          09970000
*         GEN;                                                          09980000
SHTDWN   EQU   *                                                  0358  09990000
         L      R12,0(R1)          PLACE ADDR OF STAE PARM LIST IN R12  10000000
         L      R11,8(R12)         RESTORE BASE REG11                   10010000
         L      R13,4(R12)         RESTORE SAVE REG13                   10020000
         L      R12,0(R12)         RESTORE BASE REG12                   10030000
         DS    0H                                                       10040000
*         REGSAV(3) = R14;                                              10050000
         ST    @E,E01DATDF+212                                    0359  10060000
*         E01SW5  = '1'B;                     /* SET ABEND SW ON */     10070000
         OI    E01DATDF+202,B'00001000'                           0360  10080000
*         GOTO  E01CNT16;                     /* AND GO TO TERMINATION* 10090000
         BC    15,E01CNT16                                        0361  10100000
*         /************************************************************ 10110000
*         /* FOLLOWING IS A PARSE MACRO FOR THE DSNAME                * 10120000
*         /************************************************************ 10130000
*         GEN;                                                          10140000
DSNMPARS       IKJPARM   DSECT=PARSPDLA                                 10150000
POSNM1         IKJPOSIT  DSNAME,PROMPT='DATA SET NAME'                  10160000
               IKJENDP                                                  10170000
         DS    0H                                                       10180000
*         /************************************************************ 10190000
*         /* FOLLOWING IS A MODEL DCB                                 * 10200000
*         /************************************************************ 10210000
*         GEN;                                                          10220000
DCBPD    DCB   DDNAME=SYSPROC,DEVD=DA,DSORG=PO,MACRF=R,EXLST=DCBEXTS,  C10230000
               KEYLEN=0                                                 10240000
         DS    0H                                                       10250000
*         /************************************************************ 10260000
*         /*FOLLOWING ARE LIST FORM OF MACROS USED BY EXEC            * 10270000
*         /************************************************************ 10280000
*         GEN;                                                          10290000
SSTCK    EQU   *                                                        10300000
STCKL    STACK MF=L                 LIST FORM OF STACK MACRO            10310000
ESTCK    EQU   *                                                        10320000
SCLO     EQU   *                                                        10330000
CLOL     CLOSE (DCBP),MF=L         LIST FORM OF CLOSE MACRO             10340000
ECLO     EQU   *                                                        10350000
SSTAE    EQU   *                                                        10360000
STAEL    STAE  MF=L                LIST FORM OF STAE MACRO              10370000
ESTAE    EQU   *                                                        10380000
         DS    0H                                                       10390000
*         /************************************************************ 10400000
*         /* FOLLOWING ARE AREAS OF DYNAMIC CORE WHICH ARE USED       * 10410000
*         /* TO HOLD PARAMETERS FOR SYSTEM FUNCTIONS                  * 10420000
*         /************************************************************ 10430000
*         GENERATE DATA;                                                10440000
*         END                                                           10450000
* /* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.       10460000
* /*%INCLUDE SYSLIB  (IKJCPPL )                                         10470000
* /*%INCLUDE SYSLIB  (IKJPPL  )                                         10480000
* /*%INCLUDE SYSLIB  (IKJCSPL )                                         10490000
* /*%INCLUDE SYSLIB  (IKJCSOA )                                         10500000
* ;                                                                     10510000
@EL01    L     @D,4(0,@D)                                         0366  10520000
         LR    @1,@C                                              0366  10530000
         L     @0,@SIZ001                                         0366  10540000
         FREEMAIN R,LV=(0),A=(1)                                  0366  10550000
         L     @E,12(0,@D)                                        0366  10560000
         L     @0,20(0,@D)                                        0366  10570000
         LM    @2,@C,28(@D)                                       0366  10580000
         BCR   15,@E                                              0366  10590000
@DATA1   EQU   *                                                        10600000
@0       EQU   00                  EQUATES FOR REGISTERS 0-15           10610000
@1       EQU   01                                                       10620000
@2       EQU   02                                                       10630000
@3       EQU   03                                                       10640000
@4       EQU   04                                                       10650000
@5       EQU   05                                                       10660000
@6       EQU   06                                                       10670000
@7       EQU   07                                                       10680000
@8       EQU   08                                                       10690000
@9       EQU   09                                                       10700000
@A       EQU   10                                                       10710000
@B       EQU   11                                                       10720000
@C       EQU   12                                                       10730000
@D       EQU   13                                                       10740000
@E       EQU   14                                                       10750000
@F       EQU   15                                                       10760000
@D1      DC    H'1'                                                     10770000
@MVC     MVC   0(1,@A),0(@E)                                            10780000
@V1      DC    V(DSNMPARS)                                              10790000
@V2      DC    V(IKJEFE05)                                              10800000
@V3      DC    V(IKJEFE03)                                              10810000
@V4      DC    V(IKJEFE02)                                              10820000
         DS    0F                                                       10830000
@SIZ001  DC    AL1(&SPN)                                                10840000
         DC    AL3(@DATEND-@DATD)                                       10850000
         DS    0F                                                       10860000
         DS    0D                                                       10870000
@DATA    EQU   *                                                        10880000
DUMPARM  EQU   00000000            FULLWORD INTEGER                     10890000
R1       EQU   00000001            FULLWORD POINTER REGISTER            10900000
R2       EQU   00000002            FULLWORD POINTER REGISTER            10910000
R3       EQU   00000003            FULLWORD POINTER REGISTER            10920000
R4       EQU   00000004            FULLWORD POINTER REGISTER            10930000
R5       EQU   00000005            FULLWORD POINTER REGISTER            10940000
R11      EQU   00000011            FULLWORD POINTER REGISTER            10950000
R12      EQU   00000012            FULLWORD POINTER REGISTER            10960000
R13      EQU   00000013            FULLWORD POINTER REGISTER            10970000
R15      EQU   00000015            FULLWORD POINTER REGISTER            10980000
R14      EQU   00000014            FULLWORD POINTER REGISTER            10990000
KON0     EQU   *                   HALFWORD INTEGER                     11000000
         DC    FL2'0'                                                   11010000
KON1     EQU   *                   HALFWORD INTEGER                     11020000
         DC    FL2'1'                                                   11030000
KON2     EQU   *                   HALFWORD INTEGER                     11040000
         DC    FL2'2'                                                   11050000
KON3     EQU   *                   HALFWORD INTEGER                     11060000
         DC    FL2'3'                                                   11070000
KON4     EQU   *                   HALFWORD INTEGER                     11080000
         DC    FL2'4'                                                   11090000
KON7     EQU   *                   HALFWORD INTEGER                     11100000
         DC    FL2'7'                                                   11110000
KON8     EQU   *                   HALFWORD INTEGER                     11120000
         DC    FL2'8'                                                   11130000
KON9     EQU   *                   HALFWORD INTEGER                     11140000
         DC    FL2'9'                                                   11150000
KON12    EQU   *                   HALFWORD INTEGER                     11160000
         DC    FL2'12'                                                  11170000
KON16    EQU   *                   HALFWORD INTEGER                     11180000
         DC    FL2'16'                                                  11190000
KON20    EQU   *                   HALFWORD INTEGER                     11200000
         DC    FL2'20'                                                  11210000
KON24    EQU   *                   HALFWORD INTEGER                     11220000
         DC    FL2'24'                                                  11230000
KON48    EQU   *                   HALFWORD INTEGER                     11240000
         DC    FL2'48'                                                  11250000
KON78    EQU   *                   HALFWORD INTEGER                     11260000
         DC    FL2'78'                                                  11270000
KON2048  EQU   *                   HALFWORD INTEGER                     11280000
         DC    FL2'2048'                                                11290000
KONSTRUC EQU   @DATA+00000032      4 BYTE(S) ON WORD                    11300000
         ORG   KONSTRUC+00000000                                        11310000
KONX00   EQU   *                   1 BYTE(S)                            11320000
         DC    X'00'                                                    11330000
KONX10   EQU   *                   1 BYTE(S)                            11340000
         DC    X'10'                                                    11350000
KONX20   EQU   *                   1 BYTE(S)                            11360000
         DC    X'20'                                                    11370000
KONXFF   EQU   *                   1 BYTE(S)                            11380000
         DC    X'FF'                                                    11390000
KBLNK    EQU   *                   1 BYTE(S)                            11400000
         DC    C' '                                                     11410000
KCOM     EQU   *                   1 BYTE(S)                            11420000
         DC    C','                                                     11430000
KTAB     EQU   *                   1 BYTE(S)                            11440000
         DC    X'05'                                                    11450000
KPERD    EQU   *                   1 BYTE(S)                            11460000
         DC    C'.'                                                     11470000
DCBP     EQU   00000000            88 BYTE(S) ON DWORD                  11480000
ATAB     EQU   00000000            12 BYTE(S) ON WORD                   11490000
ATABLST  EQU   ATAB+00000000       FULLWORD POINTER                     11500000
ATABNXT  EQU   ATAB+00000004       FULLWORD POINTER                     11510000
ATABLNG  EQU   ATAB+00000008       FULLWORD INTEGER                     11520000
ATABELMT EQU   00000000            263 BYTE(S) ON WORD                  11530000
FTABPTR  EQU   ATABELMT+00000000   4 BYTE(S)                            11540000
FTABPTRB EQU   ATABELMT+00000000   32 BIT(S)                            11550000
ATABFLGS EQU   ATABELMT+00000004   1 BYTE(S)                            11560000
ATABELNC EQU   ATABELMT+00000005   2 BYTE(S)                            11570000
ATABDAT  EQU   ATABELMT+00000007   256 BYTE(S)                          11580000
FTAB     EQU   00000000            12 BYTE(S) ON WORD                   11590000
FTABLST  EQU   FTAB+00000000       FULLWORD POINTER                     11600000
FTABNXT  EQU   FTAB+00000004       FULLWORD POINTER                     11610000
FTABLNG  EQU   FTAB+00000008       HALFWORD INTEGER                     11620000
FTABDLNG EQU   FTAB+00000010       HALFWORD INTEGER                     11630000
FTABELMT EQU   00000000            260 BYTE(S) ON WORD                  11640000
FTABELNG EQU   FTABELMT+00000000   4 BYTE(S)                            11650000
FTABDAT  EQU   FTABELMT+00000004   256 BYTE(S)                          11660000
STDL     EQU   00000000            12 BYTE(S) ON WORD                   11670000
STDLDAP  EQU   STDL+00000000       FULLWORD POINTER                     11680000
STDLRL   EQU   STDL+00000004       HALFWORD INTEGER                     11690000
STDLTL   EQU   STDL+00000006       HALFWORD INTEGER                     11700000
STDLNBP  EQU   STDL+00000008       FULLWORD POINTER                     11710000
DCBEXTS  EQU   @DATA+00000040      4 BYTE(S) ON WORD                    11720000
A00010   EQU   *                   1 BYTE(S)                            11730000
         DC    X'85'                                                    11740000
A00011   EQU   *                   3  BYTE  POINTER ON WORD+1           11750000
         DC    VL3(E05OPEX)                                             11760000
CPPL     EQU   00000000            16 BYTE(S) ON WORD                   11770000
CPPLCBUF EQU   CPPL+00000000       FULLWORD POINTER                     11780000
CPPLUPT  EQU   CPPL+00000004       FULLWORD POINTER                     11790000
CPPLPSCB EQU   CPPL+00000008       FULLWORD POINTER                     11800000
CPPLECT  EQU   CPPL+00000012       FULLWORD POINTER                     11810000
CBUFPTR  EQU   00000000            FULLWORD POINTER                     11820000
CBUF     EQU   00000000            5 BYTE(S) ON WORD                    11830000
CBUFLNG  EQU   CBUF+00000000       HALFWORD POINTER                     11840000
CBUFOFF  EQU   CBUF+00000002       HALFWORD POINTER                     11850000
CBUFDATA EQU   CBUF+00000004       1 BYTE(S)                            11860000
PPL      EQU   00000000            28 BYTE(S) ON WORD                   11870000
PPLUPT   EQU   PPL+00000000        FULLWORD POINTER                     11880000
PPLECT   EQU   PPL+00000004        FULLWORD POINTER                     11890000
PPLECB   EQU   PPL+00000008        FULLWORD POINTER                     11900000
PPLPCL   EQU   PPL+00000012        FULLWORD POINTER                     11910000
PPLANS   EQU   PPL+00000016        FULLWORD POINTER                     11920000
PPLCBUF  EQU   PPL+00000020        FULLWORD POINTER                     11930000
PPLUWA   EQU   PPL+00000024        FULLWORD POINTER                     11940000
CSPL     EQU   00000000            24 BYTE(S) ON WORD                   11950000
CSPLUPT  EQU   CSPL+00000000       FULLWORD POINTER                     11960000
CSPLECT  EQU   CSPL+00000004       FULLWORD POINTER                     11970000
CSPLECB  EQU   CSPL+00000008       FULLWORD POINTER                     11980000
CSPLFLG  EQU   CSPL+00000012       FULLWORD POINTER                     11990000
CSPLOA   EQU   CSPL+00000016       FULLWORD POINTER                     12000000
CSPLCBUF EQU   CSPL+00000020       FULLWORD POINTER                     12010000
CSOAPTR  EQU   00000016            FULLWORD POINTER                     12020000
CSOA     EQU   00000000            8 BYTE(S) ON WORD                    12030000
CSOACNM  EQU   CSOA+00000000       FULLWORD POINTER                     12040000
CSOALNM  EQU   CSOA+00000004       HALFWORD INTEGER                     12050000
CSOAFLG  EQU   CSOA+00000006       1 BYTE(S)                            12060000
CSOAVWP  EQU   CSOA+00000006       1 BIT(S)                             12070000
CSOAVNP  EQU   CSOA+00000006       1 BIT(S)                             12080000
CSOAQM   EQU   CSOA+00000006       1 BIT(S)                             12090000
CSOANOC  EQU   CSOA+00000006       1 BIT(S)                             12100000
CSOABAD  EQU   CSOA+00000006       1 BIT(S)                             12110000
A00012   EQU   CSOA+00000006       1 BIT(S)                             12120000
A00013   EQU   CSOA+00000006       1 BIT(S)                             12130000
A00014   EQU   CSOA+00000006       1 BIT(S)                             12140000
A00015   EQU   CSOA+00000007       1 BYTE(S)                            12150000
DSNPDL   EQU   00000000            8 BYTE(S) ON WORD                    12160000
PTRDSN   EQU   DSNPDL+00000000     FULLWORD POINTER                     12170000
DSNLNG   EQU   DSNPDL+00000004     HALFWORD INTEGER                     12180000
DSNFLG   EQU   DSNPDL+00000006     1 BYTE(S)                            12190000
DSNNUL   EQU   DSNPDL+00000006     1 BIT(S)                             12200000
DSNQTE   EQU   DSNPDL+00000006     1 BIT(S)                             12210000
A00016   EQU   DSNPDL+00000006     6 BIT(S)                             12220000
A00017   EQU   DSNPDL+00000007     1 BYTE(S)                            12230000
PDLDNAM  EQU   00000000            44 BYTE(S)                           12240000
IMPMEM   EQU   00000000            8 BYTE(S) ON WORD                    12250000
         ORG   @DATA                                                    12260000
         DS    00000044C                                                12270000
@L       EQU   2                                                        12280000
@DATD    DSECT                                                          12290000
@SAV001  EQU   @DATD+00000000      72 BYTE(S) ON WORD                   12300000
TEM01    EQU   @DATD+00000072      FULLWORD INTEGER                     12310000
TEM02    EQU   @DATD+00000076      FULLWORD INTEGER                     12320000
TEM03    EQU   @DATD+00000080      FULLWORD INTEGER                     12330000
E01DATDF EQU   @DATD+00000088      362 BYTE(S) ON DWORD                 12340000
DCBAR    EQU   E01DATDF+00000000   88 BYTE(S) ON DWORD                  12350000
ADPTR1   EQU   E01DATDF+00000088   FULLWORD POINTER                     12360000
ADPTR2   EQU   E01DATDF+00000092   FULLWORD POINTER                     12370000
MMNAMAR  EQU   E01DATDF+00000096   8 BYTE(S) ON WORD                    12380000
RDECB    EQU   E01DATDF+00000104   20 BYTE(S) ON WORD                   12390000
A00000   EQU   E01DATDF+00000104   6 BYTE(S)                            12400000
DECLNGTH EQU   E01DATDF+00000110   HALFWORD INTEGER                     12410000
A00001   EQU   E01DATDF+00000112   8 BYTE(S)                            12420000
DECIOBPT EQU   E01DATDF+00000120   FULLWORD POINTER                     12430000
LINPTR1  EQU   E01DATDF+00000124   FULLWORD POINTER                     12440000
EOLCNT   EQU   E01DATDF+00000128   FULLWORD INTEGER                     12450000
POSCNT   EQU   E01DATDF+00000132   FULLWORD INTEGER                     12460000
TSTLNG   EQU   E01DATDF+00000136   FULLWORD INTEGER                     12470000
TSTLNGC  EQU   E01DATDF+00000136   4 BYTE(S)                            12480000
GMNMIN   EQU   E01DATDF+00000140   FULLWORD INTEGER                     12490000
GMNMAX   EQU   E01DATDF+00000144   FULLWORD INTEGER                     12500000
ADDGMN   EQU   E01DATDF+00000148   FULLWORD POINTER                     12510000
AMTGMN   EQU   E01DATDF+00000152   FULLWORD INTEGER                     12520000
SP78ADDR EQU   E01DATDF+00000156   FULLWORD POINTER                     12530000
SP78LNGT EQU   E01DATDF+00000160   FULLWORD POINTER                     12540000
RDXCNV   EQU   E01DATDF+00000164   FULLWORD INTEGER                     12550000
A00002   EQU   E01DATDF+00000164   3 BYTE(S)                            12560000
DDIG     EQU   E01DATDF+00000167   1 BYTE(S)                            12570000
POSSPC   EQU   E01DATDF+00000168   FULLWORD INTEGER                     12580000
ATABIND  EQU   E01DATDF+00000172   FULLWORD POINTER                     12590000
ATABCUR  EQU   E01DATDF+00000176   FULLWORD POINTER                     12600000
FTABIND  EQU   E01DATDF+00000180   FULLWORD POINTER                     12610000
FTABCUR  EQU   E01DATDF+00000184   FULLWORD POINTER                     12620000
VALCNT   EQU   E01DATDF+00000188   FULLWORD INTEGER                     12630000
KWOCNT   EQU   E01DATDF+00000192   HALFWORD INTEGER                     12640000
KWWCNT   EQU   E01DATDF+00000194   HALFWORD INTEGER                     12650000
KWOBYT   EQU   E01DATDF+00000196   HALFWORD INTEGER                     12660000
KWWBYT   EQU   E01DATDF+00000198   HALFWORD INTEGER                     12670000
CNVA     EQU   E01DATDF+00000200   HALFWORD INTEGER                     12680000
CNVC     EQU   E01DATDF+00000200   2 BYTE(S)                            12690000
E01BINSW EQU   E01DATDF+00000202   2 BYTE(S) ON HWORD                   12700000
E01SW1   EQU   E01DATDF+00000202   1 BIT(S)                             12710000
E01SW2   EQU   E01DATDF+00000202   1 BIT(S)                             12720000
E01SW3   EQU   E01DATDF+00000202   1 BIT(S)                             12730000
E01SW4   EQU   E01DATDF+00000202   1 BIT(S)                             12740000
E01SW5   EQU   E01DATDF+00000202   1 BIT(S)                             12750000
E01SW6   EQU   E01DATDF+00000202   1 BIT(S)                             12760000
E01SW7   EQU   E01DATDF+00000202   1 BIT(S)                             12770000
E01SW8   EQU   E01DATDF+00000202   1 BIT(S)                             12780000
E01SW9   EQU   E01DATDF+00000203   1 BIT(S)                             12790000
E01SW10  EQU   E01DATDF+00000203   1 BIT(S)                             12800000
E01SW11  EQU   E01DATDF+00000203   1 BIT(S)                             12810000
E01SW12  EQU   E01DATDF+00000203   1 BIT(S)                             12820000
E01SW13  EQU   E01DATDF+00000203   1 BIT(S)                             12830000
E01SW14  EQU   E01DATDF+00000203   1 BIT(S)                             12840000
E01SW15  EQU   E01DATDF+00000203   1 BIT(S)                             12850000
E01SW16  EQU   E01DATDF+00000203   1 BIT(S)                             12860000
REGSAV   EQU   E01DATDF+00000204   3*FULLWORD INTEGER                   12870000
LATAB    EQU   E01DATDF+00000216   FULLWORD POINTER                     12880000
LFTAB    EQU   E01DATDF+00000220   FULLWORD POINTER                     12890000
BFAPTR   EQU   E01DATDF+00000224   FULLWORD INTEGER                     12900000
BFBPTR   EQU   E01DATDF+00000228   FULLWORD POINTER                     12910000
CPPLPTR  EQU   E01DATDF+00000232   FULLWORD POINTER                     12920000
STPRM    EQU   E01DATDF+00000236   3*FULLWORD INTEGER                   12930000
PPLPTR   EQU   E01DATDF+00000248   FULLWORD POINTER                     12940000
CBCOR    EQU   E01DATDF+00000252   24 BYTE(S)                           12950000
SRECB    EQU   E01DATDF+00000276   FULLWORD INTEGER                     12960000
RETCDAR  EQU   E01DATDF+00000280   FULLWORD INTEGER                     12970000
ABLK1    EQU   E01DATDF+00000284   FULLWORD POINTER                     12980000
EOB      EQU   E01DATDF+00000288   FULLWORD POINTER                     12990000
RCDST    EQU   E01DATDF+00000292   FULLWORD POINTER                     13000000
VARSGLNG EQU   E01DATDF+00000296   1 BYTE(S)                            13010000
VARSGADR EQU   E01DATDF+00000297   3  BYTE  POINTER ON WORD+1           13020000
VARSGLN2 EQU   E01DATDF+00000300   1 BYTE(S)                            13030000
VARSGAD2 EQU   E01DATDF+00000301   3  BYTE  POINTER ON WORD+1           13040000
LVL1NO   EQU   E01DATDF+00000304   HALFWORD INTEGER                     13050000
LVL2NO   EQU   E01DATDF+00000306   HALFWORD INTEGER                     13060000
PDLPTR   EQU   E01DATDF+00000308   FULLWORD POINTER                     13070000
DRDNPTR  EQU   E01DATDF+00000312   46 BYTE(S) ON WORD                   13080000
DSNARLNG EQU   E01DATDF+00000312   HALFWORD INTEGER                     13090000
DSNARLCH EQU   E01DATDF+00000312   2 BYTE(S)                            13100000
DSNAMAR  EQU   E01DATDF+00000314   44 BYTE(S)                           13110000
CBUFLSAV EQU   E01DATDF+00000358   HALFWORD INTEGER                     13120000
CBUFLSAC EQU   E01DATDF+00000358   2 BYTE(S)                            13130000
POSBYT   EQU   E01DATDF+00000360   HALFWORD INTEGER                     13140000
DCBD     EQU   @DATD+00000088      88 BYTE(S) ON DWORD                  13150000
A00003   EQU   DCBD+00000000       26 BYTE(S)                           13160000
DCBDSORG EQU   DCBD+00000026       2 BYTE(S)                            13170000
A00004   EQU   DCBD+00000028       5 BYTE(S)                            13180000
DCBEODAD EQU   DCBD+00000033       3  BYTE  POINTER ON WORD+1           13190000
DCBRECFM EQU   DCBD+00000036       1 BYTE(S)                            13200000
DCBRCFF  EQU   DCBD+00000036       1 BIT(S)                             13210000
DCBRCFV  EQU   DCBD+00000036       1 BIT(S)                             13220000
DCBEXLST EQU   DCBD+00000037       3  BYTE  POINTER ON WORD+1           13230000
DCBDDNAM EQU   DCBD+00000040       8 BYTE(S)                            13240000
DCBOFLGS EQU   DCBD+00000048       1 BYTE(S)                            13250000
A00005   EQU   DCBD+00000049       1 BYTE(S)                            13260000
DCBMACR  EQU   DCBD+00000050       2 BYTE(S)                            13270000
A00006   EQU   DCBD+00000052       5 BYTE(S)                            13280000
DCBSYNAD EQU   DCBD+00000057       3  BYTE  POINTER ON WORD+1           13290000
A00007   EQU   DCBD+00000060       2 BYTE(S)                            13300000
DCBBLKSI EQU   DCBD+00000062       HALFWORD INTEGER                     13310000
A00008   EQU   DCBD+00000064       18 BYTE(S)                           13320000
DCBLRECL EQU   DCBD+00000082       HALFWORD INTEGER                     13330000
A00009   EQU   DCBD+00000084       4 BYTE(S)                            13340000
CLARE    EQU   @DATD+00000252      352 BIT(S) ON BYTE                   13350000
CSPLPTR  EQU   @DATD+00000336      FULLWORD POINTER                     13360000
         DS    00000450C                                                13370000
@TEMPS   DS    0F                                                       13380000
@TEMP2   DC    F'0'                                                     13390000
@CTEMP2  DS    CL001                                                    13400000
         CNOP   0,4                                                     13410000
RSTCK    DS    CL(ESTCK-SSTCK)     AREA FOR STACK MACRO                 13420000
          CNOP  0,4                                                     13430000
RCLO      DS    CL(ECLO-SCLO)      AREA FOR CLOSE MACRO                 13440000
          CNOP  0,4                                                     13450000
RSTAE    DS    CL(ESTAE-SSTAE)     AREA FOR STAE MACRO                  13460000
@DATD    DSECT                                                          13470000
@DATEND  EQU   *                                                        13480000
IKJEFE01 CSECT ,                                                        13490000
@9FA     EQU   E01SCN03                                                 13500000
@9F9     EQU   E01SCN03                                                 13510000
@9F1     EQU   E01MML10                                                 13520000
@9F0     EQU   E01CNT16                                                 13530000
@9EE     EQU   E01CNT15                                                 13540000
@9E3     EQU   E01CNT40                                                 13550000
@9DC     EQU   @EL01                                                    13560000
         END                                                            13570000
