         TITLE ' IKJEFE03 - EXEC PROCESSING MODULE'                     00010000
* GEN(TITLE  'IKJEFE03 - EXEC PROCESSING MODULE');                      00020000
         TITLE  'IKJEFE03 - EXEC PROCESSING MODULE'                     00030000
* IKJEFE03: PROC(DUMPARM)                                               00040000
*                 OPTIONS (DONTSAVE(1,15),CODEREG(9,11),REENTRANT);     00050000
         LCLA  &T,&SPN                                            0002  00060000
.@001    ANOP                                                     0002  00070000
IKJEFE03 CSECT ,                                                  0002  00080000
         ST    @E,12(0,@D)                                        0002  00090000
         ST    @0,20(0,@D)                                        0002  00100000
         STM   @2,@C,28(@D)                                       0002  00110000
         BALR  @9,0                                               0002  00120000
@PSTART  DS    0H                                                 0002  00130000
         USING @PSTART+00000,@9                                   0002  00140000
         LA    @B,4095(0,@9)                                      0002  00150000
         USING @PSTART+04095,@B                                   0002  00160000
         LR    @C,@1                                              0002  00170000
         L     @0,@SIZ001                                         0002  00180000
         GETMAIN  R,LV=(0)                                        0002  00190000
         XR    @C,@1                                              0002  00200000
         XR    @1,@C                                              0002  00210000
         XR    @C,@1                                              0002  00220000
         USING @DATD+00000,@C                                     0002  00230000
         L     @0,20(0,@D)                                        0002  00240000
         XC    @TEMPS(@L),@TEMPS                                  0002  00250000
         ST    @D,@SAV001+4                                       0002  00260000
         LA    @F,@SAV001                                         0002  00270000
         ST    @F,8(0,@D)                                         0002  00280000
         LR    @D,@F                                              0002  00290000
* /******************************************************************** 00300000
* /*                                                                  * 00310000
* /*  STATUS:                                                         * 00320000
* /*     CHANGE LEVEL 000                                             * 00330000
* /*    A200700,371100-371180,836100,836200,681600              YM2699* 00340000
* /*    A843100-843200,843600,843940,642800,643100              YM2699* 00350000
* /*    A645200,645700,680100-680460,680700,681200              YM2699* 00360000
* /*    A461100-463585,490100-490300,518100-518400              Y02676* 00370000
* /*    C841000-843500,642500,645000,645500,646500              Y02676* 00380000
* /*    C647500,680500,6810,,682500                             Y02676* 00390000
* /*    D643000,681500                                          Y02676* 00400000
* /*    A490600,518600                                          Y02676* 00410000
* /*    C490500,518500                                          Y02676* 00420000
* /*    C127000,127500,156500                                   Y01676* 00430000
* /*    A156600-156700,474600,371200                            Y01676* 00440000
* /*    A555520-555800                                          A42619* 00450000
* /*                                                            20035 * 00460000
* /*                                                                  * 00470000
* /*  FUNCTION:                                                       * 00480000
* /*     THIS MODULE FIRST CHECKS THE E01 SWITCHES TO DETERMINE       * 00490000
* /*     IF IT WAS CALLED TO PERFORM A GETMAIN, FREEMAIN, OR READ     * 00500000
* /*     FOR ONE OF THE OTHER EXEC MODULES. IF THIS IS THE CASE,      * 00510000
* /*     A POINTER IS SET TO THE ADDRESS IN E03 TO WHICH CONTROL      * 00520000
* /*     SHOULD BE RETURNED AFTER THE FUNCTION IS PERFORMED, AND      * 00530000
* /*     A BRANCH IS MADE TO THE APPROPRIATE AREA IN THIS MODULE      * 00540000
* /*     (THESE AREAS ARE DESCRIBED LATER).                           * 00550000
* /*                                                                  * 00560000
* /*     NEXT, IF THERE WAS A PROC STATEMENT, THE INPUT RECORD        * 00570000
* /*     IS SCANNED UNTIL AN AMPERSAND IS FOUND. IF NONE IS           * 00580000
* /*     FOUND (OR IF THERE WAS NO PROC STATEMENT), INDICATORS        * 00590000
* /*     ARE SET TO INDICATE THIS, AND THE ROUTINE WHICH MOVES        * 00600000
* /*     THE DATA INTO SUBPOOL 78 IS ENTERED. IF AN AMPERSAND WAS     * 00610000
* /*     FOUND, A CHECK IS MADE TO FIND IF IT WAS THE FIRST OF        * 00620000
* /*     A DOUBLE AMPERSAND. IF THIS IS THE CASE, THE INDICATORS      * 00630000
* /*     ARE SET SUCH THAT ONE AMPERSAND WILL BE MOVED TO SUBPOOL     * 00640000
* /*     78 IN PLACE OF THE TWO IN THE PROCEDURE. IF THE              * 00650000
* /*     AMPERSAND WAS NOT ONE OF TWO CONSECUTIVE AMPERSANDS, THE     * 00660000
* /*     SEARCH ROUTINE IS ENTERED.                                   * 00670000
* /*                                                                  * 00680000
* /*     THE SEARCH ROUTINE STEPS THROUGH ALL THE ELEMENTS OF         * 00690000
* /*     ATAB COMPARING EACH SYMBOLIC PARAMETER IN ATAB TO THE        * 00700000
* /*     ONE ENCOUNTERED AFTER THE AMPERSAND. IF NO MATCH IS FOUND,   * 00710000
* /*     THE NON-EXECUTABLE SWITCH IS TURNED ON, THE MESSAGE          * 00720000
* /*     MODULE IS LINKED TO IN ORDER TO PUT A MESSAGE TO THE         * 00730000
* /*     TERMINAL, AND A BRANCH IS MADE TO THE MOVE ROUTINE.          * 00740000
* /*     IF THE SYMBOLIC PARAMETER WAS DEFINED IN ATAB, THE           * 00750000
* /*     VALUE LOCATER ROUTINE IS ENTERED. THIS ROUTINE OBTAINS       * 00760000
* /*     THE LENGTH AND ADDRESS OF THE VALUE TO BE SUBSTITUTED        * 00770000
* /*     FOR THE OCCURRENCE OF THE PARAMETER.                         * 00780000
* /*                                                                  * 00790000
* /*     NEXT, THE MOVE ROUTINE IS ENTERED. THIS ROUTINE FIRST        * 00800000
* /*     CHECKS IF THE PROC HAS BEEN MARKED NON-EXECUTABLE.           * 00810000
* /*     IF IT IS BEEN SO MARKED, THE MOVE ROUTINE IS SKIPPED.        * 00820000
* /*     OTHERWISE, TWO MOVES ARE MADE. IN THE FIRST, ANY PORTION     * 00830000
* /*     OF THE INPUT LINE BEFORE THE AMPERSAND WHICH HAS NOT         * 00840000
* /*     BEEN MOVED ALREADY IS MOVED TO SUBPOOL 78. THE VALUE         * 00850000
* /*     FOR THE SYMBOLIC PARAMETER IS MOVED INTO SUBPOOL             * 00860000
* /*     78 CORE.                                                     * 00870000
* /*                                                                  * 00880000
* /*     AFTER THIS, THE UPDATE ROUTINE IS ENTERED. THIS ROUTINE      * 00890000
* /*     UPDATES ALL THE POINTERS ASSOCIATED WITH THE INPUT           * 00900000
* /*     RECORD, INITIATING A READ IF NECESSARY, AND RECYCLES TO      * 00910000
* /*     THE SCAN ROUTINE.                                            * 00920000
* /*                                                                  * 00930000
* /*     THE FOLLOWING ARE OPEN SUBROUTINES WHICH PERFORM SER-        * 00940000
* /*     VICES FOR OTHER MODULES AND FOR ROUTINES IN THIS MODULE.     * 00950000
* /*                                                                  * 00960000
* /*     READ ROUTINE - PASSES INPUT RECORD ADDRESS TO THE            * 00970000
* /*     CALLER AND PERFORMS A BSAM READ WHEN NECESSARY.              * 00980000
* /*                                                                  * 00990000
* /*     GETMAIN ROUTINE - PERFORMS CONDITIONAL GETMAINS.             * 01000000
* /*                                                                  * 01010000
* /*     FREEMAIN ROUTINE - PERFORMS FREEMAINS.                       * 01020000
* /*                                                                  * 01030000
* /*     EOD ROUTINE - END OF DATA ROUTINE. ENTERED WHEN END OF DATA  * 01040000
* /*     IS ENCOUNTERED ON THE INPUT DATA SET. A CHECK IS MADE        * 01050000
* /*     TO FIND IF THE PROC IN SP78 IS CONTIGUOUS. IF IT IS NOT,     * 01060000
* /*     A GETMAIN IS PERFORMED FOR THE TOTAL SIZE OF THE PROC, AND   * 01070000
* /*     THE NON-CONTIGUOUS PROC IS COPIED INTO THE NEWLY OBTAINED    * 01080000
* /*     CORE SO THAT IT IS NOW CONTIGUOUS. IF THE PROC WAS ALREADY   * 01090000
* /*     CONTIGUOUS, WE FREE ANY EXCESS CORE IN SP78 WHICH WE MAY     * 01100000
* /*     HAVE GOTTEN. IN EITHER CASE RETURN IS MADE TO E01.           * 01110000
* /*                                                                  * 01120000
* /*     SYNAD ROUTINE - THIS ROUTINE IS ENTERED WHEN AN I/O          * 01130000
* /*     ERROR HAS OCCURRED. THE MESSAGE MODULE IS LINKED TO          * 01140000
* /*     IN ORDER TO PUT OUT A MESSAGE TO THE TERMINAL. THEN THE      * 01150000
* /*     THE NON-EXECUTABLE SWITCH IS SET ON, AND RETURN IS MADE      * 01160000
* /*     TO E01 TO TERMINATE.                                         * 01170000
* /*                                                                  * 01180000
* /*  ENTRY POINTS:                                                   * 01190000
* /*     IKJEFE03 - ONLY ENTRY POINT. REASON FOR BEING CALLED         * 01200000
* /*     IS DETERMINED FROM THE SWITCHES IN E01DATDF.                 * 01210000
* /*                                                                  * 01220000
* /*  INPUT:                                                          * 01230000
* /*     REGISTER 1 POINTS TO E01DATDF WHICH IS A STRUCTURE USED BY   * 01240000
* /*     ALL FOUR MODULES (E01,E02,E03,E04) FOR COMMUNICATION.        * 01250000
* /*     (SEE 'TABLES/WORK-AREAS' FOR DESCRIPTIONN)                     01260000
* /*                                                                  * 01270000
* /*  OUTPUT:                                                         * 01280000
* /*     IF CALLED FOR A FREEMAIN - NONE                              * 01290000
* /*     IF CALLED FOR A GETMAIN  - ADDGMN IS THE ADDRESS OF THE CORE * 01300000
* /*                                GOTTEN (SEE 'TABLES/WORK-AREAS')  * 01310000
* /*                              - AMTGMN IS THE AMOUNT OF CORE THAT * 01320000
* /*                                WAS OBTAINED ('TABLES/WORKAREAS') * 01330000
* /*     IF CALLED FOR A READ     - LINPTR1 CONTAINS THE ADDRESS OF   * 01340000
* /*                                THE INPUT RCD                     * 01350000
* /*                                (SEE 'TABLES/WORKAREAS')          * 01360000
* /*     IF CALLED FOR MOVING PROC TO SP78 -                          * 01370000
* /*                                SP78ADDR CONTAINS THE ADDRESS OF  * 01380000
* /*                                THE SP78 CORE                     * 01390000
* /*                                (SEE 'TABLES/WORKAREAS')          * 01400000
* /*                              - SP78LNGT CONTAINS THE LENGTH OF   * 01410000
* /*                                THE SP78 CORE                     * 01420000
* /*                                (SEE 'TABLES/WORK-AREAS')         * 01430000
* /*                                                                  * 01440000
* /*  EXTERNAL REFERENCES:                                            * 01450000
* /*     TABLES, ATAB AND FTAB, ARE REFERENCED                        * 01460000
* /*     BUT NOT ALTERED. (NOTE TABLES/WORKAREAS BELOW)               * 01470000
* /*                                                                  * 01480000
* /*     EO1DATDF - IS A STRUCTURE USED BY ALL FOUR MODULES.          * 01490000
* /*                                                                  * 01500000
* /*     BSAM - USED TO READ THE DATA SET CONTAINING THE PROCEDURE    * 01510000
* /*                                                                  * 01520000
* /*  EXITS, NORMAL:                                                  * 01530000
* /*     ALL EXITS ARE RETURNS TO THE CALLER.  SWITCHES SET IN        * 01540000
* /*     E01DATDF INDICATE STATUS OF FUNCTION REQUESTED.              * 01550000
* /*                                                                  * 01560000
* /*  EXITS, ERROR:                                                   * 01570000
* /*     ERROR EXITS ARE THE SAME AS NORMAL EXITS. EXCEPT FOR         * 01580000
* /*     DIFFERENT SWITCH SETTINGS.                                   * 01590000
* /*                                                                  * 01600000
* /* TABLES/WORK AREAS:                                               * 01610000
* /*    ATAB   (DOUBLE WORD BOUNDARY)                                 * 01620000
* /*      |---------------------------------------------------------| * 01630000
* /*   +0 |ADDRESS OF PREVIOUS BLOCK OF ATAB                        | * 01640000
* /*      |---------------------------------------------------------| * 01650000
* /*   +4 |ADDRESS OF NEXT BLOCK OF ATAB                            | * 01660000
* /*      |---------------------------------------------------------| * 01670000
* /*   +8 |LENGTH OF THIS BLOCK (IN BYTES)                          | * 01680000
* /*      |---------------------------------------------------------| * 01690000
* /*   +12|     E                                                   | * 01700000
* /*      |            L                                            | * 01710000
* /*      |                   E                                     | * 01720000
* /*      |                          M                              | * 01730000
* /*      |                                 E                       | * 01740000
* /*      |                                        N                | * 01750000
* /*      |                                               T         | * 01760000
* /*      |                                                      S  | * 01770000
* /*      |---------------------------------------------------------| * 01780000
* /*                                                                  * 01790000
* /*    ATAB ELEMENT (BYTE BOUNDARY)                                  * 01800000
* /*      |---------------------------------------------------------| * 01810000
* /*      |FOR KEYWORD WITH VALUE AND POSITIONAL PARAMETERS THIS    | * 01820000
* /*      |IS A PTR TO THE CORRESPONDING FTAB ELEMENT               | * 01830000
* /*      |FOR KEYWORD W/O VALUE PARAMETERS A ZERO INDICATES THE    | * 01840000
* /*      |KEYWORD WAS NOT PRESENT ON THE INVOCATION STATEMENT, AND | * 01850000
* /*   +0 |A ONE INDICATES THAT IT WAS PRESENT.                     | * 01860000
* /*      |---------------------------------------------------------| * 01870000
* /*   +4 |FLAG BYTE       |LENGTH                        |SYMBOLIC | * 01880000
* /*      |---------------------------------------------------------| * 01890000
* /*      |PARAMETER NAME                                           | * 01900000
* /*      |---------------------------------------------------------| * 01910000
* /*         WHERE: FLAG BYTE IS-                                     * 01920000
* /*                    BIT 0=1 IF THIS IS A KEYWORD WITH VALUE       * 01930000
* /*                    BIT 1=1 IF THIS IS A KEYWORD W/O VALUE        * 01940000
* /*                    BIT 2=1 IF THIS IS THE LAST ELMT IN THIS      * 01950000
* /*                            BLOCK OF ATAB                         * 01960000
* /*                LENGTH BYTE IS-                                   * 01970000
* /*                    LENGTH IN BYTES OF THE SYMBOLIC PARAMETER     * 01980000
* /*                    NAME WHICH FOLLOWS                            * 01990000
* /*                                                                  * 02000000
* /*    FTAB   (WORD BOUNDARY)                                        * 02010000
* /*      |---------------------------------------------------------| * 02020000
* /*   +0 |ADDRESS OF PREVIOUS BLOCK OF FTAB                        | * 02030000
* /*      |---------------------------------------------------------| * 02040000
* /*   +4 |ADDRESS OF NEXT BLOCK OF FTAB                            | * 02050000
* /*      |---------------------------------------------------------| * 02060000
* /*   +8 |TOTAL LENGTH OF THIS BLOCK  |NUMBER OF BYTES IN USE      | * 02070000
* /*      |---------------------------------------------------------| * 02080000
* /*   +12|     E                                                   | * 02090000
* /*      |            L                                            | * 02100000
* /*      |                   E                                     | * 02110000
* /*      |                          M                              | * 02120000
* /*      |                                   E                     | * 02130000
* /*      |                                            N            | * 02140000
* /*      |                                                  T      | * 02150000
* /*      |                                                        S| * 02160000
* /*      |---------------------------------------------------------| * 02170000
* /*                                                                  * 02180000
* /*    FTAB ELEMENT (BYTE BOUNDARY)                                  * 02190000
* /*      |---------------------------------------------------------| * 02200000
* /*   +0 |LENGTH OF THE SYMBOLIC PARAMETER VALUE WHICH FOLLOWS     | * 02210000
* /*      |---------------------------------------------------------| * 02220000
* /*      |VALUE ASSOCIATED WITH A SYMBOLIC PARAMETER NAME IN ATAB  | * 02230000
* /*      |---------------------------------------------------------| * 02240000
* /*                                                                  * 02250000
* /*    E01DATDF (DOUBLE WORD BOUNDARY)                               * 02260000
* /*      |---------------------------------------------------------| * 02270000
* /*   +0 |DCB FOR DATA SET CONTAINING COMMAND PROCEDURE            | * 02280000
* /*      |---------------------------------------------------------| * 02290000
* /*   +88|POINTER USED FOR INDIRECT ADDRESSING                     | * 02300000
* /*      |---------------------------------------------------------| * 02310000
* /*   +92|POINTER USED FOR INDIRECT ADDRESSING                     | * 02320000
* /*      |---------------------------------------------------------| * 02330000
* /*   +96|NAME OF PDS MEMBER WHICH CONTAINS THE PROC               | * 02340000
* /*      |---------------------------------------------------------| * 02350000
* /*  +104|DECB FOR THE READ MACRO                                  | * 02360000
* /*      |---------------------------------------------------------| * 02370000
* /*  +124|POINTER TO INPUT RECORD FROM PROC                        | * 02380000
* /*      |---------------------------------------------------------| * 02390000
* /*  +128|NO. OF BYTES ON INPUT RCD WHICH HAVE NOT BEEN PROCESSED  | * 02400000
* /*      |---------------------------------------------------------| * 02410000
* /*  +132|NO. OF POSITIONAL PARAMETERS FOUND ON THE PROC STATEMENT | * 02420000
* /*      |---------------------------------------------------------| * 02430000
* /*  +136|WORK AREA - ALSO USED TO PASS ADDRESS OF CORE TO BE FREED| * 02440000
* /*      |  BY MODULE E03                                          | * 02450000
* /*      |---------------------------------------------------------| * 02460000
* /*  +140|MINIMUM AMOUNT OF CORE NEEDED FROM A GETMAIN             | * 02470000
* /*      |---------------------------------------------------------| * 02480000
* /*  +144|MAXIMUM AMOUNT OF CORE NEEDED FROM A GETMAIN             | * 02490000
* /*      |---------------------------------------------------------| * 02500000
* /*  +148|ADDRESS OF CORE OBTAINED VIA GETMAIN                     | * 02510000
* /*      |---------------------------------------------------------| * 02520000
* /*  +152|AMOUNT OF CORE OBTAINED VIA GETMAIN                      | * 02530000
* /*      |---------------------------------------------------------| * 02540000
* /*  +156|ADDRESS OF SUBPOOL 78 CORE WHICH BELONGS TO US           | * 02550000
* /*      |---------------------------------------------------------| * 02560000
* /*  +160|LENGTH OF SUBPOOL 78 CORE WHICH BELONGS TO US            | * 02570000
* /*      |---------------------------------------------------------| * 02580000
* /*  +164|WORK AREA                                                | * 02590000
* /*      |---------------------------------------------------------| * 02600000
* /*  +168|NO. OF POSITIONAL PARMS SPECIFIED ON THE PROC STMT       | * 02610000
* /*      |---------------------------------------------------------| * 02620000
* /*  +172|POINTER TO CURRENT BLOCK OF ATAB                         | * 02630000
* /*      |---------------------------------------------------------| * 02640000
* /*  +176|POINTER TO CURRENT ELEMENT OF ATAB                       | * 02650000
* /*      |---------------------------------------------------------| * 02660000
* /*  +180|POINTER TO CURRENT BLOCK OF FTAB                         | * 02670000
* /*      |---------------------------------------------------------| * 02680000
* /*  +184|POINTER TO CURRENT ELEMENT OF FTAB                       | * 02690000
* /*      |---------------------------------------------------------| * 02700000
* /*  +188|NO. OF BYTES IN VALUE PART OF KEYWORD WITH VALUE         | * 02710000
* /*      |---------------------------------------------------------| * 02720000
* /*  +192|NO. OF KEYWORD W/O VALUE PARMS DEFINED IN PROC STMT      | * 02730000
* /*      |---------------------------------------------------------| * 02740000
* /*  +194|NO. OF KEYWORD WITH VALUE PARMS DEFINED IN PROC STMT     | * 02750000
* /*      |---------------------------------------------------------| * 02760000
* /*  +196|TOTAL BYTES IN ALL KEYWORD W/O VALUE PARMS               | * 02770000
* /*      |---------------------------------------------------------| * 02780000
* /*  +198|TOTAL BYTES IN ALL KEYWORD WITH VALUE PARMS              | * 02790000
* /*      |---------------------------------------------------------| * 02800000
* /*  +200|WORK AREA                                                | * 02810000
* /*      |---------------------------------------------------------| * 02820000
* /*  +202|SWITCHES                                                 | * 02830000
* /*      | BIT 0  - SET TO ONE WHEN PROCESSING IMPLICIT EXEC       | * 02840000
* /*      | BIT 1  - SET TO ONE WHEN E03 IS CALLED TO READ FIRST    | * 02850000
* /*      |          LINE OF PROC                                   | * 02860000
* /*      | BIT 2  - SET TO ONE IF PROCEDURE HAS NO PROC STATEMENT  | * 02870000
* /*      | BIT 3  - SET TO ONE IF NO PROC STMT AND FIRST LINE OF   | * 02880000
* /*      |          PROC IS NOT EMPTY                              | * 02890000
* /*      | BIT 4  - SET TO ONE WHEN AN ABEND HAS OCCURRED          | * 02900000
* /*      | BIT 5  - SET TO ONE WHEN THE PROMPT OPTION WAS    Y01676| * 02910000
* /*      |          SPECIFIED ON THE INVOCATION STATEMENT    Y01676| * 02920000
* /*      | BIT 6  - SET TO ONE WHEN E03 IS CALLED TO READ A RCD    | * 02930000
* /*      |          OTHER THAN THE FIRST                           | * 02940000
* /*      | BIT 7  - SET TO ONE IF RECORD FORMAT IS VARIABLE        | * 02950000
* /*      | BIT 8  - TERMINATION SWITCH (SET TO ONE IF PROC IS      | * 02960000
* /*      |          NON-EXECUTABLE)                                | * 02970000
* /*      | BIT 9  - SET TO ONE IF E03 HAS BEEN CALLED FOR A GETMAIN| * 02980000
* /*      | BIT 10 - SET TO ONE WHEN DATA SET IS NULL               | * 02990000
* /*      | BIT 11 - SET TO ONE WHEN CORE HAS BEEN OBTAINED FROM    | * 03000000
* /*      |          SUBPOOL 78                                     | * 03010000
* /*      | BIT 12 - SET TO ONE WHEN E03 HAS BEEN CALLED TO DO A    | * 03020000
* /*      |          FREEMAIN                                       | * 03030000
* /*      | BIT 13 - UNUSED                                         | * 03040000
* /*      | BIT 14 - SET TO ONE WHEN THE MINIMUM AMOUNT OF CORE     | * 03050000
* /*      |          NEEDED COULD NOT BE OBTAINED                   | * 03060000
* /*      | BIT 15 - SET TO ONE WHEN THE LIST OPTION WAS SPECIFIED  | * 03070000
* /*      |          ON THE INVOCATION STATEMENT                    | * 03080000
* /*      |---------------------------------------------------------| * 03090000
* /*  +204|WORK AREA                                                | * 03100000
* /*      |---------------------------------------------------------| * 03110000
* /*  +216|POINTER TO CURRENT ATAB ELEMENT - 1                      | * 03120000
* /*      |---------------------------------------------------------| * 03130000
* /*  +220|POINTER TO FTAB ELEMENT - 1                              | * 03140000
* /*      |---------------------------------------------------------| * 03150000
* /*  +224|POINTER TO FIRST INPUT BUFFER                            | * 03160000
* /*      |---------------------------------------------------------| * 03170000
* /*  +228|POINTER TO SECOND INPUT BUFFER                           | * 03180000
* /*      |---------------------------------------------------------| * 03190000
* /*  +232|POINTER TO CMD PROCESSOR PARAMETER LIST                  | * 03200000
* /*      |---------------------------------------------------------| * 03210000
* /*  +236|PARAMETERS TO BE PASSED TO STAE EXIT ROUTINE             | * 03220000
* /*      |---------------------------------------------------------| * 03230000
* /*  +248|POINTER TO PARSE CONTROL LIST                            | * 03240000
* /*      |---------------------------------------------------------| * 03250000
* /*  +252|STORAGE FOR SERVICE ROUTINE CONTROL BLOCK                | * 03260000
* /*      |---------------------------------------------------------| * 03270000
* /*  +276|ECB FOR SERVICE ROUTINES                                 | * 03280000
* /*      |---------------------------------------------------------| * 03290000
* /*  +280|AREA FOR HOLDING RETURN CODES INTERNAL TO EXEC           | * 03300000
* /*      |---------------------------------------------------------| * 03310000
* /*  +284|POINTER TO FIRST BLOCK OF ATAB                           | * 03320000
* /*      |---------------------------------------------------------| * 03330000
* /*  +288|END OF CURRENT INPUT BLOCK + 1                           | * 03340000
* /*      |---------------------------------------------------------| * 03350000
* /*  +292|POINTER TO START OF RECORD CURRENTLY BEING PROCESSED     | * 03360000
* /*      |---------------------------------------------------------| * 03370000
* /*  +296|LENGTH OF DYNAMIC PORTION OF MSG TO BE PUT TO TERMINAL   | * 03380000
* /*      |---------------------------------------------------------| * 03390000
* /*  +297|ADDRESS OF DYNAMIC PORTION OF MSG TO BE PUT TO TERMINAL  | * 03400000
* /*      |---------------------------------------------------------| * 03410000
* /*  +300|ID NUMBER OF FIRST LEVEL MSG TO BE PUT TO TERMINAL       | * 03420000
* /*      |---------------------------------------------------------| * 03430000
* /*  +302|ID NUMBER OF SECOND LEVEL MSG TO BE PUT TO TERMINAL      | * 03440000
* /*      |---------------------------------------------------------| * 03450000
* /*  +304|POINTER TO THE PARSE DESCRIPTOR LIST                     | * 03460000
* /*      |---------------------------------------------------------| * 03470000
* /*  +308|AREA FOR SAVING THE ORIGINAL LENGTH OF THE COMMAND BUFFER| * 03480000
* /*      |---------------------------------------------------------| * 03490000
* /*  +310|TOTAL BYTES IN ALL POSITIONAL PARAMETERS           Y01676| * 03500000
* /*      |---------------------------------------------------Y01676| * 03510000
* /*  +312||                                                    Y01676* 03520000
* /*                                                                  * 03530000
* /*                                                                  * 03540000
* /*  ATTRIBUTES:                                                     * 03550000
* /*     REENTRANT                                                    * 03560000
* /*                                                                  * 03570000
* /*  NOTES:                                                          * 03580000
* /*     CONSTANTS BEGIN WITH THE LETTERS 'KON' FOLLOWED BY THE       * 03590000
* /*     VALUE OF THE CONSTANT IF IT IS EITHER A DECIMAL OR EBCDIC    * 03600000
* /*     CONSTANT.  IF IT IS A HEX CONSTANT, THE 'KON' IS FOLLOWED    * 03610000
* /*     BY 'X' AND THE VALUE OF THE CONSTANT.                        * 03620000
* /*     CHARACTER CODE DEPENDENCIES --                               * 03630000
* /*        MODULE WAS ASSEMBLED USING EBCDIC CHARACTER CODE.         * 03640000
* /*        MODULE MUST BE MODIFIED IF A DIFFERENT CHARACTER SET      * 03650000
* /*        IS USED.                                                  * 03660000
* /*        DEPENDENCIES EXIST FOR THE FOLLOWING CHARACTERISITICS OF  * 03670000
* /*        EBCDIC:                                                   * 03680000
* /*          1.HORIZONTAL TAB IS X'05'.                              * 03690000
* /*        STATEMENTS WHICH CONTAIN THESE DEPENDENCIES WILL HAVE     * 03700000
* /*        ASTERISKS IN THEIR COMMENT FIELDS.                        * 03710000
* /*                                                                  * 03720000
* /******************************************************************** 03730000
* /******************************************************************** 03740000
*                                                                       03750000
*         GEN;                                                          03760000
&SPN     SETA  1                                                        03770000
         DS    0H                                                       03780000
*         DCL  DUMPARM  FIXED(31);                                      03790000
*         DCL   R0   REG(0)    PTR(31);       /* REGISTER 0           * 03800000
*         DCL   R1   REG(1)    PTR(31);       /* REGISTER 1           * 03810000
*         DCL   R2   REG(2)    PTR(31);       /* REGISTER 2           * 03820000
*         DCL   R3   REG(3)    PTR(31);       /* REGISTER 3           * 03830000
*         DCL   R4   REG(4)    PTR(31);       /* REGISTER 4           * 03840000
*         DCL   R5   REG(5)    PTR(31);       /* REGISTER 5           * 03850000
*         DCL   R6   REG(6)    PTR(31);       /* REGISTER 6           * 03860000
*         DCL   R15 REG(15)    PTR(31);       /* REGISTER 15          * 03870000
*  /*                                                                   03880000
*                         THE FOLLOWING IS A DSECT OF                   03890000
*                         VARIABLES DEFINED IN IKJEFE01                 03900000
*                         AND USED BY IKJEFE03                          03910000
*                                                                     * 03920000
*         DCL   KON0      FIXED(15) STATIC INIT(0);/* CONSTANT        * 03930000
*         DCL   KON1      FIXED(15) STATIC INIT(1);/* CONSTANT        * 03940000
*         DCL   KON2      FIXED(15) STATIC INIT(2);/* CONSTANT        * 03950000
*         DCL   KON3      FIXED(15) STATIC INIT(3);/* CONSTANT        * 03960000
*         DCL   KON4      FIXED(15) STATIC INIT(4);/* CONSTANT        * 03970000
*         DCL   KON5      FIXED(15) STATIC INIT(5);/* CONSTANT        * 03980000
*         DCL   KON7      FIXED(15) STATIC INIT(7);/* CONSTANT        * 03990000
*         DCL   KON8       FIXED(15) STATIC INIT(8);/* CONSTANT       * 04000000
*         DCL   KON11      FIXED(15) STATIC INIT(11);                   04010000
*                                                  /* CONSTANT        * 04020000
*         DCL   KON12      FIXED(15) STATIC INIT(12);                   04030000
*                                                  /* CONSTANT        * 04040000
*         DCL   KON13      FIXED(15) STATIC INIT(13);                   04050000
*                                                  /* CONSTANT        * 04060000
*         DCL   KON14      FIXED(15) STATIC INIT(14);                   04070000
*                                                  /* CONSTANT        * 04080000
*         DCL   KON15      FIXED(15) STATIC INIT(15);                   04090000
*                                                  /* CONSTANT        * 04100000
*         DCL   KON16      FIXED(15) STATIC INIT(16);                   04110000
*                                                  /* CONSTANT        * 04120000
*         DCL   KON50      FIXED(15) STATIC INIT(50);                   04130000
*                                                  /* CONSTANT        * 04140000
*         DCL   KON78      FIXED(15) STATIC INIT(78);                   04150000
*                                                  /* CONSTANT        * 04160000
*         DCL   KON82      FIXED(15) STATIC INIT(82);                   04170000
*                                                  /* CONSTANT        * 04180000
*         DCL   KON256       FIXED(15) STATIC INIT(256);                04190000
*                                                  /* CONSTANT        * 04200000
*                                                                       04210000
*          /* THE FOLLOWING CONSTANT IS USED AS THE AMOUNT OF STORAGE * 04220000
*          /* TO BE OBTAINED FROM SUBPOOL 78 FOR STACKING THE         * 04230000
*          /* PROCEDURE. IT SET TO 1992 SINCE THE TMP AND I/O SERVICE * 04240000
*          /* ROUTINES INITIALLY GET 56 BYTES. THUS OUR GETMAIN WILL  * 04250000
*          /* NOT REQUIRE THAT AN ADDITIONAL 2K BLOCK                 * 04260000
*          /* BE ALLOTED TO SUBPOOL 78. IF THE AMOUNT WHICH THE TMP   * 04270000
*          /* OR I/O SERVICE ROUTINES GET INCREASES - THIS CONSTANT   * 04280000
*          /* SHOULD BE DECREASED BY AN EQUAL AMOUNT.                 * 04290000
*         DCL   KON1992      FIXED(15) STATIC INIT(1992);               04300000
*                                                  /* CONSTANT        * 04310000
*         DCL 1 KONSTRUC  STATIC,             /* HEXADECIMAL CONSTANTS* 04320000
*               2 KONX00  CHAR(1)  INIT('00'X),    /* CONSTANT        * 04330000
*               2 KONX20  CHAR(1)  INIT('20'X),    /* CONSTANT        * 04340000
*               2 KONXFF  CHAR(1)  INIT('FF'X),    /* CONSTANT        * 04350000
*               2 KON7FFC CHAR(2)  INIT('7FFC'X);  /* CONSTANT  YM2699* 04360000
*         DCL 1  E01DATDF BDY(DWORD)  BASED(R6),   /* MAJOR STRUCTURE * 04370000
*                                             /*   USED BY ALL FOUR   * 04380000
*                                             /*   MODULES            * 04390000
*                2 DCBAR     CHAR(88)  BDY(DWORD),                      04400000
*                                                  /* LIVE DCB AREA   * 04410000
*                                                                       04420000
*                2 ADPTR1    PTR(31),              /* PTR USED FOR      04430000
*                                                       INDIRECT ADDRS* 04440000
*                2 ADPTR2    PTR(31),              /* FOR INDIRECT      04450000
*                                                       ADDRESSING    * 04460000
*                2 MMNAMAR   BDY(WORD) CHAR(8),                         04470000
*                                                  /* MEMBER NAME     * 04480000
*                2  RDECB   BDY(WORD) CHAR(20),                         04490000
*                                                  /* STORAGE FOR DECB* 04500000
*                  3 *        CHAR(6),        /* FILLER               * 04510000
*                  3 DECLNGTH FIXED(15),      /* LENGTH OF BLOCK READ * 04520000
*                  3 *        CHAR(8),        /* FILLER               * 04530000
*                  3 DECIOBPT PTR(31),        /* POINTER TO THE IOB   * 04540000
*                2 LINPTR1   PTR(31),         /* ADDR OF INPUT        * 04550000
*                2 EOLCNT    FIXED(31),       /* BYTES REMAINING        04560000
*                                                  IN LINE            * 04570000
*                2 POSCNT    FIXED(31),       /* NUMBER OF POSITIONAL   04580000
*                                                  PARAMETERS FOUND   * 04590000
*                2 TSTLNG    FIXED(31),       /* WORK AREA - USED FOR * 04600000
*                  3 TSTLNGC   CHAR(4),       /* ALIGNING TABLE ENTRY * 04610000
*                2 GMNMIN    FIXED(31),       /* MINIMUM AMOUNT OF CORE 04620000
*                                                 TO BE GOTTEN        * 04630000
*                2 GMNMAX    FIXED(31),      /* MAXIMUM AMOUNT OF CORE  04640000
*                                                 TO BE GOTTEN        * 04650000
*                2 ADDGMN    PTR(31),        /* ADDRESS OF GOTTEN CORE* 04660000
*                2 AMTGMN    FIXED(31),      /* AMOUNT OF CORE GOTTEN * 04670000
*                2 SP78ADDR  PTR(31),        /* PTR TO SUBPOOL78 CORE * 04680000
*                2 SP78LNGT  PTR(31),        /* LENGTH OF SUBPOOL78     04690000
*                                                 CORE                * 04700000
*                2 RDXCNV  FIXED(31),        /* WORK AREA FOR           04710000
*                  3  *     CHAR(3),              CONVERTING BASE     * 04720000
*                  3  DDIG   CHAR(1),        /* OF NO. PARMS          * 04730000
*                2 POSSPC    FIXED(31),      /* NUMBER OF POSITIONAL    04740000
*                                                 PARAMERS SPECIFIED  * 04750000
*                2 ATABIND   PTR(31),        /*  PTR TO START OF        04760000
*                                                  CURRENT BLOCK OF     04770000
*                                                  ATAB               * 04780000
*                2 ATABCUR   PTR(31),        /*  PTR TO CURRENT         04790000
*                                                  ELEMENT OF ATAB    * 04800000
*                2 FTABIND   PTR(31),        /*  PTR TO START OF        04810000
*                                                  CURRENT BLOCK OF     04820000
*                                                  FTAB               * 04830000
*                2 FTABCUR   PTR(31),         /* PTR TO CURRENT         04840000
*                                                  ELEMENT OF ATAB    * 04850000
*                2 VALCNT    FIXED(31),       /* NUMBER OF BYTES IN     04860000
*                                                  VALUE OF KEYWORD     04870000
*                                                  WITH VALUE         * 04880000
*                2 KWOCNT    FIXED(15),       /* NUMBER OF KWRD W/O     04890000
*                                                  VALUE PARMS        * 04900000
*                2 KWWCNT    FIXED(15),       /* NUMBER OF KWRD WITH    04910000
*                                                  VALUE PARMS        * 04920000
*                2 KWOBYT    FIXED(15),       /* SIZE OF KWRD W/O       04930000
*                                                  VALUE PARMS        * 04940000
*                2 KWWBYT    FIXED(15),       /* SIZE OF KWRD W/O       04950000
*                                                  VALUE PARMS        * 04960000
*                2 CNVA   FIXED(15),          /*WORKAREA FOR UNALIGNED* 04970000
*                  3 CNVC   CHAR(2),          /* ARITHMETIC ITEMS     * 04980000
*                2 E01BINSW BDY(HWORD),       /* BINARY SWITCHES      * 04990000
*                  3 E01SW1 BIT(1),           /* SWITCH 1             * 05000000
*                                             /* SET TO ONE WHEN        05010000
*                                                   PROCESSING          05020000
*                                                   IMPLICIT EXEC     * 05030000
*                  3 E01SW2 BIT(1),            /* SWITCH 2            * 05040000
*                                              /* SET TO ONE WHEN       05050000
*                                                   IKJEFE03 IS CALL-   05060000
*                                                   ED TO READ 1ST      05070000
*                                                   LINE              * 05080000
*                  3 E01SW3 BIT(1),            /* SWITCH 3            * 05090000
*                                              /* SET TO ONE IF THE     05100000
*                                                   PROCEDURE DOES      05110000
*                                                    NOT HAVE A PROC    05120000
*                                                    STATEMENT        * 05130000
*                  3 E01SW4 BIT(1),             /* SWITCH 4           * 05140000
*                                               /* SET TO ONE IF 1ST    05150000
*                                                    LINE IS NOT EMPTY  05160000
*                                                                     * 05170000
*                  3 E01SW5 BIT(1),             /* SWITCH 5           * 05180000
*                                               /* SET TO ONE ON AN     05190000
*                                                    ABEND            * 05200000
*                  3 E01SW6 BIT(1),             /* SWITCH 6           * 05210000
*                                               /* SET TO ONE WHEN      05220000
*                                                    THE PROMPT OPTION  05230000
*                                                    WAS SPECIFIED ON   05240000
*                                                      THE INVOCATION   05250000
*                                                    STATEMENT        * 05260000
*                  3 E01SW7 BIT(1),              /* SWITCH 7          * 05270000
*                                                /* SET TO ONE WHEN     05280000
*                                                    IKJEFE03 IS CALL-  05290000
*                                                    ED TO READ LINE    05300000
*                                                    OTHER THAN 1ST   * 05310000
*                  3 E01SW8 BIT(1),              /* SWITCH 8          * 05320000
*                                                /* SET TO ONE IF RCD   05330000
*                                                    FMT IS VARIABLE  * 05340000
*                  3 E01SW9 BIT(1),              /* SWITCH 9          * 05350000
*                                                /* SET TO ONE IF PROC  05360000
*                                                     CANNOT BE EXECUT- 05370000
*                                                     ED              * 05380000
*                  3 E01SW10 BIT(1),             /* SWITCH 10         * 05390000
*                                                /* SET TO ONE WHEN     05400000
*                                                     IKFEFE03 HAS BEEN 05410000
*                                                     CALLED TO DO A    05420000
*                                                     GETMAIN         * 05430000
*                  3 E01SW11 BIT(1),             /* SWITCH 11         * 05440000
*                                                /* SET TO ONE WHEN     05450000
*                                                     DATA SET HAS BEEN 05460000
*                                                     CLOSED          * 05470000
*                  3 E01SW12 BIT(1),             /* SWITCH 12         * 05480000
*                                                /* SET TO ONE WHEN     05490000
*                                                     CORE HAS BEEN     05500000
*                                                     OBTAINED FROM SP  05510000
*                                                     78              * 05520000
*                  3 E01SW13 BIT(1),             /* SWITCH 13         * 05530000
*                                                /* SET TO ONE WHEN     05540000
*                                                     IKFEFE03 HAS BEEN 05550000
*                                                     CALLED TO DO A    05560000
*                                                     FREEMAIN        * 05570000
*                  3 E01SW14 BIT(1),             /* SWITCH 14         * 05580000
*                                                /* SET TO ONE WHEN     05590000
*                                                     SP78 OVFLOW HAS   05600000
*                                                     CAUSED SP0 TO BE  05610000
*                                                     OBTAINED        * 05620000
*                  3 E01SW15 BIT(1),             /* SET TO ONE WHEN     05630000
*                                                     THE  MINIMUM AMT  05640000
*                                                     OF CORE COULD NOT 05650000
*                                                     BE GOTTEN       * 05660000
*                  3 E01SW16 BIT(1),             /* SWITCH 16         * 05670000
*                2 REGSAV(3) FIXED(31),          /* SAVE AREA         * 05680000
*                2 LATAB   PTR(31),              /* PTR TO PREVIOUS ATA 05690000
*                                                ELEMENT              * 05700000
*                2 LFTAB   PTR(31),           /* PTR TO PREVIOUS FTAB   05710000
*                                                ELEMENT              * 05720000
*                2 BFAPTR  FIXED(31),         /* POINTER TO INPUT BFR * 05730000
*                2 BFBPTR  PTR(31),           /* POINTER TO INPUT BFR * 05740000
*                2 CPPLPTR   PTR(31),         /* ADDRESS OF CPPL      * 05750000
*                2 STPRM(3)  FIXED(31),                                 05760000
*                2 PPLPTR PTR(31),            /* POINTER TO CONTROL   * 05770000
*                2 CBCOR CHAR(24),            /* STORAGE FOR SERVICE    05780000
*                                                  ROUTINE CONTROL BLCK 05790000
*                                                  BLOCK FOR SERVICE    05800000
*                                                  ROUTINES FOR LIST  * 05810000
*                2 SRECB  FIXED(31),          /* SERV ROUT ECB        * 05820000
*                2 RETCDAR   FIXED(31),       /* AREA FOR RETURN        05830000
*                                                  CODE               * 05840000
*                2 ABLK1     PTR(31),         /* PTR TO FIRST BLOCK     05850000
*                                                  OF ATAB            * 05860000
*                2 EOB       PTR(31),         /* END OF CURRENT INPUT   05870000
*                                                  BLOCK + 1          * 05880000
*                2 RCDST     PTR(31),         /* PTR TO START OF CUR-   05890000
*                                                  RENT RECORD        * 05900000
*                2 VARSGLNG  CHAR(1),         /* LENGTH OF VARIABLE     05910000
*                                                  PART OF MSG TO BE    05920000
*                                                  PUT OUT            * 05930000
*                2 VARSGADR  PTR(24),         /* ADDRESS OF VARIABLE    05940000
*                                                  PART OF MSG TO BE    05950000
*                                                  PUT OUT            * 05960000
*         2 VARSGLN2  CHAR(1),                /*  LENGTH OF VARIABLE  * 05970000
*                                             /*    PART OF MSG TO BE * 05980000
*                                             /*    PUT OUT           * 05990000
*                2 VARSGAD2  PTR(24),         /*  ADDRESS OF VARIABLE * 06000000
*                                             /*    PART OF MSG TO BE * 06010000
*                                             /*    PUT OUT           * 06020000
*                2 LVL1NO    FIXED(15),       /* NUMBER OF FIRST LEVEL* 06030000
*                                             /*   MESSAGE            * 06040000
*                2 LVL2NO    FIXED(15),       /*NUMBER OF SECOND LEVEL* 06050000
*                                             /*    MESSAGE           * 06060000
*                2 PDLPTR    PTR(31),         /* POINTER TO THE PARSE * 06070000
*                                             /*   DESCRIPTOR LIST    * 06080000
*               2 DRDNPTR BDY(WORD),          /* AREA FOR DSNAME      * 06090000
*                 3 DSNARLNG FIXED(15),       /* LENGTH OF DSNAME     * 06100000
*                   4 DSNARLCH CHAR(2),       /*                      * 06110000
*                 3 DSNAMAR  CHAR(44),        /* DSNAME               * 06120000
*                2 CBUFLSAV  FIXED(15),       /* SAVE AREA FOR CMD BFR* 06130000
*                 3 CBUFLSAC CHAR(2);         /*    LENGTH            * 06140000
** /* *************************************************************** * 06150000
** /* THE COMMAND PROCESSOR PARAMETER LIST (CPPL) IS A LIST OF        * 06160000
** /* ADDRESSES PASSED FROM THE TMP TO THE CP VIA REGISTER 1          * 06170000
** /* *************************************************************** * 06180000
** DECLARE                                                              06190000
**   1 CPPL BASED(CPPLPTR),                                             06200000
**    2 CPPLCBUF PTR(31),             /* PTR TO COMMAND BUFFER        * 06210000
**    2 CPPLUPT  PTR(31),             /* PTR TO UPT                   * 06220000
**    2 CPPLPSCB PTR(31),             /* PTR TO PSCB                  * 06230000
**    2 CPPLECT  PTR(31);             /* PTR TO ECT                   * 06240000
**                                                                      06250000
*         DCL   CBUFPTR   PTR(31) BASED(ADDR(CPPLCBUF));                06260000
*         DCL 1 CBUF BASED(CBUFPTR),          /* NAME OF TABLE        * 06270000
*               2 CBUFLNG PTR(16),            /* TOTAL LENGTH OF CBUF * 06280000
*               2 CBUFOFF PTR(16),            /* CURRENT DATA FIELD   * 06290000
*                                             /*   OFFSET             * 06300000
*               2 CBUFDATA CHAR(1);           /* VAR LENGTH DATA FIELD* 06310000
*         DCL   1 DCBD    BDY(DWORD) BASED(ADDR(DCBAR)),                06320000
*                                             /* DSECT -DCBFIELDS     * 06330000
*                 2  *        CHAR(26),       /* FILL                 * 06340000
*                 2 DCBDSORG  CHAR(2),        /* DS ORGANIZATION      * 06350000
*                 2  *        CHAR(5),        /* FILL                 * 06360000
*                 2 DCBEODAD  PTR(24),        /* END DATA EXIT        * 06370000
*                 2 DCBRECFM  CHAR(1),        /* RECORD FMT           * 06380000
*                    3 DCBRCFF   BIT(1),      /* FIXED LENGTH BIT     * 06390000
*                    3 DCBRCFV   BIT(1),      /* VAR LENGTH BIT       * 06400000
*                 2 DCBEXLST  PTR(24),        /* OPEN TIME EXIT       * 06410000
*                 2 DCBDDNAM  CHAR(8),        /* DDNAME               * 06420000
*                 2 DCBOFLGS  CHAR(1),        /* OPEN FLAGS           * 06430000
*                 2  *        CHAR(1),        /* FILL                 * 06440000
*                 2 DCBMACR   CHAR(2),        /* MACRO TYPE           * 06450000
*                 2  *        CHAR(10),       /* FILL                 * 06460000
*                 2 DCBBLKSI  FIXED(15),      /* BLOCKSIZE            * 06470000
*                 2  *        CHAR(18),        /* FILL                * 06480000
*                 2 DCBLRECL  FIXED(15),       /* RECORD SIZE         * 06490000
*                 2  *        CHAR(4);         /* FILL                * 06500000
*         DCL   E03PRT05   LABEL   LOCAL   EXTERNAL;                    06510000
*         DCL   E03SYN05   LABEL   LOCAL   EXTERNAL;                    06520000
*  /*                                                                   06530000
*                         FOLLOWING ARE THE DSECTS OF                   06540000
*                         ATAB AND FTAB                                 06550000
*                                                                     * 06560000
*         DCL   1 ATAB      BDY(WORD)  BASED(ATABIND),                  06570000
*                                             /* ARGUMENT TABLE       * 06580000
*                 2 ATABLST    PTR(31),       /* PTR TO PREVIOUS BLOCK  06590000
*                                                ZERO IF NONE PREVIOUS* 06600000
*                 2 ATABNXT    PTR(31),       /* PTR TO NEXT BLOCK -    06610000
*                                                ZERO IF THIS IS LAST * 06620000
*                 2 ATABLNG    FIXED(31);     /* LENGTH OF THIS BLOCK * 06630000
*         DCL   1 FTAB      BDY(WORD)  BASED(FTABIND),                  06640000
*                                             /* FUNCTION TABLE       * 06650000
*                 2 FTABLST    PTR(31),       /* PTR TO PREVIOUS BLOCK  06660000
*                                                ZERO IF NONE PREVIOUS* 06670000
*                 2 FTABNXT    PTR(31),       /* PTR TO NEXT BLOCK -    06680000
*                                                ZERO IF THIS IS LAST * 06690000
*                 2 FTABLNG    FIXED(15),     /* LENGTH OF THIS BLOCK * 06700000
*                 2 FTABDLNG   FIXED(15);     /* NUMBER OF BYTES OF     06710000
*                                                  THIS BLOCK WHICH     06720000
*                                                  ARE IN USE         * 06730000
*                                                                       06740000
*         DCL   1 ATABELMT  BDY(WORD)  BASED(FTABCUR),                  06750000
*                                             /* ARGUMENT ELEMENT     * 06760000
*                 2 FTABPTR    CHAR(4),       /* PTR TO CORRESPONDING   06770000
*                                                  FTAB ELEMENT       * 06780000
*                 2 ATABFLGS   CHAR(1),       /* FLAGS FOR ATAB         06790000
*                                                BIT 0 = KWRD W. VALUE  06800000
*                                                BIT 1 = KWRD WO VALUE  06810000
*                                                BIT 2 = LAST ENTRY   * 06820000
*                 2 ATABELNC   CHAR(2),       /* LENGTH OF SYMBOLIC     06830000
*                                                 PARAMETER           * 06840000
*                 2 ATABDAT    CHAR(256);     /* SYMBOLIC PARAMETER   * 06850000
*         DCL   1 FTABELMT  BDY(WORD)  BASED(FTABCUR),                  06860000
*                                             /* FUNCTION ELEMENT     * 06870000
*                 2 FTABELNG   CHAR(4),       /* LENGTH OF THIS VALUE * 06880000
*                 2 FTABDAT    CHAR(256);     /* VALUE FOR CORRESPONDIN 06890000
*                                                  SYMBOLIC PARAMETER * 06900000
* /*                      FOLLOWING ARE VARIABLES USED                  06910000
*                         FOR PROCESSING INPUT                        * 06920000
*         DCL   OFFSET    PTR(31);            /* PTR TO PORTION OF      06930000
*                                                 INPUT RECORD WHICH    06940000
*                                                 IS BEING PROCESSED  * 06950000
*         DCL   INPLIN    CHAR(32767)  BASED(OFFSET);                   06960000
*                                             /* DSECT OF INPUT       * 06970000
*         DCL   RCDLNG    CHAR(2)      BASED(RCDST);                    06980000
*         DCL   RCDLNGA   FIXED(15)           /* PTR TO LENGTH OF RCD * 06990000
*                         BASED(BFBPTR);      /*   FOR VARIABLE FMT   * 07000000
*         DCL   REMCHAR   FIXED(15);          /* NUMBER OF BYTES NOT    07010000
*                                                  YET PROCESSED IN     07020000
*                                                  THE INPUT RCD      * 07030000
*         DCL   REMCHARC  CHAR(2)             /* NUMBER OF BYTES NOT  * 07040000
*                 BASED(ADDR(REMCHAR));       /*   YET PROCESSED IN THE 07050000
*                                                  INPUT RCD          * 07060000
*         DCL   LINENO    CHAR(8);           /* HOLD AREA FOR LINE      07070000
*                                                 NUMBER              * 07080000
*         DCL   1 IOB  BDY(WORD)  BASED(DECIOBPT), /* INPUT - OUTPUT    07090000
*                                                     BLOCK           * 07100000
*                 2 *          CHAR(14),      /* FILLER               * 07110000
*                 2 CSWCNT     FIXED(15);     /* RESIDUAL BYTE COUNT    07120000
*                                                 FROM LAST READ      * 07130000
*  /*                                                                   07140000
*                         FOLLOWING ARE VARIABLES USED                  07150000
*                         FOR PROCESSING OUTPUT                         07160000
*                                                                     * 07170000
*         DCL   AVL78     FIXED(15);          /* NUMBER OF BYTES OF     07180000
*                                                  CURRENT SP78 CORE    07190000
*                                                  NOT IN USE         * 07200000
*         DCL   PRMSTR    PTR(31);            /* PTR TO FIRST BLOCK OF  07210000
*                                                  SP78 CORE          * 07220000
*         DCL   PROCIND   PTR(31);            /* PTR TO START OF RCD    07230000
*                                                  BEING CREATED IN     07240000
*                                                  SP78               * 07250000
*         DCL   PROCUR    PTR(31);            /* PTR TO PORTION OF RCD  07260000
*                                                  CURRENTLY BEING      07270000
*                                                  PROCESSED          * 07280000
*         DCL   PROCDAT   CHAR(32767)  BASED(PROCUR);                   07290000
*                                             /* DSECT OF OUTPUT RCD  * 07300000
*         DCL   PROCRCL   CHAR(2)      BASED(PROCIND);                  07310000
*                                             /* RCD LENGTH INDICATOR * 07320000
*         DCL   PROCRCLF  FIXED(15)    BASED(PROCIND);  /* REDEF OF     07330000
*                                                RCD LENGTH     YM2699* 07340000
*         DCL   PROCRES   BIT(16)      BASED(PROCIND + 2);              07350000
*                                             /* TWO BYTES OF ZERO      07360000
*                                                  AFTER LRECL TO SEEM  07370000
*                                                  COMPATIBLE WITH DM * 07380000
*         DCL   PROCNXT   PTR(31)      BASED(ADDGMN);                   07390000
*                                             /* PTR TO NEXT BLOCK OF   07400000
*                                                  SP78 CORE - ZERO IF  07410000
*                                                  THIS BLOCK IS LAST * 07420000
*         DCL   PROCSZE   FIXED(31)    BASED(ADDGMN + 4);               07430000
*                                             /* SIZE OF THIS BLOCK OF  07440000
*  /*                                                                   07450000
*                         FOLLOWING ARE VARIABLES USED                  07460000
*                         FOR PROCESSING IN GENERAL                     07470000
*                                                                     * 07480000
*         DCL   1 E03BINSW     BDY(BYTE),     /* BINARY SWITCHES      * 07490000
*                 2 E03SW1     BIT(1),        /* SET TO ONE WHEN THE    07500000
*                                                  LOGICAL LINE IS      07510000
*                                                  CONTINUED BETWEEN    07520000
*                                                  RECORDS            * 07530000
*                 2 E03SW2     BIT(1),        /* SET TO ONE IF CURRENT  07540000
*                                                  PARM IS KWRD WO      07550000
*                                                  VALUE              * 07560000
*                 2 E03SW3     BIT(1),        /* SET TO ONE WE HAVE     07570000
*                                                  MORE THAN ONE BLOCK  07580000
*                                                  OF SP78 CORE       * 07590000
*                 2 E03SW4     BIT(1),        /* SET TO ONE AFTER       07600000
*                                                  LIST FORMS OF        07610000
*                                                  GETMAIN - FREEMAIN   07620000
*                                                  HAVE BEEN MOVED TO   07630000
*                                                  GOTTEN CORE        * 07640000
*                 2 E03SW5   BIT(1),          /* SET TO ONE IF        * 07650000
*                   3 CONTPLUS   BIT(1),      /* PLUS SIGN CONTINUATION 07660000
*                                                HAS BEEN REQUESTED   * 07670000
*                 2 E03SW6   BIT(1),          /* SET TO ONE IF A      * 07680000
*                   3 ENDDLM   BIT(1),        /* A COMMENT IS CONTINUED 07690000
*                                                ACROSS INPUT RECORDS * 07700000
*                 2 E03SW7   BIT(1),          /* SET TO ONE IF THE    * 07710000
*                   3 NULLINE   BIT(1),       /* CONTINUATION RECORD    07720000
*                                                IS BLANK OR CONTAINS   07730000
*                                                COMMENTS ONLY        * 07740000
*                 2 *          BIT(1);        /* FILLER               * 07750000
*         DCL   TEMP01    FIXED(31);          /* TEMPORARY WORK AREA    07760000
*                                                  USED FOR HOLDING     07770000
*                                                  STARTING OFFSET OF * 07780000
*                                                                       07790000
*         DCL   TEMP02    FIXED(31);          /* TEMPORARY WORK AREA    07800000
*                                                  USED FOR HOLDING END 07810000
*                                                  OFFSET  OF SYMBOLIC  07820000
*                                                  PARMS              * 07830000
*         DCL   TEMP03    FIXED(31);          /* TEMPORARY WORK AREA    07840000
*                                                  USED FOR LOOP CONTRO 07850000
*                                                  FINDING IF WE NEED   07860000
*                                                  MORE SP78 CORE AND   07870000
*                                                  HOLDING PARM LENGTH* 07880000
*         DCL   TEMP04    FIXED(31);          /* TEMPORARY WORK AREA    07890000
*                                                  USED FOR HOLDING THE 07900000
*                                                  LENGTH OF PARM'S     07910000
*                                                  VALUE AND IN GETTING 07920000
*                                                  ADDITIONAL SP78      07930000
*                                                  CORE               * 07940000
*         DCL                                                 /*Y02993* 07950000
*               1  TEMP05    FIXED(31),                       /*Y02993* 07960000
*                 2  TEMPC05  CHAR(4);        /* TEMPORARY WORK AREA    07970000
*                                                  USED IN OBTAINING    07980000
*                                                  ADDITIONAL SP78 CORE 07990000
*                                                  AND FOR READING      08000000
*                                                  RCDS         Y02993* 08010000
*         DCL   CURBLK  PTR(31);              /* ADDRESS OF THE CURRENT 08020000
*                                                SP78 CLIST AREA USED   08030000
*                                                WHEN CLIST RECORDS ARE 08040000
*                                                SPANNED ACROSS SP78    08050000
*                                                BLOCKS         YM2699* 08060000
*         DCL                                 /* USED TO        YM2699* 08070000
*              1  RECSIZE  FIXED(31),         /* CALCULATE THE  YM2699* 08080000
*                2 RECSIZEC CHAR(4);          /* TOTAL SP78 CLIST RECOR 08090000
*                                                SIZE           YM2699* 08100000
*         DCL   I   FIXED(31);                /* INDEX COUNTER  Y01676* 08110000
*         DCL   INDAD1    LABEL  BASED(ADPTR1);/* LABEL USED FOR        08120000
*                                                  INDIRECT ADDRESSING* 08130000
*         DCL   TRTAB(256)  CHAR(1)           /* TABLE USED BY TRANS- * 08140000
*                         INIT((80)'00'X,'&',(175)'00'X);               08150000
*                                             /*   LATE AND TEST TO     08160000
*                                                  FIND AMPERSANDS    * 08170000
*          DCL   1 TCHAR     CHAR(5)  STATIC, /* CHARACTERS USED FOR  * 08180000
*                 2 KBLNK  CHAR(1)   INIT(' '),   /* FINDING THE END  * 08190000
*                 2 KCOM   CHAR(1)   INIT(','),   /* OF A SYMBOLIC    * 08200000
*                 2 KTAB   CHAR(1)   INIT('05'X), /******************** 08210000
*                 2 KAMP   CHAR(1)   INIT('&'),   /* PARAMETER        * 08220000
*                 2 KPERD  CHAR(1)   INIT('.');                         08230000
*         DCL   KCONT     CHAR(1)  INIT('-')  STATIC;                   08240000
*         DCL   KCONTP     CHAR(1) INIT('+') STATIC;                    08250000
*                                             /* CONTINUATION CHARS   * 08260000
*         DCL   KONSLAST   CHAR(2) INIT('/*') STATIC;                   08270000
*         DCL   KONASTSL   CHAR(2) INIT('*/') STATIC;                   08280000
*         DCL   E03CNT05  LABEL;              /* STATEMENT LABEL      * 08290000
*         DCL   E03CNT10  LABEL;              /* STATEMENT LABEL      * 08300000
*         DCL   E03CNT20  LABEL;              /* STATEMENT LABEL      * 08310000
*         DCL   E03CNT25  LABEL;              /* STATEMENT LABEL      * 08320000
*         DCL   E03ITO10  LABEL;              /* STATEMENT LABEL      * 08330000
*         DCL   E03ITO20  LABEL;              /* STATEMENT LABEL      * 08340000
*         DCL   E03UAR10  LABEL;              /* STATEMENT LABEL      * 08350000
*         DCL   E03PRT15  LABEL;              /* STATEMENT LABEL      * 08360000
*         DCL   E03PRT20  LABEL;              /* STATEMENT LABEL      * 08370000
*         DCL   E03PRT25  LABEL;              /* STATEMENT LABEL      * 08380000
*         DCL   E03PRT35  LABEL;              /* STATEMENT LABEL      * 08390000
*         DCL   E03OAB15  LABEL;              /* STATEMENT LABEL      * 08400000
*         DCL   E03PRT40  LABEL;              /* STATEMENT LABEL      * 08410000
*         DCL   E03PRT30  LABEL;              /* STATEMENT LABEL      * 08420000
*         DCL   AAGETM   CHAR(256)  GEND;                               08430000
*         DCL   AAFREM   CHAR(256)  GEND;                               08440000
*         /************************************************************ 08450000
*         /*              FOLLOWING IS THE RUNNING CODE               * 08460000
*         /*              FOR THE MODULE                              * 08470000
*         /************************************************************ 08480000
*         RESTRICT     (R2,R3,R4,R5,R6);                                08490000
*         R6  = R1;                           /* SET POINTER TO DATA    08500000
*                                                IN MODULE IKJEFE01   * 08510000
         LR    @6,@1                                              0095  08520000
*                                                                       08530000
*         /************************************************************ 08540000
*         /*              FOLLOWING CODE DETERMINES THE               * 08550000
*         /*              PURPOSE FOR WHICH THE MODULE                * 08560000
*         /*              WAS CALLED AND IF CALLED FOR A              * 08570000
*         /*              GETMAIN, FREEMAIN OR READ IT                * 08580000
*         /*              SETS APROPRIATE VARIABLES AND               * 08590000
*         /*              BRANCHES TO APROPRIATE ROUTINE              * 08600000
*         /*              BRANCHES TO APROPRIATE ROUTINE              * 08610000
*         /************************************************************ 08620000
*         IF  E01SW2 = '1'B | E01SW7 = '1'B   /* IF MODULE WAS CALLED * 08630000
*           THEN                              /* PERFORM A READ - SET * 08640000
         TM    202(@6),B'01000000'                                0096  08650000
         BC    01,@9FF                                            0096  08660000
         TM    202(@6),B'00000010'                                0096  08670000
         BC    12,@9FE                                            0096  08680000
*             DO;                             /* THE RETURN ADDRESS   * 08690000
*               E03BINSW  = KONX00;           /* INITIALIZE SWITCHES  * 08700000
@9FF     MVC   E03BINSW(1),KONSTRUC                               0098  08710000
*               TEMP01 = ADPTR1;                                        08720000
         MVC   TEMP01(4),88(@6)                                   0099  08730000
*               ADPTR1 = ADDR(E03CNT05);      /* FOR READ AND ENTER   * 08740000
         LA    @F,E03CNT05                                        0100  08750000
         ST    @F,88(0,@6)                                        0100  08760000
*               GOTO E03IMR05;                /* READ ROUTINE         * 08770000
         BC    15,E03IMR05                                        0101  08780000
*             END;                                                      08790000
*         IF  E01SW10 = '1'B                  /* IF CALLED TO EXECUTE * 08800000
*           THEN                              /*   GETMAIN            * 08810000
@9FE     TM    203(@6),B'01000000'                                0103  08820000
         BC    12,@9FD                                            0103  08830000
*             DO;                                                       08840000
*               GEN(MVC   AAGETM,DDGETM);     /*   SET RETURN         * 08850000
         MVC   AAGETM,DDGETM                                            08860000
         DS    0H                                                       08870000
*               ADPTR1 = ADDR(E03CNT10);      /*   ADDRESS AND GO TO  * 08880000
         LA    @F,E03CNT10                                        0106  08890000
         ST    @F,88(0,@6)                                        0106  08900000
*               GOTO E03GMN05;                /*   GETMAIN ROUTINE    * 08910000
         BC    15,E03GMN05                                        0107  08920000
*             END;                            /* ELSE                 * 08930000
*         IF  E01SW13 = '1'B                  /* IF CALLED TO EXECUTE * 08940000
*           THEN                              /*   FREEMAIN           * 08950000
@9FD     TM    203(@6),B'00001000'                                0109  08960000
         BC    12,@9FC                                            0109  08970000
*             DO;                             /*   SET RETURN         * 08980000
*               GEN(MVC   AAFREM,DDFREM);                               08990000
         MVC   AAFREM,DDFREM                                            09000000
         DS    0H                                                       09010000
*               ADPTR1 = ADDR(E03CNT10);      /*   ADDRESS AND GO TO  * 09020000
         LA    @F,E03CNT10                                        0112  09030000
         ST    @F,88(0,@6)                                        0112  09040000
*               R2  = ADDR(TSTLNG);           /* SET PTR TO BLOCK GO  * 09050000
         LA    @2,136(0,@6)                                       0113  09060000
*               GOTO E03FMN05;                /*   TO FREEMAIN        * 09070000
         BC    15,E03FMN05                                        0114  09080000
*             END;                            /* ELSE                 * 09090000
*         GOTO  E03CNT15;                     /* MODULE WAS CALLED TO   09100000
*                                                PROCESS A PROCEDURE  * 09110000
* E03CNT05: LINPTR1 = RCDST;                  /* RETURN POINT FOR READ  09120000
*                                                POINT TO RCD JUST    * 09130000
E03CNT05 MVC   124(4,@6),292(@6)                                  0117  09140000
*         ADPTR1 = TEMP01;                    /*   READ               * 09150000
         MVC   88(4,@6),TEMP01                                    0118  09160000
* E03CNT10: RETURN;                           /* RETURN POINT FOR       09170000
*                                                GETMAIN AND            09180000
*                                                FREEMAIN RETURNS TO    09190000
*                                                CALLING MODULE       * 09200000
         BC    15,@EL01                                           0119  09210000
*                                                                       09220000
*         /************************************************************ 09230000
*         /*              FOLLOWING CODE PREPARES FOR                 * 09240000
*         /*            PROCESSING A CMD PROCEDURE BY                 * 09250000
*         /*              READING A RCD IF NECESSARY,                 * 09260000
*         /*              DOING A GETMAIN IF NECESSARY                * 09270000
*         /*              AND INITIALIZING VARIABLES                  * 09280000
*         /************************************************************ 09290000
* E03CNT15: E03BINSW  = KONX00;               /* INITIALIZE SWITCHES  * 09300000
E03CNT15 MVC   E03BINSW(1),KONSTRUC                               0120  09310000
*         GEN;                                                          09320000
         MVC   AAGETM,DDGETM                 /* MOVING LIST FORM     */ 09330000
         MVC   AAFREM,DDFREM                 /*   TO DYNAMIC CORE    */ 09340000
         DS    0H                                                       09350000
*         IF E01SW3 = '0'B | E01SW4 = '0'B    /* IF THERE WAS A PROC  * 09360000
*           THEN                              /*   STATEMENT OR THE   * 09370000
         TM    202(@6),B'00100000'                                0122  09380000
         BC    08,@9FB                                            0122  09390000
         TM    202(@6),B'00010000'                                0122  09400000
         BC    05,@9FA                                            0122  09410000
*             DO;                             /*   FIRST LINE OF      * 09420000
*               ADPTR1 = ADDR(E03CNT20);      /*   PROCDURE WAS       * 09430000
@9FB     LA    @F,E03CNT20                                        0124  09440000
         ST    @F,88(0,@6)                                        0124  09450000
*               GOTO E03IMR05;                /*   EMPTY- SET RETURN  * 09460000
         BC    15,E03IMR05                                        0125  09470000
*             END;                            /*   ADDRESS AND GOTO     09480000
*                                                  READ A RCD         * 09490000
* E03CNT20:                                   /* RETURN POINT         * 09500000
*         IF  E01SW8 = '1'B                   /* IF RCD FMT IS        * 09510000
*           THEN                              /*   VARIABLE           * 09520000
@9FA     EQU   *                                                  0127  09530000
E03CNT20 TM    202(@6),B'00000001'                                0127  09540000
         BC    12,@9F9                                            0127  09550000
*             DO;                             /*   ALIGN RCD LENGTH   * 09560000
*               CNVC = RCDLNG;                /*   INDICATOR AND      * 09570000
         L     @7,292(0,@6)                                       0129  09580000
         MVC   200(2,@6),0(@7)                                    0129  09590000
*               GMNMIN = CNVA + KON16;        /*   AND CALCULATE LEAST* 09600000
         LH    @F,KON16                                           0130  09610000
         AH    @F,200(0,@6)                                       0130  09620000
         ST    @F,140(0,@6)                                       0130  09630000
         BC    15,@9F8                                            0132  09640000
*             END;                            /*   AMT OF CORE NEEDED * 09650000
*           ELSE                              /* IF RCD FMT IS FIXED  * 09660000
*             GMNMIN = DCBLRECL + KON16;      /*   USE DCB RCD LENGTH   09670000
*                                                  FOR CALCULATING THE  09680000
*                                                  GETMAIN MINIMUM    * 09690000
@9F9     LH    @F,KON16                                           0132  09700000
         AH    @F,82(0,@6)                                        0132  09710000
         ST    @F,140(0,@6)                                       0132  09720000
*         IF  E01SW9 = '1'B                   /* IF PROC IS NOT EXEC- * 09730000
*           THEN                              /*   UTABLE BYPASS      * 09740000
@9F8     TM    203(@6),B'10000000'                                0133  09750000
*             GOTO E03SPL05;                  /*   GETMAIN            * 09760000
         BC    01,E03SPL05                                        0134  09770000
*         R4  = KON78;                        /* SET SUBPOOL INDICATOR* 09780000
         LH    @4,KON78                                           0135  09790000
*                                                                       09800000
*         /* NOTE- SEE COMMENT ON KON1992 FOR AN EXPLANATION OF THE   * 09810000
*         /*       DEPENDENCY OF THIS CONSTANT ON THE TMP AND I/O     * 09820000
*         /*       SERVICE ROUTINES                                   * 09830000
*         GMNMAX  = KON1992;                  /* SET NEW GETMAIN MAX  * 09840000
         LH    @F,KON1992                                         0136  09850000
         ST    @F,144(0,@6)                                       0136  09860000
*         ADPTR1  = ADDR(E03CNT25);           /* SET RETURN ADDRESS   * 09870000
         LA    @F,E03CNT25                                        0137  09880000
         ST    @F,88(0,@6)                                        0137  09890000
*         GOTO  E03GMN05;                     /* GO TO GETMAIN      */  09900000
         BC    15,E03GMN05                                        0138  09910000
* E03CNT25: SP78ADDR = ADDGMN;                /* SAVE STORAGE ADDRESS * 09920000
E03CNT25 MVC   156(4,@6),148(@6)                                  0139  09930000
*         SP78LNGT  = AMTGMN;                 /* SAVE AMOUNT OF CORE  * 09940000
         MVC   160(4,@6),152(@6)                                  0140  09950000
*         E01SW12  = '1'B;                    /* INDICATE WE HAVE SP78  09960000
*                                                STORAGE OBTAINED     * 09970000
         OI    203(@6),B'00010000'                                0141  09980000
*         AVL78  = AMTGMN - KON8 - KON16;     /* SAVE AMOUNT WHICH CAN  09990000
*                                                BE USED FOR PROCEDURE* 10000000
         LH    @F,KON16                                           0142  10010000
         LCR   @F,@F                                              0142  10020000
         SH    @F,KON8                                            0142  10030000
         A     @F,152(0,@6)                                       0142  10040000
         STH   @F,AVL78                                           0142  10050000
*         PROCIND  = ADDGMN + KON8 + KON16;   /* SAVE ADDR OF OUTPUT  * 10060000
         LH    @F,KON16                                           0143  10070000
         AH    @F,KON8                                            0143  10080000
         A     @F,148(0,@6)                                       0143  10090000
         ST    @F,PROCIND                                         0143  10100000
*         PROCUR  = PROCIND + KON4;           /* RCD AND OUTPUT DATA  * 10110000
         LH    @F,KON4                                            0144  10120000
         A     @F,PROCIND                                         0144  10130000
         ST    @F,PROCUR                                          0144  10140000
*         PRMSTR  = ADDGMN;                   /* SAVE ADDR OF FIRST     10150000
*                                                BLOCK OF SP78 CORE   * 10160000
         MVC   PRMSTR(4),148(@6)                                  0145  10170000
*         PROCNXT  = KON0;                    /* INDICATE NO BLOCK      10180000
*                                                FOLLOWING            * 10190000
         LH    @F,KON0                                            0146  10200000
         L     @7,148(0,@6)                                       0146  10210000
         ST    @F,0(0,@7)                                         0146  10220000
*         PROCSZE  = AMTGMN;                  /* SAVE SIZE OF BLOCK   * 10230000
         MVC   4(4,@7),152(@6)                                    0147  10240000
*                                                                       10250000
*         /************************************************************ 10260000
*         /*              FOLLOWING CODE PREPARES FOR THE             * 10270000
*         /*              MOVING OF ONE LINE OF THE PROC              * 10280000
*         /*              TO SP78 CORE WITH SUBSTITUTION              * 10290000
*         /*              OF SYMBOLIC PARM VALUES                     * 10300000
*         /************************************************************ 10310000
* E03SPL05: IF E01SW8 = '1'B                  /* IF RECORD FORMAT IS  * 10320000
*             THEN                            /*   VARIABLE           * 10330000
E03SPL05 TM    202(@6),B'00000001'                                0148  10340000
         BC    12,@9F7                                            0148  10350000
*               DO;                           /*   SET REMAINING CHAR-* 10360000
*                 REMCHARC = RCDLNG;          /*  ACTER TO RCD LENGTH * 10370000
         L     @7,292(0,@6)                                       0150  10380000
         MVC   REMCHARC(2),0(@7)                                  0150  10390000
*                 REMCHAR  = REMCHAR - KON12; /*  MINUS 4 FOR LENGTH  * 10400000
         LH    @F,REMCHAR                                         0151  10410000
         SH    @F,KON12                                           0151  10420000
         STH   @F,REMCHAR                                         0151  10430000
*                 OFFSET  = RCDST + KON12;    /*  INDIATOR AND 8 FOR  * 10440000
         LH    @F,KON12                                           0152  10450000
         A     @F,292(0,@6)                                       0152  10460000
         ST    @F,OFFSET                                          0152  10470000
         BC    15,@9F6                                            0154  10480000
*               END;                          /*  LINE NUMBERS- OFFSET* 10490000
*             ELSE                            /*  = FIRST BYTE OF DATA* 10500000
*               DO;                           /* IF RECORD FORMAT IS  * 10510000
*                 REMCHAR = DCBLRECL - KON8;  /*  FIXED REMAINING     * 10520000
@9F7     LH    @F,KON8                                            0155  10530000
         LCR   @F,@F                                              0155  10540000
         AH    @F,82(0,@6)                                        0155  10550000
         STH   @F,REMCHAR                                         0155  10560000
*                 OFFSET  = RCDST;            /*  CHARACTERS = RCD    * 10570000
         MVC   OFFSET(4),292(@6)                                  0156  10580000
*                                             /*  LENGTH MINUS 8 FOR    10590000
*                                                 LINE NUMBERS- OFFSET  10600000
*                                                 FIRST BYTE OF DATA  * 10610000
*                 DO I = REMCHAR TO 1 BY -1;  /* REMOVE BLANKS  Y02676* 10620000
         LH    @F,REMCHAR                                         0157  10630000
         BC    15,@DO9F4                                          0157  10640000
*                                             /* FROM END OF    Y02676* 10650000
*                   IF INPLIN(I) ^= KBLNK     /* FIXED BLOCK    Y02676* 10660000
*                     THEN                    /* RECORDS AND    Y02676* 10670000
@DO9F5   L     @7,I                                               0158  10680000
         L     @8,OFFSET                                          0158  10690000
         LA    @A,0(@7,@8)                                        0158  10700000
         BCTR  @A,0                                               0158  10710000
         CLC   0(1,@A),TCHAR                                      0158  10720000
         BC    08,@9F1                                            0158  10730000
*                       DO;                   /* SET NEW LINE   Y02676* 10740000
*                         REMCHAR = I;        /* LENGTH         Y02676* 10750000
         MVC   REMCHAR(2),I+2                                     0160  10760000
*                         GO TO E03SPL06;                     /*Y02676* 10770000
         BC    15,E03SPL06                                        0161  10780000
*                       END;                                  /*Y02676* 10790000
*                 END;                                        /*Y02676* 10800000
*                                                                       10810000
*                 IF CONTPLUS = '1'B          /* WHEN THE CON-  Y02676* 10820000
*                   THEN                      /* TINUATION LINE Y02676* 10830000
@9F1     L     @F,I                                               0163  10840000
         BCTR  @F,0                                               0163  10850000
@DO9F4   ST    @F,I                                               0163  10860000
         CH    @F,@D1                                             0163  10870000
         BC    10,@DO9F5                                          0163  10880000
         TM    E03BINSW,B'00001000'                               0164  10890000
         BC    12,@9F0                                            0164  10900000
*                     DO;                     /* FOR PLUS SIGN  Y02676* 10910000
*                       CONTPLUS = '0'B;      /* PROCESSING IS  Y02676* 10920000
         NI    E03BINSW,B'01110011'                               0166  10930000
*                       ENDDLM = '0'B;        /* NULL THEN      Y02676* 10940000
*                       E03SW1 = '0'B;        /* RESET CONTINUATION AND 10950000
*                                                ENDING DELIMITER NEEDE 10960000
*                                                SWITCHES AND   Y02676* 10970000
*                       ADPTR1 = ADDR(E03UAR10); /* GO GET THE  Y02676* 10980000
         LA    @F,E03UAR10                                        0169  10990000
         ST    @F,88(0,@6)                                        0169  11000000
*                       GO TO E03IMR05;       /* NEXT RECORD    Y02676* 11010000
         BC    15,E03IMR05                                        0170  11020000
*                     END;                                    /*Y02676* 11030000
*                 GO TO E03SPL25;             /* IF THE PREVIOUS LINE   11040000
*                                                WAS NOT CONTINUED WITH 11050000
*                                                A PLUS SIGN THEN BYPAS 11060000
*                                                THE & SEARCH   Y02676* 11070000
*               END;                                          /*Y02676* 11080000
*                                                                       11090000
* E03SPL06:                                   /* WHEN THE       Y02676* 11100000
*         IF CONTPLUS = '1'B                  /* PREVIOUS LINE  Y02676* 11110000
*           THEN                              /* WAS CONTINUED  Y02676* 11120000
@9F6     EQU   *                                                  0174  11130000
E03SPL06 TM    E03BINSW,B'00001000'                               0174  11140000
         BC    12,@9EF                                            0174  11150000
*             DO;                             /* WITH A PLUS    Y02676* 11160000
*               CONTPLUS = '0'B;              /* THEN WE MUST REMOVE AL 11170000
*                                                LEADING SEPERATORS AND 11180000
*                                                COMMENTS       Y02676* 11190000
         NI    E03BINSW,B'11110111'                               0176  11200000
*               I = KON1;                     /* INIT INDEX VAR Y02676* 11210000
         LH    @F,KON1                                            0177  11220000
         ST    @F,I                                               0177  11230000
* E03PLSTR:     IF ENDDLM = '1'B              /* IF A COMMENT   Y02676* 11240000
*                 THEN                        /* WAS CONTINUED FROM THE 11250000
*                                                PREVIOUS RECORD THEN   11260000
*                                                RESUME SCAN    Y02676* 11270000
E03PLSTR TM    E03BINSW,B'00000100'                               0178  11280000
         BC    12,@9EE                                            0178  11290000
*                   DO;                       /* FOR ASTERISK   Y02676* 11300000
*                     ENDDLM = '0'B;          /* SLASH          Y02676* 11310000
         NI    E03BINSW,B'11111011'                               0180  11320000
*                     GO TO E03SPL08;                         /*Y02676* 11330000
         BC    15,E03SPL08                                        0181  11340000
*                   END;                                      /*Y02676* 11350000
*                                                                       11360000
*                                                                       11370000
*               IF I <= REMCHAR               /* MAKE SURE THERE IS AT  11380000
*                                                LEAST ONE CHARACTER    11390000
*                                                IN THE INPUT RECORD    11400000
*                                                BEFORE STARTING SCAN   11410000
*                                                               Y02676* 11420000
*                 THEN                                        /*Y02676* 11430000
@9EE     LH    @F,REMCHAR                                         0183  11440000
         C     @F,I                                               0183  11450000
         BC    04,@9ED                                            0183  11460000
*                   DO I = I TO REMCHAR;      /* REMOVE         Y02676* 11470000
         L     @F,I                                               0184  11480000
         BC    15,@DO9EB                                          0184  11490000
*                     IF INPLIN(I) ^= KBLNK & /* SEPERATORS     Y02676* 11500000
*                        INPLIN(I) ^= KCOM  & /* FROM  THE      Y02676* 11510000
*                        INPLIN(I) ^= KTAB    /* CONTINUATION   Y02676* 11520000
*                       THEN                  /* RECORD         Y02676* 11530000
@DO9EC   L     @7,I                                               0185  11540000
         L     @8,OFFSET                                          0185  11550000
         LA    @A,0(@7,@8)                                        0185  11560000
         BCTR  @A,0                                               0185  11570000
         CLC   0(1,@A),TCHAR                                      0185  11580000
         BC    08,@9E8                                            0185  11590000
         CLC   0(1,@A),TCHAR+1                                    0185  11600000
         BC    08,@9E7                                            0185  11610000
         CLC   0(1,@A),TCHAR+2                                    0185  11620000
*                         GO TO E03SPL07;                     /*Y02676* 11630000
         BC    07,E03SPL07                                        0186  11640000
*                   END;                                      /*Y02676* 11650000
@9E6     EQU   *                                                  0187  11660000
@9E7     EQU   *                                                  0187  11670000
*               E03SW1 = '0'B;                /* WHEN THE RECORD IS NUL 11680000
*                                                RESET CONT INDICATOR   11690000
*                                                SET RETURN POINT TO    11700000
*                                                COMPLETE THE PROC      11710000
*                                                RECORD ALREADY IN SP   11720000
*                                                78 AND GO GET THE      11730000
*                                                NEXT RECORD    Y02676* 11740000
@9E8     L     @F,I                                               0187  11750000
         AH    @F,@D1                                             0187  11760000
@DO9EB   ST    @F,I                                               0187  11770000
         CH    @F,REMCHAR                                         0187  11780000
         BC    12,@DO9EC                                          0187  11790000
@9ED     NI    E03BINSW,B'01111111'                               0188  11800000
*               ADPTR1 = ADDR(E03UAR10);                      /*Y02676* 11810000
         LA    @F,E03UAR10                                        0189  11820000
         ST    @F,88(0,@6)                                        0189  11830000
*               GO TO E03IMR05;                               /*Y02676* 11840000
         BC    15,E03IMR05                                        0190  11850000
*                                                                       11860000
* E03SPL07:                                   /* IF THERE IS    Y02676* 11870000
*               IF I = REMCHAR |              /* ONE CHAR LEFT  Y02676* 11880000
*                  INPLIN(I:I+1) ^= KONSLAST  /* OR THERE IS NO SLASH   11890000
*                                                ASTERISK FIRST WE      11900000
*                                                MUST BYPASS FURTHER    11910000
*                                                COMMENT CHECKS Y02676* 11920000
*                 THEN                                        /*Y02676* 11930000
E03SPL07 LH    @F,REMCHAR                                         0191  11940000
         C     @F,I                                               0191  11950000
         BC    08,@9E5                                            0191  11960000
         L     @7,I                                               0191  11970000
         L     @8,OFFSET                                          0191  11980000
         LA    @A,0(@7,@8)                                        0191  11990000
         BCTR  @A,0                                               0191  12000000
         CLC   0(2,@A),KONSLAST                                   0191  12010000
         BC    08,@9E4                                            0191  12020000
*                   DO;                                       /*Y02676* 12030000
*                     IF I = REMCHAR &        /* IF THERE IS    Y02676* 12040000
*                        INPLIN(I) = KCONT |  /* ONLY ONE CHAR  Y02676* 12050000
*                        INPLIN(I) = KCONTP   /* LEFT AND IT IS A       12060000
*                                                CONTINUATION CHAR THEN 12070000
*                                                SET INDICATOR AND      12080000
*                                                RETURN POINT TO PREVEN 12090000
*                                                MOVING THE RECORD TO   12100000
*                                                SUBPOOL 78     Y02676* 12110000
*                       THEN                                  /*Y02676* 12120000
@9E5     LH    @F,REMCHAR                                         0193  12130000
         C     @F,I                                               0193  12140000
         BC    07,@9E3                                            0193  12150000
         L     @7,I                                               0193  12160000
         L     @8,OFFSET                                          0193  12170000
         LA    @A,0(@7,@8)                                        0193  12180000
         BCTR  @A,0                                               0193  12190000
         CLC   0(1,@A),KCONT                                      0193  12200000
         BC    08,@9E2                                            0193  12210000
@9E3     L     @7,I                                               0193  12220000
         L     @8,OFFSET                                          0193  12230000
         LA    @A,0(@7,@8)                                        0193  12240000
         BCTR  @A,0                                               0193  12250000
         CLC   0(1,@A),KCONTP                                     0193  12260000
         BC    07,@9E1                                            0193  12270000
*                         DO;                                 /*Y02676* 12280000
*                           CONTPLUS = '1'B;                  /*Y02676* 12290000
@9E2     OI    E03BINSW,B'00001000'                               0195  12300000
*                           ADPTR1 = ADDR(E03SPL05);          /*Y02676* 12310000
         LA    @F,E03SPL05                                        0196  12320000
         ST    @F,88(0,@6)                                        0196  12330000
*                           GO TO E03IMR05;                   /*Y02676* 12340000
         BC    15,E03IMR05                                        0197  12350000
*                         END;                                /*Y02676* 12360000
*                                                                       12370000
*                     OFFSET = I - KON1 + OFFSET; /* OTHERWISE  Y02676* 12380000
@9E1     L     @F,OFFSET                                          0199  12390000
         SH    @F,KON1                                            0199  12400000
         A     @F,I                                               0199  12410000
         ST    @F,OFFSET                                          0199  12420000
*                     REMCHAR = REMCHAR - I + KON1; /* ADJUST   Y02676* 12430000
         LH    @F,KON1                                            0200  12440000
         S     @F,I                                               0200  12450000
         AH    @F,REMCHAR                                         0200  12460000
         STH   @F,REMCHAR                                         0200  12470000
*                     GO TO E03SPL10;         /* RECORD START AND LENGT 12480000
*                                                GO PROCESS NORMALLY    12490000
*                                                               Y02676* 12500000
         BC    15,E03SPL10                                        0201  12510000
*                   END;                                      /*Y02676* 12520000
*                                                                       12530000
*               I = KON2 + I;                 /* UPDATE INDEX PAST THE  12540000
*                                                SLASH ASTERISK Y02676* 12550000
@9E4     L     @F,I                                               0203  12560000
         AH    @F,KON2                                            0203  12570000
         ST    @F,I                                               0203  12580000
* E03SPL08:                                                             12590000
*               IF I < REMCHAR                /* MAKE SURE THERE IS     12600000
*                                                ENOUGH CHARACTERS FOR  12610000
*                                                THE ASTERISK SLASH     12620000
*                                                CHECK          Y02676* 12630000
*                 THEN                                                  12640000
E03SPL08 LH    @F,REMCHAR                                         0204  12650000
         C     @F,I                                               0204  12660000
         BC    12,@9E0                                            0204  12670000
*                   DO I = I TO REMCHAR - 1;  /* SCAN FOR       Y02676* 12680000
         L     @F,I                                               0205  12690000
         ST    @F,I                                               0205  12700000
@DO9DF   LH    @F,REMCHAR                                         0205  12710000
         BCTR  @F,0                                               0205  12720000
         C     @F,I                                               0205  12730000
         BC    04,@DO9DC                                          0205  12740000
         BC    15,@DO9DD                                          0205  12750000
@DO9DE   LA    @F,1                                               0205  12760000
         A     @F,I                                               0205  12770000
         ST    @F,I                                               0205  12780000
         BC    15,@DO9DF                                          0205  12790000
*                     IF INPLIN(I:I+1) = KONASTSL /* ASTERISK   Y02676* 12800000
*                       THEN                  /* SLASH          Y02676* 12810000
@DO9DD   L     @7,I                                               0206  12820000
         L     @8,OFFSET                                          0206  12830000
         LA    @A,0(@7,@8)                                        0206  12840000
         BCTR  @A,0                                               0206  12850000
         CLC   0(2,@A),KONASTSL                                   0206  12860000
         BC    07,@9DB                                            0206  12870000
*                         DO;                                 /*Y02676* 12880000
*                           I = KON2 + I;     /* IF FOUND GO    Y02676* 12890000
         L     @F,I                                               0208  12900000
         AH    @F,KON2                                            0208  12910000
         ST    @F,I                                               0208  12920000
*                           GO TO E03PLSTR;   /* LOOK FOR MORE  Y02676* 12930000
         BC    15,E03PLSTR                                        0209  12940000
*                         END;                                /*Y02676* 12950000
*                   END;                                      /*Y02676* 12960000
*                                                                       12970000
*              IF INPLIN(REMCHAR) = KCONT |   /* IF COMMENT IS  Y02676* 12980000
*                 INPLIN(REMCHAR) = KCONTP    /* CONTINUED SET INDICATO 12990000
*                                                AND RETURN POINT TO    13000000
*                                                PREVENT MOVING TO      13010000
*                                                SUBPOOL 78     Y02676* 13020000
*                THEN                                                   13030000
@DO9DC   EQU   *                                                  0211  13040000
@9E0     EQU   *                                                  0212  13050000
         LH    @7,REMCHAR                                         0212  13060000
         L     @8,OFFSET                                          0212  13070000
         LA    @A,0(@7,@8)                                        0212  13080000
         BCTR  @A,0                                               0212  13090000
         CLC   0(1,@A),KCONT                                      0212  13100000
         BC    08,@9DA                                            0212  13110000
         CLC   0(1,@A),KCONTP                                     0212  13120000
         BC    07,@9D9                                            0212  13130000
*                  DO;                                        /*Y02676* 13140000
*                    ENDDLM = '1'B;                           /*Y02676* 13150000
@9DA     OI    E03BINSW,B'00001100'                               0214  13160000
*                    CONTPLUS = '1'B;                         /*Y02676* 13170000
*                    ADPTR1 = ADDR(E03SPL05);                 /*Y02676* 13180000
         LA    @F,E03SPL05                                        0216  13190000
         ST    @F,88(0,@6)                                        0216  13200000
         BC    15,@9D8                                            0218  13210000
*                  END;                                       /*Y02676* 13220000
*                ELSE                         /* OTHERWISE TURN OFF     13230000
*                                                CONTINUATION INDICATOR 13240000
*                                                AND SET THE RETURN     13250000
*                                                POINT TO COMPLETE THE  13260000
*                                                RECORD ALREADY IN      13270000
*                                                SUBPOOL 78     Y02676* 13280000
*                  DO;                                        /*Y02676* 13290000
*                    E03SW1 = '0'B;                           /*Y02676* 13300000
@9D9     NI    E03BINSW,B'01111111'                               0219  13310000
*                    ADPTR1 = ADDR(E03UAR10);                 /*Y02676* 13320000
         LA    @F,E03UAR10                                        0220  13330000
         ST    @F,88(0,@6)                                        0220  13340000
*                  END;                                       /*Y02676* 13350000
* E03SPL09:                                                             13360000
*              GO TO E03IMR05;                /* EITHER CASE ALWAYS GET 13370000
*                                                NEXT RECORD   Y02676*/ 13380000
         BC    15,E03IMR05                                        0222  13390000
*            END;                                            /*Y02676*/ 13400000
*         /************************************************************ 13410000
*         /*              FOLLOWING SECTION OF CODE DOES              * 13420000
*         /*              A SCAN OF THE INPUT LINE TO                 * 13430000
*         /*              FIND ANY SYMBOLIC PARAMETERS                * 13440000
*         /*              CONTAINED THEREIN                           * 13450000
*         /************************************************************ 13460000
* E03SPL10: IF E01SW3 = '1'B                  /* IF THERE WAS NO PROC * 13470000
*             THEN                            /*  STMT- BYPASS SEARCH * 13480000
@9EF     EQU   *                                                  0224  13490000
E03SPL10 TM    202(@6),B'00100000'                                0224  13500000
*               GOTO E03SPL25;                /*  FOR SYMBOLIC PARMS  * 13510000
         BC    01,E03SPL25                                        0225  13520000
*         R2  = REMCHAR;                      /* SET REG2 TO NUMBER OF  13530000
*                                                BYTES LEFT IN INPUT    13540000
*                                                LINE                 * 13550000
         LH    @2,REMCHAR                                         0226  13560000
*         R3  = OFFSET;                       /* SET REG3 TO STARTING   13570000
*                                                ADDR FOR SEARCH      * 13580000
         L     @3,OFFSET                                          0227  13590000
* E03SPL15: R2 = R2 - KON1;                   /* REDUCE BY ONE THE      13600000
*                                                NUMBER OF BYTES TO     13610000
*                                                BE SCANNED FOR TRANS   13620000
*                                                AND TEST INSTRUCTION * 13630000
E03SPL15 SH    @2,KON1                                            0228  13640000
*         IF  R2 < KON0                       /*  IF ENTIRE LINE HAS  * 13650000
*           THEN                              /*  BEEN SCANNED GO TO  * 13660000
         CH    @2,KON0                                            0229  13670000
*             GOTO E03SPL25;                  /*  MOVE LINE TO SP78   * 13680000
         BC    04,E03SPL25                                        0230  13690000
*         R1 = KON0;                          /* RE-INIT R1     Y01676* 13700000
         LH    @1,KON0                                            0231  13710000
*         GEN;                                                          13720000
         EX    R2,TRTINST          EXECUTE TRANSLATE AND TEST INSTRUCT  13730000
         BNZ   E03SPL30            IF AMPERSAND FOUND EXIT LOOP         13740000
         DS    0H                                                       13750000
*         R3  = R3 + (R2 // KON256) + KON1;   /* UPDATE ADDRESS AT      13760000
*                                                WHICH SCAN STARTS    * 13770000
         LR    @E,@2                                              0233  13780000
         SRDA  @E,32                                              0233  13790000
         LH    @0,KON256                                          0233  13800000
         DR    @E,@0                                              0233  13810000
         AR    @E,@3                                              0233  13820000
         AH    @E,KON1                                            0233  13830000
         LR    @3,@E                                              0233  13840000
*         R2  = (R2 / KON256) * KON256;       /* ELIMINATE LOW EIGHT    13850000
*                                                BITS WHICH ARE THE     13860000
*                                                NUMBER OF BYTES        13870000
*                                                JUST SCANNED         * 13880000
         LR    @E,@2                                              0234  13890000
         SRDA  @E,32                                              0234  13900000
         LH    @0,KON256                                          0234  13910000
         DR    @E,@0                                              0234  13920000
         MH    @F,KON256                                          0234  13930000
         LR    @2,@F                                              0234  13940000
*         GOTO  E03SPL15;                     /* LOOP TO SCAN NEXT 256  13950000
*                                                BYTES                * 13960000
         BC    15,E03SPL15                                        0235  13970000
*                                                                       13980000
*         /***********************************************************/ 13990000
*         /*              THE FOLLOWING CODE IS EXECUTED             */ 14000000
*         /*              WHEN THE REMAINING PORTION OF              */ 14010000
*         /*              THE LINE SCANNED DID NOT CONT-             */ 14020000
*         /*              AIN AN & (SYMBOLIC PARM) - IT              */ 14030000
*         /*              SETS INDICATORS FOR MOVING THE             */ 14040000
*         /*              LINE TO SP78 CORE WITHOUT                  */ 14050000
*         /*              SEARCHING SYMBOLIC PARM TABLES             */ 14060000
*         /***********************************************************/ 14070000
* E03SPL25: TEMP01 = REMCHAR;                 /* SET START OF SYMBOLIC  14080000
*                                                PARM TO END PARM       14090000
*                                                TO 1 PAST END OF       14100000
*                                                RECORD TO BYPASS       14110000
*                                                SEARCH FOR PARM      * 14120000
E03SPL25 LH    @F,REMCHAR                                         0236  14130000
         ST    @F,TEMP01                                          0236  14140000
*         IF INPLIN(TEMP01) = KCONTP          /* IS LINE        Y02676* 14150000
*           THEN                              /*  CONTINUED     Y02676* 14160000
         LR    @7,@F                                              0237  14170000
         L     @8,OFFSET                                          0237  14180000
         LA    @A,0(@7,@8)                                        0237  14190000
         BCTR  @A,0                                               0237  14200000
         CLC   0(1,@A),KCONTP                                     0237  14210000
         BC    07,@9D7                                            0237  14220000
*             CONTPLUS = '1'B;                /* WITH PLUS      Y02676* 14230000
         OI    E03BINSW,B'00001000'                               0238  14240000
*         IF  INPLIN(TEMP01)  = KCONT |       /* IF LINE IS TO BE     * 14250000
*             CONTPLUS = '1'B                 /* CONTINUED      Y02676* 14260000
*           THEN                              /*   THEN               * 14270000
@9D7     LA    @A,0(@7,@8)                                        0239  14280000
         BCTR  @A,0                                               0239  14290000
         CLC   0(1,@A),KCONT                                      0239  14300000
         BC    08,@9D6                                            0239  14310000
         TM    E03BINSW,B'00001000'                               0239  14320000
         BC    12,@9D5                                            0239  14330000
*             DO;                             /* SET THE CONTINUATION * 14340000
*               E03SW1 = '1'B;                /*   SWITCH ON          * 14350000
@9D6     OI    E03BINSW,B'10000000'                               0241  14360000
*               REMCHAR = REMCHAR - KON1;     /* REDUCES REMAINING    * 14370000
         LH    @F,REMCHAR                                         0242  14380000
         SH    @F,KON1                                            0242  14390000
         STH   @F,REMCHAR                                         0242  14400000
         BC    15,@9D4                                            0244  14410000
*             END;                            /*   CHAR CNT TO AVOID  * 14420000
*           ELSE                              /*   PROCESSING DASH    * 14430000
*             TEMP01 = TEMP01 + KON1;         /* SET TEMP01 TO 1 PAST   14440000
*                                                END OF RECORD          14450000
*                                                CONTINUATION CHAR    * 14460000
@9D5     LH    @F,KON1                                            0244  14470000
         A     @F,TEMP01                                          0244  14480000
         ST    @F,TEMP01                                          0244  14490000
*         GOTO  E03PVL10;                     /* START MOVING DATA    * 14500000
         BC    15,E03PVL10                                        0245  14510000
*                                                                       14520000
*         /************************************************************ 14530000
*         /*              FOLLOWING CODE DETERMINES                   * 14540000
*         /*              WHETHER THE & IS FOR A                      * 14550000
*         /*              SYMBOLIC PARM OR IS TO REMAIN               * 14560000
*         /*              IN PROC, SETS PROPER INDICATORS             * 14570000
*         /*              AND BRANCHES TO SYMBOLIC PARM               * 14580000
*         /*              DEFINITION ROUTINE, MOVE ROUT-              * 14590000
*         /*              INE OR ERROR ROUTINE                        * 14600000
*         /************************************************************ 14610000
* E03SPL30: TEMP01 = R1 + KON1 - OFFSET;      /* SET TEMP01 = LOCATION  14620000
*                                                OF & RELATIVE TO       14630000
*                                                START OF SCAN        * 14640000
E03SPL30 L     @F,OFFSET                                          0246  14650000
         LCR   @F,@F                                              0246  14660000
         AH    @F,KON1                                            0246  14670000
         AR    @F,@1                                              0246  14680000
         ST    @F,TEMP01                                          0246  14690000
*         IF  INPLIN(TEMP01 + KON1) = KAMP    /* IF THIS IS AN && THEN* 14700000
*           THEN                              /*  ALTER TEMP01 SO THAT* 14710000
         LH    @7,KON1                                            0247  14720000
         A     @7,TEMP01                                          0247  14730000
         L     @8,OFFSET                                          0247  14740000
         LA    @A,0(@7,@8)                                        0247  14750000
         BCTR  @A,0                                               0247  14760000
         CLC   0(1,@A),TCHAR+3                                    0247  14770000
         BC    07,@9D3                                            0247  14780000
*             DO;                             /*FIRST & WILL STAY IN  * 14790000
*               TEMP01 = TEMP01 + KON1;       /*  PROC- AND GO TO MOVE* 14800000
         LH    @F,KON1                                            0249  14810000
         A     @F,TEMP01                                          0249  14820000
         ST    @F,TEMP01                                          0249  14830000
*               GOTO E03PVL10;                /*  ROUTINE             * 14840000
         BC    15,E03PVL10                                        0250  14850000
*             END;                                                      14860000
*                                                                       14870000
*         /************************************************************ 14880000
*         /*              FOLLOWING CODE DETERMINES THE               * 14890000
*         /*              LENGTH OF THE SYMBOLIC PARM,                * 14900000
*         /*              FINDS WHETHER THE LINE IS                   * 14910000
*         /*              CONTINUED AND EXITS TO THE                  * 14920000
*         /*              ROUTINE WHICH SEARCHES PARM                 * 14930000
*         /*              TABLES                                      * 14940000
*         /************************************************************ 14950000
*         DO  TEMP02 = TEMP01 + KON1 TO REMCHAR;                        14960000
@9D3     LH    @F,KON1                                            0252  14970000
         A     @F,TEMP01                                          0252  14980000
         BC    15,@DO9D1                                          0252  14990000
*                                             /* SCAN FOR END OF      * 15000000
*           DO TEMP03 = KON1 TO KON5;         /*  SYMBOLIC PARM TO END* 15010000
@DO9D2   LH    @F,KON1                                            0253  15020000
         BC    15,@DO9CD                                          0253  15030000
*             IF INPLIN(TEMP02) = TCHAR(TEMP03)/* OF INPUT LINE- WHEN * 15040000
*               THEN                          /*  END IS FOUND GOTO   * 15050000
@DO9CE   L     @7,TEMP03                                          0254  15060000
         LA    @E,TCHAR-1(@7)                                     0254  15070000
         L     @8,TEMP02                                          0254  15080000
         L     @7,OFFSET                                          0254  15090000
         LA    @A,0(@8,@7)                                        0254  15100000
         BCTR  @A,0                                               0254  15110000
         CLC   0(1,@A),0(@E)                                      0254  15120000
*                 GOTO E03PDL05;              /*  SEARCH ROUTINE      * 15130000
         BC    08,E03PDL05                                        0255  15140000
*           END;                                                        15150000
*         END;                                                          15160000
         L     @F,TEMP03                                          0256  15170000
         AH    @F,@D1                                             0256  15180000
@DO9CD   ST    @F,TEMP03                                          0256  15190000
         CH    @F,KON5                                            0256  15200000
         BC    12,@DO9CE                                          0256  15210000
*                                                                       15220000
*         IF INPLIN(TEMP02 - KON1) = KCONTP   /* IS LINE        Y02676* 15230000
*           THEN                              /* CONTINUED      Y02676* 15240000
         L     @F,TEMP02                                          0257  15250000
         AH    @F,@D1                                             0257  15260000
@DO9D1   ST    @F,TEMP02                                          0257  15270000
         CH    @F,REMCHAR                                         0257  15280000
         BC    12,@DO9D2                                          0257  15290000
         LH    @7,KON1                                            0258  15300000
         LCR   @7,@7                                              0258  15310000
         A     @7,TEMP02                                          0258  15320000
         L     @8,OFFSET                                          0258  15330000
         LA    @A,0(@7,@8)                                        0258  15340000
         BCTR  @A,0                                               0258  15350000
         CLC   0(1,@A),KCONTP                                     0258  15360000
         BC    07,@9CA                                            0258  15370000
*             CONTPLUS = '1'B;                /* WITH A PLUS    Y02676* 15380000
         OI    E03BINSW,B'00001000'                               0259  15390000
*                                                                       15400000
*         IF  INPLIN(TEMP02 - KON1) = KCONT | /* IF LINE IS TO BE     * 15410000
*             CONTPLUS = '1'B                 /* CONTINUED      Y02676* 15420000
*           THEN                              /* SET THE              * 15430000
@9CA     LH    @7,KON1                                            0260  15440000
         LCR   @7,@7                                              0260  15450000
         A     @7,TEMP02                                          0260  15460000
         LA    @A,0(@7,@8)                                        0260  15470000
         BCTR  @A,0                                               0260  15480000
         CLC   0(1,@A),KCONT                                      0260  15490000
         BC    08,@9C9                                            0260  15500000
         TM    E03BINSW,B'00001000'                               0260  15510000
         BC    12,@9C8                                            0260  15520000
*             DO;                             /*  CONTINUATION        * 15530000
*               E03SW1 = '1'B;                /*  SWITCH ON ALTER THE * 15540000
@9C9     OI    E03BINSW,B'10000000'                               0262  15550000
*               REMCHAR = REMCHAR - KON1;     /*  REMAINING CHAR COUNT* 15560000
         LH    @F,REMCHAR                                         0263  15570000
         SH    @F,KON1                                            0263  15580000
         STH   @F,REMCHAR                                         0263  15590000
*               TEMP02 = TEMP02 - KON1;       /*  AND END OF PARM PTR * 15600000
         L     @F,TEMP02                                          0264  15610000
         SH    @F,KON1                                            0264  15620000
         ST    @F,TEMP02                                          0264  15630000
*             END;                            /*  TO SKIP CONTINUATION  15640000
*                                                 CHARACTER AND ENTER   15650000
*                                                 SEARCH ROUTINE      * 15660000
*                                                                       15670000
*         /************************************************************ 15680000
*         /*              FOLLOWING IS THE SEARCH                     * 15690000
*         /*              ROUTINE- IT SEARCHES ATAB FOR               * 15700000
*         /*              THE SYMBOLIC PARAMATER AND                  * 15710000
*         /*              EXITS TO THE VALUE LOCATOR                  * 15720000
*         /*              ROUTINE IF A MATCH IS FOUND OR              * 15730000
*         /*              TO THE MOVE ROUTINE IF THERE                * 15740000
*         /*              IS NO MATCH                                 * 15750000
*         /************************************************************ 15760000
* E03PDL05: R4 = ABLK1;                       /* SET REG4 POINTING TO   15770000
*                                                1ST BLOCK OF ATAB    * 15780000
@9C8     EQU   *                                                  0266  15790000
E03PDL05 L     @4,284(0,@6)                                       0266  15800000
*         R5  = R4 + KON12;                   /* SET REG5 POINTING TO   15810000
*                                                CURRENT ELEMENT      * 15820000
         LH    @5,KON12                                           0267  15830000
         AR    @5,@4                                              0267  15840000
*         TEMP03  = TEMP02 - TEMP01 - KON1;   /* SET TEMP03 TO LNGTH    15850000
*                                                OF PARM              * 15860000
         LH    @F,KON1                                            0268  15870000
         LCR   @F,@F                                              0268  15880000
         S     @F,TEMP01                                          0268  15890000
         A     @F,TEMP02                                          0268  15900000
         ST    @F,TEMP03                                          0268  15910000
*         IF  TEMP03 = KON0                   /* IF THERE WAS ONLY AN * 15920000
*           THEN                              /*  AMPERSAND,SET PARM  * 15930000
         LH    @F,KON0                                            0269  15940000
         C     @F,TEMP03                                          0269  15950000
         BC    07,@9C7                                            0269  15960000
*             DO;                             /*  VALUE LENGTH TO ZERO* 15970000
*               TEMP04 = KON0;                /*  AND EXIT TO ROUTINE * 15980000
         ST    @F,TEMP04                                          0271  15990000
*               GOTO E03ITO05;                /*  WHICH MOVES RCD AND * 16000000
         BC    15,E03ITO05                                        0272  16010000
*             END;                            /*  VALUE TO SP78 AREA  * 16020000
* E03PDL10: IF ATABIND = KON0                 /* IF THERE WERE NO PARMS 16030000
*             THEN                            /*  IT IS AN ERROR SO   * 16040000
@9C7     EQU   *                                                  0274  16050000
E03PDL10 LH    @F,KON0                                            0274  16060000
         C     @F,172(0,@6)                                       0274  16070000
*              GOTO E03PDL15;                 /*  GO TO PUT MSG       * 16080000
         BC    08,E03PDL15                                        0275  16090000
*         CNVC = R5 -> ATABELNC;              /* ALIGN LENGTH OF THIS   16100000
*                                                ATAB ELEMENT         * 16110000
         MVC   200(2,@6),5(@5)                                    0276  16120000
*         IF  TEMP03 = CNVA                   /* IF ELMT LENGTH =     * 16130000
*           THEN                              /*  PARM LENGTH AND     * 16140000
         LH    @F,200(0,@6)                                       0277  16150000
         C     @F,TEMP03                                          0277  16160000
         BC    07,@9C6                                            0277  16170000
*             IF R5 -> ATABDAT(1:CNVA) = INPLIN(TEMP01+1:TEMP02-1)      16180000
*               THEN                          /*  ELMT = PARM - GO TO * 16190000
         LA    @7,1                                               0278  16200000
         A     @7,TEMP01                                          0278  16210000
         L     @8,OFFSET                                          0278  16220000
         LA    @E,0(@7,@8)                                        0278  16230000
         BCTR  @E,0                                               0278  16240000
         LH    @7,200(0,@6)                                       0278  16250000
         BCTR  @7,0                                               0278  16260000
         LA    @A,7(0,@5)                                         0278  16270000
         EX    @7,@CLC                                            0278  16280000
*                 GOTO E03PVL05;              /*  ROUTINE TO LOCATE     16290000
*                                                 PARM'S VALUE        * 16300000
         BC    08,E03PVL05                                        0279  16310000
*         IF  (R5 -> ATABFLGS & KONX20) ^= KONX20                       16320000
*                                             /* IF THIS IS NOT END   * 16330000
*           THEN                              /*  OF ATAB BLOCK UPDATE* 16340000
@9C6     MVC   @CTEMP2(1),KONSTRUC+1                              0280  16350000
         NC    @CTEMP2(1),4(@5)                                   0280  16360000
         CLC   @CTEMP2(1),KONSTRUC+1                              0280  16370000
         BC    08,@9C5                                            0280  16380000
*             DO;                             /*  TO NEXT ELMT AND    * 16390000
*               R5 = R5 + CNVA + KON7;        /*  START COMPARE FOR   * 16400000
         LH    @F,KON7                                            0282  16410000
         AH    @F,200(0,@6)                                       0282  16420000
         AR    @5,@F                                              0282  16430000
*               GOTO E03PDL10;                /*  IT                  * 16440000
         BC    15,E03PDL10                                        0283  16450000
*             END;                            /* OTHERWISE            * 16460000
*         IF  R4 -> ATABNXT ^= KON0           /* IF LAST ATAB BLOCK   * 16470000
*           THEN                              /*  HAS NOT BEEN REACHED* 16480000
@9C5     LH    @F,KON0                                            0285  16490000
         C     @F,4(0,@4)                                         0285  16500000
         BC    08,@9C4                                            0285  16510000
*             DO;                             /*  UPDATE TO NEXT BLOCK* 16520000
*               R4 = R4 -> ATABNXT;           /*  AND START COMPARING * 16530000
         L     @4,4(0,@4)                                         0287  16540000
*               R5 = R4 + KON12;              /*  WITH ITS FIRST ELMT * 16550000
         LH    @5,KON12                                           0288  16560000
         AR    @5,@4                                              0288  16570000
*               GOTO E03PDL10;                                          16580000
         BC    15,E03PDL10                                        0289  16590000
*             END;                            /* OTHERWISE- SINCE LAST* 16600000
* E03PDL15: E01SW9 = '1'B;                    /*  BLOCK HAS BEEN PROC-* 16610000
@9C4     EQU   *                                                  0291  16620000
E03PDL15 OI    203(@6),B'10000000'                                0291  16630000
*         ADPTR1 = ADDR(E03ITO05);            /* SET RETURN ADDR      * 16640000
         LA    @F,E03ITO05                                        0292  16650000
         ST    @F,88(0,@6)                                        0292  16660000
*         LVL1NO = KON13;                     /* SET 1ST LEVEL MSG    * 16670000
         MVC   304(2,@6),KON13                                    0293  16680000
*         LVL2NO = KON0;                      /* SET 2ND LEVEL MSG    * 16690000
         MVC   306(2,@6),KON0                                     0294  16700000
*         VARSGADR = OFFSET + TEMP01;         /* SET PTR TO VARIABLE  * 16710000
         L     @F,TEMP01                                          0295  16720000
         A     @F,OFFSET                                          0295  16730000
         ST    @F,@TEMP4                                          0295  16740000
         MVC   297(3,@6),@TEMP4+1                                 0295  16750000
*         CNVA  = TEMP03 + KON4;              /* PORTION OF MSG       * 16760000
         LH    @F,KON4                                            0296  16770000
         A     @F,TEMP03                                          0296  16780000
         STH   @F,200(0,@6)                                       0296  16790000
*         /*                                                    A42619* 16800000
*         IF CNVA ^< KON256                   /* IF TOO LARGE FOR ONE * 16810000
*           THEN                              /* BYTE           A42619* 16820000
         LH    @F,KON256                                          0297  16830000
         CH    @F,200(0,@6)                                       0297  16840000
         BC    02,@9C3                                            0297  16850000
*             CNVA = KON256 - KON1;           /* REDUCE IT      A42619* 16860000
         SH    @F,KON1                                            0298  16870000
         STH   @F,200(0,@6)                                       0298  16880000
*         VARSGLNG  = CNVC(2);                /* SET LENGTH           * 16890000
@9C3     MVC   296(1,@6),201(@6)                                  0299  16900000
*         GOTO E03MML05;                      /* GO TO MESSAGE MOD    * 16910000
         BC    15,E03MML05                                        0300  16920000
*                                                                       16930000
*         /***********************************************************/ 16940000
*         /*              FOLLOWING IS THE VALUE LOCATOR             */ 16950000
*         /*              ROUTINE WHICH DETERMINES THE               */ 16960000
*         /*              SIZE AND LOCATION OF THE VALUE             */ 16970000
*         /*              ASSOCIATED WITH THE SPECIFIED              */ 16980000
*         /*              PARAMETER - EXIT IS MADE TO                */ 16990000
*         /*              THE MOVE ROUTINE                           */ 17000000
*         /***********************************************************/ 17010000
* E03PVL05: TSTLNGC = R5 -> FTABPTR;          /* ALIGN PTR TO FTAB    * 17020000
E03PVL05 MVC   136(4,@6),0(@5)                                    0301  17030000
*         IF  TSTLNG = KON0                   /* IF IT WAS A KWRD W/O * 17040000
*           THEN                              /*   VALUE WHICH WAS NOT* 17050000
         LH    @F,KON0                                            0302  17060000
         C     @F,136(0,@6)                                       0302  17070000
         BC    07,@9C2                                            0302  17080000
*             DO;                             /*   SPECIFIED - SET    * 17090000
*               TEMP04 = KON0;                /*   LENGTH = ZERO AND  * 17100000
         ST    @F,TEMP04                                          0304  17110000
*               GOTO E03ITO05;                /* GO TO START MOVE     * 17120000
         BC    15,E03ITO05                                        0305  17130000
*             END;                                                      17140000
*         IF  TSTLNG = KON1                   /* IF ZERO IT           * 17150000
*           THEN                              /*  MEANS A KWRD W/O    * 17160000
@9C2     LH    @F,KON1                                            0307  17170000
         C     @F,136(0,@6)                                       0307  17180000
         BC    07,@9C1                                            0307  17190000
*             DO;                             /*  VALUE WHICH WAS NOT * 17200000
*               TEMP04 = CNVA;                /*  SO SET KWRD W/O VAL * 17210000
         LH    @F,200(0,@6)                                       0309  17220000
         ST    @F,TEMP04                                          0309  17230000
*               ATABCUR = R5 + KON7;          /*  SWITCH SET LENGTH OF* 17240000
         LH    @F,KON7                                            0310  17250000
         AR    @F,@5                                              0310  17260000
         ST    @F,176(0,@6)                                       0310  17270000
*               GOTO E03ITO05;                /*  VALUE = LENGTH OF   * 17280000
         BC    15,E03ITO05                                        0311  17290000
*             END;                            /*  KWRD AND GOTO MOVE  * 17300000
*         R4  = TSTLNG;                       /* OTHERWISE SET LENGTH * 17310000
@9C1     L     @4,136(0,@6)                                       0313  17320000
*         CNVC  = R4 -> FTABELNG(3:4);        /*  OF VALUE = FTAB ELMT* 17330000
         MVC   200(2,@6),2(@4)                                    0314  17340000
*         TEMP04  = CNVA;                     /*  LENGTH AND GOTO     * 17350000
         LH    @F,200(0,@6)                                       0315  17360000
         ST    @F,TEMP04                                          0315  17370000
*         ATABCUR  = R4 + KON4;               /*   MOVE ROUTINE       * 17380000
         LH    @F,KON4                                            0316  17390000
         AR    @F,@4                                              0316  17400000
         ST    @F,176(0,@6)                                       0316  17410000
*         GOTO  E03ITO05;                                               17420000
         BC    15,E03ITO05                                        0317  17430000
*         /************************************************************ 17440000
*         /*              FOLLOWING CODE IS ENTERED WHEN              * 17450000
*         /*              THE AMPERSAND DID NOT INDICATE              * 17460000
*         /*              A SYMBOLIC PARAMETER - IT SETS              * 17470000
*         /*              VARIABLES TO INDICATE THAT                  * 17480000
*         /*              VALUE IS NULL AND THEN MOVE                 * 17490000
*         /*              ROUTINE IS ENTERED                          * 17500000
*         /************************************************************ 17510000
* E03PVL10: TEMP04 = KON0;                    /* SET VALUE LENGTH = 0 * 17520000
E03PVL10 LH    @F,KON0                                            0318  17530000
         ST    @F,TEMP04                                          0318  17540000
*         TEMP02  = TEMP01 + KON1;            /* SET END OF PARM PTR    17550000
*                                                TO SHOW ONLY &       * 17560000
         LH    @F,KON1                                            0319  17570000
         A     @F,TEMP01                                          0319  17580000
         ST    @F,TEMP02                                          0319  17590000
*                                                                       17600000
*         /************************************************************ 17610000
*         /*              FOLLOWING IS THE MOVE ROUTINE-              * 17620000
*         /*               IF PREVIOUS ERRORS HAVE NOT                * 17630000
*         /*               PRECLUDED EXECUTION THIS                   * 17640000
*         /*               ROUTINE MOVES A PORTION OF                 * 17650000
*         /*               THE INPUT LINE AND THE PARM                * 17660000
*         /*               VALUE TO SP78 USING THE                    * 17670000
*         /*               GENERALIZED MOVE ROUTINE                   * 17680000
*         /************************************************************ 17690000
* E03ITO05:IF E01SW9 = '1'B                   /* IF EXECUTION OF THE  * 17700000
*            THEN                              /*  PROC IS NOT POSSIBLE 17710000
E03ITO05 TM    203(@6),B'10000000'                                0320  17720000
*              GOTO E03UAR05;                 /*  BYPASS THE MOVE     * 17730000
         BC    01,E03UAR05                                        0321  17740000
*         TEMP03  = TEMP01 - KON1 + TEMP04;   /* SET TEMP03 TO TOTAL    17750000
*                                                BYTES TO BE MOVED    * 17760000
         L     @F,TEMP04                                          0322  17770000
         SH    @F,KON1                                            0322  17780000
         A     @F,TEMP01                                          0322  17790000
         ST    @F,TEMP03                                          0322  17800000
*         IF PROCIND = PROCUR - KON4          /* IF THIS IS START OF  * 17810000
*           THEN                              /*  RCD ADD FOUR FOR THE* 17820000
         L     @F,PROCUR                                          0323  17830000
         SH    @F,KON4                                            0323  17840000
         C     @F,PROCIND                                         0323  17850000
         BC    07,@9C0                                            0323  17860000
*             CNVA = KON4;                    /*  RCD LNGTH INDICATOR * 17870000
         MVC   200(2,@6),KON4                                     0324  17880000
         BC    15,@9BF                                            0325  17890000
*           ELSE                                                        17900000
*             CNVA = KON0;                                              17910000
@9C0     MVC   200(2,@6),KON0                                     0325  17920000
*         TEMP01 = TEMP01 - KON1;                                       17930000
@9BF     L     @F,TEMP01                                          0326  17940000
         SH    @F,KON1                                            0326  17950000
         ST    @F,TEMP01                                          0326  17960000
*         IF  AVL78 <  TEMP03 + CNVA          /* IF THERE IS NOT SUF- * 17970000
*           THEN                              /* FICIENT ROOM FOR MOVE* 17980000
         LH    @F,200(0,@6)                                       0327  17990000
         A     @F,TEMP03                                          0327  18000000
         CH    @F,AVL78                                           0327  18010000
         BC    12,@9BE                                            0327  18020000
*             DO;                             /*  SET GETMAIN MINIMUM * 18030000
*               GMNMIN = TEMP03 + KON8 + CNVA;/*  AND SET RETURN ADDR-* 18040000
         LH    @F,200(0,@6)                                       0329  18050000
         AH    @F,KON8                                            0329  18060000
         A     @F,TEMP03                                          0329  18070000
         ST    @F,140(0,@6)                                       0329  18080000
*               GOTO  E03OAB05;               /* GO TO   GETMAIN      * 18090000
         BC    15,E03OAB05                                        0330  18100000
*             END;                                                      18110000
* E03ITO10: AVL78 = AVL78 - TEMP03 - CNVA;    /* REDUCE AMT AVAIL IN    18120000
*                                                SP78 BY AMT TO BE      18130000
*                                                MOVED -                18140000
*                                                SET VARIABLES FOR      18150000
*                                                GENERALIZED MOVE RTN * 18160000
@9BE     EQU   *                                                  0332  18170000
E03ITO10 LH    @F,200(0,@6)                                       0332  18180000
         LCR   @F,@F                                              0332  18190000
         S     @F,TEMP03                                          0332  18200000
         AH    @F,AVL78                                           0332  18210000
         STH   @F,AVL78                                           0332  18220000
*         R3  = TEMP03;                       /* R3 = AMT TO BE MOVED * 18230000
         L     @3,TEMP03                                          0333  18240000
*         R4  = PROCUR;                       /* R4 = AREA TO BE MOVED  18250000
*                                                INTO                 * 18260000
         L     @4,PROCUR                                          0334  18270000
*         R5  = OFFSET;                       /* R5 = AREA TO BE MOVED  18280000
*                                                FROM                 * 18290000
         L     @5,OFFSET                                          0335  18300000
*         ADPTR1  = ADDR(E03ITO15);           /* SET RETURN ADDRESS   * 18310000
         LA    @F,E03ITO15                                        0336  18320000
         ST    @F,88(0,@6)                                        0336  18330000
*         GOTO  E03GMV05;                     /* GO TO MOVE           * 18340000
         BC    15,E03GMV05                                        0337  18350000
* E03ITO15: PROCUR = PROCUR + TEMP01;         /* UPDATE SP78 RCD ADDR * 18360000
E03ITO15 L     @F,TEMP01                                          0338  18370000
         A     @F,PROCUR                                          0338  18380000
         ST    @F,PROCUR                                          0338  18390000
*         IF  TEMP04 = KON0                   /* IF IT IS A NULL VALUE* 18400000
*           THEN                              /*  FOR THE PARM -      * 18410000
         LH    @F,KON0                                            0339  18420000
         C     @F,TEMP04                                          0339  18430000
*             GOTO E03UAR05;                  /* BYPASS MOVE - ELSE     18440000
*                                                SET VARIABLES FOR      18450000
*                                                GENERALIZED MOVE RTN * 18460000
         BC    08,E03UAR05                                        0340  18470000
*         R3  = TEMP04;                       /* R3 = AMT TO BE MOVED * 18480000
         L     @3,TEMP04                                          0341  18490000
*         R4  = PROCUR;                       /* R4 = AREA TO BE MOVED  18500000
*                                                INTO                 * 18510000
         L     @4,PROCUR                                          0342  18520000
*         R5  = ATABCUR;                      /* R5 = AREA TO BE MOVED  18530000
*                                                FROM                 * 18540000
         L     @5,176(0,@6)                                       0343  18550000
*         ADPTR1  = ADDR(E03ITO20);           /* SET RETURN ADDR      * 18560000
         LA    @F,E03ITO20                                        0344  18570000
         ST    @F,88(0,@6)                                        0344  18580000
*         GOTO  E03GMV05;                     /* PERFORM MOVE         * 18590000
         BC    15,E03GMV05                                        0345  18600000
* E03ITO20: PROCUR = PROCUR + TEMP04;         /* UPDATE SP78 RCD ADDR * 18610000
E03ITO20 L     @F,TEMP04                                          0346  18620000
         A     @F,PROCUR                                          0346  18630000
         ST    @F,PROCUR                                          0346  18640000
*                                                                       18650000
*         /************************************************************ 18660000
*         /*              FOLLOWING IS UPDATE ROUTTINE-               * 18670000
*         /*              IT UPDATES ALL NECESSARY                    * 18680000
*         /*              POINTERS, INITIATES A READ IF               * 18690000
*         /*              NECESSARY AND BRANCHES TO CON-              * 18700000
*         /*              TINUE PROCESSING THE PROCEDURE              * 18710000
*         /************************************************************ 18720000
* E03UAR05: OFFSET = OFFSET + TEMP02 - KON1;  /* UPDATE POINTER TO      18730000
*                                                INPUT LINE           * 18740000
E03UAR05 LH    @F,KON1                                            0347  18750000
         LCR   @F,@F                                              0347  18760000
         A     @F,TEMP02                                          0347  18770000
         A     @F,OFFSET                                          0347  18780000
         ST    @F,OFFSET                                          0347  18790000
*         REMCHAR  = REMCHAR - TEMP02 + KON1; /* UPDATE NUMBER OF       18800000
*                                                REMAINING BYTES      * 18810000
         LH    @F,KON1                                            0348  18820000
         S     @F,TEMP02                                          0348  18830000
         AH    @F,REMCHAR                                         0348  18840000
         STH   @F,REMCHAR                                         0348  18850000
*         IF  REMCHAR ^> KON0                 /* IF THE END OF THE    * 18860000
*           THEN                              /*  LINE HAS BEEN       * 18870000
         LH    @F,KON0                                            0349  18880000
         CH    @F,REMCHAR                                         0349  18890000
         BC    04,@9BD                                            0349  18900000
*             DO;                             /*  REACHED             * 18910000
*               IF E01SW8 = '1'B              /* IF RECFM IS VARIABLE * 18920000
*                 THEN                        /* GET THE LINE NUMBER  * 18930000
         TM    202(@6),B'00000001'                                0351  18940000
         BC    12,@9BC                                            0351  18950000
*                   LINENO = RCDST -> INPLIN(5:12); /* FROM THE FRONT * 18960000
         L     @7,292(0,@6)                                       0352  18970000
         MVC   LINENO(8),4(@7)                                    0352  18980000
         BC    15,@9BB                                            0353  18990000
*                 ELSE                        /* THE RECORD OTHERWISE * 19000000
*                   DO;                       /* IT WILL BE IN THE    * 19010000
*                     OFFSET = OFFSET - KON1; /* LAST EIGHT BYTES OF  * 19020000
@9BC     L     @F,OFFSET                                          0354  19030000
         SH    @F,KON1                                            0354  19040000
         ST    @F,OFFSET                                          0354  19050000
*                     LINENO = INPLIN(1:8);   /* THE RECORD           * 19060000
         LR    @7,@F                                              0355  19070000
         MVC   LINENO(8),0(@7)                                    0355  19080000
*                   END;                                                19090000
*               ADPTR1 = ADDR(E03UAR10);      /*   GO TO OBTAIN       * 19100000
@9BB     LA    @F,E03UAR10                                        0357  19110000
         ST    @F,88(0,@6)                                        0357  19120000
*               GOTO E03IMR05;                /*  NEXT INPUT LINE     * 19130000
         BC    15,E03IMR05                                        0358  19140000
*             END;                                                      19150000
*         IF  INPLIN(1) ^= KPERD              /* IF CHAR IS NOT       * 19160000
*           THEN                              /*  PERIOD GO  TO CONT  * 19170000
@9BD     L     @7,OFFSET                                          0360  19180000
         CLC   0(1,@7),TCHAR+4                                    0360  19190000
*             GOTO E03SPL10;                  /*  SCANNING THE LINE   * 19200000
         BC    07,E03SPL10                                        0361  19210000
*         R4  = OFFSET - KON1;                /* ELSE SET R4 TO PREV  * 19220000
         LH    @4,KON1                                            0362  19230000
         LCR   @4,@4                                              0362  19240000
         A     @4,OFFSET                                          0362  19250000
*         IF  R4 -> INPLIN(1) ^= KAMP         /*  IOUS CHAR -IF IT WAS* 19260000
*           THEN                              /*  A SYMB PARM DO NOT  * 19270000
         CLC   0(1,@4),TCHAR+3                                    0363  19280000
         BC    08,@9BA                                            0363  19290000
*             DO;                                                       19300000
*               OFFSET = OFFSET + KON1;       /*  MOVE THE PERIOD     * 19310000
         LH    @F,KON1                                            0365  19320000
         A     @F,OFFSET                                          0365  19330000
         ST    @F,OFFSET                                          0365  19340000
*               REMCHAR = REMCHAR - KON1;     /*  MOVED SO RESET PTR  * 19350000
         LH    @F,REMCHAR                                         0366  19360000
         SH    @F,KON1                                            0366  19370000
         STH   @F,REMCHAR                                         0366  19380000
*                                                                       19390000
*             END;                                                      19400000
*         GOTO  E03SPL10;                     /* GO TO CONTINUE SCAN    19410000
*                                                OF INPUT LINE        * 19420000
         BC    15,E03SPL10                                        0368  19430000
* E03UAR10: IF E03SW1 ^= '1'B                 /* IF NEW LINE IS NOT   * 19440000
*             THEN                            /*  LOGICAL EXTENSION   * 19450000
E03UAR10 TM    E03BINSW,B'10000000'                               0369  19460000
         BC    01,@9B9                                            0369  19470000
*               DO;                           /*  OF PREVIOUS LINE-   * 19480000
*                 IF E03SW2 = '1'B            /* IF RECORD CONT OVER  * 19490000
*                   THEN                      /*  SP78 BLOCKS SET LNG * 19500000
         TM    E03BINSW,B'01000000'                               0371  19510000
         BC    12,@9B8                                            0371  19520000
*                     DO;                     /* OF PART IN PREV BLK  * 19530000
*                                             /* ADD LGN OF     YM2699* 19540000
*                       RECSIZE = PROCUR - ADDGMN - KON8 + RECSIZE;     19550000
         L     @F,RECSIZE                                         0373  19560000
         SH    @F,KON8                                            0373  19570000
         S     @F,148(0,@6)                                       0373  19580000
         A     @F,PROCUR                                          0373  19590000
         ST    @F,RECSIZE                                         0373  19600000
*                                             /*  IN PART       YM2699* 19610000
*                       E03SW2 = '0'B;        /*  CUR BLK - RESET SW  * 19620000
         NI    E03BINSW,B'10111111'                               0374  19630000
         BC    15,@9B7                                            0376  19640000
*                     END;                    /*  FOR CONT BLK        * 19650000
*                   ELSE                                                19660000
*                     RECSIZE = PROCUR - PROCIND; /* OBTAIN RCD         19670000
*                                                   LENGTH      YM2699* 19680000
@9B8     L     @F,PROCUR                                          0376  19690000
         S     @F,PROCIND                                         0376  19700000
         ST    @F,RECSIZE                                         0376  19710000
*                 PROCRCL = RECSIZEC(3:4);    /*  STORE IT IN THE       19720000
*                                                 RCD           YM2699* 19730000
@9B7     L     @7,PROCIND                                         0377  19740000
         MVC   0(2,@7),RECSIZE+2                                  0377  19750000
*                 PROCRES = ''B;              /*  ZERO RSVD BYTES     * 19760000
         XC    2(2,@7),2(@7)                                      0378  19770000
*                 IF RECSIZE > KON7FFC        /* IF OUTPUT RCD  YM2699* 19780000
*                   THEN                      /*   LENGTH EXCEED LIMIT* 19790000
         MVC   @TEMP2+2(2),KONSTRUC+3                             0379  19800000
         L     @F,@TEMP2                                          0379  19810000
         C     @F,RECSIZE                                         0379  19820000
         BC    10,@9B6                                            0379  19830000
*                     DO;                     /*   OF 32,768    YM2699* 19840000
*                       E01SW9 = '1'B;        /* SET TERMINATION SW   * 19850000
         OI    203(@6),B'10000000'                                0381  19860000
*                       LVL1NO = KON15;       /* SET FIRST LEVEL MSG  * 19870000
         MVC   304(2,@6),KON15                                    0382  19880000
*                       LVL2NO = KON0;        /* SET SECOND LEVEL MSG * 19890000
         MVC   306(2,@6),KON0                                     0383  19900000
*                       ADPTR1 = ADDR(E03PRT30);   /* SET RETURN ADDR * 19910000
         LA    @F,E03PRT30                                        0384  19920000
         ST    @F,88(0,@6)                                        0384  19930000
*                       VARSGADR = ADDR(LINENO);/*POINT TO LINE NUMBER  19940000
         LA    @F,LINENO                                          0385  19950000
         ST    @F,@TEMP4                                          0385  19960000
         MVC   297(3,@6),@TEMP4+1                                 0385  19970000
*                       CNVA = KON12;         /*  TO BE PLACED IN MSG * 19980000
         MVC   200(2,@6),KON12                                    0386  19990000
*                       VARSGLNG = CNVC(2);   /*  AND INDICATE LENGTH * 20000000
         MVC   296(1,@6),201(@6)                                  0387  20010000
*                       GO TO E03MML05;       /* GO TO MESSAGE MODULE * 20020000
         BC    15,E03MML05                                        0388  20030000
*                     END;                                              20040000
*                 PROCIND = PROCUR;           /*  UPDATE START OF RCD * 20050000
@9B6     MVC   PROCIND(4),PROCUR                                  0390  20060000
*                 PROCUR  = PROCIND + KON4;   /*   PTR AND CURRENT RCD* 20070000
         LH    @F,KON4                                            0391  20080000
         A     @F,PROCIND                                         0391  20090000
         ST    @F,PROCUR                                          0391  20100000
         BC    15,@9B5                                            0393  20110000
*               END;                          /*   PTR                * 20120000
*             ELSE                            /* ELSE RESET THE       * 20130000
*               E03SW1 = '0'B;                /*  CONTINUATION SWITCH * 20140000
@9B9     NI    E03BINSW,B'01111111'                               0393  20150000
*         GOTO  E03SPL05;                     /* GO TO START PROCESS-   20160000
*                                                ING THIS LINE        * 20170000
         BC    15,E03SPL05                                        0394  20180000
*                                                                       20190000
*         /************************************************************ 20200000
*         /*              FOLLOWING IS THE END OF DATA                * 20210000
*         /*              EXIT- IF THE IN CORE PROCEDURE              * 20220000
*         /*              IS NOT CONTIGUOUS IT IS MERGED              * 20230000
*         /*              INTO ONE CONTGUOUS BLOCK, ANY               * 20240000
*         /*              UNUSED SP78 CORE IS FREED AND               * 20250000
*         /*              EXIT IS MADE TO IKJEFE01                    * 20260000
*         /************************************************************ 20270000
* E03PRT05:IF E03SW1 = '1'B                   /* IF RECORD WAS TO BE  * 20280000
*            THEN                             /*  CONTINUED           * 20290000
E03PRT05 TM    E03BINSW,B'10000000'                               0395  20300000
         BC    12,@9B4                                            0395  20310000
*              DO;                                                      20320000
*                E03SW1 = '0'B;               /* SET SWITCHES         * 20330000
         NI    E03BINSW,B'01111111'                               0397  20340000
*                E01SW9 = '1'B;                                         20350000
         OI    203(@6),B'10000000'                                0398  20360000
*                LVL1NO = KON12;              /* SET 1ST LEVEL MSG    * 20370000
         MVC   304(2,@6),KON12                                    0399  20380000
*                LVL2NO = KON0;               /* SET 2ND LEVEL MSG    * 20390000
         MVC   306(2,@6),KON0                                     0400  20400000
*                ADPTR1 = ADDR(E03PRT05);     /* SET RETURN ADDR      * 20410000
         LA    @F,E03PRT05                                        0401  20420000
         ST    @F,88(0,@6)                                        0401  20430000
*                VARSGLNG = KONX00;                                     20440000
         MVC   296(1,@6),KONSTRUC                                 0402  20450000
*                GOTO E03MML05;               /*  ERROR ROUTINE       * 20460000
         BC    15,E03MML05                                        0403  20470000
*              END;                                                     20480000
*         IF E01SW12 = '0'B                   /* IF CORE HASN'T BEEN  * 20490000
*           THEN                              /*   GOTTEN FROM SP78   * 20500000
@9B4     TM    203(@6),B'00010000'                                0405  20510000
*             GOTO E03PRT30;                  /* THEN GO TO RETURN    * 20520000
         BC    08,E03PRT30                                        0406  20530000
*         IF E03SW2 = '1'B                    /* IF RECORD WAS  YM2699* 20540000
*           THEN                              /* SPANNED ACROSS YM2699* 20550000
         TM    E03BINSW,B'01000000'                               0407  20560000
         BC    12,@9B3                                            0407  20570000
*             DO;                             /* SP78 RECORDS THEN ADD  20580000
*                                                TO KNOWN LEN   YM2699* 20590000
*               RECSIZE = PROCUR - ADDGMN - KON8 + RECSIZE;             20600000
         L     @F,RECSIZE                                         0409  20610000
         SH    @F,KON8                                            0409  20620000
         S     @F,148(0,@6)                                       0409  20630000
         A     @F,PROCUR                                          0409  20640000
         ST    @F,RECSIZE                                         0409  20650000
*               E03SW2 = '0'B;                /* RESET SW       YM2699* 20660000
         NI    E03BINSW,B'10111111'                               0410  20670000
         BC    15,@9B2                                            0412  20680000
*             END;                                            /*YM2699* 20690000
*           ELSE                                                        20700000
*             RECSIZE = PROCUR - PROCIND;     /* OBTAIN RCD             20710000
*                                                LENGTH         YM2699* 20720000
@9B3     L     @F,PROCUR                                          0412  20730000
         S     @F,PROCIND                                         0412  20740000
         ST    @F,RECSIZE                                         0412  20750000
*         PROCRCL  = RECSIZEC(3:4);           /* STORE IN THE           20760000
*                                                RECORD         YM2699* 20770000
@9B2     L     @7,PROCIND                                         0413  20780000
         MVC   0(2,@7),RECSIZE+2                                  0413  20790000
*         IF RECSIZE > KON7FFC                /* IF OUTPUT RCD  YM2699* 20800000
*           THEN                              /*   LENGTH EXCEED LIMIT* 20810000
         MVC   @TEMP2+2(2),KONSTRUC+3                             0414  20820000
         L     @F,@TEMP2                                          0414  20830000
         C     @F,RECSIZE                                         0414  20840000
         BC    10,@9B1                                            0414  20850000
*             DO;                             /*   OF 32,768    YM2699* 20860000
*               E01SW9 = '1'B;                /* SET TERMINATION SW   * 20870000
         OI    203(@6),B'10000000'                                0416  20880000
*               LVL1NO = KON15;               /* SET FIRST LEVEL MSG  * 20890000
         MVC   304(2,@6),KON15                                    0417  20900000
*               LVL2NO = KON0;                /* SET SECOND LEVEL MSG * 20910000
         MVC   306(2,@6),KON0                                     0418  20920000
*               ADPTR1 = ADDR(E03PRT30);      /* SET RETURN ADDR FROM * 20930000
         LA    @F,E03PRT30                                        0419  20940000
         ST    @F,88(0,@6)                                        0419  20950000
*               VARSGADR = ADDR(LINENO);        /*POINT TO LINE NUMBER  20960000
         LA    @F,LINENO                                          0420  20970000
         ST    @F,@TEMP4                                          0420  20980000
         MVC   297(3,@6),@TEMP4+1                                 0420  20990000
*               CNVA = KON12;                 /*  TO BE PLACED IN MSG * 21000000
         MVC   200(2,@6),KON12                                    0421  21010000
*               VARSGLNG = CNVC(2);           /*  AND INDICATE LENGTH * 21020000
         MVC   296(1,@6),201(@6)                                  0422  21030000
*               GO TO E03MML05;               /* GO TO MESSAGE MODULE * 21040000
         BC    15,E03MML05                                        0423  21050000
*             END;                                                      21060000
*         PROCRES  = ''B;                     /* ZERO RESVD BYTES     * 21070000
@9B1     L     @7,PROCIND                                         0425  21080000
         XC    2(2,@7),2(@7)                                      0425  21090000
*         IF  E03SW3 ^= '1'B | E01SW9 = '1'B  /* IF IN CORE PROC IS   * 21100000
*           THEN                              /*  ALREADY CONTIGUOUS  * 21110000
         TM    E03BINSW,B'00100000'                               0426  21120000
         BC    12,@9B0                                            0426  21130000
         TM    203(@6),B'10000000'                                0426  21140000
         BC    12,@9AF                                            0426  21150000
*             GOTO E03PRT30;                  /*  BYPASS MERGE        * 21160000
         BC    03,E03PRT30                                        0427  21170000
*           ELSE                                                        21180000
*             GOTO E03PRT35;                                            21190000
         BC    15,E03PRT35                                        0428  21200000
* E03PRT07: R2  = PRMSTR;                     /* SAVE START ADDR OF     21210000
*                                                FIRST BLOCK          * 21220000
E03PRT07 L     @2,PRMSTR                                          0429  21230000
*         GMNMIN  = KON0;                     /* INITIALIZE FOR COMP-   21240000
*                                                UTATION OF AMT OF      21250000
*                                                CORE NEEDED          * 21260000
         LH    @F,KON0                                            0430  21270000
         ST    @F,140(0,@6)                                       0430  21280000
* E03PRT10: GMNMIN = GMNMIN + R2 -> PROCSZE - KON8;                     21290000
E03PRT10 LH    @F,KON8                                            0431  21300000
         LCR   @F,@F                                              0431  21310000
         A     @F,4(0,@2)                                         0431  21320000
         A     @F,140(0,@6)                                       0431  21330000
         ST    @F,140(0,@6)                                       0431  21340000
*                                             /* ADD SIZE OF THIS       21350000
*                                                BLOCK OF PROC        * 21360000
*         IF  R2 -> PROCNXT ^= KON0           /* IF THIS IS NOT THE   * 21370000
*           THEN                              /*  LAST BLOCK          * 21380000
         LH    @F,KON0                                            0432  21390000
         C     @F,0(0,@2)                                         0432  21400000
         BC    08,@9AE                                            0432  21410000
*             DO;                             /*  UPDATE TO NEXT      * 21420000
*               R2 = R2 -> PROCNXT;           /*  BLOCK AND RECYCLE   * 21430000
         L     @2,0(0,@2)                                         0434  21440000
*               GOTO E03PRT10;                /*  TO ADD IT'S SIZE    * 21450000
         BC    15,E03PRT10                                        0435  21460000
*             END;                            /*  TO AMT NEEDED       * 21470000
*         OFFSET = R2;                                                  21480000
@9AE     ST    @2,OFFSET                                          0437  21490000
*         GMNMAX  = GMNMIN;                   /* SET MAX AMT OF CORE    21500000
*                                                TO BE OBTAINED       * 21510000
         MVC   144(4,@6),140(@6)                                  0438  21520000
*         R4  = KON78;                        /* SET SUBPOOL INDICATOR* 21530000
         LH    @4,KON78                                           0439  21540000
*         ADPTR1  = ADDR(E03PRT15);           /* SET RETURN ADDRESS   * 21550000
         LA    @F,E03PRT15                                        0440  21560000
         ST    @F,88(0,@6)                                        0440  21570000
*         GOTO  E03GMN05;                     /* GO TO   GETMAIN      * 21580000
         BC    15,E03GMN05                                        0441  21590000
* E03PRT15: R4 = ADDGMN;                      /* R4 = AREA TO BE MOVED  21600000
*                                                TO                   * 21610000
E03PRT15 L     @4,148(0,@6)                                       0442  21620000
*         R5  = PRMSTR + KON8;                /* R5 = AREA TO BE MOVED  21630000
*                                                FROM                 * 21640000
         LH    @5,KON8                                            0443  21650000
         A     @5,PRMSTR                                          0443  21660000
*         OFFSET -> PROCNXT = R4;             /*  SET PTR TO NEW BLOCK* 21670000
         L     @7,OFFSET                                          0444  21680000
         ST    @4,0(0,@7)                                         0444  21690000
*         R3  = PRMSTR;                       /* SET R3 POINTING TO     21700000
*                                                PROCSZE              * 21710000
         L     @3,PRMSTR                                          0445  21720000
*         R3  = R3 -> PROCSZE - KON8;         /* R3 = AMOUNT TO BE      21730000
*                                                MOVED                * 21740000
         LH    @F,KON8                                            0446  21750000
         LCR   @F,@F                                              0446  21760000
         A     @F,4(0,@3)                                         0446  21770000
         LR    @3,@F                                              0446  21780000
*         ADPTR1  = ADDR(E03PRT20);           /* SET RETURN ADDRESS   * 21790000
         LA    @F,E03PRT20                                        0447  21800000
         ST    @F,88(0,@6)                                        0447  21810000
*         GOTO E03GMV05;                      /* MOVE OLD BLOCK INTO    21820000
*                                                NEW ONE              * 21830000
         BC    15,E03GMV05                                        0448  21840000
* E03PRT20: ;                                                           21850000
*         TSTLNG  = PRMSTR;                   /* SET ADDRESS OF CORE  * 21860000
E03PRT20 MVC   136(4,@6),PRMSTR                                   0450  21870000
*         R2  = ADDR(TSTLNG);                 /*   TO BE FREED        * 21880000
         LA    @2,136(0,@6)                                       0451  21890000
*         R5  = PRMSTR -> PROCNXT;            /* SET R5 POINTING TO   * 21900000
         L     @7,PRMSTR                                          0452  21910000
         L     @5,0(0,@7)                                         0452  21920000
*         PRMSTR = R5;                        /*  NEXT BLOCK          * 21930000
         ST    @5,PRMSTR                                          0453  21940000
*         TEMP04  = R4;                       /* SAVE ADDR OF FREE      21950000
*                                                PORTION OF  CONTIG-    21960000
*                                                UOUS BLOCK           * 21970000
         ST    @4,TEMP04                                          0454  21980000
*         R3  = R3 + KON8;                    /* ACCOUNT FOR SIZE AND   21990000
*                                                CHAIN PTR IN AMT TO    22000000
*                                                BE FREED             * 22010000
         AH    @3,KON8                                            0455  22020000
*         R4  = KON78;                        /* SET SUBPOOL INDICATOR* 22030000
         LH    @4,KON78                                           0456  22040000
*         ADPTR1  = ADDR(E03PRT25);           /* SET RETURN ADDRESS   * 22050000
         LA    @F,E03PRT25                                        0457  22060000
         ST    @F,88(0,@6)                                        0457  22070000
*         GOTO E03FMN05;                      /* GO TO   FREEMAIN     * 22080000
         BC    15,E03FMN05                                        0458  22090000
* E03PRT25: IF R5 ^= ADDGMN                   /* IF LAST BLOCK HAS    * 22100000
*             THEN                            /*  NOT BEEN            * 22110000
E03PRT25 C     @5,148(0,@6)                                       0459  22120000
         BC    08,@9AD                                            0459  22130000
*               DO;                           /*  PROCESSED -  SET    * 22140000
*                 R3 = R5 -> PROCSZE - KON8;  /*  R3 = AMT TO BE MOVED* 22150000
         LH    @F,KON8                                            0461  22160000
         LCR   @F,@F                                              0461  22170000
         A     @F,4(0,@5)                                         0461  22180000
         LR    @3,@F                                              0461  22190000
*                 R5 = R5 + KON8;             /*  R5 = AREA TO BE       22200000
*                                                 MOVED FROM          * 22210000
         AH    @5,KON8                                            0462  22220000
*                 R4 = TEMP04;                /*  R4 = AREA TO BE       22230000
*                                                 MOVED TO            * 22240000
         L     @4,TEMP04                                          0463  22250000
*                 ADPTR1  = ADDR(E03PRT20);   /* SET RETURN ADDRESS   * 22260000
         LA    @F,E03PRT20                                        0464  22270000
         ST    @F,88(0,@6)                                        0464  22280000
*                 GOTO E03GMV05;              /* GO TO   MOVE         * 22290000
         BC    15,E03GMV05                                        0465  22300000
*               END;                          /*                      * 22310000
*         SP78ADDR  = ADDGMN;                 /* STORE ADDR OF PROC   * 22320000
@9AD     MVC   156(4,@6),148(@6)                                  0467  22330000
*         SP78LNGT  = GMNMIN;                 /* STORE LENGTH OF BLOCK* 22340000
         MVC   160(4,@6),140(@6)                                  0468  22350000
*         RETURN;                             /* RETURN TO IKJEFE01   * 22360000
         BC    15,@EL01                                           0469  22370000
* E03PRT30: IF E01SW12 = '0'B                 /* IF THE EOD READ WAS  * 22380000
*             THEN                            /*   FOR IKJEFE01 - SET * 22390000
E03PRT30 TM    203(@6),B'00010000'                                0470  22400000
         BC    05,@9AC                                            0470  22410000
*               DO;                           /*   POINTER TO ZERO    * 22420000
*                 LINPTR1 = KON0;             /*   AND RETURN         * 22430000
         LH    @F,KON0                                            0472  22440000
         ST    @F,124(0,@6)                                       0472  22450000
*                 ADPTR1 = TEMP01;                                      22460000
         MVC   88(4,@6),TEMP01                                    0473  22470000
*                 RETURN;                                               22480000
         BC    15,@EL01                                           0474  22490000
*               END;                                                    22500000
*         IF E01SW9 = '1'B                    /* IF PROC CAN'T BE     * 22510000
*           THEN                              /* EXECUTED THEN RETURN * 22520000
@9AC     TM    203(@6),B'10000000'                                0476  22530000
*             RETURN;                                                   22540000
         BC    03,@EL01                                           0477  22550000
*         R3  = KON8;                         /* SET R3 = AMT OF CORE   22560000
*                                                TO BE FREED          * 22570000
@9AB     LH    @3,KON8                                            0478  22580000
*         TSTLNG  = ADDGMN;                   /* SET ADDRESS OF CORE  * 22590000
         MVC   136(4,@6),148(@6)                                  0479  22600000
*         R2  = ADDR(TSTLNG);                 /*   TO BE FREED          22610000
*                                                  CORE TO BE FREED   * 22620000
         LA    @2,136(0,@6)                                       0480  22630000
*         R4  = KON78;                        /* SET SUBPOOL INDICATOR* 22640000
         LH    @4,KON78                                           0481  22650000
*         ADPTR1  = ADDR(E03PRT35);           /* SET RETURN ADDRESS   * 22660000
         LA    @F,E03PRT35                                        0482  22670000
         ST    @F,88(0,@6)                                        0482  22680000
*         AMTGMN = AMTGMN - KON8;             /* ADJUST LENGTH OF SP78  22690000
         LH    @F,KON8                                            0483  22700000
         LCR   @F,@F                                              0483  22710000
         A     @F,152(0,@6)                                       0483  22720000
         ST    @F,152(0,@6)                                       0483  22730000
*         ADDGMN = ADDGMN + KON8;             /* ADJUST ADDR OF SP78  * 22740000
         LH    @F,KON8                                            0484  22750000
         A     @F,148(0,@6)                                       0484  22760000
         ST    @F,148(0,@6)                                       0484  22770000
*         GOTO E03FMN05;                      /* GO TO   FREEMAIN     * 22780000
         BC    15,E03FMN05                                        0485  22790000
* E03PRT35: R2 = PROCUR + KON7;               /* ROUND END OF PROC    * 22800000
E03PRT35 LH    @2,KON7                                            0486  22810000
         A     @2,PROCUR                                          0486  22820000
*         GEN;                                /*   ADDRESS TO MULTIPLE* 22830000
         SRL   R2,3                          /*   OF 8 WHICH IS      */ 22840000
         SLL   R2,3                          /*   GREATER OR EQUAL TO*/ 22850000
         DS    0H                                                       22860000
*         R3 = ADDGMN + AMTGMN - R2;          /* SET AMT OF CORE      * 22870000
         LCR   @3,@2                                              0488  22880000
         A     @3,152(0,@6)                                       0488  22890000
         A     @3,148(0,@6)                                       0488  22900000
*         TSTLNG = R2;                        /* SET ADDR OF CORE TO  * 22910000
         ST    @2,136(0,@6)                                       0489  22920000
*         R2 = ADDR(TSTLNG);                  /* BE FREED             * 22930000
         LA    @2,136(0,@6)                                       0490  22940000
*         R4 = KON78;                         /* SET SUBPOOL INDICATOR* 22950000
         LH    @4,KON78                                           0491  22960000
*         IF E03SW3 = '1'B                    /* IF PROC HAS NO PROC  * 22970000
*           THEN                              /* STATEMENT            * 22980000
         TM    E03BINSW,B'00100000'                               0492  22990000
         BC    12,@9AA                                            0492  23000000
*             DO;                                                       23010000
*               PROCSZE = PROCUR - ADDGMN;    /* SET SIZE OF PROC     * 23020000
         L     @F,148(0,@6)                                       0494  23030000
         LCR   @F,@F                                              0494  23040000
         A     @F,PROCUR                                          0494  23050000
         L     @7,148(0,@6)                                       0494  23060000
         ST    @F,4(0,@7)                                         0494  23070000
*               ADPTR1 = ADDR(E03PRT07);      /* SET RETURN ADDR      * 23080000
         LA    @F,E03PRT07                                        0495  23090000
         ST    @F,88(0,@6)                                        0495  23100000
         BC    15,@9A9                                            0497  23110000
*             END;                                                      23120000
*           ELSE                                                        23130000
*             ADPTR1  = ADDR(E03PRT40);       /* SET RETURN ADDRESS   * 23140000
@9AA     LA    @F,E03PRT40                                        0497  23150000
         ST    @F,88(0,@6)                                        0497  23160000
*         GOTO  E03FMN05;                     /* GO TO   FREEMAIN     * 23170000
         BC    15,E03FMN05                                        0498  23180000
* E03PRT40: SP78ADDR = ADDGMN;                /* SAVE ADDR OF PROC    * 23190000
E03PRT40 MVC   156(4,@6),148(@6)                                  0499  23200000
*         SP78LNGT  = PROCUR - SP78ADDR;      /* SAVE LENGTH OF PROC  * 23210000
         L     @F,156(0,@6)                                       0500  23220000
         LCR   @F,@F                                              0500  23230000
         A     @F,PROCUR                                          0500  23240000
         ST    @F,160(0,@6)                                       0500  23250000
*         AMTGMN = SP78LNGT;                  /* SAVE LENGTH OF STACK * 23260000
         MVC   152(4,@6),160(@6)                                  0501  23270000
*         RETURN;                             /* RETURN TO CALLER     * 23280000
         BC    15,@EL01                                           0502  23290000
*                                                                       23300000
*         /************************************************************ 23310000
*         /*              FOLLOWING IS THE GETMAIN ROUTINE-           * 23320000
*         /*              IT PERFORMS GETMAINS FOR THE                * 23330000
*         /*              CALLER AND RETURNS- INTER-                  * 23340000
*         /*              FACE IS PROVIDE VIA VARIABLES               * 23350000
*         /*              IN IKJEFE01                                 * 23360000
*         /************************************************************ 23370000
* E03GMN05:R2 = ADDR(GMNMIN);                 /* SET PTR TO INPUTS    * 23380000
E03GMN05 LA    @2,140(0,@6)                                       0503  23390000
*         R3  = ADDR(ADDGMN);                 /* SET PTR TO OUTPUTS   * 23400000
         LA    @3,148(0,@6)                                       0504  23410000
*         GEN(GETMAIN VC,LA=(R2),A=(R3),SP=(R4),MF=(E,AAGETM));         23420000
         GETMAIN VC,LA=(R2),A=(R3),SP=(R4),MF=(E,AAGETM)                23430000
         DS    0H                                                       23440000
*         IF  R15 = 0                         /* IF SUCCESSFUL -      * 23450000
*           THEN                              /*  RETURN TO CALLER    * 23460000
         LTR   @F,@F                                              0506  23470000
*             GOTO INDAD1;                                              23480000
         L     @7,88(0,@6)                                        0507  23490000
         BCR   08,@7                                              0507  23500000
*         E01SW9  = '1'B;                     /* SET ERROR SWITCH     * 23510000
         OI    203(@6),B'10000010'                                0508  23520000
*         E01SW15  = '1'B;                    /* INDICATE THAT MINIMUM  23530000
*                                                COULD NOT BE GOTTEN  * 23540000
*         LVL1NO = KON11;                     /* SET 1ST LEVEL MSG    * 23550000
         MVC   304(2,@6),KON11                                    0510  23560000
*         LVL2NO = KON0;                      /* SET 2ND LEVEL MSG    * 23570000
         MVC   306(2,@6),KON0                                     0511  23580000
*         VARSGLNG = KONX00;                                            23590000
         MVC   296(1,@6),KONSTRUC                                 0512  23600000
*         ADPTR1 = ADDR(E03PRT40);           /* SET RETURN ADDR      */ 23610000
         LA    @F,E03PRT40                                        0513  23620000
         ST    @F,88(0,@6)                                        0513  23630000
*         GOTO E03MML05;                       /* GO TO MSG ROUTINE     23640000
         BC    15,E03MML05                                        0514  23650000
*                                                                       23660000
*         /***********************************************************/ 23670000
*         /*              FOLLOWING IS THE FREEMAIN                  */ 23680000
*         /*              ROUTINE-  IF PERFORMS                      */ 23690000
*         /*              FREEMAINS FOR THE CALLER                   */ 23700000
*         /*              AND RETURNS- INTERFACE IS                  */ 23710000
*         /*              PROVIDED VIA REGISTERS                     */ 23720000
*         /*              2,3 AND 4                                  */ 23730000
*         /***********************************************************/ 23740000
* E03FMN05: GEN(FREEMAIN E,LV=(R3),A=(R2),SP=(R4),MF=(E,AAFREM));       23750000
E03FMN05 FREEMAIN E,LV=(R3),A=(R2),SP=(R4),MF=(E,AAFREM)                23760000
         DS    0H                                                       23770000
*         GOTO  INDAD1;                       /* RETURN TO CALLER     * 23780000
         L     @7,88(0,@6)                                        0516  23790000
         BCR   15,@7                                              0516  23800000
*                                                                       23810000
*         /************************************************************ 23820000
*         /*              FOLLOWING IS THE READ ROUTINE               * 23830000
*         /*              -  IT DEBLOCKS A RECORD AND                 * 23840000
*         /*              PASSES ITS ADDRESS TO THE                   * 23850000
*         /*              CALLER AND READS IN NEW                     * 23860000
*         /*              BLOCKS AS NECESSARY                         * 23870000
*         /************************************************************ 23880000
* E03IMR05: IF E01SW2 = '1'B                  /* IF THIS IS THE FIRST * 23890000
*             THEN                            /*  READ                * 23900000
E03IMR05 TM    202(@6),B'01000000'                                0517  23910000
         BC    12,@9A8                                            0517  23920000
*               DO;                                                     23930000
*                 R2 = ADDR(RDECB);           /* SAVE DECB ADDR       * 23940000
         LA    @2,104(0,@6)                                       0519  23950000
*                 GOTO E03IMR15;              /* TO DO                * 23960000
         BC    15,E03IMR15                                        0520  23970000
*               END;                          /* INITIALIZATION       * 23980000
*         IF  E01SW8 = '0'B                   /* IF RCD FMT IS FIXED  * 23990000
*           THEN                              /*  UPDATE TO NEXT RCD  * 24000000
@9A8     TM    202(@6),B'00000001'                                0522  24010000
         BC    05,@9A7                                            0522  24020000
*             RCDST = RCDST + DCBLRECL;       /*  BY RCD LENGTH IN DCB* 24030000
         LH    @F,82(0,@6)                                        0523  24040000
         A     @F,292(0,@6)                                       0523  24050000
         ST    @F,292(0,@6)                                       0523  24060000
         BC    15,@9A6                                            0524  24070000
*           ELSE                              /* IF RCD FMT IS VAR.   * 24080000
*             DO;                             /*  UPDATE TO NEXT RCD  * 24090000
*               CNVC = RCDLNG;                /*  BY THE RCD LENGTH   * 24100000
@9A7     L     @7,292(0,@6)                                       0525  24110000
         MVC   200(2,@6),0(@7)                                    0525  24120000
*               RCDST = RCDST + CNVA;         /*  INDICATOR IN THE    * 24130000
         LH    @F,200(0,@6)                                       0526  24140000
         A     @F,292(0,@6)                                       0526  24150000
         ST    @F,292(0,@6)                                       0526  24160000
*             END;                            /*  LAST  RCD           * 24170000
*         IF  RCDST ^= EOB                    /* IF THE END OF BLOCK  * 24180000
*           THEN                              /*  HAS NOT BEEN REACHED* 24190000
@9A6     L     @F,288(0,@6)                                       0528  24200000
         C     @F,292(0,@6)                                       0528  24210000
*             GOTO INDAD1;                    /*  RETURN TO CALLER    * 24220000
         L     @7,88(0,@6)                                        0529  24230000
         BCR   07,@7                                              0529  24240000
* E03IMR10:R2 = ADDR(RDECB);                  /* SET REG2 POINTING TO   24250000
*                                                THE DCB              * 24260000
E03IMR10 LA    @2,104(0,@6)                                       0530  24270000
*         GEN(CHECK ((R2)));                  /* WAIT FOR COMPLETION    24280000
*                                                OF PREVIOUS READ     * 24290000
         CHECK ((R2))                                                   24300000
         DS    0H                                                       24310000
*         TEMP05  = BFAPTR;                   /* SAVE ADDRESS OF BFR    24320000
*                                                JUST READ INTO       * 24330000
         MVC   TEMP05(4),224(@6)                                  0532  24340000
*         BFAPTR  = BFBPTR;                   /* SET FOR READ INTO      24350000
*                                                BUFFER               * 24360000
         MVC   224(4,@6),228(@6)                                  0533  24370000
*         BFBPTR  = TEMP05;                   /* SET PTR TO FULL        24380000
*                                                BUFFER               * 24390000
         MVC   228(4,@6),TEMP05                                   0534  24400000
*         IF  E01SW8 = '1'B                   /* IF RECORD FORMAT IS  * 24410000
*           THEN                              /*  VARIABLE -  END OF  * 24420000
         TM    202(@6),B'00000001'                                0535  24430000
         BC    12,@9A5                                            0535  24440000
*             DO;                             /*  BLOCK = START +     * 24450000
*               EOB = BFBPTR + RCDLNGA;       /*  BLOCK LNGTH INDIC.- * 24460000
         L     @7,228(0,@6)                                       0537  24470000
         LH    @F,0(0,@7)                                         0537  24480000
         A     @F,228(0,@6)                                       0537  24490000
         ST    @F,288(0,@6)                                       0537  24500000
*               RCDST = BFBPTR + KON4;        /* START OF RECORD IS   * 24510000
         LH    @F,KON4                                            0538  24520000
         A     @F,228(0,@6)                                       0538  24530000
         ST    @F,292(0,@6)                                       0538  24540000
         BC    15,@9A4                                            0540  24550000
*             END;                            /*  JUST AFTER BLOCK    * 24560000
*           ELSE                              /*  LENGTH INDICATOR    * 24570000
*             DO;                             /* IF RCD FMT IS FIXED  * 24580000
*               EOB  = DCBBLKSI - CSWCNT + BFBPTR;   /* THEN            24590000
*                                                END OF BLOCK = START * 24600000
@9A5     L     @F,228(0,@6)                                       0541  24610000
         L     @7,120(0,@6)                                       0541  24620000
         SH    @F,14(0,@7)                                        0541  24630000
         AH    @F,62(0,@6)                                        0541  24640000
         ST    @F,288(0,@6)                                       0541  24650000
*               RCDST = BFBPTR;               /*  + NUMBER OF BYTES   * 24660000
         MVC   292(4,@6),228(@6)                                  0542  24670000
*             END;                            /*  READ-  START OF RCD   24680000
*                                                 = START OF BLOCK    * 24690000
* E03IMR15: R3 = ADDR(DCBAR);                 /* SET R3 POINTING TO     24700000
*                                                THE DCB              * 24710000
@9A4     EQU   *                                                  0544  24720000
E03IMR15 LR    @3,@6                                              0544  24730000
*         R4  = BFAPTR;                       /* SET REG4 POINTING TO   24740000
*                                                AREA TO BE READ INTO * 24750000
         L     @4,224(0,@6)                                       0545  24760000
*         GEN;                                /* ISSUE THE READ FOR   * 24770000
         READ  (R2),SF,(R3),(R4),MF=E        /*   THE NEXT BUFFER    */ 24780000
         DS    0H                                                       24790000
*         IF  E01SW2 = '1'B                   /* IF THAT WAS THE FIRST* 24800000
*           THEN                              /*   READ -RESET SWITCH * 24810000
         TM    202(@6),B'01000000'                                0547  24820000
         BC    12,@9A3                                            0547  24830000
*             DO;                             /*   AND RECYCLE TO     * 24840000
*               E01SW2 = '0'B;                /*   WAIT FOR COMPLETION* 24850000
         NI    202(@6),B'10111111'                                0549  24860000
*               GOTO E03IMR10;                /*   AND ISSUE NEXT READ* 24870000
         BC    15,E03IMR10                                        0550  24880000
*             END;                                                      24890000
*         GOTO  INDAD1;                       /* RETURN TO CALLER     * 24900000
@9A3     L     @7,88(0,@6)                                        0552  24910000
         BCR   15,@7                                              0552  24920000
*         /************************************************************ 24930000
*         /*              FOLLOWING IS THE GENERALIZED                * 24940000
*         /*              MOVE ROUTINE -  IT MOVES THE                * 24950000
*         /*              NUMBER OF BYTES SPECIFIED IN                * 24960000
*         /*              REG3 FROM THE AREA SPECIFIED                * 24970000
*         /*              IN REG5 TO THE AREA SPECIFIED               * 24980000
*         /*              IN REG4                                     * 24990000
*         /************************************************************ 25000000
* E03GMV05: DO R2 = KON256 TO R3 BY KON256;   /* MOVE DATA IN 256 BYTE  25010000
*                                                BLOCKS               * 25020000
E03GMV05 LH    @2,KON256                                          0553  25030000
         BC    15,@DO9A1                                          0553  25040000
*             R4  -> PROCDAT(1:256) = R5 -> PROCDAT(1:256);             25050000
@DO9A2   MVC   0(256,@4),0(@5)                                    0554  25060000
*                                             /* MOVE ONE BLOCK       * 25070000
*             R4  = R4 + KON256;              /* UPDATE               * 25080000
         AH    @4,KON256                                          0555  25090000
*             R5  = R5 + KON256;              /*   POINTERS           * 25100000
         AH    @5,KON256                                          0556  25110000
*           END;                                                        25120000
*         R2 = R3 + KON256 - R2;              /* SET REG2 = NUMBER OF   25130000
*                                                BYTES NOT MOVED      * 25140000
         AH    @2,KON256                                          0557  25150000
@DO9A1   CR    @2,@3                                              0557  25160000
         BC    12,@DO9A2                                          0557  25170000
         LCR   @2,@2                                              0558  25180000
         AH    @2,KON256                                          0558  25190000
         AR    @2,@3                                              0558  25200000
*         IF  R2 ^= KON0                      /* IF ALL BYTES WERE NOT* 25210000
*           THEN                              /* MOVED, MOVE ALL LEFT * 25220000
         CH    @2,KON0                                            0559  25230000
         BC    08,@99E                                            0559  25240000
*             R4 -> PROCDAT(1:R2) = R5 -> PROCDAT(1:R2);                25250000
         LR    @E,@5                                              0560  25260000
         LR    @7,@2                                              0560  25270000
         BCTR  @7,0                                               0560  25280000
         LR    @A,@4                                              0560  25290000
         EX    @7,@MVC                                            0560  25300000
*         R4 = R4 + R2;                                                 25310000
@99E     EQU   *                                                  0561  25320000
         AR    @4,@2                                              0561  25330000
*         GOTO  INDAD1;                            /* RETURN TO CALLER* 25340000
         L     @7,88(0,@6)                                        0562  25350000
         BCR   15,@7                                              0562  25360000
*                                                                       25370000
*         /************************************************************ 25380000
*         /*              THE FOLLOWING IS THE CODE                   * 25390000
*         /*              WHICH OBTAINS ADDITIONAL                    * 25400000
*         /*              BLOCKS OF SP78 STORAGE FOR A                * 25410000
*         /*              PROCEDURE WHICH HAS OVERFLOWED              * 25420000
*         /*              THE INITIAL BLOCK                           * 25430000
*         /************************************************************ 25440000
* E03OAB05: R4  = KON78;                      /* SET SUBPOOL INDICATOR* 25450000
E03OAB05 LH    @4,KON78                                           0563  25460000
*         IF AVL78 < KON8                     /* IF THERE ARE NOT EIGHT 25470000
*           THEN                              /* UNUSED BYTES BYPASS  * 25480000
         LH    @F,KON8                                            0564  25490000
         CH    @F,AVL78                                           0564  25500000
*             GOTO E03OAB10;                  /* THE FREEMAIN         * 25510000
         BC    02,E03OAB10                                        0565  25520000
*         IF PROCIND = PROCUR - KON4          /* IF THIS IS START OF  * 25530000
*           THEN                              /* RCD SET START OF CALC* 25540000
         L     @F,PROCUR                                          0566  25550000
         SH    @F,KON4                                            0566  25560000
         C     @F,PROCIND                                         0566  25570000
         BC    07,@99D                                            0566  25580000
*             TSTLNG = PROCIND;               /* AT PROCIND           * 25590000
         MVC   136(4,@6),PROCIND                                  0567  25600000
         BC    15,@99C                                            0568  25610000
*           ELSE                              /* ELSE START CALC AT   * 25620000
*             TSTLNG = PROCUR;                /* PROCUR               * 25630000
@99D     MVC   136(4,@6),PROCUR                                   0568  25640000
*         R3 = TSTLNG + KON7;                 /* SET REG3 ABOVE DOUBLE  25650000
*                                                WORD BDY >= END OF     25660000
*                                                DATA IN LAST BLOCK   * 25670000
@99C     LH    @3,KON7                                            0569  25680000
         A     @3,136(0,@6)                                       0569  25690000
*         GEN;                                /* RESET REG3           * 25700000
         SRL   R3,3                          /*   TO DOUBLE WORD BDY */ 25710000
         SLL   R3,3                          /*   L= ITSELF          */ 25720000
         DS    0H                                                       25730000
*         TSTLNG  = R3;                       /* SET ADDR OF CORE TO  * 25740000
         ST    @3,136(0,@6)                                       0571  25750000
*         R2  = ADDR(TSTLNG);                 /* BE FREED             * 25760000
         LA    @2,136(0,@6)                                       0572  25770000
*         R3  = AVL78 - KON7;                 /* SET AMT TO BE FREED  * 25780000
         LH    @3,KON7                                            0573  25790000
         LCR   @3,@3                                              0573  25800000
         AH    @3,AVL78                                           0573  25810000
*         ADPTR1 = ADDR(E03OAB10);            /* SET RETURN ADDRESS   * 25820000
         LA    @F,E03OAB10                                        0574  25830000
         ST    @F,88(0,@6)                                        0574  25840000
*         GOTO  E03FMN05;                     /* GO TO   FREEMAIN     * 25850000
         BC    15,E03FMN05                                        0575  25860000
* E03OAB10: PROCSZE = PROCSZE - AVL78;        /* UPDATE SIZE OF LAST    25870000
*                                                BLOCK                * 25880000
E03OAB10 LH    @F,AVL78                                           0576  25890000
         LCR   @F,@F                                              0576  25900000
         L     @7,148(0,@6)                                       0576  25910000
         A     @F,4(0,@7)                                         0576  25920000
         ST    @F,4(0,@7)                                         0576  25930000
*         TEMP05  = ADDGMN;                   /* SAVE THE ADDRESS OF    25940000
*                                                LAST BLOCK           * 25950000
         MVC   TEMP05(4),148(@6)                                  0577  25960000
*         ADPTR1  = ADDR(E03OAB15);           /* SET RETURN ADDRESS   * 25970000
         LA    @F,E03OAB15                                        0578  25980000
         ST    @F,88(0,@6)                                        0578  25990000
*         GOTO  E03GMN05;                     /* GO TO   GETMAIN      * 26000000
         BC    15,E03GMN05                                        0579  26010000
* E03OAB15: E03SW3  = '1'B;                   /* SET MULTIPLE BLOCK   * 26020000
E03OAB15 OI    E03BINSW,B'00100000'                               0580  26030000
*         E01SW14 = '1'B;                     /*   SWITCH ON          * 26040000
         OI    203(@6),B'00000100'                                0581  26050000
*         R4  = TEMP05;                       /* REG4 POINTS TO LAST    26060000
*                                                BLOCK                * 26070000
         L     @4,TEMP05                                          0582  26080000
*         CURBLK = R4;                        /* SAVE ADDR OF CURRENT   26090000
*                                                BLOCK          YM2699* 26100000
         ST    @4,CURBLK                                          0583  26110000
*         R4  -> PROCNXT = ADDGMN;            /* SET FORWARD POINTER    26120000
*                                                IN OLD BLOCK         * 26130000
         MVC   0(4,@4),148(@6)                                    0584  26140000
*         IF PROCUR = PROCIND + KON4          /* IF THIS IS FIRST ELE-* 26150000
*           THEN                              /* MENT IN THIS BLOCK   * 26160000
         LH    @F,KON4                                            0585  26170000
         A     @F,PROCIND                                         0585  26180000
         C     @F,PROCUR                                          0585  26190000
         BC    07,@99B                                            0585  26200000
*             DO;                                                       26210000
*               PROCIND  = ADDGMN + KON8;     /* SET START OF OUTPUT    26220000
*                                                RCD INDICATOR        * 26230000
         LH    @F,KON8                                            0587  26240000
         A     @F,148(0,@6)                                       0587  26250000
         ST    @F,PROCIND                                         0587  26260000
*               PROCUR  = PROCIND + KON4;     /* SET CURRENT OUTPUT   * 26270000
         LH    @F,KON4                                            0588  26280000
         A     @F,PROCIND                                         0588  26290000
         ST    @F,PROCUR                                          0588  26300000
         BC    15,@99A                                            0590  26310000
*             END;                            /*   RCD LOCATION PTR   * 26320000
*           ELSE                              /* THE ITEM IS    YM2699* 26330000
*             DO;                             /* SPLIT OVER AT LEAST TW 26340000
*                                                BLOCKS         YM2699* 26350000
*               IF E03SW2 = '1'B              /* IF RECORD      YM2699* 26360000
*                 THEN                        /* ALREADY SPANNED JUST   26370000
*                                                ADD ON TO KNOWN        26380000
*                                                TOTAL          YM2699* 26390000
@99B     TM    E03BINSW,B'01000000'                               0591  26400000
         BC    12,@999                                            0591  26410000
*                   RECSIZE = PROCUR - CURBLK - KON8 + RECSIZE;         26420000
         L     @F,RECSIZE                                         0592  26430000
         SH    @F,KON8                                            0592  26440000
         S     @F,CURBLK                                          0592  26450000
         A     @F,PROCUR                                          0592  26460000
         ST    @F,RECSIZE                                         0592  26470000
         BC    15,@998                                            0593  26480000
*                 ELSE                        /* IF THIS IS     YM2699* 26490000
*                   DO;                       /* FIRST TIME FOR THIS    26500000
*                                                RECORD THEN INITIALIZE 26510000
*                                                THE RECORD LEN YM2699* 26520000
*                     RECSIZE = PROCUR - PROCIND;             /*YM2699* 26530000
@999     L     @F,PROCUR                                          0594  26540000
         S     @F,PROCIND                                         0594  26550000
         ST    @F,RECSIZE                                         0594  26560000
*                     E03SW2 = '1'B;                          /*YM2699* 26570000
         OI    E03BINSW,B'01000000'                               0595  26580000
*                   END;                                      /*YM2699* 26590000
*                                                                       26600000
*                 PROCUR = ADDGMN + KON8;     /* UPDATE TO NEW  BLOCK   26610000
*                                                               YM2699* 26620000
@998     LH    @F,KON8                                            0597  26630000
         A     @F,148(0,@6)                                       0597  26640000
         ST    @F,PROCUR                                          0597  26650000
*             END;                                                      26660000
*         AVL78 = AMTGMN - KON8;              /* SET BYTES AVAILABLE =  26670000
*                                                SIZE OF NEW BLOCK MINU 26680000
*                                                8 FOR PROCSZE AND      26690000
*                                                PROCNXT              * 26700000
@99A     LH    @F,KON8                                            0599  26710000
         LCR   @F,@F                                              0599  26720000
         A     @F,152(0,@6)                                       0599  26730000
         STH   @F,AVL78                                           0599  26740000
*         PROCNXT  = KON0;                    /* INDICATE THERE ARE NO  26750000
*                                                BLOCKS AFTER THIS    * 26760000
         LH    @F,KON0                                            0600  26770000
         L     @7,148(0,@6)                                       0600  26780000
         ST    @F,0(0,@7)                                         0600  26790000
*         PROCSZE  = AMTGMN;                  /* SET SIZE OF THIS       26800000
*                                                BLOCK                * 26810000
         MVC   4(4,@7),152(@6)                                    0601  26820000
*         GOTO  E03ITO10;                     /* GO BACK TO MAINLINE  * 26830000
         BC    15,E03ITO10                                        0602  26840000
* E03SYN05:  ;                                /* SYNAD EXIT ROUTINE   * 26850000
*         GEN(SYNADAF ACSMETH=BSAM,PARM1=(R1),PARM2=(R0));              26860000
E03SYN05 SYNADAF ACSMETH=BSAM,PARM1=(R1),PARM2=(R0)                     26870000
         DS    0H                                                       26880000
*         R4 = R1;                            /* SAVE ADDR OF MESSAGE * 26890000
         LR    @4,@1                                              0605  26900000
*         R1 = R6;                            /* REG 1 POINTS TO PARMS* 26910000
         LR    @1,@6                                              0606  26920000
*         CNVA = KON82;                       /* SET LENGTH OF MSG    * 26930000
         MVC   200(2,@6),KON82                                    0607  26940000
*         VARSGLNG = DSNARLNG + KON4;         /* 1ST LVL VARIABLE LNG * 26950000
         LH    @F,KON4                                            0608  26960000
         AH    @F,312(0,@6)                                       0608  26970000
         STC   @F,296(0,@6)                                       0608  26980000
*         VARSGADR = ADDR(DSNAMAR);           /* 1ST LVL VARIABLE PART* 26990000
         LA    @F,314(0,@6)                                       0609  27000000
         ST    @F,@TEMP4                                          0609  27010000
         MVC   297(3,@6),@TEMP4+1                                 0609  27020000
*         VARSGLN2 = CNVC(2);                 /* IND LVL VARIABLE LNG * 27030000
         MVC   300(1,@6),201(@6)                                  0610  27040000
*         VARSGAD2 = R4 + KON50;              /* 2ND LVL VARIABLE PART* 27050000
         LH    @F,KON50                                           0611  27060000
         AR    @F,@4                                              0611  27070000
         ST    @F,@TEMP4                                          0611  27080000
         MVC   301(3,@6),@TEMP4+1                                 0611  27090000
*         LVL1NO = KON3;                      /* NUMBER OF 1ST LVL MSG* 27100000
         MVC   304(2,@6),KON3                                     0612  27110000
*         LVL2NO = KON2;                      /* NUMBER OF 2ND LLV MSG* 27120000
         MVC   306(2,@6),KON2                                     0613  27130000
*         GEN;                                                          27140000
         LINK  EP=IKJEFE04         LINK TO MESSAGE MODULE               27150000
         SYNADRLS                  RELEASE SYNADAF WORK AREAS           27160000
         DS    0H                                                       27170000
*         E01SW9 = '1'B;                      /*SET TERMINATION SWITCH* 27180000
         OI    203(@6),B'10000000'                                0615  27190000
*         RETURN;                             /* RETURN TO CONTROL MOD* 27200000
         BC    15,@EL01                                           0616  27210000
* E03MML05:     VARSGLN2 = KONX00;                                      27220000
E03MML05 MVC   300(1,@6),KONSTRUC                                 0617  27230000
*         R1  = R6;                                                     27240000
         LR    @1,@6                                              0618  27250000
*         GEN(LINK  EP=IKJEFE04);             /* GO TO MSG SENDER     * 27260000
         LINK  EP=IKJEFE04                                              27270000
         DS    0H                                                       27280000
*         GOTO INDAD1;                        /* RETURN TO CALL PLACE * 27290000
         L     @7,88(0,@6)                                        0620  27300000
         BCR   15,@7                                              0620  27310000
* TRTINST: GEN(TRT   0(0,R3),TRTAB       MODEL TRANS. & TEST INSTRUCT); 27320000
TRTINST  TRT   0(0,R3),TRTAB       MODEL TRANS. & TEST INSTRUCT         27330000
         DS    0H                                                       27340000
*                                             /* TRANSLATE AND TEST   * 27350000
*                                             /* INSTRUCTION EXECUTED * 27360000
*                                             /* IN SEARCH OF SYMBOLIC* 27370000
*                                             /* PARAMETERS           * 27380000
*         GEN;                                                          27390000
SGET      EQU   *                                                       27400000
DDGETM   GETMAIN VC,MF=L                                                27410000
EGET      EQU   *                                                       27420000
SFRE      EQU   *                                                       27430000
DDFREM   FREEMAIN E,MF=L                                                27440000
EFRE      EQU   *                                                       27450000
         DS    0H                                                       27460000
*         GENERATE DATA;                                                27470000
*         END                                                           27480000
* /* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.       27490000
* /*%INCLUDE SYSLIB  (IKJCPPL )                                         27500000
* ;                                                                     27510000
@EL01    L     @D,4(0,@D)                                         0624  27520000
         LR    @1,@C                                              0624  27530000
         L     @0,@SIZ001                                         0624  27540000
         FREEMAIN R,LV=(0),A=(1)                                  0624  27550000
         L     @E,12(0,@D)                                        0624  27560000
         L     @0,20(0,@D)                                        0624  27570000
         LM    @2,@C,28(@D)                                       0624  27580000
         BCR   15,@E                                              0624  27590000
@DATA1   EQU   *                                                        27600000
@0       EQU   00                  EQUATES FOR REGISTERS 0-15           27610000
@1       EQU   01                                                       27620000
@2       EQU   02                                                       27630000
@3       EQU   03                                                       27640000
@4       EQU   04                                                       27650000
@5       EQU   05                                                       27660000
@6       EQU   06                                                       27670000
@7       EQU   07                                                       27680000
@8       EQU   08                                                       27690000
@9       EQU   09                                                       27700000
@A       EQU   10                                                       27710000
@B       EQU   11                                                       27720000
@C       EQU   12                                                       27730000
@D       EQU   13                                                       27740000
@E       EQU   14                                                       27750000
@F       EQU   15                                                       27760000
@D1      DC    H'1'                                                     27770000
@CLC     CLC   0(1,@A),0(@E)                                            27780000
@MVC     MVC   0(1,@A),0(@E)                                            27790000
         DS    0F                                                       27800000
@SIZ001  DC    AL1(&SPN)                                                27810000
         DC    AL3(@DATEND-@DATD)                                       27820000
         DS    0F                                                       27830000
         DS    0D                                                       27840000
@DATA    EQU   *                                                        27850000
DUMPARM  EQU   00000000            FULLWORD INTEGER                     27860000
R0       EQU   00000000            FULLWORD POINTER REGISTER            27870000
R1       EQU   00000001            FULLWORD POINTER REGISTER            27880000
R2       EQU   00000002            FULLWORD POINTER REGISTER            27890000
R3       EQU   00000003            FULLWORD POINTER REGISTER            27900000
R4       EQU   00000004            FULLWORD POINTER REGISTER            27910000
R5       EQU   00000005            FULLWORD POINTER REGISTER            27920000
R6       EQU   00000006            FULLWORD POINTER REGISTER            27930000
R15      EQU   00000015            FULLWORD POINTER REGISTER            27940000
KON0     EQU   *                   HALFWORD INTEGER                     27950000
         DC    FL2'0'                                                   27960000
KON1     EQU   *                   HALFWORD INTEGER                     27970000
         DC    FL2'1'                                                   27980000
KON2     EQU   *                   HALFWORD INTEGER                     27990000
         DC    FL2'2'                                                   28000000
KON3     EQU   *                   HALFWORD INTEGER                     28010000
         DC    FL2'3'                                                   28020000
KON4     EQU   *                   HALFWORD INTEGER                     28030000
         DC    FL2'4'                                                   28040000
KON5     EQU   *                   HALFWORD INTEGER                     28050000
         DC    FL2'5'                                                   28060000
KON7     EQU   *                   HALFWORD INTEGER                     28070000
         DC    FL2'7'                                                   28080000
KON8     EQU   *                   HALFWORD INTEGER                     28090000
         DC    FL2'8'                                                   28100000
KON11    EQU   *                   HALFWORD INTEGER                     28110000
         DC    FL2'11'                                                  28120000
KON12    EQU   *                   HALFWORD INTEGER                     28130000
         DC    FL2'12'                                                  28140000
KON13    EQU   *                   HALFWORD INTEGER                     28150000
         DC    FL2'13'                                                  28160000
KON14    EQU   *                   HALFWORD INTEGER                     28170000
         DC    FL2'14'                                                  28180000
KON15    EQU   *                   HALFWORD INTEGER                     28190000
         DC    FL2'15'                                                  28200000
KON16    EQU   *                   HALFWORD INTEGER                     28210000
         DC    FL2'16'                                                  28220000
KON50    EQU   *                   HALFWORD INTEGER                     28230000
         DC    FL2'50'                                                  28240000
KON78    EQU   *                   HALFWORD INTEGER                     28250000
         DC    FL2'78'                                                  28260000
KON82    EQU   *                   HALFWORD INTEGER                     28270000
         DC    FL2'82'                                                  28280000
KON256   EQU   *                   HALFWORD INTEGER                     28290000
         DC    FL2'256'                                                 28300000
KON1992  EQU   *                   HALFWORD INTEGER                     28310000
         DC    FL2'1992'                                                28320000
KONSTRUC EQU   @DATA+00000040      5 BYTE(S) ON WORD                    28330000
         ORG   KONSTRUC+00000000                                        28340000
KONX00   EQU   *                   1 BYTE(S)                            28350000
         DC    X'00'                                                    28360000
KONX20   EQU   *                   1 BYTE(S)                            28370000
         DC    X'20'                                                    28380000
KONXFF   EQU   *                   1 BYTE(S)                            28390000
         DC    X'FF'                                                    28400000
KON7FFC  EQU   *                   2 BYTE(S)                            28410000
         DC    X'7FFC'                                                  28420000
E01DATDF EQU   00000000            360 BYTE(S) ON DWORD                 28430000
DCBAR    EQU   E01DATDF+00000000   88 BYTE(S) ON DWORD                  28440000
ADPTR1   EQU   E01DATDF+00000088   FULLWORD POINTER                     28450000
ADPTR2   EQU   E01DATDF+00000092   FULLWORD POINTER                     28460000
MMNAMAR  EQU   E01DATDF+00000096   8 BYTE(S) ON WORD                    28470000
RDECB    EQU   E01DATDF+00000104   20 BYTE(S) ON WORD                   28480000
A00000   EQU   E01DATDF+00000104   6 BYTE(S)                            28490000
DECLNGTH EQU   E01DATDF+00000110   HALFWORD INTEGER                     28500000
A00001   EQU   E01DATDF+00000112   8 BYTE(S)                            28510000
DECIOBPT EQU   E01DATDF+00000120   FULLWORD POINTER                     28520000
LINPTR1  EQU   E01DATDF+00000124   FULLWORD POINTER                     28530000
EOLCNT   EQU   E01DATDF+00000128   FULLWORD INTEGER                     28540000
POSCNT   EQU   E01DATDF+00000132   FULLWORD INTEGER                     28550000
TSTLNG   EQU   E01DATDF+00000136   FULLWORD INTEGER                     28560000
TSTLNGC  EQU   E01DATDF+00000136   4 BYTE(S)                            28570000
GMNMIN   EQU   E01DATDF+00000140   FULLWORD INTEGER                     28580000
GMNMAX   EQU   E01DATDF+00000144   FULLWORD INTEGER                     28590000
ADDGMN   EQU   E01DATDF+00000148   FULLWORD POINTER                     28600000
AMTGMN   EQU   E01DATDF+00000152   FULLWORD INTEGER                     28610000
SP78ADDR EQU   E01DATDF+00000156   FULLWORD POINTER                     28620000
SP78LNGT EQU   E01DATDF+00000160   FULLWORD POINTER                     28630000
RDXCNV   EQU   E01DATDF+00000164   FULLWORD INTEGER                     28640000
DDIG     EQU   E01DATDF+00000164   1 BYTE(S)                            28650000
POSSPC   EQU   E01DATDF+00000168   FULLWORD INTEGER                     28660000
ATABIND  EQU   E01DATDF+00000172   FULLWORD POINTER                     28670000
ATABCUR  EQU   E01DATDF+00000176   FULLWORD POINTER                     28680000
FTABIND  EQU   E01DATDF+00000180   FULLWORD POINTER                     28690000
FTABCUR  EQU   E01DATDF+00000184   FULLWORD POINTER                     28700000
VALCNT   EQU   E01DATDF+00000188   FULLWORD INTEGER                     28710000
KWOCNT   EQU   E01DATDF+00000192   HALFWORD INTEGER                     28720000
KWWCNT   EQU   E01DATDF+00000194   HALFWORD INTEGER                     28730000
KWOBYT   EQU   E01DATDF+00000196   HALFWORD INTEGER                     28740000
KWWBYT   EQU   E01DATDF+00000198   HALFWORD INTEGER                     28750000
CNVA     EQU   E01DATDF+00000200   HALFWORD INTEGER                     28760000
CNVC     EQU   E01DATDF+00000200   2 BYTE(S)                            28770000
E01BINSW EQU   E01DATDF+00000202   2 BYTE(S) ON HWORD                   28780000
E01SW1   EQU   E01DATDF+00000202   1 BIT(S)                             28790000
E01SW2   EQU   E01DATDF+00000202   1 BIT(S)                             28800000
E01SW3   EQU   E01DATDF+00000202   1 BIT(S)                             28810000
E01SW4   EQU   E01DATDF+00000202   1 BIT(S)                             28820000
E01SW5   EQU   E01DATDF+00000202   1 BIT(S)                             28830000
E01SW6   EQU   E01DATDF+00000202   1 BIT(S)                             28840000
E01SW7   EQU   E01DATDF+00000202   1 BIT(S)                             28850000
E01SW8   EQU   E01DATDF+00000202   1 BIT(S)                             28860000
E01SW9   EQU   E01DATDF+00000203   1 BIT(S)                             28870000
E01SW10  EQU   E01DATDF+00000203   1 BIT(S)                             28880000
E01SW11  EQU   E01DATDF+00000203   1 BIT(S)                             28890000
E01SW12  EQU   E01DATDF+00000203   1 BIT(S)                             28900000
E01SW13  EQU   E01DATDF+00000203   1 BIT(S)                             28910000
E01SW14  EQU   E01DATDF+00000203   1 BIT(S)                             28920000
E01SW15  EQU   E01DATDF+00000203   1 BIT(S)                             28930000
E01SW16  EQU   E01DATDF+00000203   1 BIT(S)                             28940000
REGSAV   EQU   E01DATDF+00000204   3*FULLWORD INTEGER                   28950000
LATAB    EQU   E01DATDF+00000216   FULLWORD POINTER                     28960000
LFTAB    EQU   E01DATDF+00000220   FULLWORD POINTER                     28970000
BFAPTR   EQU   E01DATDF+00000224   FULLWORD INTEGER                     28980000
BFBPTR   EQU   E01DATDF+00000228   FULLWORD POINTER                     28990000
CPPLPTR  EQU   E01DATDF+00000232   FULLWORD POINTER                     29000000
STPRM    EQU   E01DATDF+00000236   3*FULLWORD INTEGER                   29010000
PPLPTR   EQU   E01DATDF+00000248   FULLWORD POINTER                     29020000
CBCOR    EQU   E01DATDF+00000252   24 BYTE(S)                           29030000
SRECB    EQU   E01DATDF+00000276   FULLWORD INTEGER                     29040000
RETCDAR  EQU   E01DATDF+00000280   FULLWORD INTEGER                     29050000
ABLK1    EQU   E01DATDF+00000284   FULLWORD POINTER                     29060000
EOB      EQU   E01DATDF+00000288   FULLWORD POINTER                     29070000
RCDST    EQU   E01DATDF+00000292   FULLWORD POINTER                     29080000
VARSGLNG EQU   E01DATDF+00000296   1 BYTE(S)                            29090000
VARSGADR EQU   E01DATDF+00000297   3  BYTE  POINTER ON WORD+1           29100000
VARSGLN2 EQU   E01DATDF+00000300   1 BYTE(S)                            29110000
VARSGAD2 EQU   E01DATDF+00000301   3  BYTE  POINTER ON WORD+1           29120000
LVL1NO   EQU   E01DATDF+00000304   HALFWORD INTEGER                     29130000
LVL2NO   EQU   E01DATDF+00000306   HALFWORD INTEGER                     29140000
PDLPTR   EQU   E01DATDF+00000308   FULLWORD POINTER                     29150000
DRDNPTR  EQU   E01DATDF+00000312   46 BYTE(S) ON WORD                   29160000
DSNARLNG EQU   E01DATDF+00000312   HALFWORD INTEGER                     29170000
DSNARLCH EQU   E01DATDF+00000312   2 BYTE(S)                            29180000
DSNAMAR  EQU   E01DATDF+00000314   44 BYTE(S)                           29190000
CBUFLSAV EQU   E01DATDF+00000358   HALFWORD INTEGER                     29200000
CBUFLSAC EQU   E01DATDF+00000358   2 BYTE(S)                            29210000
CPPL     EQU   00000000            16 BYTE(S) ON WORD                   29220000
CPPLCBUF EQU   CPPL+00000000       FULLWORD POINTER                     29230000
CPPLUPT  EQU   CPPL+00000004       FULLWORD POINTER                     29240000
CPPLPSCB EQU   CPPL+00000008       FULLWORD POINTER                     29250000
CPPLECT  EQU   CPPL+00000012       FULLWORD POINTER                     29260000
CBUFPTR  EQU   00000000            FULLWORD POINTER                     29270000
CBUF     EQU   00000000            5 BYTE(S) ON WORD                    29280000
CBUFLNG  EQU   CBUF+00000000       HALFWORD POINTER                     29290000
CBUFOFF  EQU   CBUF+00000002       HALFWORD POINTER                     29300000
CBUFDATA EQU   CBUF+00000004       1 BYTE(S)                            29310000
DCBD     EQU   00000000            88 BYTE(S) ON DWORD                  29320000
A00002   EQU   DCBD+00000000       26 BYTE(S)                           29330000
DCBDSORG EQU   DCBD+00000026       2 BYTE(S)                            29340000
A00003   EQU   DCBD+00000028       5 BYTE(S)                            29350000
DCBEODAD EQU   DCBD+00000033       3  BYTE  POINTER ON WORD+1           29360000
DCBRECFM EQU   DCBD+00000036       1 BYTE(S)                            29370000
DCBRCFF  EQU   DCBD+00000036       1 BIT(S)                             29380000
DCBRCFV  EQU   DCBD+00000036       1 BIT(S)                             29390000
DCBEXLST EQU   DCBD+00000037       3  BYTE  POINTER ON WORD+1           29400000
DCBDDNAM EQU   DCBD+00000040       8 BYTE(S)                            29410000
DCBOFLGS EQU   DCBD+00000048       1 BYTE(S)                            29420000
A00004   EQU   DCBD+00000049       1 BYTE(S)                            29430000
DCBMACR  EQU   DCBD+00000050       2 BYTE(S)                            29440000
A00005   EQU   DCBD+00000052       10 BYTE(S)                           29450000
DCBBLKSI EQU   DCBD+00000062       HALFWORD INTEGER                     29460000
A00006   EQU   DCBD+00000064       18 BYTE(S)                           29470000
DCBLRECL EQU   DCBD+00000082       HALFWORD INTEGER                     29480000
A00007   EQU   DCBD+00000084       4 BYTE(S)                            29490000
         ENTRY E03PRT05                                                 29500000
         ENTRY E03SYN05                                                 29510000
ATAB     EQU   00000000            12 BYTE(S) ON WORD                   29520000
ATABLST  EQU   ATAB+00000000       FULLWORD POINTER                     29530000
ATABNXT  EQU   ATAB+00000004       FULLWORD POINTER                     29540000
ATABLNG  EQU   ATAB+00000008       FULLWORD INTEGER                     29550000
FTAB     EQU   00000000            12 BYTE(S) ON WORD                   29560000
FTABLST  EQU   FTAB+00000000       FULLWORD POINTER                     29570000
FTABNXT  EQU   FTAB+00000004       FULLWORD POINTER                     29580000
FTABLNG  EQU   FTAB+00000008       HALFWORD INTEGER                     29590000
FTABDLNG EQU   FTAB+00000010       HALFWORD INTEGER                     29600000
ATABELMT EQU   00000000            263 BYTE(S) ON WORD                  29610000
FTABPTR  EQU   ATABELMT+00000000   4 BYTE(S)                            29620000
ATABFLGS EQU   ATABELMT+00000004   1 BYTE(S)                            29630000
ATABELNC EQU   ATABELMT+00000005   2 BYTE(S)                            29640000
ATABDAT  EQU   ATABELMT+00000007   256 BYTE(S)                          29650000
FTABELMT EQU   00000000            260 BYTE(S) ON WORD                  29660000
FTABELNG EQU   FTABELMT+00000000   4 BYTE(S)                            29670000
FTABDAT  EQU   FTABELMT+00000004   256 BYTE(S)                          29680000
INPLIN   EQU   00000000            32767 BYTE(S)                        29690000
RCDLNG   EQU   00000000            2 BYTE(S)                            29700000
RCDLNGA  EQU   00000000            HALFWORD INTEGER                     29710000
IOB      EQU   00000000            16 BYTE(S) ON WORD                   29720000
A00008   EQU   IOB+00000000        14 BYTE(S)                           29730000
CSWCNT   EQU   IOB+00000014        HALFWORD INTEGER                     29740000
PROCDAT  EQU   00000000            32767 BYTE(S)                        29750000
PROCRCL  EQU   00000000            2 BYTE(S)                            29760000
PROCRCLF EQU   00000000            HALFWORD INTEGER                     29770000
PROCRES  EQU   00000002            16 BIT(S) ON BYTE                    29780000
PROCNXT  EQU   00000000            FULLWORD POINTER                     29790000
PROCSZE  EQU   00000004            FULLWORD INTEGER                     29800000
TRTAB    EQU   *                   256*1 BYTE(S)                        29810000
         DC    00080X'00'                                               29820000
         DC    C'&&'                                                    29830000
         DC    00175X'00'                                               29840000
TCHAR    EQU   @DATA+00000301      5 BYTE(S)                            29850000
KBLNK    EQU   *                   1 BYTE(S)                            29860000
         DC    C' '                                                     29870000
KCOM     EQU   *                   1 BYTE(S)                            29880000
         DC    C','                                                     29890000
KTAB     EQU   *                   1 BYTE(S)                            29900000
         DC    X'05'                                                    29910000
KAMP     EQU   *                   1 BYTE(S)                            29920000
         DC    C'&&'                                                    29930000
KPERD    EQU   *                   1 BYTE(S)                            29940000
         DC    C'.'                                                     29950000
KCONT    EQU   *                   1 BYTE(S)                            29960000
         DC    C'-'                                                     29970000
KCONTP   EQU   *                   1 BYTE(S)                            29980000
         DC    C'+'                                                     29990000
KONSLAST EQU   *                   2 BYTE(S)                            30000000
         DC    C'/*'                                                    30010000
KONASTSL EQU   *                   2 BYTE(S)                            30020000
         DC    C'*/'                                                    30030000
         ORG   @DATA                                                    30040000
         DS    00000312C                                                30050000
@L       EQU   2                                                        30060000
@DATD    DSECT                                                          30070000
@SAV001  EQU   @DATD+00000000      72 BYTE(S) ON WORD                   30080000
OFFSET   EQU   @DATD+00000072      FULLWORD POINTER                     30090000
REMCHAR  EQU   @DATD+00000076      HALFWORD INTEGER                     30100000
REMCHARC EQU   @DATD+00000076      2 BYTE(S)                            30110000
LINENO   EQU   @DATD+00000078      8 BYTE(S)                            30120000
AVL78    EQU   @DATD+00000086      HALFWORD INTEGER                     30130000
PRMSTR   EQU   @DATD+00000088      FULLWORD POINTER                     30140000
PROCIND  EQU   @DATD+00000092      FULLWORD POINTER                     30150000
PROCUR   EQU   @DATD+00000096      FULLWORD POINTER                     30160000
E03BINSW EQU   @DATD+00000100      1 BYTE(S)                            30170000
E03SW1   EQU   E03BINSW+00000000   1 BIT(S)                             30180000
E03SW2   EQU   E03BINSW+00000000   1 BIT(S)                             30190000
E03SW3   EQU   E03BINSW+00000000   1 BIT(S)                             30200000
E03SW4   EQU   E03BINSW+00000000   1 BIT(S)                             30210000
E03SW5   EQU   E03BINSW+00000000   1 BIT(S)                             30220000
CONTPLUS EQU   E03BINSW+00000000   1 BIT(S)                             30230000
E03SW6   EQU   E03BINSW+00000000   1 BIT(S)                             30240000
ENDDLM   EQU   E03BINSW+00000000   1 BIT(S)                             30250000
E03SW7   EQU   E03BINSW+00000000   1 BIT(S)                             30260000
NULLINE  EQU   E03BINSW+00000000   1 BIT(S)                             30270000
A00009   EQU   E03BINSW+00000000   1 BIT(S)                             30280000
TEMP01   EQU   @DATD+00000104      FULLWORD INTEGER                     30290000
TEMP02   EQU   @DATD+00000108      FULLWORD INTEGER                     30300000
TEMP03   EQU   @DATD+00000112      FULLWORD INTEGER                     30310000
TEMP04   EQU   @DATD+00000116      FULLWORD INTEGER                     30320000
TEMP05   EQU   @DATD+00000120      FULLWORD INTEGER                     30330000
TEMPC05  EQU   TEMP05+00000000     4 BYTE(S)                            30340000
CURBLK   EQU   @DATD+00000124      FULLWORD POINTER                     30350000
RECSIZE  EQU   @DATD+00000128      FULLWORD INTEGER                     30360000
RECSIZEC EQU   RECSIZE+00000000    4 BYTE(S)                            30370000
I        EQU   @DATD+00000132      FULLWORD INTEGER                     30380000
         DS    00000140C                                                30390000
@TEMPS   DS    0F                                                       30400000
@TEMP2   DC    F'0'                                                     30410000
@TEMP4   DC    F'0'                                                     30420000
@CTEMP2  DS    CL001                                                    30430000
         CNOP  0,4                                                      30440000
AAGETM    DS    CL(EGET-SGET)                                           30450000
         CNOP  0,4                                                      30460000
AAFREM    DS    CL(EFRE-SFRE)                                           30470000
@DATD    DSECT                                                          30480000
@DATEND  EQU   *                                                        30490000
IKJEFE03 CSECT ,                                                        30500000
@9FC     EQU   E03CNT15                                                 30510000
E03CNT10 EQU   @EL01                                                    30520000
@9F0     EQU   E03SPL25                                                 30530000
@9DB     EQU   @DO9DE                                                   30540000
E03SPL09 EQU   E03IMR05                                                 30550000
@9D8     EQU   E03IMR05                                                 30560000
@9D4     EQU   E03PVL10                                                 30570000
@9BA     EQU   E03SPL10                                                 30580000
@9B5     EQU   E03SPL05                                                 30590000
@9B0     EQU   E03PRT30                                                 30600000
@9AF     EQU   E03PRT35                                                 30610000
@9A9     EQU   E03FMN05                                                 30620000
         END                                                            30630000
