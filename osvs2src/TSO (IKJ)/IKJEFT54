         TITLE 'IKJEFT54, TEXT INSERTION ROUTINE                     '  00001000
IKJEFT54 CSECT ,                                                   0001 00002000
@MAINENT DS    0H                                                  0001 00003000
         USING *,@15                                               0001 00004000
         B     @PROLOG                                             0001 00005000
         DC    AL1(16)                                             0001 00006000
         DC    C'IKJEFT54  73.151'                                 0001 00007000
         DROP  @15                                                      00008000
@PROLOG  STM   @14,@12,12(@13)                                     0001 00009000
         BALR  @12,0                                               0001 00010000
@PSTART  DS    0H                                                  0001 00011000
         USING @PSTART,@12                                         0001 00012000
         L     @00,@SIZDATD                                        0001 00013000
         GETMAIN R,LV=(0)                                               00014000
         LR    @11,@01                                             0001 00015000
         USING @DATD,@11                                           0001 00016000
         ST    @13,@SA00001+4                                      0001 00017000
         LM    @00,@01,20(@13)                                     0001 00018000
         ST    @11,8(,@13)                                         0001 00019000
         LR    @13,@11                                             0001 00020000
         MVC   @PC00001(12),0(@01)                                 0001 00021000
*                                                                  0010 00022000
*   /*****************************************************************/ 00023000
*   /*                                                               */ 00024000
*   /* START EXECUTABLE CODE                                         */ 00025000
*   /*                                                               */ 00026000
*   /*****************************************************************/ 00027000
*                                                                  0010 00028000
*   SAVEREG1=R1;                    /* SAVE REG ONE                  */ 00029000
         LR    SAVEREG1,R1                                         0010 00030000
*   T6=ADDR(OLDX);                  /* OUTPUT LINE DESCRIPTOR        */ 00031000
         L     T6,@PC00001                                         0011 00032000
*   T7=ADDR(ADMSGX);                /* POINT TO OUTPUT AREA          */ 00033000
         L     @14,@PC00001+4                                      0012 00034000
         ST    @14,T7                                              0012 00035000
*   IF CHAINFLG='00'X&              /* IF TEXT-INSERTION IS NOT    0013 00036000
*                                      NEEDED - NO CHAIN,            */ 00037000
*       FORMONLY=0&                 /* NO FORMAT ONLY,               */ 00038000
*       NUMSEGS=1 THEN              /* NO MULTIPLE SEGMENTS          */ 00039000
         CLI   CHAINFLG(@14),0                                     0013 00040000
         BNE   @RF00013                                            0013 00041000
         L     @10,@PC00001+8                                      0013 00042000
         ICM   @07,15,FORMONLY(@10)                                0013 00043000
         BNZ   @RF00013                                            0013 00044000
         CLC   NUMSEGS(4,T6),@CF00035                              0013 00045000
         BNE   @RF00013                                            0013 00046000
*     DO;                                                          0014 00047000
*       ADMSG=SEGAD(1);             /* PNT TO PRIMARY SEGMENT        */ 00048000
         L     @10,SEGAD(,T6)                                      0015 00049000
         ST    @10,ADMSG(,@14)                                     0015 00050000
*       IF ADMSG->SEGLENGH>260|ADMSG->SEGLENGH<4 THEN              0016 00051000
         LH    @14,SEGLENGH(,@10)                                  0016 00052000
         CH    @14,@CH00097                                        0016 00053000
         BH    @RT00016                                            0016 00054000
         CH    @14,@CH00084                                        0016 00055000
         BL    @RT00016                                            0016 00056000
*         GOTO INVALID;             /* IF MESSAGE IS TOO LONG OR TOO    00057000
*                                      SHORT - INVALID               */ 00058000
*       GOTO NORMEND;               /* IF MSG HAS VALID LENGH        */ 00059000
         B     NORMEND                                             0018 00060000
*     END;                                                         0019 00061000
*   LENGTH=0;                       /* INITIALIZE LENGTH FIELD       */ 00062000
@RF00013 SR    LENGTH,LENGTH                                       0020 00063000
*   IF NUMSEGS<1|                   /* IF NUMSEGS IS INVALID         */ 00064000
*       NUMSEGS>256 THEN            /* IF MORE THAN 256 SEGS         */ 00065000
         LA    @14,1                                               0021 00066000
         L     @10,NUMSEGS(,T6)                                    0021 00067000
         CR    @10,@14                                             0021 00068000
         BL    @RT00021                                            0021 00069000
         CH    @10,@CH00100                                        0021 00070000
         BH    @RT00021                                            0021 00071000
*     GOTO INVALID;                                                0022 00072000
*   DO I=1 TO NUMSEGS;              /* SUM THE LENGTHS OF ALL THE  0023 00073000
*                                      TEXT FIELDS                   */ 00074000
         B     @DE00023                                            0023 00075000
@DL00023 DS    0H                                                  0024 00076000
*     T4=SEGAD(I);                  /* LOCATE NEXT SEGMENT           */ 00077000
         LR    @10,@14                                             0024 00078000
         SLA   @10,2                                               0024 00079000
         L     @10,SEGAD-4(@10,T6)                                 0024 00080000
         ST    @10,T4                                              0024 00081000
*     TEXTSIZE=T4->SEGLENGH-4;      /* CALC LEN OF TEXT FIELD        */ 00082000
         LH    TEXTSIZE,SEGLENGH(,@10)                             0025 00083000
         SH    TEXTSIZE,@CH00084                                   0025 00084000
*     IF TEXTSIZE<0 THEN            /* VALIDIDTY CHK SEG LENG        */ 00085000
         LTR   TEXTSIZE,TEXTSIZE                                   0026 00086000
         BM    @RT00026                                            0026 00087000
*       GOTO INVALID;                                              0027 00088000
*     LENGTH=LENGTH+TEXTSIZE;       /* ACCUMULATE TOTALS             */ 00089000
         AR    LENGTH,TEXTSIZE                                     0028 00090000
*   END;                                                           0029 00091000
         AH    @14,@CH00035                                        0029 00092000
@DE00023 STH   @14,I                                               0029 00093000
         C     @14,NUMSEGS(,T6)                                    0029 00094000
         BNH   @DL00023                                            0029 00095000
*   IF LENGTH>256 THEN              /* IF > 256 CHAR IN TEXT         */ 00096000
         CH    LENGTH,@CH00100                                     0030 00097000
         BH    @RT00030                                            0030 00098000
*     GOTO INVALID;                                                0031 00099000
*   IF CHAINFLG^='00'X THEN         /* IF CHAIN FORMAT REQSTED       */ 00100000
         L     @14,T7                                              0032 00101000
         CLI   CHAINFLG(@14),0                                     0032 00102000
         BE    @RF00032                                            0032 00103000
*     DO;                                                          0033 00104000
*       OFFSET=4+4;                 /* IF MESSAGE IS TO BE PLACED ON    00105000
*                                      A CHAIN, MAKE ALLOWANCES FOR     00106000
*                                      GETMAIN LENGTH & SP           */ 00107000
         MVC   OFFSET(2),@CH00058                                  0034 00108000
*       SPOOL=78;                   /* CAUSE GETMAIN FROM 78         */ 00109000
         LA    SPOOL,78                                            0035 00110000
*     END;                                                         0036 00111000
*   ELSE                                                           0037 00112000
*     DO;                                                          0037 00113000
         B     @RC00032                                            0037 00114000
@RF00032 DS    0H                                                  0038 00115000
*       OFFSET=4;                   /* ELSE USE SUBPOOL ONE AND    0038 00116000
*                                      STANDARD LENGTH               */ 00117000
         MVC   OFFSET(2),@CH00084                                  0038 00118000
*       SPOOL=1;                    /* INDICAT NONSHARD SUBPOL       */ 00119000
         LA    @14,1                                               0039 00120000
         LR    SPOOL,@14                                           0039 00121000
*       FRESWICH=1;                 /* BUFFER IS TO BE FREED         */ 00122000
         L     @10,@PC00001+8                                      0040 00123000
         ST    @14,FRESWICH(,@10)                                  0040 00124000
*     END;                                                         0041 00125000
*   LENGTH=LENGTH+OFFSET;           /* DETERMINE TOTAL LENGTH        */ 00126000
@RC00032 AH    LENGTH,OFFSET                                       0042 00127000
*   GEN REFS(SPOOL,GETMANWA,LENGTH)SETS(OBTAINAD);                 0043 00128000
   GETMAIN EC,LV=(LENGTH),SP=(SPOOL),A=OBTAINAD,MF=(E,GETMANWA)         00129000
*   IF R15^=0 THEN                  /* IF GETMAIN WAS NOT            */ 00130000
         LTR   R15,R15                                             0044 00131000
         BZ    @RF00044                                            0044 00132000
*     DO;                           /* SUCCESSFUL                    */ 00133000
*       RETURNCD=16;                /* INDICATE GETMAIN FAILUR       */ 00134000
         LA    RETURNCD,16                                         0046 00135000
*       GOTO EXIT;                                                 0047 00136000
         B     EXIT                                                0047 00137000
*     END;                                                         0048 00138000
*   R1=SAVEREG1;                    /* RESTORE REGISTER 1            */ 00139000
@RF00044 LR    R1,SAVEREG1                                         0049 00140000
*   MSGADDR=OBTAINAD;               /* SAVE ADDR OF STORAGE          */ 00141000
         L     @14,OBTAINAD                                        0050 00142000
         L     @10,T7                                              0050 00143000
         STCM  @14,7,MSGADDR(@10)                                  0050 00144000
*   IF CHAINFLG^=0 THEN                                            0051 00145000
         CLI   CHAINFLG(@10),0                                     0051 00146000
         BE    @RF00051                                            0051 00147000
*     DO;                           /* IF CHAIN WAS REQUESTED THEN 0052 00148000
*                                      PLACE LENGTH FIELD AFTER CHAIN   00149000
*                                      POINTER                       */ 00150000
*       CHANPTR=0;                                                 0053 00151000
         SR    @10,@10                                             0053 00152000
         ST    @10,CHANPTR(,@14)                                   0053 00153000
*       LL=LENGTH-4;                                               0054 00154000
         LA    @07,4                                               0054 00155000
         LR    @09,@14                                             0054 00156000
         AR    @09,@07                                             0054 00157000
         LCR   @07,@07                                             0054 00158000
         AR    @07,LENGTH                                          0054 00159000
         STH   @07,LL(,@09)                                        0054 00160000
*       OO=0;                                                      0055 00161000
         STH   @10,OO+6(,@14)                                      0055 00162000
*     END;                                                         0056 00163000
*   ELSE                                                           0057 00164000
*     DO;                                                          0057 00165000
         B     @RC00051                                            0057 00166000
@RF00051 DS    0H                                                  0058 00167000
*       LLX=LENGTH;                 /* ELSE PLACE LENGTH IN BEGINNING   00168000
*                                      OF BUFFER                     */ 00169000
         L     @14,OBTAINAD                                        0058 00170000
         STH   LENGTH,LLX(,@14)                                    0058 00171000
*       OOX=0;                                                     0059 00172000
         SR    @10,@10                                             0059 00173000
         STH   @10,OOX+2(,@14)                                     0059 00174000
*     END;                                                         0060 00175000
*                                                                  0060 00176000
*   /*****************************************************************/ 00177000
*   /*                                                               */ 00178000
*   /* PERFORM TEXT INSERTION                                        */ 00179000
*   /*                                                               */ 00180000
*   /*****************************************************************/ 00181000
*                                                                  0061 00182000
*   T2=MSGADDR+OFFSET;              /* POINT TO TARGET AREA          */ 00183000
@RC00051 L     @14,T7                                              0061 00184000
         SR    @10,@10                                             0061 00185000
         ICM   @10,7,MSGADDR(@14)                                  0061 00186000
         AH    @10,OFFSET                                          0061 00187000
         ST    @10,T2                                              0061 00188000
*   T3=SEGAD(1);                    /* POINT TO PRIMRY        SEGMENT*/ 00189000
         L     @14,SEGAD(,T6)                                      0062 00190000
         ST    @14,T3                                              0062 00191000
*   B=1;                            /* INITIALIZE B TO 1             */ 00192000
         LA    @10,1                                               0063 00193000
         LR    B,@10                                               0063 00194000
*   C=1;                            /* INITIALIZE C TO 1             */ 00195000
         LR    C,@10                                               0064 00196000
*   IF T3->SEGOFFST^=0 THEN         /* PRIMARY OFFSET NOT ZERO       */ 00197000
         ICM   @05,3,SEGOFFST(@14)                                 0065 00198000
         BNZ   @RT00065                                            0065 00199000
*     GOTO INVALID1;                                               0066 00200000
*   IF NUMSEGS=1 THEN               /* IF ONLY 1 SEGMNT EXISTS       */ 00201000
         C     @10,NUMSEGS(,T6)                                    0067 00202000
         BE    @RT00067                                            0067 00203000
*     GOTO LASTMOVE;                                               0068 00204000
*                                                                  0068 00205000
*   /*****************************************************************/ 00206000
*   /*                                                               */ 00207000
*   /* IN THE FOLLOWING ALGORITHM THE VARIABLES A,B, AND C WILL HAVE */ 00208000
*   /* THE FOLLOWING MEANINGS. A IS THE LENGTH OF A SEGMENT TO BE    */ 00209000
*   /* MOVED, B IS THE IS THE DISPLACEMENT PAST THE ORIGIN OF THE    */ 00210000
*   /* FINAL MESSAGE TEXT WHERE THE SEGMENT IS TO BE MOVED AND C IS A*/ 00211000
*   /* DISPLACEMENT FROM THE ORIGIN OF THE PRIMARY MESSAGE SEGMENT   */ 00212000
*   /* (MESSAGE SEGMENT #1) WHERE A MOVE IS TO START FROM.           */ 00213000
*   /*                                                               */ 00214000
*   /*****************************************************************/ 00215000
*                                                                  0069 00216000
*   DO I=2 TO NUMSEGS;              /* START DO LOOP                 */ 00217000
*                                                                  0069 00218000
         LA    @14,2                                               0069 00219000
         B     @DE00069                                            0069 00220000
@DL00069 DS    0H                                                  0070 00221000
*     /***************************************************************/ 00222000
*     /*                                                             */ 00223000
*     /* MOVE FROM PRIMARY SEGMENT                                   */ 00224000
*     /*                                                             */ 00225000
*     /***************************************************************/ 00226000
*                                                                  0070 00227000
*     T4=SEGAD(I);                  /* POINT TO NEXT SEGMENT         */ 00228000
         SLA   @14,2                                               0070 00229000
         L     @10,SEGAD-4(@14,T6)                                 0070 00230000
         ST    @10,T4                                              0070 00231000
*     T5=SEGAD(I-1);                /* POINT TO PREVIOUS SEG         */ 00232000
         AL    @14,@CF00116                                        0071 00233000
         L     T5,SEGAD-4(@14,T6)                                  0071 00234000
*     A=T4->SEGOFFST-T5->SEGOFFST;  /* CALCULATE NUM OF BYTES TO MOVE   00235000
*                                      FROM PRIME SEGMENT            */ 00236000
         LH    @14,SEGOFFST(,@10)                                  0072 00237000
         LR    @10,@14                                             0072 00238000
         SH    @10,SEGOFFST(,T5)                                   0072 00239000
         STH   @10,A                                               0072 00240000
*     IF A<0|                       /* IF SEGS ARE OUT OF ORDER      */ 00241000
*         T3->SEGLENGH<T4->SEGOFFST+4 THEN/* OR IS OFFSET IS TOO BIG */ 00242000
         LTR   @10,@10                                             0073 00243000
         BM    @RT00073                                            0073 00244000
         AH    @14,@CH00084                                        0073 00245000
         L     @10,T3                                              0073 00246000
         CH    @14,SEGLENGH(,@10)                                  0073 00247000
         BNH   @RF00073                                            0073 00248000
@RT00073 DS    0H                                                  0074 00249000
*       DO;                                                        0074 00250000
*INVALID1:                                                         0075 00251000
*         SUBPOOL1=GETSP;           /* INDICATE SUBPOOL              */ 00252000
INVALID1 MVC   SUBPOOL1(1),GETSP                                   0075 00253000
*         FRELEN=GETMLEN;           /* AMOUNT TO BE FREED            */ 00254000
         MVC   FRELEN(3),GETMLEN+1                                 0076 00255000
*         R1=MSGADDR;               /* POINT TO OBTAIND BUFFER       */ 00256000
         L     @14,T7                                              0077 00257000
         SR    R1,R1                                               0077 00258000
         ICM   R1,7,MSGADDR(@14)                                   0077 00259000
*         R0=FREEREG0;              /* PLACE FREMAIN PARM IN 0       */ 00260000
         L     R0,FREEREG0                                         0078 00261000
*         GEN(FREEMAIN R,LV=(0),A=(1));/* FREE THE BUFFER            */ 00262000
         FREEMAIN R,LV=(0),A=(1)                                        00263000
*INVALID:                                                          0080 00264000
*         RETURNCD=12;              /* INDICATE INVALID PARMS        */ 00265000
INVALID  LA    RETURNCD,12                                         0080 00266000
*         GOTO EXIT;                                               0081 00267000
         B     EXIT                                                0081 00268000
*       END;                                                       0082 00269000
*     IF C^>T3->SEGLENGH-4 THEN                                    0083 00270000
@RF00073 L     @14,T3                                              0083 00271000
         LH    @10,SEGLENGH(,@14)                                  0083 00272000
         SH    @10,@CH00084                                        0083 00273000
         CR    C,@10                                               0083 00274000
         BH    @RF00083                                            0083 00275000
*       DO;                                                        0084 00276000
*         X=A+B-1;                                                 0085 00277000
         LH    @10,A                                               0085 00278000
         LR    X,B                                                 0085 00279000
         AR    X,@10                                               0085 00280000
         BCTR  X,0                                                 0085 00281000
*         IF B>X THEN               /* NO PRIMARY MOVEMENT           */ 00282000
         CR    B,X                                                 0086 00283000
         BH    @RT00086                                            0086 00284000
*           GOTO MOVESEGI;                                         0087 00285000
*         T2->MESSAGE(B:X)=T3->SEGTEXT(C:C+X-B);/* MOVE PORTION OF 0088 00286000
*                                      PRIMARY SEGMENT INTO TARGET   */ 00287000
         L     @09,T2                                              0088 00288000
         ALR   @09,B                                               0088 00289000
         AL    @09,@CF00117                                        0088 00290000
         LR    @08,X                                               0088 00291000
         SR    @08,B                                               0088 00292000
         ALR   @14,C                                               0088 00293000
         EX    @08,@SM00118                                        0088 00294000
*         C=C+A;                    /* INCREMENT PTR TO NEXT BYTE IN    00295000
*                                      PRIMARY                SEGMENT*/ 00296000
         AR    C,@10                                               0089 00297000
*       END;                        /* END MOVE FROM PRIME SEG       */ 00298000
*                                                                  0090 00299000
*     /***************************************************************/ 00300000
*     /*                                                             */ 00301000
*     /* MOVE TEXT SEGMENT                                           */ 00302000
*     /*                                                             */ 00303000
*     /***************************************************************/ 00304000
*                                                                  0091 00305000
*     B=A+B;                        /* UPDATE INDEX TO NEXT BYTE IN     00306000
*                                      TARGET                        */ 00307000
@RF00083 AH    B,A                                                 0091 00308000
*     IF T4->SEGLENGH=4 THEN                                       0092 00309000
         L     @14,T4                                              0092 00310000
         CLC   SEGLENGH(2,@14),@CH00084                            0092 00311000
         BE    @RT00092                                            0092 00312000
*       GOTO ENDLOOP;               /* IF SEGMENT IS NULL LINE       */ 00313000
*MOVESEGI:                                                         0094 00314000
*     X=T4->SEGLENGH-4+B-1;         /* ESTABLISH LAST BYTE IN TARGET    00315000
*                                      FOR THIS MOVE                 */ 00316000
MOVESEGI L     @14,T4                                              0094 00317000
         LH    X,SEGLENGH(,@14)                                    0094 00318000
         SH    X,@CH00084                                          0094 00319000
         AR    X,B                                                 0094 00320000
         BCTR  X,0                                                 0094 00321000
*     T2->MESSAGE(B:X)=T4->SEGTEXT; /* MOVE SEGMENT TO TARGET        */ 00322000
         L     @10,T2                                              0095 00323000
         ALR   @10,B                                               0095 00324000
         AL    @10,@CF00117                                        0095 00325000
         LR    @09,X                                               0095 00326000
         SR    @09,B                                               0095 00327000
         EX    @09,@SM00120                                        0095 00328000
*     B=X+1;                        /* UPDATE INDEX PTR TO NEXT BYTE    00329000
*                                      IN TARGET                     */ 00330000
         LA    B,1                                                 0096 00331000
         AR    B,X                                                 0096 00332000
*ENDLOOP:                                                          0097 00333000
*   END;                                                           0097 00334000
ENDLOOP  LA    @14,1                                               0097 00335000
         AH    @14,I                                               0097 00336000
@DE00069 STH   @14,I                                               0097 00337000
         C     @14,NUMSEGS(,T6)                                    0097 00338000
         BNH   @DL00069                                            0097 00339000
*   IF C^>T3->SEGLENGH-4 THEN                                      0098 00340000
         L     @14,T3                                              0098 00341000
         LH    @14,SEGLENGH(,@14)                                  0098 00342000
         SH    @14,@CH00084                                        0098 00343000
         CR    C,@14                                               0098 00344000
         BH    @RF00098                                            0098 00345000
*     DO;                                                          0099 00346000
*LASTMOVE:                                                         0100 00347000
*       T4=OBTAINAD+OFFSET-4;       /* POINT TO TARGET HEADER        */ 00348000
LASTMOVE LA    @14,4                                               0100 00349000
         LH    @10,OFFSET                                          0100 00350000
         A     @10,OBTAINAD                                        0100 00351000
         SR    @10,@14                                             0100 00352000
         ST    @10,T4                                              0100 00353000
*       X=T4->SEGLENGH-4;           /* POINT TO LAST BYTE            */ 00354000
         LCR   @14,@14                                             0101 00355000
         AH    @14,SEGLENGH(,@10)                                  0101 00356000
         LR    X,@14                                               0101 00357000
*       T2->MESSAGE(B:X)=T3->SEGTEXT(C:C+X-B);/* MOVE LAST SECTION   */ 00358000
         L     @14,T2                                              0102 00359000
         ALR   @14,B                                               0102 00360000
         AL    @14,@CF00117                                        0102 00361000
         LR    @10,X                                               0102 00362000
         SR    @10,B                                               0102 00363000
         L     @06,T3                                              0102 00364000
         ALR   @06,C                                               0102 00365000
         EX    @10,@SM00122                                        0102 00366000
*     END;                                                         0103 00367000
*NORMEND:                                                          0104 00368000
*   RETURNCD=0;                     /* INDICATE NORMAL COMPLTN       */ 00369000
@RF00098 DS    0H                                                  0104 00370000
NORMEND  SR    RETURNCD,RETURNCD                                   0104 00371000
*EXIT:                                                             0105 00372000
*   RETURN CODE(RETURNCD);                                         0105 00373000
EXIT     L     @13,4(,@13)                                         0105 00374000
         L     @00,@SIZDATD                                        0105 00375000
         LR    @01,@11                                             0105 00376000
         FREEMAIN R,LV=(0),A=(1)                                        00377000
         LR    @15,@04                                             0105 00378000
         L     @14,12(,@13)                                        0105 00379000
         LM    @00,@12,20(@13)                                     0105 00380000
         BR    @14                                                 0105 00381000
*   END IKJEFT54;                                                  0106 00382000
@DATA    DS    0H                                                       00383000
@CH00084 DC    H'4'                                                     00384000
@CH00058 DC    H'8'                                                     00385000
@CH00100 DC    H'256'                                                   00386000
@CH00097 DC    H'260'                                                   00387000
@SM00118 MVC   MESSAGE(0,@09),SEGTEXT-1(@14)                            00388000
@SM00120 MVC   MESSAGE(0,@10),SEGTEXT(@14)                              00389000
@SM00122 MVC   MESSAGE(0,@14),SEGTEXT-1(@06)                            00390000
@DATD    DSECT                                                          00391000
         DS    0F                                                       00392000
@SA00001 DS    18F                                                      00393000
@PC00001 DS    3F                                                       00394000
IKJEFT54 CSECT                                                          00395000
         DS    0F                                                       00396000
@CF00116 DC    F'-4'                                                    00397000
@CF00117 DC    F'-1'                                                    00398000
@CF00035 DC    F'1'                                                     00399000
@CH00035 EQU   @CF00035+2                                               00400000
@DATD    DSECT                                                          00401000
         DS    0D                                                       00402000
T2       DS    A                                                        00403000
T3       DS    A                                                        00404000
T4       DS    A                                                        00405000
T7       DS    A                                                        00406000
OBTAINAD DS    A                                                        00407000
FREEREG0 DS    AL4                                                      00408000
         ORG   FREEREG0                                                 00409000
SUBPOOL1 DS    AL1                                                      00410000
FRELEN   DS    AL3                                                      00411000
         ORG   FREEREG0+4                                               00412000
OFFSET   DS    H                                                        00413000
I        DS    H                                                        00414000
A        DS    H                                                        00415000
         DS    CL2                                                      00416000
GETMANWA DS    CL10                                                     00417000
         ORG   GETMANWA                                                 00418000
GETMLEN  DS    FL4                                                      00419000
@NM00001 DS    CL5                                                      00420000
GETSP    DS    AL1                                                      00421000
         ORG   GETMANWA+10                                              00422000
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA                00423000
@ENDDATD EQU   *                                                        00424000
IKJEFT54 CSECT                                                          00425000
         DS    0F                                                       00426000
@SIZDATD DC    AL1(1)                                                   00427000
         DC    AL3(@ENDDATD-@DATD)                                      00428000
         DS    0D                                                       00429000
@00      EQU   00                      EQUATES FOR REGISTERS 0-15       00430000
@01      EQU   01                                                       00431000
@02      EQU   02                                                       00432000
@03      EQU   03                                                       00433000
@04      EQU   04                                                       00434000
@05      EQU   05                                                       00435000
@06      EQU   06                                                       00436000
@07      EQU   07                                                       00437000
@08      EQU   08                                                       00438000
@09      EQU   09                                                       00439000
@10      EQU   10                                                       00440000
@11      EQU   11                                                       00441000
@12      EQU   12                                                       00442000
@13      EQU   13                                                       00443000
@14      EQU   14                                                       00444000
@15      EQU   15                                                       00445000
TEXTSIZE EQU   @04                                                      00446000
X        EQU   @05                                                      00447000
C        EQU   @07                                                      00448000
B        EQU   @04                                                      00449000
T6       EQU   @06                                                      00450000
T5       EQU   @05                                                      00451000
RETURNCD EQU   @04                                                      00452000
SAVEREG1 EQU   @05                                                      00453000
R0       EQU   @00                                                      00454000
R1       EQU   @01                                                      00455000
R15      EQU   @15                                                      00456000
LENGTH   EQU   @02                                                      00457000
SPOOL    EQU   @03                                                      00458000
OLD      EQU   0                                                        00459000
NUMSEGS  EQU   OLD                                                      00460000
SEGAD    EQU   OLD+4                                                    00461000
ADMSG    EQU   0                                                        00462000
CHAINFLG EQU   ADMSG                                                    00463000
MSGADDR  EQU   ADMSG+1                                                  00464000
SEGMENT  EQU   0                                                        00465000
SEGLENGH EQU   SEGMENT                                                  00466000
SEGOFFST EQU   SEGMENT+2                                                00467000
SEGTEXT  EQU   SEGMENT+4                                                00468000
CHANPTR  EQU   0                                                        00469000
LL       EQU   0                                                        00470000
OO       EQU   0                                                        00471000
LLX      EQU   0                                                        00472000
OOX      EQU   0                                                        00473000
MESSAGE  EQU   0                                                        00474000
OLDX     EQU   0                                                        00475000
ADMSGX   EQU   0                                                        00476000
FORMONLY EQU   0                                                        00477000
FRESWICH EQU   FORMONLY                                                 00478000
@RT00016 EQU   INVALID                                                  00479000
@RT00021 EQU   INVALID                                                  00480000
@RT00026 EQU   INVALID                                                  00481000
@RT00030 EQU   INVALID                                                  00482000
@RT00065 EQU   INVALID1                                                 00483000
@RT00067 EQU   LASTMOVE                                                 00484000
@RT00086 EQU   MOVESEGI                                                 00485000
@RT00092 EQU   ENDLOOP                                                  00486000
@ENDDATA EQU   *                                                        00487000
         END   IKJEFT54                                                 00488000
